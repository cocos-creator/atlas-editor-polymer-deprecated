// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";

try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
} else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  Module['printErr'] = printErr;

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WEB) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }

  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...

  Module['load'] = importScripts;

} else {
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['printErr']) {
  Module['printErr'] = function(){};
}
if (!Module['print']) {
  Module['print'] = Module['printErr'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          return [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
        case 'ashr':
          return [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
        case 'lshr':
          return [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          return [0, low];
        case 'ashr':
          return [high, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high, 0];
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          return [0, low << (bits - 32)];
        case 'ashr':
          return [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high >>>  (bits - 32) , 0];
      }
    }
    abort('unknown bitshift64 op: ' + [value, op, bits]);
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type[type.length-1] == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      assert(type.fields.length === struct.length, 'Number of named fields must match the type for ' + typeName);
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  addFunction: function (func) {
    var ret = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(func);
    FUNCTION_TABLE.push(0);
    return ret;
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP += size;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Adding
//
//         __attribute__((used))
//
//       to the function definition will prevent that.
//
// Note: Closure optimizations will minify function names, making
//       functions no longer callable. If you run closure (on by default
//       in -O2 and above), you should export the functions you will call
//       by calling emcc with something like
//
//         -s EXPORTED_FUNCTIONS='["_func1","_func2"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
Module["ccall"] = ccall;

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  // TODO: optimize this, eval the whole function once instead of going through ccall each time
  return function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': HEAP32[((ptr)>>2)]=value; break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (tempDoubleF64[0]=value,HEAP32[((ptr)>>2)]=tempDoubleI32[0],HEAP32[((ptr+4)>>2)]=tempDoubleI32[1]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (tempDoubleI32[0]=HEAP32[((ptr)>>2)],tempDoubleI32[1]=HEAP32[((ptr+4)>>2)],tempDoubleF64[0]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

// Allocates memory for some data and initializes it properly.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAPU8[(ptr+i)]);
    if (nullTerminated && t == nullByte) { break; } else {}
    ret += t;
    i += 1;
    if (!nullTerminated && i == length) { break; }
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [STATICTOP, TOTAL_MEMORY]);
  assert(STATICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

var base = intArrayFromString('(null)'); // So printing %s of NULL gives '(null)'
                                         // Also this ensures we leave 0 as an invalid address, 'NULL'
STATICTOP = base.length;
for (var i = 0; i < base.length; i++) {
  HEAP8[(i)]=base[i]
}

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(STATICTOP);
STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);
var tempDoubleI8  = HEAP8.subarray(tempDoublePtr);
var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);
var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);
var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
  tempDoubleI8[4] = HEAP8[ptr+4];
  tempDoubleI8[5] = HEAP8[ptr+5];
  tempDoubleI8[6] = HEAP8[ptr+6];
  tempDoubleI8[7] = HEAP8[ptr+7];
}
STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}


// Copies a list of num items on the HEAP into a
// a normal JavaScript array of numbers
function Array_copy(ptr, num) {
  return Array.prototype.slice.call(HEAP8.subarray(ptr, ptr+num)); // Make a normal array out of the typed 'view'
                                                                   // Consider making a typed array here, for speed?
  return HEAP.slice(ptr, ptr+num);
}
Module['Array_copy'] = Array_copy;

// Copies a list of num items on the HEAP into a
// JavaScript typed array.
function TypedArray_copy(ptr, num, offset /*optional*/) {
  // TODO: optimize this!
  if (offset === undefined) {
    offset = 0;
  }
  var arr = new Uint8Array(num - offset);
  for (var i = offset; i < num; ++i) {
    arr[i - offset] = HEAP8[(ptr+i)];
  }
  return arr.buffer;
}
Module['TypedArray_copy'] = TypedArray_copy;

function String_len(ptr) {
  var i = 0;
  while (HEAP8[(ptr+i)]) i++; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i;
}
Module['String_len'] = String_len;

// Copies a C-style string, terminated by a zero, from the HEAP into
// a normal JavaScript array of numbers
function String_copy(ptr, addZero) {
  var len = String_len(ptr);
  if (addZero) len++;
  var ret = Array_copy(ptr, len);
  if (addZero) ret[len-1] = 0;
  return ret;
}
Module['String_copy'] = String_copy;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = [];
  var t;
  var i = 0;
  if (length === undefined) {
    length = stringy.length;
  }
  while (i < length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + stringy[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var i = 0;
  while (i < string.length) {
    var chr = string.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + string[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    HEAP8[(buffer+i)]=chr
    i = i + 1;
  }
  if (!dontAddNull) {
    HEAP8[(buffer+i)]=0
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(buffer+i)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in Module.preRun
// or PRE_RUN_ADDITIONS (used by emcc to add file preloading).
var runDependencies = 0;
function addRunDependency() {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
function removeRunDependency() {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) run();
}

// === Body ===




function _pngcrush_default_read_data($png_ptr, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $data_addr;
      var $length_addr;
      var $check;
      var $io_ptr;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $call=_png_get_io_ptr($0);
      var $1=$call;
      $io_ptr=$1;
      var $2=$data_addr;
      var $3=$length_addr;
      var $4=$io_ptr;
      var $call1=_fread($2, 1, $3, $4);
      $check=$call1;
      var $5=$check;
      var $6=$length_addr;
      var $cmp=(($5)|0)!=(($6)|0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $7=$png_ptr_addr;
      _png_error($7, ((STRING_TABLE.__str)|0));
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_defaultwrite_data($png_ptr, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $data_addr;
      var $length_addr;
      var $check;
      var $io_ptr;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $call=_png_get_io_ptr($0);
      var $1=$call;
      $io_ptr=$1;
      var $2=$data_addr;
      var $3=$length_addr;
      var $4=$io_ptr;
      var $call1=_fwrite($2, 1, $3, $4);
      $check=$call1;
      var $5=$check;
      var $6=$length_addr;
      var $cmp=(($5)|0)!=(($6)|0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $7=$png_ptr_addr;
      _png_error($7, ((STRING_TABLE.__str1)|0));
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_debug_malloc($png_ptr, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $size_addr;
      var $pinfo;
      $png_ptr_addr=$png_ptr;
      $size_addr=$size;
      var $0=$size_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 8; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $call=_png_malloc_default($1, 12);
      var $2=$call;
      $pinfo=$2;
      var $3=$size_addr;
      var $4=$pinfo;
      var $size1=(($4)|0);
      HEAP32[(($size1)>>2)]=$3;
      var $5=$size_addr;
      var $6=HEAP32[((_current_allocation)>>2)];
      var $add=(($6+$5)|0);
      HEAP32[((_current_allocation)>>2)]=$add;
      var $7=HEAP32[((_current_allocation)>>2)];
      var $8=HEAP32[((_maximum_allocation)>>2)];
      var $cmp2=(($7)|0) > (($8)|0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $9=HEAP32[((_current_allocation)>>2)];
      HEAP32[((_maximum_allocation)>>2)]=$9;
      __label__ = 5; break;
    case 5: 
      var $10=$png_ptr_addr;
      var $11=$size_addr;
      var $call5=_png_malloc_default($10, $11);
      var $12=$pinfo;
      var $pointer=(($12+4)|0);
      HEAP32[(($pointer)>>2)]=$call5;
      var $13=HEAP32[((_pinformation)>>2)];
      var $14=$pinfo;
      var $next=(($14+8)|0);
      HEAP32[(($next)>>2)]=$13;
      var $15=$pinfo;
      HEAP32[((_pinformation)>>2)]=$15;
      var $16=$pinfo;
      var $pointer6=(($16+4)|0);
      var $17=HEAP32[(($pointer6)>>2)];
      var $18=$pinfo;
      var $size7=(($18)|0);
      var $19=HEAP32[(($size7)>>2)];
      _memset($17, -35, $19, 1);
      var $20=HEAP32[((_verbose)>>2)];
      var $cmp8=(($20)|0) > 2;
      if ($cmp8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $21=HEAP32[((_stdout)>>2)];
      var $22=$pinfo;
      var $pointer10=(($22+4)|0);
      var $23=HEAP32[(($pointer10)>>2)];
      var $24=$23;
      var $25=$size_addr;
      var $call11=_fprintf($21, ((STRING_TABLE.__str2)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$24,HEAP32[((tempInt+4)>>2)]=$25,tempInt));
      __label__ = 7; break;
    case 7: 
      var $26=$pinfo;
      var $pointer13=(($26+4)|0);
      var $27=HEAP32[(($pointer13)>>2)];
      $retval=$27;
      __label__ = 8; break;
    case 8: 
      var $28=$retval;
      ;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_debug_malloc["X"]=1;

function _png_debug_free($png_ptr, $ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ptr_addr;
      var $ppinfo;
      var $pinfo;
      $png_ptr_addr=$png_ptr;
      $ptr_addr=$ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($1, ((STRING_TABLE.__str3)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 3; break;
    case 3: 
      var $2=$ptr_addr;
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 16; break;
    case 5: 
      $ppinfo=_pinformation;
      __label__ = 6; break;
    case 6: 
      var $3=$ppinfo;
      var $4=HEAP32[(($3)>>2)];
      $pinfo=$4;
      var $5=$pinfo;
      var $pointer=(($5+4)|0);
      var $6=HEAP32[(($pointer)>>2)];
      var $7=$ptr_addr;
      var $cmp4=(($6)|0)==(($7)|0);
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $8=$pinfo;
      var $next=(($8+8)|0);
      var $9=HEAP32[(($next)>>2)];
      var $10=$ppinfo;
      HEAP32[(($10)>>2)]=$9;
      var $11=$pinfo;
      var $size=(($11)|0);
      var $12=HEAP32[(($size)>>2)];
      var $13=HEAP32[((_current_allocation)>>2)];
      var $sub=(($13-$12)|0);
      HEAP32[((_current_allocation)>>2)]=$sub;
      var $14=HEAP32[((_current_allocation)>>2)];
      var $cmp6=(($14)|0) < 0;
      if ($cmp6) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $15=HEAP32[((_stdout)>>2)];
      var $call8=_fprintf($15, ((STRING_TABLE.__str4)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 9; break;
    case 9: 
      var $16=$ptr_addr;
      var $17=$pinfo;
      var $size10=(($17)|0);
      var $18=HEAP32[(($size10)>>2)];
      _memset($16, 85, $18, 1);
      var $19=HEAP32[((_verbose)>>2)];
      var $cmp11=(($19)|0) > 2;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $20=HEAP32[((_stdout)>>2)];
      var $21=$ptr_addr;
      var $22=$21;
      var $23=$pinfo;
      var $size13=(($23)|0);
      var $24=HEAP32[(($size13)>>2)];
      var $call14=_fprintf($20, ((STRING_TABLE.__str5)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$22,HEAP32[((tempInt+4)>>2)]=$24,tempInt));
      __label__ = 11; break;
    case 11: 
      var $25=$png_ptr_addr;
      var $26=$pinfo;
      var $27=$26;
      _png_free_default($25, $27);
      __label__ = 15; break;
    case 12: 
      var $28=$pinfo;
      var $next17=(($28+8)|0);
      var $29=HEAP32[(($next17)>>2)];
      var $cmp18=(($29)|0)==0;
      if ($cmp18) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $30=HEAP32[((_stdout)>>2)];
      var $31=$ptr_addr;
      var $32=$31;
      var $call20=_fprintf($30, ((STRING_TABLE.__str6)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$32,tempInt));
      __label__ = 15; break;
    case 14: 
      var $33=$pinfo;
      var $next22=(($33+8)|0);
      $ppinfo=$next22;
      __label__ = 6; break;
    case 15: 
      var $34=$png_ptr_addr;
      var $35=$ptr_addr;
      _png_free_default($34, $35);
      __label__ = 16; break;
    case 16: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_debug_free["X"]=1;

function _pngcrush_pause() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $keystroke;
      var $0=HEAP32[((_pauses)>>2)];
      var $cmp=(($0)|0) > 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($1, ((STRING_TABLE.__str7)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stdin)>>2)];
      var $call1=_getc($2);
      var $conv=(($call1) & 255);
      $keystroke=$conv;
      var $3=$keystroke;
      $keystroke=$3;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_skip_chunk($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $buff=__stackBase__;
      var $i;
      var $length;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $arraydecay=(($buff)|0);
      _pngcrush_default_read_data($0, $arraydecay, 4);
      var $arrayidx=(($buff+3)|0);
      var $1=HEAPU8[($arrayidx)];
      var $conv=(($1)&255);
      var $arrayidx1=(($buff+2)|0);
      var $2=HEAPU8[($arrayidx1)];
      var $conv2=(($2)&255);
      var $shl=$conv2 << 8;
      var $add=(($conv+$shl)|0);
      var $arrayidx3=(($buff+1)|0);
      var $3=HEAPU8[($arrayidx3)];
      var $conv4=(($3)&255);
      var $shl5=$conv4 << 16;
      var $add6=(($add+$shl5)|0);
      var $arrayidx7=(($buff)|0);
      var $4=HEAPU8[($arrayidx7)];
      var $conv8=(($4)&255);
      var $shl9=$conv8 << 24;
      var $add10=(($add6+$shl9)|0);
      $length=$add10;
      var $5=$png_ptr_addr;
      var $arraydecay11=(($buff)|0);
      _pngcrush_default_read_data($5, $arraydecay11, 4);
      var $6=HEAP32[((_verbose)>>2)];
      var $cmp=(($6)|0) > 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $arrayidx13=(($buff)|0);
      var $7=HEAPU8[($arrayidx13)];
      var $conv14=(($7)&255);
      var $arrayidx15=(($buff+1)|0);
      var $8=HEAPU8[($arrayidx15)];
      var $conv16=(($8)&255);
      var $arrayidx17=(($buff+2)|0);
      var $9=HEAPU8[($arrayidx17)];
      var $conv18=(($9)&255);
      var $arrayidx19=(($buff+3)|0);
      var $10=HEAPU8[($arrayidx19)];
      var $conv20=(($10)&255);
      var $call=_printf(((STRING_TABLE.__str8)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv14,HEAP32[((tempInt+4)>>2)]=$conv16,HEAP32[((tempInt+8)>>2)]=$conv18,HEAP32[((tempInt+12)>>2)]=$conv20,tempInt));
      __label__ = 3; break;
    case 3: 
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $11=$i;
      var $12=$length;
      var $cmp21=(($11)>>>0) < (($12)>>>0);
      if ($cmp21) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $13=$png_ptr_addr;
      var $arraydecay23=(($buff)|0);
      _pngcrush_default_read_data($13, $arraydecay23, 1);
      __label__ = 6; break;
    case 6: 
      var $14=$i;
      var $inc=(($14+1)|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      var $15=$png_ptr_addr;
      var $arraydecay24=(($buff)|0);
      _pngcrush_default_read_data($15, $arraydecay24, 4);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_skip_chunk["X"]=1;

function _keep_unknown_chunk($name, $argv) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $name_addr;
      var $argv_addr;
      var $i;
      var $allb;
      $name_addr=$name;
      $argv_addr=$argv;
      var $0=HEAP32[((_remove_chunks)>>2)];
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=1;
      __label__ = 47; break;
    case 3: 
      $i=1;
      __label__ = 4; break;
    case 4: 
      var $1=$i;
      var $2=HEAP32[((_remove_chunks)>>2)];
      var $cmp1=(($1)|0) <= (($2)|0);
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 46; break; }
    case 5: 
      var $3=$i;
      var $4=$argv_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $call=_strncmp($5, ((STRING_TABLE.__str9)|0), 4);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 44; break; } else { __label__ = 6; break; }
    case 6: 
      $allb=0;
      var $6=$i;
      var $inc=(($6+1)|0);
      $i=$inc;
      var $7=$i;
      var $8=$argv_addr;
      var $arrayidx3=(($8+($7<<2))|0);
      var $9=HEAP32[(($arrayidx3)>>2)];
      var $call4=_strncmp($9, ((STRING_TABLE.__str10)|0), 3);
      var $tobool5=(($call4)|0)!=0;
      if ($tobool5) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $10=$allb;
      var $inc7=(($10+1)|0);
      $allb=$inc7;
      __label__ = 8; break;
    case 8: 
      var $11=$i;
      var $12=$argv_addr;
      var $arrayidx9=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx9)>>2)];
      var $14=$name_addr;
      var $call10=_strncmp($13, $14, 4);
      var $tobool11=(($call10)|0)!=0;
      if ($tobool11) { __label__ = 9; break; } else { __label__ = 42; break; }
    case 9: 
      var $15=$name_addr;
      var $call12=_strncmp($15, ((STRING_TABLE.__str11)|0), 4);
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) { __label__ = 12; break; } else { __label__ = 10; break; }
    case 10: 
      var $16=$i;
      var $17=$argv_addr;
      var $arrayidx14=(($17+($16<<2))|0);
      var $18=HEAP32[(($arrayidx14)>>2)];
      var $call15=_strncmp($18, ((STRING_TABLE.__str12)|0), 4);
      var $tobool16=(($call15)|0)!=0;
      if ($tobool16) { __label__ = 11; break; } else { __label__ = 42; break; }
    case 11: 
      var $19=$allb;
      var $tobool18=(($19)|0)!=0;
      if ($tobool18) { __label__ = 42; break; } else { __label__ = 12; break; }
    case 12: 
      var $20=$name_addr;
      var $call20=_strncmp($20, ((STRING_TABLE.__str13)|0), 4);
      var $tobool21=(($call20)|0)!=0;
      if ($tobool21) { __label__ = 15; break; } else { __label__ = 13; break; }
    case 13: 
      var $21=$i;
      var $22=$argv_addr;
      var $arrayidx23=(($22+($21<<2))|0);
      var $23=HEAP32[(($arrayidx23)>>2)];
      var $call24=_strncmp($23, ((STRING_TABLE.__str14)|0), 4);
      var $tobool25=(($call24)|0)!=0;
      if ($tobool25) { __label__ = 14; break; } else { __label__ = 42; break; }
    case 14: 
      var $24=$allb;
      var $tobool27=(($24)|0)!=0;
      if ($tobool27) { __label__ = 42; break; } else { __label__ = 15; break; }
    case 15: 
      var $25=$name_addr;
      var $call29=_strncmp($25, ((STRING_TABLE.__str15)|0), 4);
      var $tobool30=(($call29)|0)!=0;
      if ($tobool30) { __label__ = 18; break; } else { __label__ = 16; break; }
    case 16: 
      var $26=$i;
      var $27=$argv_addr;
      var $arrayidx32=(($27+($26<<2))|0);
      var $28=HEAP32[(($arrayidx32)>>2)];
      var $call33=_strncmp($28, ((STRING_TABLE.__str16)|0), 4);
      var $tobool34=(($call33)|0)!=0;
      if ($tobool34) { __label__ = 17; break; } else { __label__ = 42; break; }
    case 17: 
      var $29=$allb;
      var $tobool36=(($29)|0)!=0;
      if ($tobool36) { __label__ = 42; break; } else { __label__ = 18; break; }
    case 18: 
      var $30=$name_addr;
      var $call38=_strncmp($30, ((STRING_TABLE.__str17)|0), 4);
      var $tobool39=(($call38)|0)!=0;
      if ($tobool39) { __label__ = 21; break; } else { __label__ = 19; break; }
    case 19: 
      var $31=$i;
      var $32=$argv_addr;
      var $arrayidx41=(($32+($31<<2))|0);
      var $33=HEAP32[(($arrayidx41)>>2)];
      var $call42=_strncmp($33, ((STRING_TABLE.__str18)|0), 4);
      var $tobool43=(($call42)|0)!=0;
      if ($tobool43) { __label__ = 20; break; } else { __label__ = 42; break; }
    case 20: 
      var $34=$allb;
      var $tobool45=(($34)|0)!=0;
      if ($tobool45) { __label__ = 42; break; } else { __label__ = 21; break; }
    case 21: 
      var $35=$name_addr;
      var $call47=_strncmp($35, ((STRING_TABLE.__str19)|0), 4);
      var $tobool48=(($call47)|0)!=0;
      if ($tobool48) { __label__ = 24; break; } else { __label__ = 22; break; }
    case 22: 
      var $36=$i;
      var $37=$argv_addr;
      var $arrayidx50=(($37+($36<<2))|0);
      var $38=HEAP32[(($arrayidx50)>>2)];
      var $call51=_strncmp($38, ((STRING_TABLE.__str20)|0), 4);
      var $tobool52=(($call51)|0)!=0;
      if ($tobool52) { __label__ = 23; break; } else { __label__ = 42; break; }
    case 23: 
      var $39=$allb;
      var $tobool54=(($39)|0)!=0;
      if ($tobool54) { __label__ = 42; break; } else { __label__ = 24; break; }
    case 24: 
      var $40=$name_addr;
      var $call56=_strncmp($40, ((STRING_TABLE.__str21)|0), 4);
      var $tobool57=(($call56)|0)!=0;
      if ($tobool57) { __label__ = 27; break; } else { __label__ = 25; break; }
    case 25: 
      var $41=$i;
      var $42=$argv_addr;
      var $arrayidx59=(($42+($41<<2))|0);
      var $43=HEAP32[(($arrayidx59)>>2)];
      var $call60=_strncmp($43, ((STRING_TABLE.__str22)|0), 4);
      var $tobool61=(($call60)|0)!=0;
      if ($tobool61) { __label__ = 26; break; } else { __label__ = 42; break; }
    case 26: 
      var $44=$allb;
      var $tobool63=(($44)|0)!=0;
      if ($tobool63) { __label__ = 42; break; } else { __label__ = 27; break; }
    case 27: 
      var $45=$name_addr;
      var $call65=_strncmp($45, ((STRING_TABLE.__str23)|0), 4);
      var $tobool66=(($call65)|0)!=0;
      if ($tobool66) { __label__ = 30; break; } else { __label__ = 28; break; }
    case 28: 
      var $46=$i;
      var $47=$argv_addr;
      var $arrayidx68=(($47+($46<<2))|0);
      var $48=HEAP32[(($arrayidx68)>>2)];
      var $call69=_strncmp($48, ((STRING_TABLE.__str24)|0), 4);
      var $tobool70=(($call69)|0)!=0;
      if ($tobool70) { __label__ = 29; break; } else { __label__ = 42; break; }
    case 29: 
      var $49=$allb;
      var $tobool72=(($49)|0)!=0;
      if ($tobool72) { __label__ = 42; break; } else { __label__ = 30; break; }
    case 30: 
      var $50=$name_addr;
      var $call74=_strncmp($50, ((STRING_TABLE.__str25)|0), 4);
      var $tobool75=(($call74)|0)!=0;
      if ($tobool75) { __label__ = 33; break; } else { __label__ = 31; break; }
    case 31: 
      var $51=$i;
      var $52=$argv_addr;
      var $arrayidx77=(($52+($51<<2))|0);
      var $53=HEAP32[(($arrayidx77)>>2)];
      var $call78=_strncmp($53, ((STRING_TABLE.__str26)|0), 4);
      var $tobool79=(($call78)|0)!=0;
      if ($tobool79) { __label__ = 32; break; } else { __label__ = 42; break; }
    case 32: 
      var $54=$allb;
      var $tobool81=(($54)|0)!=0;
      if ($tobool81) { __label__ = 42; break; } else { __label__ = 33; break; }
    case 33: 
      var $55=$name_addr;
      var $call83=_strncmp($55, ((STRING_TABLE.__str27)|0), 4);
      var $tobool84=(($call83)|0)!=0;
      if ($tobool84) { __label__ = 36; break; } else { __label__ = 34; break; }
    case 34: 
      var $56=$i;
      var $57=$argv_addr;
      var $arrayidx86=(($57+($56<<2))|0);
      var $58=HEAP32[(($arrayidx86)>>2)];
      var $call87=_strncmp($58, ((STRING_TABLE.__str28)|0), 4);
      var $tobool88=(($call87)|0)!=0;
      if ($tobool88) { __label__ = 35; break; } else { __label__ = 42; break; }
    case 35: 
      var $59=$allb;
      var $tobool90=(($59)|0)!=0;
      if ($tobool90) { __label__ = 42; break; } else { __label__ = 36; break; }
    case 36: 
      var $60=$name_addr;
      var $call92=_strncmp($60, ((STRING_TABLE.__str29)|0), 4);
      var $tobool93=(($call92)|0)!=0;
      if ($tobool93) { __label__ = 39; break; } else { __label__ = 37; break; }
    case 37: 
      var $61=$i;
      var $62=$argv_addr;
      var $arrayidx95=(($62+($61<<2))|0);
      var $63=HEAP32[(($arrayidx95)>>2)];
      var $call96=_strncmp($63, ((STRING_TABLE.__str30)|0), 4);
      var $tobool97=(($call96)|0)!=0;
      if ($tobool97) { __label__ = 38; break; } else { __label__ = 42; break; }
    case 38: 
      var $64=$allb;
      var $tobool99=(($64)|0)!=0;
      if ($tobool99) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $65=$name_addr;
      var $call101=_strncmp($65, ((STRING_TABLE.__str31)|0), 4);
      var $tobool102=(($call101)|0)!=0;
      if ($tobool102) { __label__ = 43; break; } else { __label__ = 40; break; }
    case 40: 
      var $66=$i;
      var $67=$argv_addr;
      var $arrayidx104=(($67+($66<<2))|0);
      var $68=HEAP32[(($arrayidx104)>>2)];
      var $call105=_strncmp($68, ((STRING_TABLE.__str32)|0), 4);
      var $tobool106=(($call105)|0)!=0;
      if ($tobool106) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $69=$allb;
      var $tobool108=(($69)|0)!=0;
      if ($tobool108) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      $retval=0;
      __label__ = 47; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $70=$i;
      var $inc112=(($70+1)|0);
      $i=$inc112;
      __label__ = 4; break;
    case 46: 
      $retval=1;
      __label__ = 47; break;
    case 47: 
      var $71=$retval;
      ;
      return $71;
    default: assert(0, "bad label: " + __label__);
  }
}
_keep_unknown_chunk["X"]=1;

function _keep_chunk($name, $argv) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $name_addr;
      var $argv_addr;
      var $i;
      var $alla;
      var $allb;
      var $allt;
      $name_addr=$name;
      $argv_addr=$argv;
      var $0=HEAP32[((_verbose)>>2)];
      var $cmp=(($0)|0) > 2;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $1=HEAP32[((_first_trial)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=HEAP32[((_stdout)>>2)];
      var $3=$name_addr;
      var $call=_fprintf($2, ((STRING_TABLE.__str33)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$3,tempInt));
      __label__ = 4; break;
    case 4: 
      var $4=HEAP32[((_remove_chunks)>>2)];
      var $cmp1=(($4)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=1;
      __label__ = 97; break;
    case 6: 
      var $5=HEAP32[((_verbose)>>2)];
      var $cmp4=(($5)|0) > 1;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $6=HEAP32[((_first_trial)>>2)];
      var $tobool6=(($6)|0)!=0;
      if ($tobool6) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $7=HEAP32[((_stdout)>>2)];
      var $8=$name_addr;
      var $call8=_fprintf($7, ((STRING_TABLE.__str34)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$8,tempInt));
      __label__ = 9; break;
    case 9: 
      $i=1;
      __label__ = 10; break;
    case 10: 
      var $9=$i;
      var $10=HEAP32[((_remove_chunks)>>2)];
      var $cmp10=(($9)|0) <= (($10)|0);
      if ($cmp10) { __label__ = 11; break; } else { __label__ = 93; break; }
    case 11: 
      var $11=$i;
      var $12=$argv_addr;
      var $arrayidx=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx)>>2)];
      var $call11=_strncmp($13, ((STRING_TABLE.__str9)|0), 4);
      var $tobool12=(($call11)|0)!=0;
      if ($tobool12) { __label__ = 91; break; } else { __label__ = 12; break; }
    case 12: 
      $alla=0;
      $allb=0;
      $allt=0;
      var $14=$i;
      var $inc=(($14+1)|0);
      $i=$inc;
      var $15=$i;
      var $16=$argv_addr;
      var $arrayidx14=(($16+($15<<2))|0);
      var $17=HEAP32[(($arrayidx14)>>2)];
      var $call15=_strncmp($17, ((STRING_TABLE.__str10)|0), 3);
      var $tobool16=(($call15)|0)!=0;
      if ($tobool16) { __label__ = 16; break; } else { __label__ = 13; break; }
    case 13: 
      var $18=$allt;
      var $inc18=(($18+1)|0);
      $allt=$inc18;
      var $19=$allb;
      var $inc19=(($19+1)|0);
      $allb=$inc19;
      var $20=$i;
      var $21=$argv_addr;
      var $arrayidx20=(($21+($20<<2))|0);
      var $22=HEAP32[(($arrayidx20)>>2)];
      var $call21=_strncmp($22, ((STRING_TABLE.__str35)|0), 4);
      var $tobool22=(($call21)|0)!=0;
      if ($tobool22) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $23=$alla;
      var $inc24=(($23+1)|0);
      $alla=$inc24;
      __label__ = 15; break;
    case 15: 
      __label__ = 19; break;
    case 16: 
      var $24=$i;
      var $25=$argv_addr;
      var $arrayidx26=(($25+($24<<2))|0);
      var $26=HEAP32[(($arrayidx26)>>2)];
      var $call27=_strncmp($26, ((STRING_TABLE.__str36)|0), 4);
      var $tobool28=(($call27)|0)!=0;
      if ($tobool28) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $27=$allt;
      var $inc30=(($27+1)|0);
      $allt=$inc30;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $28=$i;
      var $29=$argv_addr;
      var $arrayidx33=(($29+($28<<2))|0);
      var $30=HEAP32[(($arrayidx33)>>2)];
      var $31=$name_addr;
      var $call34=_strncmp($30, $31, 4);
      var $tobool35=(($call34)|0)!=0;
      if ($tobool35) { __label__ = 20; break; } else { __label__ = 86; break; }
    case 20: 
      var $32=$name_addr;
      var $call36=_strncmp($32, ((STRING_TABLE.__str37)|0), 4);
      var $tobool37=(($call36)|0)!=0;
      if ($tobool37) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $33=$i;
      var $34=$argv_addr;
      var $arrayidx39=(($34+($33<<2))|0);
      var $35=HEAP32[(($arrayidx39)>>2)];
      var $call40=_strncmp($35, ((STRING_TABLE.__str38)|0), 4);
      var $tobool41=(($call40)|0)!=0;
      if ($tobool41) { __label__ = 22; break; } else { __label__ = 86; break; }
    case 22: 
      var $36=$name_addr;
      var $call43=_strncmp($36, ((STRING_TABLE.__str39)|0), 4);
      var $tobool44=(($call43)|0)!=0;
      if ($tobool44) { __label__ = 25; break; } else { __label__ = 23; break; }
    case 23: 
      var $37=$i;
      var $38=$argv_addr;
      var $arrayidx46=(($38+($37<<2))|0);
      var $39=HEAP32[(($arrayidx46)>>2)];
      var $call47=_strncmp($39, ((STRING_TABLE.__str40)|0), 4);
      var $tobool48=(($call47)|0)!=0;
      if ($tobool48) { __label__ = 24; break; } else { __label__ = 86; break; }
    case 24: 
      var $40=$allb;
      var $tobool50=(($40)|0)!=0;
      if ($tobool50) { __label__ = 86; break; } else { __label__ = 25; break; }
    case 25: 
      var $41=$name_addr;
      var $call52=_strncmp($41, ((STRING_TABLE.__str11)|0), 4);
      var $tobool53=(($call52)|0)!=0;
      if ($tobool53) { __label__ = 28; break; } else { __label__ = 26; break; }
    case 26: 
      var $42=$i;
      var $43=$argv_addr;
      var $arrayidx55=(($43+($42<<2))|0);
      var $44=HEAP32[(($arrayidx55)>>2)];
      var $call56=_strncmp($44, ((STRING_TABLE.__str12)|0), 4);
      var $tobool57=(($call56)|0)!=0;
      if ($tobool57) { __label__ = 27; break; } else { __label__ = 86; break; }
    case 27: 
      var $45=$allb;
      var $tobool59=(($45)|0)!=0;
      if ($tobool59) { __label__ = 86; break; } else { __label__ = 28; break; }
    case 28: 
      var $46=$name_addr;
      var $call61=_strncmp($46, ((STRING_TABLE.__str13)|0), 4);
      var $tobool62=(($call61)|0)!=0;
      if ($tobool62) { __label__ = 31; break; } else { __label__ = 29; break; }
    case 29: 
      var $47=$i;
      var $48=$argv_addr;
      var $arrayidx64=(($48+($47<<2))|0);
      var $49=HEAP32[(($arrayidx64)>>2)];
      var $call65=_strncmp($49, ((STRING_TABLE.__str14)|0), 4);
      var $tobool66=(($call65)|0)!=0;
      if ($tobool66) { __label__ = 30; break; } else { __label__ = 86; break; }
    case 30: 
      var $50=$allb;
      var $tobool68=(($50)|0)!=0;
      if ($tobool68) { __label__ = 86; break; } else { __label__ = 31; break; }
    case 31: 
      var $51=$name_addr;
      var $call70=_strncmp($51, ((STRING_TABLE.__str41)|0), 4);
      var $tobool71=(($call70)|0)!=0;
      if ($tobool71) { __label__ = 34; break; } else { __label__ = 32; break; }
    case 32: 
      var $52=$i;
      var $53=$argv_addr;
      var $arrayidx73=(($53+($52<<2))|0);
      var $54=HEAP32[(($arrayidx73)>>2)];
      var $call74=_strncmp($54, ((STRING_TABLE.__str42)|0), 4);
      var $tobool75=(($call74)|0)!=0;
      if ($tobool75) { __label__ = 33; break; } else { __label__ = 86; break; }
    case 33: 
      var $55=$alla;
      var $tobool77=(($55)|0)!=0;
      if ($tobool77) { __label__ = 86; break; } else { __label__ = 34; break; }
    case 34: 
      var $56=$name_addr;
      var $call79=_strncmp($56, ((STRING_TABLE.__str15)|0), 4);
      var $tobool80=(($call79)|0)!=0;
      if ($tobool80) { __label__ = 37; break; } else { __label__ = 35; break; }
    case 35: 
      var $57=$i;
      var $58=$argv_addr;
      var $arrayidx82=(($58+($57<<2))|0);
      var $59=HEAP32[(($arrayidx82)>>2)];
      var $call83=_strncmp($59, ((STRING_TABLE.__str16)|0), 4);
      var $tobool84=(($call83)|0)!=0;
      if ($tobool84) { __label__ = 36; break; } else { __label__ = 86; break; }
    case 36: 
      var $60=$allb;
      var $tobool86=(($60)|0)!=0;
      if ($tobool86) { __label__ = 86; break; } else { __label__ = 37; break; }
    case 37: 
      var $61=$name_addr;
      var $call88=_strncmp($61, ((STRING_TABLE.__str17)|0), 4);
      var $tobool89=(($call88)|0)!=0;
      if ($tobool89) { __label__ = 40; break; } else { __label__ = 38; break; }
    case 38: 
      var $62=$i;
      var $63=$argv_addr;
      var $arrayidx91=(($63+($62<<2))|0);
      var $64=HEAP32[(($arrayidx91)>>2)];
      var $call92=_strncmp($64, ((STRING_TABLE.__str18)|0), 4);
      var $tobool93=(($call92)|0)!=0;
      if ($tobool93) { __label__ = 39; break; } else { __label__ = 86; break; }
    case 39: 
      var $65=$allb;
      var $tobool95=(($65)|0)!=0;
      if ($tobool95) { __label__ = 86; break; } else { __label__ = 40; break; }
    case 40: 
      var $66=$name_addr;
      var $call97=_strncmp($66, ((STRING_TABLE.__str19)|0), 4);
      var $tobool98=(($call97)|0)!=0;
      if ($tobool98) { __label__ = 43; break; } else { __label__ = 41; break; }
    case 41: 
      var $67=$i;
      var $68=$argv_addr;
      var $arrayidx100=(($68+($67<<2))|0);
      var $69=HEAP32[(($arrayidx100)>>2)];
      var $call101=_strncmp($69, ((STRING_TABLE.__str20)|0), 4);
      var $tobool102=(($call101)|0)!=0;
      if ($tobool102) { __label__ = 42; break; } else { __label__ = 86; break; }
    case 42: 
      var $70=$allb;
      var $tobool104=(($70)|0)!=0;
      if ($tobool104) { __label__ = 86; break; } else { __label__ = 43; break; }
    case 43: 
      var $71=$name_addr;
      var $call106=_strncmp($71, ((STRING_TABLE.__str21)|0), 4);
      var $tobool107=(($call106)|0)!=0;
      if ($tobool107) { __label__ = 46; break; } else { __label__ = 44; break; }
    case 44: 
      var $72=$i;
      var $73=$argv_addr;
      var $arrayidx109=(($73+($72<<2))|0);
      var $74=HEAP32[(($arrayidx109)>>2)];
      var $call110=_strncmp($74, ((STRING_TABLE.__str22)|0), 4);
      var $tobool111=(($call110)|0)!=0;
      if ($tobool111) { __label__ = 45; break; } else { __label__ = 86; break; }
    case 45: 
      var $75=$allb;
      var $tobool113=(($75)|0)!=0;
      if ($tobool113) { __label__ = 86; break; } else { __label__ = 46; break; }
    case 46: 
      var $76=$name_addr;
      var $call115=_strncmp($76, ((STRING_TABLE.__str23)|0), 4);
      var $tobool116=(($call115)|0)!=0;
      if ($tobool116) { __label__ = 49; break; } else { __label__ = 47; break; }
    case 47: 
      var $77=$i;
      var $78=$argv_addr;
      var $arrayidx118=(($78+($77<<2))|0);
      var $79=HEAP32[(($arrayidx118)>>2)];
      var $call119=_strncmp($79, ((STRING_TABLE.__str24)|0), 4);
      var $tobool120=(($call119)|0)!=0;
      if ($tobool120) { __label__ = 48; break; } else { __label__ = 86; break; }
    case 48: 
      var $80=$allb;
      var $tobool122=(($80)|0)!=0;
      if ($tobool122) { __label__ = 86; break; } else { __label__ = 49; break; }
    case 49: 
      var $81=$name_addr;
      var $call124=_strncmp($81, ((STRING_TABLE.__str43)|0), 4);
      var $tobool125=(($call124)|0)!=0;
      if ($tobool125) { __label__ = 52; break; } else { __label__ = 50; break; }
    case 50: 
      var $82=$i;
      var $83=$argv_addr;
      var $arrayidx127=(($83+($82<<2))|0);
      var $84=HEAP32[(($arrayidx127)>>2)];
      var $call128=_strncmp($84, ((STRING_TABLE.__str44)|0), 4);
      var $tobool129=(($call128)|0)!=0;
      if ($tobool129) { __label__ = 51; break; } else { __label__ = 86; break; }
    case 51: 
      var $85=$allt;
      var $tobool131=(($85)|0)!=0;
      if ($tobool131) { __label__ = 86; break; } else { __label__ = 52; break; }
    case 52: 
      var $86=$name_addr;
      var $call133=_strncmp($86, ((STRING_TABLE.__str45)|0), 4);
      var $tobool134=(($call133)|0)!=0;
      if ($tobool134) { __label__ = 55; break; } else { __label__ = 53; break; }
    case 53: 
      var $87=$i;
      var $88=$argv_addr;
      var $arrayidx136=(($88+($87<<2))|0);
      var $89=HEAP32[(($arrayidx136)>>2)];
      var $call137=_strncmp($89, ((STRING_TABLE.__str46)|0), 4);
      var $tobool138=(($call137)|0)!=0;
      if ($tobool138) { __label__ = 54; break; } else { __label__ = 86; break; }
    case 54: 
      var $90=$allb;
      var $tobool140=(($90)|0)!=0;
      if ($tobool140) { __label__ = 86; break; } else { __label__ = 55; break; }
    case 55: 
      var $91=$name_addr;
      var $call142=_strncmp($91, ((STRING_TABLE.__str47)|0), 4);
      var $tobool143=(($call142)|0)!=0;
      if ($tobool143) { __label__ = 58; break; } else { __label__ = 56; break; }
    case 56: 
      var $92=$i;
      var $93=$argv_addr;
      var $arrayidx145=(($93+($92<<2))|0);
      var $94=HEAP32[(($arrayidx145)>>2)];
      var $call146=_strncmp($94, ((STRING_TABLE.__str48)|0), 4);
      var $tobool147=(($call146)|0)!=0;
      if ($tobool147) { __label__ = 57; break; } else { __label__ = 86; break; }
    case 57: 
      var $95=$allb;
      var $tobool149=(($95)|0)!=0;
      if ($tobool149) { __label__ = 86; break; } else { __label__ = 58; break; }
    case 58: 
      var $96=$name_addr;
      var $call151=_strncmp($96, ((STRING_TABLE.__str25)|0), 4);
      var $tobool152=(($call151)|0)!=0;
      if ($tobool152) { __label__ = 61; break; } else { __label__ = 59; break; }
    case 59: 
      var $97=$i;
      var $98=$argv_addr;
      var $arrayidx154=(($98+($97<<2))|0);
      var $99=HEAP32[(($arrayidx154)>>2)];
      var $call155=_strncmp($99, ((STRING_TABLE.__str26)|0), 4);
      var $tobool156=(($call155)|0)!=0;
      if ($tobool156) { __label__ = 60; break; } else { __label__ = 86; break; }
    case 60: 
      var $100=$allb;
      var $tobool158=(($100)|0)!=0;
      if ($tobool158) { __label__ = 86; break; } else { __label__ = 61; break; }
    case 61: 
      var $101=$name_addr;
      var $call160=_strncmp($101, ((STRING_TABLE.__str49)|0), 4);
      var $tobool161=(($call160)|0)!=0;
      if ($tobool161) { __label__ = 64; break; } else { __label__ = 62; break; }
    case 62: 
      var $102=$i;
      var $103=$argv_addr;
      var $arrayidx163=(($103+($102<<2))|0);
      var $104=HEAP32[(($arrayidx163)>>2)];
      var $call164=_strncmp($104, ((STRING_TABLE.__str50)|0), 4);
      var $tobool165=(($call164)|0)!=0;
      if ($tobool165) { __label__ = 63; break; } else { __label__ = 86; break; }
    case 63: 
      var $105=$allb;
      var $tobool167=(($105)|0)!=0;
      if ($tobool167) { __label__ = 86; break; } else { __label__ = 64; break; }
    case 64: 
      var $106=$name_addr;
      var $call169=_strncmp($106, ((STRING_TABLE.__str27)|0), 4);
      var $tobool170=(($call169)|0)!=0;
      if ($tobool170) { __label__ = 67; break; } else { __label__ = 65; break; }
    case 65: 
      var $107=$i;
      var $108=$argv_addr;
      var $arrayidx172=(($108+($107<<2))|0);
      var $109=HEAP32[(($arrayidx172)>>2)];
      var $call173=_strncmp($109, ((STRING_TABLE.__str28)|0), 4);
      var $tobool174=(($call173)|0)!=0;
      if ($tobool174) { __label__ = 66; break; } else { __label__ = 86; break; }
    case 66: 
      var $110=$allb;
      var $tobool176=(($110)|0)!=0;
      if ($tobool176) { __label__ = 86; break; } else { __label__ = 67; break; }
    case 67: 
      var $111=$name_addr;
      var $call178=_strncmp($111, ((STRING_TABLE.__str51)|0), 4);
      var $tobool179=(($call178)|0)!=0;
      if ($tobool179) { __label__ = 70; break; } else { __label__ = 68; break; }
    case 68: 
      var $112=$i;
      var $113=$argv_addr;
      var $arrayidx181=(($113+($112<<2))|0);
      var $114=HEAP32[(($arrayidx181)>>2)];
      var $call182=_strncmp($114, ((STRING_TABLE.__str52)|0), 4);
      var $tobool183=(($call182)|0)!=0;
      if ($tobool183) { __label__ = 69; break; } else { __label__ = 86; break; }
    case 69: 
      var $115=$allb;
      var $tobool185=(($115)|0)!=0;
      if ($tobool185) { __label__ = 86; break; } else { __label__ = 70; break; }
    case 70: 
      var $116=$name_addr;
      var $call187=_strncmp($116, ((STRING_TABLE.__str53)|0), 4);
      var $tobool188=(($call187)|0)!=0;
      if ($tobool188) { __label__ = 73; break; } else { __label__ = 71; break; }
    case 71: 
      var $117=$i;
      var $118=$argv_addr;
      var $arrayidx190=(($118+($117<<2))|0);
      var $119=HEAP32[(($arrayidx190)>>2)];
      var $call191=_strncmp($119, ((STRING_TABLE.__str54)|0), 4);
      var $tobool192=(($call191)|0)!=0;
      if ($tobool192) { __label__ = 72; break; } else { __label__ = 86; break; }
    case 72: 
      var $120=$allb;
      var $tobool194=(($120)|0)!=0;
      if ($tobool194) { __label__ = 86; break; } else { __label__ = 73; break; }
    case 73: 
      var $121=$name_addr;
      var $call196=_strncmp($121, ((STRING_TABLE.__str29)|0), 4);
      var $tobool197=(($call196)|0)!=0;
      if ($tobool197) { __label__ = 76; break; } else { __label__ = 74; break; }
    case 74: 
      var $122=$i;
      var $123=$argv_addr;
      var $arrayidx199=(($123+($122<<2))|0);
      var $124=HEAP32[(($arrayidx199)>>2)];
      var $call200=_strncmp($124, ((STRING_TABLE.__str30)|0), 4);
      var $tobool201=(($call200)|0)!=0;
      if ($tobool201) { __label__ = 75; break; } else { __label__ = 86; break; }
    case 75: 
      var $125=$allb;
      var $tobool203=(($125)|0)!=0;
      if ($tobool203) { __label__ = 86; break; } else { __label__ = 76; break; }
    case 76: 
      var $126=$name_addr;
      var $call205=_strncmp($126, ((STRING_TABLE.__str55)|0), 4);
      var $tobool206=(($call205)|0)!=0;
      if ($tobool206) { __label__ = 78; break; } else { __label__ = 77; break; }
    case 77: 
      var $127=$allt;
      var $tobool208=(($127)|0)!=0;
      if ($tobool208) { __label__ = 86; break; } else { __label__ = 78; break; }
    case 78: 
      var $128=$name_addr;
      var $call210=_strncmp($128, ((STRING_TABLE.__str31)|0), 4);
      var $tobool211=(($call210)|0)!=0;
      if ($tobool211) { __label__ = 81; break; } else { __label__ = 79; break; }
    case 79: 
      var $129=$i;
      var $130=$argv_addr;
      var $arrayidx213=(($130+($129<<2))|0);
      var $131=HEAP32[(($arrayidx213)>>2)];
      var $call214=_strncmp($131, ((STRING_TABLE.__str32)|0), 4);
      var $tobool215=(($call214)|0)!=0;
      if ($tobool215) { __label__ = 80; break; } else { __label__ = 86; break; }
    case 80: 
      var $132=$allb;
      var $tobool217=(($132)|0)!=0;
      if ($tobool217) { __label__ = 86; break; } else { __label__ = 81; break; }
    case 81: 
      var $133=$name_addr;
      var $call219=_strncmp($133, ((STRING_TABLE.__str56)|0), 4);
      var $tobool220=(($call219)|0)!=0;
      if ($tobool220) { __label__ = 83; break; } else { __label__ = 82; break; }
    case 82: 
      var $134=$i;
      var $135=$argv_addr;
      var $arrayidx222=(($135+($134<<2))|0);
      var $136=HEAP32[(($arrayidx222)>>2)];
      var $call223=_strncmp($136, ((STRING_TABLE.__str57)|0), 4);
      var $tobool224=(($call223)|0)!=0;
      if ($tobool224) { __label__ = 83; break; } else { __label__ = 86; break; }
    case 83: 
      var $137=$name_addr;
      var $call226=_strncmp($137, ((STRING_TABLE.__str58)|0), 4);
      var $tobool227=(($call226)|0)!=0;
      if ($tobool227) { __label__ = 90; break; } else { __label__ = 84; break; }
    case 84: 
      var $138=$i;
      var $139=$argv_addr;
      var $arrayidx229=(($139+($138<<2))|0);
      var $140=HEAP32[(($arrayidx229)>>2)];
      var $call230=_strncmp($140, ((STRING_TABLE.__str59)|0), 4);
      var $tobool231=(($call230)|0)!=0;
      if ($tobool231) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      var $141=$allt;
      var $tobool233=(($141)|0)!=0;
      if ($tobool233) { __label__ = 86; break; } else { __label__ = 90; break; }
    case 86: 
      HEAP32[((_things_have_changed)>>2)]=1;
      var $142=HEAP32[((_verbose)>>2)];
      var $cmp235=(($142)|0) > 0;
      if ($cmp235) { __label__ = 87; break; } else { __label__ = 89; break; }
    case 87: 
      var $143=HEAP32[((_first_trial)>>2)];
      var $tobool237=(($143)|0)!=0;
      if ($tobool237) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      var $144=HEAP32[((_stdout)>>2)];
      var $145=$name_addr;
      var $call239=_fprintf($144, ((STRING_TABLE.__str60)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$145,tempInt));
      __label__ = 89; break;
    case 89: 
      $retval=0;
      __label__ = 97; break;
    case 90: 
      __label__ = 91; break;
    case 91: 
      __label__ = 92; break;
    case 92: 
      var $146=$i;
      var $inc243=(($146+1)|0);
      $i=$inc243;
      __label__ = 10; break;
    case 93: 
      var $147=HEAP32[((_verbose)>>2)];
      var $cmp244=(($147)|0) > 1;
      if ($cmp244) { __label__ = 94; break; } else { __label__ = 96; break; }
    case 94: 
      var $148=HEAP32[((_first_trial)>>2)];
      var $tobool246=(($148)|0)!=0;
      if ($tobool246) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      var $149=HEAP32[((_stdout)>>2)];
      var $150=$name_addr;
      var $call248=_fprintf($149, ((STRING_TABLE.__str61)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$150,tempInt));
      __label__ = 96; break;
    case 96: 
      $retval=1;
      __label__ = 97; break;
    case 97: 
      var $151=$retval;
      ;
      return $151;
    default: assert(0, "bad label: " + __label__);
  }
}
_keep_chunk["X"]=1;

function _show_result() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $pinfo;
      var $0=HEAP32[((_total_output_length)>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: 
      var $1=HEAP32[((_total_input_length)>>2)];
      var $2=HEAP32[((_total_output_length)>>2)];
      var $cmp=(($1)|0)==(($2)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($3, ((STRING_TABLE.__str62)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 8; break;
    case 4: 
      var $4=HEAPU32[((_total_input_length)>>2)];
      var $5=HEAPU32[((_total_output_length)>>2)];
      var $cmp2=(($4)>>>0) > (($5)>>>0);
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=HEAP32[((_stdout)>>2)];
      var $7=HEAPU32[((_total_output_length)>>2)];
      var $conv=(($7)>>>0);
      var $mul=$conv*100;
      var $8=HEAPU32[((_total_input_length)>>2)];
      var $conv4=(($8)>>>0);
      var $div=$mul/$conv4;
      var $sub=100-$div;
      var $9=HEAP32[((_total_input_length)>>2)];
      var $10=HEAP32[((_total_output_length)>>2)];
      var $sub5=(($9-$10)|0);
      var $call6=_fprintf($6, ((STRING_TABLE.__str63)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$sub,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),HEAP32[((tempInt+8)>>2)]=$sub5,tempInt));
      __label__ = 7; break;
    case 6: 
      var $11=HEAP32[((_stdout)>>2)];
      var $12=HEAPU32[((_total_output_length)>>2)];
      var $conv8=(($12)>>>0);
      var $mul9=$conv8*100;
      var $13=HEAPU32[((_total_input_length)>>2)];
      var $conv10=(($13)>>>0);
      var $div11=$mul9/$conv10;
      var $sub12=100-$div11;
      var $sub13=(-$sub12);
      var $14=HEAP32[((_total_output_length)>>2)];
      var $15=HEAP32[((_total_input_length)>>2)];
      var $sub14=(($14-$15)|0);
      var $call15=_fprintf($11, ((STRING_TABLE.__str64)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$sub13,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),HEAP32[((tempInt+8)>>2)]=$sub14,tempInt));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $call18=_clock();
      var $conv19=(($call18)>>>0);
      HEAPF32[((_t_stop)>>2)]=$conv19;
      var $16=HEAPF32[((_t_stop)>>2)];
      var $17=HEAPF32[((_t_start)>>2)];
      var $sub20=$16-$17;
      var $18=HEAPF32[((_t_misc)>>2)];
      var $add=$18+$sub20;
      HEAPF32[((_t_misc)>>2)]=$add;
      var $19=HEAPF32[((_t_stop)>>2)];
      var $20=HEAPF32[((_t_start)>>2)];
      var $cmp21=$19 < $20;
      if ($cmp21) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $21=HEAPF32[((_t_misc)>>2)];
      var $add24=$21+2147483648;
      HEAPF32[((_t_misc)>>2)]=$add24;
      var $22=HEAPF32[((_t_stop)>>2)];
      var $cmp25=$22 < 0;
      if ($cmp25) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $23=HEAPF32[((_t_misc)>>2)];
      var $add28=$23+2147483648;
      HEAPF32[((_t_misc)>>2)]=$add28;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $24=HEAPF32[((_t_stop)>>2)];
      HEAPF32[((_t_start)>>2)]=$24;
      var $25=HEAP32[((_stdout)>>2)];
      var $26=HEAPF32[((_t_decode)>>2)];
      var $div31=$26/1000;
      var $conv32=$div31;
      var $call33=_fprintf($25, ((STRING_TABLE.__str65)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$conv32,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $27=HEAP32[((_stdout)>>2)];
      var $28=HEAPF32[((_t_encode)>>2)];
      var $div34=$28/1000;
      var $conv35=$div34;
      var $call36=_fprintf($27, ((STRING_TABLE.__str66)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$conv35,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $29=HEAP32[((_stdout)>>2)];
      var $30=HEAPF32[((_t_misc)>>2)];
      var $div37=$30/1000;
      var $conv38=$div37;
      var $call39=_fprintf($29, ((STRING_TABLE.__str67)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$conv38,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $31=HEAP32[((_stdout)>>2)];
      var $32=HEAPF32[((_t_misc)>>2)];
      var $33=HEAPF32[((_t_decode)>>2)];
      var $add40=$32+$33;
      var $34=HEAPF32[((_t_encode)>>2)];
      var $add41=$add40+$34;
      var $div42=$add41/1000;
      var $conv43=$div42;
      var $call44=_fprintf($31, ((STRING_TABLE.__str68)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$conv43,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      var $35=HEAP32[((_current_allocation)>>2)];
      var $tobool45=(($35)|0)!=0;
      if ($tobool45) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $36=HEAP32[((_pinformation)>>2)];
      $pinfo=$36;
      var $37=HEAP32[((_stdout)>>2)];
      var $38=HEAP32[((_current_allocation)>>2)];
      var $call47=_fprintf($37, ((STRING_TABLE.__str69)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$38,tempInt));
      __label__ = 15; break;
    case 15: 
      var $39=$pinfo;
      var $cmp48=(($39)|0)!=0;
      if ($cmp48) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $40=HEAP32[((_stdout)>>2)];
      var $41=$pinfo;
      var $size=(($41)|0);
      var $42=HEAP32[(($size)>>2)];
      var $43=$pinfo;
      var $pointer=(($43+4)|0);
      var $44=HEAP32[(($pointer)>>2)];
      var $45=$44;
      var $call50=_fprintf($40, ((STRING_TABLE.__str70)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$42,HEAP32[((tempInt+4)>>2)]=$45,tempInt));
      var $46=$pinfo;
      var $pointer51=(($46+4)|0);
      var $47=HEAP32[(($pointer51)>>2)];
      _free($47);
      var $48=$pinfo;
      var $next=(($48+8)|0);
      var $49=HEAP32[(($next)>>2)];
      $pinfo=$49;
      __label__ = 15; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $50=HEAP32[((_found_acTL_chunk)>>2)];
      var $cmp53=(($50)|0)==2;
      if ($cmp53) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $51=HEAP32[((_verbose)>>2)];
      var $cmp56=(($51)|0) > 0;
      if ($cmp56) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $52=HEAP32[((_stdout)>>2)];
      var $call59=_fprintf($52, ((STRING_TABLE.__str71)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_show_result["X"]=1;

function _main($argc, $argv) {
  var __stackBase__  = STACKTOP; STACKTOP += 3896; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  var setjmpTable = {"759": function(value) { __label__ = 1610; $call2052 = value },dummy: 0};
  while(1) try { switch(__label__) {
    case 1: 
      var $retval;
      var $argc_addr;
      var $argv_addr;
      var $y;
      var $bit_depth=__stackBase__;
      var $color_type=__stackBase__+4;
      var $num_pass;
      var $pass;
      var $num_methods;
      var $try_method=__stackBase__+8;
      var $fm=__stackBase__+812;
      var $lv=__stackBase__+1616;
      var $zs=__stackBase__+2420;
      var $lev;
      var $strat;
      var $filt;
      var $file_gamma=__stackBase__+3224;
      var $cp;
      var $i;
      var $specified_filter;
      var $specified_level;
      var $c;
      var $number=__stackBase__+3228;
      var $n;
      var $nzeroes;
      var $length;
      var $iccp_fn;
      var $ic;
      var $num_in;
      var $c747;
      var $number748=__stackBase__+3244;
      var $n749;
      var $nzeroes751;
      var $length752;
      var $specified_strategy;
      var $inlen;
      var $outlen;
      var $stat_buf=__stackBase__+3260;
      var $best_length;
      var $j;
      var $num_in1831;
      var $num_out;
      var $stat_in=__stackBase__+3332;
      var $stat_out=__stackBase__+3404;
      var $exception__prev;
      var $exception__env=__stackBase__+3476;
      var $row_length;
      var $chunk_name=__stackBase__+3516;
      var $mng_signature=__stackBase__+3524;
      var $png_signature=__stackBase__+3532;
      var $interlace_method=__stackBase__+3540;
      var $compression_method=__stackBase__+3544;
      var $filter_method=__stackBase__+3548;
      var $need_expand;
      var $true_bits=__stackBase__+3552;
      var $background=__stackBase__+3560;
      var $backgd=__stackBase__+3564;
      var $backgrnd;
      var $white_x=__stackBase__+3576;
      var $white_y=__stackBase__+3580;
      var $red_x=__stackBase__+3584;
      var $red_y=__stackBase__+3588;
      var $green_x=__stackBase__+3592;
      var $green_y=__stackBase__+3596;
      var $blue_x=__stackBase__+3600;
      var $blue_y=__stackBase__+3604;
      var $file_intent=__stackBase__+3608;
      var $name=__stackBase__+3612;
      var $profile=__stackBase__+3616;
      var $proflen=__stackBase__+3620;
      var $compression_method2611=__stackBase__+3624;
      var $offset_x=__stackBase__+3628;
      var $offset_y=__stackBase__+3632;
      var $unit_type=__stackBase__+3636;
      var $purpose=__stackBase__+3640;
      var $units=__stackBase__+3644;
      var $params=__stackBase__+3648;
      var $X0=__stackBase__+3652;
      var $X1=__stackBase__+3656;
      var $type=__stackBase__+3660;
      var $nparams=__stackBase__+3664;
      var $res_x=__stackBase__+3668;
      var $res_y=__stackBase__+3672;
      var $unit_type2676=__stackBase__+3676;
      var $hist=__stackBase__+3680;
      var $trans=__stackBase__+3684;
      var $num_trans=__stackBase__+3688;
      var $trans_values=__stackBase__+3692;
      var $last_nonmax;
      var $trans_data=__stackBase__+3696;
      var $index_data;
      var $last;
      var $p;
      var $sig_bit=__stackBase__+3708;
      var $unit=__stackBase__+3712;
      var $scal_width=__stackBase__+3716;
      var $scal_height=__stackBase__+3724;
      var $entries=__stackBase__+3732;
      var $num_entries;
      var $text_ptr=__stackBase__+3736;
      var $num_text=__stackBase__+3740;
      var $ntext;
      var $num_to_write;
      var $added_text;
      var $mod_time=__stackBase__+3744;
      var $unknowns=__stackBase__+3748;
      var $num_unknowns;
      var $ster;
      var $unknowns_keep;
      var $num_unknowns_keep;
      var $buff=__stackBase__+3752;
      var $mng_signature3392=__stackBase__+3784;
      var $compression_window;
      var $zbuf_size;
      var $required_window;
      var $channels;
      var $max_possible_size;
      var $true_bits3556=__stackBase__+3792;
      var $read_row_length;
      var $write_row_length;
      var $rgb_error;
      var $text_ptr3703=__stackBase__+3800;
      var $num_text3704=__stackBase__+3804;
      var $ntext3711;
      var $num_to_write3770;
      var $added_text3849;
      var $mod_time3907=__stackBase__+3808;
      var $unknowns3916=__stackBase__+3812;
      var $num_unknowns3917;
      var $input_length;
      var $output_length;
      var $stat_buf4073=__stackBase__+3816;
      var $utim=__stackBase__+3888;
      $retval=0;
      $argc_addr=$argc;
      $argv_addr=$argv;
      HEAP32[(($file_gamma)>>2)]=0;
      HEAP32[((_row_buf)>>2)]=0;
      HEAP32[((_number_of_open_files)>>2)]=0;
      HEAP32[((_do_color_count)>>2)]=0;
      var $0=HEAP32[((_do_color_count)>>2)];
      HEAP32[((_do_color_count)>>2)]=$0;
      var $call=_png_get_header_ver(0);
      var $call1=_strcmp($call, ((STRING_TABLE.__str72)|0));
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=HEAP32[((_stdout)>>2)];
      var $call2=_fprintf($1, ((STRING_TABLE.__str73)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stdout)>>2)];
      var $call3=_fprintf($2, ((STRING_TABLE.__str74)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str72)|0),tempInt));
      var $3=HEAP32[((_stdout)>>2)];
      var $call4=_png_get_header_ver(0);
      var $call5=_fprintf($3, ((STRING_TABLE.__str75)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$call4,tempInt));
      __label__ = 3; break;
    case 3: 
      var $call6=_clock();
      var $conv=(($call6)>>>0);
      HEAPF32[((_t_start)>>2)]=$conv;
      var $4=$argv_addr;
      var $arrayidx=(($4)|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $call7=_strncpy(((_prog_string)|0), $5, 256);
      HEAP8[(((_prog_string+255)|0))]=0;
      HEAP32[((_progname)>>2)]=((_prog_string)|0);
      $i=0;
      $cp=((_prog_string)|0);
      __label__ = 4; break;
    case 4: 
      var $6=$cp;
      var $7=HEAP8[($6)];
      var $conv8=(($7 << 24) >> 24);
      var $cmp=(($conv8)|0)!=0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      var $8=$cp;
      var $9=HEAP8[($8)];
      var $conv10=(($9 << 24) >> 24);
      var $cmp11=(($conv10)|0)==92;
      if ($cmp11) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $10=$cp;
      var $11=HEAP8[($10)];
      var $conv13=(($11 << 24) >> 24);
      var $cmp14=(($conv13)|0)==47;
      if ($cmp14) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $12=$cp;
      var $incdec_ptr=(($12+1)|0);
      $cp=$incdec_ptr;
      HEAP32[((_progname)>>2)]=$incdec_ptr;
      __label__ = 8; break;
    case 8: 
      var $13=$cp;
      var $14=HEAP8[($13)];
      var $conv18=(($14 << 24) >> 24);
      var $cmp19=(($conv18)|0)==46;
      if ($cmp19) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$cp;
      HEAP8[($15)]=0;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $16=$i;
      var $inc=(($16+1)|0);
      $i=$inc;
      var $17=$cp;
      var $incdec_ptr23=(($17+1)|0);
      $cp=$incdec_ptr23;
      __label__ = 4; break;
    case 12: 
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $18=$i;
      var $cmp25=(($18)|0) < 200;
      if ($cmp25) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $19=$i;
      var $arrayidx28=(($try_method+($19<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=1;
      var $20=$i;
      var $arrayidx29=(($fm+($20<<2))|0);
      HEAP32[(($arrayidx29)>>2)]=5;
      var $21=$i;
      var $arrayidx30=(($lv+($21<<2))|0);
      HEAP32[(($arrayidx30)>>2)]=9;
      var $22=$i;
      var $arrayidx31=(($zs+($22<<2))|0);
      HEAP32[(($arrayidx31)>>2)]=1;
      __label__ = 15; break;
    case 15: 
      var $23=$i;
      var $inc33=(($23+1)|0);
      $i=$inc33;
      __label__ = 13; break;
    case 16: 
      var $arrayidx35=(($fm+4)|0);
      HEAP32[(($arrayidx35)>>2)]=0;
      var $arrayidx36=(($lv+4)|0);
      HEAP32[(($arrayidx36)>>2)]=4;
      var $arrayidx37=(($zs+4)|0);
      HEAP32[(($arrayidx37)>>2)]=0;
      var $arrayidx38=(($fm+8)|0);
      HEAP32[(($arrayidx38)>>2)]=1;
      var $arrayidx39=(($lv+8)|0);
      HEAP32[(($arrayidx39)>>2)]=4;
      var $arrayidx40=(($zs+8)|0);
      HEAP32[(($arrayidx40)>>2)]=0;
      var $arrayidx41=(($lv+12)|0);
      HEAP32[(($arrayidx41)>>2)]=4;
      var $arrayidx42=(($fm+16)|0);
      HEAP32[(($arrayidx42)>>2)]=0;
      var $arrayidx43=(($fm+20)|0);
      HEAP32[(($arrayidx43)>>2)]=1;
      var $arrayidx44=(($zs+20)|0);
      HEAP32[(($arrayidx44)>>2)]=0;
      var $arrayidx45=(($zs+24)|0);
      HEAP32[(($arrayidx45)>>2)]=0;
      var $arrayidx46=(($fm+28)|0);
      HEAP32[(($arrayidx46)>>2)]=0;
      var $arrayidx47=(($zs+28)|0);
      HEAP32[(($arrayidx47)>>2)]=0;
      var $arrayidx48=(($fm+32)|0);
      HEAP32[(($arrayidx48)>>2)]=1;
      var $arrayidx49=(($lv+36)|0);
      HEAP32[(($arrayidx49)>>2)]=2;
      var $arrayidx50=(($zs+36)|0);
      HEAP32[(($arrayidx50)>>2)]=2;
      HEAP32[((_method)>>2)]=11;
      $filt=0;
      __label__ = 17; break;
    case 17: 
      var $24=$filt;
      var $cmp52=(($24)|0) <= 5;
      if ($cmp52) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $25=$filt;
      var $26=HEAP32[((_method)>>2)];
      var $arrayidx55=(($fm+($26<<2))|0);
      HEAP32[(($arrayidx55)>>2)]=$25;
      var $27=HEAP32[((_method)>>2)];
      var $arrayidx56=(($lv+($27<<2))|0);
      HEAP32[(($arrayidx56)>>2)]=2;
      var $28=HEAP32[((_method)>>2)];
      var $arrayidx57=(($zs+($28<<2))|0);
      HEAP32[(($arrayidx57)>>2)]=2;
      var $29=HEAP32[((_method)>>2)];
      var $inc58=(($29+1)|0);
      HEAP32[((_method)>>2)]=$inc58;
      __label__ = 19; break;
    case 19: 
      var $30=$filt;
      var $inc60=(($30+1)|0);
      $filt=$inc60;
      __label__ = 17; break;
    case 20: 
      $lev=1;
      __label__ = 21; break;
    case 21: 
      var $31=$lev;
      var $cmp63=(($31)|0) <= 9;
      if ($cmp63) { __label__ = 22; break; } else { __label__ = 32; break; }
    case 22: 
      $strat=0;
      __label__ = 23; break;
    case 23: 
      var $32=$strat;
      var $cmp67=(($32)|0) <= 1;
      if ($cmp67) { __label__ = 24; break; } else { __label__ = 30; break; }
    case 24: 
      $filt=0;
      __label__ = 25; break;
    case 25: 
      var $33=$filt;
      var $cmp71=(($33)|0) <= 5;
      if ($cmp71) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $34=$filt;
      var $35=HEAP32[((_method)>>2)];
      var $arrayidx74=(($fm+($35<<2))|0);
      HEAP32[(($arrayidx74)>>2)]=$34;
      var $36=$lev;
      var $37=HEAP32[((_method)>>2)];
      var $arrayidx75=(($lv+($37<<2))|0);
      HEAP32[(($arrayidx75)>>2)]=$36;
      var $38=$strat;
      var $39=HEAP32[((_method)>>2)];
      var $arrayidx76=(($zs+($39<<2))|0);
      HEAP32[(($arrayidx76)>>2)]=$38;
      var $40=HEAP32[((_method)>>2)];
      var $inc77=(($40+1)|0);
      HEAP32[((_method)>>2)]=$inc77;
      __label__ = 27; break;
    case 27: 
      var $41=$filt;
      var $inc79=(($41+1)|0);
      $filt=$inc79;
      __label__ = 25; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $42=$strat;
      var $inc82=(($42+1)|0);
      $strat=$inc82;
      __label__ = 23; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $43=$lev;
      var $inc85=(($43+1)|0);
      $lev=$inc85;
      __label__ = 21; break;
    case 32: 
      $filt=0;
      __label__ = 33; break;
    case 33: 
      var $44=$filt;
      var $cmp88=(($44)|0) <= 5;
      if ($cmp88) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: 
      var $45=$filt;
      var $46=HEAP32[((_method)>>2)];
      var $arrayidx91=(($fm+($46<<2))|0);
      HEAP32[(($arrayidx91)>>2)]=$45;
      var $47=HEAP32[((_method)>>2)];
      var $arrayidx92=(($lv+($47<<2))|0);
      HEAP32[(($arrayidx92)>>2)]=1;
      var $48=HEAP32[((_method)>>2)];
      var $arrayidx93=(($zs+($48<<2))|0);
      HEAP32[(($arrayidx93)>>2)]=3;
      var $49=HEAP32[((_method)>>2)];
      var $inc94=(($49+1)|0);
      HEAP32[((_method)>>2)]=$inc94;
      __label__ = 35; break;
    case 35: 
      var $50=$filt;
      var $inc96=(($50+1)|0);
      $filt=$inc96;
      __label__ = 33; break;
    case 36: 
      $filt=0;
      __label__ = 37; break;
    case 37: 
      var $51=$filt;
      var $cmp99=(($51)|0) <= 5;
      if ($cmp99) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $52=$filt;
      var $53=HEAP32[((_method)>>2)];
      var $arrayidx102=(($fm+($53<<2))|0);
      HEAP32[(($arrayidx102)>>2)]=$52;
      var $54=HEAP32[((_method)>>2)];
      var $arrayidx103=(($lv+($54<<2))|0);
      HEAP32[(($arrayidx103)>>2)]=4;
      var $55=HEAP32[((_method)>>2)];
      var $arrayidx104=(($zs+($55<<2))|0);
      HEAP32[(($arrayidx104)>>2)]=3;
      var $56=HEAP32[((_method)>>2)];
      var $inc105=(($56+1)|0);
      HEAP32[((_method)>>2)]=$inc105;
      __label__ = 39; break;
    case 39: 
      var $57=$filt;
      var $inc107=(($57+1)|0);
      $filt=$inc107;
      __label__ = 37; break;
    case 40: 
      var $58=HEAP32[((_method)>>2)];
      $num_methods=$58;
      HEAP32[((_names)>>2)]=1;
      $i=1;
      __label__ = 41; break;
    case 41: 
      var $59=$i;
      var $60=$argc_addr;
      var $cmp110=(($59)|0) < (($60)|0);
      if ($cmp110) { __label__ = 42; break; } else { __label__ = 475; break; }
    case 42: 
      var $61=$i;
      var $62=$argv_addr;
      var $arrayidx113=(($62+($61<<2))|0);
      var $63=HEAP32[(($arrayidx113)>>2)];
      var $call114=_strncmp($63, ((STRING_TABLE.__str76)|0), 1);
      var $tobool115=(($call114)|0)!=0;
      if ($tobool115) { __label__ = 44; break; } else { __label__ = 43; break; }
    case 43: 
      var $64=HEAP32[((_names)>>2)];
      var $inc117=(($64+1)|0);
      HEAP32[((_names)>>2)]=$inc117;
      __label__ = 44; break;
    case 44: 
      var $65=$i;
      var $66=$argv_addr;
      var $arrayidx119=(($66+($65<<2))|0);
      var $67=HEAP32[(($arrayidx119)>>2)];
      var $call120=_strncmp($67, ((STRING_TABLE.__str77)|0), 5);
      var $tobool121=(($call120)|0)!=0;
      if ($tobool121) { __label__ = 46; break; } else { __label__ = 45; break; }
    case 45: 
      HEAP32[((_methods_specified)>>2)]=1;
      var $arrayidx123=(($try_method+64)|0);
      HEAP32[(($arrayidx123)>>2)]=0;
      var $arrayidx124=(($try_method+212)|0);
      HEAP32[(($arrayidx124)>>2)]=0;
      __label__ = 473; break;
    case 46: 
      var $68=$i;
      var $69=$argv_addr;
      var $arrayidx125=(($69+($68<<2))|0);
      var $70=HEAP32[(($arrayidx125)>>2)];
      var $call126=_strncmp($70, ((STRING_TABLE.__str78)|0), 8);
      var $tobool127=(($call126)|0)!=0;
      if ($tobool127) { __label__ = 52; break; } else { __label__ = 47; break; }
    case 47: 
      HEAP32[((_methods_specified)>>2)]=1;
      HEAP32[((_method)>>2)]=11;
      __label__ = 48; break;
    case 48: 
      var $71=HEAP32[((_method)>>2)];
      var $cmp130=(($71)|0) <= 16;
      if ($cmp130) { __label__ = 49; break; } else { __label__ = 51; break; }
    case 49: 
      var $72=HEAP32[((_method)>>2)];
      var $arrayidx133=(($try_method+($72<<2))|0);
      HEAP32[(($arrayidx133)>>2)]=0;
      __label__ = 50; break;
    case 50: 
      var $73=HEAP32[((_method)>>2)];
      var $inc135=(($73+1)|0);
      HEAP32[((_method)>>2)]=$inc135;
      __label__ = 48; break;
    case 51: 
      __label__ = 472; break;
    case 52: 
      var $74=$i;
      var $75=$argv_addr;
      var $arrayidx138=(($75+($74<<2))|0);
      var $76=HEAP32[(($arrayidx138)>>2)];
      var $call139=_strncmp($76, ((STRING_TABLE.__str79)|0), 4);
      var $tobool140=(($call139)|0)!=0;
      if ($tobool140) { __label__ = 58; break; } else { __label__ = 53; break; }
    case 53: 
      HEAP32[((_methods_specified)>>2)]=1;
      HEAP32[((_method)>>2)]=125;
      __label__ = 54; break;
    case 54: 
      var $77=HEAP32[((_method)>>2)];
      var $cmp143=(($77)|0) <= 136;
      if ($cmp143) { __label__ = 55; break; } else { __label__ = 57; break; }
    case 55: 
      var $78=HEAP32[((_method)>>2)];
      var $arrayidx146=(($try_method+($78<<2))|0);
      HEAP32[(($arrayidx146)>>2)]=0;
      __label__ = 56; break;
    case 56: 
      var $79=HEAP32[((_method)>>2)];
      var $inc148=(($79+1)|0);
      HEAP32[((_method)>>2)]=$inc148;
      __label__ = 54; break;
    case 57: 
      __label__ = 471; break;
    case 58: 
      var $80=$i;
      var $81=$argv_addr;
      var $arrayidx151=(($81+($80<<2))|0);
      var $82=HEAP32[(($arrayidx151)>>2)];
      var $call152=_strncmp($82, ((STRING_TABLE.__str80)|0), 8);
      var $tobool153=(($call152)|0)!=0;
      if ($tobool153) { __label__ = 62; break; } else { __label__ = 59; break; }
    case 59: 
      var $83=HEAP32[((_names)>>2)];
      var $inc155=(($83+1)|0);
      HEAP32[((_names)>>2)]=$inc155;
      var $84=$i;
      var $inc156=(($84+1)|0);
      $i=$inc156;
      var $85=$i;
      var $86=$argc_addr;
      var $cmp157=(($85)|0) >= (($86)|0);
      if ($cmp157) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $call160=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 61: 
      var $87=$i;
      var $88=$argv_addr;
      var $arrayidx162=(($88+($87<<2))|0);
      var $89=HEAP32[(($arrayidx162)>>2)];
      var $call163=_atoi($89);
      HEAP32[((_crushed_idat_size)>>2)]=$call163;
      __label__ = 470; break;
    case 62: 
      var $90=$i;
      var $91=$argv_addr;
      var $arrayidx165=(($91+($90<<2))|0);
      var $92=HEAP32[(($arrayidx165)>>2)];
      var $call166=_strncmp($92, ((STRING_TABLE.__str82)|0), 5);
      var $tobool167=(($call166)|0)!=0;
      if ($tobool167) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $93=$i;
      var $94=$argv_addr;
      var $arrayidx169=(($94+($93<<2))|0);
      var $95=HEAP32[(($arrayidx169)>>2)];
      var $call170=_strncmp($95, ((STRING_TABLE.__str83)|0), 5);
      var $tobool171=(($call170)|0)!=0;
      if ($tobool171) { __label__ = 65; break; } else { __label__ = 64; break; }
    case 64: 
      var $96=HEAP32[((_names)>>2)];
      var $add=(($96+3)|0);
      HEAP32[((_names)>>2)]=$add;
      HEAP32[((_have_bkgd)>>2)]=1;
      var $97=$i;
      var $inc173=(($97+1)|0);
      $i=$inc173;
      var $98=$argv_addr;
      var $arrayidx174=(($98+($inc173<<2))|0);
      var $99=HEAP32[(($arrayidx174)>>2)];
      var $call175=_atoi($99);
      var $conv176=(($call175) & 65535);
      HEAP16[((_bkgd_red)>>1)]=$conv176;
      var $100=$i;
      var $inc177=(($100+1)|0);
      $i=$inc177;
      var $101=$argv_addr;
      var $arrayidx178=(($101+($inc177<<2))|0);
      var $102=HEAP32[(($arrayidx178)>>2)];
      var $call179=_atoi($102);
      var $conv180=(($call179) & 65535);
      HEAP16[((_bkgd_green)>>1)]=$conv180;
      var $103=$i;
      var $inc181=(($103+1)|0);
      $i=$inc181;
      var $104=$argv_addr;
      var $arrayidx182=(($104+($inc181<<2))|0);
      var $105=HEAP32[(($arrayidx182)>>2)];
      var $call183=_atoi($105);
      var $conv184=(($call183) & 65535);
      HEAP16[((_bkgd_blue)>>1)]=$conv184;
      __label__ = 469; break;
    case 65: 
      var $106=$i;
      var $107=$argv_addr;
      var $arrayidx186=(($107+($106<<2))|0);
      var $108=HEAP32[(($arrayidx186)>>2)];
      var $call187=_strncmp($108, ((STRING_TABLE.__str84)|0), 6);
      var $tobool188=(($call187)|0)!=0;
      if ($tobool188) { __label__ = 89; break; } else { __label__ = 66; break; }
    case 66: 
      HEAP32[((_methods_specified)>>2)]=1;
      var $109=HEAP32[((_brute_force)>>2)];
      var $inc190=(($109+1)|0);
      HEAP32[((_brute_force)>>2)]=$inc190;
      HEAP32[((_method)>>2)]=11;
      __label__ = 67; break;
    case 67: 
      var $110=HEAP32[((_method)>>2)];
      var $111=$num_methods;
      var $cmp192=(($110)|0) < (($111)|0);
      if ($cmp192) { __label__ = 68; break; } else { __label__ = 70; break; }
    case 68: 
      var $112=HEAP32[((_method)>>2)];
      var $arrayidx195=(($try_method+($112<<2))|0);
      HEAP32[(($arrayidx195)>>2)]=0;
      __label__ = 69; break;
    case 69: 
      var $113=HEAP32[((_method)>>2)];
      var $inc197=(($113+1)|0);
      HEAP32[((_method)>>2)]=$inc197;
      __label__ = 67; break;
    case 70: 
      var $114=HEAP32[((_brute_force_filter)>>2)];
      var $cmp199=(($114)|0)==0;
      if ($cmp199) { __label__ = 71; break; } else { __label__ = 76; break; }
    case 71: 
      $filt=0;
      __label__ = 72; break;
    case 72: 
      var $115=$filt;
      var $cmp203=(($115)|0) < 6;
      if ($cmp203) { __label__ = 73; break; } else { __label__ = 75; break; }
    case 73: 
      var $116=$filt;
      var $arrayidx206=((_brute_force_filters+($116<<2))|0);
      HEAP32[(($arrayidx206)>>2)]=0;
      __label__ = 74; break;
    case 74: 
      var $117=$filt;
      var $inc208=(($117+1)|0);
      $filt=$inc208;
      __label__ = 72; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      var $118=HEAP32[((_brute_force_level)>>2)];
      var $cmp211=(($118)|0)==0;
      if ($cmp211) { __label__ = 77; break; } else { __label__ = 82; break; }
    case 77: 
      $lev=0;
      __label__ = 78; break;
    case 78: 
      var $119=$lev;
      var $cmp215=(($119)|0) < 10;
      if ($cmp215) { __label__ = 79; break; } else { __label__ = 81; break; }
    case 79: 
      var $120=$lev;
      var $arrayidx218=((_brute_force_levels+($120<<2))|0);
      HEAP32[(($arrayidx218)>>2)]=0;
      __label__ = 80; break;
    case 80: 
      var $121=$lev;
      var $inc220=(($121+1)|0);
      $lev=$inc220;
      __label__ = 78; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      var $122=HEAP32[((_brute_force_strategy)>>2)];
      var $cmp223=(($122)|0)==0;
      if ($cmp223) { __label__ = 83; break; } else { __label__ = 88; break; }
    case 83: 
      $strat=0;
      __label__ = 84; break;
    case 84: 
      var $123=$strat;
      var $cmp227=(($123)|0) < 4;
      if ($cmp227) { __label__ = 85; break; } else { __label__ = 87; break; }
    case 85: 
      var $124=$strat;
      var $arrayidx230=((_brute_force_strategies+($124<<2))|0);
      HEAP32[(($arrayidx230)>>2)]=0;
      __label__ = 86; break;
    case 86: 
      var $125=$strat;
      var $inc232=(($125+1)|0);
      $strat=$inc232;
      __label__ = 84; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 468; break;
    case 89: 
      var $126=$i;
      var $127=$argv_addr;
      var $arrayidx236=(($127+($126<<2))|0);
      var $128=HEAP32[(($arrayidx236)>>2)];
      var $call237=_strncmp($128, ((STRING_TABLE.__str85)|0), 10);
      var $tobool238=(($call237)|0)!=0;
      if ($tobool238) { __label__ = 93; break; } else { __label__ = 90; break; }
    case 90: 
      var $129=HEAP32[((_names)>>2)];
      var $inc240=(($129+1)|0);
      HEAP32[((_names)>>2)]=$inc240;
      var $130=$i;
      var $inc241=(($130+1)|0);
      $i=$inc241;
      var $131=$i;
      var $132=$argc_addr;
      var $cmp242=(($131)|0) >= (($132)|0);
      if ($cmp242) { __label__ = 91; break; } else { __label__ = 92; break; }
    case 91: 
      var $call245=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 92: 
      var $133=$i;
      var $134=$argv_addr;
      var $arrayidx247=(($134+($133<<2))|0);
      var $135=HEAP32[(($arrayidx247)>>2)];
      var $call248=_atoi($135);
      HEAP32[((_force_output_bit_depth)>>2)]=$call248;
      __label__ = 467; break;
    case 93: 
      var $136=$i;
      var $137=$argv_addr;
      var $arrayidx250=(($137+($136<<2))|0);
      var $138=HEAP32[(($arrayidx250)>>2)];
      var $call251=_strncmp($138, ((STRING_TABLE.__str86)|0), 3);
      var $tobool252=(($call251)|0)!=0;
      if ($tobool252) { __label__ = 95; break; } else { __label__ = 94; break; }
    case 94: 
      HEAP32[((_do_color_count)>>2)]=1;
      __label__ = 466; break;
    case 95: 
      var $139=$i;
      var $140=$argv_addr;
      var $arrayidx255=(($140+($139<<2))|0);
      var $141=HEAP32[(($arrayidx255)>>2)];
      var $call256=_strncmp($141, ((STRING_TABLE.__str87)|0), 6);
      var $tobool257=(($call256)|0)!=0;
      if ($tobool257) { __label__ = 97; break; } else { __label__ = 96; break; }
    case 96: 
      HEAP32[((_do_color_count)>>2)]=0;
      __label__ = 465; break;
    case 97: 
      var $142=$i;
      var $143=$argv_addr;
      var $arrayidx260=(($143+($142<<2))|0);
      var $144=HEAP32[(($arrayidx260)>>2)];
      var $call261=_strncmp($144, ((STRING_TABLE.__str88)|0), 2);
      var $tobool262=(($call261)|0)!=0;
      if ($tobool262) { __label__ = 101; break; } else { __label__ = 98; break; }
    case 98: 
      var $145=HEAP32[((_names)>>2)];
      var $inc264=(($145+1)|0);
      HEAP32[((_names)>>2)]=$inc264;
      var $146=$i;
      var $inc265=(($146+1)|0);
      $i=$inc265;
      var $147=$i;
      var $148=$argc_addr;
      var $cmp266=(($147)|0) >= (($148)|0);
      if ($cmp266) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      var $call269=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 100: 
      var $149=$i;
      var $150=$argv_addr;
      var $arrayidx271=(($150+($149<<2))|0);
      var $151=HEAP32[(($arrayidx271)>>2)];
      var $call272=_atoi($151);
      HEAP32[((_force_output_color_type)>>2)]=$call272;
      __label__ = 464; break;
    case 101: 
      var $152=$i;
      var $153=$argv_addr;
      var $arrayidx274=(($153+($152<<2))|0);
      var $154=HEAP32[(($arrayidx274)>>2)];
      var $call275=_strncmp($154, ((STRING_TABLE.__str89)|0), 4);
      var $tobool276=(($call275)|0)!=0;
      if ($tobool276) { __label__ = 103; break; } else { __label__ = 102; break; }
    case 102: 
      var $155=HEAP32[((_double_gamma)>>2)];
      var $inc278=(($155+1)|0);
      HEAP32[((_double_gamma)>>2)]=$inc278;
      HEAP32[((_found_gAMA)>>2)]=1;
      HEAP32[((_global_things_have_changed)>>2)]=1;
      __label__ = 463; break;
    case 103: 
      var $156=$i;
      var $157=$argv_addr;
      var $arrayidx280=(($157+($156<<2))|0);
      var $158=HEAP32[(($arrayidx280)>>2)];
      var $call281=_strncmp($158, ((STRING_TABLE.__str90)|0), 2);
      var $tobool282=(($call281)|0)!=0;
      if ($tobool282) { __label__ = 110; break; } else { __label__ = 104; break; }
    case 104: 
      var $159=$i;
      var $inc284=(($159+1)|0);
      $i=$inc284;
      var $160=$i;
      var $161=$argc_addr;
      var $cmp285=(($160)|0) >= (($161)|0);
      if ($cmp285) { __label__ = 105; break; } else { __label__ = 106; break; }
    case 105: 
      var $call288=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 106: 
      var $162=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp290=(($162)|0)==2;
      if ($cmp290) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      HEAP32[((_pngcrush_mode)>>2)]=3;
      __label__ = 109; break;
    case 108: 
      HEAP32[((_pngcrush_mode)>>2)]=1;
      __label__ = 109; break;
    case 109: 
      var $163=HEAP32[((_names)>>2)];
      var $inc295=(($163+1)|0);
      HEAP32[((_names)>>2)]=$inc295;
      var $164=$argv_addr;
      var $arrayidx296=(($164+($163<<2))|0);
      var $165=HEAP32[(($arrayidx296)>>2)];
      HEAP32[((_directory_name)>>2)]=$165;
      __label__ = 462; break;
    case 110: 
      var $166=$i;
      var $167=$argv_addr;
      var $arrayidx298=(($167+($166<<2))|0);
      var $168=HEAP32[(($arrayidx298)>>2)];
      var $call299=_strncmp($168, ((STRING_TABLE.__str91)|0), 5);
      var $tobool300=(($call299)|0)!=0;
      if ($tobool300) { __label__ = 112; break; } else { __label__ = 111; break; }
    case 111: 
      HEAP32[((_pngcrush_must_exit)>>2)]=1;
      __label__ = 461; break;
    case 112: 
      var $169=$i;
      var $170=$argv_addr;
      var $arrayidx303=(($170+($169<<2))|0);
      var $171=HEAP32[(($arrayidx303)>>2)];
      var $call304=_strncmp($171, ((STRING_TABLE.__str92)|0), 2);
      var $tobool305=(($call304)|0)!=0;
      if ($tobool305) { __label__ = 119; break; } else { __label__ = 113; break; }
    case 113: 
      var $172=$i;
      var $inc307=(($172+1)|0);
      $i=$inc307;
      var $173=$i;
      var $174=$argc_addr;
      var $cmp308=(($173)|0) >= (($174)|0);
      if ($cmp308) { __label__ = 114; break; } else { __label__ = 115; break; }
    case 114: 
      var $call311=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 115: 
      var $175=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp313=(($175)|0)==1;
      if ($cmp313) { __label__ = 116; break; } else { __label__ = 117; break; }
    case 116: 
      HEAP32[((_pngcrush_mode)>>2)]=3;
      __label__ = 118; break;
    case 117: 
      HEAP32[((_pngcrush_mode)>>2)]=2;
      __label__ = 118; break;
    case 118: 
      var $176=HEAP32[((_names)>>2)];
      var $inc318=(($176+1)|0);
      HEAP32[((_names)>>2)]=$inc318;
      var $177=$argv_addr;
      var $arrayidx319=(($177+($176<<2))|0);
      var $178=HEAP32[(($arrayidx319)>>2)];
      HEAP32[((_extension)>>2)]=$178;
      __label__ = 460; break;
    case 119: 
      var $179=$i;
      var $180=$argv_addr;
      var $arrayidx321=(($180+($179<<2))|0);
      var $181=HEAP32[(($arrayidx321)>>2)];
      var $call322=_strncmp($181, ((STRING_TABLE.__str93)|0), 6);
      var $tobool323=(($call322)|0)!=0;
      if ($tobool323) { __label__ = 121; break; } else { __label__ = 120; break; }
    case 120: 
      HEAP32[((_global_things_have_changed)>>2)]=1;
      __label__ = 459; break;
    case 121: 
      var $182=$i;
      var $183=$argv_addr;
      var $arrayidx326=(($183+($182<<2))|0);
      var $184=HEAP32[(($arrayidx326)>>2)];
      var $call327=_strncmp($184, ((STRING_TABLE.__str94)|0), 4);
      var $tobool328=(($call327)|0)!=0;
      if ($tobool328) { __label__ = 123; break; } else { __label__ = 122; break; }
    case 122: 
      var $185=HEAP32[((_fix)>>2)];
      var $inc330=(($185+1)|0);
      HEAP32[((_fix)>>2)]=$inc330;
      __label__ = 458; break;
    case 123: 
      var $186=$i;
      var $187=$argv_addr;
      var $arrayidx332=(($187+($186<<2))|0);
      var $188=HEAP32[(($arrayidx332)>>2)];
      var $call333=_strncmp($188, ((STRING_TABLE.__str95)|0), 2);
      var $tobool334=(($call333)|0)!=0;
      if ($tobool334) { __label__ = 151; break; } else { __label__ = 124; break; }
    case 124: 
      var $189=$i;
      var $inc336=(($189+1)|0);
      $i=$inc336;
      var $190=$argv_addr;
      var $arrayidx337=(($190+($inc336<<2))|0);
      var $191=HEAP32[(($arrayidx337)>>2)];
      var $call338=_atoi($191);
      $specified_filter=$call338;
      var $192=$specified_filter;
      var $cmp339=(($192)|0) > 5;
      if ($cmp339) { __label__ = 126; break; } else { __label__ = 125; break; }
    case 125: 
      var $193=$specified_filter;
      var $cmp342=(($193)|0) < 0;
      if ($cmp342) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      $specified_filter=5;
      __label__ = 127; break;
    case 127: 
      var $194=HEAP32[((_names)>>2)];
      var $inc346=(($194+1)|0);
      HEAP32[((_names)>>2)]=$inc346;
      var $195=HEAP32[((_brute_force)>>2)];
      var $cmp347=(($195)|0)==0;
      if ($cmp347) { __label__ = 128; break; } else { __label__ = 129; break; }
    case 128: 
      var $196=$specified_filter;
      var $197=HEAP32[((_method)>>2)];
      var $arrayidx350=(($fm+($197<<2))|0);
      HEAP32[(($arrayidx350)>>2)]=$196;
      __label__ = 150; break;
    case 129: 
      $filt=0;
      __label__ = 130; break;
    case 130: 
      var $198=$filt;
      var $cmp353=(($198)|0) < 6;
      if ($cmp353) { __label__ = 131; break; } else { __label__ = 133; break; }
    case 131: 
      var $199=$filt;
      var $arrayidx356=((_brute_force_filters+($199<<2))|0);
      HEAP32[(($arrayidx356)>>2)]=1;
      __label__ = 132; break;
    case 132: 
      var $200=$filt;
      var $inc358=(($200+1)|0);
      $filt=$inc358;
      __label__ = 130; break;
    case 133: 
      var $201=$specified_filter;
      var $arrayidx360=((_brute_force_filters+($201<<2))|0);
      HEAP32[(($arrayidx360)>>2)]=0;
      HEAP32[((_method)>>2)]=11;
      $filt=0;
      __label__ = 134; break;
    case 134: 
      var $202=$filt;
      var $cmp362=(($202)|0) < 6;
      if ($cmp362) { __label__ = 135; break; } else { __label__ = 137; break; }
    case 135: 
      var $203=$filt;
      var $arrayidx365=((_brute_force_filters+($203<<2))|0);
      var $204=HEAP32[(($arrayidx365)>>2)];
      var $205=HEAP32[((((_brute_force_strategies+8)|0))>>2)];
      var $or=$204 | $205;
      var $206=HEAP32[((_method)>>2)];
      var $arrayidx366=(($try_method+($206<<2))|0);
      HEAP32[(($arrayidx366)>>2)]=$or;
      var $207=HEAP32[((_method)>>2)];
      var $inc367=(($207+1)|0);
      HEAP32[((_method)>>2)]=$inc367;
      __label__ = 136; break;
    case 136: 
      var $208=$filt;
      var $inc369=(($208+1)|0);
      $filt=$inc369;
      __label__ = 134; break;
    case 137: 
      $lev=1;
      __label__ = 138; break;
    case 138: 
      var $209=$lev;
      var $cmp372=(($209)|0) < 10;
      if ($cmp372) { __label__ = 139; break; } else { __label__ = 149; break; }
    case 139: 
      $strat=0;
      __label__ = 140; break;
    case 140: 
      var $210=$strat;
      var $cmp376=(($210)|0) < 2;
      if ($cmp376) { __label__ = 141; break; } else { __label__ = 147; break; }
    case 141: 
      $filt=0;
      __label__ = 142; break;
    case 142: 
      var $211=$filt;
      var $cmp380=(($211)|0) < 6;
      if ($cmp380) { __label__ = 143; break; } else { __label__ = 145; break; }
    case 143: 
      var $212=$lev;
      var $arrayidx383=((_brute_force_levels+($212<<2))|0);
      var $213=HEAP32[(($arrayidx383)>>2)];
      var $214=$filt;
      var $arrayidx384=((_brute_force_filters+($214<<2))|0);
      var $215=HEAP32[(($arrayidx384)>>2)];
      var $or385=$213 | $215;
      var $216=$strat;
      var $arrayidx386=((_brute_force_strategies+($216<<2))|0);
      var $217=HEAP32[(($arrayidx386)>>2)];
      var $or387=$or385 | $217;
      var $218=HEAP32[((_method)>>2)];
      var $arrayidx388=(($try_method+($218<<2))|0);
      HEAP32[(($arrayidx388)>>2)]=$or387;
      var $219=HEAP32[((_method)>>2)];
      var $inc389=(($219+1)|0);
      HEAP32[((_method)>>2)]=$inc389;
      __label__ = 144; break;
    case 144: 
      var $220=$filt;
      var $inc391=(($220+1)|0);
      $filt=$inc391;
      __label__ = 142; break;
    case 145: 
      __label__ = 146; break;
    case 146: 
      var $221=$strat;
      var $inc394=(($221+1)|0);
      $strat=$inc394;
      __label__ = 140; break;
    case 147: 
      __label__ = 148; break;
    case 148: 
      var $222=$lev;
      var $inc397=(($222+1)|0);
      $lev=$inc397;
      __label__ = 138; break;
    case 149: 
      var $223=HEAP32[((_brute_force_filter)>>2)];
      var $inc399=(($223+1)|0);
      HEAP32[((_brute_force_filter)>>2)]=$inc399;
      __label__ = 150; break;
    case 150: 
      __label__ = 457; break;
    case 151: 
      var $224=$i;
      var $225=$argv_addr;
      var $arrayidx402=(($225+($224<<2))|0);
      var $226=HEAP32[(($arrayidx402)>>2)];
      var $call403=_strncmp($226, ((STRING_TABLE.__str96)|0), 5);
      var $tobool404=(($call403)|0)!=0;
      if ($tobool404) { __label__ = 153; break; } else { __label__ = 152; break; }
    case 152: 
      HEAP32[((_do_loco)>>2)]=1;
      __label__ = 456; break;
    case 153: 
      var $227=$i;
      var $228=$argv_addr;
      var $arrayidx407=(($228+($227<<2))|0);
      var $229=HEAP32[(($arrayidx407)>>2)];
      var $call408=_strncmp($229, ((STRING_TABLE.__str97)|0), 2);
      var $tobool409=(($call408)|0)!=0;
      if ($tobool409) { __label__ = 183; break; } else { __label__ = 154; break; }
    case 154: 
      var $230=$i;
      var $inc411=(($230+1)|0);
      $i=$inc411;
      var $231=$argv_addr;
      var $arrayidx412=(($231+($inc411<<2))|0);
      var $232=HEAP32[(($arrayidx412)>>2)];
      var $call413=_atoi($232);
      $specified_level=$call413;
      var $233=$specified_level;
      var $cmp414=(($233)|0) > 9;
      if ($cmp414) { __label__ = 156; break; } else { __label__ = 155; break; }
    case 155: 
      var $234=$specified_level;
      var $cmp417=(($234)|0) < 0;
      if ($cmp417) { __label__ = 156; break; } else { __label__ = 157; break; }
    case 156: 
      $specified_level=9;
      __label__ = 157; break;
    case 157: 
      var $235=HEAP32[((_names)>>2)];
      var $inc421=(($235+1)|0);
      HEAP32[((_names)>>2)]=$inc421;
      var $236=HEAP32[((_brute_force)>>2)];
      var $cmp422=(($236)|0)==0;
      if ($cmp422) { __label__ = 158; break; } else { __label__ = 159; break; }
    case 158: 
      var $237=$specified_level;
      var $238=HEAP32[((_method)>>2)];
      var $arrayidx425=(($lv+($238<<2))|0);
      HEAP32[(($arrayidx425)>>2)]=$237;
      __label__ = 182; break;
    case 159: 
      var $239=HEAP32[((_brute_force_level)>>2)];
      var $cmp427=(($239)|0)==0;
      if ($cmp427) { __label__ = 160; break; } else { __label__ = 165; break; }
    case 160: 
      $lev=0;
      __label__ = 161; break;
    case 161: 
      var $240=$lev;
      var $cmp431=(($240)|0) < 10;
      if ($cmp431) { __label__ = 162; break; } else { __label__ = 164; break; }
    case 162: 
      var $241=$lev;
      var $arrayidx434=((_brute_force_levels+($241<<2))|0);
      HEAP32[(($arrayidx434)>>2)]=1;
      __label__ = 163; break;
    case 163: 
      var $242=$lev;
      var $inc436=(($242+1)|0);
      $lev=$inc436;
      __label__ = 161; break;
    case 164: 
      __label__ = 165; break;
    case 165: 
      var $243=$specified_level;
      var $arrayidx439=((_brute_force_levels+($243<<2))|0);
      HEAP32[(($arrayidx439)>>2)]=0;
      HEAP32[((_method)>>2)]=11;
      $filt=0;
      __label__ = 166; break;
    case 166: 
      var $244=$filt;
      var $cmp441=(($244)|0) < 6;
      if ($cmp441) { __label__ = 167; break; } else { __label__ = 169; break; }
    case 167: 
      var $245=$specified_level;
      var $246=HEAP32[((_method)>>2)];
      var $arrayidx444=(($lv+($246<<2))|0);
      HEAP32[(($arrayidx444)>>2)]=$245;
      var $247=HEAP32[((_method)>>2)];
      var $inc445=(($247+1)|0);
      HEAP32[((_method)>>2)]=$inc445;
      __label__ = 168; break;
    case 168: 
      var $248=$filt;
      var $inc447=(($248+1)|0);
      $filt=$inc447;
      __label__ = 166; break;
    case 169: 
      $lev=1;
      __label__ = 170; break;
    case 170: 
      var $249=$lev;
      var $cmp450=(($249)|0) < 10;
      if ($cmp450) { __label__ = 171; break; } else { __label__ = 181; break; }
    case 171: 
      $strat=0;
      __label__ = 172; break;
    case 172: 
      var $250=$strat;
      var $cmp454=(($250)|0) < 2;
      if ($cmp454) { __label__ = 173; break; } else { __label__ = 179; break; }
    case 173: 
      $filt=0;
      __label__ = 174; break;
    case 174: 
      var $251=$filt;
      var $cmp458=(($251)|0) < 6;
      if ($cmp458) { __label__ = 175; break; } else { __label__ = 177; break; }
    case 175: 
      var $252=$lev;
      var $arrayidx461=((_brute_force_levels+($252<<2))|0);
      var $253=HEAP32[(($arrayidx461)>>2)];
      var $254=$filt;
      var $arrayidx462=((_brute_force_filters+($254<<2))|0);
      var $255=HEAP32[(($arrayidx462)>>2)];
      var $or463=$253 | $255;
      var $256=$strat;
      var $arrayidx464=((_brute_force_strategies+($256<<2))|0);
      var $257=HEAP32[(($arrayidx464)>>2)];
      var $or465=$or463 | $257;
      var $258=HEAP32[((_method)>>2)];
      var $arrayidx466=(($try_method+($258<<2))|0);
      HEAP32[(($arrayidx466)>>2)]=$or465;
      var $259=HEAP32[((_method)>>2)];
      var $inc467=(($259+1)|0);
      HEAP32[((_method)>>2)]=$inc467;
      __label__ = 176; break;
    case 176: 
      var $260=$filt;
      var $inc469=(($260+1)|0);
      $filt=$inc469;
      __label__ = 174; break;
    case 177: 
      __label__ = 178; break;
    case 178: 
      var $261=$strat;
      var $inc472=(($261+1)|0);
      $strat=$inc472;
      __label__ = 172; break;
    case 179: 
      __label__ = 180; break;
    case 180: 
      var $262=$lev;
      var $inc475=(($262+1)|0);
      $lev=$inc475;
      __label__ = 170; break;
    case 181: 
      var $263=HEAP32[((_brute_force_level)>>2)];
      var $inc477=(($263+1)|0);
      HEAP32[((_brute_force_level)>>2)]=$inc477;
      __label__ = 182; break;
    case 182: 
      __label__ = 455; break;
    case 183: 
      var $264=$i;
      var $265=$argv_addr;
      var $arrayidx480=(($265+($264<<2))|0);
      var $266=HEAP32[(($arrayidx480)>>2)];
      var $call481=_strncmp($266, ((STRING_TABLE.__str98)|0), 2);
      var $tobool482=(($call481)|0)!=0;
      if ($tobool482) { __label__ = 202; break; } else { __label__ = 184; break; }
    case 184: 
      var $267=HEAP32[((_names)>>2)];
      var $inc484=(($267+1)|0);
      HEAP32[((_names)>>2)]=$inc484;
      var $268=$i;
      var $inc485=(($268+1)|0);
      $i=$inc485;
      var $269=$i;
      var $270=$argc_addr;
      var $cmp486=(($269)|0) >= (($270)|0);
      if ($cmp486) { __label__ = 185; break; } else { __label__ = 186; break; }
    case 185: 
      var $call489=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 186: 
      HEAP32[((_found_gAMA)>>2)]=1;
      var $271=HEAP32[((_intent)>>2)];
      var $cmp491=(($271)|0) < 0;
      if ($cmp491) { __label__ = 187; break; } else { __label__ = 201; break; }
    case 187: 
      var $arraydecay=(($number)|0);
      $n=$arraydecay;
      $nzeroes=-1;
      var $272=$i;
      var $273=$argv_addr;
      var $arrayidx494=(($273+($272<<2))|0);
      var $274=HEAP32[(($arrayidx494)>>2)];
      var $call495=_strlen($274);
      $length=$call495;
      $c=0;
      __label__ = 188; break;
    case 188: 
      var $275=$c;
      var $276=$length;
      var $cmp497=(($275)|0) < (($276)|0);
      if ($cmp497) { __label__ = 189; break; } else { __label__ = 196; break; }
    case 189: 
      var $277=$i;
      var $278=$argv_addr;
      var $arrayidx500=(($278+($277<<2))|0);
      var $279=HEAP32[(($arrayidx500)>>2)];
      var $280=$c;
      var $add_ptr=(($279+$280)|0);
      var $281=HEAP8[($add_ptr)];
      var $conv501=(($281 << 24) >> 24);
      var $cmp502=(($conv501)|0)==46;
      if ($cmp502) { __label__ = 190; break; } else { __label__ = 191; break; }
    case 190: 
      $nzeroes=5;
      __label__ = 194; break;
    case 191: 
      var $282=$nzeroes;
      var $tobool506=(($282)|0)!=0;
      if ($tobool506) { __label__ = 192; break; } else { __label__ = 193; break; }
    case 192: 
      var $283=$i;
      var $284=$argv_addr;
      var $arrayidx508=(($284+($283<<2))|0);
      var $285=HEAP32[(($arrayidx508)>>2)];
      var $286=$c;
      var $add_ptr509=(($285+$286)|0);
      var $287=HEAP8[($add_ptr509)];
      var $288=$n;
      var $incdec_ptr510=(($288+1)|0);
      $n=$incdec_ptr510;
      HEAP8[($288)]=$287;
      var $289=$nzeroes;
      var $dec=(($289-1)|0);
      $nzeroes=$dec;
      __label__ = 193; break;
    case 193: 
      __label__ = 194; break;
    case 194: 
      __label__ = 195; break;
    case 195: 
      var $290=$c;
      var $inc514=(($290+1)|0);
      $c=$inc514;
      __label__ = 188; break;
    case 196: 
      $c=0;
      __label__ = 197; break;
    case 197: 
      var $291=$c;
      var $292=$nzeroes;
      var $cmp517=(($291)|0) < (($292)|0);
      if ($cmp517) { __label__ = 198; break; } else { __label__ = 200; break; }
    case 198: 
      var $293=$n;
      var $incdec_ptr520=(($293+1)|0);
      $n=$incdec_ptr520;
      HEAP8[($293)]=48;
      __label__ = 199; break;
    case 199: 
      var $294=$c;
      var $inc522=(($294+1)|0);
      $c=$inc522;
      __label__ = 197; break;
    case 200: 
      var $295=$n;
      HEAP8[($295)]=0;
      var $arraydecay524=(($number)|0);
      var $call525=_atoi($arraydecay524);
      HEAP32[((_specified_gamma)>>2)]=$call525;
      __label__ = 201; break;
    case 201: 
      __label__ = 454; break;
    case 202: 
      var $296=$i;
      var $297=$argv_addr;
      var $arrayidx528=(($297+($296<<2))|0);
      var $298=HEAP32[(($arrayidx528)>>2)];
      var $call529=_strncmp($298, ((STRING_TABLE.__str99)|0), 2);
      var $tobool530=(($call529)|0)!=0;
      if ($tobool530) { __label__ = 204; break; } else { __label__ = 203; break; }
    case 203: 
      var $299=HEAP32[((_verbose)>>2)];
      var $inc532=(($299+1)|0);
      HEAP32[((_verbose)>>2)]=$inc532;
      _print_version_info();
      _print_usage(0);
      __label__ = 453; break;
    case 204: 
      var $300=$i;
      var $301=$argv_addr;
      var $arrayidx534=(($301+($300<<2))|0);
      var $302=HEAP32[(($arrayidx534)>>2)];
      var $call535=_strncmp($302, ((STRING_TABLE.__str100)|0), 5);
      var $tobool536=(($call535)|0)!=0;
      if ($tobool536) { __label__ = 217; break; } else { __label__ = 205; break; }
    case 205: 
      var $303=HEAP32[((_iccp_length)>>2)];
      var $tobool538=(($303)|0)!=0;
      if ($tobool538) { __label__ = 206; break; } else { __label__ = 207; break; }
    case 206: 
      var $304=HEAP32[((_iccp_text)>>2)];
      _free($304);
      __label__ = 207; break;
    case 207: 
      var $305=$i;
      var $inc541=(($305+1)|0);
      $i=$inc541;
      var $306=$argv_addr;
      var $arrayidx542=(($306+($inc541<<2))|0);
      var $307=HEAP32[(($arrayidx542)>>2)];
      var $call543=_atoi($307);
      HEAP32[((_iccp_length)>>2)]=$call543;
      var $308=HEAP32[((_names)>>2)];
      var $add544=(($308+3)|0);
      HEAP32[((_names)>>2)]=$add544;
      var $309=$i;
      var $inc545=(($309+1)|0);
      $i=$inc545;
      var $310=$argv_addr;
      var $arrayidx546=(($310+($inc545<<2))|0);
      var $311=HEAP32[(($arrayidx546)>>2)];
      var $call547=_strcpy(((_iccp_name)|0), $311);
      var $312=$i;
      var $inc548=(($312+1)|0);
      $i=$inc548;
      var $313=$argv_addr;
      var $arrayidx549=(($313+($inc548<<2))|0);
      var $314=HEAP32[(($arrayidx549)>>2)];
      HEAP32[((_iccp_file)>>2)]=$314;
      var $315=HEAP32[((_iccp_file)>>2)];
      var $call550=_fopen($315, ((STRING_TABLE.__str101)|0));
      $iccp_fn=$call550;
      var $cmp551=(($call550)|0)==0;
      if ($cmp551) { __label__ = 208; break; } else { __label__ = 209; break; }
    case 208: 
      var $316=HEAP32[((_stdout)>>2)];
      var $317=HEAP32[((_iccp_file)>>2)];
      var $call554=_fprintf($316, ((STRING_TABLE.__str102)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$317,tempInt));
      HEAP32[((_iccp_length)>>2)]=0;
      __label__ = 216; break;
    case 209: 
      var $318=HEAP32[((_iccp_length)>>2)];
      var $call556=_malloc($318);
      HEAP32[((_iccp_text)>>2)]=$call556;
      $ic=0;
      __label__ = 210; break;
    case 210: 
      var $319=$ic;
      var $320=HEAP32[((_iccp_length)>>2)];
      var $cmp558=(($319)|0) < (($320)|0);
      if ($cmp558) { __label__ = 211; break; } else { __label__ = 215; break; }
    case 211: 
      var $321=$iccp_fn;
      var $call561=_fread(((_buffer)|0), 1, 1, $321);
      $num_in=$call561;
      var $322=$num_in;
      var $tobool562=(($322)|0)!=0;
      if ($tobool562) { __label__ = 213; break; } else { __label__ = 212; break; }
    case 212: 
      __label__ = 215; break;
    case 213: 
      var $323=HEAP8[(((_buffer)|0))];
      var $324=$ic;
      var $325=HEAP32[((_iccp_text)>>2)];
      var $arrayidx565=(($325+$324)|0);
      HEAP8[($arrayidx565)]=$323;
      __label__ = 214; break;
    case 214: 
      var $326=$ic;
      var $inc567=(($326+1)|0);
      $ic=$inc567;
      __label__ = 210; break;
    case 215: 
      __label__ = 216; break;
    case 216: 
      __label__ = 452; break;
    case 217: 
      var $327=$i;
      var $328=$argv_addr;
      var $arrayidx571=(($328+($327<<2))|0);
      var $329=HEAP32[(($arrayidx571)>>2)];
      var $call572=_strncmp($329, ((STRING_TABLE.__str103)|0), 5);
      var $tobool573=(($call572)|0)!=0;
      if ($tobool573) { __label__ = 224; break; } else { __label__ = 218; break; }
    case 218: 
      var $330=HEAP32[((_names)>>2)];
      var $inc575=(($330+1)|0);
      HEAP32[((_names)>>2)]=$inc575;
      var $331=$i;
      var $inc576=(($331+1)|0);
      $i=$inc576;
      var $332=$i;
      var $333=$argc_addr;
      var $cmp577=(($332)|0) >= (($333)|0);
      if ($cmp577) { __label__ = 219; break; } else { __label__ = 220; break; }
    case 219: 
      var $call580=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 220: 
      var $334=$i;
      var $335=$argv_addr;
      var $arrayidx582=(($335+($334<<2))|0);
      var $336=HEAP32[(($arrayidx582)>>2)];
      var $call583=_strncmp($336, ((STRING_TABLE.__str13)|0), 4);
      var $tobool584=(($call583)|0)!=0;
      if ($tobool584) { __label__ = 223; break; } else { __label__ = 221; break; }
    case 221: 
      var $337=$i;
      var $338=$argv_addr;
      var $arrayidx585=(($338+($337<<2))|0);
      var $339=HEAP32[(($arrayidx585)>>2)];
      var $call586=_strncmp($339, ((STRING_TABLE.__str14)|0), 4);
      var $tobool587=(($call586)|0)!=0;
      if ($tobool587) { __label__ = 223; break; } else { __label__ = 222; break; }
    case 222: 
      HEAP32[((_found_any_chunk)>>2)]=1;
      __label__ = 223; break;
    case 223: 
      __label__ = 451; break;
    case 224: 
      var $340=$i;
      var $341=$argv_addr;
      var $arrayidx591=(($341+($340<<2))|0);
      var $342=HEAP32[(($arrayidx591)>>2)];
      var $call592=_strncmp($342, ((STRING_TABLE.__str104)|0), 4);
      var $tobool593=(($call592)|0)!=0;
      if ($tobool593) { __label__ = 231; break; } else { __label__ = 225; break; }
    case 225: 
      var $343=HEAP32[((_names)>>2)];
      var $inc595=(($343+1)|0);
      HEAP32[((_names)>>2)]=$inc595;
      var $344=$i;
      var $inc596=(($344+1)|0);
      $i=$inc596;
      var $345=$i;
      var $346=$argc_addr;
      var $cmp597=(($345)|0) >= (($346)|0);
      if ($cmp597) { __label__ = 226; break; } else { __label__ = 227; break; }
    case 226: 
      var $call600=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 227: 
      var $347=$i;
      var $348=$argv_addr;
      var $arrayidx602=(($348+($347<<2))|0);
      var $349=HEAP32[(($arrayidx602)>>2)];
      var $call603=_atoi($349);
      HEAP32[((_max_idat_size)>>2)]=$call603;
      var $350=HEAP32[((_max_idat_size)>>2)];
      var $cmp604=(($350)|0)==0;
      if ($cmp604) { __label__ = 229; break; } else { __label__ = 228; break; }
    case 228: 
      var $351=HEAPU32[((_max_idat_size)>>2)];
      var $cmp607=(($351)>>>0) > 2147483647;
      if ($cmp607) { __label__ = 229; break; } else { __label__ = 230; break; }
    case 229: 
      HEAP32[((_max_idat_size)>>2)]=8192;
      __label__ = 230; break;
    case 230: 
      __label__ = 450; break;
    case 231: 
      var $352=$i;
      var $353=$argv_addr;
      var $arrayidx612=(($353+($352<<2))|0);
      var $354=HEAP32[(($arrayidx612)>>2)];
      var $call613=_strncmp($354, ((STRING_TABLE.__str105)|0), 4);
      var $tobool614=(($call613)|0)!=0;
      if ($tobool614) { __label__ = 235; break; } else { __label__ = 232; break; }
    case 232: 
      var $355=HEAP32[((_names)>>2)];
      var $inc616=(($355+1)|0);
      HEAP32[((_names)>>2)]=$inc616;
      var $356=$i;
      var $inc617=(($356+1)|0);
      $i=$inc617;
      var $357=$i;
      var $358=$argc_addr;
      var $cmp618=(($357)|0) >= (($358)|0);
      if ($cmp618) { __label__ = 233; break; } else { __label__ = 234; break; }
    case 233: 
      var $call621=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 234: 
      var $359=$i;
      var $360=$argv_addr;
      var $arrayidx623=(($360+($359<<2))|0);
      var $361=HEAP32[(($arrayidx623)>>2)];
      HEAP32[((_mngname)>>2)]=$361;
      var $362=HEAP32[((_new_mng)>>2)];
      var $inc624=(($362+1)|0);
      HEAP32[((_new_mng)>>2)]=$inc624;
      __label__ = 449; break;
    case 235: 
      var $363=$i;
      var $364=$argv_addr;
      var $arrayidx626=(($364+($363<<2))|0);
      var $365=HEAP32[(($arrayidx626)>>2)];
      var $call627=_strncmp($365, ((STRING_TABLE.__str106)|0), 2);
      var $tobool628=(($call627)|0)!=0;
      if ($tobool628) { __label__ = 243; break; } else { __label__ = 236; break; }
    case 236: 
      var $366=HEAP32[((_names)>>2)];
      var $inc630=(($366+1)|0);
      HEAP32[((_names)>>2)]=$inc630;
      var $367=$i;
      var $inc631=(($367+1)|0);
      $i=$inc631;
      var $368=$i;
      var $369=$argc_addr;
      var $cmp632=(($368)|0) >= (($369)|0);
      if ($cmp632) { __label__ = 237; break; } else { __label__ = 238; break; }
    case 237: 
      var $call635=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 238: 
      var $370=$i;
      var $371=$argv_addr;
      var $arrayidx637=(($371+($370<<2))|0);
      var $372=HEAP32[(($arrayidx637)>>2)];
      var $call638=_atoi($372);
      HEAP32[((_method)>>2)]=$call638;
      var $373=HEAP32[((_method)>>2)];
      var $cmp639=(($373)|0) >= 0;
      if ($cmp639) { __label__ = 239; break; } else { __label__ = 241; break; }
    case 239: 
      var $374=HEAP32[((_method)>>2)];
      var $cmp642=(($374)|0) <= 200;
      if ($cmp642) { __label__ = 240; break; } else { __label__ = 241; break; }
    case 240: 
      HEAP32[((_methods_specified)>>2)]=1;
      HEAP32[((_brute_force)>>2)]=0;
      var $375=HEAP32[((_method)>>2)];
      var $arrayidx645=(($try_method+($375<<2))|0);
      HEAP32[(($arrayidx645)>>2)]=0;
      __label__ = 242; break;
    case 241: 
      var $376=HEAP32[((_stdout)>>2)];
      var $377=HEAP32[((_method)>>2)];
      var $call647=_fprintf($376, ((STRING_TABLE.__str107)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$377,tempInt));
      HEAP32[((_method)>>2)]=200;
      __label__ = 242; break;
    case 242: 
      __label__ = 448; break;
    case 243: 
      var $378=$i;
      var $379=$argv_addr;
      var $arrayidx650=(($379+($378<<2))|0);
      var $380=HEAP32[(($arrayidx650)>>2)];
      var $call651=_strncmp($380, ((STRING_TABLE.__str108)|0), 5);
      var $tobool652=(($call651)|0)!=0;
      if ($tobool652) { __label__ = 245; break; } else { __label__ = 244; break; }
    case 244: 
      var $381=HEAP32[((_nofilecheck)>>2)];
      var $inc654=(($381+1)|0);
      HEAP32[((_nofilecheck)>>2)]=$inc654;
      __label__ = 447; break;
    case 245: 
      var $382=$i;
      var $383=$argv_addr;
      var $arrayidx656=(($383+($382<<2))|0);
      var $384=HEAP32[(($arrayidx656)>>2)];
      var $call657=_strncmp($384, ((STRING_TABLE.__str109)|0), 5);
      var $tobool658=(($call657)|0)!=0;
      if ($tobool658) { __label__ = 247; break; } else { __label__ = 246; break; }
    case 246: 
      var $385=HEAP32[((_no_limits)>>2)];
      var $inc660=(($385+1)|0);
      HEAP32[((_no_limits)>>2)]=$inc660;
      __label__ = 446; break;
    case 247: 
      var $386=$i;
      var $387=$argv_addr;
      var $arrayidx662=(($387+($386<<2))|0);
      var $388=HEAP32[(($arrayidx662)>>2)];
      var $call663=_strncmp($388, ((STRING_TABLE.__str110)|0), 2);
      var $tobool664=(($call663)|0)!=0;
      if ($tobool664) { __label__ = 249; break; } else { __label__ = 248; break; }
    case 248: 
      var $389=HEAP32[((_nosave)>>2)];
      var $inc666=(($389+1)|0);
      HEAP32[((_nosave)>>2)]=$inc666;
      HEAP32[((_pngcrush_mode)>>2)]=2;
      __label__ = 445; break;
    case 249: 
      var $390=$i;
      var $391=$argv_addr;
      var $arrayidx668=(($391+($390<<2))|0);
      var $392=HEAP32[(($arrayidx668)>>2)];
      var $call669=_strncmp($392, ((STRING_TABLE.__str111)|0), 5);
      var $tobool670=(($call669)|0)!=0;
      if ($tobool670) { __label__ = 251; break; } else { __label__ = 250; break; }
    case 250: 
      HEAP32[((_new_time_stamp)>>2)]=0;
      __label__ = 444; break;
    case 251: 
      var $393=$i;
      var $394=$argv_addr;
      var $arrayidx673=(($394+($393<<2))|0);
      var $395=HEAP32[(($arrayidx673)>>2)];
      var $call674=_strncmp($395, ((STRING_TABLE.__str112)|0), 3);
      var $tobool675=(($call674)|0)!=0;
      if ($tobool675) { __label__ = 253; break; } else { __label__ = 252; break; }
    case 252: 
      HEAP32[((_overwrite)>>2)]=1;
      __label__ = 443; break;
    case 253: 
      var $396=$i;
      var $397=$argv_addr;
      var $arrayidx678=(($397+($396<<2))|0);
      var $398=HEAP32[(($arrayidx678)>>2)];
      var $call679=_strncmp($398, ((STRING_TABLE.__str113)|0), 5);
      var $tobool680=(($call679)|0)!=0;
      if ($tobool680) { __label__ = 255; break; } else { __label__ = 254; break; }
    case 254: 
      HEAP32[((_premultiply)>>2)]=2;
      __label__ = 442; break;
    case 255: 
      var $399=$i;
      var $400=$argv_addr;
      var $arrayidx683=(($400+($399<<2))|0);
      var $401=HEAP32[(($arrayidx683)>>2)];
      var $call684=_strncmp($401, ((STRING_TABLE.__str114)|0), 9);
      var $tobool685=(($call684)|0)!=0;
      if ($tobool685) { __label__ = 262; break; } else { __label__ = 256; break; }
    case 256: 
      var $402=HEAP32[((_names)>>2)];
      var $inc687=(($402+1)|0);
      HEAP32[((_names)>>2)]=$inc687;
      var $403=$i;
      var $inc688=(($403+1)|0);
      $i=$inc688;
      var $404=$i;
      var $405=$argc_addr;
      var $cmp689=(($404)|0) >= (($405)|0);
      if ($cmp689) { __label__ = 257; break; } else { __label__ = 258; break; }
    case 257: 
      var $call692=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 258: 
      var $406=$i;
      var $407=$argv_addr;
      var $arrayidx694=(($407+($406<<2))|0);
      var $408=HEAP32[(($arrayidx694)>>2)];
      var $call695=_atoi($408);
      HEAP32[((_plte_len)>>2)]=$call695;
      var $409=HEAP32[((_plte_len)>>2)];
      var $cmp696=(($409)|0) < 0;
      if ($cmp696) { __label__ = 260; break; } else { __label__ = 259; break; }
    case 259: 
      var $410=HEAP32[((_plte_len)>>2)];
      var $cmp699=(($410)|0) > 256;
      if ($cmp699) { __label__ = 260; break; } else { __label__ = 261; break; }
    case 260: 
      HEAP32[((_plte_len)>>2)]=-1;
      __label__ = 261; break;
    case 261: 
      __label__ = 441; break;
    case 262: 
      var $411=$i;
      var $412=$argv_addr;
      var $arrayidx704=(($412+($411<<2))|0);
      var $413=HEAP32[(($arrayidx704)>>2)];
      var $call705=_strncmp($413, ((STRING_TABLE.__str115)|0), 3);
      var $tobool706=(($call705)|0)!=0;
      if ($tobool706) { __label__ = 266; break; } else { __label__ = 263; break; }
    case 263: 
      var $414=HEAP32[((_names)>>2)];
      var $inc708=(($414+1)|0);
      HEAP32[((_names)>>2)]=$inc708;
      var $415=HEAP32[((_do_pplt)>>2)];
      var $inc709=(($415+1)|0);
      HEAP32[((_do_pplt)>>2)]=$inc709;
      var $416=$i;
      var $inc710=(($416+1)|0);
      $i=$inc710;
      var $417=$i;
      var $418=$argc_addr;
      var $cmp711=(($417)|0) >= (($418)|0);
      if ($cmp711) { __label__ = 264; break; } else { __label__ = 265; break; }
    case 264: 
      var $call714=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 265: 
      var $419=$i;
      var $420=$argv_addr;
      var $arrayidx716=(($420+($419<<2))|0);
      var $421=HEAP32[(($arrayidx716)>>2)];
      var $call717=_strcpy(((_pplt_string)|0), $421);
      HEAP32[((_global_things_have_changed)>>2)]=1;
      __label__ = 440; break;
    case 266: 
      var $422=$i;
      var $423=$argv_addr;
      var $arrayidx719=(($423+($422<<2))|0);
      var $424=HEAP32[(($arrayidx719)>>2)];
      var $call720=_strncmp($424, ((STRING_TABLE.__str116)|0), 2);
      var $tobool721=(($call720)|0)!=0;
      if ($tobool721) { __label__ = 268; break; } else { __label__ = 267; break; }
    case 267: 
      var $425=HEAP32[((_pauses)>>2)];
      var $inc723=(($425+1)|0);
      HEAP32[((_pauses)>>2)]=$inc723;
      __label__ = 439; break;
    case 268: 
      var $426=$i;
      var $427=$argv_addr;
      var $arrayidx725=(($427+($426<<2))|0);
      var $428=HEAP32[(($arrayidx725)>>2)];
      var $call726=_strncmp($428, ((STRING_TABLE.__str117)|0), 2);
      var $tobool727=(($call726)|0)!=0;
      if ($tobool727) { __label__ = 270; break; } else { __label__ = 269; break; }
    case 269: 
      HEAP32[((_verbose)>>2)]=0;
      __label__ = 438; break;
    case 270: 
      var $429=$i;
      var $430=$argv_addr;
      var $arrayidx730=(($430+($429<<2))|0);
      var $431=HEAP32[(($arrayidx730)>>2)];
      var $call731=_strncmp($431, ((STRING_TABLE.__str118)|0), 7);
      var $tobool732=(($call731)|0)!=0;
      if ($tobool732) { __label__ = 272; break; } else { __label__ = 271; break; }
    case 271: 
      var $432=HEAP32[((_reduction_ok)>>2)];
      var $inc734=(($432+1)|0);
      HEAP32[((_reduction_ok)>>2)]=$inc734;
      HEAP32[((_do_color_count)>>2)]=1;
      __label__ = 437; break;
    case 272: 
      var $433=$i;
      var $434=$argv_addr;
      var $arrayidx736=(($434+($433<<2))|0);
      var $435=HEAP32[(($arrayidx736)>>2)];
      var $call737=_strncmp($435, ((STRING_TABLE.__str119)|0), 4);
      var $tobool738=(($call737)|0)!=0;
      if ($tobool738) { __label__ = 289; break; } else { __label__ = 273; break; }
    case 273: 
      var $436=HEAP32[((_names)>>2)];
      var $inc740=(($436+1)|0);
      HEAP32[((_names)>>2)]=$inc740;
      var $437=$i;
      var $inc741=(($437+1)|0);
      $i=$inc741;
      var $438=$i;
      var $439=$argc_addr;
      var $cmp742=(($438)|0) >= (($439)|0);
      if ($cmp742) { __label__ = 274; break; } else { __label__ = 275; break; }
    case 274: 
      var $call745=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 275: 
      HEAP32[((_found_gAMA)>>2)]=1;
      var $arraydecay750=(($number748)|0);
      $n749=$arraydecay750;
      $nzeroes751=-1;
      var $440=$i;
      var $441=$argv_addr;
      var $arrayidx753=(($441+($440<<2))|0);
      var $442=HEAP32[(($arrayidx753)>>2)];
      var $call754=_strlen($442);
      $length752=$call754;
      $c747=0;
      __label__ = 276; break;
    case 276: 
      var $443=$c747;
      var $444=$length752;
      var $cmp756=(($443)|0) < (($444)|0);
      if ($cmp756) { __label__ = 277; break; } else { __label__ = 284; break; }
    case 277: 
      var $445=$i;
      var $446=$argv_addr;
      var $arrayidx759=(($446+($445<<2))|0);
      var $447=HEAP32[(($arrayidx759)>>2)];
      var $448=$c747;
      var $add_ptr760=(($447+$448)|0);
      var $449=HEAP8[($add_ptr760)];
      var $conv761=(($449 << 24) >> 24);
      var $cmp762=(($conv761)|0)==46;
      if ($cmp762) { __label__ = 278; break; } else { __label__ = 279; break; }
    case 278: 
      $nzeroes751=5;
      __label__ = 282; break;
    case 279: 
      var $450=$nzeroes751;
      var $tobool766=(($450)|0)!=0;
      if ($tobool766) { __label__ = 280; break; } else { __label__ = 281; break; }
    case 280: 
      var $451=$i;
      var $452=$argv_addr;
      var $arrayidx768=(($452+($451<<2))|0);
      var $453=HEAP32[(($arrayidx768)>>2)];
      var $454=$c747;
      var $add_ptr769=(($453+$454)|0);
      var $455=HEAP8[($add_ptr769)];
      var $456=$n749;
      var $incdec_ptr770=(($456+1)|0);
      $n749=$incdec_ptr770;
      HEAP8[($456)]=$455;
      var $457=$nzeroes751;
      var $dec771=(($457-1)|0);
      $nzeroes751=$dec771;
      __label__ = 281; break;
    case 281: 
      __label__ = 282; break;
    case 282: 
      __label__ = 283; break;
    case 283: 
      var $458=$c747;
      var $inc775=(($458+1)|0);
      $c747=$inc775;
      __label__ = 276; break;
    case 284: 
      $c747=0;
      __label__ = 285; break;
    case 285: 
      var $459=$c747;
      var $460=$nzeroes751;
      var $cmp778=(($459)|0) < (($460)|0);
      if ($cmp778) { __label__ = 286; break; } else { __label__ = 288; break; }
    case 286: 
      var $461=$n749;
      var $incdec_ptr781=(($461+1)|0);
      $n749=$incdec_ptr781;
      HEAP8[($461)]=48;
      __label__ = 287; break;
    case 287: 
      var $462=$c747;
      var $inc783=(($462+1)|0);
      $c747=$inc783;
      __label__ = 285; break;
    case 288: 
      var $463=$n749;
      HEAP8[($463)]=0;
      var $arraydecay785=(($number748)|0);
      var $call786=_atoi($arraydecay785);
      HEAP32[((_force_specified_gamma)>>2)]=$call786;
      HEAP32[((_global_things_have_changed)>>2)]=1;
      __label__ = 436; break;
    case 289: 
      var $464=$i;
      var $465=$argv_addr;
      var $arrayidx788=(($465+($464<<2))|0);
      var $466=HEAP32[(($arrayidx788)>>2)];
      var $call789=_strncmp($466, ((STRING_TABLE.__str120)|0), 4);
      var $tobool790=(($call789)|0)!=0;
      if ($tobool790) { __label__ = 293; break; } else { __label__ = 290; break; }
    case 290: 
      var $467=HEAP32[((_names)>>2)];
      var $inc792=(($467+1)|0);
      HEAP32[((_names)>>2)]=$inc792;
      var $468=$i;
      var $inc793=(($468+1)|0);
      $i=$inc793;
      var $469=$i;
      var $470=$argc_addr;
      var $cmp794=(($469)|0) >= (($470)|0);
      if ($cmp794) { __label__ = 291; break; } else { __label__ = 292; break; }
    case 291: 
      var $call797=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 292: 
      var $471=$i;
      var $472=$argv_addr;
      var $arrayidx799=(($472+($471<<2))|0);
      var $473=HEAP32[(($arrayidx799)>>2)];
      var $call800=_atoi($473);
      HEAP32[((_resolution)>>2)]=$call800;
      HEAP32[((_global_things_have_changed)>>2)]=1;
      __label__ = 435; break;
    case 293: 
      var $474=$i;
      var $475=$argv_addr;
      var $arrayidx802=(($475+($474<<2))|0);
      var $476=HEAP32[(($arrayidx802)>>2)];
      var $call803=_strncmp($476, ((STRING_TABLE.__str121)|0), 2);
      var $tobool804=(($call803)|0)!=0;
      if ($tobool804) { __label__ = 300; break; } else { __label__ = 294; break; }
    case 294: 
      var $477=$i;
      HEAP32[((_remove_chunks)>>2)]=$477;
      var $478=HEAP32[((_names)>>2)];
      var $inc806=(($478+1)|0);
      HEAP32[((_names)>>2)]=$inc806;
      var $479=$i;
      var $inc807=(($479+1)|0);
      $i=$inc807;
      var $480=$i;
      var $481=$argc_addr;
      var $cmp808=(($480)|0) >= (($481)|0);
      if ($cmp808) { __label__ = 295; break; } else { __label__ = 296; break; }
    case 295: 
      var $call811=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 296: 
      var $482=$i;
      var $483=$argv_addr;
      var $arrayidx813=(($483+($482<<2))|0);
      var $484=HEAP32[(($arrayidx813)>>2)];
      var $call814=_strncmp($484, ((STRING_TABLE.__str13)|0), 4);
      var $tobool815=(($call814)|0)!=0;
      if ($tobool815) { __label__ = 299; break; } else { __label__ = 297; break; }
    case 297: 
      var $485=$i;
      var $486=$argv_addr;
      var $arrayidx817=(($486+($485<<2))|0);
      var $487=HEAP32[(($arrayidx817)>>2)];
      var $call818=_strncmp($487, ((STRING_TABLE.__str14)|0), 4);
      var $tobool819=(($call818)|0)!=0;
      if ($tobool819) { __label__ = 299; break; } else { __label__ = 298; break; }
    case 298: 
      HEAP32[((_image_is_immutable)>>2)]=0;
      __label__ = 299; break;
    case 299: 
      __label__ = 434; break;
    case 300: 
      var $488=$i;
      var $489=$argv_addr;
      var $arrayidx823=(($489+($488<<2))|0);
      var $490=HEAP32[(($arrayidx823)>>2)];
      var $call824=_strncmp($490, ((STRING_TABLE.__str122)|0), 5);
      var $tobool825=(($call824)|0)!=0;
      if ($tobool825) { __label__ = 302; break; } else { __label__ = 301; break; }
    case 301: 
      var $491=HEAP32[((_all_chunks_are_safe)>>2)];
      var $inc827=(($491+1)|0);
      HEAP32[((_all_chunks_are_safe)>>2)]=$inc827;
      __label__ = 433; break;
    case 302: 
      var $492=$i;
      var $493=$argv_addr;
      var $arrayidx829=(($493+($492<<2))|0);
      var $494=HEAP32[(($arrayidx829)>>2)];
      var $call830=_strncmp($494, ((STRING_TABLE.__str123)|0), 5);
      var $tobool831=(($call830)|0)!=0;
      if ($tobool831) { __label__ = 303; break; } else { __label__ = 304; break; }
    case 303: 
      var $495=$i;
      var $496=$argv_addr;
      var $arrayidx833=(($496+($495<<2))|0);
      var $497=HEAP32[(($arrayidx833)>>2)];
      var $call834=_strncmp($497, ((STRING_TABLE.__str124)|0), 5);
      var $tobool835=(($call834)|0)!=0;
      if ($tobool835) { __label__ = 313; break; } else { __label__ = 304; break; }
    case 304: 
      HEAP32[((_specified_gamma)>>2)]=45455;
      HEAP32[((_intent)>>2)]=0;
      var $498=$i;
      var $inc837=(($498+1)|0);
      $i=$inc837;
      var $499=$i;
      var $500=$argc_addr;
      var $cmp838=(($499)|0) >= (($500)|0);
      if ($cmp838) { __label__ = 305; break; } else { __label__ = 306; break; }
    case 305: 
      var $call841=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 306: 
      var $501=$i;
      var $502=$argv_addr;
      var $arrayidx843=(($502+($501<<2))|0);
      var $503=HEAP32[(($arrayidx843)>>2)];
      var $call844=_strncmp($503, ((STRING_TABLE.__str125)|0), 1);
      var $tobool845=(($call844)|0)!=0;
      if ($tobool845) { __label__ = 307; break; } else { __label__ = 310; break; }
    case 307: 
      var $504=$i;
      var $505=$argv_addr;
      var $arrayidx847=(($505+($504<<2))|0);
      var $506=HEAP32[(($arrayidx847)>>2)];
      var $call848=_strncmp($506, ((STRING_TABLE.__str126)|0), 1);
      var $tobool849=(($call848)|0)!=0;
      if ($tobool849) { __label__ = 308; break; } else { __label__ = 310; break; }
    case 308: 
      var $507=$i;
      var $508=$argv_addr;
      var $arrayidx851=(($508+($507<<2))|0);
      var $509=HEAP32[(($arrayidx851)>>2)];
      var $call852=_strncmp($509, ((STRING_TABLE.__str127)|0), 1);
      var $tobool853=(($call852)|0)!=0;
      if ($tobool853) { __label__ = 309; break; } else { __label__ = 310; break; }
    case 309: 
      var $510=$i;
      var $511=$argv_addr;
      var $arrayidx855=(($511+($510<<2))|0);
      var $512=HEAP32[(($arrayidx855)>>2)];
      var $call856=_strncmp($512, ((STRING_TABLE.__str128)|0), 1);
      var $tobool857=(($call856)|0)!=0;
      if ($tobool857) { __label__ = 311; break; } else { __label__ = 310; break; }
    case 310: 
      var $513=HEAP32[((_names)>>2)];
      var $inc859=(($513+1)|0);
      HEAP32[((_names)>>2)]=$inc859;
      var $514=$i;
      var $515=$argv_addr;
      var $arrayidx860=(($515+($514<<2))|0);
      var $516=HEAP32[(($arrayidx860)>>2)];
      var $call861=_atoi($516);
      HEAP32[((_intent)>>2)]=$call861;
      HEAP32[((_global_things_have_changed)>>2)]=1;
      __label__ = 312; break;
    case 311: 
      var $517=$i;
      var $dec863=(($517-1)|0);
      $i=$dec863;
      __label__ = 312; break;
    case 312: 
      __label__ = 432; break;
    case 313: 
      var $518=$i;
      var $519=$argv_addr;
      var $arrayidx866=(($519+($518<<2))|0);
      var $520=HEAP32[(($arrayidx866)>>2)];
      var $call867=_strncmp($520, ((STRING_TABLE.__str129)|0), 5);
      var $tobool868=(($call867)|0)!=0;
      if ($tobool868) { __label__ = 314; break; } else { __label__ = 315; break; }
    case 314: 
      var $521=$i;
      var $522=$argv_addr;
      var $arrayidx870=(($522+($521<<2))|0);
      var $523=HEAP32[(($arrayidx870)>>2)];
      var $call871=_strncmp($523, ((STRING_TABLE.__str130)|0), 5);
      var $tobool872=(($call871)|0)!=0;
      if ($tobool872) { __label__ = 322; break; } else { __label__ = 315; break; }
    case 315: 
      var $524=$i;
      var $inc874=(($524+1)|0);
      $i=$inc874;
      var $525=$i;
      var $526=$argc_addr;
      var $cmp875=(($525)|0) >= (($526)|0);
      if ($cmp875) { __label__ = 316; break; } else { __label__ = 317; break; }
    case 316: 
      var $call878=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 317: 
      HEAP32[((_ster_mode)>>2)]=-1;
      var $527=$i;
      var $528=$argv_addr;
      var $arrayidx880=(($528+($527<<2))|0);
      var $529=HEAP32[(($arrayidx880)>>2)];
      var $call881=_strncmp($529, ((STRING_TABLE.__str125)|0), 1);
      var $tobool882=(($call881)|0)!=0;
      if ($tobool882) { __label__ = 318; break; } else { __label__ = 319; break; }
    case 318: 
      var $530=$i;
      var $531=$argv_addr;
      var $arrayidx884=(($531+($530<<2))|0);
      var $532=HEAP32[(($arrayidx884)>>2)];
      var $call885=_strncmp($532, ((STRING_TABLE.__str126)|0), 1);
      var $tobool886=(($call885)|0)!=0;
      if ($tobool886) { __label__ = 320; break; } else { __label__ = 319; break; }
    case 319: 
      var $533=HEAP32[((_names)>>2)];
      var $inc888=(($533+1)|0);
      HEAP32[((_names)>>2)]=$inc888;
      var $534=$i;
      var $535=$argv_addr;
      var $arrayidx889=(($535+($534<<2))|0);
      var $536=HEAP32[(($arrayidx889)>>2)];
      var $call890=_atoi($536);
      HEAP32[((_ster_mode)>>2)]=$call890;
      HEAP32[((_global_things_have_changed)>>2)]=1;
      __label__ = 321; break;
    case 320: 
      var $537=$i;
      var $dec892=(($537-1)|0);
      $i=$dec892;
      __label__ = 321; break;
    case 321: 
      __label__ = 431; break;
    case 322: 
      var $538=$i;
      var $539=$argv_addr;
      var $arrayidx895=(($539+($538<<2))|0);
      var $540=HEAP32[(($arrayidx895)>>2)];
      var $call896=_strncmp($540, ((STRING_TABLE.__str131)|0), 2);
      var $tobool897=(($call896)|0)!=0;
      if ($tobool897) { __label__ = 324; break; } else { __label__ = 323; break; }
    case 323: 
      HEAP32[((_verbose)>>2)]=0;
      __label__ = 430; break;
    case 324: 
      var $541=$i;
      var $542=$argv_addr;
      var $arrayidx900=(($542+($541<<2))|0);
      var $543=HEAP32[(($arrayidx900)>>2)];
      var $call901=_strncmp($543, ((STRING_TABLE.__str132)|0), 5);
      var $tobool902=(($call901)|0)!=0;
      if ($tobool902) { __label__ = 325; break; } else { __label__ = 332; break; }
    case 325: 
      var $544=$i;
      var $545=$argv_addr;
      var $arrayidx904=(($545+($544<<2))|0);
      var $546=HEAP32[(($arrayidx904)>>2)];
      var $call905=_strncmp($546, ((STRING_TABLE.__str133)|0), 5);
      var $tobool906=(($call905)|0)!=0;
      if ($tobool906) { __label__ = 326; break; } else { __label__ = 332; break; }
    case 326: 
      var $547=$i;
      var $548=$argv_addr;
      var $arrayidx908=(($548+($547<<2))|0);
      var $549=HEAP32[(($arrayidx908)>>2)];
      var $call909=_strncmp($549, ((STRING_TABLE.__str134)|0), 5);
      var $tobool910=(($call909)|0)!=0;
      if ($tobool910) { __label__ = 327; break; } else { __label__ = 332; break; }
    case 327: 
      var $550=$i;
      var $551=$argv_addr;
      var $arrayidx912=(($551+($550<<2))|0);
      var $552=HEAP32[(($arrayidx912)>>2)];
      var $call913=_strncmp($552, ((STRING_TABLE.__str135)|0), 5);
      var $tobool914=(($call913)|0)!=0;
      if ($tobool914) { __label__ = 328; break; } else { __label__ = 332; break; }
    case 328: 
      var $553=$i;
      var $554=$argv_addr;
      var $arrayidx916=(($554+($553<<2))|0);
      var $555=HEAP32[(($arrayidx916)>>2)];
      var $call917=_strncmp($555, ((STRING_TABLE.__str136)|0), 6);
      var $tobool918=(($call917)|0)!=0;
      if ($tobool918) { __label__ = 329; break; } else { __label__ = 332; break; }
    case 329: 
      var $556=$i;
      var $557=$argv_addr;
      var $arrayidx920=(($557+($556<<2))|0);
      var $558=HEAP32[(($arrayidx920)>>2)];
      var $call921=_strncmp($558, ((STRING_TABLE.__str137)|0), 6);
      var $tobool922=(($call921)|0)!=0;
      if ($tobool922) { __label__ = 330; break; } else { __label__ = 332; break; }
    case 330: 
      var $559=$i;
      var $560=$argv_addr;
      var $arrayidx924=(($560+($559<<2))|0);
      var $561=HEAP32[(($arrayidx924)>>2)];
      var $call925=_strncmp($561, ((STRING_TABLE.__str138)|0), 5);
      var $tobool926=(($call925)|0)!=0;
      if ($tobool926) { __label__ = 331; break; } else { __label__ = 332; break; }
    case 331: 
      var $562=$i;
      var $563=$argv_addr;
      var $arrayidx928=(($563+($562<<2))|0);
      var $564=HEAP32[(($arrayidx928)>>2)];
      var $call929=_strncmp($564, ((STRING_TABLE.__str139)|0), 5);
      var $tobool930=(($call929)|0)!=0;
      if ($tobool930) { __label__ = 366; break; } else { __label__ = 332; break; }
    case 332: 
      var $565=$i;
      var $add932=(($565+2)|0);
      $i=$add932;
      var $566=$i;
      var $inc933=(($566+1)|0);
      $i=$inc933;
      var $567=$i;
      var $568=$argc_addr;
      var $cmp934=(($567)|0) >= (($568)|0);
      if ($cmp934) { __label__ = 333; break; } else { __label__ = 334; break; }
    case 333: 
      var $call937=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 334: 
      var $569=$i;
      var $sub=(($569-3)|0);
      $i=$sub;
      var $570=$i;
      var $add939=(($570+2)|0);
      var $571=$argv_addr;
      var $arrayidx940=(($571+($add939<<2))|0);
      var $572=HEAP32[(($arrayidx940)>>2)];
      var $call941=_strlen($572);
      var $cmp942=(($call941)>>>0) < 80;
      if ($cmp942) { __label__ = 335; break; } else { __label__ = 356; break; }
    case 335: 
      var $573=$i;
      var $add945=(($573+3)|0);
      var $574=$argv_addr;
      var $arrayidx946=(($574+($add945<<2))|0);
      var $575=HEAP32[(($arrayidx946)>>2)];
      var $call947=_strlen($575);
      var $cmp948=(($call947)>>>0) < 2048;
      if ($cmp948) { __label__ = 336; break; } else { __label__ = 356; break; }
    case 336: 
      var $576=HEAP32[((_text_inputs)>>2)];
      var $cmp951=(($576)|0) < 10;
      if ($cmp951) { __label__ = 337; break; } else { __label__ = 356; break; }
    case 337: 
      var $577=$i;
      var $578=$argv_addr;
      var $arrayidx954=(($578+($577<<2))|0);
      var $579=HEAP32[(($arrayidx954)>>2)];
      var $call955=_strncmp($579, ((STRING_TABLE.__str140)|0), 3);
      var $tobool956=(($call955)|0)!=0;
      if ($tobool956) { __label__ = 339; break; } else { __label__ = 338; break; }
    case 338: 
      var $580=HEAP32[((_text_inputs)>>2)];
      var $arrayidx958=((_text_compression+($580<<2))|0);
      HEAP32[(($arrayidx958)>>2)]=2;
      __label__ = 346; break;
    case 339: 
      var $581=$i;
      var $582=$argv_addr;
      var $arrayidx960=(($582+($581<<2))|0);
      var $583=HEAP32[(($arrayidx960)>>2)];
      var $call961=_strncmp($583, ((STRING_TABLE.__str141)|0), 2);
      var $tobool962=(($call961)|0)!=0;
      if ($tobool962) { __label__ = 341; break; } else { __label__ = 340; break; }
    case 340: 
      var $584=HEAP32[((_text_inputs)>>2)];
      var $arrayidx964=((_text_compression+($584<<2))|0);
      HEAP32[(($arrayidx964)>>2)]=0;
      __label__ = 345; break;
    case 341: 
      var $585=$i;
      var $586=$argv_addr;
      var $arrayidx966=(($586+($585<<2))|0);
      var $587=HEAP32[(($arrayidx966)>>2)];
      var $call967=_strncmp($587, ((STRING_TABLE.__str142)|0), 2);
      var $tobool968=(($call967)|0)!=0;
      if ($tobool968) { __label__ = 343; break; } else { __label__ = 342; break; }
    case 342: 
      var $588=HEAP32[((_text_inputs)>>2)];
      var $arrayidx970=((_text_compression+($588<<2))|0);
      HEAP32[(($arrayidx970)>>2)]=-1;
      __label__ = 344; break;
    case 343: 
      var $589=HEAP32[((_text_inputs)>>2)];
      var $arrayidx972=((_text_compression+($589<<2))|0);
      HEAP32[(($arrayidx972)>>2)]=1;
      __label__ = 344; break;
    case 344: 
      __label__ = 345; break;
    case 345: 
      __label__ = 346; break;
    case 346: 
      var $590=HEAP32[((_names)>>2)];
      var $add976=(($590+3)|0);
      HEAP32[((_names)>>2)]=$add976;
      var $591=$i;
      var $inc977=(($591+1)|0);
      $i=$inc977;
      var $592=$argv_addr;
      var $arrayidx978=(($592+($inc977<<2))|0);
      var $593=HEAP32[(($arrayidx978)>>2)];
      var $call979=_strncmp($593, ((STRING_TABLE.__str143)|0), 1);
      var $tobool980=(($call979)|0)!=0;
      if ($tobool980) { __label__ = 348; break; } else { __label__ = 347; break; }
    case 347: 
      var $594=HEAP32[((_text_inputs)>>2)];
      var $arrayidx982=((_text_where+($594<<2))|0);
      HEAP32[(($arrayidx982)>>2)]=1;
      __label__ = 348; break;
    case 348: 
      var $595=$i;
      var $596=$argv_addr;
      var $arrayidx984=(($596+($595<<2))|0);
      var $597=HEAP32[(($arrayidx984)>>2)];
      var $call985=_strncmp($597, ((STRING_TABLE.__str144)|0), 1);
      var $tobool986=(($call985)|0)!=0;
      if ($tobool986) { __label__ = 350; break; } else { __label__ = 349; break; }
    case 349: 
      var $598=HEAP32[((_text_inputs)>>2)];
      var $arrayidx988=((_text_where+($598<<2))|0);
      HEAP32[(($arrayidx988)>>2)]=2;
      __label__ = 350; break;
    case 350: 
      var $599=HEAP32[((_text_inputs)>>2)];
      var $mul=(($599*80)|0);
      var $arrayidx990=((_text_keyword+$mul)|0);
      var $600=$i;
      var $inc991=(($600+1)|0);
      $i=$inc991;
      var $601=$argv_addr;
      var $arrayidx992=(($601+($inc991<<2))|0);
      var $602=HEAP32[(($arrayidx992)>>2)];
      var $call993=_strcpy($arrayidx990, $602);
      var $603=HEAP32[((_text_inputs)>>2)];
      var $arrayidx994=((_text_compression+($603<<2))|0);
      var $604=HEAP32[(($arrayidx994)>>2)];
      var $cmp995=(($604)|0) <= 0;
      if ($cmp995) { __label__ = 351; break; } else { __label__ = 352; break; }
    case 351: 
      var $605=HEAP32[((_text_inputs)>>2)];
      var $mul998=(($605*80)|0);
      var $arrayidx999=((_text_lang+$mul998)|0);
      HEAP8[($arrayidx999)]=0;
      var $606=HEAP32[((_text_inputs)>>2)];
      var $mul1000=(($606*80)|0);
      var $arrayidx1001=((_text_lang_key+$mul1000)|0);
      HEAP8[($arrayidx1001)]=0;
      __label__ = 355; break;
    case 352: 
      var $607=$i;
      var $add1003=(($607+2)|0);
      $i=$add1003;
      var $608=$i;
      var $inc1004=(($608+1)|0);
      $i=$inc1004;
      var $609=$i;
      var $610=$argc_addr;
      var $cmp1005=(($609)|0) >= (($610)|0);
      if ($cmp1005) { __label__ = 353; break; } else { __label__ = 354; break; }
    case 353: 
      var $call1008=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 354: 
      var $611=$i;
      var $sub1010=(($611-3)|0);
      $i=$sub1010;
      var $612=HEAP32[((_names)>>2)];
      var $add1011=(($612+2)|0);
      HEAP32[((_names)>>2)]=$add1011;
      var $613=HEAP32[((_text_inputs)>>2)];
      var $mul1012=(($613*80)|0);
      var $arrayidx1013=((_text_lang+$mul1012)|0);
      var $614=$i;
      var $inc1014=(($614+1)|0);
      $i=$inc1014;
      var $615=$argv_addr;
      var $arrayidx1015=(($615+($inc1014<<2))|0);
      var $616=HEAP32[(($arrayidx1015)>>2)];
      var $call1016=_strcpy($arrayidx1013, $616);
      var $617=HEAP32[((_text_inputs)>>2)];
      var $mul1017=(($617*80)|0);
      var $arrayidx1018=((_text_lang_key+$mul1017)|0);
      var $618=$i;
      var $inc1019=(($618+1)|0);
      $i=$inc1019;
      var $619=$argv_addr;
      var $arrayidx1020=(($619+($inc1019<<2))|0);
      var $620=HEAP32[(($arrayidx1020)>>2)];
      var $call1021=_strcpy($arrayidx1018, $620);
      __label__ = 355; break;
    case 355: 
      var $621=HEAP32[((_text_inputs)>>2)];
      var $mul1023=((($621<<11))|0);
      var $arrayidx1024=((_text_text+$mul1023)|0);
      var $622=$i;
      var $inc1025=(($622+1)|0);
      $i=$inc1025;
      var $623=$argv_addr;
      var $arrayidx1026=(($623+($inc1025<<2))|0);
      var $624=HEAP32[(($arrayidx1026)>>2)];
      var $call1027=_strcpy($arrayidx1024, $624);
      var $625=HEAP32[((_text_inputs)>>2)];
      var $inc1028=(($625+1)|0);
      HEAP32[((_text_inputs)>>2)]=$inc1028;
      __label__ = 365; break;
    case 356: 
      var $626=HEAP32[((_text_inputs)>>2)];
      var $cmp1030=(($626)|0) > 9;
      if ($cmp1030) { __label__ = 357; break; } else { __label__ = 358; break; }
    case 357: 
      var $627=HEAP32[((_stdout)>>2)];
      var $call1033=_fprintf($627, ((STRING_TABLE.__str145)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 359; break;
    case 358: 
      var $628=HEAP32[((_stdout)>>2)];
      var $call1035=_fprintf($628, ((STRING_TABLE.__str146)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 359; break;
    case 359: 
      var $629=$i;
      var $add1037=(($629+3)|0);
      $i=$add1037;
      var $630=HEAP32[((_names)>>2)];
      var $add1038=(($630+3)|0);
      HEAP32[((_names)>>2)]=$add1038;
      var $631=$i;
      var $632=$argv_addr;
      var $arrayidx1039=(($632+($631<<2))|0);
      var $633=HEAP32[(($arrayidx1039)>>2)];
      var $call1040=_strncmp($633, ((STRING_TABLE.__str147)|0), 2);
      var $tobool1041=(($call1040)|0)!=0;
      if ($tobool1041) { __label__ = 360; break; } else { __label__ = 361; break; }
    case 360: 
      var $634=$i;
      var $635=$argv_addr;
      var $arrayidx1043=(($635+($634<<2))|0);
      var $636=HEAP32[(($arrayidx1043)>>2)];
      var $call1044=_strncmp($636, ((STRING_TABLE.__str140)|0), 3);
      var $tobool1045=(($call1044)|0)!=0;
      if ($tobool1045) { __label__ = 364; break; } else { __label__ = 361; break; }
    case 361: 
      var $637=$i;
      var $inc1047=(($637+1)|0);
      $i=$inc1047;
      var $638=$i;
      var $inc1048=(($638+1)|0);
      $i=$inc1048;
      var $639=$i;
      var $640=$argc_addr;
      var $cmp1049=(($639)|0) >= (($640)|0);
      if ($cmp1049) { __label__ = 362; break; } else { __label__ = 363; break; }
    case 362: 
      var $call1052=_printf(((STRING_TABLE.__str81)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 363: 
      var $641=HEAP32[((_names)>>2)];
      var $add1054=(($641+2)|0);
      HEAP32[((_names)>>2)]=$add1054;
      __label__ = 364; break;
    case 364: 
      __label__ = 365; break;
    case 365: 
      __label__ = 429; break;
    case 366: 
      var $642=$i;
      var $643=$argv_addr;
      var $arrayidx1058=(($643+($642<<2))|0);
      var $644=HEAP32[(($arrayidx1058)>>2)];
      var $call1059=_strncmp($644, ((STRING_TABLE.__str148)|0), 5);
      var $tobool1060=(($call1059)|0)!=0;
      if ($tobool1060) { __label__ = 367; break; } else { __label__ = 368; break; }
    case 367: 
      var $645=$i;
      var $646=$argv_addr;
      var $arrayidx1062=(($646+($645<<2))|0);
      var $647=HEAP32[(($arrayidx1062)>>2)];
      var $call1063=_strncmp($647, ((STRING_TABLE.__str149)|0), 5);
      var $tobool1064=(($call1063)|0)!=0;
      if ($tobool1064) { __label__ = 369; break; } else { __label__ = 368; break; }
    case 368: 
      HEAP32[((_new_time_stamp)>>2)]=1;
      __label__ = 428; break;
    case 369: 
      var $648=$i;
      var $649=$argv_addr;
      var $arrayidx1067=(($649+($648<<2))|0);
      var $650=HEAP32[(($arrayidx1067)>>2)];
      var $call1068=_strncmp($650, ((STRING_TABLE.__str150)|0), 7);
      var $tobool1069=(($call1068)|0)!=0;
      if ($tobool1069) { __label__ = 370; break; } else { __label__ = 371; break; }
    case 370: 
      var $651=$i;
      var $652=$argv_addr;
      var $arrayidx1071=(($652+($651<<2))|0);
      var $653=HEAP32[(($arrayidx1071)>>2)];
      var $call1072=_strncmp($653, ((STRING_TABLE.__str151)|0), 7);
      var $tobool1073=(($call1072)|0)!=0;
      if ($tobool1073) { __label__ = 378; break; } else { __label__ = 371; break; }
    case 371: 
      var $654=$i;
      var $inc1075=(($654+1)|0);
      $i=$inc1075;
      var $655=$argv_addr;
      var $arrayidx1076=(($655+($inc1075<<2))|0);
      var $656=HEAP32[(($arrayidx1076)>>2)];
      var $call1077=_atoi($656);
      var $conv1078=(($call1077) & 65535);
      HEAP16[((_num_trans_in)>>1)]=$conv1078;
      var $657=HEAPU16[((_num_trans_in)>>1)];
      var $conv1079=(($657)&65535);
      var $cmp1080=(($conv1079)|0) > 256;
      if ($cmp1080) { __label__ = 372; break; } else { __label__ = 373; break; }
    case 372: 
      HEAP16[((_num_trans_in)>>1)]=256;
      __label__ = 373; break;
    case 373: 
      var $658=HEAPU16[((_num_trans_in)>>1)];
      var $conv1084=(($658)&65535);
      var $sub1085=(($conv1084-1)|0);
      var $conv1086=(($sub1085) & 65535);
      HEAP16[((_trns_index)>>1)]=$conv1086;
      HEAP32[((_have_trns)>>2)]=1;
      HEAP32[((_ia)>>2)]=0;
      __label__ = 374; break;
    case 374: 
      var $659=HEAP32[((_ia)>>2)];
      var $660=HEAPU16[((_num_trans_in)>>1)];
      var $conv1088=(($660)&65535);
      var $cmp1089=(($659)|0) < (($conv1088)|0);
      if ($cmp1089) { __label__ = 375; break; } else { __label__ = 377; break; }
    case 375: 
      var $661=$i;
      var $inc1092=(($661+1)|0);
      $i=$inc1092;
      var $662=$argv_addr;
      var $arrayidx1093=(($662+($inc1092<<2))|0);
      var $663=HEAP32[(($arrayidx1093)>>2)];
      var $call1094=_atoi($663);
      var $conv1095=(($call1094) & 255);
      var $664=HEAP32[((_ia)>>2)];
      var $arrayidx1096=((_trans_in+$664)|0);
      HEAP8[($arrayidx1096)]=$conv1095;
      __label__ = 376; break;
    case 376: 
      var $665=HEAP32[((_ia)>>2)];
      var $inc1098=(($665+1)|0);
      HEAP32[((_ia)>>2)]=$inc1098;
      __label__ = 374; break;
    case 377: 
      var $666=HEAPU16[((_num_trans_in)>>1)];
      var $conv1100=(($666)&65535);
      var $add1101=(($conv1100+1)|0);
      var $667=HEAP32[((_names)>>2)];
      var $add1102=(($667+$add1101)|0);
      HEAP32[((_names)>>2)]=$add1102;
      __label__ = 427; break;
    case 378: 
      var $668=$i;
      var $669=$argv_addr;
      var $arrayidx1104=(($669+($668<<2))|0);
      var $670=HEAP32[(($arrayidx1104)>>2)];
      var $call1105=_strncmp($670, ((STRING_TABLE.__str152)|0), 5);
      var $tobool1106=(($call1105)|0)!=0;
      if ($tobool1106) { __label__ = 379; break; } else { __label__ = 380; break; }
    case 379: 
      var $671=$i;
      var $672=$argv_addr;
      var $arrayidx1108=(($672+($671<<2))|0);
      var $673=HEAP32[(($arrayidx1108)>>2)];
      var $call1109=_strncmp($673, ((STRING_TABLE.__str153)|0), 5);
      var $tobool1110=(($call1109)|0)!=0;
      if ($tobool1110) { __label__ = 381; break; } else { __label__ = 380; break; }
    case 380: 
      var $674=HEAP32[((_names)>>2)];
      var $add1112=(($674+5)|0);
      HEAP32[((_names)>>2)]=$add1112;
      HEAP32[((_have_trns)>>2)]=1;
      var $675=$i;
      var $inc1113=(($675+1)|0);
      $i=$inc1113;
      var $676=$argv_addr;
      var $arrayidx1114=(($676+($inc1113<<2))|0);
      var $677=HEAP32[(($arrayidx1114)>>2)];
      var $call1115=_atoi($677);
      var $conv1116=(($call1115) & 65535);
      HEAP16[((_trns_index)>>1)]=$conv1116;
      var $678=$i;
      var $inc1117=(($678+1)|0);
      $i=$inc1117;
      var $679=$argv_addr;
      var $arrayidx1118=(($679+($inc1117<<2))|0);
      var $680=HEAP32[(($arrayidx1118)>>2)];
      var $call1119=_atoi($680);
      var $conv1120=(($call1119) & 65535);
      HEAP16[((_trns_red)>>1)]=$conv1120;
      var $681=$i;
      var $inc1121=(($681+1)|0);
      $i=$inc1121;
      var $682=$argv_addr;
      var $arrayidx1122=(($682+($inc1121<<2))|0);
      var $683=HEAP32[(($arrayidx1122)>>2)];
      var $call1123=_atoi($683);
      var $conv1124=(($call1123) & 65535);
      HEAP16[((_trns_green)>>1)]=$conv1124;
      var $684=$i;
      var $inc1125=(($684+1)|0);
      $i=$inc1125;
      var $685=$argv_addr;
      var $arrayidx1126=(($685+($inc1125<<2))|0);
      var $686=HEAP32[(($arrayidx1126)>>2)];
      var $call1127=_atoi($686);
      var $conv1128=(($call1127) & 65535);
      HEAP16[((_trns_blue)>>1)]=$conv1128;
      var $687=$i;
      var $inc1129=(($687+1)|0);
      $i=$inc1129;
      var $688=$argv_addr;
      var $arrayidx1130=(($688+($inc1129<<2))|0);
      var $689=HEAP32[(($arrayidx1130)>>2)];
      var $call1131=_atoi($689);
      var $conv1132=(($call1131) & 65535);
      HEAP16[((_trns_gray)>>1)]=$conv1132;
      __label__ = 426; break;
    case 381: 
      var $690=$i;
      var $691=$argv_addr;
      var $arrayidx1134=(($691+($690<<2))|0);
      var $692=HEAP32[(($arrayidx1134)>>2)];
      var $call1135=_strncmp($692, ((STRING_TABLE.__str154)|0), 8);
      var $tobool1136=(($call1135)|0)!=0;
      if ($tobool1136) { __label__ = 383; break; } else { __label__ = 382; break; }
    case 382: 
      var $693=HEAP32[((_stdout)>>2)];
      var $call1138=_fprintf($693, ((STRING_TABLE.__str155)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $694=HEAP32[((_stdout)>>2)];
      var $call1139=_fprintf($694, ((STRING_TABLE.__str156)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $695=HEAP32[((_stdout)>>2)];
      var $call1140=_fprintf($695, ((STRING_TABLE.__str157)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $696=HEAP32[((_stdout)>>2)];
      var $call1141=_fprintf($696, ((STRING_TABLE.__str72)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $697=HEAP32[((_stdout)>>2)];
      var $call1142=_fprintf($697, ((STRING_TABLE.__str158)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $698=HEAP32[((_stdout)>>2)];
      var $call1143=_fprintf($698, ((STRING_TABLE.__str159)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $699=HEAP32[((_stdout)>>2)];
      var $call1144=_fprintf($699, ((STRING_TABLE.__str160)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $700=HEAP32[((_stdout)>>2)];
      var $call1145=_fprintf($700, ((STRING_TABLE.__str161)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      HEAP32[((_verbose)>>2)]=0;
      __label__ = 425; break;
    case 383: 
      var $701=$i;
      var $702=$argv_addr;
      var $arrayidx1147=(($702+($701<<2))|0);
      var $703=HEAP32[(($arrayidx1147)>>2)];
      var $call1148=_strncmp($703, ((STRING_TABLE.__str162)|0), 2);
      var $tobool1149=(($call1148)|0)!=0;
      if ($tobool1149) { __label__ = 385; break; } else { __label__ = 384; break; }
    case 384: 
      var $704=HEAP32[((_verbose)>>2)];
      var $inc1151=(($704+1)|0);
      HEAP32[((_verbose)>>2)]=$inc1151;
      __label__ = 424; break;
    case 385: 
      var $705=$i;
      var $706=$argv_addr;
      var $arrayidx1153=(($706+($705<<2))|0);
      var $707=HEAP32[(($arrayidx1153)>>2)];
      var $call1154=_strncmp($707, ((STRING_TABLE.__str163)|0), 2);
      var $tobool1155=(($call1154)|0)!=0;
      if ($tobool1155) { __label__ = 387; break; } else { __label__ = 386; break; }
    case 386: 
      var $708=$i;
      var $inc1157=(($708+1)|0);
      $i=$inc1157;
      var $709=$argv_addr;
      var $arrayidx1158=(($709+($inc1157<<2))|0);
      var $710=HEAP32[(($arrayidx1158)>>2)];
      var $call1159=_atoi($710);
      HEAP32[((_default_compression_window)>>2)]=$call1159;
      var $711=HEAP32[((_force_compression_window)>>2)];
      var $inc1160=(($711+1)|0);
      HEAP32[((_force_compression_window)>>2)]=$inc1160;
      var $712=HEAP32[((_names)>>2)];
      var $inc1161=(($712+1)|0);
      HEAP32[((_names)>>2)]=$inc1161;
      __label__ = 423; break;
    case 387: 
      var $713=$i;
      var $714=$argv_addr;
      var $arrayidx1163=(($714+($713<<2))|0);
      var $715=HEAP32[(($arrayidx1163)>>2)];
      var $call1164=_strncmp($715, ((STRING_TABLE.__str164)|0), 3);
      var $tobool1165=(($call1164)|0)!=0;
      if ($tobool1165) { __label__ = 389; break; } else { __label__ = 388; break; }
    case 388: 
      var $716=$i;
      var $inc1167=(($716+1)|0);
      $i=$inc1167;
      var $717=$argv_addr;
      var $arrayidx1168=(($717+($inc1167<<2))|0);
      var $718=HEAP32[(($arrayidx1168)>>2)];
      var $call1169=_atoi($718);
      HEAP32[((_compression_mem_level)>>2)]=$call1169;
      var $719=HEAP32[((_names)>>2)];
      var $inc1170=(($719+1)|0);
      HEAP32[((_names)>>2)]=$inc1170;
      __label__ = 422; break;
    case 389: 
      var $720=$i;
      var $721=$argv_addr;
      var $arrayidx1172=(($721+($720<<2))|0);
      var $722=HEAP32[(($arrayidx1172)>>2)];
      var $call1173=_strncmp($722, ((STRING_TABLE.__str141)|0), 2);
      var $tobool1174=(($call1173)|0)!=0;
      if ($tobool1174) { __label__ = 421; break; } else { __label__ = 390; break; }
    case 390: 
      var $723=$i;
      var $inc1176=(($723+1)|0);
      $i=$inc1176;
      var $724=$argv_addr;
      var $arrayidx1177=(($724+($inc1176<<2))|0);
      var $725=HEAP32[(($arrayidx1177)>>2)];
      var $call1178=_atoi($725);
      $specified_strategy=$call1178;
      var $726=$specified_strategy;
      var $cmp1179=(($726)|0) > 2;
      if ($cmp1179) { __label__ = 392; break; } else { __label__ = 391; break; }
    case 391: 
      var $727=$specified_strategy;
      var $cmp1182=(($727)|0) < 0;
      if ($cmp1182) { __label__ = 392; break; } else { __label__ = 393; break; }
    case 392: 
      $specified_strategy=0;
      __label__ = 393; break;
    case 393: 
      var $728=HEAP32[((_names)>>2)];
      var $inc1186=(($728+1)|0);
      HEAP32[((_names)>>2)]=$inc1186;
      var $729=HEAP32[((_brute_force)>>2)];
      var $cmp1187=(($729)|0)==0;
      if ($cmp1187) { __label__ = 394; break; } else { __label__ = 395; break; }
    case 394: 
      var $730=$specified_strategy;
      var $731=HEAP32[((_method)>>2)];
      var $arrayidx1190=(($zs+($731<<2))|0);
      HEAP32[(($arrayidx1190)>>2)]=$730;
      __label__ = 420; break;
    case 395: 
      var $732=HEAP32[((_brute_force_strategy)>>2)];
      var $cmp1192=(($732)|0)==0;
      if ($cmp1192) { __label__ = 396; break; } else { __label__ = 401; break; }
    case 396: 
      $strat=0;
      __label__ = 397; break;
    case 397: 
      var $733=$strat;
      var $cmp1196=(($733)|0) < 2;
      if ($cmp1196) { __label__ = 398; break; } else { __label__ = 400; break; }
    case 398: 
      var $734=$strat;
      var $arrayidx1199=((_brute_force_strategies+($734<<2))|0);
      HEAP32[(($arrayidx1199)>>2)]=1;
      __label__ = 399; break;
    case 399: 
      var $735=$strat;
      var $inc1201=(($735+1)|0);
      $strat=$inc1201;
      __label__ = 397; break;
    case 400: 
      __label__ = 401; break;
    case 401: 
      var $736=$specified_strategy;
      var $arrayidx1204=((_brute_force_strategies+($736<<2))|0);
      HEAP32[(($arrayidx1204)>>2)]=0;
      HEAP32[((_method)>>2)]=11;
      $filt=0;
      __label__ = 402; break;
    case 402: 
      var $737=$filt;
      var $cmp1206=(($737)|0) < 6;
      if ($cmp1206) { __label__ = 403; break; } else { __label__ = 407; break; }
    case 403: 
      var $738=$specified_strategy;
      var $cmp1209=(($738)|0)!=2;
      if ($cmp1209) { __label__ = 404; break; } else { __label__ = 405; break; }
    case 404: 
      var $739=HEAP32[((_method)>>2)];
      var $arrayidx1212=(($try_method+($739<<2))|0);
      HEAP32[(($arrayidx1212)>>2)]=1;
      __label__ = 405; break;
    case 405: 
      var $740=HEAP32[((_method)>>2)];
      var $inc1214=(($740+1)|0);
      HEAP32[((_method)>>2)]=$inc1214;
      __label__ = 406; break;
    case 406: 
      var $741=$filt;
      var $inc1216=(($741+1)|0);
      $filt=$inc1216;
      __label__ = 402; break;
    case 407: 
      $lev=1;
      __label__ = 408; break;
    case 408: 
      var $742=$lev;
      var $cmp1219=(($742)|0) < 10;
      if ($cmp1219) { __label__ = 409; break; } else { __label__ = 419; break; }
    case 409: 
      $strat=0;
      __label__ = 410; break;
    case 410: 
      var $743=$strat;
      var $cmp1223=(($743)|0) < 2;
      if ($cmp1223) { __label__ = 411; break; } else { __label__ = 417; break; }
    case 411: 
      $filt=0;
      __label__ = 412; break;
    case 412: 
      var $744=$filt;
      var $cmp1227=(($744)|0) < 6;
      if ($cmp1227) { __label__ = 413; break; } else { __label__ = 415; break; }
    case 413: 
      var $745=$lev;
      var $arrayidx1230=((_brute_force_levels+($745<<2))|0);
      var $746=HEAP32[(($arrayidx1230)>>2)];
      var $747=$filt;
      var $arrayidx1231=((_brute_force_filters+($747<<2))|0);
      var $748=HEAP32[(($arrayidx1231)>>2)];
      var $or1232=$746 | $748;
      var $749=$strat;
      var $arrayidx1233=((_brute_force_strategies+($749<<2))|0);
      var $750=HEAP32[(($arrayidx1233)>>2)];
      var $or1234=$or1232 | $750;
      var $751=HEAP32[((_method)>>2)];
      var $arrayidx1235=(($try_method+($751<<2))|0);
      HEAP32[(($arrayidx1235)>>2)]=$or1234;
      var $752=HEAP32[((_method)>>2)];
      var $inc1236=(($752+1)|0);
      HEAP32[((_method)>>2)]=$inc1236;
      __label__ = 414; break;
    case 414: 
      var $753=$filt;
      var $inc1238=(($753+1)|0);
      $filt=$inc1238;
      __label__ = 412; break;
    case 415: 
      __label__ = 416; break;
    case 416: 
      var $754=$strat;
      var $inc1241=(($754+1)|0);
      $strat=$inc1241;
      __label__ = 410; break;
    case 417: 
      __label__ = 418; break;
    case 418: 
      var $755=$lev;
      var $inc1244=(($755+1)|0);
      $lev=$inc1244;
      __label__ = 408; break;
    case 419: 
      __label__ = 420; break;
    case 420: 
      var $756=HEAP32[((_brute_force_strategy)>>2)];
      var $inc1247=(($756+1)|0);
      HEAP32[((_brute_force_strategy)>>2)]=$inc1247;
      __label__ = 421; break;
    case 421: 
      __label__ = 422; break;
    case 422: 
      __label__ = 423; break;
    case 423: 
      __label__ = 424; break;
    case 424: 
      __label__ = 425; break;
    case 425: 
      __label__ = 426; break;
    case 426: 
      __label__ = 427; break;
    case 427: 
      __label__ = 428; break;
    case 428: 
      __label__ = 429; break;
    case 429: 
      __label__ = 430; break;
    case 430: 
      __label__ = 431; break;
    case 431: 
      __label__ = 432; break;
    case 432: 
      __label__ = 433; break;
    case 433: 
      __label__ = 434; break;
    case 434: 
      __label__ = 435; break;
    case 435: 
      __label__ = 436; break;
    case 436: 
      __label__ = 437; break;
    case 437: 
      __label__ = 438; break;
    case 438: 
      __label__ = 439; break;
    case 439: 
      __label__ = 440; break;
    case 440: 
      __label__ = 441; break;
    case 441: 
      __label__ = 442; break;
    case 442: 
      __label__ = 443; break;
    case 443: 
      __label__ = 444; break;
    case 444: 
      __label__ = 445; break;
    case 445: 
      __label__ = 446; break;
    case 446: 
      __label__ = 447; break;
    case 447: 
      __label__ = 448; break;
    case 448: 
      __label__ = 449; break;
    case 449: 
      __label__ = 450; break;
    case 450: 
      __label__ = 451; break;
    case 451: 
      __label__ = 452; break;
    case 452: 
      __label__ = 453; break;
    case 453: 
      __label__ = 454; break;
    case 454: 
      __label__ = 455; break;
    case 455: 
      __label__ = 456; break;
    case 456: 
      __label__ = 457; break;
    case 457: 
      __label__ = 458; break;
    case 458: 
      __label__ = 459; break;
    case 459: 
      __label__ = 460; break;
    case 460: 
      __label__ = 461; break;
    case 461: 
      __label__ = 462; break;
    case 462: 
      __label__ = 463; break;
    case 463: 
      __label__ = 464; break;
    case 464: 
      __label__ = 465; break;
    case 465: 
      __label__ = 466; break;
    case 466: 
      __label__ = 467; break;
    case 467: 
      __label__ = 468; break;
    case 468: 
      __label__ = 469; break;
    case 469: 
      __label__ = 470; break;
    case 470: 
      __label__ = 471; break;
    case 471: 
      __label__ = 472; break;
    case 472: 
      __label__ = 473; break;
    case 473: 
      __label__ = 474; break;
    case 474: 
      var $757=$i;
      var $inc1302=(($757+1)|0);
      $i=$inc1302;
      __label__ = 41; break;
    case 475: 
      var $758=HEAP32[((_verbose)>>2)];
      var $cmp1304=(($758)|0) > 0;
      if ($cmp1304) { __label__ = 476; break; } else { __label__ = 477; break; }
    case 476: 
      _print_version_info();
      __label__ = 477; break;
    case 477: 
      var $759=HEAP32[((_default_compression_window)>>2)];
      var $cmp1308=(($759)|0)==32;
      if ($cmp1308) { __label__ = 478; break; } else { __label__ = 479; break; }
    case 478: 
      HEAP32[((_default_compression_window)>>2)]=15;
      __label__ = 503; break;
    case 479: 
      var $760=HEAP32[((_default_compression_window)>>2)];
      var $cmp1312=(($760)|0)==16;
      if ($cmp1312) { __label__ = 480; break; } else { __label__ = 481; break; }
    case 480: 
      HEAP32[((_default_compression_window)>>2)]=14;
      __label__ = 502; break;
    case 481: 
      var $761=HEAP32[((_default_compression_window)>>2)];
      var $cmp1316=(($761)|0)==8;
      if ($cmp1316) { __label__ = 482; break; } else { __label__ = 483; break; }
    case 482: 
      HEAP32[((_default_compression_window)>>2)]=13;
      __label__ = 501; break;
    case 483: 
      var $762=HEAP32[((_default_compression_window)>>2)];
      var $cmp1320=(($762)|0)==4;
      if ($cmp1320) { __label__ = 484; break; } else { __label__ = 485; break; }
    case 484: 
      HEAP32[((_default_compression_window)>>2)]=12;
      __label__ = 500; break;
    case 485: 
      var $763=HEAP32[((_default_compression_window)>>2)];
      var $cmp1324=(($763)|0)==2;
      if ($cmp1324) { __label__ = 486; break; } else { __label__ = 487; break; }
    case 486: 
      HEAP32[((_default_compression_window)>>2)]=11;
      __label__ = 499; break;
    case 487: 
      var $764=HEAP32[((_default_compression_window)>>2)];
      var $cmp1328=(($764)|0)==1;
      if ($cmp1328) { __label__ = 488; break; } else { __label__ = 489; break; }
    case 488: 
      HEAP32[((_default_compression_window)>>2)]=10;
      __label__ = 498; break;
    case 489: 
      var $765=HEAP32[((_default_compression_window)>>2)];
      var $cmp1332=(($765)|0)==512;
      if ($cmp1332) { __label__ = 490; break; } else { __label__ = 491; break; }
    case 490: 
      HEAP32[((_default_compression_window)>>2)]=9;
      __label__ = 497; break;
    case 491: 
      var $766=HEAP32[((_default_compression_window)>>2)];
      var $cmp1336=(($766)|0)==256;
      if ($cmp1336) { __label__ = 492; break; } else { __label__ = 493; break; }
    case 492: 
      HEAP32[((_default_compression_window)>>2)]=8;
      __label__ = 496; break;
    case 493: 
      var $767=HEAP32[((_default_compression_window)>>2)];
      var $cmp1340=(($767)|0)!=15;
      if ($cmp1340) { __label__ = 494; break; } else { __label__ = 495; break; }
    case 494: 
      var $768=HEAP32[((_stdout)>>2)];
      var $769=HEAP32[((_default_compression_window)>>2)];
      var $call1343=_fprintf($768, ((STRING_TABLE.__str165)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$769,tempInt));
      HEAP32[((_default_compression_window)>>2)]=12;
      __label__ = 495; break;
    case 495: 
      __label__ = 496; break;
    case 496: 
      __label__ = 497; break;
    case 497: 
      __label__ = 498; break;
    case 498: 
      __label__ = 499; break;
    case 499: 
      __label__ = 500; break;
    case 500: 
      __label__ = 501; break;
    case 501: 
      __label__ = 502; break;
    case 502: 
      __label__ = 503; break;
    case 503: 
      var $770=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1353=(($770)|0)==0;
      if ($cmp1353) { __label__ = 504; break; } else { __label__ = 517; break; }
    case 504: 
      var $771=$argc_addr;
      var $772=HEAP32[((_names)>>2)];
      var $sub1356=(($771-$772)|0);
      var $cmp1357=(($sub1356)|0)==2;
      if ($cmp1357) { __label__ = 505; break; } else { __label__ = 506; break; }
    case 505: 
      var $773=HEAP32[((_names)>>2)];
      var $774=$argv_addr;
      var $arrayidx1360=(($774+($773<<2))|0);
      var $775=HEAP32[(($arrayidx1360)>>2)];
      HEAP32[((_inname)>>2)]=$775;
      var $776=HEAP32[((_names)>>2)];
      var $add1361=(($776+1)|0);
      var $777=$argv_addr;
      var $arrayidx1362=(($777+($add1361<<2))|0);
      var $778=HEAP32[(($arrayidx1362)>>2)];
      HEAP32[((_outname)>>2)]=$778;
      __label__ = 516; break;
    case 506: 
      var $779=HEAP32[((_overwrite)>>2)];
      var $tobool1364=(($779)|0)!=0;
      if ($tobool1364) { __label__ = 507; break; } else { __label__ = 508; break; }
    case 507: 
      var $780=HEAP32[((_names)>>2)];
      var $781=$argv_addr;
      var $arrayidx1366=(($781+($780<<2))|0);
      var $782=HEAP32[(($arrayidx1366)>>2)];
      HEAP32[((_inname)>>2)]=$782;
      var $783=HEAP32[((_outname)>>2)];
      HEAP32[((_outname)>>2)]=$783;
      __label__ = 515; break;
    case 508: 
      var $784=$argc_addr;
      var $785=HEAP32[((_names)>>2)];
      var $sub1368=(($784-$785)|0);
      var $cmp1369=(($sub1368)|0)==1;
      if ($cmp1369) { __label__ = 510; break; } else { __label__ = 509; break; }
    case 509: 
      var $786=HEAP32[((_nosave)>>2)];
      var $tobool1372=(($786)|0)!=0;
      if ($tobool1372) { __label__ = 510; break; } else { __label__ = 511; break; }
    case 510: 
      var $787=HEAP32[((_names)>>2)];
      var $788=$argv_addr;
      var $arrayidx1374=(($788+($787<<2))|0);
      var $789=HEAP32[(($arrayidx1374)>>2)];
      HEAP32[((_inname)>>2)]=$789;
      __label__ = 511; break;
    case 511: 
      var $790=HEAP32[((_verbose)>>2)];
      var $tobool1376=(($790)|0)!=0;
      if ($tobool1376) { __label__ = 512; break; } else { __label__ = 514; break; }
    case 512: 
      var $791=HEAP32[((_nosave)>>2)];
      var $tobool1378=(($791)|0)!=0;
      if ($tobool1378) { __label__ = 514; break; } else { __label__ = 513; break; }
    case 513: 
      _print_usage(1);
      __label__ = 514; break;
    case 514: 
      __label__ = 515; break;
    case 515: 
      __label__ = 516; break;
    case 516: 
      __label__ = 517; break;
    case 517: 
      HEAP32[((_ia)>>2)]=0;
      __label__ = 518; break;
    case 518: 
      var $792=HEAP32[((_ia)>>2)];
      var $cmp1385=(($792)|0) < 256;
      if ($cmp1385) { __label__ = 519; break; } else { __label__ = 521; break; }
    case 519: 
      var $793=HEAP32[((_ia)>>2)];
      var $arrayidx1388=((_trns_array+$793)|0);
      HEAP8[($arrayidx1388)]=-1;
      __label__ = 520; break;
    case 520: 
      var $794=HEAP32[((_ia)>>2)];
      var $inc1390=(($794+1)|0);
      HEAP32[((_ia)>>2)]=$inc1390;
      __label__ = 518; break;
    case 521: 
      __label__ = 522; break;
    case 522: 
      HEAP32[((_first_trial)>>2)]=1;
      var $795=HEAP32[((_global_things_have_changed)>>2)];
      HEAP32[((_things_have_changed)>>2)]=$795;
      var $796=HEAP32[((_png_row_filters)>>2)];
      var $cmp1393=(($796)|0)!=0;
      if ($cmp1393) { __label__ = 523; break; } else { __label__ = 524; break; }
    case 523: 
      var $797=HEAP32[((_png_row_filters)>>2)];
      _free($797);
      HEAP32[((_png_row_filters)>>2)]=0;
      __label__ = 524; break;
    case 524: 
      HEAP32[((_image_specified_gamma)>>2)]=0;
      var $798=HEAP32[((_names)>>2)];
      var $inc1397=(($798+1)|0);
      HEAP32[((_names)>>2)]=$inc1397;
      var $799=$argv_addr;
      var $arrayidx1398=(($799+($798<<2))|0);
      var $800=HEAP32[(($arrayidx1398)>>2)];
      HEAP32[((_inname)>>2)]=$800;
      var $801=HEAP32[((_inname)>>2)];
      var $cmp1399=(($801)|0)==0;
      if ($cmp1399) { __label__ = 525; break; } else { __label__ = 528; break; }
    case 525: 
      var $802=HEAP32[((_verbose)>>2)];
      var $cmp1402=(($802)|0) > 0;
      if ($cmp1402) { __label__ = 526; break; } else { __label__ = 527; break; }
    case 526: 
      _show_result();
      __label__ = 527; break;
    case 527: 
      __label__ = 1608; break;
    case 528: 
      var $803=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1407=(($803)|0)==1;
      if ($cmp1407) { __label__ = 530; break; } else { __label__ = 529; break; }
    case 529: 
      var $804=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1410=(($804)|0)==3;
      if ($cmp1410) { __label__ = 530; break; } else { __label__ = 551; break; }
    case 530: 
      var $805=HEAP32[((_directory_name)>>2)];
      var $call1413=_stat($805, $stat_buf);
      var $tobool1414=(($call1413)|0)!=0;
      if ($tobool1414) { __label__ = 531; break; } else { __label__ = 534; break; }
    case 531: 
      var $806=HEAP32[((_directory_name)>>2)];
      var $call1416=_mkdir($806, 493);
      var $tobool1417=(($call1416)|0)!=0;
      if ($tobool1417) { __label__ = 532; break; } else { __label__ = 533; break; }
    case 532: 
      var $807=HEAP32[((_stdout)>>2)];
      var $808=HEAP32[((_directory_name)>>2)];
      var $call1419=_fprintf($807, ((STRING_TABLE.__str166)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$808,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 533: 
      HEAP32[((_nofilecheck)>>2)]=1;
      __label__ = 534; break;
    case 534: 
      var $809=HEAP32[((_directory_name)>>2)];
      var $call1422=_strlen($809);
      $outlen=$call1422;
      var $810=$outlen;
      var $cmp1423=(($810)|0) >= 255;
      if ($cmp1423) { __label__ = 535; break; } else { __label__ = 536; break; }
    case 535: 
      var $811=HEAP32[((_stdout)>>2)];
      var $812=HEAP32[((_directory_name)>>2)];
      var $call1426=_fprintf($811, ((STRING_TABLE.__str167)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$812,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 536: 
      var $813=HEAP32[((_directory_name)>>2)];
      var $call1428=_strcpy(((_out_string)|0), $813);
      var $814=$outlen;
      var $sub1429=(($814-1)|0);
      var $arrayidx1430=((_out_string+$sub1429)|0);
      var $815=HEAP8[($arrayidx1430)];
      var $conv1431=(($815 << 24) >> 24);
      var $816=HEAP8[(((STRING_TABLE.__str168)|0))];
      var $conv1432=(($816 << 24) >> 24);
      var $cmp1433=(($conv1431)|0)!=(($conv1432)|0);
      if ($cmp1433) { __label__ = 537; break; } else { __label__ = 540; break; }
    case 537: 
      var $817=$outlen;
      var $sub1436=(($817-1)|0);
      var $arrayidx1437=((_out_string+$sub1436)|0);
      var $818=HEAP8[($arrayidx1437)];
      var $conv1438=(($818 << 24) >> 24);
      var $819=HEAP8[(((STRING_TABLE.__str168)|0))];
      var $conv1439=(($819 << 24) >> 24);
      var $cmp1440=(($conv1438)|0)!=(($conv1439)|0);
      if ($cmp1440) { __label__ = 538; break; } else { __label__ = 540; break; }
    case 538: 
      var $820=$outlen;
      var $sub1443=(($820-1)|0);
      var $arrayidx1444=((_out_string+$sub1443)|0);
      var $821=HEAP8[($arrayidx1444)];
      var $conv1445=(($821 << 24) >> 24);
      var $822=HEAP8[(((STRING_TABLE.__str169)|0))];
      var $conv1446=(($822 << 24) >> 24);
      var $cmp1447=(($conv1445)|0)!=(($conv1446)|0);
      if ($cmp1447) { __label__ = 539; break; } else { __label__ = 540; break; }
    case 539: 
      var $823=HEAP8[(((STRING_TABLE.__str168)|0))];
      var $824=$outlen;
      var $inc1450=(($824+1)|0);
      $outlen=$inc1450;
      var $arrayidx1451=((_out_string+$824)|0);
      HEAP8[($arrayidx1451)]=$823;
      __label__ = 540; break;
    case 540: 
      var $825=$outlen;
      var $arrayidx1453=((_out_string+$825)|0);
      HEAP8[($arrayidx1453)]=0;
      var $826=HEAP32[((_inname)>>2)];
      var $call1454=_strlen($826);
      $inlen=$call1454;
      var $827=$inlen;
      var $cmp1455=(($827)|0) >= 256;
      if ($cmp1455) { __label__ = 541; break; } else { __label__ = 542; break; }
    case 541: 
      var $828=HEAP32[((_stdout)>>2)];
      var $829=HEAP32[((_inname)>>2)];
      var $call1458=_fprintf($828, ((STRING_TABLE.__str170)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$829,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 542: 
      var $830=HEAP32[((_inname)>>2)];
      var $call1460=_strcpy(((_in_string)|0), $830);
      var $831=$inlen;
      var $arrayidx1461=((_in_string+$831)|0);
      HEAP8[($arrayidx1461)]=0;
      HEAP32[((_op)>>2)]=((_in_string)|0);
      var $832=$inlen;
      var $add_ptr1462=((((_in_string)|0)+$832)|0);
      var $add_ptr1463=(($add_ptr1462-1)|0);
      HEAP32[((_ip)>>2)]=$add_ptr1463;
      __label__ = 543; break;
    case 543: 
      var $833=HEAPU32[((_ip)>>2)];
      var $cmp1464=(($833)>>>0) > (((((_in_string)|0)))>>>0);
      if ($cmp1464) { __label__ = 544; break; } else { __label__ = 548; break; }
    case 544: 
      var $834=HEAP32[((_ip)>>2)];
      var $835=HEAP8[($834)];
      var $conv1466=(($835 << 24) >> 24);
      var $cmp1467=(($conv1466)|0)==92;
      if ($cmp1467) { __label__ = 546; break; } else { __label__ = 545; break; }
    case 545: 
      var $836=HEAP32[((_ip)>>2)];
      var $837=HEAP8[($836)];
      var $conv1470=(($837 << 24) >> 24);
      var $cmp1471=(($conv1470)|0)==47;
      if ($cmp1471) { __label__ = 546; break; } else { __label__ = 547; break; }
    case 546: 
      var $838=HEAP32[((_ip)>>2)];
      var $add_ptr1474=(($838+1)|0);
      HEAP32[((_op)>>2)]=$add_ptr1474;
      __label__ = 548; break;
    case 547: 
      var $839=HEAP32[((_ip)>>2)];
      var $incdec_ptr1476=(($839-1)|0);
      HEAP32[((_ip)>>2)]=$incdec_ptr1476;
      __label__ = 543; break;
    case 548: 
      var $840=$outlen;
      var $841=$inlen;
      var $842=HEAP32[((_op)>>2)];
      var $sub_ptr_lhs_cast=$842;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-_in_string)|0);
      var $sub1477=(($841-$sub_ptr_sub)|0);
      var $add1478=(($840+$sub1477)|0);
      var $cmp1479=(($add1478)|0) >= 256;
      if ($cmp1479) { __label__ = 549; break; } else { __label__ = 550; break; }
    case 549: 
      var $843=HEAP32[((_stdout)>>2)];
      var $call1482=_fprintf($843, ((STRING_TABLE.__str171)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 550: 
      var $844=$outlen;
      var $add_ptr1484=((((_out_string)|0)+$844)|0);
      var $845=HEAP32[((_op)>>2)];
      var $call1485=_strcpy($add_ptr1484, $845);
      HEAP32[((_outname)>>2)]=((_out_string)|0);
      __label__ = 551; break;
    case 551: 
      var $846=HEAP32[((_overwrite)>>2)];
      var $tobool1487=(($846)|0)!=0;
      if ($tobool1487) { __label__ = 552; break; } else { __label__ = 560; break; }
    case 552: 
      var $847=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1489=(($847)|0)==2;
      if ($cmp1489) { __label__ = 555; break; } else { __label__ = 553; break; }
    case 553: 
      var $848=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1492=(($848)|0)==1;
      if ($cmp1492) { __label__ = 555; break; } else { __label__ = 554; break; }
    case 554: 
      var $849=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1495=(($849)|0)==3;
      if ($cmp1495) { __label__ = 555; break; } else { __label__ = 560; break; }
    case 555: 
      var $850=HEAP32[((_overwrite)>>2)];
      var $cmp1498=(($850)|0) > 0;
      if ($cmp1498) { __label__ = 556; break; } else { __label__ = 559; break; }
    case 556: 
      var $851=HEAP32[((_verbose)>>2)];
      var $cmp1501=(($851)|0) > 1;
      if ($cmp1501) { __label__ = 557; break; } else { __label__ = 558; break; }
    case 557: 
      var $call1504=_printf(((STRING_TABLE.__str172)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 558; break;
    case 558: 
      HEAP32[((_overwrite)>>2)]=0;
      __label__ = 559; break;
    case 559: 
      __label__ = 560; break;
    case 560: 
      var $852=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1508=(($852)|0)==2;
      if ($cmp1508) { __label__ = 562; break; } else { __label__ = 561; break; }
    case 561: 
      var $853=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1511=(($853)|0)==3;
      if ($cmp1511) { __label__ = 562; break; } else { __label__ = 575; break; }
    case 562: 
      HEAP32[((_ip)>>2)]=((_in_string)|0);
      HEAP8[(((_in_string)|0))]=0;
      var $854=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp1514=(($854)|0)==2;
      if ($cmp1514) { __label__ = 563; break; } else { __label__ = 564; break; }
    case 563: 
      var $855=HEAP32[((_inname)>>2)];
      var $call1517=_strcat(((_in_string)|0), $855);
      __label__ = 565; break;
    case 564: 
      var $856=HEAP32[((_outname)>>2)];
      var $call1519=_strcat(((_in_string)|0), $856);
      __label__ = 565; break;
    case 565: 
      HEAP32[((_ip)>>2)]=((_in_string)|0);
      HEAP32[((_dot)>>2)]=((_out_string)|0);
      HEAP32[((_op)>>2)]=((_out_string)|0);
      __label__ = 566; break;
    case 566: 
      var $857=HEAP32[((_ip)>>2)];
      var $858=HEAP8[($857)];
      var $conv1522=(($858 << 24) >> 24);
      var $cmp1523=(($conv1522)|0)!=0;
      if ($cmp1523) { __label__ = 567; break; } else { __label__ = 570; break; }
    case 567: 
      var $859=HEAP32[((_ip)>>2)];
      var $incdec_ptr1526=(($859+1)|0);
      HEAP32[((_ip)>>2)]=$incdec_ptr1526;
      var $860=HEAP8[($859)];
      var $861=HEAP32[((_op)>>2)];
      var $incdec_ptr1527=(($861+1)|0);
      HEAP32[((_op)>>2)]=$incdec_ptr1527;
      HEAP8[($861)]=$860;
      var $862=HEAP32[((_ip)>>2)];
      var $863=HEAP8[($862)];
      var $conv1528=(($863 << 24) >> 24);
      var $cmp1529=(($conv1528)|0)==46;
      if ($cmp1529) { __label__ = 568; break; } else { __label__ = 569; break; }
    case 568: 
      var $864=HEAP32[((_op)>>2)];
      HEAP32[((_dot)>>2)]=$864;
      __label__ = 569; break;
    case 569: 
      __label__ = 566; break;
    case 570: 
      var $865=HEAP32[((_op)>>2)];
      HEAP8[($865)]=0;
      var $866=HEAP32[((_dot)>>2)];
      var $cmp1534=(($866)|0)!=(((((_out_string)|0)))|0);
      if ($cmp1534) { __label__ = 571; break; } else { __label__ = 572; break; }
    case 571: 
      var $867=HEAP32[((_dot)>>2)];
      HEAP8[($867)]=0;
      __label__ = 572; break;
    case 572: 
      HEAP8[(((_in_extension)|0))]=0;
      var $868=HEAP32[((_dot)>>2)];
      var $cmp1538=(($868)|0)!=(((((_out_string)|0)))|0);
      if ($cmp1538) { __label__ = 573; break; } else { __label__ = 574; break; }
    case 573: 
      var $869=HEAP32[((_dot)>>2)];
      var $incdec_ptr1541=(($869+1)|0);
      HEAP32[((_dot)>>2)]=$incdec_ptr1541;
      var $call1542=_strcat(((_in_extension)|0), $incdec_ptr1541);
      __label__ = 574; break;
    case 574: 
      var $870=HEAP32[((_extension)>>2)];
      var $call1544=_strcat(((_out_string)|0), $870);
      HEAP32[((_outname)>>2)]=((_out_string)|0);
      __label__ = 575; break;
    case 575: 
      var $871=HEAP32[((_outname)>>2)];
      var $call1546=_strlen($871);
      var $sub1547=(($call1546-4)|0);
      var $872=HEAP32[((_outname)>>2)];
      var $arrayidx1548=(($872+$sub1547)|0);
      var $873=HEAP8[($arrayidx1548)];
      var $conv1549=(($873 << 24) >> 24);
      var $cmp1550=(($conv1549)|0)==112;
      if ($cmp1550) { __label__ = 576; break; } else { __label__ = 580; break; }
    case 576: 
      var $874=HEAP32[((_outname)>>2)];
      var $call1553=_strlen($874);
      var $sub1554=(($call1553-3)|0);
      var $875=HEAP32[((_outname)>>2)];
      var $arrayidx1555=(($875+$sub1554)|0);
      var $876=HEAP8[($arrayidx1555)];
      var $conv1556=(($876 << 24) >> 24);
      var $cmp1557=(($conv1556)|0)==112;
      if ($cmp1557) { __label__ = 577; break; } else { __label__ = 580; break; }
    case 577: 
      var $877=HEAP32[((_outname)>>2)];
      var $call1560=_strlen($877);
      var $sub1561=(($call1560-2)|0);
      var $878=HEAP32[((_outname)>>2)];
      var $arrayidx1562=(($878+$sub1561)|0);
      var $879=HEAP8[($arrayidx1562)];
      var $conv1563=(($879 << 24) >> 24);
      var $cmp1564=(($conv1563)|0)==110;
      if ($cmp1564) { __label__ = 578; break; } else { __label__ = 580; break; }
    case 578: 
      var $880=HEAP32[((_outname)>>2)];
      var $call1567=_strlen($880);
      var $sub1568=(($call1567-1)|0);
      var $881=HEAP32[((_outname)>>2)];
      var $arrayidx1569=(($881+$sub1568)|0);
      var $882=HEAP8[($arrayidx1569)];
      var $conv1570=(($882 << 24) >> 24);
      var $cmp1571=(($conv1570)|0)==103;
      if ($cmp1571) { __label__ = 579; break; } else { __label__ = 580; break; }
    case 579: 
      HEAP32[((_premultiply)>>2)]=2;
      var $883=HEAP32[((_read_ptr)>>2)];
      _png_error($883, ((STRING_TABLE.__str173)|0));
      __label__ = 580; break;
    case 580: 
      var $884=HEAP32[((_outname)>>2)];
      var $call1575=_strlen($884);
      var $sub1576=(($call1575-4)|0);
      var $885=HEAP32[((_outname)>>2)];
      var $arrayidx1577=(($885+$sub1576)|0);
      var $886=HEAP8[($arrayidx1577)];
      var $conv1578=(($886 << 24) >> 24);
      var $cmp1579=(($conv1578)|0)==97;
      if ($cmp1579) { __label__ = 581; break; } else { __label__ = 585; break; }
    case 581: 
      var $887=HEAP32[((_outname)>>2)];
      var $call1582=_strlen($887);
      var $sub1583=(($call1582-3)|0);
      var $888=HEAP32[((_outname)>>2)];
      var $arrayidx1584=(($888+$sub1583)|0);
      var $889=HEAP8[($arrayidx1584)];
      var $conv1585=(($889 << 24) >> 24);
      var $cmp1586=(($conv1585)|0)==112;
      if ($cmp1586) { __label__ = 582; break; } else { __label__ = 585; break; }
    case 582: 
      var $890=HEAP32[((_outname)>>2)];
      var $call1589=_strlen($890);
      var $sub1590=(($call1589-2)|0);
      var $891=HEAP32[((_outname)>>2)];
      var $arrayidx1591=(($891+$sub1590)|0);
      var $892=HEAP8[($arrayidx1591)];
      var $conv1592=(($892 << 24) >> 24);
      var $cmp1593=(($conv1592)|0)==110;
      if ($cmp1593) { __label__ = 583; break; } else { __label__ = 585; break; }
    case 583: 
      var $893=HEAP32[((_outname)>>2)];
      var $call1596=_strlen($893);
      var $sub1597=(($call1596-1)|0);
      var $894=HEAP32[((_outname)>>2)];
      var $arrayidx1598=(($894+$sub1597)|0);
      var $895=HEAP8[($arrayidx1598)];
      var $conv1599=(($895 << 24) >> 24);
      var $cmp1600=(($conv1599)|0)==103;
      if ($cmp1600) { __label__ = 584; break; } else { __label__ = 585; break; }
    case 584: 
      HEAP32[((_save_apng_chunks)>>2)]=1;
      __label__ = 585; break;
    case 585: 
      var $896=HEAP32[((_nosave)>>2)];
      var $cmp1604=(($896)|0) < 2;
      if ($cmp1604) { __label__ = 586; break; } else { __label__ = 603; break; }
    case 586: 
      var $897=HEAP32[((_verbose)>>2)];
      var $cmp1607=(($897)|0) > 1;
      if ($cmp1607) { __label__ = 587; break; } else { __label__ = 588; break; }
    case 587: 
      var $898=HEAP32[((_inname)>>2)];
      var $call1610=_printf(((STRING_TABLE.__str174)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$898,tempInt));
      __label__ = 588; break;
    case 588: 
      var $899=HEAP32[((_inname)>>2)];
      var $call1612=_fopen($899, ((STRING_TABLE.__str101)|0));
      HEAP32[((_fpin)>>2)]=$call1612;
      var $cmp1613=(($call1612)|0)==0;
      if ($cmp1613) { __label__ = 589; break; } else { __label__ = 590; break; }
    case 589: 
      var $900=HEAP32[((_stdout)>>2)];
      var $901=HEAP32[((_inname)>>2)];
      var $call1616=_fprintf($900, ((STRING_TABLE.__str102)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$901,tempInt));
      __label__ = 522; break;
    case 590: 
      var $902=HEAP32[((_number_of_open_files)>>2)];
      var $inc1618=(($902+1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$inc1618;
      HEAP32[((_already_crushed)>>2)]=0;
      var $903=HEAP32[((_new_mng)>>2)];
      var $tobool1619=(($903)|0)!=0;
      if ($tobool1619) { __label__ = 591; break; } else { __label__ = 596; break; }
    case 591: 
      var $call1621=_png_create_write_struct_2(((STRING_TABLE.__str72)|0), 0, 2, 0, 0, 4, 6);
      HEAP32[((_mng_ptr)>>2)]=$call1621;
      var $904=HEAP32[((_mng_ptr)>>2)];
      var $cmp1622=(($904)|0)==0;
      if ($cmp1622) { __label__ = 592; break; } else { __label__ = 593; break; }
    case 592: 
      var $905=HEAP32[((_stdout)>>2)];
      var $call1625=_fprintf($905, ((STRING_TABLE.__str175)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 593; break;
    case 593: 
      var $906=HEAP32[((_mngname)>>2)];
      var $call1627=_fopen($906, ((STRING_TABLE.__str176)|0));
      HEAP32[((_mng_out)>>2)]=$call1627;
      var $cmp1628=(($call1627)|0)==0;
      if ($cmp1628) { __label__ = 594; break; } else { __label__ = 595; break; }
    case 594: 
      var $907=HEAP32[((_stdout)>>2)];
      var $908=HEAP32[((_mngname)>>2)];
      var $call1631=_fprintf($907, ((STRING_TABLE.__str177)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$908,tempInt));
      var $909=HEAP32[((_fpin)>>2)];
      var $call1632=_fclose($909);
      HEAP32[((_fpin)>>2)]=0;
      var $910=HEAP32[((_number_of_open_files)>>2)];
      var $dec1633=(($910-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec1633;
      _exit(1);
      throw "Reached an unreachable!"
    case 595: 
      var $911=HEAP32[((_number_of_open_files)>>2)];
      var $inc1635=(($911+1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$inc1635;
      var $912=HEAP32[((_mng_ptr)>>2)];
      var $913=HEAP32[((_mng_out)>>2)];
      _png_init_io($912, $913);
      var $914=HEAP32[((_mng_ptr)>>2)];
      var $915=HEAP32[((_mng_out)>>2)];
      var $916=$915;
      _png_set_write_fn($914, $916, 0, 0);
      __label__ = 596; break;
    case 596: 
      var $917=HEAP32[((_fpin)>>2)];
      var $call1637=_measure_idats($917);
      HEAP32[((((_idat_length)|0))>>2)]=$call1637;
      var $918=HEAP32[((_new_mng)>>2)];
      var $tobool1638=(($918)|0)!=0;
      if ($tobool1638) { __label__ = 597; break; } else { __label__ = 598; break; }
    case 597: 
      _png_destroy_write_struct(_mng_ptr, 0);
      var $919=HEAP32[((_mng_out)>>2)];
      var $call1640=_fclose($919);
      HEAP32[((_mng_out)>>2)]=0;
      var $920=HEAP32[((_number_of_open_files)>>2)];
      var $dec1641=(($920-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec1641;
      __label__ = 598; break;
    case 598: 
      var $921=HEAP32[((_fpin)>>2)];
      var $call1643=_fclose($921);
      HEAP32[((_fpin)>>2)]=0;
      var $922=HEAP32[((_number_of_open_files)>>2)];
      var $dec1644=(($922-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec1644;
      var $923=HEAP32[((_verbose)>>2)];
      var $cmp1645=(($923)|0) > 0;
      if ($cmp1645) { __label__ = 599; break; } else { __label__ = 600; break; }
    case 599: 
      var $924=HEAP32[((_stdout)>>2)];
      var $925=HEAP32[((_inname)>>2)];
      var $call1648=_fprintf($924, ((STRING_TABLE.__str178)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$925,tempInt));
      var $926=HEAP32[((_stdout)>>2)];
      var $927=HEAP32[((((_idat_length)|0))>>2)];
      var $call1649=_fprintf($926, ((STRING_TABLE.__str179)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$927,tempInt));
      var $928=HEAP32[((_stdout)>>2)];
      var $call1650=_fflush($928);
      __label__ = 600; break;
    case 600: 
      var $929=HEAP32[((((_idat_length)|0))>>2)];
      var $cmp1652=(($929)|0)==0;
      if ($cmp1652) { __label__ = 601; break; } else { __label__ = 602; break; }
    case 601: 
      __label__ = 522; break;
    case 602: 
      __label__ = 604; break;
    case 603: 
      HEAP32[((((_idat_length)|0))>>2)]=1;
      __label__ = 604; break;
    case 604: 
      var $930=HEAP32[((_already_crushed)>>2)];
      var $tobool1658=(($930)|0)!=0;
      if ($tobool1658) { __label__ = 605; break; } else { __label__ = 606; break; }
    case 605: 
      var $931=HEAP32[((_stdout)>>2)];
      var $932=HEAP32[((_inname)>>2)];
      var $call1660=_fprintf($931, ((STRING_TABLE.__str180)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$932,tempInt));
      __label__ = 606; break;
    case 606: 
      var $933=HEAP32[((_image_is_immutable)>>2)];
      var $tobool1662=(($933)|0)!=0;
      if ($tobool1662) { __label__ = 607; break; } else { __label__ = 608; break; }
    case 607: 
      var $934=HEAP32[((_stdout)>>2)];
      var $935=HEAP32[((_inname)>>2)];
      var $call1664=_fprintf($934, ((STRING_TABLE.__str181)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$935,tempInt));
      __label__ = 608; break;
    case 608: 
      var $936=HEAP32[((_already_crushed)>>2)];
      var $tobool1666=(($936)|0)!=0;
      if ($tobool1666) { __label__ = 1558; break; } else { __label__ = 609; break; }
    case 609: 
      var $937=HEAP32[((_image_is_immutable)>>2)];
      var $tobool1668=(($937)|0)!=0;
      if ($tobool1668) { __label__ = 1558; break; } else { __label__ = 610; break; }
    case 610: 
      var $938=HEAP32[((_do_color_count)>>2)];
      var $tobool1670=(($938)|0)!=0;
      if ($tobool1670) { __label__ = 611; break; } else { __label__ = 612; break; }
    case 611: 
      var $call1672=_printf(((STRING_TABLE.__str182)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 612; break;
    case 612: 
      var $939=HEAP32[((_plte_len)>>2)];
      var $cmp1674=(($939)|0) > 0;
      if ($cmp1674) { __label__ = 613; break; } else { __label__ = 624; break; }
    case 613: 
      var $940=HEAP32[((_force_output_bit_depth)>>2)];
      var $cmp1677=(($940)|0)==0;
      if ($cmp1677) { __label__ = 614; break; } else { __label__ = 624; break; }
    case 614: 
      var $941=HEAP32[((_plte_len)>>2)];
      var $cmp1680=(($941)|0) <= 2;
      if ($cmp1680) { __label__ = 615; break; } else { __label__ = 616; break; }
    case 615: 
      HEAP32[((_force_output_bit_depth)>>2)]=1;
      __label__ = 623; break;
    case 616: 
      var $942=HEAP32[((_plte_len)>>2)];
      var $cmp1684=(($942)|0) <= 4;
      if ($cmp1684) { __label__ = 617; break; } else { __label__ = 618; break; }
    case 617: 
      HEAP32[((_force_output_bit_depth)>>2)]=2;
      __label__ = 622; break;
    case 618: 
      var $943=HEAP32[((_plte_len)>>2)];
      var $cmp1688=(($943)|0) <= 16;
      if ($cmp1688) { __label__ = 619; break; } else { __label__ = 620; break; }
    case 619: 
      HEAP32[((_force_output_bit_depth)>>2)]=4;
      __label__ = 621; break;
    case 620: 
      HEAP32[((_force_output_bit_depth)>>2)]=8;
      __label__ = 621; break;
    case 621: 
      __label__ = 622; break;
    case 622: 
      __label__ = 623; break;
    case 623: 
      __label__ = 624; break;
    case 624: 
      var $944=HEAP32[((_force_output_bit_depth)>>2)];
      var $cmp1696=(($944)|0)!=0;
      if ($cmp1696) { __label__ = 625; break; } else { __label__ = 631; break; }
    case 625: 
      var $945=HEAP32[((_force_output_bit_depth)>>2)];
      var $cmp1699=(($945)|0)!=1;
      if ($cmp1699) { __label__ = 626; break; } else { __label__ = 631; break; }
    case 626: 
      var $946=HEAP32[((_force_output_bit_depth)>>2)];
      var $cmp1702=(($946)|0)!=2;
      if ($cmp1702) { __label__ = 627; break; } else { __label__ = 631; break; }
    case 627: 
      var $947=HEAP32[((_force_output_bit_depth)>>2)];
      var $cmp1705=(($947)|0)!=4;
      if ($cmp1705) { __label__ = 628; break; } else { __label__ = 631; break; }
    case 628: 
      var $948=HEAP32[((_force_output_bit_depth)>>2)];
      var $cmp1708=(($948)|0)!=8;
      if ($cmp1708) { __label__ = 629; break; } else { __label__ = 631; break; }
    case 629: 
      var $949=HEAP32[((_force_output_bit_depth)>>2)];
      var $cmp1711=(($949)|0)!=16;
      if ($cmp1711) { __label__ = 630; break; } else { __label__ = 631; break; }
    case 630: 
      var $950=HEAP32[((_stdout)>>2)];
      var $951=HEAP32[((_force_output_bit_depth)>>2)];
      var $call1714=_fprintf($950, ((STRING_TABLE.__str183)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$951,tempInt));
      HEAP32[((_force_output_bit_depth)>>2)]=0;
      __label__ = 631; break;
    case 631: 
      var $952=HEAP32[((_force_output_color_type)>>2)];
      var $cmp1716=(($952)|0)!=8;
      if ($cmp1716) { __label__ = 632; break; } else { __label__ = 638; break; }
    case 632: 
      var $953=HEAP32[((_force_output_color_type)>>2)];
      var $cmp1719=(($953)|0)!=0;
      if ($cmp1719) { __label__ = 633; break; } else { __label__ = 638; break; }
    case 633: 
      var $954=HEAP32[((_force_output_color_type)>>2)];
      var $cmp1722=(($954)|0)!=2;
      if ($cmp1722) { __label__ = 634; break; } else { __label__ = 638; break; }
    case 634: 
      var $955=HEAP32[((_force_output_color_type)>>2)];
      var $cmp1725=(($955)|0)!=3;
      if ($cmp1725) { __label__ = 635; break; } else { __label__ = 638; break; }
    case 635: 
      var $956=HEAP32[((_force_output_color_type)>>2)];
      var $cmp1728=(($956)|0)!=4;
      if ($cmp1728) { __label__ = 636; break; } else { __label__ = 638; break; }
    case 636: 
      var $957=HEAP32[((_force_output_color_type)>>2)];
      var $cmp1731=(($957)|0)!=6;
      if ($cmp1731) { __label__ = 637; break; } else { __label__ = 638; break; }
    case 637: 
      var $958=HEAP32[((_stdout)>>2)];
      var $959=HEAP32[((_force_output_color_type)>>2)];
      var $call1734=_fprintf($958, ((STRING_TABLE.__str184)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$959,tempInt));
      HEAP32[((_force_output_color_type)>>2)]=8;
      __label__ = 638; break;
    case 638: 
      var $960=HEAP32[((_force_output_color_type)>>2)];
      HEAP32[((_output_color_type)>>2)]=$960;
      var $961=HEAP32[((_force_output_bit_depth)>>2)];
      HEAP32[((_output_bit_depth)>>2)]=$961;
      var $962=HEAP32[((_methods_specified)>>2)];
      var $tobool1736=(($962)|0)!=0;
      if ($tobool1736) { __label__ = 639; break; } else { __label__ = 640; break; }
    case 639: 
      var $arrayidx1738=(($try_method)|0);
      var $963=HEAP32[(($arrayidx1738)>>2)];
      var $cmp1739=(($963)|0)==0;
      if ($cmp1739) { __label__ = 640; break; } else { __label__ = 645; break; }
    case 640: 
      $i=1;
      __label__ = 641; break;
    case 641: 
      var $964=$i;
      var $cmp1743=(($964)|0) <= 10;
      if ($cmp1743) { __label__ = 642; break; } else { __label__ = 644; break; }
    case 642: 
      var $965=$i;
      var $arrayidx1746=(($try_method+($965<<2))|0);
      HEAP32[(($arrayidx1746)>>2)]=0;
      __label__ = 643; break;
    case 643: 
      var $966=$i;
      var $inc1748=(($966+1)|0);
      $i=$inc1748;
      __label__ = 641; break;
    case 644: 
      var $arrayidx1750=(($try_method)|0);
      var $967=HEAP32[(($arrayidx1750)>>2)];
      var $arrayidx1751=(($try_method+24)|0);
      HEAP32[(($arrayidx1751)>>2)]=$967;
      __label__ = 645; break;
    case 645: 
      HEAP32[((_best_of_three)>>2)]=1;
      var $968=HEAP32[((_verbose)>>2)];
      var $cmp1753=(($968)|0) > 1;
      if ($cmp1753) { __label__ = 646; break; } else { __label__ = 647; break; }
    case 646: 
      var $call1756=_printf(((STRING_TABLE.__str185)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=200,tempInt));
      __label__ = 647; break;
    case 647: 
      HEAP32[((_trial)>>2)]=1;
      __label__ = 648; break;
    case 648: 
      var $969=HEAP32[((_trial)>>2)];
      var $cmp1759=(($969)|0) <= 200;
      if ($cmp1759) { __label__ = 649; break; } else { __label__ = 1555; break; }
    case 649: 
      var $970=HEAP32[((_trial)>>2)];
      var $arrayidx1762=((_idat_length+($970<<2))|0);
      HEAP32[(($arrayidx1762)>>2)]=-1;
      var $971=HEAP32[((_trial)>>2)];
      var $cmp1763=(($971)|0)==200;
      if ($cmp1763) { __label__ = 650; break; } else { __label__ = 696; break; }
    case 650: 
      HEAP32[((_best)>>2)]=0;
      $best_length=-1;
      var $972=HEAP32[((_things_have_changed)>>2)];
      $j=$972;
      __label__ = 651; break;
    case 651: 
      var $973=$j;
      var $cmp1767=(($973)|0) < 200;
      if ($cmp1767) { __label__ = 652; break; } else { __label__ = 659; break; }
    case 652: 
      var $974=HEAP32[((_best)>>2)];
      var $cmp1770=(($974)|0)==0;
      if ($cmp1770) { __label__ = 653; break; } else { __label__ = 655; break; }
    case 653: 
      var $975=$best_length;
      var $976=$j;
      var $arrayidx1773=((_idat_length+($976<<2))|0);
      var $977=HEAP32[(($arrayidx1773)>>2)];
      var $cmp1774=(($975)|0)==(($977)|0);
      if ($cmp1774) { __label__ = 654; break; } else { __label__ = 655; break; }
    case 654: 
      var $978=$j;
      HEAP32[((_best)>>2)]=$978;
      __label__ = 655; break;
    case 655: 
      var $979=$best_length;
      var $980=$j;
      var $arrayidx1778=((_idat_length+($980<<2))|0);
      var $981=HEAPU32[(($arrayidx1778)>>2)];
      var $cmp1779=(($979)>>>0) > (($981)>>>0);
      if ($cmp1779) { __label__ = 656; break; } else { __label__ = 657; break; }
    case 656: 
      var $982=$j;
      var $arrayidx1782=((_idat_length+($982<<2))|0);
      var $983=HEAP32[(($arrayidx1782)>>2)];
      $best_length=$983;
      var $984=$j;
      HEAP32[((_best)>>2)]=$984;
      __label__ = 657; break;
    case 657: 
      __label__ = 658; break;
    case 658: 
      var $985=$j;
      var $inc1785=(($985+1)|0);
      $j=$inc1785;
      __label__ = 651; break;
    case 659: 
      var $986=HEAP32[((_image_is_immutable)>>2)];
      var $tobool1787=(($986)|0)!=0;
      if ($tobool1787) { __label__ = 664; break; } else { __label__ = 660; break; }
    case 660: 
      var $987=HEAP32[((_best)>>2)];
      var $arrayidx1789=((_idat_length+($987<<2))|0);
      var $988=HEAP32[(($arrayidx1789)>>2)];
      var $989=HEAP32[((((_idat_length)|0))>>2)];
      var $cmp1790=(($988)|0)==(($989)|0);
      if ($cmp1790) { __label__ = 661; break; } else { __label__ = 683; break; }
    case 661: 
      var $990=HEAP32[((_things_have_changed)>>2)];
      var $cmp1793=(($990)|0)==0;
      if ($cmp1793) { __label__ = 662; break; } else { __label__ = 683; break; }
    case 662: 
      var $991=HEAP32[((_best)>>2)];
      var $arrayidx1796=((_idat_length+($991<<2))|0);
      var $992=HEAP32[(($arrayidx1796)>>2)];
      var $993=HEAP32[((_final_method)>>2)];
      var $arrayidx1797=((_idat_length+($993<<2))|0);
      var $994=HEAP32[(($arrayidx1797)>>2)];
      var $cmp1798=(($992)|0)!=(($994)|0);
      if ($cmp1798) { __label__ = 663; break; } else { __label__ = 683; break; }
    case 663: 
      var $995=HEAP32[((_nosave)>>2)];
      var $cmp1801=(($995)|0)==0;
      if ($cmp1801) { __label__ = 664; break; } else { __label__ = 683; break; }
    case 664: 
      var $996=HEAP32[((_verbose)>>2)];
      var $cmp1804=(($996)|0) > 2;
      if ($cmp1804) { __label__ = 665; break; } else { __label__ = 666; break; }
    case 665: 
      var $call1807=_printf(((STRING_TABLE.__str186)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 666; break;
    case 666: 
      _pngcrush_pause();
      var $997=HEAP32[((_inname)>>2)];
      var $call1809=_fopen($997, ((STRING_TABLE.__str101)|0));
      HEAP32[((_fpin)>>2)]=$call1809;
      var $cmp1810=(($call1809)|0)==0;
      if ($cmp1810) { __label__ = 667; break; } else { __label__ = 668; break; }
    case 667: 
      var $998=HEAP32[((_stdout)>>2)];
      var $999=HEAP32[((_inname)>>2)];
      var $call1813=_fprintf($998, ((STRING_TABLE.__str187)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$999,tempInt));
      __label__ = 1554; break;
    case 668: 
      var $1000=HEAP32[((_number_of_open_files)>>2)];
      var $inc1815=(($1000+1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$inc1815;
      var $1001=HEAP32[((_outname)>>2)];
      var $call1816=_fopen($1001, ((STRING_TABLE.__str176)|0));
      HEAP32[((_fpout)>>2)]=$call1816;
      var $cmp1817=(($call1816)|0)==0;
      if ($cmp1817) { __label__ = 669; break; } else { __label__ = 670; break; }
    case 669: 
      var $1002=HEAP32[((_stdout)>>2)];
      var $1003=HEAP32[((_outname)>>2)];
      var $call1820=_fprintf($1002, ((STRING_TABLE.__str177)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1003,tempInt));
      var $1004=HEAP32[((_fpin)>>2)];
      var $call1821=_fclose($1004);
      HEAP32[((_fpin)>>2)]=0;
      var $1005=HEAP32[((_number_of_open_files)>>2)];
      var $dec1822=(($1005-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec1822;
      _exit(1);
      throw "Reached an unreachable!"
    case 670: 
      var $1006=HEAP32[((_number_of_open_files)>>2)];
      var $inc1824=(($1006+1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$inc1824;
      var $1007=HEAP32[((_verbose)>>2)];
      var $cmp1825=(($1007)|0) > 2;
      if ($cmp1825) { __label__ = 671; break; } else { __label__ = 672; break; }
    case 671: 
      var $1008=HEAP32[((_things_have_changed)>>2)];
      var $call1828=_printf(((STRING_TABLE.__str188)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1008,tempInt));
      __label__ = 672; break;
    case 672: 
      __label__ = 673; break;
    case 673: 
      var $1009=HEAP32[((_fpin)>>2)];
      var $call1832=_fread(((_buffer)|0), 1, 1, $1009);
      $num_in1831=$call1832;
      var $1010=$num_in1831;
      var $tobool1833=(($1010)|0)!=0;
      if ($tobool1833) { __label__ = 675; break; } else { __label__ = 674; break; }
    case 674: 
      __label__ = 680; break;
    case 675: 
      var $1011=HEAP32[((_fpout)>>2)];
      var $call1836=_fwrite(((_buffer)|0), 1, 1, $1011);
      $num_out=$call1836;
      var $1012=$num_out;
      var $1013=$num_in1831;
      var $cmp1837=(($1012)|0)!=(($1013)|0);
      if ($cmp1837) { __label__ = 676; break; } else { __label__ = 679; break; }
    case 676: 
      var $1014=HEAP32[((_verbose)>>2)];
      var $cmp1840=(($1014)|0) > 2;
      if ($cmp1840) { __label__ = 677; break; } else { __label__ = 678; break; }
    case 677: 
      var $call1843=_printf(((STRING_TABLE.__str189)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 678; break;
    case 678: 
      __label__ = 679; break;
    case 679: 
      __label__ = 673; break;
    case 680: 
      var $1015=HEAP32[((_verbose)>>2)];
      var $cmp1847=(($1015)|0) > 2;
      if ($cmp1847) { __label__ = 681; break; } else { __label__ = 682; break; }
    case 681: 
      var $call1850=_printf(((STRING_TABLE.__str190)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 682; break;
    case 682: 
      _pngcrush_pause();
      var $1016=HEAP32[((_fpin)>>2)];
      var $call1852=_fclose($1016);
      HEAP32[((_fpin)>>2)]=0;
      var $1017=HEAP32[((_number_of_open_files)>>2)];
      var $dec1853=(($1017-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec1853;
      var $1018=HEAP32[((_fpout)>>2)];
      var $call1854=_fclose($1018);
      HEAP32[((_fpout)>>2)]=0;
      var $1019=HEAP32[((_number_of_open_files)>>2)];
      var $dec1855=(($1019-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec1855;
      __label__ = 1555; break;
    case 683: 
      var $1020=HEAP32[((_best)>>2)];
      var $arrayidx1857=((_idat_length+($1020<<2))|0);
      var $1021=HEAP32[(($arrayidx1857)>>2)];
      var $1022=HEAP32[((_final_method)>>2)];
      var $arrayidx1858=((_idat_length+($1022<<2))|0);
      var $1023=HEAP32[(($arrayidx1858)>>2)];
      var $cmp1859=(($1021)|0)==(($1023)|0);
      if ($cmp1859) { __label__ = 684; break; } else { __label__ = 685; break; }
    case 684: 
      __label__ = 1555; break;
    case 685: 
      var $1024=HEAP32[((_best)>>2)];
      var $arrayidx1863=(($fm+($1024<<2))|0);
      var $1025=HEAP32[(($arrayidx1863)>>2)];
      HEAP32[((_filter_type)>>2)]=$1025;
      var $1026=HEAP32[((_best)>>2)];
      var $arrayidx1864=(($lv+($1026<<2))|0);
      var $1027=HEAP32[(($arrayidx1864)>>2)];
      HEAP32[((_zlib_level)>>2)]=$1027;
      var $1028=HEAP32[((_best)>>2)];
      var $arrayidx1865=(($zs+($1028<<2))|0);
      var $1029=HEAP32[(($arrayidx1865)>>2)];
      var $cmp1866=(($1029)|0)==1;
      if ($cmp1866) { __label__ = 686; break; } else { __label__ = 687; break; }
    case 686: 
      HEAP32[((_z_strategy)>>2)]=1;
      __label__ = 694; break;
    case 687: 
      var $1030=HEAP32[((_best)>>2)];
      var $arrayidx1870=(($zs+($1030<<2))|0);
      var $1031=HEAP32[(($arrayidx1870)>>2)];
      var $cmp1871=(($1031)|0)==2;
      if ($cmp1871) { __label__ = 688; break; } else { __label__ = 689; break; }
    case 688: 
      HEAP32[((_z_strategy)>>2)]=2;
      __label__ = 693; break;
    case 689: 
      var $1032=HEAP32[((_best)>>2)];
      var $arrayidx1875=(($zs+($1032<<2))|0);
      var $1033=HEAP32[(($arrayidx1875)>>2)];
      var $cmp1876=(($1033)|0)==3;
      if ($cmp1876) { __label__ = 690; break; } else { __label__ = 691; break; }
    case 690: 
      HEAP32[((_z_strategy)>>2)]=3;
      __label__ = 692; break;
    case 691: 
      HEAP32[((_z_strategy)>>2)]=0;
      __label__ = 692; break;
    case 692: 
      __label__ = 693; break;
    case 693: 
      __label__ = 694; break;
    case 694: 
      __label__ = 695; break;
    case 695: 
      __label__ = 740; break;
    case 696: 
      var $1034=HEAP32[((_trial)>>2)];
      var $cmp1885=(($1034)|0) > 2;
      if ($cmp1885) { __label__ = 697; break; } else { __label__ = 700; break; }
    case 697: 
      var $1035=HEAP32[((_trial)>>2)];
      var $cmp1888=(($1035)|0) < 5;
      if ($cmp1888) { __label__ = 698; break; } else { __label__ = 700; break; }
    case 698: 
      var $1036=HEAP32[((_trial)>>2)];
      var $sub1891=(($1036-1)|0);
      var $arrayidx1892=((_idat_length+($sub1891<<2))|0);
      var $1037=HEAPU32[(($arrayidx1892)>>2)];
      var $1038=HEAP32[((_best_of_three)>>2)];
      var $arrayidx1893=((_idat_length+($1038<<2))|0);
      var $1039=HEAPU32[(($arrayidx1893)>>2)];
      var $cmp1894=(($1037)>>>0) < (($1039)>>>0);
      if ($cmp1894) { __label__ = 699; break; } else { __label__ = 700; break; }
    case 699: 
      var $1040=HEAP32[((_trial)>>2)];
      var $sub1897=(($1040-1)|0);
      HEAP32[((_best_of_three)>>2)]=$sub1897;
      __label__ = 700; break;
    case 700: 
      var $1041=HEAP32[((_trial)>>2)];
      var $arrayidx1899=(($try_method+($1041<<2))|0);
      var $1042=HEAP32[(($arrayidx1899)>>2)];
      var $tobool1900=(($1042)|0)!=0;
      if ($tobool1900) { __label__ = 701; break; } else { __label__ = 704; break; }
    case 701: 
      var $1043=HEAP32[((_verbose)>>2)];
      var $cmp1902=(($1043)|0) > 2;
      if ($cmp1902) { __label__ = 702; break; } else { __label__ = 703; break; }
    case 702: 
      var $1044=HEAP32[((_trial)>>2)];
      var $call1905=_printf(((STRING_TABLE.__str191)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1044,tempInt));
      __label__ = 703; break;
    case 703: 
      __label__ = 1554; break;
    case 704: 
      var $1045=HEAP32[((_methods_specified)>>2)];
      var $tobool1908=(($1045)|0)!=0;
      if ($tobool1908) { __label__ = 726; break; } else { __label__ = 705; break; }
    case 705: 
      var $arrayidx1910=(($try_method)|0);
      var $1046=HEAP32[(($arrayidx1910)>>2)];
      var $tobool1911=(($1046)|0)!=0;
      if ($tobool1911) { __label__ = 706; break; } else { __label__ = 726; break; }
    case 706: 
      var $1047=HEAP32[((_trial)>>2)];
      var $cmp1913=(($1047)|0)==4;
      if ($cmp1913) { __label__ = 708; break; } else { __label__ = 707; break; }
    case 707: 
      var $1048=HEAP32[((_trial)>>2)];
      var $cmp1916=(($1048)|0)==7;
      if ($cmp1916) { __label__ = 708; break; } else { __label__ = 712; break; }
    case 708: 
      var $1049=HEAP32[((_best_of_three)>>2)];
      var $cmp1919=(($1049)|0)!=1;
      if ($cmp1919) { __label__ = 709; break; } else { __label__ = 712; break; }
    case 709: 
      var $1050=HEAP32[((_verbose)>>2)];
      var $cmp1922=(($1050)|0) > 2;
      if ($cmp1922) { __label__ = 710; break; } else { __label__ = 711; break; }
    case 710: 
      var $1051=HEAP32[((_trial)>>2)];
      var $call1925=_printf(((STRING_TABLE.__str192)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1051,tempInt));
      __label__ = 711; break;
    case 711: 
      __label__ = 1554; break;
    case 712: 
      var $1052=HEAP32[((_trial)>>2)];
      var $cmp1928=(($1052)|0)==5;
      if ($cmp1928) { __label__ = 714; break; } else { __label__ = 713; break; }
    case 713: 
      var $1053=HEAP32[((_trial)>>2)];
      var $cmp1931=(($1053)|0)==8;
      if ($cmp1931) { __label__ = 714; break; } else { __label__ = 718; break; }
    case 714: 
      var $1054=HEAP32[((_best_of_three)>>2)];
      var $cmp1934=(($1054)|0)!=2;
      if ($cmp1934) { __label__ = 715; break; } else { __label__ = 718; break; }
    case 715: 
      var $1055=HEAP32[((_verbose)>>2)];
      var $cmp1937=(($1055)|0) > 2;
      if ($cmp1937) { __label__ = 716; break; } else { __label__ = 717; break; }
    case 716: 
      var $1056=HEAP32[((_trial)>>2)];
      var $call1940=_printf(((STRING_TABLE.__str192)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1056,tempInt));
      __label__ = 717; break;
    case 717: 
      __label__ = 1554; break;
    case 718: 
      var $1057=HEAP32[((_trial)>>2)];
      var $cmp1943=(($1057)|0)==6;
      if ($cmp1943) { __label__ = 721; break; } else { __label__ = 719; break; }
    case 719: 
      var $1058=HEAP32[((_trial)>>2)];
      var $cmp1946=(($1058)|0)==9;
      if ($cmp1946) { __label__ = 721; break; } else { __label__ = 720; break; }
    case 720: 
      var $1059=HEAP32[((_trial)>>2)];
      var $cmp1949=(($1059)|0)==10;
      if ($cmp1949) { __label__ = 721; break; } else { __label__ = 725; break; }
    case 721: 
      var $1060=HEAP32[((_best_of_three)>>2)];
      var $cmp1952=(($1060)|0)!=3;
      if ($cmp1952) { __label__ = 722; break; } else { __label__ = 725; break; }
    case 722: 
      var $1061=HEAP32[((_verbose)>>2)];
      var $cmp1955=(($1061)|0) > 2;
      if ($cmp1955) { __label__ = 723; break; } else { __label__ = 724; break; }
    case 723: 
      var $1062=HEAP32[((_trial)>>2)];
      var $call1958=_printf(((STRING_TABLE.__str192)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1062,tempInt));
      __label__ = 724; break;
    case 724: 
      __label__ = 1554; break;
    case 725: 
      __label__ = 726; break;
    case 726: 
      var $1063=HEAP32[((_trial)>>2)];
      var $arrayidx1962=(($fm+($1063<<2))|0);
      var $1064=HEAP32[(($arrayidx1962)>>2)];
      HEAP32[((_filter_type)>>2)]=$1064;
      var $1065=HEAP32[((_trial)>>2)];
      var $arrayidx1963=(($lv+($1065<<2))|0);
      var $1066=HEAP32[(($arrayidx1963)>>2)];
      HEAP32[((_zlib_level)>>2)]=$1066;
      var $1067=HEAP32[((_trial)>>2)];
      var $arrayidx1964=(($zs+($1067<<2))|0);
      var $1068=HEAP32[(($arrayidx1964)>>2)];
      var $cmp1965=(($1068)|0)==1;
      if ($cmp1965) { __label__ = 727; break; } else { __label__ = 728; break; }
    case 727: 
      HEAP32[((_z_strategy)>>2)]=1;
      __label__ = 735; break;
    case 728: 
      var $1069=HEAP32[((_trial)>>2)];
      var $arrayidx1969=(($zs+($1069<<2))|0);
      var $1070=HEAP32[(($arrayidx1969)>>2)];
      var $cmp1970=(($1070)|0)==2;
      if ($cmp1970) { __label__ = 729; break; } else { __label__ = 730; break; }
    case 729: 
      HEAP32[((_z_strategy)>>2)]=2;
      __label__ = 734; break;
    case 730: 
      var $1071=HEAP32[((_trial)>>2)];
      var $arrayidx1974=(($zs+($1071<<2))|0);
      var $1072=HEAP32[(($arrayidx1974)>>2)];
      var $cmp1975=(($1072)|0)==3;
      if ($cmp1975) { __label__ = 731; break; } else { __label__ = 732; break; }
    case 731: 
      HEAP32[((_z_strategy)>>2)]=3;
      __label__ = 733; break;
    case 732: 
      HEAP32[((_z_strategy)>>2)]=0;
      __label__ = 733; break;
    case 733: 
      __label__ = 734; break;
    case 734: 
      __label__ = 735; break;
    case 735: 
      var $1073=HEAP32[((_trial)>>2)];
      HEAP32[((_final_method)>>2)]=$1073;
      var $1074=HEAP32[((_nosave)>>2)];
      var $tobool1982=(($1074)|0)!=0;
      if ($tobool1982) { __label__ = 739; break; } else { __label__ = 736; break; }
    case 736: 
      var $1075=HEAP32[((_verbose)>>2)];
      var $cmp1984=(($1075)|0) > 2;
      if ($cmp1984) { __label__ = 737; break; } else { __label__ = 738; break; }
    case 737: 
      var $1076=HEAP32[((_trial)>>2)];
      var $1077=HEAP32[((_filter_type)>>2)];
      var $1078=HEAP32[((_z_strategy)>>2)];
      var $1079=HEAP32[((_zlib_level)>>2)];
      var $call1987=_printf(((STRING_TABLE.__str193)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1076,HEAP32[((tempInt+4)>>2)]=$1077,HEAP32[((tempInt+8)>>2)]=$1078,HEAP32[((tempInt+12)>>2)]=$1079,tempInt));
      __label__ = 738; break;
    case 738: 
      __label__ = 739; break;
    case 739: 
      __label__ = 740; break;
    case 740: 
      var $1080=HEAP32[((_verbose)>>2)];
      var $cmp1991=(($1080)|0) > 2;
      if ($cmp1991) { __label__ = 741; break; } else { __label__ = 742; break; }
    case 741: 
      var $call1994=_printf(((STRING_TABLE.__str194)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 742; break;
    case 742: 
      _pngcrush_pause();
      var $1081=HEAP32[((_inname)>>2)];
      var $call1996=_fopen($1081, ((STRING_TABLE.__str101)|0));
      HEAP32[((_fpin)>>2)]=$call1996;
      var $cmp1997=(($call1996)|0)==0;
      if ($cmp1997) { __label__ = 743; break; } else { __label__ = 744; break; }
    case 743: 
      var $1082=HEAP32[((_stdout)>>2)];
      var $1083=HEAP32[((_inname)>>2)];
      var $call2000=_fprintf($1082, ((STRING_TABLE.__str187)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1083,tempInt));
      __label__ = 1554; break;
    case 744: 
      var $1084=HEAP32[((_number_of_open_files)>>2)];
      var $inc2002=(($1084+1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$inc2002;
      var $1085=HEAP32[((_nosave)>>2)];
      var $cmp2003=(($1085)|0)==0;
      if ($cmp2003) { __label__ = 745; break; } else { __label__ = 757; break; }
    case 745: 
      var $1086=HEAP32[((_first_trial)>>2)];
      var $tobool2006=(($1086)|0)!=0;
      if ($tobool2006) { __label__ = 746; break; } else { __label__ = 754; break; }
    case 746: 
      var $1087=HEAP32[((_nofilecheck)>>2)];
      var $tobool2008=(($1087)|0)!=0;
      if ($tobool2008) { __label__ = 754; break; } else { __label__ = 747; break; }
    case 747: 
      var $1088=HEAP32[((_inname)>>2)];
      var $call2010=_stat($1088, $stat_in);
      var $cmp2011=(($call2010)|0)==0;
      if ($cmp2011) { __label__ = 748; break; } else { __label__ = 754; break; }
    case 748: 
      var $1089=HEAP32[((_outname)>>2)];
      var $call2014=_stat($1089, $stat_out);
      var $cmp2015=(($call2014)|0)==0;
      if ($cmp2015) { __label__ = 749; break; } else { __label__ = 754; break; }
    case 749: 
      var $st_ino=(($stat_in+4)|0);
      var $1090=HEAP32[(($st_ino)>>2)];
      var $st_ino2018=(($stat_out+4)|0);
      var $1091=HEAP32[(($st_ino2018)>>2)];
      var $cmp2019=(($1090)|0)==(($1091)|0);
      if ($cmp2019) { __label__ = 750; break; } else { __label__ = 754; break; }
    case 750: 
      var $st_dev=(($stat_in)|0);
      var $1092=HEAP32[(($st_dev)>>2)];
      var $st_dev2022=(($stat_out)|0);
      var $1093=HEAP32[(($st_dev2022)>>2)];
      var $cmp2023=(($1092)|0)==(($1093)|0);
      if ($cmp2023) { __label__ = 751; break; } else { __label__ = 754; break; }
    case 751: 
      var $1094=HEAP32[((_stdout)>>2)];
      var $1095=HEAP32[((_outname)>>2)];
      var $call2026=_fprintf($1094, ((STRING_TABLE.__str195)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1095,tempInt));
      var $1096=HEAP32[((_verbose)>>2)];
      var $cmp2027=(($1096)|0) > 1;
      if ($cmp2027) { __label__ = 752; break; } else { __label__ = 753; break; }
    case 752: 
      var $st_ino2030=(($stat_in+4)|0);
      var $1097=HEAP32[(($st_ino2030)>>2)];
      var $st_size=(($stat_in+28)|0);
      var $1098=HEAP32[(($st_size)>>2)];
      var $call2031=_printf(((STRING_TABLE.__str196)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1097,HEAP32[((tempInt+4)>>2)]=$1098,tempInt));
      __label__ = 753; break;
    case 753: 
      var $1099=HEAP32[((_fpin)>>2)];
      var $call2033=_fclose($1099);
      HEAP32[((_fpin)>>2)]=0;
      var $1100=HEAP32[((_number_of_open_files)>>2)];
      var $dec2034=(($1100-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec2034;
      _exit(1);
      throw "Reached an unreachable!"
    case 754: 
      var $1101=HEAP32[((_outname)>>2)];
      var $call2036=_fopen($1101, ((STRING_TABLE.__str176)|0));
      HEAP32[((_fpout)>>2)]=$call2036;
      var $cmp2037=(($call2036)|0)==0;
      if ($cmp2037) { __label__ = 755; break; } else { __label__ = 756; break; }
    case 755: 
      var $1102=HEAP32[((_stdout)>>2)];
      var $1103=HEAP32[((_outname)>>2)];
      var $call2040=_fprintf($1102, ((STRING_TABLE.__str177)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1103,tempInt));
      var $1104=HEAP32[((_fpin)>>2)];
      var $call2041=_fclose($1104);
      HEAP32[((_fpin)>>2)]=0;
      var $1105=HEAP32[((_number_of_open_files)>>2)];
      var $dec2042=(($1105-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec2042;
      _exit(1);
      throw "Reached an unreachable!"
    case 756: 
      var $1106=HEAP32[((_number_of_open_files)>>2)];
      var $inc2044=(($1106+1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$inc2044;
      __label__ = 757; break;
    case 757: 
      var $1107=HEAP32[((_verbose)>>2)];
      var $cmp2046=(($1107)|0) > 2;
      if ($cmp2046) { __label__ = 758; break; } else { __label__ = 759; break; }
    case 758: 
      var $call2049=_printf(((STRING_TABLE.__str197)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 759; break;
    case 759: 
      _pngcrush_pause();
      var $1108=HEAP32[((((_the_exception_context)|0))>>2)];
      $exception__prev=$1108;
      HEAP32[((((_the_exception_context)|0))>>2)]=$exception__env;
      var $arraydecay2051=(($exception__env)|0);
      var $call2052=(HEAP32[(($arraydecay2051)>>2)]=__label__, 0);
      __label__ = 1610; break;
    case 1610: 
      var $cmp2053=(($call2052)|0)==0;
      if ($cmp2053) { __label__ = 760; break; } else { __label__ = 1524; break; }
    case 760: 
      __label__ = 761; break;
    case 761: 
      var $1109=HEAP32[((_verbose)>>2)];
      var $cmp2056=(($1109)|0) > 1;
      if ($cmp2056) { __label__ = 762; break; } else { __label__ = 763; break; }
    case 762: 
      var $call2059=_printf(((STRING_TABLE.__str198)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 763; break;
    case 763: 
      var $call2061=_png_create_read_struct_2(((STRING_TABLE.__str72)|0), 0, 2, 0, 0, 4, 6);
      HEAP32[((_read_ptr)>>2)]=$call2061;
      var $1110=HEAP32[((_read_ptr)>>2)];
      var $cmp2062=(($1110)|0)==0;
      if ($cmp2062) { __label__ = 764; break; } else { __label__ = 767; break; }
    case 764: 
      __label__ = 765; break;
    case 765: 
      HEAP32[((((_the_exception_context+8)|0))>>2)]=((STRING_TABLE.__str199)|0);
      __label__ = 766; break;
    case 766: 
      var $1111=HEAP32[((((_the_exception_context)|0))>>2)];
      var $arraydecay2067=(($1111)|0);
      _longjmp($arraydecay2067, 1);
      throw "Reached an unreachable!"
    case 767: 
      var $1112=HEAP32[((_no_limits)>>2)];
      var $cmp2069=(($1112)|0)==0;
      if ($cmp2069) { __label__ = 768; break; } else { __label__ = 769; break; }
    case 768: 
      var $1113=HEAP32[((_read_ptr)>>2)];
      _png_set_chunk_cache_max($1113, 500);
      var $1114=HEAP32[((_read_ptr)>>2)];
      _png_set_user_limits($1114, 500000, 500000);
      var $1115=HEAP32[((_read_ptr)>>2)];
      _png_set_chunk_cache_max($1115, 500);
      var $1116=HEAP32[((_read_ptr)>>2)];
      _png_set_chunk_malloc_max($1116, 2000000);
      __label__ = 769; break;
    case 769: 
      var $1117=HEAP32[((_nosave)>>2)];
      var $cmp2073=(($1117)|0)==0;
      if ($cmp2073) { __label__ = 770; break; } else { __label__ = 775; break; }
    case 770: 
      var $call2076=_png_create_write_struct_2(((STRING_TABLE.__str72)|0), 0, 2, 0, 0, 4, 6);
      HEAP32[((_write_ptr)>>2)]=$call2076;
      var $1118=HEAP32[((_write_ptr)>>2)];
      var $cmp2077=(($1118)|0)==0;
      if ($cmp2077) { __label__ = 771; break; } else { __label__ = 774; break; }
    case 771: 
      __label__ = 772; break;
    case 772: 
      HEAP32[((((_the_exception_context+8)|0))>>2)]=((STRING_TABLE.__str200)|0);
      __label__ = 773; break;
    case 773: 
      var $1119=HEAP32[((((_the_exception_context)|0))>>2)];
      var $arraydecay2082=(($1119)|0);
      _longjmp($arraydecay2082, 1);
      throw "Reached an unreachable!"
    case 774: 
      __label__ = 775; break;
    case 775: 
      var $1120=HEAP32[((_verbose)>>2)];
      var $cmp2085=(($1120)|0) > 1;
      if ($cmp2085) { __label__ = 776; break; } else { __label__ = 777; break; }
    case 776: 
      var $call2088=_printf(((STRING_TABLE.__str201)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 777; break;
    case 777: 
      var $1121=HEAP32[((_read_ptr)>>2)];
      var $call2090=_png_create_info_struct($1121);
      HEAP32[((_read_info_ptr)>>2)]=$call2090;
      var $1122=HEAP32[((_read_info_ptr)>>2)];
      var $cmp2091=(($1122)|0)==0;
      if ($cmp2091) { __label__ = 778; break; } else { __label__ = 781; break; }
    case 778: 
      __label__ = 779; break;
    case 779: 
      HEAP32[((((_the_exception_context+8)|0))>>2)]=((STRING_TABLE.__str202)|0);
      __label__ = 780; break;
    case 780: 
      var $1123=HEAP32[((((_the_exception_context)|0))>>2)];
      var $arraydecay2096=(($1123)|0);
      _longjmp($arraydecay2096, 1);
      throw "Reached an unreachable!"
    case 781: 
      var $1124=HEAP32[((_read_ptr)>>2)];
      var $call2098=_png_create_info_struct($1124);
      HEAP32[((_end_info_ptr)>>2)]=$call2098;
      var $1125=HEAP32[((_end_info_ptr)>>2)];
      var $cmp2099=(($1125)|0)==0;
      if ($cmp2099) { __label__ = 782; break; } else { __label__ = 785; break; }
    case 782: 
      __label__ = 783; break;
    case 783: 
      HEAP32[((((_the_exception_context+8)|0))>>2)]=((STRING_TABLE.__str203)|0);
      __label__ = 784; break;
    case 784: 
      var $1126=HEAP32[((((_the_exception_context)|0))>>2)];
      var $arraydecay2104=(($1126)|0);
      _longjmp($arraydecay2104, 1);
      throw "Reached an unreachable!"
    case 785: 
      var $1127=HEAP32[((_nosave)>>2)];
      var $cmp2106=(($1127)|0)==0;
      if ($cmp2106) { __label__ = 786; break; } else { __label__ = 795; break; }
    case 786: 
      var $1128=HEAP32[((_write_ptr)>>2)];
      var $call2109=_png_create_info_struct($1128);
      HEAP32[((_write_info_ptr)>>2)]=$call2109;
      var $1129=HEAP32[((_write_info_ptr)>>2)];
      var $cmp2110=(($1129)|0)==0;
      if ($cmp2110) { __label__ = 787; break; } else { __label__ = 790; break; }
    case 787: 
      __label__ = 788; break;
    case 788: 
      HEAP32[((((_the_exception_context+8)|0))>>2)]=((STRING_TABLE.__str204)|0);
      __label__ = 789; break;
    case 789: 
      var $1130=HEAP32[((((_the_exception_context)|0))>>2)];
      var $arraydecay2115=(($1130)|0);
      _longjmp($arraydecay2115, 1);
      throw "Reached an unreachable!"
    case 790: 
      var $1131=HEAP32[((_write_ptr)>>2)];
      var $call2117=_png_create_info_struct($1131);
      HEAP32[((_write_end_info_ptr)>>2)]=$call2117;
      var $1132=HEAP32[((_write_end_info_ptr)>>2)];
      var $cmp2118=(($1132)|0)==0;
      if ($cmp2118) { __label__ = 791; break; } else { __label__ = 794; break; }
    case 791: 
      __label__ = 792; break;
    case 792: 
      HEAP32[((((_the_exception_context+8)|0))>>2)]=((STRING_TABLE.__str205)|0);
      __label__ = 793; break;
    case 793: 
      var $1133=HEAP32[((((_the_exception_context)|0))>>2)];
      var $arraydecay2123=(($1133)|0);
      _longjmp($arraydecay2123, 1);
      throw "Reached an unreachable!"
    case 794: 
      __label__ = 795; break;
    case 795: 
      var $1134=HEAP32[((_verbose)>>2)];
      var $cmp2126=(($1134)|0) > 2;
      if ($cmp2126) { __label__ = 796; break; } else { __label__ = 797; break; }
    case 796: 
      var $call2129=_printf(((STRING_TABLE.__str206)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 797; break;
    case 797: 
      _pngcrush_pause();
      var $1135=HEAP32[((_verbose)>>2)];
      var $cmp2131=(($1135)|0) > 1;
      if ($cmp2131) { __label__ = 798; break; } else { __label__ = 799; break; }
    case 798: 
      var $call2134=_printf(((STRING_TABLE.__str207)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 799; break;
    case 799: 
      var $1136=HEAP32[((_read_ptr)>>2)];
      var $1137=HEAP32[((_fpin)>>2)];
      _png_init_io($1136, $1137);
      var $1138=HEAP32[((_nosave)>>2)];
      var $cmp2136=(($1138)|0)==0;
      if ($cmp2136) { __label__ = 800; break; } else { __label__ = 801; break; }
    case 800: 
      var $1139=HEAP32[((_write_ptr)>>2)];
      var $1140=HEAP32[((_fpout)>>2)];
      _png_init_io($1139, $1140);
      __label__ = 801; break;
    case 801: 
      var $1141=HEAP32[((_verbose)>>2)];
      var $cmp2140=(($1141)|0) > 2;
      if ($cmp2140) { __label__ = 802; break; } else { __label__ = 803; break; }
    case 802: 
      var $call2143=_printf(((STRING_TABLE.__str208)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 803; break;
    case 803: 
      _pngcrush_pause();
      var $1142=HEAP32[((_read_ptr)>>2)];
      _png_set_crc_action($1142, 4, 4);
      var $1143=HEAP32[((_read_ptr)>>2)];
      _png_set_keep_unknown_chunks($1143, 3, 0, 0);
      var $1144=HEAP32[((_nosave)>>2)];
      var $cmp2145=(($1144)|0)==0;
      if ($cmp2145) { __label__ = 804; break; } else { __label__ = 820; break; }
    case 804: 
      var $1145=HEAP32[((_save_apng_chunks)>>2)];
      var $cmp2148=(($1145)|0)==1;
      if ($cmp2148) { __label__ = 805; break; } else { __label__ = 806; break; }
    case 805: 
      var $1146=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1146, 3, ((STRING_TABLE.__str209)|0), 1);
      var $1147=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1147, 3, ((STRING_TABLE.__str210)|0), 1);
      var $1148=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1148, 3, ((STRING_TABLE.__str211)|0), 1);
      __label__ = 806; break;
    case 806: 
      var $1149=HEAP32[((_found_any_chunk)>>2)];
      var $cmp2152=(($1149)|0)==1;
      if ($cmp2152) { __label__ = 807; break; } else { __label__ = 808; break; }
    case 807: 
      var $1150=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1150, 3, ((STRING_TABLE.__str13)|0), 1);
      __label__ = 808; break;
    case 808: 
      var $1151=HEAP32[((_all_chunks_are_safe)>>2)];
      var $tobool2156=(($1151)|0)!=0;
      if ($tobool2156) { __label__ = 809; break; } else { __label__ = 812; break; }
    case 809: 
      var $1152=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1152, 3, 0, 0);
      var $1153=HEAP32[((_save_apng_chunks)>>2)];
      var $cmp2158=(($1153)|0)==0;
      if ($cmp2158) { __label__ = 810; break; } else { __label__ = 811; break; }
    case 810: 
      var $1154=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1154, 3, ((STRING_TABLE.__str209)|0), 1);
      var $1155=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1155, 3, ((STRING_TABLE.__str210)|0), 1);
      var $1156=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1156, 3, ((STRING_TABLE.__str211)|0), 1);
      __label__ = 811; break;
    case 811: 
      __label__ = 819; break;
    case 812: 
      var $arrayidx2163=(($chunk_name+4)|0);
      HEAP8[($arrayidx2163)]=0;
      var $1157=$argv_addr;
      var $call2164=_keep_unknown_chunk(((STRING_TABLE.__str35)|0), $1157);
      var $tobool2165=(($call2164)|0)!=0;
      if ($tobool2165) { __label__ = 813; break; } else { __label__ = 815; break; }
    case 813: 
      var $1158=$argv_addr;
      var $call2167=_keep_unknown_chunk(((STRING_TABLE.__str212)|0), $1158);
      var $tobool2168=(($call2167)|0)!=0;
      if ($tobool2168) { __label__ = 814; break; } else { __label__ = 815; break; }
    case 814: 
      var $1159=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1159, 2, 0, 0);
      __label__ = 816; break;
    case 815: 
      var $1160=HEAP32[((_write_ptr)>>2)];
      _png_set_keep_unknown_chunks($1160, 1, 0, 0);
      __label__ = 816; break;
    case 816: 
      var $1161=$argv_addr;
      var $call2172=_keep_unknown_chunk(((STRING_TABLE.__str53)|0), $1161);
      var $tobool2173=(($call2172)|0)!=0;
      if ($tobool2173) { __label__ = 817; break; } else { __label__ = 818; break; }
    case 817: 
      var $arraydecay2175=(($chunk_name)|0);
      _png_save_uint_32($arraydecay2175, 1934902610);
      var $1162=HEAP32[((_write_ptr)>>2)];
      var $arraydecay2176=(($chunk_name)|0);
      _png_set_keep_unknown_chunks($1162, 3, $arraydecay2176, 1);
      __label__ = 818; break;
    case 818: 
      __label__ = 819; break;
    case 819: 
      __label__ = 820; break;
    case 820: 
      var $1163=HEAP32[((_verbose)>>2)];
      var $cmp2180=(($1163)|0) > 1;
      if ($cmp2180) { __label__ = 821; break; } else { __label__ = 822; break; }
    case 821: 
      var $call2183=_printf(((STRING_TABLE.__str213)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 822; break;
    case 822: 
      var $1164=$mng_signature;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($1164)]=HEAP8[(((STRING_TABLE._main_mng_signature)|0))];HEAP8[($1164+1)]=HEAP8[(((STRING_TABLE._main_mng_signature)|0)+1)];HEAP8[($1164+2)]=HEAP8[(((STRING_TABLE._main_mng_signature)|0)+2)];HEAP8[($1164+3)]=HEAP8[(((STRING_TABLE._main_mng_signature)|0)+3)];HEAP8[($1164+4)]=HEAP8[(((STRING_TABLE._main_mng_signature)|0)+4)];HEAP8[($1164+5)]=HEAP8[(((STRING_TABLE._main_mng_signature)|0)+5)];HEAP8[($1164+6)]=HEAP8[(((STRING_TABLE._main_mng_signature)|0)+6)];HEAP8[($1164+7)]=HEAP8[(((STRING_TABLE._main_mng_signature)|0)+7)];
      var $1165=$png_signature;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($1165)]=HEAP8[(((STRING_TABLE._main_png_signature)|0))];HEAP8[($1165+1)]=HEAP8[(((STRING_TABLE._main_png_signature)|0)+1)];HEAP8[($1165+2)]=HEAP8[(((STRING_TABLE._main_png_signature)|0)+2)];HEAP8[($1165+3)]=HEAP8[(((STRING_TABLE._main_png_signature)|0)+3)];HEAP8[($1165+4)]=HEAP8[(((STRING_TABLE._main_png_signature)|0)+4)];HEAP8[($1165+5)]=HEAP8[(((STRING_TABLE._main_png_signature)|0)+5)];HEAP8[($1165+6)]=HEAP8[(((STRING_TABLE._main_png_signature)|0)+6)];HEAP8[($1165+7)]=HEAP8[(((STRING_TABLE._main_png_signature)|0)+7)];
      var $1166=HEAP32[((_read_ptr)>>2)];
      var $arraydecay2185=(($png_signature)|0);
      _pngcrush_default_read_data($1166, $arraydecay2185, 8);
      var $1167=HEAP32[((_read_ptr)>>2)];
      _png_set_sig_bytes($1167, 8);
      var $arraydecay2186=(($mng_signature)|0);
      var $arraydecay2187=(($png_signature)|0);
      var $call2188=_memcmp($arraydecay2186, $arraydecay2187, 8);
      var $tobool2189=(($call2188)|0)!=0;
      if ($tobool2189) { __label__ = 824; break; } else { __label__ = 823; break; }
    case 823: 
      var $1168=HEAP32[((_read_ptr)>>2)];
      var $call2191=_png_permit_mng_features($1168, 4);
      var $1169=HEAP32[((_read_ptr)>>2)];
      _png_skip_chunk($1169);
      HEAP32[((_input_format)>>2)]=1;
      __label__ = 830; break;
    case 824: 
      var $arraydecay2193=(($png_signature)|0);
      var $call2194=_png_sig_cmp($arraydecay2193, 0, 8);
      var $tobool2195=(($call2194)|0)!=0;
      if ($tobool2195) { __label__ = 825; break; } else { __label__ = 829; break; }
    case 825: 
      var $arraydecay2197=(($png_signature)|0);
      var $call2198=_png_sig_cmp($arraydecay2197, 0, 4);
      var $tobool2199=(($call2198)|0)!=0;
      if ($tobool2199) { __label__ = 826; break; } else { __label__ = 827; break; }
    case 826: 
      var $1170=HEAP32[((_read_ptr)>>2)];
      _png_error($1170, ((STRING_TABLE.__str214)|0));
      __label__ = 828; break;
    case 827: 
      var $1171=HEAP32[((_read_ptr)>>2)];
      _png_error($1171, ((STRING_TABLE.__str215)|0));
      __label__ = 828; break;
    case 828: 
      __label__ = 829; break;
    case 829: 
      __label__ = 830; break;
    case 830: 
      var $1172=HEAP32[((_fix)>>2)];
      var $tobool2205=(($1172)|0)!=0;
      if ($tobool2205) { __label__ = 831; break; } else { __label__ = 833; break; }
    case 831: 
      var $1173=HEAP32[((_found_CgBI)>>2)];
      var $tobool2207=(($1173)|0)!=0;
      if ($tobool2207) { __label__ = 832; break; } else { __label__ = 833; break; }
    case 832: 
      var $1174=HEAP32[((_read_ptr)>>2)];
      _png_skip_chunk($1174);
      var $1175=HEAP32[((_read_ptr)>>2)];
      _png_set_keep_unknown_chunks($1175, 1, ((STRING_TABLE.__str23)|0), 1);
      var $1176=HEAP32[((_read_ptr)>>2)];
      _png_set_keep_unknown_chunks($1176, 1, ((STRING_TABLE.__str58)|0), 1);
      __label__ = 833; break;
    case 833: 
      var $1177=HEAP32[((_premultiply)>>2)];
      var $tobool2210=(($1177)|0)!=0;
      if ($tobool2210) { __label__ = 834; break; } else { __label__ = 835; break; }
    case 834: 
      var $1178=HEAP32[((_read_ptr)>>2)];
      _png_error($1178, ((STRING_TABLE.__str173)|0));
      __label__ = 835; break;
    case 835: 
      var $1179=HEAP32[((_read_ptr)>>2)];
      var $1180=HEAP32[((_read_info_ptr)>>2)];
      _png_read_info($1179, $1180);
      var $1181=HEAP32[((_verbose)>>2)];
      var $cmp2213=(($1181)|0) > 1;
      if ($cmp2213) { __label__ = 836; break; } else { __label__ = 837; break; }
    case 836: 
      var $call2216=_printf(((STRING_TABLE.__str216)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 837; break;
    case 837: 
      var $1182=HEAP32[((_read_ptr)>>2)];
      var $1183=HEAP32[((_read_info_ptr)>>2)];
      var $call2218=_png_get_IHDR($1182, $1183, _width, _height, $bit_depth, $color_type, $interlace_method, $compression_method, $filter_method);
      var $tobool2219=(($call2218)|0)!=0;
      if ($tobool2219) { __label__ = 838; break; } else { __label__ = 944; break; }
    case 838: 
      $need_expand=0;
      var $1184=HEAP32[(($color_type)>>2)];
      HEAP32[((_input_color_type)>>2)]=$1184;
      var $1185=HEAP32[(($bit_depth)>>2)];
      HEAP32[((_input_bit_depth)>>2)]=$1185;
      var $1186=HEAP32[((_output_color_type)>>2)];
      var $cmp2221=(($1186)|0) > 7;
      if ($cmp2221) { __label__ = 839; break; } else { __label__ = 840; break; }
    case 839: 
      var $1187=HEAP32[((_input_color_type)>>2)];
      HEAP32[((_output_color_type)>>2)]=$1187;
      __label__ = 840; break;
    case 840: 
      var $1188=HEAP32[((_verbose)>>2)];
      var $cmp2225=(($1188)|0) > 1;
      if ($cmp2225) { __label__ = 841; break; } else { __label__ = 845; break; }
    case 841: 
      var $1189=HEAP32[((_first_trial)>>2)];
      var $tobool2228=(($1189)|0)!=0;
      if ($tobool2228) { __label__ = 842; break; } else { __label__ = 845; break; }
    case 842: 
      var $1190=HEAP32[((_stdout)>>2)];
      var $call2230=_fprintf($1190, ((STRING_TABLE.__str217)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1191=HEAP32[((_stdout)>>2)];
      var $1192=HEAP32[((_width)>>2)];
      var $1193=HEAP32[((_height)>>2)];
      var $call2231=_fprintf($1191, ((STRING_TABLE.__str218)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1192,HEAP32[((tempInt+4)>>2)]=$1193,tempInt));
      var $1194=HEAP32[((_stdout)>>2)];
      var $1195=HEAP32[(($bit_depth)>>2)];
      var $call2232=_fprintf($1194, ((STRING_TABLE.__str219)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1195,tempInt));
      var $1196=HEAP32[((_stdout)>>2)];
      var $1197=HEAP32[(($color_type)>>2)];
      var $call2233=_fprintf($1196, ((STRING_TABLE.__str220)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1197,tempInt));
      var $1198=HEAP32[((_output_color_type)>>2)];
      var $1199=HEAP32[(($color_type)>>2)];
      var $cmp2234=(($1198)|0)!=(($1199)|0);
      if ($cmp2234) { __label__ = 843; break; } else { __label__ = 844; break; }
    case 843: 
      var $1200=HEAP32[((_stdout)>>2)];
      var $1201=HEAP32[((_output_color_type)>>2)];
      var $call2237=_fprintf($1200, ((STRING_TABLE.__str221)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1201,tempInt));
      __label__ = 844; break;
    case 844: 
      var $1202=HEAP32[((_stdout)>>2)];
      var $1203=HEAP32[(($interlace_method)>>2)];
      var $call2239=_fprintf($1202, ((STRING_TABLE.__str222)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1203,tempInt));
      __label__ = 845; break;
    case 845: 
      var $1204=HEAP32[((_force_output_bit_depth)>>2)];
      var $cmp2241=(($1204)|0)==0;
      if ($cmp2241) { __label__ = 846; break; } else { __label__ = 847; break; }
    case 846: 
      var $1205=HEAP32[((_input_bit_depth)>>2)];
      HEAP32[((_output_bit_depth)>>2)]=$1205;
      __label__ = 847; break;
    case 847: 
      var $1206=HEAP32[((_output_color_type)>>2)];
      var $cmp2245=(($1206)|0)!=3;
      if ($cmp2245) { __label__ = 849; break; } else { __label__ = 848; break; }
    case 848: 
      var $1207=HEAP32[((_output_bit_depth)>>2)];
      var $cmp2248=(($1207)|0) > 8;
      if ($cmp2248) { __label__ = 849; break; } else { __label__ = 852; break; }
    case 849: 
      var $1208=HEAP32[((_output_bit_depth)>>2)];
      var $cmp2251=(($1208)|0) >= 8;
      if ($cmp2251) { __label__ = 850; break; } else { __label__ = 852; break; }
    case 850: 
      var $1209=HEAP32[((_output_bit_depth)>>2)];
      var $1210=HEAP32[((_input_bit_depth)>>2)];
      var $cmp2254=(($1209)|0)!=(($1210)|0);
      if ($cmp2254) { __label__ = 851; break; } else { __label__ = 852; break; }
    case 851: 
      $need_expand=1;
      __label__ = 852; break;
    case 852: 
      var $1211=HEAP32[(($color_type)>>2)];
      var $cmp2258=(($1211)|0)==2;
      if ($cmp2258) { __label__ = 855; break; } else { __label__ = 853; break; }
    case 853: 
      var $1212=HEAP32[(($color_type)>>2)];
      var $cmp2261=(($1212)|0)==6;
      if ($cmp2261) { __label__ = 855; break; } else { __label__ = 854; break; }
    case 854: 
      var $1213=HEAP32[(($color_type)>>2)];
      var $cmp2264=(($1213)|0)==3;
      if ($cmp2264) { __label__ = 855; break; } else { __label__ = 865; break; }
    case 855: 
      var $1214=HEAP32[((_output_color_type)>>2)];
      var $cmp2267=(($1214)|0)==0;
      if ($cmp2267) { __label__ = 857; break; } else { __label__ = 856; break; }
    case 856: 
      var $1215=HEAP32[((_output_color_type)>>2)];
      var $cmp2270=(($1215)|0)==4;
      if ($cmp2270) { __label__ = 857; break; } else { __label__ = 865; break; }
    case 857: 
      var $1216=HEAP32[((_verbose)>>2)];
      var $cmp2273=(($1216)|0) > 0;
      if ($cmp2273) { __label__ = 858; break; } else { __label__ = 860; break; }
    case 858: 
      var $1217=HEAP32[((_first_trial)>>2)];
      var $tobool2276=(($1217)|0)!=0;
      if ($tobool2276) { __label__ = 859; break; } else { __label__ = 860; break; }
    case 859: 
      var $1218=HEAP32[((_stdout)>>2)];
      var $call2278=_fprintf($1218, ((STRING_TABLE.__str223)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 860; break;
    case 860: 
      var $1219=HEAP32[((_read_ptr)>>2)];
      _png_set_rgb_to_gray_fixed($1219, 1, 21260, 71520);
      var $1220=HEAP32[((_output_bit_depth)>>2)];
      var $cmp2280=(($1220)|0) < 8;
      if ($cmp2280) { __label__ = 861; break; } else { __label__ = 862; break; }
    case 861: 
      HEAP32[((_output_bit_depth)>>2)]=8;
      __label__ = 862; break;
    case 862: 
      var $1221=HEAP32[(($color_type)>>2)];
      var $cmp2284=(($1221)|0)==3;
      if ($cmp2284) { __label__ = 863; break; } else { __label__ = 864; break; }
    case 863: 
      $need_expand=1;
      __label__ = 864; break;
    case 864: 
      __label__ = 865; break;
    case 865: 
      var $1222=HEAP32[(($color_type)>>2)];
      var $cmp2289=(($1222)|0)!=3;
      if ($cmp2289) { __label__ = 866; break; } else { __label__ = 868; break; }
    case 866: 
      var $1223=HEAP32[((_output_color_type)>>2)];
      var $cmp2292=(($1223)|0)==3;
      if ($cmp2292) { __label__ = 867; break; } else { __label__ = 868; break; }
    case 867: 
      var $call2295=_printf(((STRING_TABLE.__str224)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1224=HEAP32[((_input_color_type)>>2)];
      HEAP32[((_output_color_type)>>2)]=$1224;
      __label__ = 868; break;
    case 868: 
      var $1225=HEAP32[(($color_type)>>2)];
      var $cmp2297=(($1225)|0)==0;
      if ($cmp2297) { __label__ = 870; break; } else { __label__ = 869; break; }
    case 869: 
      var $1226=HEAP32[(($color_type)>>2)];
      var $cmp2300=(($1226)|0)==4;
      if ($cmp2300) { __label__ = 870; break; } else { __label__ = 873; break; }
    case 870: 
      var $1227=HEAP32[((_output_color_type)>>2)];
      var $cmp2303=(($1227)|0)==2;
      if ($cmp2303) { __label__ = 872; break; } else { __label__ = 871; break; }
    case 871: 
      var $1228=HEAP32[((_output_color_type)>>2)];
      var $cmp2306=(($1228)|0)==6;
      if ($cmp2306) { __label__ = 872; break; } else { __label__ = 873; break; }
    case 872: 
      var $1229=HEAP32[((_read_ptr)>>2)];
      _png_set_gray_to_rgb($1229);
      __label__ = 873; break;
    case 873: 
      var $1230=HEAP32[(($color_type)>>2)];
      var $cmp2310=(($1230)|0)==4;
      if ($cmp2310) { __label__ = 875; break; } else { __label__ = 874; break; }
    case 874: 
      var $1231=HEAP32[(($color_type)>>2)];
      var $cmp2313=(($1231)|0)==6;
      if ($cmp2313) { __label__ = 875; break; } else { __label__ = 881; break; }
    case 875: 
      var $1232=HEAP32[((_output_color_type)>>2)];
      var $cmp2316=(($1232)|0)!=4;
      if ($cmp2316) { __label__ = 876; break; } else { __label__ = 881; break; }
    case 876: 
      var $1233=HEAP32[((_output_color_type)>>2)];
      var $cmp2319=(($1233)|0)!=6;
      if ($cmp2319) { __label__ = 877; break; } else { __label__ = 881; break; }
    case 877: 
      var $1234=HEAP32[((_verbose)>>2)];
      var $cmp2322=(($1234)|0) > 0;
      if ($cmp2322) { __label__ = 878; break; } else { __label__ = 880; break; }
    case 878: 
      var $1235=HEAP32[((_first_trial)>>2)];
      var $tobool2325=(($1235)|0)!=0;
      if ($tobool2325) { __label__ = 879; break; } else { __label__ = 880; break; }
    case 879: 
      var $1236=HEAP32[((_stdout)>>2)];
      var $call2327=_fprintf($1236, ((STRING_TABLE.__str225)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 880; break;
    case 880: 
      var $1237=HEAP32[((_read_ptr)>>2)];
      _png_set_strip_alpha($1237);
      __label__ = 881; break;
    case 881: 
      var $1238=HEAP32[((_output_color_type)>>2)];
      var $cmp2330=(($1238)|0)==4;
      if ($cmp2330) { __label__ = 883; break; } else { __label__ = 882; break; }
    case 882: 
      var $1239=HEAP32[((_output_color_type)>>2)];
      var $cmp2333=(($1239)|0)==6;
      if ($cmp2333) { __label__ = 883; break; } else { __label__ = 889; break; }
    case 883: 
      var $1240=HEAP32[(($color_type)>>2)];
      var $cmp2336=(($1240)|0)!=4;
      if ($cmp2336) { __label__ = 884; break; } else { __label__ = 889; break; }
    case 884: 
      var $1241=HEAP32[(($color_type)>>2)];
      var $cmp2339=(($1241)|0)!=6;
      if ($cmp2339) { __label__ = 885; break; } else { __label__ = 889; break; }
    case 885: 
      var $1242=HEAP32[((_verbose)>>2)];
      var $cmp2342=(($1242)|0) > 0;
      if ($cmp2342) { __label__ = 886; break; } else { __label__ = 888; break; }
    case 886: 
      var $1243=HEAP32[((_first_trial)>>2)];
      var $tobool2345=(($1243)|0)!=0;
      if ($tobool2345) { __label__ = 887; break; } else { __label__ = 888; break; }
    case 887: 
      var $1244=HEAP32[((_stdout)>>2)];
      var $call2347=_fprintf($1244, ((STRING_TABLE.__str226)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 888; break;
    case 888: 
      var $1245=HEAP32[((_read_ptr)>>2)];
      _png_set_filler($1245, 65535, 1);
      $need_expand=1;
      __label__ = 889; break;
    case 889: 
      var $1246=HEAP32[((_output_color_type)>>2)];
      var $tobool2350=(($1246)|0)!=0;
      if ($tobool2350) { __label__ = 890; break; } else { __label__ = 893; break; }
    case 890: 
      var $1247=HEAP32[((_output_color_type)>>2)];
      var $cmp2352=(($1247)|0)!=3;
      if ($cmp2352) { __label__ = 891; break; } else { __label__ = 893; break; }
    case 891: 
      var $1248=HEAP32[((_output_bit_depth)>>2)];
      var $cmp2355=(($1248)|0) < 8;
      if ($cmp2355) { __label__ = 892; break; } else { __label__ = 893; break; }
    case 892: 
      HEAP32[((_output_bit_depth)>>2)]=8;
      __label__ = 893; break;
    case 893: 
      var $1249=HEAP32[((_output_color_type)>>2)];
      var $cmp2359=(($1249)|0)==2;
      if ($cmp2359) { __label__ = 895; break; } else { __label__ = 894; break; }
    case 894: 
      var $1250=HEAP32[((_output_color_type)>>2)];
      var $cmp2362=(($1250)|0)==6;
      if ($cmp2362) { __label__ = 895; break; } else { __label__ = 900; break; }
    case 895: 
      var $1251=HEAP32[(($color_type)>>2)];
      var $cmp2365=(($1251)|0)==3;
      if ($cmp2365) { __label__ = 896; break; } else { __label__ = 900; break; }
    case 896: 
      var $1252=HEAP32[((_verbose)>>2)];
      var $cmp2368=(($1252)|0) > 0;
      if ($cmp2368) { __label__ = 897; break; } else { __label__ = 899; break; }
    case 897: 
      var $1253=HEAP32[((_first_trial)>>2)];
      var $tobool2371=(($1253)|0)!=0;
      if ($tobool2371) { __label__ = 898; break; } else { __label__ = 899; break; }
    case 898: 
      var $1254=HEAP32[((_stdout)>>2)];
      var $call2373=_fprintf($1254, ((STRING_TABLE.__str227)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 899; break;
    case 899: 
      $need_expand=1;
      __label__ = 900; break;
    case 900: 
      var $1255=$need_expand;
      var $cmp2376=(($1255)|0)==1;
      if ($cmp2376) { __label__ = 901; break; } else { __label__ = 902; break; }
    case 901: 
      var $1256=HEAP32[((_read_ptr)>>2)];
      _png_set_expand($1256);
      __label__ = 902; break;
    case 902: 
      var $1257=HEAP32[((_input_bit_depth)>>2)];
      var $cmp2380=(($1257)|0) < 8;
      if ($cmp2380) { __label__ = 903; break; } else { __label__ = 904; break; }
    case 903: 
      var $1258=HEAP32[((_read_ptr)>>2)];
      _png_set_packing($1258);
      __label__ = 904; break;
    case 904: 
      var $1259=HEAP32[((_output_color_type)>>2)];
      var $cmp2384=(($1259)|0)==0;
      if ($cmp2384) { __label__ = 905; break; } else { __label__ = 907; break; }
    case 905: 
      var $1260=HEAP32[((_output_bit_depth)>>2)];
      var $cmp2387=(($1260)|0) < 8;
      if ($cmp2387) { __label__ = 906; break; } else { __label__ = 907; break; }
    case 906: 
      var $1261=HEAP32[((_output_bit_depth)>>2)];
      var $conv2390=(($1261) & 255);
      var $gray=(($true_bits+3)|0);
      HEAP8[($gray)]=$conv2390;
      var $1262=HEAP32[((_read_ptr)>>2)];
      _png_set_shift($1262, $true_bits);
      __label__ = 907; break;
    case 907: 
      var $1263=HEAP32[((_save_apng_chunks)>>2)];
      var $cmp2392=(($1263)|0)==1;
      if ($cmp2392) { __label__ = 909; break; } else { __label__ = 908; break; }
    case 908: 
      var $1264=HEAP32[((_found_acTL_chunk)>>2)];
      var $cmp2395=(($1264)|0)==1;
      if ($cmp2395) { __label__ = 909; break; } else { __label__ = 931; break; }
    case 909: 
      var $1265=HEAP32[((_save_apng_chunks)>>2)];
      var $cmp2398=(($1265)|0)==0;
      if ($cmp2398) { __label__ = 910; break; } else { __label__ = 915; break; }
    case 910: 
      var $1266=HEAP32[((_verbose)>>2)];
      var $cmp2401=(($1266)|0) > 0;
      if ($cmp2401) { __label__ = 911; break; } else { __label__ = 912; break; }
    case 911: 
      var $1267=HEAP32[((_stdout)>>2)];
      var $call2404=_fprintf($1267, ((STRING_TABLE.__str228)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 912; break;
    case 912: 
      var $1268=HEAP32[((_verbose)>>2)];
      var $cmp2406=(($1268)|0) > 0;
      if ($cmp2406) { __label__ = 913; break; } else { __label__ = 914; break; }
    case 913: 
      var $1269=HEAP32[((_stdout)>>2)];
      var $call2409=_fprintf($1269, ((STRING_TABLE.__str229)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 914; break;
    case 914: 
      __label__ = 915; break;
    case 915: 
      var $1270=HEAP32[((_input_color_type)>>2)];
      var $1271=HEAP32[((_output_color_type)>>2)];
      var $cmp2412=(($1270)|0)!=(($1271)|0);
      if ($cmp2412) { __label__ = 916; break; } else { __label__ = 921; break; }
    case 916: 
      var $1272=HEAP32[((_verbose)>>2)];
      var $cmp2415=(($1272)|0) > 0;
      if ($cmp2415) { __label__ = 917; break; } else { __label__ = 918; break; }
    case 917: 
      var $1273=HEAP32[((_stdout)>>2)];
      var $call2418=_fprintf($1273, ((STRING_TABLE.__str230)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 918; break;
    case 918: 
      var $1274=HEAP32[((_verbose)>>2)];
      var $cmp2420=(($1274)|0) > 0;
      if ($cmp2420) { __label__ = 919; break; } else { __label__ = 920; break; }
    case 919: 
      var $1275=HEAP32[((_stdout)>>2)];
      var $call2423=_fprintf($1275, ((STRING_TABLE.__str231)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 920; break;
    case 920: 
      HEAP32[((_save_apng_chunks)>>2)]=2;
      __label__ = 921; break;
    case 921: 
      var $1276=HEAP32[((_input_bit_depth)>>2)];
      var $1277=HEAP32[((_output_bit_depth)>>2)];
      var $cmp2426=(($1276)|0)!=(($1277)|0);
      if ($cmp2426) { __label__ = 922; break; } else { __label__ = 927; break; }
    case 922: 
      var $1278=HEAP32[((_verbose)>>2)];
      var $cmp2429=(($1278)|0) > 0;
      if ($cmp2429) { __label__ = 923; break; } else { __label__ = 924; break; }
    case 923: 
      var $1279=HEAP32[((_stdout)>>2)];
      var $call2432=_fprintf($1279, ((STRING_TABLE.__str232)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 924; break;
    case 924: 
      var $1280=HEAP32[((_verbose)>>2)];
      var $cmp2434=(($1280)|0) > 0;
      if ($cmp2434) { __label__ = 925; break; } else { __label__ = 926; break; }
    case 925: 
      var $1281=HEAP32[((_stdout)>>2)];
      var $call2437=_fprintf($1281, ((STRING_TABLE.__str231)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 926; break;
    case 926: 
      HEAP32[((_save_apng_chunks)>>2)]=2;
      __label__ = 927; break;
    case 927: 
      var $1282=HEAP32[((_save_apng_chunks)>>2)];
      var $cmp2440=(($1282)|0)!=1;
      if ($cmp2440) { __label__ = 928; break; } else { __label__ = 930; break; }
    case 928: 
      var $1283=HEAP32[((_found_acTL_chunk)>>2)];
      var $cmp2443=(($1283)|0)==1;
      if ($cmp2443) { __label__ = 929; break; } else { __label__ = 930; break; }
    case 929: 
      HEAP32[((_found_acTL_chunk)>>2)]=2;
      __label__ = 930; break;
    case 930: 
      __label__ = 931; break;
    case 931: 
      var $1284=HEAP32[((_verbose)>>2)];
      var $cmp2448=(($1284)|0) > 1;
      if ($cmp2448) { __label__ = 932; break; } else { __label__ = 933; break; }
    case 932: 
      var $1285=HEAP32[((_stdout)>>2)];
      var $call2451=_fprintf($1285, ((STRING_TABLE.__str233)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 933; break;
    case 933: 
      HEAP32[((_output_format)>>2)]=0;
      var $1286=HEAP32[((_do_loco)>>2)];
      var $tobool2453=(($1286)|0)!=0;
      if ($tobool2453) { __label__ = 934; break; } else { __label__ = 938; break; }
    case 934: 
      var $1287=HEAP32[((_output_color_type)>>2)];
      var $cmp2455=(($1287)|0)==2;
      if ($cmp2455) { __label__ = 936; break; } else { __label__ = 935; break; }
    case 935: 
      var $1288=HEAP32[((_output_color_type)>>2)];
      var $cmp2458=(($1288)|0)==6;
      if ($cmp2458) { __label__ = 936; break; } else { __label__ = 937; break; }
    case 936: 
      HEAP32[((_output_format)>>2)]=1;
      HEAP32[(($filter_method)>>2)]=64;
      var $1289=HEAP32[((_write_ptr)>>2)];
      var $call2461=_png_permit_mng_features($1289, 4);
      __label__ = 937; break;
    case 937: 
      __label__ = 939; break;
    case 938: 
      HEAP32[(($filter_method)>>2)]=0;
      __label__ = 939; break;
    case 939: 
      var $1290=HEAP32[((_input_format)>>2)];
      var $1291=HEAP32[((_output_format)>>2)];
      var $cmp2465=(($1290)|0)!=(($1291)|0);
      if ($cmp2465) { __label__ = 940; break; } else { __label__ = 941; break; }
    case 940: 
      HEAP32[((_things_have_changed)>>2)]=1;
      __label__ = 941; break;
    case 941: 
      var $1292=HEAP32[((_write_ptr)>>2)];
      var $1293=HEAP32[((_write_info_ptr)>>2)];
      var $1294=HEAP32[((_width)>>2)];
      var $1295=HEAP32[((_height)>>2)];
      var $1296=HEAP32[((_output_bit_depth)>>2)];
      var $1297=HEAP32[((_output_color_type)>>2)];
      var $1298=HEAP32[(($interlace_method)>>2)];
      var $1299=HEAP32[(($compression_method)>>2)];
      var $1300=HEAP32[(($filter_method)>>2)];
      _png_set_IHDR($1292, $1293, $1294, $1295, $1296, $1297, $1298, $1299, $1300);
      var $1301=HEAP32[((_output_color_type)>>2)];
      var $1302=HEAP32[((_input_color_type)>>2)];
      var $cmp2469=(($1301)|0)!=(($1302)|0);
      if ($cmp2469) { __label__ = 942; break; } else { __label__ = 943; break; }
    case 942: 
      HEAP32[((_things_have_changed)>>2)]=1;
      __label__ = 943; break;
    case 943: 
      __label__ = 944; break;
    case 944: 
      var $1303=HEAP32[((_premultiply)>>2)];
      var $cmp2474=(($1303)|0)==1;
      if ($cmp2474) { __label__ = 946; break; } else { __label__ = 945; break; }
    case 945: 
      var $1304=HEAP32[((_premultiply)>>2)];
      var $cmp2477=(($1304)|0)==2;
      if ($cmp2477) { __label__ = 946; break; } else { __label__ = 947; break; }
    case 946: 
      __label__ = 947; break;
    case 947: 
      var $1305=HEAP32[((_have_bkgd)>>2)];
      var $tobool2481=(($1305)|0)!=0;
      if ($tobool2481) { __label__ = 957; break; } else { __label__ = 948; break; }
    case 948: 
      var $1306=HEAP32[((_read_ptr)>>2)];
      var $1307=HEAP32[((_read_info_ptr)>>2)];
      var $call2483=_png_get_bKGD($1306, $1307, $background);
      var $tobool2484=(($call2483)|0)!=0;
      if ($tobool2484) { __label__ = 949; break; } else { __label__ = 957; break; }
    case 949: 
      var $1308=$argv_addr;
      var $call2486=_keep_chunk(((STRING_TABLE.__str39)|0), $1308);
      var $tobool2487=(($call2486)|0)!=0;
      if ($tobool2487) { __label__ = 950; break; } else { __label__ = 956; break; }
    case 950: 
      var $1309=HEAP32[((_input_color_type)>>2)];
      var $cmp2489=(($1309)|0)==2;
      if ($cmp2489) { __label__ = 952; break; } else { __label__ = 951; break; }
    case 951: 
      var $1310=HEAP32[((_input_color_type)>>2)];
      var $cmp2492=(($1310)|0)==6;
      if ($cmp2492) { __label__ = 952; break; } else { __label__ = 955; break; }
    case 952: 
      var $1311=HEAP32[((_output_color_type)>>2)];
      var $cmp2495=(($1311)|0)==0;
      if ($cmp2495) { __label__ = 954; break; } else { __label__ = 953; break; }
    case 953: 
      var $1312=HEAP32[((_output_color_type)>>2)];
      var $cmp2498=(($1312)|0)==4;
      if ($cmp2498) { __label__ = 954; break; } else { __label__ = 955; break; }
    case 954: 
      var $1313=HEAP32[(($background)>>2)];
      var $green=(($1313+4)|0);
      var $1314=HEAP16[(($green)>>1)];
      var $1315=HEAP32[(($background)>>2)];
      var $gray2501=(($1315+8)|0);
      HEAP16[(($gray2501)>>1)]=$1314;
      __label__ = 955; break;
    case 955: 
      var $1316=HEAP32[((_write_ptr)>>2)];
      var $1317=HEAP32[((_write_info_ptr)>>2)];
      var $1318=HEAP32[(($background)>>2)];
      _png_set_bKGD($1316, $1317, $1318);
      __label__ = 956; break;
    case 956: 
      __label__ = 957; break;
    case 957: 
      var $1319=HEAP32[((_have_bkgd)>>2)];
      var $tobool2505=(($1319)|0)!=0;
      if ($tobool2505) { __label__ = 958; break; } else { __label__ = 959; break; }
    case 958: 
      $backgrnd=$backgd;
      var $1320=HEAP16[((_bkgd_red)>>1)];
      var $1321=$backgrnd;
      var $red=(($1321+2)|0);
      HEAP16[(($red)>>1)]=$1320;
      var $1322=HEAP16[((_bkgd_green)>>1)];
      var $1323=$backgrnd;
      var $green2507=(($1323+4)|0);
      HEAP16[(($green2507)>>1)]=$1322;
      var $1324=HEAP16[((_bkgd_blue)>>1)];
      var $1325=$backgrnd;
      var $blue=(($1325+6)|0);
      HEAP16[(($blue)>>1)]=$1324;
      var $1326=$backgrnd;
      var $green2508=(($1326+4)|0);
      var $1327=HEAP16[(($green2508)>>1)];
      var $1328=$backgrnd;
      var $gray2509=(($1328+8)|0);
      HEAP16[(($gray2509)>>1)]=$1327;
      var $1329=HEAP32[((_write_ptr)>>2)];
      var $1330=HEAP32[((_write_info_ptr)>>2)];
      var $1331=$backgrnd;
      _png_set_bKGD($1329, $1330, $1331);
      __label__ = 959; break;
    case 959: 
      var $1332=HEAP32[((_found_cHRM)>>2)];
      var $tobool2511=(($1332)|0)!=0;
      if ($tobool2511) { __label__ = 960; break; } else { __label__ = 964; break; }
    case 960: 
      var $1333=HEAP32[((_read_ptr)>>2)];
      var $1334=HEAP32[((_read_info_ptr)>>2)];
      var $call2513=_png_get_cHRM_fixed($1333, $1334, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y);
      var $tobool2514=(($call2513)|0)!=0;
      if ($tobool2514) { __label__ = 961; break; } else { __label__ = 964; break; }
    case 961: 
      var $1335=$argv_addr;
      var $call2516=_keep_chunk(((STRING_TABLE.__str11)|0), $1335);
      var $tobool2517=(($call2516)|0)!=0;
      if ($tobool2517) { __label__ = 962; break; } else { __label__ = 963; break; }
    case 962: 
      var $1336=HEAP32[((_write_ptr)>>2)];
      var $1337=HEAP32[((_write_info_ptr)>>2)];
      var $1338=HEAP32[(($white_x)>>2)];
      var $1339=HEAP32[(($white_y)>>2)];
      var $1340=HEAP32[(($red_x)>>2)];
      var $1341=HEAP32[(($red_y)>>2)];
      var $1342=HEAP32[(($green_x)>>2)];
      var $1343=HEAP32[(($green_y)>>2)];
      var $1344=HEAP32[(($blue_x)>>2)];
      var $1345=HEAP32[(($blue_y)>>2)];
      _png_set_cHRM_fixed($1336, $1337, $1338, $1339, $1340, $1341, $1342, $1343, $1344, $1345);
      __label__ = 963; break;
    case 963: 
      __label__ = 964; break;
    case 964: 
      var $1346=HEAP32[((_force_specified_gamma)>>2)];
      var $tobool2521=(($1346)|0)!=0;
      if ($tobool2521) { __label__ = 965; break; } else { __label__ = 970; break; }
    case 965: 
      var $1347=HEAP32[((_first_trial)>>2)];
      var $tobool2523=(($1347)|0)!=0;
      if ($tobool2523) { __label__ = 966; break; } else { __label__ = 969; break; }
    case 966: 
      HEAP32[((_things_have_changed)>>2)]=1;
      var $1348=HEAP32[((_verbose)>>2)];
      var $cmp2525=(($1348)|0) > 0;
      if ($cmp2525) { __label__ = 967; break; } else { __label__ = 968; break; }
    case 967: 
      var $1349=HEAP32[((_stdout)>>2)];
      var $1350=HEAP32[((_force_specified_gamma)>>2)];
      var $call2528=_fprintf($1349, ((STRING_TABLE.__str234)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1350,tempInt));
      __label__ = 968; break;
    case 968: 
      __label__ = 969; break;
    case 969: 
      var $1351=HEAP32[((_write_ptr)>>2)];
      var $1352=HEAP32[((_write_info_ptr)>>2)];
      var $1353=HEAP32[((_force_specified_gamma)>>2)];
      _png_set_gAMA_fixed($1351, $1352, $1353);
      var $1354=HEAP32[((_force_specified_gamma)>>2)];
      HEAP32[(($file_gamma)>>2)]=$1354;
      __label__ = 990; break;
    case 970: 
      var $1355=HEAP32[((_found_gAMA)>>2)];
      var $tobool2532=(($1355)|0)!=0;
      if ($tobool2532) { __label__ = 971; break; } else { __label__ = 982; break; }
    case 971: 
      var $1356=HEAP32[((_read_ptr)>>2)];
      var $1357=HEAP32[((_read_info_ptr)>>2)];
      var $call2534=_png_get_gAMA_fixed($1356, $1357, $file_gamma);
      var $tobool2535=(($call2534)|0)!=0;
      if ($tobool2535) { __label__ = 972; break; } else { __label__ = 982; break; }
    case 972: 
      var $1358=$argv_addr;
      var $call2537=_keep_chunk(((STRING_TABLE.__str41)|0), $1358);
      var $tobool2538=(($call2537)|0)!=0;
      if ($tobool2538) { __label__ = 973; break; } else { __label__ = 981; break; }
    case 973: 
      var $1359=HEAP32[((_image_specified_gamma)>>2)];
      var $tobool2540=(($1359)|0)!=0;
      if ($tobool2540) { __label__ = 974; break; } else { __label__ = 975; break; }
    case 974: 
      var $1360=HEAP32[((_image_specified_gamma)>>2)];
      HEAP32[(($file_gamma)>>2)]=$1360;
      __label__ = 975; break;
    case 975: 
      var $1361=HEAP32[((_verbose)>>2)];
      var $cmp2543=(($1361)|0) > 1;
      if ($cmp2543) { __label__ = 976; break; } else { __label__ = 978; break; }
    case 976: 
      var $1362=HEAP32[((_first_trial)>>2)];
      var $tobool2546=(($1362)|0)!=0;
      if ($tobool2546) { __label__ = 977; break; } else { __label__ = 978; break; }
    case 977: 
      var $1363=HEAP32[((_stdout)>>2)];
      var $1364=HEAP32[(($file_gamma)>>2)];
      var $call2548=_fprintf($1363, ((STRING_TABLE.__str235)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1364,tempInt));
      __label__ = 978; break;
    case 978: 
      var $1365=HEAP32[((_double_gamma)>>2)];
      var $tobool2550=(($1365)|0)!=0;
      if ($tobool2550) { __label__ = 979; break; } else { __label__ = 980; break; }
    case 979: 
      var $1366=HEAP32[(($file_gamma)>>2)];
      var $1367=HEAP32[(($file_gamma)>>2)];
      var $add2552=(($1367+$1366)|0);
      HEAP32[(($file_gamma)>>2)]=$add2552;
      __label__ = 980; break;
    case 980: 
      var $1368=HEAP32[((_write_ptr)>>2)];
      var $1369=HEAP32[((_write_info_ptr)>>2)];
      var $1370=HEAP32[(($file_gamma)>>2)];
      _png_set_gAMA_fixed($1368, $1369, $1370);
      __label__ = 981; break;
    case 981: 
      __label__ = 989; break;
    case 982: 
      var $1371=HEAP32[((_specified_gamma)>>2)];
      var $tobool2556=(($1371)|0)!=0;
      if ($tobool2556) { __label__ = 983; break; } else { __label__ = 988; break; }
    case 983: 
      var $1372=HEAP32[((_first_trial)>>2)];
      var $tobool2558=(($1372)|0)!=0;
      if ($tobool2558) { __label__ = 984; break; } else { __label__ = 987; break; }
    case 984: 
      HEAP32[((_things_have_changed)>>2)]=1;
      var $1373=HEAP32[((_verbose)>>2)];
      var $cmp2560=(($1373)|0) > 0;
      if ($cmp2560) { __label__ = 985; break; } else { __label__ = 986; break; }
    case 985: 
      var $1374=HEAP32[((_stdout)>>2)];
      var $1375=HEAP32[((_specified_gamma)>>2)];
      var $call2563=_fprintf($1374, ((STRING_TABLE.__str234)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1375,tempInt));
      __label__ = 986; break;
    case 986: 
      __label__ = 987; break;
    case 987: 
      var $1376=HEAP32[((_write_ptr)>>2)];
      var $1377=HEAP32[((_write_info_ptr)>>2)];
      var $1378=HEAP32[((_specified_gamma)>>2)];
      _png_set_gAMA_fixed($1376, $1377, $1378);
      var $1379=HEAP32[((_specified_gamma)>>2)];
      HEAP32[(($file_gamma)>>2)]=$1379;
      __label__ = 988; break;
    case 988: 
      __label__ = 989; break;
    case 989: 
      __label__ = 990; break;
    case 990: 
      var $1380=HEAP32[((_read_ptr)>>2)];
      var $1381=HEAP32[((_read_info_ptr)>>2)];
      var $call2569=_png_get_sRGB($1380, $1381, $file_intent);
      var $tobool2570=(($call2569)|0)!=0;
      if ($tobool2570) { __label__ = 991; break; } else { __label__ = 994; break; }
    case 991: 
      var $1382=$argv_addr;
      var $call2572=_keep_chunk(((STRING_TABLE.__str51)|0), $1382);
      var $tobool2573=(($call2572)|0)!=0;
      if ($tobool2573) { __label__ = 992; break; } else { __label__ = 993; break; }
    case 992: 
      var $1383=HEAP32[((_write_ptr)>>2)];
      var $1384=HEAP32[((_write_info_ptr)>>2)];
      var $1385=HEAP32[(($file_intent)>>2)];
      _png_set_sRGB($1383, $1384, $1385);
      var $1386=HEAP32[(($file_intent)>>2)];
      HEAP32[((_intent)>>2)]=$1386;
      __label__ = 993; break;
    case 993: 
      __label__ = 1009; break;
    case 994: 
      var $1387=HEAP32[((_intent)>>2)];
      var $cmp2577=(($1387)|0) >= 0;
      if ($cmp2577) { __label__ = 995; break; } else { __label__ = 1008; break; }
    case 995: 
      var $1388=HEAP32[(($file_gamma)>>2)];
      var $cmp2580=(($1388)|0) >= 45000;
      if ($cmp2580) { __label__ = 996; break; } else { __label__ = 1001; break; }
    case 996: 
      var $1389=HEAP32[(($file_gamma)>>2)];
      var $cmp2583=(($1389)|0) <= 46000;
      if ($cmp2583) { __label__ = 997; break; } else { __label__ = 1001; break; }
    case 997: 
      HEAP32[((_things_have_changed)>>2)]=1;
      var $1390=HEAP32[((_verbose)>>2)];
      var $cmp2586=(($1390)|0) > 0;
      if ($cmp2586) { __label__ = 998; break; } else { __label__ = 1000; break; }
    case 998: 
      var $1391=HEAP32[((_first_trial)>>2)];
      var $tobool2589=(($1391)|0)!=0;
      if ($tobool2589) { __label__ = 999; break; } else { __label__ = 1000; break; }
    case 999: 
      var $1392=HEAP32[((_stdout)>>2)];
      var $1393=HEAP32[((_intent)>>2)];
      var $call2591=_fprintf($1392, ((STRING_TABLE.__str236)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1393,tempInt));
      __label__ = 1000; break;
    case 1000: 
      var $1394=HEAP32[((_write_ptr)>>2)];
      var $1395=HEAP32[((_write_info_ptr)>>2)];
      var $1396=HEAP32[((_intent)>>2)];
      _png_set_sRGB($1394, $1395, $1396);
      __label__ = 1007; break;
    case 1001: 
      var $1397=HEAP32[(($file_gamma)>>2)];
      var $cmp2594=(($1397)|0)!=0;
      if ($cmp2594) { __label__ = 1002; break; } else { __label__ = 1006; break; }
    case 1002: 
      var $1398=HEAP32[((_verbose)>>2)];
      var $cmp2597=(($1398)|0) > 0;
      if ($cmp2597) { __label__ = 1003; break; } else { __label__ = 1005; break; }
    case 1003: 
      var $1399=HEAP32[((_first_trial)>>2)];
      var $tobool2600=(($1399)|0)!=0;
      if ($tobool2600) { __label__ = 1004; break; } else { __label__ = 1005; break; }
    case 1004: 
      var $1400=HEAP32[((_stdout)>>2)];
      var $1401=HEAP32[(($file_gamma)>>2)];
      var $call2602=_fprintf($1400, ((STRING_TABLE.__str237)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1401,tempInt));
      __label__ = 1005; break;
    case 1005: 
      __label__ = 1006; break;
    case 1006: 
      __label__ = 1007; break;
    case 1007: 
      __label__ = 1008; break;
    case 1008: 
      __label__ = 1009; break;
    case 1009: 
      var $1402=HEAP32[((_intent)>>2)];
      var $cmp2608=(($1402)|0) < 0;
      if ($cmp2608) { __label__ = 1010; break; } else { __label__ = 1027; break; }
    case 1010: 
      var $1403=HEAP32[((_read_ptr)>>2)];
      var $1404=HEAP32[((_read_info_ptr)>>2)];
      var $call2612=_png_get_iCCP($1403, $1404, $name, $compression_method2611, $profile, $proflen);
      var $tobool2613=(($call2612)|0)!=0;
      if ($tobool2613) { __label__ = 1011; break; } else { __label__ = 1021; break; }
    case 1011: 
      var $1405=HEAP32[((_verbose)>>2)];
      var $cmp2615=(($1405)|0) > 1;
      if ($cmp2615) { __label__ = 1012; break; } else { __label__ = 1013; break; }
    case 1012: 
      var $1406=HEAP32[(($proflen)>>2)];
      var $call2618=_printf(((STRING_TABLE.__str238)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1406,tempInt));
      __label__ = 1013; break;
    case 1013: 
      var $1407=HEAP32[((_iccp_length)>>2)];
      var $tobool2620=(($1407)|0)!=0;
      if ($tobool2620) { __label__ = 1014; break; } else { __label__ = 1018; break; }
    case 1014: 
      var $1408=HEAP32[((_first_trial)>>2)];
      var $tobool2622=(($1408)|0)!=0;
      if ($tobool2622) { __label__ = 1015; break; } else { __label__ = 1017; break; }
    case 1015: 
      var $1409=HEAP32[((_verbose)>>2)];
      var $cmp2624=(($1409)|0) > 0;
      if ($cmp2624) { __label__ = 1016; break; } else { __label__ = 1017; break; }
    case 1016: 
      var $call2627=_printf(((STRING_TABLE.__str239)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1017; break;
    case 1017: 
      __label__ = 1018; break;
    case 1018: 
      var $1410=$argv_addr;
      var $call2630=_keep_chunk(((STRING_TABLE.__str23)|0), $1410);
      var $tobool2631=(($call2630)|0)!=0;
      if ($tobool2631) { __label__ = 1019; break; } else { __label__ = 1020; break; }
    case 1019: 
      var $1411=HEAP32[((_write_ptr)>>2)];
      var $1412=HEAP32[((_write_info_ptr)>>2)];
      var $1413=HEAP32[(($name)>>2)];
      var $1414=HEAP32[(($compression_method2611)>>2)];
      var $1415=HEAP32[(($profile)>>2)];
      var $1416=HEAP32[(($proflen)>>2)];
      _png_set_iCCP($1411, $1412, $1413, $1414, $1415, $1416);
      __label__ = 1020; break;
    case 1020: 
      __label__ = 1026; break;
    case 1021: 
      var $1417=HEAP32[((_iccp_length)>>2)];
      var $tobool2635=(($1417)|0)!=0;
      if ($tobool2635) { __label__ = 1022; break; } else { __label__ = 1025; break; }
    case 1022: 
      var $1418=HEAP32[((_write_ptr)>>2)];
      var $1419=HEAP32[((_write_info_ptr)>>2)];
      var $1420=HEAP32[((_iccp_text)>>2)];
      var $1421=HEAP32[((_iccp_length)>>2)];
      _png_set_iCCP($1418, $1419, ((_iccp_name)|0), 0, $1420, $1421);
      var $1422=HEAP32[((_verbose)>>2)];
      var $cmp2637=(($1422)|0) > 1;
      if ($cmp2637) { __label__ = 1023; break; } else { __label__ = 1024; break; }
    case 1023: 
      var $1423=HEAP32[((_iccp_length)>>2)];
      var $call2640=_printf(((STRING_TABLE.__str240)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1423,tempInt));
      __label__ = 1024; break;
    case 1024: 
      __label__ = 1025; break;
    case 1025: 
      __label__ = 1026; break;
    case 1026: 
      __label__ = 1027; break;
    case 1027: 
      var $1424=HEAP32[((_read_ptr)>>2)];
      var $1425=HEAP32[((_read_info_ptr)>>2)];
      var $call2645=_png_get_oFFs($1424, $1425, $offset_x, $offset_y, $unit_type);
      var $tobool2646=(($call2645)|0)!=0;
      if ($tobool2646) { __label__ = 1028; break; } else { __label__ = 1038; break; }
    case 1028: 
      var $1426=HEAP32[(($offset_x)>>2)];
      var $cmp2648=(($1426)|0)==0;
      if ($cmp2648) { __label__ = 1029; break; } else { __label__ = 1034; break; }
    case 1029: 
      var $1427=HEAP32[(($offset_y)>>2)];
      var $cmp2651=(($1427)|0)==0;
      if ($cmp2651) { __label__ = 1030; break; } else { __label__ = 1034; break; }
    case 1030: 
      var $1428=HEAP32[((_verbose)>>2)];
      var $cmp2654=(($1428)|0) > 0;
      if ($cmp2654) { __label__ = 1031; break; } else { __label__ = 1033; break; }
    case 1031: 
      var $1429=HEAP32[((_first_trial)>>2)];
      var $tobool2657=(($1429)|0)!=0;
      if ($tobool2657) { __label__ = 1032; break; } else { __label__ = 1033; break; }
    case 1032: 
      var $1430=HEAP32[((_stdout)>>2)];
      var $call2659=_fprintf($1430, ((STRING_TABLE.__str241)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1033; break;
    case 1033: 
      __label__ = 1037; break;
    case 1034: 
      var $1431=$argv_addr;
      var $call2662=_keep_chunk(((STRING_TABLE.__str45)|0), $1431);
      var $tobool2663=(($call2662)|0)!=0;
      if ($tobool2663) { __label__ = 1035; break; } else { __label__ = 1036; break; }
    case 1035: 
      var $1432=HEAP32[((_write_ptr)>>2)];
      var $1433=HEAP32[((_write_info_ptr)>>2)];
      var $1434=HEAP32[(($offset_x)>>2)];
      var $1435=HEAP32[(($offset_y)>>2)];
      var $1436=HEAP32[(($unit_type)>>2)];
      _png_set_oFFs($1432, $1433, $1434, $1435, $1436);
      __label__ = 1036; break;
    case 1036: 
      __label__ = 1037; break;
    case 1037: 
      __label__ = 1038; break;
    case 1038: 
      var $1437=HEAP32[((_read_ptr)>>2)];
      var $1438=HEAP32[((_read_info_ptr)>>2)];
      var $call2668=_png_get_pCAL($1437, $1438, $purpose, $X0, $X1, $type, $nparams, $units, $params);
      var $tobool2669=(($call2668)|0)!=0;
      if ($tobool2669) { __label__ = 1039; break; } else { __label__ = 1042; break; }
    case 1039: 
      var $1439=$argv_addr;
      var $call2671=_keep_chunk(((STRING_TABLE.__str25)|0), $1439);
      var $tobool2672=(($call2671)|0)!=0;
      if ($tobool2672) { __label__ = 1040; break; } else { __label__ = 1041; break; }
    case 1040: 
      var $1440=HEAP32[((_write_ptr)>>2)];
      var $1441=HEAP32[((_write_info_ptr)>>2)];
      var $1442=HEAP32[(($purpose)>>2)];
      var $1443=HEAP32[(($X0)>>2)];
      var $1444=HEAP32[(($X1)>>2)];
      var $1445=HEAP32[(($type)>>2)];
      var $1446=HEAP32[(($nparams)>>2)];
      var $1447=HEAP32[(($units)>>2)];
      var $1448=HEAP32[(($params)>>2)];
      _png_set_pCAL($1440, $1441, $1442, $1443, $1444, $1445, $1446, $1447, $1448);
      __label__ = 1041; break;
    case 1041: 
      __label__ = 1042; break;
    case 1042: 
      var $1449=HEAP32[((_resolution)>>2)];
      var $cmp2677=(($1449)|0)==0;
      if ($cmp2677) { __label__ = 1043; break; } else { __label__ = 1055; break; }
    case 1043: 
      var $1450=HEAP32[((_read_ptr)>>2)];
      var $1451=HEAP32[((_read_info_ptr)>>2)];
      var $call2680=_png_get_pHYs($1450, $1451, $res_x, $res_y, $unit_type2676);
      var $tobool2681=(($call2680)|0)!=0;
      if ($tobool2681) { __label__ = 1044; break; } else { __label__ = 1054; break; }
    case 1044: 
      var $1452=HEAP32[(($res_x)>>2)];
      var $cmp2683=(($1452)|0)==0;
      if ($cmp2683) { __label__ = 1045; break; } else { __label__ = 1050; break; }
    case 1045: 
      var $1453=HEAP32[(($res_y)>>2)];
      var $cmp2686=(($1453)|0)==0;
      if ($cmp2686) { __label__ = 1046; break; } else { __label__ = 1050; break; }
    case 1046: 
      var $1454=HEAP32[((_verbose)>>2)];
      var $cmp2689=(($1454)|0) > 0;
      if ($cmp2689) { __label__ = 1047; break; } else { __label__ = 1049; break; }
    case 1047: 
      var $1455=HEAP32[((_first_trial)>>2)];
      var $tobool2692=(($1455)|0)!=0;
      if ($tobool2692) { __label__ = 1048; break; } else { __label__ = 1049; break; }
    case 1048: 
      var $1456=HEAP32[((_stdout)>>2)];
      var $call2694=_fprintf($1456, ((STRING_TABLE.__str242)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1049; break;
    case 1049: 
      __label__ = 1053; break;
    case 1050: 
      var $1457=$argv_addr;
      var $call2697=_keep_chunk(((STRING_TABLE.__str47)|0), $1457);
      var $tobool2698=(($call2697)|0)!=0;
      if ($tobool2698) { __label__ = 1051; break; } else { __label__ = 1052; break; }
    case 1051: 
      var $1458=HEAP32[((_write_ptr)>>2)];
      var $1459=HEAP32[((_write_info_ptr)>>2)];
      var $1460=HEAP32[(($res_x)>>2)];
      var $1461=HEAP32[(($res_y)>>2)];
      var $1462=HEAP32[(($unit_type2676)>>2)];
      _png_set_pHYs($1458, $1459, $1460, $1461, $1462);
      __label__ = 1052; break;
    case 1052: 
      __label__ = 1053; break;
    case 1053: 
      __label__ = 1054; break;
    case 1054: 
      __label__ = 1059; break;
    case 1055: 
      HEAP32[(($unit_type2676)>>2)]=1;
      var $1463=HEAP32[((_resolution)>>2)];
      var $conv2704=(($1463)|0);
      var $div=$conv2704/0.0254;
      var $add2705=$div+0.5;
      var $conv2706=($add2705 >= 0 ? Math.floor($add2705) : Math.ceil($add2705));
      HEAP32[(($res_y)>>2)]=$conv2706;
      HEAP32[(($res_x)>>2)]=$conv2706;
      var $1464=HEAP32[((_write_ptr)>>2)];
      var $1465=HEAP32[((_write_info_ptr)>>2)];
      var $1466=HEAP32[(($res_x)>>2)];
      var $1467=HEAP32[(($res_y)>>2)];
      var $1468=HEAP32[(($unit_type2676)>>2)];
      _png_set_pHYs($1464, $1465, $1466, $1467, $1468);
      var $1469=HEAP32[((_verbose)>>2)];
      var $cmp2707=(($1469)|0) > 0;
      if ($cmp2707) { __label__ = 1056; break; } else { __label__ = 1058; break; }
    case 1056: 
      var $1470=HEAP32[((_first_trial)>>2)];
      var $tobool2710=(($1470)|0)!=0;
      if ($tobool2710) { __label__ = 1057; break; } else { __label__ = 1058; break; }
    case 1057: 
      var $1471=HEAP32[((_stdout)>>2)];
      var $1472=HEAP32[(($res_x)>>2)];
      var $1473=HEAP32[(($res_y)>>2)];
      var $call2712=_fprintf($1471, ((STRING_TABLE.__str243)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1472,HEAP32[((tempInt+4)>>2)]=$1473,tempInt));
      __label__ = 1058; break;
    case 1058: 
      __label__ = 1059; break;
    case 1059: 
      var $1474=HEAP32[((_read_ptr)>>2)];
      var $1475=HEAP32[((_read_info_ptr)>>2)];
      var $call2715=_png_get_hIST($1474, $1475, $hist);
      var $tobool2716=(($call2715)|0)!=0;
      if ($tobool2716) { __label__ = 1060; break; } else { __label__ = 1063; break; }
    case 1060: 
      var $1476=$argv_addr;
      var $call2718=_keep_chunk(((STRING_TABLE.__str21)|0), $1476);
      var $tobool2719=(($call2718)|0)!=0;
      if ($tobool2719) { __label__ = 1061; break; } else { __label__ = 1062; break; }
    case 1061: 
      var $1477=HEAP32[((_write_ptr)>>2)];
      var $1478=HEAP32[((_write_info_ptr)>>2)];
      var $1479=HEAP32[(($hist)>>2)];
      _png_set_hIST($1477, $1478, $1479);
      __label__ = 1062; break;
    case 1062: 
      __label__ = 1063; break;
    case 1063: 
      var $1480=HEAP32[((_read_ptr)>>2)];
      var $1481=HEAP32[((_read_info_ptr)>>2)];
      var $call2723=_png_get_tRNS($1480, $1481, $trans, $num_trans, $trans_values);
      var $tobool2724=(($call2723)|0)!=0;
      if ($tobool2724) { __label__ = 1064; break; } else { __label__ = 1104; break; }
    case 1064: 
      var $1482=HEAP32[((_verbose)>>2)];
      var $cmp2726=(($1482)|0) > 1;
      if ($cmp2726) { __label__ = 1065; break; } else { __label__ = 1067; break; }
    case 1065: 
      var $1483=HEAP32[((_first_trial)>>2)];
      var $tobool2729=(($1483)|0)!=0;
      if ($tobool2729) { __label__ = 1066; break; } else { __label__ = 1067; break; }
    case 1066: 
      var $1484=HEAP32[((_stdout)>>2)];
      var $call2731=_fprintf($1484, ((STRING_TABLE.__str244)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1067; break;
    case 1067: 
      var $1485=HEAP32[((_have_trns)>>2)];
      var $cmp2733=(($1485)|0)==1;
      if ($cmp2733) { __label__ = 1068; break; } else { __label__ = 1072; break; }
    case 1068: 
      var $1486=HEAP32[((_first_trial)>>2)];
      var $tobool2736=(($1486)|0)!=0;
      if ($tobool2736) { __label__ = 1069; break; } else { __label__ = 1071; break; }
    case 1069: 
      var $1487=HEAP32[((_verbose)>>2)];
      var $cmp2738=(($1487)|0) > 0;
      if ($cmp2738) { __label__ = 1070; break; } else { __label__ = 1071; break; }
    case 1070: 
      var $call2741=_printf(((STRING_TABLE.__str245)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1071; break;
    case 1071: 
      __label__ = 1072; break;
    case 1072: 
      var $1488=$argv_addr;
      var $call2744=_keep_chunk(((STRING_TABLE.__str56)|0), $1488);
      var $tobool2745=(($call2744)|0)!=0;
      if ($tobool2745) { __label__ = 1073; break; } else { __label__ = 1103; break; }
    case 1073: 
      $last_nonmax=-1;
      var $1489=HEAP32[(($trans_values)>>2)];
      var $red2747=(($1489+2)|0);
      var $1490=HEAP16[(($red2747)>>1)];
      HEAP16[((_trns_red)>>1)]=$1490;
      var $1491=HEAP32[(($trans_values)>>2)];
      var $green2748=(($1491+4)|0);
      var $1492=HEAP16[(($green2748)>>1)];
      HEAP16[((_trns_green)>>1)]=$1492;
      var $1493=HEAP32[(($trans_values)>>2)];
      var $blue2749=(($1493+6)|0);
      var $1494=HEAP16[(($blue2749)>>1)];
      HEAP16[((_trns_blue)>>1)]=$1494;
      var $1495=HEAP32[(($trans_values)>>2)];
      var $gray2750=(($1495+8)|0);
      var $1496=HEAP16[(($gray2750)>>1)];
      HEAP16[((_trns_gray)>>1)]=$1496;
      var $1497=HEAP32[((_output_color_type)>>2)];
      var $cmp2751=(($1497)|0)==3;
      if ($cmp2751) { __label__ = 1074; break; } else { __label__ = 1097; break; }
    case 1074: 
      HEAP32[((_ia)>>2)]=0;
      __label__ = 1075; break;
    case 1075: 
      var $1498=HEAP32[((_ia)>>2)];
      var $1499=HEAP32[(($num_trans)>>2)];
      var $cmp2755=(($1498)|0) < (($1499)|0);
      if ($cmp2755) { __label__ = 1076; break; } else { __label__ = 1078; break; }
    case 1076: 
      var $1500=HEAP32[((_ia)>>2)];
      var $1501=HEAP32[(($trans)>>2)];
      var $arrayidx2758=(($1501+$1500)|0);
      var $1502=HEAP8[($arrayidx2758)];
      var $1503=HEAP32[((_ia)>>2)];
      var $arrayidx2759=((_trns_array+$1503)|0);
      HEAP8[($arrayidx2759)]=$1502;
      __label__ = 1077; break;
    case 1077: 
      var $1504=HEAP32[((_ia)>>2)];
      var $inc2761=(($1504+1)|0);
      HEAP32[((_ia)>>2)]=$inc2761;
      __label__ = 1075; break;
    case 1078: 
      __label__ = 1079; break;
    case 1079: 
      var $1505=HEAP32[((_ia)>>2)];
      var $cmp2764=(($1505)|0) < 256;
      if ($cmp2764) { __label__ = 1080; break; } else { __label__ = 1082; break; }
    case 1080: 
      var $1506=HEAP32[((_ia)>>2)];
      var $arrayidx2767=((_trns_array+$1506)|0);
      HEAP8[($arrayidx2767)]=-1;
      __label__ = 1081; break;
    case 1081: 
      var $1507=HEAP32[((_ia)>>2)];
      var $inc2769=(($1507+1)|0);
      HEAP32[((_ia)>>2)]=$inc2769;
      __label__ = 1079; break;
    case 1082: 
      HEAP32[((_ia)>>2)]=0;
      __label__ = 1083; break;
    case 1083: 
      var $1508=HEAP32[((_ia)>>2)];
      var $cmp2772=(($1508)|0) < 256;
      if ($cmp2772) { __label__ = 1084; break; } else { __label__ = 1088; break; }
    case 1084: 
      var $1509=HEAP32[((_ia)>>2)];
      var $arrayidx2775=((_trns_array+$1509)|0);
      var $1510=HEAPU8[($arrayidx2775)];
      var $conv2776=(($1510)&255);
      var $cmp2777=(($conv2776)|0)!=255;
      if ($cmp2777) { __label__ = 1085; break; } else { __label__ = 1086; break; }
    case 1085: 
      var $1511=HEAP32[((_ia)>>2)];
      $last_nonmax=$1511;
      __label__ = 1086; break;
    case 1086: 
      __label__ = 1087; break;
    case 1087: 
      var $1512=HEAP32[((_ia)>>2)];
      var $inc2782=(($1512+1)|0);
      HEAP32[((_ia)>>2)]=$inc2782;
      __label__ = 1083; break;
    case 1088: 
      var $1513=HEAP32[((_first_trial)>>2)];
      var $tobool2784=(($1513)|0)!=0;
      if ($tobool2784) { __label__ = 1089; break; } else { __label__ = 1096; break; }
    case 1089: 
      var $1514=HEAP32[((_verbose)>>2)];
      var $cmp2786=(($1514)|0) > 0;
      if ($cmp2786) { __label__ = 1090; break; } else { __label__ = 1096; break; }
    case 1090: 
      var $1515=$last_nonmax;
      var $cmp2789=(($1515)|0) < 0;
      if ($cmp2789) { __label__ = 1091; break; } else { __label__ = 1092; break; }
    case 1091: 
      var $1516=HEAP32[((_stdout)>>2)];
      var $call2792=_fprintf($1516, ((STRING_TABLE.__str246)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1095; break;
    case 1092: 
      var $1517=$last_nonmax;
      var $add2794=(($1517+1)|0);
      var $1518=HEAP32[(($num_trans)>>2)];
      var $cmp2795=(($add2794)|0) < (($1518)|0);
      if ($cmp2795) { __label__ = 1093; break; } else { __label__ = 1094; break; }
    case 1093: 
      var $1519=HEAP32[((_stdout)>>2)];
      var $call2798=_fprintf($1519, ((STRING_TABLE.__str247)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1094; break;
    case 1094: 
      __label__ = 1095; break;
    case 1095: 
      __label__ = 1096; break;
    case 1096: 
      var $1520=$last_nonmax;
      var $add2802=(($1520+1)|0);
      HEAP32[(($num_trans)>>2)]=$add2802;
      __label__ = 1097; break;
    case 1097: 
      var $1521=HEAP32[((_verbose)>>2)];
      var $cmp2804=(($1521)|0) > 1;
      if ($cmp2804) { __label__ = 1098; break; } else { __label__ = 1099; break; }
    case 1098: 
      var $1522=HEAP32[((_stdout)>>2)];
      var $1523=HEAP32[(($num_trans)>>2)];
      var $call2807=_fprintf($1522, ((STRING_TABLE.__str248)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1523,tempInt));
      __label__ = 1099; break;
    case 1099: 
      var $1524=HEAP32[((_output_color_type)>>2)];
      var $cmp2809=(($1524)|0)!=3;
      if ($cmp2809) { __label__ = 1101; break; } else { __label__ = 1100; break; }
    case 1100: 
      var $1525=HEAP32[(($num_trans)>>2)];
      var $tobool2812=(($1525)|0)!=0;
      if ($tobool2812) { __label__ = 1101; break; } else { __label__ = 1102; break; }
    case 1101: 
      var $1526=HEAP32[((_write_ptr)>>2)];
      var $1527=HEAP32[((_write_info_ptr)>>2)];
      var $1528=HEAP32[(($trans)>>2)];
      var $1529=HEAP32[(($num_trans)>>2)];
      var $1530=HEAP32[(($trans_values)>>2)];
      _png_set_tRNS($1526, $1527, $1528, $1529, $1530);
      __label__ = 1102; break;
    case 1102: 
      __label__ = 1103; break;
    case 1103: 
      __label__ = 1132; break;
    case 1104: 
      var $1531=HEAP32[((_have_trns)>>2)];
      var $cmp2817=(($1531)|0)==1;
      if ($cmp2817) { __label__ = 1105; break; } else { __label__ = 1126; break; }
    case 1105: 
      var $1532=HEAP16[((_trns_index)>>1)];
      var $conv2820=(($1532) & 255);
      $index_data=$conv2820;
      var $1533=$index_data;
      var $conv2821=(($1533)&255);
      var $add2822=(($conv2821+1)|0);
      HEAP32[(($num_trans)>>2)]=$add2822;
      var $1534=HEAP32[((_verbose)>>2)];
      var $cmp2823=(($1534)|0) > 1;
      if ($cmp2823) { __label__ = 1106; break; } else { __label__ = 1107; break; }
    case 1106: 
      var $1535=HEAP32[((_stdout)>>2)];
      var $1536=HEAP32[(($num_trans)>>2)];
      var $call2826=_fprintf($1535, ((STRING_TABLE.__str249)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1536,tempInt));
      __label__ = 1107; break;
    case 1107: 
      var $1537=HEAP32[((_output_color_type)>>2)];
      var $cmp2828=(($1537)|0)==3;
      if ($cmp2828) { __label__ = 1108; break; } else { __label__ = 1117; break; }
    case 1108: 
      HEAP32[(($trans_values)>>2)]=0;
      HEAP32[((_ia)>>2)]=0;
      __label__ = 1109; break;
    case 1109: 
      var $1538=HEAP32[((_ia)>>2)];
      var $1539=HEAP32[(($num_trans)>>2)];
      var $cmp2832=(($1538)|0) < (($1539)|0);
      if ($cmp2832) { __label__ = 1110; break; } else { __label__ = 1112; break; }
    case 1110: 
      var $1540=HEAP32[((_ia)>>2)];
      var $arrayidx2835=((_trans_in+$1540)|0);
      var $1541=HEAP8[($arrayidx2835)];
      var $1542=HEAP32[((_ia)>>2)];
      var $arrayidx2836=((_trns_array+$1542)|0);
      HEAP8[($arrayidx2836)]=$1541;
      __label__ = 1111; break;
    case 1111: 
      var $1543=HEAP32[((_ia)>>2)];
      var $inc2838=(($1543+1)|0);
      HEAP32[((_ia)>>2)]=$inc2838;
      __label__ = 1109; break;
    case 1112: 
      __label__ = 1113; break;
    case 1113: 
      var $1544=HEAP32[((_ia)>>2)];
      var $cmp2841=(($1544)|0) < 256;
      if ($cmp2841) { __label__ = 1114; break; } else { __label__ = 1116; break; }
    case 1114: 
      var $1545=HEAP32[((_ia)>>2)];
      var $arrayidx2844=((_trns_array+$1545)|0);
      HEAP8[($arrayidx2844)]=-1;
      __label__ = 1115; break;
    case 1115: 
      var $1546=HEAP32[((_ia)>>2)];
      var $inc2846=(($1546+1)|0);
      HEAP32[((_ia)>>2)]=$inc2846;
      __label__ = 1113; break;
    case 1116: 
      __label__ = 1122; break;
    case 1117: 
      HEAP32[((_ia)>>2)]=0;
      __label__ = 1118; break;
    case 1118: 
      var $1547=HEAP32[((_ia)>>2)];
      var $cmp2850=(($1547)|0) < 256;
      if ($cmp2850) { __label__ = 1119; break; } else { __label__ = 1121; break; }
    case 1119: 
      var $1548=HEAP32[((_ia)>>2)];
      var $arrayidx2853=((_trns_array+$1548)|0);
      HEAP8[($arrayidx2853)]=-1;
      __label__ = 1120; break;
    case 1120: 
      var $1549=HEAP32[((_ia)>>2)];
      var $inc2855=(($1549+1)|0);
      HEAP32[((_ia)>>2)]=$inc2855;
      __label__ = 1118; break;
    case 1121: 
      var $1550=$index_data;
      var $idxprom=(($1550)&255);
      var $arrayidx2857=((_trns_array+$idxprom)|0);
      HEAP8[($arrayidx2857)]=0;
      var $1551=$index_data;
      var $index=(($trans_data)|0);
      HEAP8[($index)]=$1551;
      var $1552=HEAP16[((_trns_red)>>1)];
      var $red2858=(($trans_data+2)|0);
      HEAP16[(($red2858)>>1)]=$1552;
      var $1553=HEAP16[((_trns_green)>>1)];
      var $green2859=(($trans_data+4)|0);
      HEAP16[(($green2859)>>1)]=$1553;
      var $1554=HEAP16[((_trns_blue)>>1)];
      var $blue2860=(($trans_data+6)|0);
      HEAP16[(($blue2860)>>1)]=$1554;
      var $1555=HEAP16[((_trns_gray)>>1)];
      var $gray2861=(($trans_data+8)|0);
      HEAP16[(($gray2861)>>1)]=$1555;
      HEAP32[(($trans_values)>>2)]=$trans_data;
      __label__ = 1122; break;
    case 1122: 
      var $1556=HEAP32[((_first_trial)>>2)];
      var $tobool2863=(($1556)|0)!=0;
      if ($tobool2863) { __label__ = 1123; break; } else { __label__ = 1125; break; }
    case 1123: 
      var $1557=HEAP32[((_verbose)>>2)];
      var $cmp2865=(($1557)|0) > 0;
      if ($cmp2865) { __label__ = 1124; break; } else { __label__ = 1125; break; }
    case 1124: 
      var $call2868=_printf(((STRING_TABLE.__str250)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1125; break;
    case 1125: 
      var $1558=HEAP32[((_write_ptr)>>2)];
      var $1559=HEAP32[((_write_info_ptr)>>2)];
      var $1560=HEAP32[(($num_trans)>>2)];
      var $1561=HEAP32[(($trans_values)>>2)];
      _png_set_tRNS($1558, $1559, ((_trns_array)|0), $1560, $1561);
      HEAP32[((_things_have_changed)>>2)]=1;
      __label__ = 1131; break;
    case 1126: 
      HEAP32[((_ia)>>2)]=0;
      __label__ = 1127; break;
    case 1127: 
      var $1562=HEAP32[((_ia)>>2)];
      var $cmp2872=(($1562)|0) < 256;
      if ($cmp2872) { __label__ = 1128; break; } else { __label__ = 1130; break; }
    case 1128: 
      var $1563=HEAP32[((_ia)>>2)];
      var $arrayidx2875=((_trns_array+$1563)|0);
      HEAP8[($arrayidx2875)]=-1;
      __label__ = 1129; break;
    case 1129: 
      var $1564=HEAP32[((_ia)>>2)];
      var $inc2877=(($1564+1)|0);
      HEAP32[((_ia)>>2)]=$inc2877;
      __label__ = 1127; break;
    case 1130: 
      __label__ = 1131; break;
    case 1131: 
      __label__ = 1132; break;
    case 1132: 
      var $1565=HEAP32[((_verbose)>>2)];
      var $cmp2881=(($1565)|0) > 1;
      if ($cmp2881) { __label__ = 1133; break; } else { __label__ = 1155; break; }
    case 1133: 
      var $1566=HEAP32[((_first_trial)>>2)];
      var $tobool2884=(($1566)|0)!=0;
      if ($tobool2884) { __label__ = 1134; break; } else { __label__ = 1155; break; }
    case 1134: 
      $last=-1;
      $i=0;
      __label__ = 1135; break;
    case 1135: 
      var $1567=HEAP32[((_ia)>>2)];
      var $1568=HEAP32[((_num_palette)>>2)];
      var $cmp2887=(($1567)|0) < (($1568)|0);
      if ($cmp2887) { __label__ = 1136; break; } else { __label__ = 1140; break; }
    case 1136: 
      var $1569=HEAP32[((_ia)>>2)];
      var $arrayidx2890=((_trns_array+$1569)|0);
      var $1570=HEAPU8[($arrayidx2890)];
      var $conv2891=(($1570)&255);
      var $cmp2892=(($conv2891)|0)!=255;
      if ($cmp2892) { __label__ = 1137; break; } else { __label__ = 1138; break; }
    case 1137: 
      var $1571=HEAP32[((_ia)>>2)];
      $last=$1571;
      __label__ = 1138; break;
    case 1138: 
      __label__ = 1139; break;
    case 1139: 
      var $1572=HEAP32[((_ia)>>2)];
      var $inc2897=(($1572+1)|0);
      HEAP32[((_ia)>>2)]=$inc2897;
      __label__ = 1135; break;
    case 1140: 
      var $1573=$last;
      var $cmp2899=(($1573)|0) >= 0;
      if ($cmp2899) { __label__ = 1141; break; } else { __label__ = 1154; break; }
    case 1141: 
      var $1574=HEAP32[((_stdout)>>2)];
      var $call2902=_fprintf($1574, ((STRING_TABLE.__str251)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1575=HEAP32[((_output_color_type)>>2)];
      var $cmp2903=(($1575)|0)==3;
      if ($cmp2903) { __label__ = 1142; break; } else { __label__ = 1147; break; }
    case 1142: 
      $i=0;
      __label__ = 1143; break;
    case 1143: 
      var $1576=HEAP32[((_ia)>>2)];
      var $1577=HEAP32[((_num_palette)>>2)];
      var $cmp2907=(($1576)|0) < (($1577)|0);
      if ($cmp2907) { __label__ = 1144; break; } else { __label__ = 1146; break; }
    case 1144: 
      var $1578=HEAP32[((_stdout)>>2)];
      var $1579=HEAP32[((_ia)>>2)];
      var $1580=HEAP32[((_ia)>>2)];
      var $arrayidx2910=((_trns_array+$1580)|0);
      var $1581=HEAPU8[($arrayidx2910)];
      var $conv2911=(($1581)&255);
      var $call2912=_fprintf($1578, ((STRING_TABLE.__str252)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1579,HEAP32[((tempInt+4)>>2)]=$conv2911,tempInt));
      __label__ = 1145; break;
    case 1145: 
      var $1582=HEAP32[((_ia)>>2)];
      var $inc2914=(($1582+1)|0);
      HEAP32[((_ia)>>2)]=$inc2914;
      __label__ = 1143; break;
    case 1146: 
      __label__ = 1153; break;
    case 1147: 
      var $1583=HEAP32[((_output_color_type)>>2)];
      var $cmp2917=(($1583)|0)==0;
      if ($cmp2917) { __label__ = 1148; break; } else { __label__ = 1149; break; }
    case 1148: 
      var $1584=HEAP32[((_stdout)>>2)];
      var $1585=HEAPU16[((_trns_gray)>>1)];
      var $conv2920=(($1585)&65535);
      var $call2921=_fprintf($1584, ((STRING_TABLE.__str253)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv2920,tempInt));
      __label__ = 1152; break;
    case 1149: 
      var $1586=HEAP32[((_output_color_type)>>2)];
      var $cmp2923=(($1586)|0)==2;
      if ($cmp2923) { __label__ = 1150; break; } else { __label__ = 1151; break; }
    case 1150: 
      var $1587=HEAP32[((_stdout)>>2)];
      var $1588=HEAPU16[((_trns_red)>>1)];
      var $conv2926=(($1588)&65535);
      var $1589=HEAPU16[((_trns_green)>>1)];
      var $conv2927=(($1589)&65535);
      var $1590=HEAPU16[((_trns_blue)>>1)];
      var $conv2928=(($1590)&65535);
      var $call2929=_fprintf($1587, ((STRING_TABLE.__str254)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv2926,HEAP32[((tempInt+4)>>2)]=$conv2927,HEAP32[((tempInt+8)>>2)]=$conv2928,tempInt));
      __label__ = 1151; break;
    case 1151: 
      __label__ = 1152; break;
    case 1152: 
      __label__ = 1153; break;
    case 1153: 
      __label__ = 1154; break;
    case 1154: 
      __label__ = 1155; break;
    case 1155: 
      var $1591=HEAP32[((_read_ptr)>>2)];
      var $1592=HEAP32[((_read_info_ptr)>>2)];
      var $call2935=_png_get_PLTE($1591, $1592, _palette, _num_palette);
      var $tobool2936=(($call2935)|0)!=0;
      if ($tobool2936) { __label__ = 1156; break; } else { __label__ = 1173; break; }
    case 1156: 
      var $1593=HEAP32[((_plte_len)>>2)];
      var $cmp2938=(($1593)|0) > 0;
      if ($cmp2938) { __label__ = 1157; break; } else { __label__ = 1158; break; }
    case 1157: 
      var $1594=HEAP32[((_plte_len)>>2)];
      HEAP32[((_num_palette)>>2)]=$1594;
      __label__ = 1158; break;
    case 1158: 
      var $1595=HEAP32[((_do_pplt)>>2)];
      var $tobool2942=(($1595)|0)!=0;
      if ($tobool2942) { __label__ = 1159; break; } else { __label__ = 1160; break; }
    case 1159: 
      var $call2944=_printf(((STRING_TABLE.__str255)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((_pplt_string)|0),tempInt));
      var $call2945=_printf(((STRING_TABLE.__str256)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1160; break;
    case 1160: 
      var $1596=HEAP32[((_output_color_type)>>2)];
      var $cmp2947=(($1596)|0)==3;
      if ($cmp2947) { __label__ = 1161; break; } else { __label__ = 1162; break; }
    case 1161: 
      var $1597=HEAP32[((_write_ptr)>>2)];
      var $1598=HEAP32[((_write_info_ptr)>>2)];
      var $1599=HEAP32[((_palette)>>2)];
      var $1600=HEAP32[((_num_palette)>>2)];
      _png_set_PLTE($1597, $1598, $1599, $1600);
      __label__ = 1165; break;
    case 1162: 
      var $1601=$argv_addr;
      var $call2951=_keep_chunk(((STRING_TABLE.__str37)|0), $1601);
      var $tobool2952=(($call2951)|0)!=0;
      if ($tobool2952) { __label__ = 1163; break; } else { __label__ = 1164; break; }
    case 1163: 
      var $1602=HEAP32[((_write_ptr)>>2)];
      var $1603=HEAP32[((_write_info_ptr)>>2)];
      var $1604=HEAP32[((_palette)>>2)];
      var $1605=HEAP32[((_num_palette)>>2)];
      _png_set_PLTE($1602, $1603, $1604, $1605);
      __label__ = 1164; break;
    case 1164: 
      __label__ = 1165; break;
    case 1165: 
      var $1606=HEAP32[((_verbose)>>2)];
      var $cmp2956=(($1606)|0) > 1;
      if ($cmp2956) { __label__ = 1166; break; } else { __label__ = 1172; break; }
    case 1166: 
      var $1607=HEAP32[((_first_trial)>>2)];
      var $tobool2959=(($1607)|0)!=0;
      if ($tobool2959) { __label__ = 1167; break; } else { __label__ = 1172; break; }
    case 1167: 
      var $1608=HEAP32[((_palette)>>2)];
      $p=$1608;
      var $1609=HEAP32[((_stdout)>>2)];
      var $call2961=_fprintf($1609, ((STRING_TABLE.__str257)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1610=HEAP32[((_stdout)>>2)];
      var $call2962=_fprintf($1610, ((STRING_TABLE.__str258)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      __label__ = 1168; break;
    case 1168: 
      var $1611=$i;
      var $1612=HEAP32[((_num_palette)>>2)];
      var $cmp2964=(($1611)|0) < (($1612)|0);
      if ($cmp2964) { __label__ = 1169; break; } else { __label__ = 1171; break; }
    case 1169: 
      var $1613=HEAP32[((_stdout)>>2)];
      var $1614=$i;
      var $1615=$p;
      var $red2967=(($1615)|0);
      var $1616=HEAPU8[($red2967)];
      var $conv2968=(($1616)&255);
      var $1617=$p;
      var $green2969=(($1617+1)|0);
      var $1618=HEAPU8[($green2969)];
      var $conv2970=(($1618)&255);
      var $1619=$p;
      var $blue2971=(($1619+2)|0);
      var $1620=HEAPU8[($blue2971)];
      var $conv2972=(($1620)&255);
      var $1621=$p;
      var $red2973=(($1621)|0);
      var $1622=HEAPU8[($red2973)];
      var $conv2974=(($1622)&255);
      var $1623=$p;
      var $green2975=(($1623+1)|0);
      var $1624=HEAPU8[($green2975)];
      var $conv2976=(($1624)&255);
      var $1625=$p;
      var $blue2977=(($1625+2)|0);
      var $1626=HEAPU8[($blue2977)];
      var $conv2978=(($1626)&255);
      var $1627=$i;
      var $arrayidx2979=((_trns_array+$1627)|0);
      var $1628=HEAPU8[($arrayidx2979)];
      var $conv2980=(($1628)&255);
      var $call2981=_fprintf($1613, ((STRING_TABLE.__str259)|0), (tempInt=STACKTOP,STACKTOP += 32,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1614,HEAP32[((tempInt+4)>>2)]=$conv2968,HEAP32[((tempInt+8)>>2)]=$conv2970,HEAP32[((tempInt+12)>>2)]=$conv2972,HEAP32[((tempInt+16)>>2)]=$conv2974,HEAP32[((tempInt+20)>>2)]=$conv2976,HEAP32[((tempInt+24)>>2)]=$conv2978,HEAP32[((tempInt+28)>>2)]=$conv2980,tempInt));
      var $1629=$p;
      var $incdec_ptr2982=(($1629+3)|0);
      $p=$incdec_ptr2982;
      __label__ = 1170; break;
    case 1170: 
      var $1630=$i;
      var $inc2984=(($1630+1)|0);
      $i=$inc2984;
      __label__ = 1168; break;
    case 1171: 
      __label__ = 1172; break;
    case 1172: 
      __label__ = 1173; break;
    case 1173: 
      var $1631=HEAP32[((_read_ptr)>>2)];
      var $1632=HEAP32[((_read_info_ptr)>>2)];
      var $call2988=_png_get_sBIT($1631, $1632, $sig_bit);
      var $tobool2989=(($call2988)|0)!=0;
      if ($tobool2989) { __label__ = 1174; break; } else { __label__ = 1194; break; }
    case 1174: 
      var $1633=$argv_addr;
      var $call2991=_keep_chunk(((STRING_TABLE.__str49)|0), $1633);
      var $tobool2992=(($call2991)|0)!=0;
      if ($tobool2992) { __label__ = 1175; break; } else { __label__ = 1193; break; }
    case 1175: 
      var $1634=HEAP32[((_input_color_type)>>2)];
      var $cmp2994=(($1634)|0)==0;
      if ($cmp2994) { __label__ = 1177; break; } else { __label__ = 1176; break; }
    case 1176: 
      var $1635=HEAP32[((_input_color_type)>>2)];
      var $cmp2997=(($1635)|0)==4;
      if ($cmp2997) { __label__ = 1177; break; } else { __label__ = 1181; break; }
    case 1177: 
      var $1636=HEAP32[((_output_color_type)>>2)];
      var $cmp3000=(($1636)|0)==2;
      if ($cmp3000) { __label__ = 1180; break; } else { __label__ = 1178; break; }
    case 1178: 
      var $1637=HEAP32[((_output_color_type)>>2)];
      var $cmp3003=(($1637)|0)==6;
      if ($cmp3003) { __label__ = 1180; break; } else { __label__ = 1179; break; }
    case 1179: 
      var $1638=HEAP32[((_output_color_type)>>2)];
      var $cmp3006=(($1638)|0)==3;
      if ($cmp3006) { __label__ = 1180; break; } else { __label__ = 1181; break; }
    case 1180: 
      var $1639=HEAP32[(($sig_bit)>>2)];
      var $gray3009=(($1639+3)|0);
      var $1640=HEAP8[($gray3009)];
      var $1641=HEAP32[(($sig_bit)>>2)];
      var $blue3010=(($1641+2)|0);
      HEAP8[($blue3010)]=$1640;
      var $1642=HEAP32[(($sig_bit)>>2)];
      var $green3011=(($1642+1)|0);
      HEAP8[($green3011)]=$1640;
      var $1643=HEAP32[(($sig_bit)>>2)];
      var $red3012=(($1643)|0);
      HEAP8[($red3012)]=$1640;
      __label__ = 1181; break;
    case 1181: 
      var $1644=HEAP32[((_input_color_type)>>2)];
      var $cmp3014=(($1644)|0)==2;
      if ($cmp3014) { __label__ = 1184; break; } else { __label__ = 1182; break; }
    case 1182: 
      var $1645=HEAP32[((_input_color_type)>>2)];
      var $cmp3017=(($1645)|0)==6;
      if ($cmp3017) { __label__ = 1184; break; } else { __label__ = 1183; break; }
    case 1183: 
      var $1646=HEAP32[((_output_color_type)>>2)];
      var $cmp3020=(($1646)|0)==3;
      if ($cmp3020) { __label__ = 1184; break; } else { __label__ = 1187; break; }
    case 1184: 
      var $1647=HEAP32[((_output_color_type)>>2)];
      var $cmp3023=(($1647)|0)==0;
      if ($cmp3023) { __label__ = 1186; break; } else { __label__ = 1185; break; }
    case 1185: 
      var $1648=HEAP32[((_output_color_type)>>2)];
      var $cmp3026=(($1648)|0)==4;
      if ($cmp3026) { __label__ = 1186; break; } else { __label__ = 1187; break; }
    case 1186: 
      var $1649=HEAP32[(($sig_bit)>>2)];
      var $green3029=(($1649+1)|0);
      var $1650=HEAP8[($green3029)];
      var $1651=HEAP32[(($sig_bit)>>2)];
      var $gray3030=(($1651+3)|0);
      HEAP8[($gray3030)]=$1650;
      __label__ = 1187; break;
    case 1187: 
      var $1652=HEAP32[((_input_color_type)>>2)];
      var $cmp3032=(($1652)|0)==0;
      if ($cmp3032) { __label__ = 1189; break; } else { __label__ = 1188; break; }
    case 1188: 
      var $1653=HEAP32[((_input_color_type)>>2)];
      var $cmp3035=(($1653)|0)==2;
      if ($cmp3035) { __label__ = 1189; break; } else { __label__ = 1192; break; }
    case 1189: 
      var $1654=HEAP32[((_output_color_type)>>2)];
      var $cmp3038=(($1654)|0)==4;
      if ($cmp3038) { __label__ = 1191; break; } else { __label__ = 1190; break; }
    case 1190: 
      var $1655=HEAP32[((_output_color_type)>>2)];
      var $cmp3041=(($1655)|0)==6;
      if ($cmp3041) { __label__ = 1191; break; } else { __label__ = 1192; break; }
    case 1191: 
      var $1656=HEAP32[(($sig_bit)>>2)];
      var $alpha=(($1656+4)|0);
      HEAP8[($alpha)]=1;
      __label__ = 1192; break;
    case 1192: 
      var $1657=HEAP32[((_write_ptr)>>2)];
      var $1658=HEAP32[((_write_info_ptr)>>2)];
      var $1659=HEAP32[(($sig_bit)>>2)];
      _png_set_sBIT($1657, $1658, $1659);
      __label__ = 1193; break;
    case 1193: 
      __label__ = 1194; break;
    case 1194: 
      var $1660=HEAP32[((_read_ptr)>>2)];
      var $1661=HEAP32[((_read_info_ptr)>>2)];
      var $call3047=_png_get_sCAL($1660, $1661, $unit, $scal_width, $scal_height);
      var $tobool3048=(($call3047)|0)!=0;
      if ($tobool3048) { __label__ = 1195; break; } else { __label__ = 1196; break; }
    case 1195: 
      var $1662=HEAP32[((_write_ptr)>>2)];
      var $1663=HEAP32[((_write_info_ptr)>>2)];
      var $1664=HEAP32[(($unit)>>2)];
      var $1665=(tempDoubleI32[0]=HEAP32[(($scal_width)>>2)],tempDoubleI32[1]=HEAP32[(($scal_width+4)>>2)],tempDoubleF64[0]);
      var $1666=(tempDoubleI32[0]=HEAP32[(($scal_height)>>2)],tempDoubleI32[1]=HEAP32[(($scal_height+4)>>2)],tempDoubleF64[0]);
      _png_set_sCAL($1662, $1663, $1664, $1665, $1666);
      __label__ = 1196; break;
    case 1196: 
      var $1667=HEAP32[((_read_ptr)>>2)];
      var $1668=HEAP32[((_read_info_ptr)>>2)];
      var $call3051=_png_get_sPLT($1667, $1668, $entries);
      $num_entries=$call3051;
      var $1669=$num_entries;
      var $tobool3052=(($1669)|0)!=0;
      if ($tobool3052) { __label__ = 1197; break; } else { __label__ = 1200; break; }
    case 1197: 
      var $1670=$argv_addr;
      var $call3054=_keep_chunk(((STRING_TABLE.__str29)|0), $1670);
      var $tobool3055=(($call3054)|0)!=0;
      if ($tobool3055) { __label__ = 1198; break; } else { __label__ = 1199; break; }
    case 1198: 
      var $1671=HEAP32[((_write_ptr)>>2)];
      var $1672=HEAP32[((_write_info_ptr)>>2)];
      var $1673=HEAP32[(($entries)>>2)];
      var $1674=$num_entries;
      _png_set_sPLT($1671, $1672, $1673, $1674);
      __label__ = 1199; break;
    case 1199: 
      var $1675=HEAP32[((_read_ptr)>>2)];
      var $1676=HEAP32[((_read_info_ptr)>>2)];
      var $1677=$num_entries;
      _png_free_data($1675, $1676, 32, $1677);
      __label__ = 1200; break;
    case 1200: 
      HEAP32[(($num_text)>>2)]=0;
      var $1678=HEAP32[((_read_ptr)>>2)];
      var $1679=HEAP32[((_read_info_ptr)>>2)];
      var $call3059=_png_get_text($1678, $1679, $text_ptr, $num_text);
      var $cmp3060=(($call3059)>>>0) > 0;
      if ($cmp3060) { __label__ = 1202; break; } else { __label__ = 1201; break; }
    case 1201: 
      var $1680=HEAP32[((_text_inputs)>>2)];
      var $tobool3063=(($1680)|0)!=0;
      if ($tobool3063) { __label__ = 1202; break; } else { __label__ = 1261; break; }
    case 1202: 
      var $1681=HEAP32[((_verbose)>>2)];
      var $cmp3065=(($1681)|0) > 1;
      if ($cmp3065) { __label__ = 1203; break; } else { __label__ = 1204; break; }
    case 1203: 
      var $1682=HEAP32[(($num_text)>>2)];
      var $call3068=_printf(((STRING_TABLE.__str260)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1682,tempInt));
      __label__ = 1204; break;
    case 1204: 
      var $1683=HEAP32[((_verbose)>>2)];
      var $cmp3070=(($1683)|0) > 1;
      if ($cmp3070) { __label__ = 1205; break; } else { __label__ = 1218; break; }
    case 1205: 
      var $1684=HEAP32[((_first_trial)>>2)];
      var $tobool3073=(($1684)|0)!=0;
      if ($tobool3073) { __label__ = 1206; break; } else { __label__ = 1218; break; }
    case 1206: 
      var $1685=HEAP32[(($num_text)>>2)];
      var $cmp3075=(($1685)|0) > 0;
      if ($cmp3075) { __label__ = 1207; break; } else { __label__ = 1218; break; }
    case 1207: 
      $ntext=0;
      __label__ = 1208; break;
    case 1208: 
      var $1686=$ntext;
      var $1687=HEAP32[(($num_text)>>2)];
      var $cmp3079=(($1686)|0) < (($1687)|0);
      if ($cmp3079) { __label__ = 1209; break; } else { __label__ = 1217; break; }
    case 1209: 
      var $1688=HEAP32[((_stdout)>>2)];
      var $1689=$ntext;
      var $1690=$ntext;
      var $1691=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3082=(($1691+$1690*28)|0);
      var $key=(($arrayidx3082+4)|0);
      var $1692=HEAP32[(($key)>>2)];
      var $call3083=_fprintf($1688, ((STRING_TABLE.__str261)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1689,HEAP32[((tempInt+4)>>2)]=$1692,tempInt));
      var $1693=$ntext;
      var $1694=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3084=(($1694+$1693*28)|0);
      var $text_length=(($arrayidx3084+12)|0);
      var $1695=HEAP32[(($text_length)>>2)];
      var $tobool3085=(($1695)|0)!=0;
      if ($tobool3085) { __label__ = 1210; break; } else { __label__ = 1211; break; }
    case 1210: 
      var $1696=HEAP32[((_stdout)>>2)];
      var $1697=$ntext;
      var $1698=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3087=(($1698+$1697*28)|0);
      var $text=(($arrayidx3087+8)|0);
      var $1699=HEAP32[(($text)>>2)];
      var $call3088=_fprintf($1696, ((STRING_TABLE.__str262)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1699,tempInt));
      __label__ = 1215; break;
    case 1211: 
      var $1700=$ntext;
      var $1701=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3090=(($1701+$1700*28)|0);
      var $itxt_length=(($arrayidx3090+16)|0);
      var $1702=HEAP32[(($itxt_length)>>2)];
      var $tobool3091=(($1702)|0)!=0;
      if ($tobool3091) { __label__ = 1212; break; } else { __label__ = 1213; break; }
    case 1212: 
      var $1703=HEAP32[((_stdout)>>2)];
      var $1704=$ntext;
      var $1705=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3093=(($1705+$1704*28)|0);
      var $lang=(($arrayidx3093+20)|0);
      var $1706=HEAP32[(($lang)>>2)];
      var $1707=$ntext;
      var $1708=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3094=(($1708+$1707*28)|0);
      var $lang_key=(($arrayidx3094+24)|0);
      var $1709=HEAP32[(($lang_key)>>2)];
      var $call3095=_fprintf($1703, ((STRING_TABLE.__str263)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1706,HEAP32[((tempInt+4)>>2)]=$1709,tempInt));
      var $1710=HEAP32[((_stdout)>>2)];
      var $1711=$ntext;
      var $1712=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3096=(($1712+$1711*28)|0);
      var $text3097=(($arrayidx3096+8)|0);
      var $1713=HEAP32[(($text3097)>>2)];
      var $call3098=_fprintf($1710, ((STRING_TABLE.__str264)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1713,tempInt));
      __label__ = 1214; break;
    case 1213: 
      var $1714=HEAP32[((_stdout)>>2)];
      var $call3100=_fprintf($1714, ((STRING_TABLE.__str265)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1214; break;
    case 1214: 
      __label__ = 1215; break;
    case 1215: 
      __label__ = 1216; break;
    case 1216: 
      var $1715=$ntext;
      var $inc3104=(($1715+1)|0);
      $ntext=$inc3104;
      __label__ = 1208; break;
    case 1217: 
      __label__ = 1218; break;
    case 1218: 
      var $1716=HEAP32[(($num_text)>>2)];
      var $cmp3107=(($1716)|0) > 0;
      if ($cmp3107) { __label__ = 1219; break; } else { __label__ = 1245; break; }
    case 1219: 
      var $1717=$argv_addr;
      var $call3110=_keep_chunk(((STRING_TABLE.__str36)|0), $1717);
      var $tobool3111=(($call3110)|0)!=0;
      if ($tobool3111) { __label__ = 1220; break; } else { __label__ = 1244; break; }
    case 1220: 
      var $1718=HEAP32[(($num_text)>>2)];
      $num_to_write=$1718;
      $ntext=0;
      __label__ = 1221; break;
    case 1221: 
      var $1719=$ntext;
      var $1720=HEAP32[(($num_text)>>2)];
      var $cmp3114=(($1719)|0) < (($1720)|0);
      if ($cmp3114) { __label__ = 1222; break; } else { __label__ = 1241; break; }
    case 1222: 
      var $1721=HEAP32[((_first_trial)>>2)];
      var $tobool3117=(($1721)|0)!=0;
      if ($tobool3117) { __label__ = 1223; break; } else { __label__ = 1226; break; }
    case 1223: 
      var $1722=HEAP32[((_verbose)>>2)];
      var $cmp3119=(($1722)|0) > 2;
      if ($cmp3119) { __label__ = 1224; break; } else { __label__ = 1225; break; }
    case 1224: 
      var $1723=$ntext;
      var $1724=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3122=(($1724+$1723*28)|0);
      var $compression=(($arrayidx3122)|0);
      var $1725=HEAP32[(($compression)>>2)];
      var $call3123=_printf(((STRING_TABLE.__str266)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1725,tempInt));
      __label__ = 1225; break;
    case 1225: 
      __label__ = 1226; break;
    case 1226: 
      var $1726=$ntext;
      var $1727=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3126=(($1727+$1726*28)|0);
      var $compression3127=(($arrayidx3126)|0);
      var $1728=HEAP32[(($compression3127)>>2)];
      var $cmp3128=(($1728)|0)==-1;
      if ($cmp3128) { __label__ = 1227; break; } else { __label__ = 1230; break; }
    case 1227: 
      var $1729=$argv_addr;
      var $call3131=_keep_chunk(((STRING_TABLE.__str55)|0), $1729);
      var $tobool3132=(($call3131)|0)!=0;
      if ($tobool3132) { __label__ = 1229; break; } else { __label__ = 1228; break; }
    case 1228: 
      var $1730=$ntext;
      var $1731=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3134=(($1731+$1730*28)|0);
      var $key3135=(($arrayidx3134+4)|0);
      var $1732=HEAP32[(($key3135)>>2)];
      var $arrayidx3136=(($1732)|0);
      HEAP8[($arrayidx3136)]=0;
      var $1733=$num_to_write;
      var $dec3137=(($1733-1)|0);
      $num_to_write=$dec3137;
      __label__ = 1229; break;
    case 1229: 
      __label__ = 1230; break;
    case 1230: 
      var $1734=$ntext;
      var $1735=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3140=(($1735+$1734*28)|0);
      var $compression3141=(($arrayidx3140)|0);
      var $1736=HEAP32[(($compression3141)>>2)];
      var $cmp3142=(($1736)|0)==0;
      if ($cmp3142) { __label__ = 1231; break; } else { __label__ = 1234; break; }
    case 1231: 
      var $1737=$argv_addr;
      var $call3145=_keep_chunk(((STRING_TABLE.__str58)|0), $1737);
      var $tobool3146=(($call3145)|0)!=0;
      if ($tobool3146) { __label__ = 1233; break; } else { __label__ = 1232; break; }
    case 1232: 
      var $1738=$ntext;
      var $1739=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3148=(($1739+$1738*28)|0);
      var $key3149=(($arrayidx3148+4)|0);
      var $1740=HEAP32[(($key3149)>>2)];
      var $arrayidx3150=(($1740)|0);
      HEAP8[($arrayidx3150)]=0;
      var $1741=$num_to_write;
      var $dec3151=(($1741-1)|0);
      $num_to_write=$dec3151;
      __label__ = 1233; break;
    case 1233: 
      __label__ = 1234; break;
    case 1234: 
      var $1742=$ntext;
      var $1743=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3154=(($1743+$1742*28)|0);
      var $compression3155=(($arrayidx3154)|0);
      var $1744=HEAP32[(($compression3155)>>2)];
      var $cmp3156=(($1744)|0)==1;
      if ($cmp3156) { __label__ = 1236; break; } else { __label__ = 1235; break; }
    case 1235: 
      var $1745=$ntext;
      var $1746=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3159=(($1746+$1745*28)|0);
      var $compression3160=(($arrayidx3159)|0);
      var $1747=HEAP32[(($compression3160)>>2)];
      var $cmp3161=(($1747)|0)==2;
      if ($cmp3161) { __label__ = 1236; break; } else { __label__ = 1239; break; }
    case 1236: 
      var $1748=$argv_addr;
      var $call3164=_keep_chunk(((STRING_TABLE.__str43)|0), $1748);
      var $tobool3165=(($call3164)|0)!=0;
      if ($tobool3165) { __label__ = 1238; break; } else { __label__ = 1237; break; }
    case 1237: 
      var $1749=$ntext;
      var $1750=HEAP32[(($text_ptr)>>2)];
      var $arrayidx3167=(($1750+$1749*28)|0);
      var $key3168=(($arrayidx3167+4)|0);
      var $1751=HEAP32[(($key3168)>>2)];
      var $arrayidx3169=(($1751)|0);
      HEAP8[($arrayidx3169)]=0;
      var $1752=$num_to_write;
      var $dec3170=(($1752-1)|0);
      $num_to_write=$dec3170;
      __label__ = 1238; break;
    case 1238: 
      __label__ = 1239; break;
    case 1239: 
      __label__ = 1240; break;
    case 1240: 
      var $1753=$ntext;
      var $inc3174=(($1753+1)|0);
      $ntext=$inc3174;
      __label__ = 1221; break;
    case 1241: 
      var $1754=$num_to_write;
      var $cmp3176=(($1754)|0) > 0;
      if ($cmp3176) { __label__ = 1242; break; } else { __label__ = 1243; break; }
    case 1242: 
      var $1755=HEAP32[((_write_ptr)>>2)];
      var $1756=HEAP32[((_write_info_ptr)>>2)];
      var $1757=HEAP32[(($text_ptr)>>2)];
      var $1758=HEAP32[(($num_text)>>2)];
      _png_set_text($1755, $1756, $1757, $1758);
      __label__ = 1243; break;
    case 1243: 
      __label__ = 1244; break;
    case 1244: 
      __label__ = 1245; break;
    case 1245: 
      $ntext=0;
      __label__ = 1246; break;
    case 1246: 
      var $1759=$ntext;
      var $1760=HEAP32[((_text_inputs)>>2)];
      var $cmp3183=(($1759)|0) < (($1760)|0);
      if ($cmp3183) { __label__ = 1247; break; } else { __label__ = 1260; break; }
    case 1247: 
      var $1761=$ntext;
      var $arrayidx3186=((_text_where+($1761<<2))|0);
      var $1762=HEAP32[(($arrayidx3186)>>2)];
      var $cmp3187=(($1762)|0)==1;
      if ($cmp3187) { __label__ = 1248; break; } else { __label__ = 1258; break; }
    case 1248: 
      var $1763=HEAP32[((_write_ptr)>>2)];
      var $call3190=_png_malloc($1763, 28);
      var $1764=$call3190;
      $added_text=$1764;
      var $1765=$ntext;
      var $mul3191=(($1765*80)|0);
      var $arrayidx3192=((_text_keyword+$mul3191)|0);
      var $1766=$added_text;
      var $arrayidx3193=(($1766)|0);
      var $key3194=(($arrayidx3193+4)|0);
      HEAP32[(($key3194)>>2)]=$arrayidx3192;
      var $1767=$ntext;
      var $mul3195=(($1767*80)|0);
      var $arrayidx3196=((_text_lang+$mul3195)|0);
      var $1768=$added_text;
      var $arrayidx3197=(($1768)|0);
      var $lang3198=(($arrayidx3197+20)|0);
      HEAP32[(($lang3198)>>2)]=$arrayidx3196;
      var $1769=$ntext;
      var $mul3199=(($1769*80)|0);
      var $arrayidx3200=((_text_lang_key+$mul3199)|0);
      var $1770=$added_text;
      var $arrayidx3201=(($1770)|0);
      var $lang_key3202=(($arrayidx3201+24)|0);
      HEAP32[(($lang_key3202)>>2)]=$arrayidx3200;
      var $1771=$ntext;
      var $mul3203=((($1771<<11))|0);
      var $arrayidx3204=((_text_text+$mul3203)|0);
      var $1772=$added_text;
      var $arrayidx3205=(($1772)|0);
      var $text3206=(($arrayidx3205+8)|0);
      HEAP32[(($text3206)>>2)]=$arrayidx3204;
      var $1773=$ntext;
      var $arrayidx3207=((_text_compression+($1773<<2))|0);
      var $1774=HEAP32[(($arrayidx3207)>>2)];
      var $1775=$added_text;
      var $arrayidx3208=(($1775)|0);
      var $compression3209=(($arrayidx3208)|0);
      HEAP32[(($compression3209)>>2)]=$1774;
      var $1776=HEAP32[((_write_ptr)>>2)];
      var $1777=HEAP32[((_write_info_ptr)>>2)];
      var $1778=$added_text;
      _png_set_text($1776, $1777, $1778, 1);
      var $1779=HEAP32[((_verbose)>>2)];
      var $cmp3210=(($1779)|0) > 0;
      if ($cmp3210) { __label__ = 1249; break; } else { __label__ = 1257; break; }
    case 1249: 
      var $1780=HEAP32[((_first_trial)>>2)];
      var $tobool3213=(($1780)|0)!=0;
      if ($tobool3213) { __label__ = 1250; break; } else { __label__ = 1257; break; }
    case 1250: 
      var $1781=$added_text;
      var $arrayidx3215=(($1781)|0);
      var $compression3216=(($arrayidx3215)|0);
      var $1782=HEAP32[(($compression3216)>>2)];
      var $cmp3217=(($1782)|0) < 0;
      if ($cmp3217) { __label__ = 1251; break; } else { __label__ = 1252; break; }
    case 1251: 
      var $call3220=_printf(((STRING_TABLE.__str267)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1256; break;
    case 1252: 
      var $1783=$added_text;
      var $arrayidx3222=(($1783)|0);
      var $compression3223=(($arrayidx3222)|0);
      var $1784=HEAP32[(($compression3223)>>2)];
      var $cmp3224=(($1784)|0)==0;
      if ($cmp3224) { __label__ = 1253; break; } else { __label__ = 1254; break; }
    case 1253: 
      var $call3227=_printf(((STRING_TABLE.__str268)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1255; break;
    case 1254: 
      var $1785=$added_text;
      var $arrayidx3229=(($1785)|0);
      var $compression3230=(($arrayidx3229)|0);
      var $1786=HEAP32[(($compression3230)>>2)];
      var $cmp3231=(($1786)|0)==1;
      var $cond=$cmp3231 ? (((STRING_TABLE.__str270)|0)) : (((STRING_TABLE.__str271)|0));
      var $call3233=_printf(((STRING_TABLE.__str269)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$cond,tempInt));
      __label__ = 1255; break;
    case 1255: 
      __label__ = 1256; break;
    case 1256: 
      __label__ = 1257; break;
    case 1257: 
      var $1787=HEAP32[((_write_ptr)>>2)];
      var $1788=$added_text;
      var $1789=$1788;
      _png_free($1787, $1789);
      $added_text=0;
      __label__ = 1258; break;
    case 1258: 
      __label__ = 1259; break;
    case 1259: 
      var $1790=$ntext;
      var $inc3239=(($1790+1)|0);
      $ntext=$inc3239;
      __label__ = 1246; break;
    case 1260: 
      __label__ = 1261; break;
    case 1261: 
      var $1791=HEAP32[((_read_ptr)>>2)];
      var $1792=HEAP32[((_read_info_ptr)>>2)];
      var $call3242=_png_get_tIME($1791, $1792, $mod_time);
      var $tobool3243=(($call3242)|0)!=0;
      if ($tobool3243) { __label__ = 1262; break; } else { __label__ = 1265; break; }
    case 1262: 
      var $1793=$argv_addr;
      var $call3245=_keep_chunk(((STRING_TABLE.__str31)|0), $1793);
      var $tobool3246=(($call3245)|0)!=0;
      if ($tobool3246) { __label__ = 1263; break; } else { __label__ = 1264; break; }
    case 1263: 
      var $1794=HEAP32[((_write_ptr)>>2)];
      var $1795=HEAP32[((_write_info_ptr)>>2)];
      var $1796=HEAP32[(($mod_time)>>2)];
      _png_set_tIME($1794, $1795, $1796);
      __label__ = 1264; break;
    case 1264: 
      __label__ = 1265; break;
    case 1265: 
      var $1797=HEAP32[((_read_ptr)>>2)];
      var $1798=HEAP32[((_read_info_ptr)>>2)];
      var $call3250=_png_get_unknown_chunks($1797, $1798, $unknowns);
      $num_unknowns=$call3250;
      var $1799=HEAP32[((_nosave)>>2)];
      var $cmp3251=(($1799)|0)==0;
      if ($cmp3251) { __label__ = 1266; break; } else { __label__ = 1270; break; }
    case 1266: 
      var $1800=HEAP32[((_ster_mode)>>2)];
      var $cmp3254=(($1800)|0) >= 0;
      if ($cmp3254) { __label__ = 1267; break; } else { __label__ = 1270; break; }
    case 1267: 
      var $1801=HEAP32[((_verbose)>>2)];
      var $cmp3257=(($1801)|0) > 1;
      if ($cmp3257) { __label__ = 1268; break; } else { __label__ = 1269; break; }
    case 1268: 
      var $1802=$num_unknowns;
      var $call3260=_printf(((STRING_TABLE.__str272)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1802,tempInt));
      __label__ = 1269; break;
    case 1269: 
      var $1803=HEAP32[((_read_ptr)>>2)];
      var $call3262=_png_malloc($1803, 20);
      var $1804=$call3262;
      $ster=$1804;
      var $1805=$ster;
      var $arrayidx3263=(($1805)|0);
      var $name3264=(($arrayidx3263)|0);
      var $arraydecay3265=(($name3264)|0);
      assert(5 % 1 === 0, 'memcpy given ' + 5 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($arraydecay3265)]=HEAP8[(((STRING_TABLE.__str53)|0))];HEAP8[($arraydecay3265+1)]=HEAP8[(((STRING_TABLE.__str53)|0)+1)];HEAP8[($arraydecay3265+2)]=HEAP8[(((STRING_TABLE.__str53)|0)+2)];HEAP8[($arraydecay3265+3)]=HEAP8[(((STRING_TABLE.__str53)|0)+3)];HEAP8[($arraydecay3265+4)]=HEAP8[(((STRING_TABLE.__str53)|0)+4)];
      var $1806=$ster;
      var $arrayidx3266=(($1806)|0);
      var $size=(($arrayidx3266+12)|0);
      HEAP32[(($size)>>2)]=1;
      var $1807=HEAP32[((_read_ptr)>>2)];
      var $call3267=_png_malloc($1807, 1);
      var $1808=$ster;
      var $arrayidx3268=(($1808)|0);
      var $data=(($arrayidx3268+8)|0);
      HEAP32[(($data)>>2)]=$call3267;
      var $1809=HEAP32[((_ster_mode)>>2)];
      var $conv3269=(($1809) & 255);
      var $1810=$ster;
      var $arrayidx3270=(($1810)|0);
      var $data3271=(($arrayidx3270+8)|0);
      var $1811=HEAP32[(($data3271)>>2)];
      var $arrayidx3272=(($1811)|0);
      HEAP8[($arrayidx3272)]=$conv3269;
      var $1812=HEAP32[((_read_ptr)>>2)];
      var $1813=HEAP32[((_read_info_ptr)>>2)];
      var $1814=$ster;
      _png_set_unknown_chunks($1812, $1813, $1814, 1);
      var $1815=HEAP32[((_read_ptr)>>2)];
      var $1816=$ster;
      var $arrayidx3273=(($1816)|0);
      var $data3274=(($arrayidx3273+8)|0);
      var $1817=HEAP32[(($data3274)>>2)];
      _png_free($1815, $1817);
      var $1818=HEAP32[((_read_ptr)>>2)];
      var $1819=$ster;
      var $1820=$1819;
      _png_free($1818, $1820);
      var $1821=$num_unknowns;
      var $inc3275=(($1821+1)|0);
      $num_unknowns=$inc3275;
      __label__ = 1270; break;
    case 1270: 
      var $1822=HEAP32[((_ster_mode)>>2)];
      var $cmp3277=(($1822)|0) >= 0;
      if ($cmp3277) { __label__ = 1271; break; } else { __label__ = 1272; break; }
    case 1271: 
      var $1823=HEAP32[((_read_ptr)>>2)];
      var $1824=HEAP32[((_read_info_ptr)>>2)];
      var $1825=$num_unknowns;
      var $sub3280=(($1825-1)|0);
      _png_set_unknown_chunk_location($1823, $1824, $sub3280, 1);
      __label__ = 1272; break;
    case 1272: 
      var $1826=HEAP32[((_verbose)>>2)];
      var $cmp3282=(($1826)|0) > 1;
      if ($cmp3282) { __label__ = 1273; break; } else { __label__ = 1274; break; }
    case 1273: 
      var $1827=$num_unknowns;
      var $call3285=_printf(((STRING_TABLE.__str273)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1827,tempInt));
      __label__ = 1274; break;
    case 1274: 
      var $1828=HEAP32[((_nosave)>>2)];
      var $cmp3287=(($1828)|0)==0;
      if ($cmp3287) { __label__ = 1275; break; } else { __label__ = 1295; break; }
    case 1275: 
      var $1829=$num_unknowns;
      var $tobool3290=(($1829)|0)!=0;
      if ($tobool3290) { __label__ = 1276; break; } else { __label__ = 1295; break; }
    case 1276: 
      var $1830=HEAP32[((_write_ptr)>>2)];
      var $1831=$num_unknowns;
      var $mul3292=(($1831*20)|0);
      var $call3293=_png_malloc($1830, $mul3292);
      var $1832=$call3293;
      $unknowns_keep=$1832;
      var $1833=HEAP32[((_verbose)>>2)];
      var $cmp3294=(($1833)|0) > 1;
      if ($cmp3294) { __label__ = 1277; break; } else { __label__ = 1278; break; }
    case 1277: 
      var $1834=$num_unknowns;
      var $call3297=_printf(((STRING_TABLE.__str274)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1834,tempInt));
      __label__ = 1278; break;
    case 1278: 
      $num_unknowns_keep=0;
      $i=0;
      __label__ = 1279; break;
    case 1279: 
      var $1835=$i;
      var $1836=$num_unknowns;
      var $cmp3300=(($1835)|0) < (($1836)|0);
      if ($cmp3300) { __label__ = 1280; break; } else { __label__ = 1288; break; }
    case 1280: 
      var $1837=HEAP32[((_verbose)>>2)];
      var $cmp3303=(($1837)|0) > 1;
      if ($cmp3303) { __label__ = 1281; break; } else { __label__ = 1282; break; }
    case 1281: 
      var $1838=$i;
      var $1839=$i;
      var $1840=HEAP32[(($unknowns)>>2)];
      var $arrayidx3306=(($1840+$1839*20)|0);
      var $name3307=(($arrayidx3306)|0);
      var $arraydecay3308=(($name3307)|0);
      var $call3309=_printf(((STRING_TABLE.__str275)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1838,HEAP32[((tempInt+4)>>2)]=$arraydecay3308,tempInt));
      __label__ = 1282; break;
    case 1282: 
      var $1841=HEAP32[((_verbose)>>2)];
      var $cmp3311=(($1841)|0) > 2;
      if ($cmp3311) { __label__ = 1283; break; } else { __label__ = 1284; break; }
    case 1283: 
      var $1842=$i;
      var $1843=$i;
      var $1844=HEAP32[(($unknowns)>>2)];
      var $arrayidx3314=(($1844+$1843*20)|0);
      var $name3315=(($arrayidx3314)|0);
      var $arraydecay3316=(($name3315)|0);
      var $1845=$i;
      var $1846=HEAP32[(($unknowns)>>2)];
      var $arrayidx3317=(($1846+$1845*20)|0);
      var $size3318=(($arrayidx3317+12)|0);
      var $1847=HEAP32[(($size3318)>>2)];
      var $1848=$i;
      var $1849=HEAP32[(($unknowns)>>2)];
      var $arrayidx3319=(($1849+$1848*20)|0);
      var $location=(($arrayidx3319+16)|0);
      var $1850=HEAPU8[($location)];
      var $conv3320=(($1850)&255);
      var $call3321=_printf(((STRING_TABLE.__str276)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1842,HEAP32[((tempInt+4)>>2)]=$arraydecay3316,HEAP32[((tempInt+8)>>2)]=$1847,HEAP32[((tempInt+12)>>2)]=$conv3320,tempInt));
      __label__ = 1284; break;
    case 1284: 
      var $1851=$i;
      var $1852=HEAP32[(($unknowns)>>2)];
      var $arrayidx3323=(($1852+$1851*20)|0);
      var $name3324=(($arrayidx3323)|0);
      var $arraydecay3325=(($name3324)|0);
      var $1853=$argv_addr;
      var $call3326=_keep_chunk($arraydecay3325, $1853);
      var $tobool3327=(($call3326)|0)!=0;
      if ($tobool3327) { __label__ = 1285; break; } else { __label__ = 1286; break; }
    case 1285: 
      var $1854=$num_unknowns_keep;
      var $1855=$unknowns_keep;
      var $arrayidx3329=(($1855+$1854*20)|0);
      var $1856=$arrayidx3329;
      var $1857=$i;
      var $1858=HEAP32[(($unknowns)>>2)];
      var $arrayidx3330=(($1858+$1857*20)|0);
      var $1859=$arrayidx3330;
      assert(20 % 1 === 0, 'memcpy given ' + 20 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($1856, $1859, 20, 1);
      var $1860=$num_unknowns_keep;
      var $inc3331=(($1860+1)|0);
      $num_unknowns_keep=$inc3331;
      __label__ = 1286; break;
    case 1286: 
      __label__ = 1287; break;
    case 1287: 
      var $1861=$i;
      var $inc3334=(($1861+1)|0);
      $i=$inc3334;
      __label__ = 1279; break;
    case 1288: 
      var $1862=HEAP32[((_verbose)>>2)];
      var $cmp3336=(($1862)|0) > 1;
      if ($cmp3336) { __label__ = 1289; break; } else { __label__ = 1290; break; }
    case 1289: 
      var $1863=$num_unknowns_keep;
      var $call3339=_printf(((STRING_TABLE.__str277)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1863,tempInt));
      __label__ = 1290; break;
    case 1290: 
      var $1864=HEAP32[((_write_ptr)>>2)];
      var $1865=HEAP32[((_write_info_ptr)>>2)];
      var $1866=$unknowns_keep;
      var $1867=$num_unknowns_keep;
      _png_set_unknown_chunks($1864, $1865, $1866, $1867);
      $i=0;
      __label__ = 1291; break;
    case 1291: 
      var $1868=$i;
      var $1869=$num_unknowns_keep;
      var $cmp3342=(($1868)|0) < (($1869)|0);
      if ($cmp3342) { __label__ = 1292; break; } else { __label__ = 1294; break; }
    case 1292: 
      var $1870=HEAP32[((_write_ptr)>>2)];
      var $1871=HEAP32[((_write_info_ptr)>>2)];
      var $1872=$i;
      var $1873=$i;
      var $1874=$unknowns_keep;
      var $arrayidx3345=(($1874+$1873*20)|0);
      var $location3346=(($arrayidx3345+16)|0);
      var $1875=HEAPU8[($location3346)];
      var $conv3347=(($1875)&255);
      _png_set_unknown_chunk_location($1870, $1871, $1872, $conv3347);
      __label__ = 1293; break;
    case 1293: 
      var $1876=$i;
      var $inc3349=(($1876+1)|0);
      $i=$inc3349;
      __label__ = 1291; break;
    case 1294: 
      var $1877=HEAP32[((_write_ptr)>>2)];
      var $1878=$unknowns_keep;
      var $1879=$1878;
      _png_free($1877, $1879);
      __label__ = 1295; break;
    case 1295: 
      var $1880=HEAP32[((_verbose)>>2)];
      var $cmp3352=(($1880)|0) > 1;
      if ($cmp3352) { __label__ = 1296; break; } else { __label__ = 1297; break; }
    case 1296: 
      var $call3355=_printf(((STRING_TABLE.__str278)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1297; break;
    case 1297: 
      var $1881=HEAP32[((_read_ptr)>>2)];
      var $1882=HEAP32[((_read_info_ptr)>>2)];
      _png_read_transform_info($1881, $1882);
      var $1883=HEAP32[((_nosave)>>2)];
      var $cmp3357=(($1883)|0)==0;
      if ($cmp3357) { __label__ = 1298; break; } else { __label__ = 1380; break; }
    case 1298: 
      var $1884=HEAP32[((_filter_type)>>2)];
      var $cmp3360=(($1884)|0)==0;
      if ($cmp3360) { __label__ = 1299; break; } else { __label__ = 1300; break; }
    case 1299: 
      var $1885=HEAP32[((_write_ptr)>>2)];
      _png_set_filter($1885, 0, 8);
      __label__ = 1316; break;
    case 1300: 
      var $1886=HEAP32[((_filter_type)>>2)];
      var $cmp3364=(($1886)|0)==1;
      if ($cmp3364) { __label__ = 1301; break; } else { __label__ = 1302; break; }
    case 1301: 
      var $1887=HEAP32[((_write_ptr)>>2)];
      _png_set_filter($1887, 0, 16);
      __label__ = 1315; break;
    case 1302: 
      var $1888=HEAP32[((_filter_type)>>2)];
      var $cmp3368=(($1888)|0)==2;
      if ($cmp3368) { __label__ = 1303; break; } else { __label__ = 1304; break; }
    case 1303: 
      var $1889=HEAP32[((_write_ptr)>>2)];
      _png_set_filter($1889, 0, 32);
      __label__ = 1314; break;
    case 1304: 
      var $1890=HEAP32[((_filter_type)>>2)];
      var $cmp3372=(($1890)|0)==3;
      if ($cmp3372) { __label__ = 1305; break; } else { __label__ = 1306; break; }
    case 1305: 
      var $1891=HEAP32[((_write_ptr)>>2)];
      _png_set_filter($1891, 0, 64);
      __label__ = 1313; break;
    case 1306: 
      var $1892=HEAP32[((_filter_type)>>2)];
      var $cmp3376=(($1892)|0)==4;
      if ($cmp3376) { __label__ = 1307; break; } else { __label__ = 1308; break; }
    case 1307: 
      var $1893=HEAP32[((_write_ptr)>>2)];
      _png_set_filter($1893, 0, 128);
      __label__ = 1312; break;
    case 1308: 
      var $1894=HEAP32[((_filter_type)>>2)];
      var $cmp3380=(($1894)|0)==5;
      if ($cmp3380) { __label__ = 1309; break; } else { __label__ = 1310; break; }
    case 1309: 
      var $1895=HEAP32[((_write_ptr)>>2)];
      _png_set_filter($1895, 0, 248);
      __label__ = 1311; break;
    case 1310: 
      var $1896=HEAP32[((_write_ptr)>>2)];
      _png_set_filter($1896, 0, 8);
      __label__ = 1311; break;
    case 1311: 
      __label__ = 1312; break;
    case 1312: 
      __label__ = 1313; break;
    case 1313: 
      __label__ = 1314; break;
    case 1314: 
      __label__ = 1315; break;
    case 1315: 
      __label__ = 1316; break;
    case 1316: 
      var $1897=HEAP32[((_do_loco)>>2)];
      var $tobool3390=(($1897)|0)!=0;
      if ($tobool3390) { __label__ = 1317; break; } else { __label__ = 1327; break; }
    case 1317: 
      var $1898=$mng_signature3392;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($1898)]=HEAP8[(((STRING_TABLE._main_mng_signature279)|0))];HEAP8[($1898+1)]=HEAP8[(((STRING_TABLE._main_mng_signature279)|0)+1)];HEAP8[($1898+2)]=HEAP8[(((STRING_TABLE._main_mng_signature279)|0)+2)];HEAP8[($1898+3)]=HEAP8[(((STRING_TABLE._main_mng_signature279)|0)+3)];HEAP8[($1898+4)]=HEAP8[(((STRING_TABLE._main_mng_signature279)|0)+4)];HEAP8[($1898+5)]=HEAP8[(((STRING_TABLE._main_mng_signature279)|0)+5)];HEAP8[($1898+6)]=HEAP8[(((STRING_TABLE._main_mng_signature279)|0)+6)];HEAP8[($1898+7)]=HEAP8[(((STRING_TABLE._main_mng_signature279)|0)+7)];
      var $1899=HEAP32[((_outname)>>2)];
      var $call3393=_strlen($1899);
      var $sub3394=(($call3393-3)|0);
      var $1900=HEAP32[((_outname)>>2)];
      var $arrayidx3395=(($1900+$sub3394)|0);
      var $1901=HEAP8[($arrayidx3395)];
      var $conv3396=(($1901 << 24) >> 24);
      var $cmp3397=(($conv3396)|0)==112;
      if ($cmp3397) { __label__ = 1318; break; } else { __label__ = 1319; break; }
    case 1318: 
      var $1902=HEAP32[((_read_ptr)>>2)];
      _png_warning($1902, ((STRING_TABLE.__str280)|0));
      __label__ = 1319; break;
    case 1319: 
      var $1903=HEAP32[((_write_ptr)>>2)];
      var $arrayidx3401=(($mng_signature3392)|0);
      _png_defaultwrite_data($1903, $arrayidx3401, 8);
      var $1904=HEAP32[((_write_ptr)>>2)];
      _png_set_sig_bytes($1904, 8);
      var $1905=HEAPU32[((_width)>>2)];
      var $shr=$1905 >>> 24;
      var $and=$shr & 255;
      var $conv3402=(($and) & 255);
      var $arrayidx3403=(($buff)|0);
      HEAP8[($arrayidx3403)]=$conv3402;
      var $1906=HEAPU32[((_width)>>2)];
      var $shr3404=$1906 >>> 16;
      var $and3405=$shr3404 & 255;
      var $conv3406=(($and3405) & 255);
      var $arrayidx3407=(($buff+1)|0);
      HEAP8[($arrayidx3407)]=$conv3406;
      var $1907=HEAPU32[((_width)>>2)];
      var $shr3408=$1907 >>> 8;
      var $and3409=$shr3408 & 255;
      var $conv3410=(($and3409) & 255);
      var $arrayidx3411=(($buff+2)|0);
      HEAP8[($arrayidx3411)]=$conv3410;
      var $1908=HEAP32[((_width)>>2)];
      var $and3412=$1908 & 255;
      var $conv3413=(($and3412) & 255);
      var $arrayidx3414=(($buff+3)|0);
      HEAP8[($arrayidx3414)]=$conv3413;
      var $1909=HEAPU32[((_height)>>2)];
      var $shr3415=$1909 >>> 24;
      var $and3416=$shr3415 & 255;
      var $conv3417=(($and3416) & 255);
      var $arrayidx3418=(($buff+4)|0);
      HEAP8[($arrayidx3418)]=$conv3417;
      var $1910=HEAPU32[((_height)>>2)];
      var $shr3419=$1910 >>> 16;
      var $and3420=$shr3419 & 255;
      var $conv3421=(($and3420) & 255);
      var $arrayidx3422=(($buff+5)|0);
      HEAP8[($arrayidx3422)]=$conv3421;
      var $1911=HEAPU32[((_height)>>2)];
      var $shr3423=$1911 >>> 8;
      var $and3424=$shr3423 & 255;
      var $conv3425=(($and3424) & 255);
      var $arrayidx3426=(($buff+6)|0);
      HEAP8[($arrayidx3426)]=$conv3425;
      var $1912=HEAP32[((_height)>>2)];
      var $and3427=$1912 & 255;
      var $conv3428=(($and3427) & 255);
      var $arrayidx3429=(($buff+7)|0);
      HEAP8[($arrayidx3429)]=$conv3428;
      $i=8;
      __label__ = 1320; break;
    case 1320: 
      var $1913=$i;
      var $cmp3431=(($1913)|0) < 27;
      if ($cmp3431) { __label__ = 1321; break; } else { __label__ = 1323; break; }
    case 1321: 
      var $1914=$i;
      var $arrayidx3434=(($buff+$1914)|0);
      HEAP8[($arrayidx3434)]=0;
      __label__ = 1322; break;
    case 1322: 
      var $1915=$i;
      var $inc3436=(($1915+1)|0);
      $i=$inc3436;
      __label__ = 1320; break;
    case 1323: 
      var $arrayidx3438=(($buff+15)|0);
      HEAP8[($arrayidx3438)]=2;
      var $arrayidx3439=(($buff+19)|0);
      HEAP8[($arrayidx3439)]=1;
      var $1916=HEAP32[((_output_color_type)>>2)];
      var $cmp3440=(($1916)|0)==6;
      if ($cmp3440) { __label__ = 1324; break; } else { __label__ = 1325; break; }
    case 1324: 
      var $arrayidx3443=(($buff+27)|0);
      HEAP8[($arrayidx3443)]=9;
      __label__ = 1326; break;
    case 1325: 
      var $arrayidx3445=(($buff+27)|0);
      HEAP8[($arrayidx3445)]=1;
      __label__ = 1326; break;
    case 1326: 
      var $1917=HEAP32[((_write_ptr)>>2)];
      var $arraydecay3447=(($buff)|0);
      _png_write_chunk($1917, ((STRING_TABLE._main_png_MHDR)|0), $arraydecay3447, 28);
      __label__ = 1327; break;
    case 1327: 
      _pngcrush_pause();
      var $1918=HEAP32[((_found_CgBI)>>2)];
      var $tobool3449=(($1918)|0)!=0;
      if ($tobool3449) { __label__ = 1328; break; } else { __label__ = 1329; break; }
    case 1328: 
      var $1919=HEAP32[((_read_ptr)>>2)];
      _png_warning($1919, ((STRING_TABLE.__str281)|0));
      var $1920=HEAP32[((_read_ptr)>>2)];
      _png_error($1920, ((STRING_TABLE.__str282)|0));
      __label__ = 1329; break;
    case 1329: 
      var $1921=HEAP32[((_verbose)>>2)];
      var $cmp3452=(($1921)|0) > 1;
      if ($cmp3452) { __label__ = 1330; break; } else { __label__ = 1331; break; }
    case 1330: 
      var $call3455=_printf(((STRING_TABLE.__str283)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1331; break;
    case 1331: 
      _pngcrush_pause();
      $channels=0;
      var $1922=HEAP32[((_write_ptr)>>2)];
      var $1923=HEAP32[((_z_strategy)>>2)];
      _png_set_compression_strategy($1922, $1923);
      var $1924=HEAP32[((_write_ptr)>>2)];
      var $1925=HEAP32[((_compression_mem_level)>>2)];
      _png_set_compression_mem_level($1924, $1925);
      var $1926=HEAP32[((_output_color_type)>>2)];
      var $cmp3457=(($1926)|0)==0;
      if ($cmp3457) { __label__ = 1332; break; } else { __label__ = 1333; break; }
    case 1332: 
      $channels=1;
      __label__ = 1333; break;
    case 1333: 
      var $1927=HEAP32[((_output_color_type)>>2)];
      var $cmp3461=(($1927)|0)==2;
      if ($cmp3461) { __label__ = 1334; break; } else { __label__ = 1335; break; }
    case 1334: 
      $channels=3;
      __label__ = 1335; break;
    case 1335: 
      var $1928=HEAP32[((_output_color_type)>>2)];
      var $cmp3465=(($1928)|0)==3;
      if ($cmp3465) { __label__ = 1336; break; } else { __label__ = 1337; break; }
    case 1336: 
      $channels=1;
      __label__ = 1337; break;
    case 1337: 
      var $1929=HEAP32[((_output_color_type)>>2)];
      var $cmp3469=(($1929)|0)==4;
      if ($cmp3469) { __label__ = 1338; break; } else { __label__ = 1339; break; }
    case 1338: 
      $channels=2;
      __label__ = 1339; break;
    case 1339: 
      var $1930=HEAP32[((_output_color_type)>>2)];
      var $cmp3473=(($1930)|0)==6;
      if ($cmp3473) { __label__ = 1340; break; } else { __label__ = 1341; break; }
    case 1340: 
      $channels=4;
      __label__ = 1341; break;
    case 1341: 
      var $1931=HEAP32[((_height)>>2)];
      var $1932=HEAP32[((_width)>>2)];
      var $1933=$channels;
      var $mul3477=(($1932*$1933)|0);
      var $1934=HEAP32[(($bit_depth)>>2)];
      var $mul3478=(($mul3477*$1934)|0);
      var $add3479=(($mul3478+15)|0);
      var $shr3480=$add3479 >>> 3;
      var $mul3481=(($1931*$shr3480)|0);
      var $add3482=(($mul3481+262)|0);
      $required_window=$add3482;
      var $1935=HEAP32[((_write_ptr)>>2)];
      var $call3483=_png_get_compression_buffer_size($1935);
      $zbuf_size=$call3483;
      var $1936=$zbuf_size;
      var $1937=HEAP32[((_max_idat_size)>>2)];
      var $cmp3484=(($1936)|0)!=(($1937)|0);
      if ($cmp3484) { __label__ = 1342; break; } else { __label__ = 1347; break; }
    case 1342: 
      var $1938=$required_window;
      $max_possible_size=$1938;
      var $1939=$max_possible_size;
      var $1940=HEAPU32[((_max_idat_size)>>2)];
      var $cmp3487=(($1939)>>>0) > (($1940)>>>0);
      if ($cmp3487) { __label__ = 1343; break; } else { __label__ = 1344; break; }
    case 1343: 
      var $1941=HEAP32[((_max_idat_size)>>2)];
      $max_possible_size=$1941;
      __label__ = 1344; break;
    case 1344: 
      var $1942=HEAP32[((_verbose)>>2)];
      var $cmp3491=(($1942)|0) > 2;
      if ($cmp3491) { __label__ = 1345; break; } else { __label__ = 1346; break; }
    case 1345: 
      var $1943=$max_possible_size;
      var $call3494=_printf(((STRING_TABLE.__str284)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1943,tempInt));
      __label__ = 1346; break;
    case 1346: 
      var $1944=HEAP32[((_write_ptr)>>2)];
      var $1945=$max_possible_size;
      _png_set_compression_buffer_size($1944, $1945);
      __label__ = 1347; break;
    case 1347: 
      var $1946=$required_window;
      var $cmp3497=(($1946)>>>0) <= 512;
      if ($cmp3497) { __label__ = 1348; break; } else { __label__ = 1349; break; }
    case 1348: 
      $compression_window=9;
      __label__ = 1365; break;
    case 1349: 
      var $1947=$required_window;
      var $cmp3501=(($1947)>>>0) <= 1024;
      if ($cmp3501) { __label__ = 1350; break; } else { __label__ = 1351; break; }
    case 1350: 
      $compression_window=10;
      __label__ = 1364; break;
    case 1351: 
      var $1948=$required_window;
      var $cmp3505=(($1948)>>>0) <= 2048;
      if ($cmp3505) { __label__ = 1352; break; } else { __label__ = 1353; break; }
    case 1352: 
      $compression_window=11;
      __label__ = 1363; break;
    case 1353: 
      var $1949=$required_window;
      var $cmp3509=(($1949)>>>0) <= 4096;
      if ($cmp3509) { __label__ = 1354; break; } else { __label__ = 1355; break; }
    case 1354: 
      $compression_window=12;
      __label__ = 1362; break;
    case 1355: 
      var $1950=$required_window;
      var $cmp3513=(($1950)>>>0) <= 8192;
      if ($cmp3513) { __label__ = 1356; break; } else { __label__ = 1357; break; }
    case 1356: 
      $compression_window=13;
      __label__ = 1361; break;
    case 1357: 
      var $1951=$required_window;
      var $cmp3517=(($1951)>>>0) <= 16384;
      if ($cmp3517) { __label__ = 1358; break; } else { __label__ = 1359; break; }
    case 1358: 
      $compression_window=14;
      __label__ = 1360; break;
    case 1359: 
      $compression_window=15;
      __label__ = 1360; break;
    case 1360: 
      __label__ = 1361; break;
    case 1361: 
      __label__ = 1362; break;
    case 1362: 
      __label__ = 1363; break;
    case 1363: 
      __label__ = 1364; break;
    case 1364: 
      __label__ = 1365; break;
    case 1365: 
      var $1952=$compression_window;
      var $1953=HEAP32[((_default_compression_window)>>2)];
      var $cmp3527=(($1952)|0) > (($1953)|0);
      if ($cmp3527) { __label__ = 1367; break; } else { __label__ = 1366; break; }
    case 1366: 
      var $1954=HEAP32[((_force_compression_window)>>2)];
      var $tobool3530=(($1954)|0)!=0;
      if ($tobool3530) { __label__ = 1367; break; } else { __label__ = 1368; break; }
    case 1367: 
      var $1955=HEAP32[((_default_compression_window)>>2)];
      $compression_window=$1955;
      __label__ = 1368; break;
    case 1368: 
      var $1956=HEAP32[((_verbose)>>2)];
      var $cmp3533=(($1956)|0) > 1;
      if ($cmp3533) { __label__ = 1369; break; } else { __label__ = 1373; break; }
    case 1369: 
      var $1957=HEAP32[((_first_trial)>>2)];
      var $tobool3536=(($1957)|0)!=0;
      if ($tobool3536) { __label__ = 1370; break; } else { __label__ = 1373; break; }
    case 1370: 
      var $1958=$compression_window;
      var $cmp3538=(($1958)|0)!=15;
      if ($cmp3538) { __label__ = 1372; break; } else { __label__ = 1371; break; }
    case 1371: 
      var $1959=HEAP32[((_force_compression_window)>>2)];
      var $tobool3541=(($1959)|0)!=0;
      if ($tobool3541) { __label__ = 1372; break; } else { __label__ = 1373; break; }
    case 1372: 
      var $1960=HEAP32[((_stdout)>>2)];
      var $1961=$compression_window;
      var $shl=1 << $1961;
      var $call3543=_fprintf($1960, ((STRING_TABLE.__str285)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$shl,tempInt));
      __label__ = 1373; break;
    case 1373: 
      var $1962=HEAP32[((_write_ptr)>>2)];
      var $1963=$compression_window;
      _png_set_compression_window_bits($1962, $1963);
      var $1964=HEAP32[((_write_ptr)>>2)];
      var $1965=HEAP32[((_zlib_level)>>2)];
      _png_set_compression_level($1964, $1965);
      var $1966=HEAP32[((_write_ptr)>>2)];
      var $1967=HEAP32[((_write_info_ptr)>>2)];
      _png_write_info($1966, $1967);
      var $1968=HEAP32[((_verbose)>>2)];
      var $cmp3545=(($1968)|0) > 1;
      if ($cmp3545) { __label__ = 1374; break; } else { __label__ = 1375; break; }
    case 1374: 
      var $call3548=_printf(((STRING_TABLE.__str286)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1375; break;
    case 1375: 
      var $1969=HEAP32[((_output_bit_depth)>>2)];
      var $cmp3550=(($1969)|0) < 8;
      if ($cmp3550) { __label__ = 1376; break; } else { __label__ = 1379; break; }
    case 1376: 
      var $1970=HEAP32[((_output_color_type)>>2)];
      var $cmp3553=(($1970)|0)==0;
      if ($cmp3553) { __label__ = 1377; break; } else { __label__ = 1378; break; }
    case 1377: 
      var $1971=HEAP32[((_output_bit_depth)>>2)];
      var $conv3557=(($1971) & 255);
      var $gray3558=(($true_bits3556+3)|0);
      HEAP8[($gray3558)]=$conv3557;
      var $1972=HEAP32[((_write_ptr)>>2)];
      _png_set_shift($1972, $true_bits3556);
      __label__ = 1378; break;
    case 1378: 
      var $1973=HEAP32[((_write_ptr)>>2)];
      _png_set_packing($1973);
      __label__ = 1379; break;
    case 1379: 
      __label__ = 1380; break;
    case 1380: 
      var $1974=HEAP32[((_read_ptr)>>2)];
      var $1975=HEAP32[((_read_info_ptr)>>2)];
      var $call3562=_png_get_rowbytes($1974, $1975);
      $read_row_length=$call3562;
      var $1976=HEAP32[((_write_ptr)>>2)];
      var $1977=HEAP32[((_write_info_ptr)>>2)];
      var $call3563=_png_get_rowbytes($1976, $1977);
      $write_row_length=$call3563;
      var $1978=$read_row_length;
      var $1979=$write_row_length;
      var $cmp3564=(($1978)>>>0) > (($1979)>>>0);
      if ($cmp3564) { __label__ = 1381; break; } else { __label__ = 1382; break; }
    case 1381: 
      var $1980=$read_row_length;
      var $cond3566 = $1980;__label__ = 1383; break;
    case 1382: 
      var $1981=$write_row_length;
      var $cond3566 = $1981;__label__ = 1383; break;
    case 1383: 
      var $cond3566;
      $row_length=$cond3566;
      var $1982=HEAP32[((_read_ptr)>>2)];
      var $1983=$row_length;
      var $add3567=(($1983+64)|0);
      var $call3568=_png_malloc($1982, $add3567);
      HEAP32[((_row_buf)>>2)]=$call3568;
      var $1984=HEAP32[((_row_buf)>>2)];
      var $cmp3569=(($1984)|0)==0;
      if ($cmp3569) { __label__ = 1384; break; } else { __label__ = 1385; break; }
    case 1384: 
      var $1985=HEAP32[((_read_ptr)>>2)];
      _png_error($1985, ((STRING_TABLE.__str287)|0));
      __label__ = 1385; break;
    case 1385: 
      var $1986=HEAP32[((_verbose)>>2)];
      var $cmp3573=(($1986)|0) > 2;
      if ($cmp3573) { __label__ = 1386; break; } else { __label__ = 1387; break; }
    case 1386: 
      var $call3576=_printf(((STRING_TABLE.__str288)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1387; break;
    case 1387: 
      _pngcrush_pause();
      var $1987=HEAP32[((_read_ptr)>>2)];
      var $call3578=_png_set_interlace_handling($1987);
      $num_pass=$call3578;
      var $1988=HEAP32[((_nosave)>>2)];
      var $cmp3579=(($1988)|0)==0;
      if ($cmp3579) { __label__ = 1388; break; } else { __label__ = 1389; break; }
    case 1388: 
      var $1989=HEAP32[((_write_ptr)>>2)];
      var $call3582=_png_set_interlace_handling($1989);
      __label__ = 1389; break;
    case 1389: 
      var $call3584=_clock();
      var $conv3585=(($call3584)>>>0);
      HEAPF32[((_t_stop)>>2)]=$conv3585;
      var $1990=HEAPF32[((_t_stop)>>2)];
      var $1991=HEAPF32[((_t_start)>>2)];
      var $sub3586=$1990-$1991;
      var $1992=HEAPF32[((_t_misc)>>2)];
      var $add3587=$1992+$sub3586;
      HEAPF32[((_t_misc)>>2)]=$add3587;
      var $1993=HEAPF32[((_t_stop)>>2)];
      var $1994=HEAPF32[((_t_start)>>2)];
      var $cmp3588=$1993 < $1994;
      if ($cmp3588) { __label__ = 1390; break; } else { __label__ = 1393; break; }
    case 1390: 
      var $1995=HEAPF32[((_t_misc)>>2)];
      var $add3591=$1995+2147483648;
      HEAPF32[((_t_misc)>>2)]=$add3591;
      var $1996=HEAPF32[((_t_stop)>>2)];
      var $cmp3592=$1996 < 0;
      if ($cmp3592) { __label__ = 1391; break; } else { __label__ = 1392; break; }
    case 1391: 
      var $1997=HEAPF32[((_t_misc)>>2)];
      var $add3595=$1997+2147483648;
      HEAPF32[((_t_misc)>>2)]=$add3595;
      __label__ = 1392; break;
    case 1392: 
      __label__ = 1393; break;
    case 1393: 
      var $1998=HEAPF32[((_t_stop)>>2)];
      HEAPF32[((_t_start)>>2)]=$1998;
      $pass=0;
      __label__ = 1394; break;
    case 1394: 
      var $1999=$pass;
      var $2000=$num_pass;
      var $cmp3599=(($1999)|0) < (($2000)|0);
      if ($cmp3599) { __label__ = 1395; break; } else { __label__ = 1415; break; }
    case 1395: 
      var $2001=HEAP32[((_verbose)>>2)];
      var $cmp3602=(($2001)|0) > 1;
      if ($cmp3602) { __label__ = 1396; break; } else { __label__ = 1397; break; }
    case 1396: 
      var $2002=$pass;
      var $call3605=_printf(((STRING_TABLE.__str289)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2002,tempInt));
      __label__ = 1397; break;
    case 1397: 
      $y=0;
      __label__ = 1398; break;
    case 1398: 
      var $2003=$y;
      var $2004=HEAPU32[((_height)>>2)];
      var $cmp3608=(($2003)>>>0) < (($2004)>>>0);
      if ($cmp3608) { __label__ = 1399; break; } else { __label__ = 1411; break; }
    case 1399: 
      var $2005=HEAP32[((_read_ptr)>>2)];
      var $2006=HEAP32[((_row_buf)>>2)];
      _png_read_row($2005, $2006, 0);
      var $2007=HEAP32[((_nosave)>>2)];
      var $cmp3611=(($2007)|0)==0;
      if ($cmp3611) { __label__ = 1400; break; } else { __label__ = 1409; break; }
    case 1400: 
      var $call3614=_clock();
      var $conv3615=(($call3614)>>>0);
      HEAPF32[((_t_stop)>>2)]=$conv3615;
      var $2008=HEAPF32[((_t_stop)>>2)];
      var $2009=HEAPF32[((_t_start)>>2)];
      var $sub3616=$2008-$2009;
      var $2010=HEAPF32[((_t_decode)>>2)];
      var $add3617=$2010+$sub3616;
      HEAPF32[((_t_decode)>>2)]=$add3617;
      var $2011=HEAPF32[((_t_stop)>>2)];
      var $2012=HEAPF32[((_t_start)>>2)];
      var $cmp3618=$2011 < $2012;
      if ($cmp3618) { __label__ = 1401; break; } else { __label__ = 1404; break; }
    case 1401: 
      var $2013=HEAPF32[((_t_decode)>>2)];
      var $add3621=$2013+2147483648;
      HEAPF32[((_t_decode)>>2)]=$add3621;
      var $2014=HEAPF32[((_t_stop)>>2)];
      var $cmp3622=$2014 < 0;
      if ($cmp3622) { __label__ = 1402; break; } else { __label__ = 1403; break; }
    case 1402: 
      var $2015=HEAPF32[((_t_decode)>>2)];
      var $add3625=$2015+2147483648;
      HEAPF32[((_t_decode)>>2)]=$add3625;
      __label__ = 1403; break;
    case 1403: 
      __label__ = 1404; break;
    case 1404: 
      var $2016=HEAPF32[((_t_stop)>>2)];
      HEAPF32[((_t_start)>>2)]=$2016;
      var $2017=HEAP32[((_write_ptr)>>2)];
      var $2018=HEAP32[((_row_buf)>>2)];
      _png_write_row($2017, $2018);
      var $call3628=_clock();
      var $conv3629=(($call3628)>>>0);
      HEAPF32[((_t_stop)>>2)]=$conv3629;
      var $2019=HEAPF32[((_t_stop)>>2)];
      var $2020=HEAPF32[((_t_start)>>2)];
      var $sub3630=$2019-$2020;
      var $2021=HEAPF32[((_t_encode)>>2)];
      var $add3631=$2021+$sub3630;
      HEAPF32[((_t_encode)>>2)]=$add3631;
      var $2022=HEAPF32[((_t_stop)>>2)];
      var $2023=HEAPF32[((_t_start)>>2)];
      var $cmp3632=$2022 < $2023;
      if ($cmp3632) { __label__ = 1405; break; } else { __label__ = 1408; break; }
    case 1405: 
      var $2024=HEAPF32[((_t_encode)>>2)];
      var $add3635=$2024+2147483648;
      HEAPF32[((_t_encode)>>2)]=$add3635;
      var $2025=HEAPF32[((_t_stop)>>2)];
      var $cmp3636=$2025 < 0;
      if ($cmp3636) { __label__ = 1406; break; } else { __label__ = 1407; break; }
    case 1406: 
      var $2026=HEAPF32[((_t_encode)>>2)];
      var $add3639=$2026+2147483648;
      HEAPF32[((_t_encode)>>2)]=$add3639;
      __label__ = 1407; break;
    case 1407: 
      __label__ = 1408; break;
    case 1408: 
      var $2027=HEAPF32[((_t_stop)>>2)];
      HEAPF32[((_t_start)>>2)]=$2027;
      __label__ = 1409; break;
    case 1409: 
      __label__ = 1410; break;
    case 1410: 
      var $2028=$y;
      var $inc3644=(($2028+1)|0);
      $y=$inc3644;
      __label__ = 1398; break;
    case 1411: 
      var $2029=HEAP32[((_verbose)>>2)];
      var $cmp3646=(($2029)|0) > 2;
      if ($cmp3646) { __label__ = 1412; break; } else { __label__ = 1413; break; }
    case 1412: 
      var $2030=$pass;
      var $call3649=_printf(((STRING_TABLE.__str290)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2030,tempInt));
      __label__ = 1413; break;
    case 1413: 
      __label__ = 1414; break;
    case 1414: 
      var $2031=$pass;
      var $inc3652=(($2031+1)|0);
      $pass=$inc3652;
      __label__ = 1394; break;
    case 1415: 
      var $2032=HEAP32[((_nosave)>>2)];
      var $tobool3654=(($2032)|0)!=0;
      if ($tobool3654) { __label__ = 1416; break; } else { __label__ = 1421; break; }
    case 1416: 
      var $call3656=_clock();
      var $conv3657=(($call3656)>>>0);
      HEAPF32[((_t_stop)>>2)]=$conv3657;
      var $2033=HEAPF32[((_t_stop)>>2)];
      var $2034=HEAPF32[((_t_start)>>2)];
      var $sub3658=$2033-$2034;
      var $2035=HEAPF32[((_t_decode)>>2)];
      var $add3659=$2035+$sub3658;
      HEAPF32[((_t_decode)>>2)]=$add3659;
      var $2036=HEAPF32[((_t_stop)>>2)];
      var $2037=HEAPF32[((_t_start)>>2)];
      var $cmp3660=$2036 < $2037;
      if ($cmp3660) { __label__ = 1417; break; } else { __label__ = 1420; break; }
    case 1417: 
      var $2038=HEAPF32[((_t_decode)>>2)];
      var $add3663=$2038+2147483648;
      HEAPF32[((_t_decode)>>2)]=$add3663;
      var $2039=HEAPF32[((_t_stop)>>2)];
      var $cmp3664=$2039 < 0;
      if ($cmp3664) { __label__ = 1418; break; } else { __label__ = 1419; break; }
    case 1418: 
      var $2040=HEAPF32[((_t_decode)>>2)];
      var $add3667=$2040+2147483648;
      HEAPF32[((_t_decode)>>2)]=$add3667;
      __label__ = 1419; break;
    case 1419: 
      __label__ = 1420; break;
    case 1420: 
      var $2041=HEAPF32[((_t_stop)>>2)];
      HEAPF32[((_t_start)>>2)]=$2041;
      __label__ = 1421; break;
    case 1421: 
      var $2042=HEAP32[(($color_type)>>2)];
      var $cmp3671=(($2042)|0)==2;
      if ($cmp3671) { __label__ = 1424; break; } else { __label__ = 1422; break; }
    case 1422: 
      var $2043=HEAP32[(($color_type)>>2)];
      var $cmp3674=(($2043)|0)==6;
      if ($cmp3674) { __label__ = 1424; break; } else { __label__ = 1423; break; }
    case 1423: 
      var $2044=HEAP32[(($color_type)>>2)];
      var $cmp3677=(($2044)|0)==3;
      if ($cmp3677) { __label__ = 1424; break; } else { __label__ = 1431; break; }
    case 1424: 
      var $2045=HEAP32[((_output_color_type)>>2)];
      var $cmp3680=(($2045)|0)==0;
      if ($cmp3680) { __label__ = 1426; break; } else { __label__ = 1425; break; }
    case 1425: 
      var $2046=HEAP32[((_output_color_type)>>2)];
      var $cmp3683=(($2046)|0)==4;
      if ($cmp3683) { __label__ = 1426; break; } else { __label__ = 1431; break; }
    case 1426: 
      var $2047=HEAP32[((_read_ptr)>>2)];
      var $call3686=_png_get_rgb_to_gray_status($2047);
      $rgb_error=$call3686;
      var $2048=HEAP32[((_first_trial)>>2)];
      var $tobool3687=(($2048)|0)!=0;
      if ($tobool3687) { __label__ = 1427; break; } else { __label__ = 1430; break; }
    case 1427: 
      var $2049=HEAP32[((_verbose)>>2)];
      var $cmp3689=(($2049)|0) > 0;
      if ($cmp3689) { __label__ = 1428; break; } else { __label__ = 1430; break; }
    case 1428: 
      var $2050=$rgb_error;
      var $conv3692=(($2050)&255);
      var $tobool3693=(($conv3692)|0)!=0;
      if ($tobool3693) { __label__ = 1429; break; } else { __label__ = 1430; break; }
    case 1429: 
      var $call3695=_printf(((STRING_TABLE.__str291)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1430; break;
    case 1430: 
      __label__ = 1431; break;
    case 1431: 
      var $2051=HEAP32[((_read_ptr)>>2)];
      var $2052=HEAP32[((_read_info_ptr)>>2)];
      _png_free_data($2051, $2052, 512, -1);
      var $2053=HEAP32[((_write_ptr)>>2)];
      var $2054=HEAP32[((_write_info_ptr)>>2)];
      _png_free_data($2053, $2054, 512, -1);
      var $2055=HEAP32[((_verbose)>>2)];
      var $cmp3698=(($2055)|0) > 1;
      if ($cmp3698) { __label__ = 1432; break; } else { __label__ = 1433; break; }
    case 1432: 
      var $call3701=_printf(((STRING_TABLE.__str292)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1433; break;
    case 1433: 
      var $2056=HEAP32[((_read_ptr)>>2)];
      var $2057=HEAP32[((_end_info_ptr)>>2)];
      _png_read_end($2056, $2057);
      HEAP32[(($num_text3704)>>2)]=0;
      var $2058=HEAP32[((_read_ptr)>>2)];
      var $2059=HEAP32[((_end_info_ptr)>>2)];
      var $call3705=_png_get_text($2058, $2059, $text_ptr3703, $num_text3704);
      var $cmp3706=(($call3705)>>>0) > 0;
      if ($cmp3706) { __label__ = 1435; break; } else { __label__ = 1434; break; }
    case 1434: 
      var $2060=HEAP32[((_text_inputs)>>2)];
      var $tobool3709=(($2060)|0)!=0;
      if ($tobool3709) { __label__ = 1435; break; } else { __label__ = 1500; break; }
    case 1435: 
      var $2061=HEAP32[((_verbose)>>2)];
      var $cmp3712=(($2061)|0) > 1;
      if ($cmp3712) { __label__ = 1436; break; } else { __label__ = 1437; break; }
    case 1436: 
      var $2062=HEAP32[(($num_text3704)>>2)];
      var $call3715=_printf(((STRING_TABLE.__str293)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2062,tempInt));
      __label__ = 1437; break;
    case 1437: 
      var $2063=HEAP32[((_verbose)>>2)];
      var $cmp3717=(($2063)|0) > 1;
      if ($cmp3717) { __label__ = 1438; break; } else { __label__ = 1452; break; }
    case 1438: 
      var $2064=HEAP32[((_nosave)>>2)];
      var $tobool3720=(($2064)|0)!=0;
      if ($tobool3720) { __label__ = 1439; break; } else { __label__ = 1440; break; }
    case 1439: 
      var $2065=HEAP32[((_first_trial)>>2)];
      var $tobool3722=(($2065)|0)!=0;
      if ($tobool3722) { __label__ = 1440; break; } else { __label__ = 1452; break; }
    case 1440: 
      var $2066=HEAP32[(($num_text3704)>>2)];
      var $cmp3724=(($2066)|0) > 0;
      if ($cmp3724) { __label__ = 1441; break; } else { __label__ = 1452; break; }
    case 1441: 
      $ntext3711=0;
      __label__ = 1442; break;
    case 1442: 
      var $2067=$ntext3711;
      var $2068=HEAP32[(($num_text3704)>>2)];
      var $cmp3728=(($2067)|0) < (($2068)|0);
      if ($cmp3728) { __label__ = 1443; break; } else { __label__ = 1451; break; }
    case 1443: 
      var $2069=HEAP32[((_stdout)>>2)];
      var $2070=$ntext3711;
      var $2071=$ntext3711;
      var $2072=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3731=(($2072+$2071*28)|0);
      var $key3732=(($arrayidx3731+4)|0);
      var $2073=HEAP32[(($key3732)>>2)];
      var $call3733=_fprintf($2069, ((STRING_TABLE.__str261)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2070,HEAP32[((tempInt+4)>>2)]=$2073,tempInt));
      var $2074=$ntext3711;
      var $2075=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3734=(($2075+$2074*28)|0);
      var $text_length3735=(($arrayidx3734+12)|0);
      var $2076=HEAP32[(($text_length3735)>>2)];
      var $tobool3736=(($2076)|0)!=0;
      if ($tobool3736) { __label__ = 1444; break; } else { __label__ = 1445; break; }
    case 1444: 
      var $2077=HEAP32[((_stdout)>>2)];
      var $2078=$ntext3711;
      var $2079=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3738=(($2079+$2078*28)|0);
      var $text3739=(($arrayidx3738+8)|0);
      var $2080=HEAP32[(($text3739)>>2)];
      var $call3740=_fprintf($2077, ((STRING_TABLE.__str262)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2080,tempInt));
      __label__ = 1449; break;
    case 1445: 
      var $2081=$ntext3711;
      var $2082=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3742=(($2082+$2081*28)|0);
      var $itxt_length3743=(($arrayidx3742+16)|0);
      var $2083=HEAP32[(($itxt_length3743)>>2)];
      var $tobool3744=(($2083)|0)!=0;
      if ($tobool3744) { __label__ = 1446; break; } else { __label__ = 1447; break; }
    case 1446: 
      var $2084=HEAP32[((_stdout)>>2)];
      var $2085=$ntext3711;
      var $2086=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3746=(($2086+$2085*28)|0);
      var $lang3747=(($arrayidx3746+20)|0);
      var $2087=HEAP32[(($lang3747)>>2)];
      var $2088=$ntext3711;
      var $2089=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3748=(($2089+$2088*28)|0);
      var $lang_key3749=(($arrayidx3748+24)|0);
      var $2090=HEAP32[(($lang_key3749)>>2)];
      var $call3750=_fprintf($2084, ((STRING_TABLE.__str263)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2087,HEAP32[((tempInt+4)>>2)]=$2090,tempInt));
      var $2091=HEAP32[((_stdout)>>2)];
      var $2092=$ntext3711;
      var $2093=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3751=(($2093+$2092*28)|0);
      var $text3752=(($arrayidx3751+8)|0);
      var $2094=HEAP32[(($text3752)>>2)];
      var $call3753=_fprintf($2091, ((STRING_TABLE.__str264)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2094,tempInt));
      __label__ = 1448; break;
    case 1447: 
      var $2095=HEAP32[((_stdout)>>2)];
      var $call3755=_fprintf($2095, ((STRING_TABLE.__str265)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1448; break;
    case 1448: 
      __label__ = 1449; break;
    case 1449: 
      __label__ = 1450; break;
    case 1450: 
      var $2096=$ntext3711;
      var $inc3759=(($2096+1)|0);
      $ntext3711=$inc3759;
      __label__ = 1442; break;
    case 1451: 
      __label__ = 1452; break;
    case 1452: 
      var $2097=HEAP32[((_nosave)>>2)];
      var $tobool3762=(($2097)|0)!=0;
      if ($tobool3762) { __label__ = 1453; break; } else { __label__ = 1499; break; }
    case 1453: 
      var $2098=HEAP32[(($num_text3704)>>2)];
      var $cmp3764=(($2098)|0) > 0;
      if ($cmp3764) { __label__ = 1454; break; } else { __label__ = 1480; break; }
    case 1454: 
      var $2099=$argv_addr;
      var $call3767=_keep_chunk(((STRING_TABLE.__str36)|0), $2099);
      var $tobool3768=(($call3767)|0)!=0;
      if ($tobool3768) { __label__ = 1455; break; } else { __label__ = 1479; break; }
    case 1455: 
      var $2100=HEAP32[(($num_text3704)>>2)];
      $num_to_write3770=$2100;
      $ntext3711=0;
      __label__ = 1456; break;
    case 1456: 
      var $2101=$ntext3711;
      var $2102=HEAP32[(($num_text3704)>>2)];
      var $cmp3772=(($2101)|0) < (($2102)|0);
      if ($cmp3772) { __label__ = 1457; break; } else { __label__ = 1476; break; }
    case 1457: 
      var $2103=HEAP32[((_first_trial)>>2)];
      var $tobool3775=(($2103)|0)!=0;
      if ($tobool3775) { __label__ = 1458; break; } else { __label__ = 1461; break; }
    case 1458: 
      var $2104=HEAP32[((_verbose)>>2)];
      var $cmp3777=(($2104)|0) > 2;
      if ($cmp3777) { __label__ = 1459; break; } else { __label__ = 1460; break; }
    case 1459: 
      var $2105=$ntext3711;
      var $2106=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3780=(($2106+$2105*28)|0);
      var $compression3781=(($arrayidx3780)|0);
      var $2107=HEAP32[(($compression3781)>>2)];
      var $call3782=_printf(((STRING_TABLE.__str294)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2107,tempInt));
      __label__ = 1460; break;
    case 1460: 
      __label__ = 1461; break;
    case 1461: 
      var $2108=$ntext3711;
      var $2109=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3785=(($2109+$2108*28)|0);
      var $compression3786=(($arrayidx3785)|0);
      var $2110=HEAP32[(($compression3786)>>2)];
      var $cmp3787=(($2110)|0)==-1;
      if ($cmp3787) { __label__ = 1462; break; } else { __label__ = 1465; break; }
    case 1462: 
      var $2111=$argv_addr;
      var $call3790=_keep_chunk(((STRING_TABLE.__str55)|0), $2111);
      var $tobool3791=(($call3790)|0)!=0;
      if ($tobool3791) { __label__ = 1464; break; } else { __label__ = 1463; break; }
    case 1463: 
      var $2112=$ntext3711;
      var $2113=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3793=(($2113+$2112*28)|0);
      var $key3794=(($arrayidx3793+4)|0);
      var $2114=HEAP32[(($key3794)>>2)];
      var $arrayidx3795=(($2114)|0);
      HEAP8[($arrayidx3795)]=0;
      var $2115=$num_to_write3770;
      var $dec3796=(($2115-1)|0);
      $num_to_write3770=$dec3796;
      __label__ = 1464; break;
    case 1464: 
      __label__ = 1465; break;
    case 1465: 
      var $2116=$ntext3711;
      var $2117=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3799=(($2117+$2116*28)|0);
      var $compression3800=(($arrayidx3799)|0);
      var $2118=HEAP32[(($compression3800)>>2)];
      var $cmp3801=(($2118)|0)==0;
      if ($cmp3801) { __label__ = 1466; break; } else { __label__ = 1469; break; }
    case 1466: 
      var $2119=$argv_addr;
      var $call3804=_keep_chunk(((STRING_TABLE.__str58)|0), $2119);
      var $tobool3805=(($call3804)|0)!=0;
      if ($tobool3805) { __label__ = 1468; break; } else { __label__ = 1467; break; }
    case 1467: 
      var $2120=$ntext3711;
      var $2121=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3807=(($2121+$2120*28)|0);
      var $key3808=(($arrayidx3807+4)|0);
      var $2122=HEAP32[(($key3808)>>2)];
      var $arrayidx3809=(($2122)|0);
      HEAP8[($arrayidx3809)]=0;
      var $2123=$num_to_write3770;
      var $dec3810=(($2123-1)|0);
      $num_to_write3770=$dec3810;
      __label__ = 1468; break;
    case 1468: 
      __label__ = 1469; break;
    case 1469: 
      var $2124=$ntext3711;
      var $2125=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3813=(($2125+$2124*28)|0);
      var $compression3814=(($arrayidx3813)|0);
      var $2126=HEAP32[(($compression3814)>>2)];
      var $cmp3815=(($2126)|0)==1;
      if ($cmp3815) { __label__ = 1471; break; } else { __label__ = 1470; break; }
    case 1470: 
      var $2127=$ntext3711;
      var $2128=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3818=(($2128+$2127*28)|0);
      var $compression3819=(($arrayidx3818)|0);
      var $2129=HEAP32[(($compression3819)>>2)];
      var $cmp3820=(($2129)|0)==2;
      if ($cmp3820) { __label__ = 1471; break; } else { __label__ = 1474; break; }
    case 1471: 
      var $2130=$argv_addr;
      var $call3823=_keep_chunk(((STRING_TABLE.__str43)|0), $2130);
      var $tobool3824=(($call3823)|0)!=0;
      if ($tobool3824) { __label__ = 1473; break; } else { __label__ = 1472; break; }
    case 1472: 
      var $2131=$ntext3711;
      var $2132=HEAP32[(($text_ptr3703)>>2)];
      var $arrayidx3826=(($2132+$2131*28)|0);
      var $key3827=(($arrayidx3826+4)|0);
      var $2133=HEAP32[(($key3827)>>2)];
      var $arrayidx3828=(($2133)|0);
      HEAP8[($arrayidx3828)]=0;
      var $2134=$num_to_write3770;
      var $dec3829=(($2134-1)|0);
      $num_to_write3770=$dec3829;
      __label__ = 1473; break;
    case 1473: 
      __label__ = 1474; break;
    case 1474: 
      __label__ = 1475; break;
    case 1475: 
      var $2135=$ntext3711;
      var $inc3833=(($2135+1)|0);
      $ntext3711=$inc3833;
      __label__ = 1456; break;
    case 1476: 
      var $2136=$num_to_write3770;
      var $cmp3835=(($2136)|0) > 0;
      if ($cmp3835) { __label__ = 1477; break; } else { __label__ = 1478; break; }
    case 1477: 
      var $2137=HEAP32[((_write_ptr)>>2)];
      var $2138=HEAP32[((_write_end_info_ptr)>>2)];
      var $2139=HEAP32[(($text_ptr3703)>>2)];
      var $2140=HEAP32[(($num_text3704)>>2)];
      _png_set_text($2137, $2138, $2139, $2140);
      __label__ = 1478; break;
    case 1478: 
      __label__ = 1479; break;
    case 1479: 
      __label__ = 1480; break;
    case 1480: 
      $ntext3711=0;
      __label__ = 1481; break;
    case 1481: 
      var $2141=$ntext3711;
      var $2142=HEAP32[((_text_inputs)>>2)];
      var $cmp3842=(($2141)|0) < (($2142)|0);
      if ($cmp3842) { __label__ = 1482; break; } else { __label__ = 1498; break; }
    case 1482: 
      var $2143=$ntext3711;
      var $arrayidx3845=((_text_where+($2143<<2))|0);
      var $2144=HEAP32[(($arrayidx3845)>>2)];
      var $cmp3846=(($2144)|0)==2;
      if ($cmp3846) { __label__ = 1483; break; } else { __label__ = 1496; break; }
    case 1483: 
      var $2145=HEAP32[((_write_ptr)>>2)];
      var $call3850=_png_malloc($2145, 28);
      var $2146=$call3850;
      $added_text3849=$2146;
      var $2147=$ntext3711;
      var $mul3851=(($2147*80)|0);
      var $arrayidx3852=((_text_keyword+$mul3851)|0);
      var $2148=$added_text3849;
      var $arrayidx3853=(($2148)|0);
      var $key3854=(($arrayidx3853+4)|0);
      HEAP32[(($key3854)>>2)]=$arrayidx3852;
      var $2149=$ntext3711;
      var $mul3855=(($2149*80)|0);
      var $arrayidx3856=((_text_lang+$mul3855)|0);
      var $2150=$added_text3849;
      var $arrayidx3857=(($2150)|0);
      var $lang3858=(($arrayidx3857+20)|0);
      HEAP32[(($lang3858)>>2)]=$arrayidx3856;
      var $2151=$ntext3711;
      var $mul3859=(($2151*80)|0);
      var $arrayidx3860=((_text_lang_key+$mul3859)|0);
      var $2152=$added_text3849;
      var $arrayidx3861=(($2152)|0);
      var $lang_key3862=(($arrayidx3861+24)|0);
      HEAP32[(($lang_key3862)>>2)]=$arrayidx3860;
      var $2153=$ntext3711;
      var $mul3863=((($2153<<11))|0);
      var $arrayidx3864=((_text_text+$mul3863)|0);
      var $2154=$added_text3849;
      var $arrayidx3865=(($2154)|0);
      var $text3866=(($arrayidx3865+8)|0);
      HEAP32[(($text3866)>>2)]=$arrayidx3864;
      var $2155=$ntext3711;
      var $arrayidx3867=((_text_compression+($2155<<2))|0);
      var $2156=HEAP32[(($arrayidx3867)>>2)];
      var $2157=$added_text3849;
      var $arrayidx3868=(($2157)|0);
      var $compression3869=(($arrayidx3868)|0);
      HEAP32[(($compression3869)>>2)]=$2156;
      var $2158=HEAP32[((_write_ptr)>>2)];
      var $2159=HEAP32[((_write_end_info_ptr)>>2)];
      var $2160=$added_text3849;
      _png_set_text($2158, $2159, $2160, 1);
      var $2161=HEAP32[((_verbose)>>2)];
      var $cmp3870=(($2161)|0) > 0;
      if ($cmp3870) { __label__ = 1484; break; } else { __label__ = 1495; break; }
    case 1484: 
      var $2162=HEAP32[((_first_trial)>>2)];
      var $tobool3873=(($2162)|0)!=0;
      if ($tobool3873) { __label__ = 1485; break; } else { __label__ = 1495; break; }
    case 1485: 
      var $2163=$added_text3849;
      var $arrayidx3875=(($2163)|0);
      var $compression3876=(($arrayidx3875)|0);
      var $2164=HEAP32[(($compression3876)>>2)];
      var $cmp3877=(($2164)|0) < 0;
      if ($cmp3877) { __label__ = 1486; break; } else { __label__ = 1487; break; }
    case 1486: 
      var $call3880=_printf(((STRING_TABLE.__str267)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1494; break;
    case 1487: 
      var $2165=$added_text3849;
      var $arrayidx3882=(($2165)|0);
      var $compression3883=(($arrayidx3882)|0);
      var $2166=HEAP32[(($compression3883)>>2)];
      var $cmp3884=(($2166)|0)==0;
      if ($cmp3884) { __label__ = 1488; break; } else { __label__ = 1489; break; }
    case 1488: 
      var $call3887=_printf(((STRING_TABLE.__str268)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1493; break;
    case 1489: 
      var $2167=$added_text3849;
      var $arrayidx3889=(($2167)|0);
      var $compression3890=(($arrayidx3889)|0);
      var $2168=HEAP32[(($compression3890)>>2)];
      var $cmp3891=(($2168)|0)==1;
      if ($cmp3891) { __label__ = 1490; break; } else { __label__ = 1491; break; }
    case 1490: 
      var $call3894=_printf(((STRING_TABLE.__str295)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1492; break;
    case 1491: 
      var $call3896=_printf(((STRING_TABLE.__str296)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1492; break;
    case 1492: 
      __label__ = 1493; break;
    case 1493: 
      __label__ = 1494; break;
    case 1494: 
      __label__ = 1495; break;
    case 1495: 
      var $2169=HEAP32[((_write_ptr)>>2)];
      var $2170=$added_text3849;
      var $2171=$2170;
      _png_free($2169, $2171);
      $added_text3849=0;
      __label__ = 1496; break;
    case 1496: 
      __label__ = 1497; break;
    case 1497: 
      var $2172=$ntext3711;
      var $inc3903=(($2172+1)|0);
      $ntext3711=$inc3903;
      __label__ = 1481; break;
    case 1498: 
      __label__ = 1499; break;
    case 1499: 
      __label__ = 1500; break;
    case 1500: 
      var $2173=HEAP32[((_read_ptr)>>2)];
      var $2174=HEAP32[((_end_info_ptr)>>2)];
      var $call3908=_png_get_tIME($2173, $2174, $mod_time3907);
      var $tobool3909=(($call3908)|0)!=0;
      if ($tobool3909) { __label__ = 1501; break; } else { __label__ = 1504; break; }
    case 1501: 
      var $2175=$argv_addr;
      var $call3911=_keep_chunk(((STRING_TABLE.__str31)|0), $2175);
      var $tobool3912=(($call3911)|0)!=0;
      if ($tobool3912) { __label__ = 1502; break; } else { __label__ = 1503; break; }
    case 1502: 
      var $2176=HEAP32[((_write_ptr)>>2)];
      var $2177=HEAP32[((_write_end_info_ptr)>>2)];
      var $2178=HEAP32[(($mod_time3907)>>2)];
      _png_set_tIME($2176, $2177, $2178);
      __label__ = 1503; break;
    case 1503: 
      __label__ = 1504; break;
    case 1504: 
      var $2179=HEAP32[((_read_ptr)>>2)];
      var $2180=HEAP32[((_end_info_ptr)>>2)];
      var $call3918=_png_get_unknown_chunks($2179, $2180, $unknowns3916);
      $num_unknowns3917=$call3918;
      var $2181=$num_unknowns3917;
      var $tobool3919=(($2181)|0)!=0;
      if ($tobool3919) { __label__ = 1505; break; } else { __label__ = 1511; break; }
    case 1505: 
      var $2182=HEAP32[((_nosave)>>2)];
      var $cmp3921=(($2182)|0)==0;
      if ($cmp3921) { __label__ = 1506; break; } else { __label__ = 1511; break; }
    case 1506: 
      var $2183=$num_unknowns3917;
      var $call3924=_printf(((STRING_TABLE.__str297)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2183,tempInt));
      var $2184=HEAP32[((_write_ptr)>>2)];
      var $2185=HEAP32[((_write_end_info_ptr)>>2)];
      var $2186=HEAP32[(($unknowns3916)>>2)];
      var $2187=$num_unknowns3917;
      _png_set_unknown_chunks($2184, $2185, $2186, $2187);
      $i=0;
      __label__ = 1507; break;
    case 1507: 
      var $2188=$i;
      var $2189=$num_unknowns3917;
      var $cmp3926=(($2188)|0) < (($2189)|0);
      if ($cmp3926) { __label__ = 1508; break; } else { __label__ = 1510; break; }
    case 1508: 
      var $2190=HEAP32[((_write_ptr)>>2)];
      var $2191=HEAP32[((_write_end_info_ptr)>>2)];
      var $2192=$i;
      var $2193=$i;
      var $2194=HEAP32[(($unknowns3916)>>2)];
      var $arrayidx3929=(($2194+$2193*20)|0);
      var $location3930=(($arrayidx3929+16)|0);
      var $2195=HEAPU8[($location3930)];
      var $conv3931=(($2195)&255);
      _png_set_unknown_chunk_location($2190, $2191, $2192, $conv3931);
      __label__ = 1509; break;
    case 1509: 
      var $2196=$i;
      var $inc3933=(($2196+1)|0);
      $i=$inc3933;
      __label__ = 1507; break;
    case 1510: 
      __label__ = 1511; break;
    case 1511: 
      var $2197=HEAP32[((_nosave)>>2)];
      var $cmp3936=(($2197)|0)==0;
      if ($cmp3936) { __label__ = 1512; break; } else { __label__ = 1513; break; }
    case 1512: 
      var $2198=HEAP32[((_write_ptr)>>2)];
      var $2199=HEAP32[((_write_end_info_ptr)>>2)];
      _png_write_end($2198, $2199);
      __label__ = 1513; break;
    case 1513: 
      var $2200=HEAP32[((_verbose)>>2)];
      var $cmp3940=(($2200)|0) > 1;
      if ($cmp3940) { __label__ = 1514; break; } else { __label__ = 1515; break; }
    case 1514: 
      var $call3943=_printf(((STRING_TABLE.__str298)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1515; break;
    case 1515: 
      var $2201=HEAP32[((_row_buf)>>2)];
      var $cmp3945=(($2201)|0)!=0;
      if ($cmp3945) { __label__ = 1516; break; } else { __label__ = 1517; break; }
    case 1516: 
      var $2202=HEAP32[((_read_ptr)>>2)];
      var $2203=HEAP32[((_row_buf)>>2)];
      _png_free($2202, $2203);
      HEAP32[((_row_buf)>>2)]=0;
      __label__ = 1517; break;
    case 1517: 
      _png_destroy_read_struct(_read_ptr, _read_info_ptr, _end_info_ptr);
      var $2204=HEAP32[((_nosave)>>2)];
      var $cmp3949=(($2204)|0)==0;
      if ($cmp3949) { __label__ = 1518; break; } else { __label__ = 1521; break; }
    case 1518: 
      var $2205=HEAP32[((_do_loco)>>2)];
      var $tobool3952=(($2205)|0)!=0;
      if ($tobool3952) { __label__ = 1519; break; } else { __label__ = 1520; break; }
    case 1519: 
      var $2206=HEAP32[((_write_ptr)>>2)];
      _png_write_chunk($2206, ((STRING_TABLE._main_png_MEND)|0), 0, 0);
      __label__ = 1520; break;
    case 1520: 
      var $2207=HEAP32[((_write_ptr)>>2)];
      _png_destroy_info_struct($2207, _write_end_info_ptr);
      _png_destroy_write_struct(_write_ptr, _write_info_ptr);
      __label__ = 1521; break;
    case 1521: 
      __label__ = 1522; break;
    case 1522: 
      HEAP32[((((_the_exception_context+4)|0))>>2)]=0;
      var $2208=HEAP32[((((_the_exception_context+4)|0))>>2)];
      var $tobool3956=(($2208)|0)!=0;
      if ($tobool3956) { __label__ = 761; break; } else { __label__ = 1523; break; }
    case 1523: 
      __label__ = 1525; break;
    case 1524: 
      HEAP32[((((_the_exception_context+4)|0))>>2)]=1;
      __label__ = 1525; break;
    case 1525: 
      var $2209=$exception__prev;
      HEAP32[((((_the_exception_context)|0))>>2)]=$2209;
      var $2210=HEAP32[((((_the_exception_context+4)|0))>>2)];
      var $tobool3959=(($2210)|0)!=0;
      if ($tobool3959) { __label__ = 1526; break; } else { __label__ = 1527; break; }
    case 1526: 
      var $2211=HEAP32[((((_the_exception_context+8)|0))>>2)];
      HEAP32[((_msg)>>2)]=$2211;
      if (0) { __label__ = 1527; break; } else { __label__ = 1528; break; }
    case 1527: 
      __label__ = 1538; break;
    case 1528: 
      var $2212=HEAP32[((_nosave)>>2)];
      var $cmp3963=(($2212)|0)==0;
      if ($cmp3963) { __label__ = 1529; break; } else { __label__ = 1530; break; }
    case 1529: 
      var $2213=HEAP32[((_stderr)>>2)];
      var $2214=HEAP32[((_inname)>>2)];
      var $2215=HEAP32[((_outname)>>2)];
      var $call3966=_fprintf($2213, ((STRING_TABLE.__str299)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2214,HEAP32[((tempInt+4)>>2)]=$2215,tempInt));
      __label__ = 1531; break;
    case 1530: 
      var $2216=HEAP32[((_stderr)>>2)];
      var $2217=HEAP32[((_inname)>>2)];
      var $call3968=_fprintf($2216, ((STRING_TABLE.__str300)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2217,tempInt));
      __label__ = 1531; break;
    case 1531: 
      var $2218=HEAP32[((_stderr)>>2)];
      var $2219=HEAP32[((_msg)>>2)];
      var $call3970=_fprintf($2218, ((STRING_TABLE.__str301)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2219,tempInt));
      var $2220=HEAP32[((_row_buf)>>2)];
      var $tobool3971=(($2220)|0)!=0;
      if ($tobool3971) { __label__ = 1532; break; } else { __label__ = 1533; break; }
    case 1532: 
      var $2221=HEAP32[((_read_ptr)>>2)];
      var $2222=HEAP32[((_row_buf)>>2)];
      _png_free($2221, $2222);
      HEAP32[((_row_buf)>>2)]=0;
      __label__ = 1533; break;
    case 1533: 
      var $2223=HEAP32[((_nosave)>>2)];
      var $cmp3974=(($2223)|0)==0;
      if ($cmp3974) { __label__ = 1534; break; } else { __label__ = 1535; break; }
    case 1534: 
      var $2224=HEAP32[((_write_ptr)>>2)];
      _png_destroy_info_struct($2224, _write_end_info_ptr);
      _png_destroy_write_struct(_write_ptr, _write_info_ptr);
      __label__ = 1535; break;
    case 1535: 
      _png_destroy_read_struct(_read_ptr, _read_info_ptr, _end_info_ptr);
      var $2225=HEAP32[((_verbose)>>2)];
      var $cmp3978=(($2225)|0) > 1;
      if ($cmp3978) { __label__ = 1536; break; } else { __label__ = 1537; break; }
    case 1536: 
      var $2226=HEAP32[((_stderr)>>2)];
      var $call3981=_fprintf($2226, ((STRING_TABLE.__str302)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1537; break;
    case 1537: 
      HEAP32[((_trial)>>2)]=201;
      __label__ = 1538; break;
    case 1538: 
      HEAP32[((_read_ptr)>>2)]=0;
      HEAP32[((_write_ptr)>>2)]=0;
      var $2227=HEAP32[((_fpin)>>2)];
      var $call3984=_fclose($2227);
      HEAP32[((_fpin)>>2)]=0;
      var $2228=HEAP32[((_number_of_open_files)>>2)];
      var $dec3985=(($2228-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec3985;
      var $2229=HEAP32[((_nosave)>>2)];
      var $cmp3986=(($2229)|0)==0;
      if ($cmp3986) { __label__ = 1539; break; } else { __label__ = 1540; break; }
    case 1539: 
      var $2230=HEAP32[((_fpout)>>2)];
      var $call3989=_fclose($2230);
      HEAP32[((_fpout)>>2)]=0;
      var $2231=HEAP32[((_number_of_open_files)>>2)];
      var $dec3990=(($2231-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec3990;
      __label__ = 1540; break;
    case 1540: 
      var $2232=HEAP32[((_nosave)>>2)];
      var $tobool3992=(($2232)|0)!=0;
      if ($tobool3992) { __label__ = 1541; break; } else { __label__ = 1542; break; }
    case 1541: 
      __label__ = 1555; break;
    case 1542: 
      HEAP32[((_first_trial)>>2)]=0;
      var $2233=HEAP32[((_nosave)>>2)];
      var $cmp3995=(($2233)|0)==0;
      if ($cmp3995) { __label__ = 1543; break; } else { __label__ = 1550; break; }
    case 1543: 
      var $2234=HEAP32[((_verbose)>>2)];
      var $cmp3998=(($2234)|0) > 1;
      if ($cmp3998) { __label__ = 1544; break; } else { __label__ = 1545; break; }
    case 1544: 
      var $call4001=_printf(((STRING_TABLE.__str303)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1545; break;
    case 1545: 
      var $2235=HEAP32[((_outname)>>2)];
      var $call4003=_fopen($2235, ((STRING_TABLE.__str101)|0));
      HEAP32[((_fpin)>>2)]=$call4003;
      var $cmp4004=(($call4003)|0)==0;
      if ($cmp4004) { __label__ = 1546; break; } else { __label__ = 1549; break; }
    case 1546: 
      var $2236=HEAP32[((_stdout)>>2)];
      var $2237=HEAP32[((_outname)>>2)];
      var $call4007=_fprintf($2236, ((STRING_TABLE.__str304)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2237,tempInt));
      var $2238=HEAP32[((_png_row_filters)>>2)];
      var $cmp4008=(($2238)|0)!=0;
      if ($cmp4008) { __label__ = 1547; break; } else { __label__ = 1548; break; }
    case 1547: 
      var $2239=HEAP32[((_png_row_filters)>>2)];
      _free($2239);
      HEAP32[((_png_row_filters)>>2)]=0;
      __label__ = 1548; break;
    case 1548: 
      _exit(1);
      throw "Reached an unreachable!"
    case 1549: 
      var $2240=HEAP32[((_number_of_open_files)>>2)];
      var $inc4013=(($2240+1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$inc4013;
      var $2241=HEAP32[((_fpin)>>2)];
      var $call4014=_measure_idats($2241);
      var $2242=HEAP32[((_trial)>>2)];
      var $arrayidx4015=((_idat_length+($2242<<2))|0);
      HEAP32[(($arrayidx4015)>>2)]=$call4014;
      var $2243=HEAP32[((_fpin)>>2)];
      var $call4016=_fclose($2243);
      HEAP32[((_fpin)>>2)]=0;
      var $2244=HEAP32[((_number_of_open_files)>>2)];
      var $dec4017=(($2244-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec4017;
      __label__ = 1550; break;
    case 1550: 
      var $2245=HEAP32[((_verbose)>>2)];
      var $cmp4019=(($2245)|0) > 0;
      if ($cmp4019) { __label__ = 1551; break; } else { __label__ = 1553; break; }
    case 1551: 
      var $2246=HEAP32[((_trial)>>2)];
      var $cmp4022=(($2246)|0)!=200;
      if ($cmp4022) { __label__ = 1552; break; } else { __label__ = 1553; break; }
    case 1552: 
      var $2247=HEAP32[((_stdout)>>2)];
      var $2248=HEAP32[((_trial)>>2)];
      var $2249=HEAP32[((_filter_type)>>2)];
      var $2250=HEAP32[((_zlib_level)>>2)];
      var $2251=HEAP32[((_z_strategy)>>2)];
      var $2252=HEAP32[((_trial)>>2)];
      var $arrayidx4025=((_idat_length+($2252<<2))|0);
      var $2253=HEAP32[(($arrayidx4025)>>2)];
      var $call4026=_fprintf($2247, ((STRING_TABLE.__str305)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2248,HEAP32[((tempInt+4)>>2)]=$2249,HEAP32[((tempInt+8)>>2)]=$2250,HEAP32[((tempInt+12)>>2)]=$2251,HEAP32[((tempInt+16)>>2)]=$2253,tempInt));
      var $2254=HEAP32[((_stdout)>>2)];
      var $call4027=_fflush($2254);
      __label__ = 1553; break;
    case 1553: 
      __label__ = 1554; break;
    case 1554: 
      var $2255=HEAP32[((_trial)>>2)];
      var $inc4030=(($2255+1)|0);
      HEAP32[((_trial)>>2)]=$inc4030;
      __label__ = 648; break;
    case 1555: 
      var $2256=HEAP32[((_verbose)>>2)];
      var $cmp4032=(($2256)|0) > 1;
      if ($cmp4032) { __label__ = 1556; break; } else { __label__ = 1557; break; }
    case 1556: 
      var $call4035=_printf(((STRING_TABLE.__str306)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=200,tempInt));
      __label__ = 1557; break;
    case 1557: 
      __label__ = 1558; break;
    case 1558: 
      var $2257=HEAP32[((_fpin)>>2)];
      var $tobool4038=(($2257)|0)!=0;
      if ($tobool4038) { __label__ = 1559; break; } else { __label__ = 1560; break; }
    case 1559: 
      var $2258=HEAP32[((_fpin)>>2)];
      var $call4040=_fclose($2258);
      HEAP32[((_fpin)>>2)]=0;
      var $2259=HEAP32[((_number_of_open_files)>>2)];
      var $dec4041=(($2259-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec4041;
      __label__ = 1560; break;
    case 1560: 
      var $2260=HEAP32[((_nosave)>>2)];
      var $cmp4043=(($2260)|0)==0;
      if ($cmp4043) { __label__ = 1561; break; } else { __label__ = 1563; break; }
    case 1561: 
      var $2261=HEAP32[((_fpout)>>2)];
      var $tobool4046=(($2261)|0)!=0;
      if ($tobool4046) { __label__ = 1562; break; } else { __label__ = 1563; break; }
    case 1562: 
      var $2262=HEAP32[((_fpout)>>2)];
      var $call4048=_fclose($2262);
      HEAP32[((_fpout)>>2)]=0;
      var $2263=HEAP32[((_number_of_open_files)>>2)];
      var $dec4049=(($2263-1)|0);
      HEAP32[((_number_of_open_files)>>2)]=$dec4049;
      __label__ = 1563; break;
    case 1563: 
      var $2264=HEAP32[((_nosave)>>2)];
      var $cmp4051=(($2264)|0)==0;
      if ($cmp4051) { __label__ = 1564; break; } else { __label__ = 1571; break; }
    case 1564: 
      var $2265=HEAP32[((_overwrite)>>2)];
      var $cmp4054=(($2265)|0)!=0;
      if ($cmp4054) { __label__ = 1565; break; } else { __label__ = 1571; break; }
    case 1565: 
      var $2266=HEAP32[((_outname)>>2)];
      var $2267=HEAP32[((_inname)>>2)];
      var $call4057=_rename($2266, $2267);
      var $cmp4058=(($call4057)|0)!=0;
      if ($cmp4058) { __label__ = 1566; break; } else { __label__ = 1567; break; }
    case 1566: 
      var $2268=HEAP32[((_stdout)>>2)];
      var $2269=HEAP32[((_outname)>>2)];
      var $2270=HEAP32[((_inname)>>2)];
      var $call4061=_fprintf($2268, ((STRING_TABLE.__str307)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2269,HEAP32[((tempInt+4)>>2)]=$2270,tempInt));
      _exit(1);
      throw "Reached an unreachable!"
    case 1567: 
      var $2271=HEAP32[((_verbose)>>2)];
      var $cmp4063=(($2271)|0) > 2;
      if ($cmp4063) { __label__ = 1568; break; } else { __label__ = 1569; break; }
    case 1568: 
      var $2272=HEAP32[((_outname)>>2)];
      var $2273=HEAP32[((_inname)>>2)];
      var $call4066=_printf(((STRING_TABLE.__str308)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2272,HEAP32[((tempInt+4)>>2)]=$2273,tempInt));
      __label__ = 1569; break;
    case 1569: 
      __label__ = 1570; break;
    case 1570: 
      __label__ = 1571; break;
    case 1571: 
      var $2274=HEAP32[((_nosave)>>2)];
      var $cmp4070=(($2274)|0)==0;
      if ($cmp4070) { __label__ = 1572; break; } else { __label__ = 1597; break; }
    case 1572: 
      var $2275=HEAP32[((_inname)>>2)];
      var $call4074=_stat($2275, $stat_buf4073);
      var $st_size4075=(($stat_buf4073+28)|0);
      var $2276=HEAP32[(($st_size4075)>>2)];
      $input_length=$2276;
      var $st_atime=(($stat_buf4073+32)|0);
      var $2277=HEAP32[(($st_atime)>>2)];
      var $actime=(($utim)|0);
      HEAP32[(($actime)>>2)]=$2277;
      var $st_mtime=(($stat_buf4073+40)|0);
      var $2278=HEAP32[(($st_mtime)>>2)];
      var $modtime=(($utim+4)|0);
      HEAP32[(($modtime)>>2)]=$2278;
      var $2279=HEAP32[((_outname)>>2)];
      var $call4076=_stat($2279, $stat_buf4073);
      var $st_size4077=(($stat_buf4073+28)|0);
      var $2280=HEAP32[(($st_size4077)>>2)];
      $output_length=$2280;
      var $2281=HEAP32[((_new_time_stamp)>>2)];
      var $cmp4078=(($2281)|0)==0;
      if ($cmp4078) { __label__ = 1573; break; } else { __label__ = 1574; break; }
    case 1573: 
      var $2282=HEAP32[((_outname)>>2)];
      var $call4081=_utime($2282, $utim);
      __label__ = 1574; break;
    case 1574: 
      var $2283=HEAP32[((_verbose)>>2)];
      var $cmp4083=(($2283)|0) > 0;
      if ($cmp4083) { __label__ = 1575; break; } else { __label__ = 1596; break; }
    case 1575: 
      var $2284=$input_length;
      var $2285=$output_length;
      var $add4086=(($2284+$2285)|0);
      var $2286=HEAP32[((_total_input_length)>>2)];
      var $add4087=(($2286+$add4086)|0);
      HEAP32[((_total_input_length)>>2)]=$add4087;
      var $2287=HEAP32[((_best)>>2)];
      var $cmp4088=(($2287)|0)==0;
      if ($cmp4088) { __label__ = 1576; break; } else { __label__ = 1577; break; }
    case 1576: 
      var $2288=HEAP32[((_stdout)>>2)];
      var $2289=HEAP32[((_outname)>>2)];
      var $call4091=_fprintf($2288, ((STRING_TABLE.__str309)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2289,tempInt));
      __label__ = 1581; break;
    case 1577: 
      var $2290=HEAP32[((_already_crushed)>>2)];
      var $tobool4093=(($2290)|0)!=0;
      if ($tobool4093) { __label__ = 1580; break; } else { __label__ = 1578; break; }
    case 1578: 
      var $2291=HEAP32[((_image_is_immutable)>>2)];
      var $tobool4095=(($2291)|0)!=0;
      if ($tobool4095) { __label__ = 1580; break; } else { __label__ = 1579; break; }
    case 1579: 
      var $2292=HEAP32[((_stdout)>>2)];
      var $2293=HEAP32[((_best)>>2)];
      var $2294=HEAP32[((_best)>>2)];
      var $arrayidx4097=(($fm+($2294<<2))|0);
      var $2295=HEAP32[(($arrayidx4097)>>2)];
      var $2296=HEAP32[((_best)>>2)];
      var $arrayidx4098=(($lv+($2296<<2))|0);
      var $2297=HEAP32[(($arrayidx4098)>>2)];
      var $2298=HEAP32[((_best)>>2)];
      var $arrayidx4099=(($zs+($2298<<2))|0);
      var $2299=HEAP32[(($arrayidx4099)>>2)];
      var $2300=HEAP32[((_outname)>>2)];
      var $call4100=_fprintf($2292, ((STRING_TABLE.__str310)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2293,HEAP32[((tempInt+4)>>2)]=$2295,HEAP32[((tempInt+8)>>2)]=$2297,HEAP32[((tempInt+12)>>2)]=$2299,HEAP32[((tempInt+16)>>2)]=$2300,tempInt));
      __label__ = 1580; break;
    case 1580: 
      __label__ = 1581; break;
    case 1581: 
      var $2301=HEAP32[((((_idat_length)|0))>>2)];
      var $2302=HEAP32[((_best)>>2)];
      var $arrayidx4103=((_idat_length+($2302<<2))|0);
      var $2303=HEAP32[(($arrayidx4103)>>2)];
      var $cmp4104=(($2301)|0)==(($2303)|0);
      if ($cmp4104) { __label__ = 1582; break; } else { __label__ = 1583; break; }
    case 1582: 
      var $2304=HEAP32[((_stdout)>>2)];
      var $call4107=_fprintf($2304, ((STRING_TABLE.__str311)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1587; break;
    case 1583: 
      var $2305=HEAPU32[((((_idat_length)|0))>>2)];
      var $2306=HEAP32[((_best)>>2)];
      var $arrayidx4109=((_idat_length+($2306<<2))|0);
      var $2307=HEAPU32[(($arrayidx4109)>>2)];
      var $cmp4110=(($2305)>>>0) > (($2307)>>>0);
      if ($cmp4110) { __label__ = 1584; break; } else { __label__ = 1585; break; }
    case 1584: 
      var $2308=HEAP32[((_stdout)>>2)];
      var $2309=HEAP32[((_best)>>2)];
      var $arrayidx4113=((_idat_length+($2309<<2))|0);
      var $2310=HEAPU32[(($arrayidx4113)>>2)];
      var $conv4114=(($2310)>>>0);
      var $mul4115=$conv4114*100;
      var $2311=HEAPU32[((((_idat_length)|0))>>2)];
      var $conv4116=(($2311)>>>0);
      var $div4117=$mul4115/$conv4116;
      var $sub4118=100-$div4117;
      var $call4119=_fprintf($2308, ((STRING_TABLE.__str312)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$sub4118,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 1586; break;
    case 1585: 
      var $2312=HEAP32[((_stdout)>>2)];
      var $2313=HEAP32[((_best)>>2)];
      var $arrayidx4121=((_idat_length+($2313<<2))|0);
      var $2314=HEAPU32[(($arrayidx4121)>>2)];
      var $conv4122=(($2314)>>>0);
      var $mul4123=$conv4122*100;
      var $2315=HEAPU32[((((_idat_length)|0))>>2)];
      var $conv4124=(($2315)>>>0);
      var $div4125=$mul4123/$conv4124;
      var $sub4126=100-$div4125;
      var $sub4127=(-$sub4126);
      var $call4128=_fprintf($2312, ((STRING_TABLE.__str313)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$sub4127,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 1586; break;
    case 1586: 
      __label__ = 1587; break;
    case 1587: 
      var $2316=$input_length;
      var $2317=$output_length;
      var $cmp4131=(($2316)|0)==(($2317)|0);
      if ($cmp4131) { __label__ = 1588; break; } else { __label__ = 1589; break; }
    case 1588: 
      var $2318=HEAP32[((_stdout)>>2)];
      var $call4134=_fprintf($2318, ((STRING_TABLE.__str314)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 1593; break;
    case 1589: 
      var $2319=$input_length;
      var $2320=$output_length;
      var $cmp4136=(($2319)>>>0) > (($2320)>>>0);
      if ($cmp4136) { __label__ = 1590; break; } else { __label__ = 1591; break; }
    case 1590: 
      var $2321=HEAP32[((_stdout)>>2)];
      var $2322=$output_length;
      var $conv4139=(($2322)>>>0);
      var $mul4140=$conv4139*100;
      var $2323=$input_length;
      var $conv4141=(($2323)>>>0);
      var $div4142=$mul4140/$conv4141;
      var $sub4143=100-$div4142;
      var $call4144=_fprintf($2321, ((STRING_TABLE.__str315)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$sub4143,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 1592; break;
    case 1591: 
      var $2324=HEAP32[((_stdout)>>2)];
      var $2325=$output_length;
      var $conv4146=(($2325)>>>0);
      var $mul4147=$conv4146*100;
      var $2326=$input_length;
      var $conv4148=(($2326)>>>0);
      var $div4149=$mul4147/$conv4148;
      var $sub4150=100-$div4149;
      var $sub4151=(-$sub4150);
      var $call4152=_fprintf($2324, ((STRING_TABLE.__str316)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$sub4151,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[((tempInt+4)>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 1592; break;
    case 1592: 
      __label__ = 1593; break;
    case 1593: 
      var $2327=HEAP32[((_verbose)>>2)];
      var $cmp4155=(($2327)|0) > 2;
      if ($cmp4155) { __label__ = 1594; break; } else { __label__ = 1595; break; }
    case 1594: 
      var $2328=HEAP32[((_stdout)>>2)];
      var $2329=HEAP32[((_number_of_open_files)>>2)];
      var $call4158=_fprintf($2328, ((STRING_TABLE.__str317)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$2329,tempInt));
      __label__ = 1595; break;
    case 1595: 
      __label__ = 1596; break;
    case 1596: 
      __label__ = 1597; break;
    case 1597: 
      var $2330=HEAP32[((_pngcrush_mode)>>2)];
      var $cmp4162=(($2330)|0)==0;
      if ($cmp4162) { __label__ = 1598; break; } else { __label__ = 1607; break; }
    case 1598: 
      var $2331=HEAP32[((_png_row_filters)>>2)];
      var $cmp4165=(($2331)|0)!=0;
      if ($cmp4165) { __label__ = 1599; break; } else { __label__ = 1600; break; }
    case 1599: 
      var $2332=HEAP32[((_png_row_filters)>>2)];
      _free($2332);
      HEAP32[((_png_row_filters)>>2)]=0;
      __label__ = 1600; break;
    case 1600: 
      var $2333=HEAP32[((_verbose)>>2)];
      var $cmp4169=(($2333)|0) > 0;
      if ($cmp4169) { __label__ = 1601; break; } else { __label__ = 1602; break; }
    case 1601: 
      _show_result();
      __label__ = 1602; break;
    case 1602: 
      var $2334=HEAP32[((_iccp_length)>>2)];
      var $tobool4173=(($2334)|0)!=0;
      if ($tobool4173) { __label__ = 1603; break; } else { __label__ = 1604; break; }
    case 1603: 
      var $2335=HEAP32[((_iccp_text)>>2)];
      _free($2335);
      __label__ = 1604; break;
    case 1604: 
      var $2336=HEAP32[((_pngcrush_must_exit)>>2)];
      var $tobool4176=(($2336)|0)!=0;
      if ($tobool4176) { __label__ = 1605; break; } else { __label__ = 1606; break; }
    case 1605: 
      _exit(0);
      throw "Reached an unreachable!"
    case 1606: 
      $retval=0;
      __label__ = 1609; break;
    case 1607: 
      __label__ = 522; break;
    case 1608: 
      $retval=0;
      __label__ = 1609; break;
    case 1609: 
      var $2337=$retval;
      STACKTOP = __stackBase__;
      return $2337;
    default: assert(0, "bad label: " + __label__);
  } } catch(e) { if (!e.longjmp) throw(e); setjmpTable[e.label](e.value) }
}
Module["_main"] = _main;_main["X"]=1;

function _print_version_info() {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $0=HEAP32[((_stdout)>>2)];
  var $1=HEAP32[((_progname)>>2)];
  var $call=_png_get_header_version(0);
  var $call1=_fprintf($0, ((STRING_TABLE.__str355)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str156)|0),HEAP32[((tempInt+4)>>2)]=$1,HEAP32[((tempInt+8)>>2)]=((STRING_TABLE.__str72)|0),HEAP32[((tempInt+12)>>2)]=$call,HEAP32[((tempInt+16)>>2)]=((STRING_TABLE.__str159)|0),tempInt));
  var $2=HEAP32[((_stdout)>>2)];
  var $call2=_fprintf($2, ((STRING_TABLE.__str356)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str357)|0),tempInt));
  var $3=HEAP32[((_stdout)>>2)];
  var $call3=_fprintf($3, ((STRING_TABLE.__str358)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $4=HEAP32[((_stdout)>>2)];
  var $call4=_fprintf($4, ((STRING_TABLE.__str265)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _measure_idats($fp_in) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  var setjmpTable = {"5": function(value) { __label__ = 24; $call5 = value },dummy: 0};
  while(1) try { switch(__label__) {
    case 1: 
      var $fp_in_addr;
      var $exception__prev;
      var $exception__env=__stackBase__;
      $fp_in_addr=$fp_in;
      var $0=HEAP32[((_verbose)>>2)];
      var $cmp=(($0)|0) > 2;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $call=_printf(((STRING_TABLE.__str318)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 3; break;
    case 3: 
      var $1=HEAP32[((_verbose)>>2)];
      var $cmp1=(($1)|0) > 1;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $call3=_printf(((STRING_TABLE.__str319)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 5; break;
    case 5: 
      var $2=HEAP32[((((_the_exception_context)|0))>>2)];
      $exception__prev=$2;
      HEAP32[((((_the_exception_context)|0))>>2)]=$exception__env;
      var $arraydecay=(($exception__env)|0);
      var $call5=(HEAP32[(($arraydecay)>>2)]=__label__, 0);
      __label__ = 24; break;
    case 24: 
      var $cmp6=(($call5)|0)==0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 16; break; }
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $call8=_png_create_read_struct(((STRING_TABLE.__str72)|0), 0, 2, 0);
      HEAP32[((_read_ptr)>>2)]=$call8;
      var $3=HEAP32[((_verbose)>>2)];
      var $cmp9=(($3)|0) > 1;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $call11=_printf(((STRING_TABLE.__str320)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 9; break;
    case 9: 
      var $4=HEAP32[((_read_ptr)>>2)];
      var $call13=_png_create_info_struct($4);
      HEAP32[((_read_info_ptr)>>2)]=$call13;
      var $5=HEAP32[((_read_ptr)>>2)];
      var $call14=_png_create_info_struct($5);
      HEAP32[((_end_info_ptr)>>2)]=$call14;
      var $6=HEAP32[((_read_ptr)>>2)];
      var $7=$fp_in_addr;
      _png_init_io($6, $7);
      var $8=HEAP32[((_read_ptr)>>2)];
      _png_set_sig_bytes($8, 0);
      var $9=HEAP32[((_read_ptr)>>2)];
      var $call15=_png_measure_idat($9);
      HEAP32[((_measured_idat_length)>>2)]=$call15;
      var $10=HEAP32[((_verbose)>>2)];
      var $cmp16=(($10)|0) > 2;
      if ($cmp16) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $11=HEAP32[((_measured_idat_length)>>2)];
      var $call18=_printf(((STRING_TABLE.__str321)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$11,tempInt));
      __label__ = 11; break;
    case 11: 
      var $12=HEAP32[((_verbose)>>2)];
      var $cmp20=(($12)|0) > 1;
      if ($cmp20) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $call22=_printf(((STRING_TABLE.__str298)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 13; break;
    case 13: 
      _png_destroy_read_struct(_read_ptr, _read_info_ptr, _end_info_ptr);
      __label__ = 14; break;
    case 14: 
      HEAP32[((((_the_exception_context+4)|0))>>2)]=0;
      var $13=HEAP32[((((_the_exception_context+4)|0))>>2)];
      var $tobool=(($13)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 15; break; }
    case 15: 
      __label__ = 17; break;
    case 16: 
      HEAP32[((((_the_exception_context+4)|0))>>2)]=1;
      __label__ = 17; break;
    case 17: 
      var $14=$exception__prev;
      HEAP32[((((_the_exception_context)|0))>>2)]=$14;
      var $15=HEAP32[((((_the_exception_context+4)|0))>>2)];
      var $tobool25=(($15)|0)!=0;
      if ($tobool25) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $16=HEAP32[((((_the_exception_context+8)|0))>>2)];
      HEAP32[((_msg)>>2)]=$16;
      if (0) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 23; break;
    case 20: 
      var $17=HEAP32[((_stdout)>>2)];
      var $18=HEAP32[((_inname)>>2)];
      var $call28=_fprintf($17, ((STRING_TABLE.__str322)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$18,tempInt));
      var $19=HEAP32[((_stdout)>>2)];
      var $20=HEAP32[((_msg)>>2)];
      var $call29=_fprintf($19, ((STRING_TABLE.__str323)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$20,tempInt));
      _png_destroy_read_struct(_read_ptr, _read_info_ptr, _end_info_ptr);
      var $21=HEAP32[((_verbose)>>2)];
      var $cmp30=(($21)|0) > 1;
      if ($cmp30) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $call32=_printf(((STRING_TABLE.__str324)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 22; break;
    case 22: 
      HEAP32[((_measured_idat_length)>>2)]=0;
      __label__ = 23; break;
    case 23: 
      var $22=HEAP32[((_measured_idat_length)>>2)];
      STACKTOP = __stackBase__;
      return $22;
    default: assert(0, "bad label: " + __label__);
  } } catch(e) { if (!e.longjmp) throw(e); setjmpTable[e.label](e.value) }
}
_measure_idats["X"]=1;

function _print_usage($retval) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval_addr;
      var $j;
      var $jmax;
      $retval_addr=$retval;
      var $0=HEAP32[((_verbose)>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      $jmax=32;
      $j=0;
      __label__ = 3; break;
    case 3: 
      var $1=$j;
      var $2=$jmax;
      var $cmp=(($1)|0) < (($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $3=HEAP32[((_stdout)>>2)];
      var $4=$j;
      var $arrayidx=((_pngcrush_legal+($4<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $call=_fprintf($3, ((STRING_TABLE.__str264)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$5,tempInt));
      __label__ = 5; break;
    case 5: 
      var $6=$j;
      var $inc=(($6+1)|0);
      $j=$inc;
      __label__ = 3; break;
    case 6: 
      $jmax=3;
      $j=0;
      __label__ = 7; break;
    case 7: 
      var $7=$j;
      var $8=$jmax;
      var $cmp2=(($7)|0) < (($8)|0);
      if ($cmp2) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $9=HEAP32[((_stdout)>>2)];
      var $10=$j;
      var $arrayidx4=((_pngcrush_usage+($10<<2))|0);
      var $11=HEAP32[(($arrayidx4)>>2)];
      var $12=HEAP32[((_progname)>>2)];
      var $call5=_fprintf($9, $11, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$12,tempInt));
      __label__ = 9; break;
    case 9: 
      var $13=$j;
      var $inc7=(($13+1)|0);
      $j=$inc7;
      __label__ = 7; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $14=HEAP32[((_verbose)>>2)];
      var $cmp9=(($14)|0) > 1;
      if ($cmp9) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      _pngcrush_pause();
      var $15=HEAP32[((_stdout)>>2)];
      var $call11=_fprintf($15, ((STRING_TABLE.__str539)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 14; break;
    case 13: 
      var $16=HEAP32[((_stdout)>>2)];
      var $call12=_fprintf($16, ((STRING_TABLE.__str540)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 14; break;
    case 14: 
      $jmax=273;
      $j=0;
      __label__ = 15; break;
    case 15: 
      var $17=$j;
      var $18=$jmax;
      var $cmp15=(($17)|0) < (($18)|0);
      if ($cmp15) { __label__ = 16; break; } else { __label__ = 23; break; }
    case 16: 
      var $19=HEAP32[((_verbose)>>2)];
      var $20=$j;
      var $arrayidx17=((_pngcrush_options+($20<<3))|0);
      var $verbosity=(($arrayidx17)|0);
      var $21=HEAP32[(($verbosity)>>2)];
      var $cmp18=(($19)|0) >= (($21)|0);
      if ($cmp18) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $22=$j;
      var $arrayidx20=((_pngcrush_options+($22<<3))|0);
      var $textline=(($arrayidx20+4)|0);
      var $23=HEAP32[(($textline)>>2)];
      var $arrayidx21=(($23)|0);
      var $24=HEAP8[($arrayidx21)];
      var $conv=(($24 << 24) >> 24);
      var $25=HEAP8[(((STRING_TABLE.__str390)|0))];
      var $conv22=(($25 << 24) >> 24);
      var $cmp23=(($conv)|0)==(($conv22)|0);
      if ($cmp23) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      _pngcrush_pause();
      __label__ = 20; break;
    case 19: 
      var $26=HEAP32[((_stdout)>>2)];
      var $27=$j;
      var $arrayidx27=((_pngcrush_options+($27<<3))|0);
      var $textline28=(($arrayidx27+4)|0);
      var $28=HEAP32[(($textline28)>>2)];
      var $call29=_fprintf($26, ((STRING_TABLE.__str264)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$28,tempInt));
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $29=$j;
      var $inc33=(($29+1)|0);
      $j=$inc33;
      __label__ = 15; break;
    case 23: 
      var $30=HEAP32[((_verbose)>>2)];
      var $cmp35=(($30)|0) > 1;
      if ($cmp35) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $31=HEAP32[((_stdout)>>2)];
      var $32=HEAP32[((_progname)>>2)];
      var $call38=_fprintf($31, ((STRING_TABLE.__str541)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$32,tempInt));
      __label__ = 25; break;
    case 25: 
      var $33=$retval_addr;
      _exit($33);
      throw "Reached an unreachable!"
    case 26: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_print_usage["X"]=1;

function _png_cexcept_error($png_ptr, $err_msg) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $err_msg_addr;
      $png_ptr_addr=$png_ptr;
      $err_msg_addr=$err_msg;
      var $0=$png_ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 3; break;
    case 3: 
      var $1=$err_msg_addr;
      var $call=_strcmp($1, ((STRING_TABLE.__str570)|0));
      var $tobool1=(($call)|0)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $2=HEAP32[((_stderr)>>2)];
      var $3=HEAP32[((_inname)>>2)];
      var $call3=_fprintf($2, ((STRING_TABLE.__str571)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$3,tempInt));
      __label__ = 8; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $4=$err_msg_addr;
      HEAP32[((((_the_exception_context+8)|0))>>2)]=$4;
      __label__ = 7; break;
    case 7: 
      var $5=HEAP32[((((_the_exception_context)|0))>>2)];
      var $arraydecay=(($5)|0);
      _longjmp($arraydecay, 1);
      throw "Reached an unreachable!"
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_measure_idat($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $sum_idat_length;
      var $bb;
      var $malloced_length;
      var $png_signature=__stackBase__;
      var $mng_signature=__stackBase__+8;
      var $b;
      var $buff=__stackBase__+16;
      var $length;
      var $chunk_name=__stackBase__+56;
      var $chunk_length=__stackBase__+64;
      var $buff160=__stackBase__+68;
      var $length161;
      var $ib;
      $png_ptr_addr=$png_ptr;
      $sum_idat_length=0;
      $bb=0;
      $malloced_length=0;
      var $0=$png_signature;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($0)]=HEAP8[(((STRING_TABLE._png_measure_idat_png_signature)|0))];HEAP8[($0+1)]=HEAP8[(((STRING_TABLE._png_measure_idat_png_signature)|0)+1)];HEAP8[($0+2)]=HEAP8[(((STRING_TABLE._png_measure_idat_png_signature)|0)+2)];HEAP8[($0+3)]=HEAP8[(((STRING_TABLE._png_measure_idat_png_signature)|0)+3)];HEAP8[($0+4)]=HEAP8[(((STRING_TABLE._png_measure_idat_png_signature)|0)+4)];HEAP8[($0+5)]=HEAP8[(((STRING_TABLE._png_measure_idat_png_signature)|0)+5)];HEAP8[($0+6)]=HEAP8[(((STRING_TABLE._png_measure_idat_png_signature)|0)+6)];HEAP8[($0+7)]=HEAP8[(((STRING_TABLE._png_measure_idat_png_signature)|0)+7)];
      var $1=$mng_signature;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($1)]=HEAP8[(((STRING_TABLE._png_measure_idat_mng_signature)|0))];HEAP8[($1+1)]=HEAP8[(((STRING_TABLE._png_measure_idat_mng_signature)|0)+1)];HEAP8[($1+2)]=HEAP8[(((STRING_TABLE._png_measure_idat_mng_signature)|0)+2)];HEAP8[($1+3)]=HEAP8[(((STRING_TABLE._png_measure_idat_mng_signature)|0)+3)];HEAP8[($1+4)]=HEAP8[(((STRING_TABLE._png_measure_idat_mng_signature)|0)+4)];HEAP8[($1+5)]=HEAP8[(((STRING_TABLE._png_measure_idat_mng_signature)|0)+5)];HEAP8[($1+6)]=HEAP8[(((STRING_TABLE._png_measure_idat_mng_signature)|0)+6)];HEAP8[($1+7)]=HEAP8[(((STRING_TABLE._png_measure_idat_mng_signature)|0)+7)];
      var $2=$png_ptr_addr;
      var $arraydecay=(($png_signature)|0);
      _pngcrush_default_read_data($2, $arraydecay, 8);
      var $3=$png_ptr_addr;
      _png_set_sig_bytes($3, 8);
      var $arraydecay1=(($mng_signature)|0);
      var $arraydecay2=(($png_signature)|0);
      var $call=_memcmp($arraydecay1, $arraydecay2, 8);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 13; break; } else { __label__ = 2; break; }
    case 2: 
      var $4=HEAP32[((_read_ptr)>>2)];
      var $arraydecay3=(($buff)|0);
      _pngcrush_default_read_data($4, $arraydecay3, 4);
      var $arrayidx=(($buff+3)|0);
      var $5=HEAPU8[($arrayidx)];
      var $conv=(($5)&255);
      var $arrayidx4=(($buff+2)|0);
      var $6=HEAPU8[($arrayidx4)];
      var $conv5=(($6)&255);
      var $shl=$conv5 << 8;
      var $add=(($conv+$shl)|0);
      var $arrayidx6=(($buff+1)|0);
      var $7=HEAPU8[($arrayidx6)];
      var $conv7=(($7)&255);
      var $shl8=$conv7 << 16;
      var $add9=(($add+$shl8)|0);
      var $arrayidx10=(($buff)|0);
      var $8=HEAPU8[($arrayidx10)];
      var $conv11=(($8)&255);
      var $shl12=$conv11 << 24;
      var $add13=(($add9+$shl12)|0);
      $length=$add13;
      var $9=HEAP32[((_read_ptr)>>2)];
      var $arraydecay14=(($buff)|0);
      _pngcrush_default_read_data($9, $arraydecay14, 4);
      var $10=HEAP32[((_verbose)>>2)];
      var $cmp=(($10)|0) > 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $arrayidx17=(($buff)|0);
      var $11=HEAPU8[($arrayidx17)];
      var $conv18=(($11)&255);
      var $arrayidx19=(($buff+1)|0);
      var $12=HEAPU8[($arrayidx19)];
      var $conv20=(($12)&255);
      var $arrayidx21=(($buff+2)|0);
      var $13=HEAPU8[($arrayidx21)];
      var $conv22=(($13)&255);
      var $arrayidx23=(($buff+3)|0);
      var $14=HEAPU8[($arrayidx23)];
      var $conv24=(($14)&255);
      var $call25=_printf(((STRING_TABLE.__str325)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv18,HEAP32[((tempInt+4)>>2)]=$conv20,HEAP32[((tempInt+8)>>2)]=$conv22,HEAP32[((tempInt+12)>>2)]=$conv24,tempInt));
      __label__ = 4; break;
    case 4: 
      $b=0;
      __label__ = 5; break;
    case 5: 
      var $15=$b;
      var $cmp26=(($15)|0) < 40;
      if ($cmp26) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $16=$b;
      var $arrayidx28=(($buff+$16)|0);
      HEAP8[($arrayidx28)]=0;
      __label__ = 7; break;
    case 7: 
      var $17=$b;
      var $inc=(($17+1)|0);
      $b=$inc;
      __label__ = 5; break;
    case 8: 
      var $18=HEAP32[((_read_ptr)>>2)];
      var $arraydecay29=(($buff)|0);
      var $19=$length;
      _pngcrush_default_read_data($18, $arraydecay29, $19);
      var $20=HEAP32[((_verbose)>>2)];
      var $tobool30=(($20)|0)!=0;
      if ($tobool30) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $arrayidx32=(($buff+3)|0);
      var $21=HEAPU8[($arrayidx32)];
      var $conv33=(($21)&255);
      var $arrayidx34=(($buff+2)|0);
      var $22=HEAPU8[($arrayidx34)];
      var $conv35=(($22)&255);
      var $shl36=$conv35 << 8;
      var $add37=(($conv33+$shl36)|0);
      var $arrayidx38=(($buff+1)|0);
      var $23=HEAPU8[($arrayidx38)];
      var $conv39=(($23)&255);
      var $shl40=$conv39 << 16;
      var $add41=(($add37+$shl40)|0);
      var $arrayidx42=(($buff)|0);
      var $24=HEAPU8[($arrayidx42)];
      var $conv43=(($24)&255);
      var $shl44=$conv43 << 24;
      var $add45=(($add41+$shl44)|0);
      var $call46=_printf(((STRING_TABLE.__str326)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add45,tempInt));
      var $arrayidx47=(($buff+7)|0);
      var $25=HEAPU8[($arrayidx47)];
      var $conv48=(($25)&255);
      var $arrayidx49=(($buff+6)|0);
      var $26=HEAPU8[($arrayidx49)];
      var $conv50=(($26)&255);
      var $shl51=$conv50 << 8;
      var $add52=(($conv48+$shl51)|0);
      var $arrayidx53=(($buff+5)|0);
      var $27=HEAPU8[($arrayidx53)];
      var $conv54=(($27)&255);
      var $shl55=$conv54 << 16;
      var $add56=(($add52+$shl55)|0);
      var $arrayidx57=(($buff+4)|0);
      var $28=HEAPU8[($arrayidx57)];
      var $conv58=(($28)&255);
      var $shl59=$conv58 << 24;
      var $add60=(($add56+$shl59)|0);
      var $call61=_printf(((STRING_TABLE.__str327)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add60,tempInt));
      var $arrayidx62=(($buff+11)|0);
      var $29=HEAPU8[($arrayidx62)];
      var $conv63=(($29)&255);
      var $arrayidx64=(($buff+10)|0);
      var $30=HEAPU8[($arrayidx64)];
      var $conv65=(($30)&255);
      var $shl66=$conv65 << 8;
      var $add67=(($conv63+$shl66)|0);
      var $arrayidx68=(($buff+9)|0);
      var $31=HEAPU8[($arrayidx68)];
      var $conv69=(($31)&255);
      var $shl70=$conv69 << 16;
      var $add71=(($add67+$shl70)|0);
      var $arrayidx72=(($buff+8)|0);
      var $32=HEAPU8[($arrayidx72)];
      var $conv73=(($32)&255);
      var $shl74=$conv73 << 24;
      var $add75=(($add71+$shl74)|0);
      var $call76=_printf(((STRING_TABLE.__str328)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add75,tempInt));
      var $arrayidx77=(($buff+15)|0);
      var $33=HEAPU8[($arrayidx77)];
      var $conv78=(($33)&255);
      var $arrayidx79=(($buff+14)|0);
      var $34=HEAPU8[($arrayidx79)];
      var $conv80=(($34)&255);
      var $shl81=$conv80 << 8;
      var $add82=(($conv78+$shl81)|0);
      var $arrayidx83=(($buff+13)|0);
      var $35=HEAPU8[($arrayidx83)];
      var $conv84=(($35)&255);
      var $shl85=$conv84 << 16;
      var $add86=(($add82+$shl85)|0);
      var $arrayidx87=(($buff+12)|0);
      var $36=HEAPU8[($arrayidx87)];
      var $conv88=(($36)&255);
      var $shl89=$conv88 << 24;
      var $add90=(($add86+$shl89)|0);
      var $call91=_printf(((STRING_TABLE.__str329)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add90,tempInt));
      var $arrayidx92=(($buff+19)|0);
      var $37=HEAPU8[($arrayidx92)];
      var $conv93=(($37)&255);
      var $arrayidx94=(($buff+18)|0);
      var $38=HEAPU8[($arrayidx94)];
      var $conv95=(($38)&255);
      var $shl96=$conv95 << 8;
      var $add97=(($conv93+$shl96)|0);
      var $arrayidx98=(($buff+17)|0);
      var $39=HEAPU8[($arrayidx98)];
      var $conv99=(($39)&255);
      var $shl100=$conv99 << 16;
      var $add101=(($add97+$shl100)|0);
      var $arrayidx102=(($buff+16)|0);
      var $40=HEAPU8[($arrayidx102)];
      var $conv103=(($40)&255);
      var $shl104=$conv103 << 24;
      var $add105=(($add101+$shl104)|0);
      var $call106=_printf(((STRING_TABLE.__str330)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add105,tempInt));
      var $arrayidx107=(($buff+23)|0);
      var $41=HEAPU8[($arrayidx107)];
      var $conv108=(($41)&255);
      var $arrayidx109=(($buff+22)|0);
      var $42=HEAPU8[($arrayidx109)];
      var $conv110=(($42)&255);
      var $shl111=$conv110 << 8;
      var $add112=(($conv108+$shl111)|0);
      var $arrayidx113=(($buff+21)|0);
      var $43=HEAPU8[($arrayidx113)];
      var $conv114=(($43)&255);
      var $shl115=$conv114 << 16;
      var $add116=(($add112+$shl115)|0);
      var $arrayidx117=(($buff+20)|0);
      var $44=HEAPU8[($arrayidx117)];
      var $conv118=(($44)&255);
      var $shl119=$conv118 << 24;
      var $add120=(($add116+$shl119)|0);
      var $call121=_printf(((STRING_TABLE.__str331)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add120,tempInt));
      var $arrayidx122=(($buff+27)|0);
      var $45=HEAPU8[($arrayidx122)];
      var $conv123=(($45)&255);
      var $arrayidx124=(($buff+26)|0);
      var $46=HEAPU8[($arrayidx124)];
      var $conv125=(($46)&255);
      var $shl126=$conv125 << 8;
      var $add127=(($conv123+$shl126)|0);
      var $arrayidx128=(($buff+25)|0);
      var $47=HEAPU8[($arrayidx128)];
      var $conv129=(($47)&255);
      var $shl130=$conv129 << 16;
      var $add131=(($add127+$shl130)|0);
      var $arrayidx132=(($buff+24)|0);
      var $48=HEAPU8[($arrayidx132)];
      var $conv133=(($48)&255);
      var $shl134=$conv133 << 24;
      var $add135=(($add131+$shl134)|0);
      var $call136=_printf(((STRING_TABLE.__str332)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add135,tempInt));
      __label__ = 10; break;
    case 10: 
      var $49=HEAP32[((_new_mng)>>2)];
      var $tobool138=(($49)|0)!=0;
      if ($tobool138) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $50=HEAP32[((_mng_ptr)>>2)];
      var $arrayidx140=(($mng_signature)|0);
      _png_defaultwrite_data($50, $arrayidx140, 8);
      var $51=HEAP32[((_mng_ptr)>>2)];
      var $arraydecay141=(($buff)|0);
      _png_write_chunk($51, ((STRING_TABLE._png_measure_idat_png_MHDR)|0), $arraydecay141, 28);
      __label__ = 12; break;
    case 12: 
      var $52=HEAP32[((_read_ptr)>>2)];
      var $arraydecay143=(($buff)|0);
      _pngcrush_default_read_data($52, $arraydecay143, 4);
      HEAP32[((_input_format)>>2)]=1;
      __label__ = 19; break;
    case 13: 
      var $arraydecay144=(($png_signature)|0);
      var $call145=_png_sig_cmp($arraydecay144, 0, 8);
      var $tobool146=(($call145)|0)!=0;
      if ($tobool146) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $arraydecay148=(($png_signature)|0);
      var $call149=_png_sig_cmp($arraydecay148, 0, 4);
      var $tobool150=(($call149)|0)!=0;
      if ($tobool150) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $53=$png_ptr_addr;
      _png_error($53, ((STRING_TABLE.__str333)|0));
      __label__ = 17; break;
    case 16: 
      var $54=$png_ptr_addr;
      _png_error($54, ((STRING_TABLE.__str215)|0));
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $55=HEAP32[((_fix)>>2)];
      var $tobool156=(($55)|0)!=0;
      if ($tobool156) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $56=$png_ptr_addr;
      _png_set_crc_action($56, 3, 3);
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $57=$png_ptr_addr;
      var $arraydecay162=(($chunk_length)|0);
      _pngcrush_default_read_data($57, $arraydecay162, 4);
      var $58=$png_ptr_addr;
      var $arraydecay163=(($chunk_length)|0);
      var $call164=_png_get_uint_31($58, $arraydecay163);
      $length161=$call164;
      var $59=$png_ptr_addr;
      _png_reset_crc($59);
      var $60=$png_ptr_addr;
      var $arraydecay165=(($chunk_name)|0);
      _png_crc_read($60, $arraydecay165, 4);
      var $61=HEAP32[((_new_mng)>>2)];
      var $tobool166=(($61)|0)!=0;
      if ($tobool166) { __label__ = 23; break; } else { __label__ = 54; break; }
    case 23: 
      var $arraydecay168=(($chunk_name)|0);
      var $call169=_memcmp($arraydecay168, ((STRING_TABLE._png_measure_idat_png_nEED)|0), 4);
      var $tobool170=(($call169)|0)!=0;
      if ($tobool170) { __label__ = 27; break; } else { __label__ = 24; break; }
    case 24: 
      var $62=HEAP32[((_verbose)>>2)];
      var $cmp172=(($62)|0) > 0;
      if ($cmp172) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $arrayidx175=(($chunk_name)|0);
      var $63=HEAPU8[($arrayidx175)];
      var $conv176=(($63)&255);
      var $arrayidx177=(($chunk_name+1)|0);
      var $64=HEAPU8[($arrayidx177)];
      var $conv178=(($64)&255);
      var $arrayidx179=(($chunk_name+2)|0);
      var $65=HEAPU8[($arrayidx179)];
      var $conv180=(($65)&255);
      var $arrayidx181=(($chunk_name+3)|0);
      var $66=HEAPU8[($arrayidx181)];
      var $conv182=(($66)&255);
      var $67=$length161;
      var $call183=_printf(((STRING_TABLE.__str334)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv176,HEAP32[((tempInt+4)>>2)]=$conv178,HEAP32[((tempInt+8)>>2)]=$conv180,HEAP32[((tempInt+12)>>2)]=$conv182,HEAP32[((tempInt+16)>>2)]=$67,tempInt));
      __label__ = 26; break;
    case 26: 
      __label__ = 53; break;
    case 27: 
      var $68=HEAP32[((_verbose)>>2)];
      var $cmp186=(($68)|0) > 0;
      if ($cmp186) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $arrayidx189=(($chunk_name)|0);
      var $69=HEAPU8[($arrayidx189)];
      var $conv190=(($69)&255);
      var $arrayidx191=(($chunk_name+1)|0);
      var $70=HEAPU8[($arrayidx191)];
      var $conv192=(($70)&255);
      var $arrayidx193=(($chunk_name+2)|0);
      var $71=HEAPU8[($arrayidx193)];
      var $conv194=(($71)&255);
      var $arrayidx195=(($chunk_name+3)|0);
      var $72=HEAPU8[($arrayidx195)];
      var $conv196=(($72)&255);
      var $73=$length161;
      var $call197=_printf(((STRING_TABLE.__str335)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv190,HEAP32[((tempInt+4)>>2)]=$conv192,HEAP32[((tempInt+8)>>2)]=$conv194,HEAP32[((tempInt+12)>>2)]=$conv196,HEAP32[((tempInt+16)>>2)]=$73,tempInt));
      __label__ = 29; break;
    case 29: 
      var $74=$length161;
      var $75=$malloced_length;
      var $cmp199=(($74)>>>0) > (($75)>>>0);
      if ($cmp199) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $76=HEAP32[((_mng_ptr)>>2)];
      var $77=$bb;
      _png_free($76, $77);
      var $78=HEAP32[((_verbose)>>2)];
      var $cmp202=(($78)|0) > 0;
      if ($cmp202) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $79=$length161;
      var $call205=_printf(((STRING_TABLE.__str336)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$79,tempInt));
      __label__ = 32; break;
    case 32: 
      var $80=HEAP32[((_mng_ptr)>>2)];
      var $81=$length161;
      var $call207=_png_malloc($80, $81);
      $bb=$call207;
      var $82=$length161;
      $malloced_length=$82;
      __label__ = 33; break;
    case 33: 
      var $83=$png_ptr_addr;
      var $84=$bb;
      var $85=$length161;
      _png_crc_read($83, $84, $85);
      var $86=HEAP32[((_mng_ptr)>>2)];
      var $arraydecay209=(($chunk_name)|0);
      var $87=$bb;
      var $88=$length161;
      _png_write_chunk($86, $arraydecay209, $87, $88);
      var $89=HEAP32[((_verbose)>>2)];
      var $cmp210=(($89)|0) > 1;
      if ($cmp210) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: 
      var $arraydecay212=(($chunk_name)|0);
      var $call213=_memcmp($arraydecay212, ((STRING_TABLE._png_measure_idat_png_DHDR)|0), 4);
      var $tobool214=(($call213)|0)!=0;
      if ($tobool214) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $90=$bb;
      var $arrayidx216=(($90+1)|0);
      var $91=HEAPU8[($arrayidx216)];
      var $conv217=(($91)&255);
      var $92=$bb;
      var $arrayidx218=(($92)|0);
      var $93=HEAPU8[($arrayidx218)];
      var $conv219=(($93)&255);
      var $shl220=$conv219 << 8;
      var $add221=(($conv217+$shl220)|0);
      var $call222=_printf(((STRING_TABLE.__str337)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add221,tempInt));
      var $94=$bb;
      var $arrayidx223=(($94+2)|0);
      var $95=HEAPU8[($arrayidx223)];
      var $conv224=(($95)&255);
      var $call225=_printf(((STRING_TABLE.__str338)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv224,tempInt));
      var $96=$bb;
      var $arrayidx226=(($96+3)|0);
      var $97=HEAPU8[($arrayidx226)];
      var $conv227=(($97)&255);
      var $call228=_printf(((STRING_TABLE.__str339)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv227,tempInt));
      var $98=$bb;
      var $arrayidx229=(($98+7)|0);
      var $99=HEAPU8[($arrayidx229)];
      var $conv230=(($99)&255);
      var $100=$bb;
      var $arrayidx231=(($100+6)|0);
      var $101=HEAPU8[($arrayidx231)];
      var $conv232=(($101)&255);
      var $shl233=$conv232 << 8;
      var $add234=(($conv230+$shl233)|0);
      var $102=$bb;
      var $arrayidx235=(($102+5)|0);
      var $103=HEAPU8[($arrayidx235)];
      var $conv236=(($103)&255);
      var $shl237=$conv236 << 16;
      var $add238=(($add234+$shl237)|0);
      var $104=$bb;
      var $arrayidx239=(($104+4)|0);
      var $105=HEAPU8[($arrayidx239)];
      var $conv240=(($105)&255);
      var $shl241=$conv240 << 24;
      var $add242=(($add238+$shl241)|0);
      var $call243=_printf(((STRING_TABLE.__str326)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add242,tempInt));
      var $106=$bb;
      var $arrayidx244=(($106+11)|0);
      var $107=HEAPU8[($arrayidx244)];
      var $conv245=(($107)&255);
      var $108=$bb;
      var $arrayidx246=(($108+10)|0);
      var $109=HEAPU8[($arrayidx246)];
      var $conv247=(($109)&255);
      var $shl248=$conv247 << 8;
      var $add249=(($conv245+$shl248)|0);
      var $110=$bb;
      var $arrayidx250=(($110+9)|0);
      var $111=HEAPU8[($arrayidx250)];
      var $conv251=(($111)&255);
      var $shl252=$conv251 << 16;
      var $add253=(($add249+$shl252)|0);
      var $112=$bb;
      var $arrayidx254=(($112+8)|0);
      var $113=HEAPU8[($arrayidx254)];
      var $conv255=(($113)&255);
      var $shl256=$conv255 << 24;
      var $add257=(($add253+$shl256)|0);
      var $call258=_printf(((STRING_TABLE.__str327)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add257,tempInt));
      var $114=$bb;
      var $arrayidx259=(($114+15)|0);
      var $115=HEAPU8[($arrayidx259)];
      var $conv260=(($115)&255);
      var $116=$bb;
      var $arrayidx261=(($116+14)|0);
      var $117=HEAPU8[($arrayidx261)];
      var $conv262=(($117)&255);
      var $shl263=$conv262 << 8;
      var $add264=(($conv260+$shl263)|0);
      var $118=$bb;
      var $arrayidx265=(($118+13)|0);
      var $119=HEAPU8[($arrayidx265)];
      var $conv266=(($119)&255);
      var $shl267=$conv266 << 16;
      var $add268=(($add264+$shl267)|0);
      var $120=$bb;
      var $arrayidx269=(($120+12)|0);
      var $121=HEAPU8[($arrayidx269)];
      var $conv270=(($121)&255);
      var $shl271=$conv270 << 24;
      var $add272=(($add268+$shl271)|0);
      var $call273=_printf(((STRING_TABLE.__str340)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add272,tempInt));
      var $122=$bb;
      var $arrayidx274=(($122+19)|0);
      var $123=HEAPU8[($arrayidx274)];
      var $conv275=(($123)&255);
      var $124=$bb;
      var $arrayidx276=(($124+18)|0);
      var $125=HEAPU8[($arrayidx276)];
      var $conv277=(($125)&255);
      var $shl278=$conv277 << 8;
      var $add279=(($conv275+$shl278)|0);
      var $126=$bb;
      var $arrayidx280=(($126+17)|0);
      var $127=HEAPU8[($arrayidx280)];
      var $conv281=(($127)&255);
      var $shl282=$conv281 << 16;
      var $add283=(($add279+$shl282)|0);
      var $128=$bb;
      var $arrayidx284=(($128+16)|0);
      var $129=HEAPU8[($arrayidx284)];
      var $conv285=(($129)&255);
      var $shl286=$conv285 << 24;
      var $add287=(($add283+$shl286)|0);
      var $call288=_printf(((STRING_TABLE.__str341)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add287,tempInt));
      __label__ = 36; break;
    case 36: 
      var $130=HEAP32[((_verbose)>>2)];
      var $cmp290=(($130)|0) > 1;
      if ($cmp290) { __label__ = 37; break; } else { __label__ = 43; break; }
    case 37: 
      var $arraydecay293=(($chunk_name)|0);
      var $call294=_memcmp($arraydecay293, ((STRING_TABLE._png_measure_idat_png_DEFI)|0), 4);
      var $tobool295=(($call294)|0)!=0;
      if ($tobool295) { __label__ = 43; break; } else { __label__ = 38; break; }
    case 38: 
      var $131=$bb;
      var $arrayidx297=(($131+1)|0);
      var $132=HEAPU8[($arrayidx297)];
      var $conv298=(($132)&255);
      var $133=$bb;
      var $arrayidx299=(($133)|0);
      var $134=HEAPU8[($arrayidx299)];
      var $conv300=(($134)&255);
      var $shl301=$conv300 << 8;
      var $add302=(($conv298+$shl301)|0);
      var $call303=_printf(((STRING_TABLE.__str337)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add302,tempInt));
      var $135=$bb;
      var $arrayidx304=(($135+2)|0);
      var $136=HEAPU8[($arrayidx304)];
      var $conv305=(($136)&255);
      var $call306=_printf(((STRING_TABLE.__str342)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv305,tempInt));
      var $137=$bb;
      var $arrayidx307=(($137+3)|0);
      var $138=HEAPU8[($arrayidx307)];
      var $conv308=(($138)&255);
      var $call309=_printf(((STRING_TABLE.__str343)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv308,tempInt));
      var $139=$length161;
      var $cmp310=(($139)>>>0) > 4;
      if ($cmp310) { __label__ = 39; break; } else { __label__ = 42; break; }
    case 39: 
      var $140=$bb;
      var $arrayidx313=(($140+15)|0);
      var $141=HEAPU8[($arrayidx313)];
      var $conv314=(($141)&255);
      var $142=$bb;
      var $arrayidx315=(($142+14)|0);
      var $143=HEAPU8[($arrayidx315)];
      var $conv316=(($143)&255);
      var $shl317=$conv316 << 8;
      var $add318=(($conv314+$shl317)|0);
      var $144=$bb;
      var $arrayidx319=(($144+13)|0);
      var $145=HEAPU8[($arrayidx319)];
      var $conv320=(($145)&255);
      var $shl321=$conv320 << 16;
      var $add322=(($add318+$shl321)|0);
      var $146=$bb;
      var $arrayidx323=(($146+12)|0);
      var $147=HEAPU8[($arrayidx323)];
      var $conv324=(($147)&255);
      var $shl325=$conv324 << 24;
      var $add326=(($add322+$shl325)|0);
      var $call327=_printf(((STRING_TABLE.__str340)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add326,tempInt));
      var $148=$bb;
      var $arrayidx328=(($148+19)|0);
      var $149=HEAPU8[($arrayidx328)];
      var $conv329=(($149)&255);
      var $150=$bb;
      var $arrayidx330=(($150+18)|0);
      var $151=HEAPU8[($arrayidx330)];
      var $conv331=(($151)&255);
      var $shl332=$conv331 << 8;
      var $add333=(($conv329+$shl332)|0);
      var $152=$bb;
      var $arrayidx334=(($152+17)|0);
      var $153=HEAPU8[($arrayidx334)];
      var $conv335=(($153)&255);
      var $shl336=$conv335 << 16;
      var $add337=(($add333+$shl336)|0);
      var $154=$bb;
      var $arrayidx338=(($154+16)|0);
      var $155=HEAPU8[($arrayidx338)];
      var $conv339=(($155)&255);
      var $shl340=$conv339 << 24;
      var $add341=(($add337+$shl340)|0);
      var $call342=_printf(((STRING_TABLE.__str341)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add341,tempInt));
      var $156=$length161;
      var $cmp343=(($156)>>>0) > 12;
      if ($cmp343) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $157=$bb;
      var $arrayidx346=(($157+20)|0);
      var $158=HEAPU8[($arrayidx346)];
      var $conv347=(($158)&255);
      var $159=$bb;
      var $arrayidx348=(($159+19)|0);
      var $160=HEAPU8[($arrayidx348)];
      var $conv349=(($160)&255);
      var $shl350=$conv349 << 8;
      var $add351=(($conv347+$shl350)|0);
      var $161=$bb;
      var $arrayidx352=(($161+18)|0);
      var $162=HEAPU8[($arrayidx352)];
      var $conv353=(($162)&255);
      var $shl354=$conv353 << 16;
      var $add355=(($add351+$shl354)|0);
      var $163=$bb;
      var $arrayidx356=(($163+17)|0);
      var $164=HEAPU8[($arrayidx356)];
      var $conv357=(($164)&255);
      var $shl358=$conv357 << 24;
      var $add359=(($add355+$shl358)|0);
      var $call360=_printf(((STRING_TABLE.__str344)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add359,tempInt));
      var $165=$bb;
      var $arrayidx361=(($165+24)|0);
      var $166=HEAPU8[($arrayidx361)];
      var $conv362=(($166)&255);
      var $167=$bb;
      var $arrayidx363=(($167+23)|0);
      var $168=HEAPU8[($arrayidx363)];
      var $conv364=(($168)&255);
      var $shl365=$conv364 << 8;
      var $add366=(($conv362+$shl365)|0);
      var $169=$bb;
      var $arrayidx367=(($169+22)|0);
      var $170=HEAPU8[($arrayidx367)];
      var $conv368=(($170)&255);
      var $shl369=$conv368 << 16;
      var $add370=(($add366+$shl369)|0);
      var $171=$bb;
      var $arrayidx371=(($171+21)|0);
      var $172=HEAPU8[($arrayidx371)];
      var $conv372=(($172)&255);
      var $shl373=$conv372 << 24;
      var $add374=(($add370+$shl373)|0);
      var $call375=_printf(((STRING_TABLE.__str345)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$add374,tempInt));
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $173=HEAP32[((_verbose)>>2)];
      var $cmp379=(($173)|0) > 1;
      if ($cmp379) { __label__ = 44; break; } else { __label__ = 52; break; }
    case 44: 
      var $arraydecay382=(($chunk_name)|0);
      var $call383=_memcmp($arraydecay382, ((STRING_TABLE._png_measure_idat_png_FRAM)|0), 4);
      var $tobool384=(($call383)|0)!=0;
      if ($tobool384) { __label__ = 52; break; } else { __label__ = 45; break; }
    case 45: 
      var $174=$bb;
      var $arrayidx386=(($174)|0);
      var $175=HEAPU8[($arrayidx386)];
      var $conv387=(($175)&255);
      var $call388=_printf(((STRING_TABLE.__str346)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv387,tempInt));
      var $176=$length161;
      var $cmp389=(($176)>>>0) > 1;
      if ($cmp389) { __label__ = 46; break; } else { __label__ = 51; break; }
    case 46: 
      var $call392=_printf(((STRING_TABLE.__str347)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $ib=0;
      __label__ = 47; break;
    case 47: 
      var $177=$ib;
      var $178=$bb;
      var $arrayidx394=(($178+$177)|0);
      var $179=HEAP8[($arrayidx394)];
      var $tobool395=(($179 << 24) >> 24)!=0;
      if ($tobool395) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: 
      var $180=$ib;
      var $181=$bb;
      var $arrayidx397=(($181+$180)|0);
      var $182=HEAPU8[($arrayidx397)];
      var $conv398=(($182)&255);
      var $call399=_printf(((STRING_TABLE.__str348)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv398,tempInt));
      __label__ = 49; break;
    case 49: 
      var $183=$ib;
      var $inc401=(($183+1)|0);
      $ib=$inc401;
      __label__ = 47; break;
    case 50: 
      var $call403=_printf(((STRING_TABLE.__str265)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 51; break;
    case 51: 
      $length161=0;
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 78; break;
    case 54: 
      var $arraydecay408=(($chunk_name)|0);
      var $184=HEAPU8[($arraydecay408)];
      var $conv409=(($184)&255);
      var $shl410=$conv409 << 24;
      var $arraydecay411=(($chunk_name)|0);
      var $add_ptr=(($arraydecay411+1)|0);
      var $185=HEAPU8[($add_ptr)];
      var $conv412=(($185)&255);
      var $shl413=$conv412 << 16;
      var $add414=(($shl410+$shl413)|0);
      var $arraydecay415=(($chunk_name)|0);
      var $add_ptr416=(($arraydecay415+2)|0);
      var $186=HEAPU8[($add_ptr416)];
      var $conv417=(($186)&255);
      var $shl418=$conv417 << 8;
      var $add419=(($add414+$shl418)|0);
      var $arraydecay420=(($chunk_name)|0);
      var $add_ptr421=(($arraydecay420+3)|0);
      var $187=HEAPU8[($add_ptr421)];
      var $conv422=(($187)&255);
      var $add423=(($add419+$conv422)|0);
      var $cmp424=(($add423)|0)==1633899596;
      if ($cmp424) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      HEAP32[((_found_acTL_chunk)>>2)]=1;
      __label__ = 77; break;
    case 56: 
      var $arraydecay428=(($chunk_name)|0);
      var $188=HEAPU8[($arraydecay428)];
      var $conv429=(($188)&255);
      var $shl430=$conv429 << 24;
      var $arraydecay431=(($chunk_name)|0);
      var $add_ptr432=(($arraydecay431+1)|0);
      var $189=HEAPU8[($add_ptr432)];
      var $conv433=(($189)&255);
      var $shl434=$conv433 << 16;
      var $add435=(($shl430+$shl434)|0);
      var $arraydecay436=(($chunk_name)|0);
      var $add_ptr437=(($arraydecay436+2)|0);
      var $190=HEAPU8[($add_ptr437)];
      var $conv438=(($190)&255);
      var $shl439=$conv438 << 8;
      var $add440=(($add435+$shl439)|0);
      var $arraydecay441=(($chunk_name)|0);
      var $add_ptr442=(($arraydecay441+3)|0);
      var $191=HEAPU8[($add_ptr442)];
      var $conv443=(($191)&255);
      var $add444=(($add440+$conv443)|0);
      var $cmp445=(($add444)|0)==1229209940;
      if ($cmp445) { __label__ = 57; break; } else { __label__ = 60; break; }
    case 57: 
      var $192=$length161;
      var $193=$sum_idat_length;
      var $add448=(($193+$192)|0);
      $sum_idat_length=$add448;
      var $194=$length161;
      var $195=HEAPU32[((_crushed_idat_size)>>2)];
      var $cmp449=(($194)>>>0) > (($195)>>>0);
      if ($cmp449) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $196=HEAP32[((_already_crushed)>>2)];
      var $inc452=(($196+1)|0);
      HEAP32[((_already_crushed)>>2)]=$inc452;
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      var $197=HEAP32[((_verbose)>>2)];
      var $cmp455=(($197)|0) > 1;
      if ($cmp455) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $arrayidx458=(($chunk_name+4)|0);
      HEAP8[($arrayidx458)]=0;
      var $arraydecay459=(($chunk_name)|0);
      var $198=$length161;
      var $call460=_printf(((STRING_TABLE.__str349)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$arraydecay459,HEAP32[((tempInt+4)>>2)]=$198,tempInt));
      __label__ = 62; break;
    case 62: 
      var $arraydecay462=(($chunk_name)|0);
      var $199=HEAPU8[($arraydecay462)];
      var $conv463=(($199)&255);
      var $shl464=$conv463 << 24;
      var $arraydecay465=(($chunk_name)|0);
      var $add_ptr466=(($arraydecay465+1)|0);
      var $200=HEAPU8[($add_ptr466)];
      var $conv467=(($200)&255);
      var $shl468=$conv467 << 16;
      var $add469=(($shl464+$shl468)|0);
      var $arraydecay470=(($chunk_name)|0);
      var $add_ptr471=(($arraydecay470+2)|0);
      var $201=HEAPU8[($add_ptr471)];
      var $conv472=(($201)&255);
      var $shl473=$conv472 << 8;
      var $add474=(($add469+$shl473)|0);
      var $arraydecay475=(($chunk_name)|0);
      var $add_ptr476=(($arraydecay475+3)|0);
      var $202=HEAPU8[($add_ptr476)];
      var $conv477=(($202)&255);
      var $add478=(($add474+$conv477)|0);
      var $cmp479=(($add478)|0)==1130840649;
      if ($cmp479) { __label__ = 63; break; } else { __label__ = 67; break; }
    case 63: 
      var $call482=_printf(((STRING_TABLE.__str350)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $203=HEAP32[((_fix)>>2)];
      var $tobool483=(($203)|0)!=0;
      if ($tobool483) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $call485=_printf(((STRING_TABLE.__str351)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 66; break;
    case 65: 
      var $call487=_printf(((STRING_TABLE.__str352)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 66; break;
    case 66: 
      var $204=HEAP32[((_found_CgBI)>>2)];
      var $inc489=(($204+1)|0);
      HEAP32[((_found_CgBI)>>2)]=$inc489;
      var $205=HEAP32[((_nosave)>>2)];
      var $inc490=(($205+1)|0);
      HEAP32[((_nosave)>>2)]=$inc490;
      __label__ = 67; break;
    case 67: 
      var $arraydecay492=(($chunk_name)|0);
      var $206=HEAPU8[($arraydecay492)];
      var $conv493=(($206)&255);
      var $shl494=$conv493 << 24;
      var $arraydecay495=(($chunk_name)|0);
      var $add_ptr496=(($arraydecay495+1)|0);
      var $207=HEAPU8[($add_ptr496)];
      var $conv497=(($207)&255);
      var $shl498=$conv497 << 16;
      var $add499=(($shl494+$shl498)|0);
      var $arraydecay500=(($chunk_name)|0);
      var $add_ptr501=(($arraydecay500+2)|0);
      var $208=HEAPU8[($add_ptr501)];
      var $conv502=(($208)&255);
      var $shl503=$conv502 << 8;
      var $add504=(($add499+$shl503)|0);
      var $arraydecay505=(($chunk_name)|0);
      var $add_ptr506=(($arraydecay505+3)|0);
      var $209=HEAPU8[($add_ptr506)];
      var $conv507=(($209)&255);
      var $add508=(($add504+$conv507)|0);
      var $cmp509=(($add508)|0)==1229472850;
      if ($cmp509) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $210=$png_ptr_addr;
      var $arraydecay512=(($buff160)|0);
      _png_crc_read($210, $arraydecay512, 13);
      var $211=$length161;
      var $sub=(($211-13)|0);
      $length161=$sub;
      var $arrayidx513=(($buff160+9)|0);
      var $212=HEAPU8[($arrayidx513)];
      var $conv514=(($212)&255);
      HEAP32[((_input_color_type)>>2)]=$conv514;
      __label__ = 76; break;
    case 69: 
      var $arraydecay516=(($chunk_name)|0);
      var $213=HEAPU8[($arraydecay516)];
      var $conv517=(($213)&255);
      var $shl518=$conv517 << 24;
      var $arraydecay519=(($chunk_name)|0);
      var $add_ptr520=(($arraydecay519+1)|0);
      var $214=HEAPU8[($add_ptr520)];
      var $conv521=(($214)&255);
      var $shl522=$conv521 << 16;
      var $add523=(($shl518+$shl522)|0);
      var $arraydecay524=(($chunk_name)|0);
      var $add_ptr525=(($arraydecay524+2)|0);
      var $215=HEAPU8[($add_ptr525)];
      var $conv526=(($215)&255);
      var $shl527=$conv526 << 8;
      var $add528=(($add523+$shl527)|0);
      var $arraydecay529=(($chunk_name)|0);
      var $add_ptr530=(($arraydecay529+3)|0);
      var $216=HEAPU8[($add_ptr530)];
      var $conv531=(($216)&255);
      var $add532=(($add528+$conv531)|0);
      var $cmp533=(($add532)|0)==1683179847;
      if ($cmp533) { __label__ = 70; break; } else { __label__ = 74; break; }
    case 70: 
      var $217=HEAP32[((_found_any_chunk)>>2)];
      var $cmp536=(($217)|0)==0;
      if ($cmp536) { __label__ = 71; break; } else { __label__ = 73; break; }
    case 71: 
      var $218=HEAP32[((_all_chunks_are_safe)>>2)];
      var $tobool539=(($218)|0)!=0;
      if ($tobool539) { __label__ = 73; break; } else { __label__ = 72; break; }
    case 72: 
      HEAP32[((_image_is_immutable)>>2)]=1;
      __label__ = 73; break;
    case 73: 
      __label__ = 75; break;
    case 74: 
      HEAP32[((_found_any_chunk)>>2)]=1;
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      var $arraydecay547=(($chunk_name)|0);
      var $219=HEAPU8[($arraydecay547)];
      var $conv548=(($219)&255);
      var $shl549=$conv548 << 24;
      var $arraydecay550=(($chunk_name)|0);
      var $add_ptr551=(($arraydecay550+1)|0);
      var $220=HEAPU8[($add_ptr551)];
      var $conv552=(($220)&255);
      var $shl553=$conv552 << 16;
      var $add554=(($shl549+$shl553)|0);
      var $arraydecay555=(($chunk_name)|0);
      var $add_ptr556=(($arraydecay555+2)|0);
      var $221=HEAPU8[($add_ptr556)];
      var $conv557=(($221)&255);
      var $shl558=$conv557 << 8;
      var $add559=(($add554+$shl558)|0);
      var $arraydecay560=(($chunk_name)|0);
      var $add_ptr561=(($arraydecay560+3)|0);
      var $222=HEAPU8[($add_ptr561)];
      var $conv562=(($222)&255);
      var $add563=(($add559+$conv562)|0);
      var $cmp564=(($add563)|0)==1732332865;
      if ($cmp564) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      HEAP32[((_found_gAMA)>>2)]=1;
      __label__ = 80; break;
    case 80: 
      var $arraydecay568=(($chunk_name)|0);
      var $223=HEAPU8[($arraydecay568)];
      var $conv569=(($223)&255);
      var $shl570=$conv569 << 24;
      var $arraydecay571=(($chunk_name)|0);
      var $add_ptr572=(($arraydecay571+1)|0);
      var $224=HEAPU8[($add_ptr572)];
      var $conv573=(($224)&255);
      var $shl574=$conv573 << 16;
      var $add575=(($shl570+$shl574)|0);
      var $arraydecay576=(($chunk_name)|0);
      var $add_ptr577=(($arraydecay576+2)|0);
      var $225=HEAPU8[($add_ptr577)];
      var $conv578=(($225)&255);
      var $shl579=$conv578 << 8;
      var $add580=(($add575+$shl579)|0);
      var $arraydecay581=(($chunk_name)|0);
      var $add_ptr582=(($arraydecay581+3)|0);
      var $226=HEAPU8[($add_ptr582)];
      var $conv583=(($226)&255);
      var $add584=(($add580+$conv583)|0);
      var $cmp585=(($add584)|0)==1665684045;
      if ($cmp585) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      HEAP32[((_found_cHRM)>>2)]=1;
      __label__ = 82; break;
    case 82: 
      var $arraydecay589=(($chunk_name)|0);
      var $227=HEAPU8[($arraydecay589)];
      var $conv590=(($227)&255);
      var $shl591=$conv590 << 24;
      var $arraydecay592=(($chunk_name)|0);
      var $add_ptr593=(($arraydecay592+1)|0);
      var $228=HEAPU8[($add_ptr593)];
      var $conv594=(($228)&255);
      var $shl595=$conv594 << 16;
      var $add596=(($shl591+$shl595)|0);
      var $arraydecay597=(($chunk_name)|0);
      var $add_ptr598=(($arraydecay597+2)|0);
      var $229=HEAPU8[($add_ptr598)];
      var $conv599=(($229)&255);
      var $shl600=$conv599 << 8;
      var $add601=(($add596+$shl600)|0);
      var $arraydecay602=(($chunk_name)|0);
      var $add_ptr603=(($arraydecay602+3)|0);
      var $230=HEAPU8[($add_ptr603)];
      var $conv604=(($230)&255);
      var $add605=(($add601+$conv604)|0);
      var $cmp606=(($add605)|0)==1766015824;
      if ($cmp606) { __label__ = 83; break; } else { __label__ = 88; break; }
    case 83: 
      var $231=$length161;
      var $cmp609=(($231)|0)==2615;
      if ($cmp609) { __label__ = 84; break; } else { __label__ = 87; break; }
    case 84: 
      var $232=$png_ptr_addr;
      var $arraydecay612=(($buff160)|0);
      _png_crc_read($232, $arraydecay612, 22);
      var $233=$length161;
      var $sub613=(($233-22)|0);
      $length161=$sub613;
      var $arrayidx614=(($buff160+23)|0);
      HEAP8[($arrayidx614)]=0;
      var $arraydecay615=(($buff160)|0);
      var $call616=_strncmp($arraydecay615, ((STRING_TABLE.__str353)|0), 21);
      var $tobool617=(($call616)|0)!=0;
      if ($tobool617) { __label__ = 86; break; } else { __label__ = 85; break; }
    case 85: 
      var $call619=_printf(((STRING_TABLE.__str354)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      HEAP32[((_image_specified_gamma)>>2)]=45455;
      HEAP32[((_intent)>>2)]=0;
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      var $234=$png_ptr_addr;
      var $235=$length161;
      var $call623=_png_crc_finish($234, $235);
      var $arraydecay624=(($chunk_name)|0);
      var $call625=_memcmp($arraydecay624, ((STRING_TABLE._png_measure_idat_png_MEND)|0), 4);
      var $tobool626=(($call625)|0)!=0;
      if ($tobool626) { __label__ = 92; break; } else { __label__ = 89; break; }
    case 89: 
      var $236=HEAP32[((_new_mng)>>2)];
      var $tobool628=(($236)|0)!=0;
      if ($tobool628) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      var $237=HEAP32[((_mng_ptr)>>2)];
      var $238=$bb;
      _png_free($237, $238);
      $retval=0;
      __label__ = 100; break;
    case 91: 
      var $239=$sum_idat_length;
      $retval=$239;
      __label__ = 100; break;
    case 92: 
      var $240=HEAP32[((_input_format)>>2)];
      var $cmp632=(($240)|0)==0;
      if ($cmp632) { __label__ = 93; break; } else { __label__ = 99; break; }
    case 93: 
      var $arraydecay635=(($chunk_name)|0);
      var $241=HEAPU8[($arraydecay635)];
      var $conv636=(($241)&255);
      var $shl637=$conv636 << 24;
      var $arraydecay638=(($chunk_name)|0);
      var $add_ptr639=(($arraydecay638+1)|0);
      var $242=HEAPU8[($add_ptr639)];
      var $conv640=(($242)&255);
      var $shl641=$conv640 << 16;
      var $add642=(($shl637+$shl641)|0);
      var $arraydecay643=(($chunk_name)|0);
      var $add_ptr644=(($arraydecay643+2)|0);
      var $243=HEAPU8[($add_ptr644)];
      var $conv645=(($243)&255);
      var $shl646=$conv645 << 8;
      var $add647=(($add642+$shl646)|0);
      var $arraydecay648=(($chunk_name)|0);
      var $add_ptr649=(($arraydecay648+3)|0);
      var $244=HEAPU8[($add_ptr649)];
      var $conv650=(($244)&255);
      var $add651=(($add647+$conv650)|0);
      var $cmp652=(($add651)|0)==1229278788;
      if ($cmp652) { __label__ = 94; break; } else { __label__ = 98; break; }
    case 94: 
      var $245=HEAP32[((_fix)>>2)];
      var $tobool655=(($245)|0)!=0;
      if ($tobool655) { __label__ = 97; break; } else { __label__ = 95; break; }
    case 95: 
      var $246=HEAP32[((_found_CgBI)>>2)];
      var $tobool657=(($246)|0)!=0;
      if ($tobool657) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: 
      $retval=0;
      __label__ = 100; break;
    case 97: 
      var $247=$sum_idat_length;
      $retval=$247;
      __label__ = 100; break;
    case 98: 
      __label__ = 99; break;
    case 99: 
      __label__ = 22; break;
    case 100: 
      var $248=$retval;
      STACKTOP = __stackBase__;
      return $248;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_measure_idat["X"]=1;

function _png_get_header_ver($png_ptr) {
  ;
  var __label__;

  var $png_ptr_addr;
  $png_ptr_addr=$png_ptr;
  var $0=$png_ptr_addr;
  ;
  return ((STRING_TABLE.__str8287)|0);
}


function _png_set_sig_bytes($png_ptr, $num_bytes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $num_bytes_addr;
      $png_ptr_addr=$png_ptr;
      $num_bytes_addr=$num_bytes;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 9; break;
    case 3: 
      var $1=$num_bytes_addr;
      var $cmp1=(($1)|0) > 8;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str279)|0));
      __label__ = 5; break;
    case 5: 
      var $3=$num_bytes_addr;
      var $cmp4=(($3)|0) < 0;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $cond = 0;__label__ = 8; break;
    case 7: 
      var $4=$num_bytes_addr;
      var $cond = $4;__label__ = 8; break;
    case 8: 
      var $cond;
      var $conv=(($cond) & 255);
      var $5=$png_ptr_addr;
      var $sig_bytes=(($5+297)|0);
      HEAP8[($sig_bytes)]=$conv;
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_sig_cmp($sig, $start, $num_to_check) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $sig_addr;
      var $start_addr;
      var $num_to_check_addr;
      var $png_signature=__stackBase__;
      $sig_addr=$sig;
      $start_addr=$start;
      $num_to_check_addr=$num_to_check;
      var $0=$png_signature;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($0)]=HEAP8[(((STRING_TABLE._png_sig_cmp_png_signature)|0))];HEAP8[($0+1)]=HEAP8[(((STRING_TABLE._png_sig_cmp_png_signature)|0)+1)];HEAP8[($0+2)]=HEAP8[(((STRING_TABLE._png_sig_cmp_png_signature)|0)+2)];HEAP8[($0+3)]=HEAP8[(((STRING_TABLE._png_sig_cmp_png_signature)|0)+3)];HEAP8[($0+4)]=HEAP8[(((STRING_TABLE._png_sig_cmp_png_signature)|0)+4)];HEAP8[($0+5)]=HEAP8[(((STRING_TABLE._png_sig_cmp_png_signature)|0)+5)];HEAP8[($0+6)]=HEAP8[(((STRING_TABLE._png_sig_cmp_png_signature)|0)+6)];HEAP8[($0+7)]=HEAP8[(((STRING_TABLE._png_sig_cmp_png_signature)|0)+7)];
      var $1=$num_to_check_addr;
      var $cmp=(($1)>>>0) > 8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $num_to_check_addr=8;
      __label__ = 6; break;
    case 3: 
      var $2=$num_to_check_addr;
      var $cmp1=(($2)>>>0) < 1;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=-1;
      __label__ = 11; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $3=$start_addr;
      var $cmp4=(($3)>>>0) > 7;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $retval=-1;
      __label__ = 11; break;
    case 8: 
      var $4=$start_addr;
      var $5=$num_to_check_addr;
      var $add=(($4+$5)|0);
      var $cmp7=(($add)>>>0) > 8;
      if ($cmp7) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $6=$start_addr;
      var $sub=((8-$6)|0);
      $num_to_check_addr=$sub;
      __label__ = 10; break;
    case 10: 
      var $7=$start_addr;
      var $8=$sig_addr;
      var $arrayidx=(($8+$7)|0);
      var $9=$start_addr;
      var $arrayidx10=(($png_signature+$9)|0);
      var $10=$num_to_check_addr;
      var $call=_memcmp($arrayidx, $arrayidx10, $10);
      $retval=$call;
      __label__ = 11; break;
    case 11: 
      var $11=$retval;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_zalloc($png_ptr, $items, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $items_addr;
      var $size_addr;
      var $ptr;
      var $p;
      var $save_flags;
      var $num_bytes;
      $png_ptr_addr=$png_ptr;
      $items_addr=$items;
      $size_addr=$size;
      var $0=$png_ptr_addr;
      var $1=$0;
      $p=$1;
      var $2=$p;
      var $flags=(($2+88)|0);
      var $3=HEAP32[(($flags)>>2)];
      $save_flags=$3;
      var $4=$png_ptr_addr;
      var $cmp=(($4)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 6; break;
    case 3: 
      var $5=$items_addr;
      var $6=$size_addr;
      var $div=Math.floor(4294967295/(($6)>>>0));
      var $cmp1=(($5)>>>0) > (($div)>>>0);
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $7=$p;
      _png_warning($7, ((STRING_TABLE.__str1280)|0));
      $retval=0;
      __label__ = 6; break;
    case 5: 
      var $8=$items_addr;
      var $9=$size_addr;
      var $mul=(($8*$9)|0);
      $num_bytes=$mul;
      var $10=$p;
      var $flags4=(($10+88)|0);
      var $11=HEAP32[(($flags4)>>2)];
      var $or=$11 | 1048576;
      HEAP32[(($flags4)>>2)]=$or;
      var $12=$png_ptr_addr;
      var $13=$12;
      var $14=$num_bytes;
      var $call=_png_malloc($13, $14);
      $ptr=$call;
      var $15=$save_flags;
      var $16=$p;
      var $flags5=(($16+88)|0);
      HEAP32[(($flags5)>>2)]=$15;
      var $17=$ptr;
      $retval=$17;
      __label__ = 6; break;
    case 6: 
      var $18=$retval;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_zalloc["X"]=1;

function _png_zfree($png_ptr, $ptr) {
  ;
  var __label__;

  var $png_ptr_addr;
  var $ptr_addr;
  $png_ptr_addr=$png_ptr;
  $ptr_addr=$ptr;
  var $0=$png_ptr_addr;
  var $1=$0;
  var $2=$ptr_addr;
  _png_free($1, $2);
  ;
  return;
}


function _png_reset_crc($png_ptr) {
  ;
  var __label__;

  var $png_ptr_addr;
  $png_ptr_addr=$png_ptr;
  var $call=_crc32(0, 0, 0);
  var $0=$png_ptr_addr;
  var $crc=(($0+268)|0);
  HEAP32[(($crc)>>2)]=$call;
  ;
  return;
}


function _png_calculate_crc($png_ptr, $ptr, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ptr_addr;
      var $length_addr;
      var $need_crc;
      var $crc;
      var $safeLength;
      $png_ptr_addr=$png_ptr;
      $ptr_addr=$ptr;
      $length_addr=$length;
      $need_crc=1;
      var $0=$png_ptr_addr;
      var $chunk_name=(($0+232)|0);
      var $1=HEAPU32[(($chunk_name)>>2)];
      var $shr=$1 >>> 29;
      var $and=1 & $shr;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $flags=(($2+88)|0);
      var $3=HEAP32[(($flags)>>2)];
      var $and1=$3 & 768;
      var $cmp=(($and1)|0)==768;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $need_crc=0;
      __label__ = 4; break;
    case 4: 
      __label__ = 8; break;
    case 5: 
      var $4=$png_ptr_addr;
      var $flags3=(($4+88)|0);
      var $5=HEAP32[(($flags3)>>2)];
      var $and4=$5 & 2048;
      var $tobool5=(($and4)|0)!=0;
      if ($tobool5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $need_crc=0;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $6=$need_crc;
      var $tobool9=(($6)|0)!=0;
      if ($tobool9) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: 
      var $7=$length_addr;
      var $cmp10=(($7)>>>0) > 0;
      if ($cmp10) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: 
      var $8=$png_ptr_addr;
      var $crc12=(($8+268)|0);
      var $9=HEAP32[(($crc12)>>2)];
      $crc=$9;
      __label__ = 11; break;
    case 11: 
      var $10=$length_addr;
      $safeLength=$10;
      var $11=$safeLength;
      var $cmp13=(($11)|0)==0;
      if ($cmp13) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $safeLength=-1;
      __label__ = 13; break;
    case 13: 
      var $12=$crc;
      var $13=$ptr_addr;
      var $14=$safeLength;
      var $call=_crc32($12, $13, $14);
      $crc=$call;
      var $15=$safeLength;
      var $16=$ptr_addr;
      var $add_ptr=(($16+$15)|0);
      $ptr_addr=$add_ptr;
      var $17=$safeLength;
      var $18=$length_addr;
      var $sub=(($18-$17)|0);
      $length_addr=$sub;
      __label__ = 14; break;
    case 14: 
      var $19=$length_addr;
      var $cmp16=(($19)>>>0) > 0;
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 15: 
      var $20=$crc;
      var $21=$png_ptr_addr;
      var $crc17=(($21+268)|0);
      HEAP32[(($crc17)>>2)]=$20;
      __label__ = 16; break;
    case 16: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_calculate_crc["X"]=1;

function _png_user_version_check($png_ptr, $user_png_ver) {
  var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $user_png_ver_addr;
      var $i;
      var $pos;
      var $m=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $user_png_ver_addr=$user_png_ver;
      var $0=$user_png_ver_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: 
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $1=$i;
      var $2=$user_png_ver_addr;
      var $arrayidx=(($2+$1)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv=(($3 << 24) >> 24);
      var $4=$i;
      var $call=_png_get_header_ver(0);
      var $arrayidx1=(($call+$4)|0);
      var $5=HEAP8[($arrayidx1)];
      var $conv2=(($5 << 24) >> 24);
      var $cmp=(($conv)|0)!=(($conv2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $6=$png_ptr_addr;
      var $flags=(($6+88)|0);
      var $7=HEAP32[(($flags)>>2)];
      var $or=$7 | 131072;
      HEAP32[(($flags)>>2)]=$or;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $8=$i;
      var $inc=(($8+1)|0);
      $i=$inc;
      var $call5=_png_get_header_ver(0);
      var $arrayidx6=(($call5+$8)|0);
      var $9=HEAP8[($arrayidx6)];
      var $tobool7=(($9 << 24) >> 24)!=0;
      if ($tobool7) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 7: 
      __label__ = 9; break;
    case 8: 
      var $10=$png_ptr_addr;
      var $flags8=(($10+88)|0);
      var $11=HEAP32[(($flags8)>>2)];
      var $or9=$11 | 131072;
      HEAP32[(($flags8)>>2)]=$or9;
      __label__ = 9; break;
    case 9: 
      var $12=$png_ptr_addr;
      var $flags11=(($12+88)|0);
      var $13=HEAP32[(($flags11)>>2)];
      var $and=$13 & 131072;
      var $tobool12=(($and)|0)!=0;
      if ($tobool12) { __label__ = 10; break; } else { __label__ = 18; break; }
    case 10: 
      var $14=$user_png_ver_addr;
      var $cmp14=(($14)|0)==0;
      if ($cmp14) { __label__ = 16; break; } else { __label__ = 11; break; }
    case 11: 
      var $15=$user_png_ver_addr;
      var $arrayidx16=(($15)|0);
      var $16=HEAP8[($arrayidx16)];
      var $conv17=(($16 << 24) >> 24);
      var $call18=_png_get_header_ver(0);
      var $arrayidx19=(($call18)|0);
      var $17=HEAP8[($arrayidx19)];
      var $conv20=(($17 << 24) >> 24);
      var $cmp21=(($conv17)|0)!=(($conv20)|0);
      if ($cmp21) { __label__ = 16; break; } else { __label__ = 12; break; }
    case 12: 
      var $18=$user_png_ver_addr;
      var $arrayidx24=(($18)|0);
      var $19=HEAP8[($arrayidx24)];
      var $conv25=(($19 << 24) >> 24);
      var $cmp26=(($conv25)|0)==49;
      if ($cmp26) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $20=$user_png_ver_addr;
      var $arrayidx28=(($20+2)|0);
      var $21=HEAP8[($arrayidx28)];
      var $conv29=(($21 << 24) >> 24);
      var $call30=_png_get_header_ver(0);
      var $arrayidx31=(($call30+2)|0);
      var $22=HEAP8[($arrayidx31)];
      var $conv32=(($22 << 24) >> 24);
      var $cmp33=(($conv29)|0)!=(($conv32)|0);
      if ($cmp33) { __label__ = 16; break; } else { __label__ = 14; break; }
    case 14: 
      var $23=$user_png_ver_addr;
      var $arrayidx36=(($23)|0);
      var $24=HEAP8[($arrayidx36)];
      var $conv37=(($24 << 24) >> 24);
      var $cmp38=(($conv37)|0)==48;
      if ($cmp38) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $25=$user_png_ver_addr;
      var $arrayidx41=(($25+2)|0);
      var $26=HEAP8[($arrayidx41)];
      var $conv42=(($26 << 24) >> 24);
      var $cmp43=(($conv42)|0) < 57;
      if ($cmp43) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $pos=0;
      var $arraydecay=(($m)|0);
      var $27=$pos;
      var $call46=_png_safecat($arraydecay, 128, $27, ((STRING_TABLE.__str2281)|0));
      $pos=$call46;
      var $arraydecay47=(($m)|0);
      var $28=$pos;
      var $29=$user_png_ver_addr;
      var $call48=_png_safecat($arraydecay47, 128, $28, $29);
      $pos=$call48;
      var $arraydecay49=(($m)|0);
      var $30=$pos;
      var $call50=_png_safecat($arraydecay49, 128, $30, ((STRING_TABLE.__str3282)|0));
      $pos=$call50;
      var $arraydecay51=(($m)|0);
      var $31=$pos;
      var $call52=_png_get_header_ver(0);
      var $call53=_png_safecat($arraydecay51, 128, $31, $call52);
      $pos=$call53;
      var $32=$png_ptr_addr;
      var $arraydecay54=(($m)|0);
      _png_warning($32, $arraydecay54);
      $retval=0;
      __label__ = 19; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      $retval=1;
      __label__ = 19; break;
    case 19: 
      var $33=$retval;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_user_version_check["X"]=1;

function _png_create_info_struct($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr=__stackBase__;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 6; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $malloc_fn=(($1+588)|0);
      var $2=HEAP32[(($malloc_fn)>>2)];
      var $3=$png_ptr_addr;
      var $mem_ptr=(($3+584)|0);
      var $4=HEAP32[(($mem_ptr)>>2)];
      var $call=_png_create_struct_2(2, $2, $4);
      var $5=$call;
      HEAP32[(($info_ptr)>>2)]=$5;
      var $6=HEAP32[(($info_ptr)>>2)];
      var $cmp1=(($6)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      _png_info_init_3($info_ptr, 236);
      __label__ = 5; break;
    case 5: 
      var $7=HEAP32[(($info_ptr)>>2)];
      $retval=$7;
      __label__ = 6; break;
    case 6: 
      var $8=$retval;
      STACKTOP = __stackBase__;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_info_init_3($ptr_ptr, $png_info_struct_size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $ptr_ptr_addr;
      var $png_info_struct_size_addr;
      var $info_ptr;
      $ptr_ptr_addr=$ptr_ptr;
      $png_info_struct_size_addr=$png_info_struct_size;
      var $0=$ptr_ptr_addr;
      var $1=HEAP32[(($0)>>2)];
      $info_ptr=$1;
      var $2=$info_ptr;
      var $cmp=(($2)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $3=$png_info_struct_size_addr;
      var $cmp1=236 > (($3)>>>0);
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$info_ptr;
      var $5=$4;
      _png_destroy_struct($5);
      var $call=_png_create_struct(2);
      var $6=$call;
      $info_ptr=$6;
      var $7=$info_ptr;
      var $8=$ptr_ptr_addr;
      HEAP32[(($8)>>2)]=$7;
      __label__ = 5; break;
    case 5: 
      var $9=$info_ptr;
      var $10=$9;
      _memset($10, 0, 236, 1);
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_destroy_info_struct($png_ptr, $info_ptr_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_ptr_addr;
      var $info_ptr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_ptr_addr=$info_ptr_ptr;
      $info_ptr=0;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 7; break;
    case 3: 
      var $1=$info_ptr_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $2=$info_ptr_ptr_addr;
      var $3=HEAP32[(($2)>>2)];
      $info_ptr=$3;
      __label__ = 5; break;
    case 5: 
      var $4=$info_ptr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $5=$png_ptr_addr;
      var $6=$info_ptr;
      _png_info_destroy($5, $6);
      var $7=$info_ptr;
      var $8=$7;
      var $9=$png_ptr_addr;
      var $free_fn=(($9+592)|0);
      var $10=HEAP32[(($free_fn)>>2)];
      var $11=$png_ptr_addr;
      var $mem_ptr=(($11+584)|0);
      var $12=HEAP32[(($mem_ptr)>>2)];
      _png_destroy_struct_2($8, $10, $12);
      var $13=$info_ptr_ptr_addr;
      HEAP32[(($13)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_info_destroy($png_ptr, $info_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr=__stackBase__;
      $png_ptr_addr=$png_ptr;
      HEAP32[(($info_ptr_addr)>>2)]=$info_ptr;
      var $0=$png_ptr_addr;
      var $1=HEAP32[(($info_ptr_addr)>>2)];
      _png_free_data($0, $1, 32767, -1);
      var $2=$png_ptr_addr;
      var $num_chunk_list=(($2+560)|0);
      var $3=HEAP32[(($num_chunk_list)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $4=$png_ptr_addr;
      var $5=$png_ptr_addr;
      var $chunk_list=(($5+564)|0);
      var $6=HEAP32[(($chunk_list)>>2)];
      _png_free($4, $6);
      var $7=$png_ptr_addr;
      var $chunk_list1=(($7+564)|0);
      HEAP32[(($chunk_list1)>>2)]=0;
      var $8=$png_ptr_addr;
      var $num_chunk_list2=(($8+560)|0);
      HEAP32[(($num_chunk_list2)>>2)]=0;
      __label__ = 3; break;
    case 3: 
      _png_info_init_3($info_ptr_addr, 236);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_header_version($png_ptr) {
  ;
  var __label__;

  var $png_ptr_addr;
  $png_ptr_addr=$png_ptr;
  var $0=$png_ptr_addr;
  ;
  return ((STRING_TABLE.__str9288)|0);
}


function _png_get_io_ptr($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $io_ptr=(($1+64)|0);
      var $2=HEAP32[(($io_ptr)>>2)];
      $retval=$2;
      __label__ = 4; break;
    case 4: 
      var $3=$retval;
      ;
      return $3;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_init_io($png_ptr, $fp) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $fp_addr;
      $png_ptr_addr=$png_ptr;
      $fp_addr=$fp;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$fp_addr;
      var $2=$1;
      var $3=$png_ptr_addr;
      var $io_ptr=(($3+64)|0);
      HEAP32[(($io_ptr)>>2)]=$2;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_free_data($png_ptr, $info_ptr, $mask, $num) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $mask_addr;
      var $num_addr;
      var $i;
      var $i50;
      var $i102;
      var $i144;
      var $row;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $mask_addr=$mask;
      $num_addr=$num;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 73; break;
    case 4: 
      var $2=$mask_addr;
      var $and=$2 & 16384;
      var $3=$info_ptr_addr;
      var $free_me=(($3+184)|0);
      var $4=HEAP32[(($free_me)>>2)];
      var $and2=$and & $4;
      var $tobool=(($and2)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 16; break; }
    case 5: 
      var $5=$num_addr;
      var $cmp4=(($5)|0)!=-1;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $6=$info_ptr_addr;
      var $text=(($6+56)|0);
      var $7=HEAP32[(($text)>>2)];
      var $tobool6=(($7)|0)!=0;
      if ($tobool6) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $8=$num_addr;
      var $9=$info_ptr_addr;
      var $text7=(($9+56)|0);
      var $10=HEAP32[(($text7)>>2)];
      var $arrayidx=(($10+$8*28)|0);
      var $key=(($arrayidx+4)|0);
      var $11=HEAP32[(($key)>>2)];
      var $tobool8=(($11)|0)!=0;
      if ($tobool8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $12=$png_ptr_addr;
      var $13=$num_addr;
      var $14=$info_ptr_addr;
      var $text10=(($14+56)|0);
      var $15=HEAP32[(($text10)>>2)];
      var $arrayidx11=(($15+$13*28)|0);
      var $key12=(($arrayidx11+4)|0);
      var $16=HEAP32[(($key12)>>2)];
      _png_free($12, $16);
      var $17=$num_addr;
      var $18=$info_ptr_addr;
      var $text13=(($18+56)|0);
      var $19=HEAP32[(($text13)>>2)];
      var $arrayidx14=(($19+$17*28)|0);
      var $key15=(($arrayidx14+4)|0);
      HEAP32[(($key15)>>2)]=0;
      __label__ = 9; break;
    case 9: 
      __label__ = 15; break;
    case 10: 
      $i=0;
      __label__ = 11; break;
    case 11: 
      var $20=$i;
      var $21=$info_ptr_addr;
      var $num_text=(($21+48)|0);
      var $22=HEAP32[(($num_text)>>2)];
      var $cmp17=(($20)|0) < (($22)|0);
      if ($cmp17) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $23=$png_ptr_addr;
      var $24=$info_ptr_addr;
      var $25=$i;
      _png_free_data($23, $24, 16384, $25);
      __label__ = 13; break;
    case 13: 
      var $26=$i;
      var $inc=(($26+1)|0);
      $i=$inc;
      __label__ = 11; break;
    case 14: 
      var $27=$png_ptr_addr;
      var $28=$info_ptr_addr;
      var $text18=(($28+56)|0);
      var $29=HEAP32[(($text18)>>2)];
      var $30=$29;
      _png_free($27, $30);
      var $31=$info_ptr_addr;
      var $text19=(($31+56)|0);
      HEAP32[(($text19)>>2)]=0;
      var $32=$info_ptr_addr;
      var $num_text20=(($32+48)|0);
      HEAP32[(($num_text20)>>2)]=0;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $33=$mask_addr;
      var $and23=$33 & 8192;
      var $34=$info_ptr_addr;
      var $free_me24=(($34+184)|0);
      var $35=HEAP32[(($free_me24)>>2)];
      var $and25=$and23 & $35;
      var $tobool26=(($and25)|0)!=0;
      if ($tobool26) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $36=$png_ptr_addr;
      var $37=$info_ptr_addr;
      var $trans_alpha=(($37+76)|0);
      var $38=HEAP32[(($trans_alpha)>>2)];
      _png_free($36, $38);
      var $39=$info_ptr_addr;
      var $trans_alpha28=(($39+76)|0);
      HEAP32[(($trans_alpha28)>>2)]=0;
      var $40=$info_ptr_addr;
      var $valid=(($40+8)|0);
      var $41=HEAP32[(($valid)>>2)];
      var $and29=$41 & -17;
      HEAP32[(($valid)>>2)]=$and29;
      __label__ = 18; break;
    case 18: 
      var $42=$mask_addr;
      var $and31=$42 & 256;
      var $43=$info_ptr_addr;
      var $free_me32=(($43+184)|0);
      var $44=HEAP32[(($free_me32)>>2)];
      var $and33=$and31 & $44;
      var $tobool34=(($and33)|0)!=0;
      if ($tobool34) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $45=$png_ptr_addr;
      var $46=$info_ptr_addr;
      var $scal_s_width=(($46+224)|0);
      var $47=HEAP32[(($scal_s_width)>>2)];
      _png_free($45, $47);
      var $48=$png_ptr_addr;
      var $49=$info_ptr_addr;
      var $scal_s_height=(($49+228)|0);
      var $50=HEAP32[(($scal_s_height)>>2)];
      _png_free($48, $50);
      var $51=$info_ptr_addr;
      var $scal_s_width36=(($51+224)|0);
      HEAP32[(($scal_s_width36)>>2)]=0;
      var $52=$info_ptr_addr;
      var $scal_s_height37=(($52+228)|0);
      HEAP32[(($scal_s_height37)>>2)]=0;
      var $53=$info_ptr_addr;
      var $valid38=(($53+8)|0);
      var $54=HEAP32[(($valid38)>>2)];
      var $and39=$54 & -16385;
      HEAP32[(($valid38)>>2)]=$and39;
      __label__ = 20; break;
    case 20: 
      var $55=$mask_addr;
      var $and41=$55 & 128;
      var $56=$info_ptr_addr;
      var $free_me42=(($56+184)|0);
      var $57=HEAP32[(($free_me42)>>2)];
      var $and43=$and41 & $57;
      var $tobool44=(($and43)|0)!=0;
      if ($tobool44) { __label__ = 21; break; } else { __label__ = 28; break; }
    case 21: 
      var $58=$png_ptr_addr;
      var $59=$info_ptr_addr;
      var $pcal_purpose=(($59+160)|0);
      var $60=HEAP32[(($pcal_purpose)>>2)];
      _png_free($58, $60);
      var $61=$png_ptr_addr;
      var $62=$info_ptr_addr;
      var $pcal_units=(($62+172)|0);
      var $63=HEAP32[(($pcal_units)>>2)];
      _png_free($61, $63);
      var $64=$info_ptr_addr;
      var $pcal_purpose46=(($64+160)|0);
      HEAP32[(($pcal_purpose46)>>2)]=0;
      var $65=$info_ptr_addr;
      var $pcal_units47=(($65+172)|0);
      HEAP32[(($pcal_units47)>>2)]=0;
      var $66=$info_ptr_addr;
      var $pcal_params=(($66+176)|0);
      var $67=HEAP32[(($pcal_params)>>2)];
      var $cmp48=(($67)|0)!=0;
      if ($cmp48) { __label__ = 22; break; } else { __label__ = 27; break; }
    case 22: 
      $i50=0;
      __label__ = 23; break;
    case 23: 
      var $68=$i50;
      var $69=$info_ptr_addr;
      var $pcal_nparams=(($69+181)|0);
      var $70=HEAPU8[($pcal_nparams)];
      var $conv=(($70)&255);
      var $cmp52=(($68)|0) < (($conv)|0);
      if ($cmp52) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $71=$png_ptr_addr;
      var $72=$i50;
      var $73=$info_ptr_addr;
      var $pcal_params55=(($73+176)|0);
      var $74=HEAP32[(($pcal_params55)>>2)];
      var $arrayidx56=(($74+($72<<2))|0);
      var $75=HEAP32[(($arrayidx56)>>2)];
      _png_free($71, $75);
      var $76=$i50;
      var $77=$info_ptr_addr;
      var $pcal_params57=(($77+176)|0);
      var $78=HEAP32[(($pcal_params57)>>2)];
      var $arrayidx58=(($78+($76<<2))|0);
      HEAP32[(($arrayidx58)>>2)]=0;
      __label__ = 25; break;
    case 25: 
      var $79=$i50;
      var $inc60=(($79+1)|0);
      $i50=$inc60;
      __label__ = 23; break;
    case 26: 
      var $80=$png_ptr_addr;
      var $81=$info_ptr_addr;
      var $pcal_params62=(($81+176)|0);
      var $82=HEAP32[(($pcal_params62)>>2)];
      var $83=$82;
      _png_free($80, $83);
      var $84=$info_ptr_addr;
      var $pcal_params63=(($84+176)|0);
      HEAP32[(($pcal_params63)>>2)]=0;
      __label__ = 27; break;
    case 27: 
      var $85=$info_ptr_addr;
      var $valid65=(($85+8)|0);
      var $86=HEAP32[(($valid65)>>2)];
      var $and66=$86 & -1025;
      HEAP32[(($valid65)>>2)]=$and66;
      __label__ = 28; break;
    case 28: 
      var $87=$mask_addr;
      var $and68=$87 & 16;
      var $88=$info_ptr_addr;
      var $free_me69=(($88+184)|0);
      var $89=HEAP32[(($free_me69)>>2)];
      var $and70=$and68 & $89;
      var $tobool71=(($and70)|0)!=0;
      if ($tobool71) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $90=$png_ptr_addr;
      var $91=$info_ptr_addr;
      var $iccp_name=(($91+196)|0);
      var $92=HEAP32[(($iccp_name)>>2)];
      _png_free($90, $92);
      var $93=$png_ptr_addr;
      var $94=$info_ptr_addr;
      var $iccp_profile=(($94+200)|0);
      var $95=HEAP32[(($iccp_profile)>>2)];
      _png_free($93, $95);
      var $96=$info_ptr_addr;
      var $iccp_name73=(($96+196)|0);
      HEAP32[(($iccp_name73)>>2)]=0;
      var $97=$info_ptr_addr;
      var $iccp_profile74=(($97+200)|0);
      HEAP32[(($iccp_profile74)>>2)]=0;
      var $98=$info_ptr_addr;
      var $valid75=(($98+8)|0);
      var $99=HEAP32[(($valid75)>>2)];
      var $and76=$99 & -4097;
      HEAP32[(($valid75)>>2)]=$and76;
      __label__ = 30; break;
    case 30: 
      var $100=$mask_addr;
      var $and78=$100 & 32;
      var $101=$info_ptr_addr;
      var $free_me79=(($101+184)|0);
      var $102=HEAP32[(($free_me79)>>2)];
      var $and80=$and78 & $102;
      var $tobool81=(($and80)|0)!=0;
      if ($tobool81) { __label__ = 31; break; } else { __label__ = 43; break; }
    case 31: 
      var $103=$num_addr;
      var $cmp83=(($103)|0)!=-1;
      if ($cmp83) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $104=$info_ptr_addr;
      var $splt_palettes=(($104+212)|0);
      var $105=HEAP32[(($splt_palettes)>>2)];
      var $tobool86=(($105)|0)!=0;
      if ($tobool86) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $106=$png_ptr_addr;
      var $107=$num_addr;
      var $108=$info_ptr_addr;
      var $splt_palettes88=(($108+212)|0);
      var $109=HEAP32[(($splt_palettes88)>>2)];
      var $arrayidx89=(($109+($107<<4))|0);
      var $name=(($arrayidx89)|0);
      var $110=HEAP32[(($name)>>2)];
      _png_free($106, $110);
      var $111=$png_ptr_addr;
      var $112=$num_addr;
      var $113=$info_ptr_addr;
      var $splt_palettes90=(($113+212)|0);
      var $114=HEAP32[(($splt_palettes90)>>2)];
      var $arrayidx91=(($114+($112<<4))|0);
      var $entries=(($arrayidx91+8)|0);
      var $115=HEAP32[(($entries)>>2)];
      var $116=$115;
      _png_free($111, $116);
      var $117=$num_addr;
      var $118=$info_ptr_addr;
      var $splt_palettes92=(($118+212)|0);
      var $119=HEAP32[(($splt_palettes92)>>2)];
      var $arrayidx93=(($119+($117<<4))|0);
      var $name94=(($arrayidx93)|0);
      HEAP32[(($name94)>>2)]=0;
      var $120=$num_addr;
      var $121=$info_ptr_addr;
      var $splt_palettes95=(($121+212)|0);
      var $122=HEAP32[(($splt_palettes95)>>2)];
      var $arrayidx96=(($122+($120<<4))|0);
      var $entries97=(($arrayidx96+8)|0);
      HEAP32[(($entries97)>>2)]=0;
      __label__ = 34; break;
    case 34: 
      __label__ = 42; break;
    case 35: 
      var $123=$info_ptr_addr;
      var $splt_palettes_num=(($123+216)|0);
      var $124=HEAP32[(($splt_palettes_num)>>2)];
      var $tobool100=(($124)|0)!=0;
      if ($tobool100) { __label__ = 36; break; } else { __label__ = 41; break; }
    case 36: 
      $i102=0;
      __label__ = 37; break;
    case 37: 
      var $125=$i102;
      var $126=$info_ptr_addr;
      var $splt_palettes_num104=(($126+216)|0);
      var $127=HEAP32[(($splt_palettes_num104)>>2)];
      var $cmp105=(($125)|0) < (($127)|0);
      if ($cmp105) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $128=$png_ptr_addr;
      var $129=$info_ptr_addr;
      var $130=$i102;
      _png_free_data($128, $129, 32, $130);
      __label__ = 39; break;
    case 39: 
      var $131=$i102;
      var $inc109=(($131+1)|0);
      $i102=$inc109;
      __label__ = 37; break;
    case 40: 
      var $132=$png_ptr_addr;
      var $133=$info_ptr_addr;
      var $splt_palettes111=(($133+212)|0);
      var $134=HEAP32[(($splt_palettes111)>>2)];
      var $135=$134;
      _png_free($132, $135);
      var $136=$info_ptr_addr;
      var $splt_palettes112=(($136+212)|0);
      HEAP32[(($splt_palettes112)>>2)]=0;
      var $137=$info_ptr_addr;
      var $splt_palettes_num113=(($137+216)|0);
      HEAP32[(($splt_palettes_num113)>>2)]=0;
      __label__ = 41; break;
    case 41: 
      var $138=$info_ptr_addr;
      var $valid115=(($138+8)|0);
      var $139=HEAP32[(($valid115)>>2)];
      var $and116=$139 & -8193;
      HEAP32[(($valid115)>>2)]=$and116;
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $140=$png_ptr_addr;
      var $unknown_chunk=(($140+632)|0);
      var $data=(($unknown_chunk+8)|0);
      var $141=HEAP32[(($data)>>2)];
      var $tobool119=(($141)|0)!=0;
      if ($tobool119) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $142=$png_ptr_addr;
      var $143=$png_ptr_addr;
      var $unknown_chunk121=(($143+632)|0);
      var $data122=(($unknown_chunk121+8)|0);
      var $144=HEAP32[(($data122)>>2)];
      _png_free($142, $144);
      var $145=$png_ptr_addr;
      var $unknown_chunk123=(($145+632)|0);
      var $data124=(($unknown_chunk123+8)|0);
      HEAP32[(($data124)>>2)]=0;
      __label__ = 45; break;
    case 45: 
      var $146=$mask_addr;
      var $and126=$146 & 512;
      var $147=$info_ptr_addr;
      var $free_me127=(($147+184)|0);
      var $148=HEAP32[(($free_me127)>>2)];
      var $and128=$and126 & $148;
      var $tobool129=(($and128)|0)!=0;
      if ($tobool129) { __label__ = 46; break; } else { __label__ = 58; break; }
    case 46: 
      var $149=$num_addr;
      var $cmp131=(($149)|0)!=-1;
      if ($cmp131) { __label__ = 47; break; } else { __label__ = 50; break; }
    case 47: 
      var $150=$info_ptr_addr;
      var $unknown_chunks=(($150+188)|0);
      var $151=HEAP32[(($unknown_chunks)>>2)];
      var $tobool134=(($151)|0)!=0;
      if ($tobool134) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $152=$png_ptr_addr;
      var $153=$num_addr;
      var $154=$info_ptr_addr;
      var $unknown_chunks136=(($154+188)|0);
      var $155=HEAP32[(($unknown_chunks136)>>2)];
      var $arrayidx137=(($155+$153*20)|0);
      var $data138=(($arrayidx137+8)|0);
      var $156=HEAP32[(($data138)>>2)];
      _png_free($152, $156);
      var $157=$num_addr;
      var $158=$info_ptr_addr;
      var $unknown_chunks139=(($158+188)|0);
      var $159=HEAP32[(($unknown_chunks139)>>2)];
      var $arrayidx140=(($159+$157*20)|0);
      var $data141=(($arrayidx140+8)|0);
      HEAP32[(($data141)>>2)]=0;
      __label__ = 49; break;
    case 49: 
      __label__ = 57; break;
    case 50: 
      var $160=$info_ptr_addr;
      var $unknown_chunks_num=(($160+192)|0);
      var $161=HEAP32[(($unknown_chunks_num)>>2)];
      var $tobool145=(($161)|0)!=0;
      if ($tobool145) { __label__ = 51; break; } else { __label__ = 56; break; }
    case 51: 
      $i144=0;
      __label__ = 52; break;
    case 52: 
      var $162=$i144;
      var $163=$info_ptr_addr;
      var $unknown_chunks_num148=(($163+192)|0);
      var $164=HEAP32[(($unknown_chunks_num148)>>2)];
      var $cmp149=(($162)|0) < (($164)|0);
      if ($cmp149) { __label__ = 53; break; } else { __label__ = 55; break; }
    case 53: 
      var $165=$png_ptr_addr;
      var $166=$info_ptr_addr;
      var $167=$i144;
      _png_free_data($165, $166, 512, $167);
      __label__ = 54; break;
    case 54: 
      var $168=$i144;
      var $inc153=(($168+1)|0);
      $i144=$inc153;
      __label__ = 52; break;
    case 55: 
      var $169=$png_ptr_addr;
      var $170=$info_ptr_addr;
      var $unknown_chunks155=(($170+188)|0);
      var $171=HEAP32[(($unknown_chunks155)>>2)];
      var $172=$171;
      _png_free($169, $172);
      var $173=$info_ptr_addr;
      var $unknown_chunks156=(($173+188)|0);
      HEAP32[(($unknown_chunks156)>>2)]=0;
      var $174=$info_ptr_addr;
      var $unknown_chunks_num157=(($174+192)|0);
      HEAP32[(($unknown_chunks_num157)>>2)]=0;
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $175=$mask_addr;
      var $and161=$175 & 8;
      var $176=$info_ptr_addr;
      var $free_me162=(($176+184)|0);
      var $177=HEAP32[(($free_me162)>>2)];
      var $and163=$and161 & $177;
      var $tobool164=(($and163)|0)!=0;
      if ($tobool164) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $178=$png_ptr_addr;
      var $179=$info_ptr_addr;
      var $hist=(($179+124)|0);
      var $180=HEAP32[(($hist)>>2)];
      var $181=$180;
      _png_free($178, $181);
      var $182=$info_ptr_addr;
      var $hist166=(($182+124)|0);
      HEAP32[(($hist166)>>2)]=0;
      var $183=$info_ptr_addr;
      var $valid167=(($183+8)|0);
      var $184=HEAP32[(($valid167)>>2)];
      var $and168=$184 & -65;
      HEAP32[(($valid167)>>2)]=$and168;
      __label__ = 60; break;
    case 60: 
      var $185=$mask_addr;
      var $and170=$185 & 4096;
      var $186=$info_ptr_addr;
      var $free_me171=(($186+184)|0);
      var $187=HEAP32[(($free_me171)>>2)];
      var $and172=$and170 & $187;
      var $tobool173=(($and172)|0)!=0;
      if ($tobool173) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $188=$png_ptr_addr;
      var $189=$188;
      var $190=$info_ptr_addr;
      var $palette=(($190+16)|0);
      var $191=HEAP32[(($palette)>>2)];
      var $192=$191;
      _png_zfree($189, $192);
      var $193=$info_ptr_addr;
      var $palette175=(($193+16)|0);
      HEAP32[(($palette175)>>2)]=0;
      var $194=$info_ptr_addr;
      var $valid176=(($194+8)|0);
      var $195=HEAP32[(($valid176)>>2)];
      var $and177=$195 & -9;
      HEAP32[(($valid176)>>2)]=$and177;
      var $196=$info_ptr_addr;
      var $num_palette=(($196+20)|0);
      HEAP16[(($num_palette)>>1)]=0;
      __label__ = 62; break;
    case 62: 
      var $197=$mask_addr;
      var $and179=$197 & 64;
      var $198=$info_ptr_addr;
      var $free_me180=(($198+184)|0);
      var $199=HEAP32[(($free_me180)>>2)];
      var $and181=$and179 & $199;
      var $tobool182=(($and181)|0)!=0;
      if ($tobool182) { __label__ = 63; break; } else { __label__ = 70; break; }
    case 63: 
      var $200=$info_ptr_addr;
      var $row_pointers=(($200+232)|0);
      var $201=HEAP32[(($row_pointers)>>2)];
      var $tobool184=(($201)|0)!=0;
      if ($tobool184) { __label__ = 64; break; } else { __label__ = 69; break; }
    case 64: 
      $row=0;
      __label__ = 65; break;
    case 65: 
      var $202=$row;
      var $203=$info_ptr_addr;
      var $height=(($203+4)|0);
      var $204=HEAP32[(($height)>>2)];
      var $cmp187=(($202)|0) < (($204)|0);
      if ($cmp187) { __label__ = 66; break; } else { __label__ = 68; break; }
    case 66: 
      var $205=$png_ptr_addr;
      var $206=$row;
      var $207=$info_ptr_addr;
      var $row_pointers190=(($207+232)|0);
      var $208=HEAP32[(($row_pointers190)>>2)];
      var $arrayidx191=(($208+($206<<2))|0);
      var $209=HEAP32[(($arrayidx191)>>2)];
      _png_free($205, $209);
      var $210=$row;
      var $211=$info_ptr_addr;
      var $row_pointers192=(($211+232)|0);
      var $212=HEAP32[(($row_pointers192)>>2)];
      var $arrayidx193=(($212+($210<<2))|0);
      HEAP32[(($arrayidx193)>>2)]=0;
      __label__ = 67; break;
    case 67: 
      var $213=$row;
      var $inc195=(($213+1)|0);
      $row=$inc195;
      __label__ = 65; break;
    case 68: 
      var $214=$png_ptr_addr;
      var $215=$info_ptr_addr;
      var $row_pointers197=(($215+232)|0);
      var $216=HEAP32[(($row_pointers197)>>2)];
      var $217=$216;
      _png_free($214, $217);
      var $218=$info_ptr_addr;
      var $row_pointers198=(($218+232)|0);
      HEAP32[(($row_pointers198)>>2)]=0;
      __label__ = 69; break;
    case 69: 
      var $219=$info_ptr_addr;
      var $valid200=(($219+8)|0);
      var $220=HEAP32[(($valid200)>>2)];
      var $and201=$220 & -32769;
      HEAP32[(($valid200)>>2)]=$and201;
      __label__ = 70; break;
    case 70: 
      var $221=$num_addr;
      var $cmp203=(($221)|0)!=-1;
      if ($cmp203) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $222=$mask_addr;
      var $and206=$222 & -16929;
      $mask_addr=$and206;
      __label__ = 72; break;
    case 72: 
      var $223=$mask_addr;
      var $neg=$223 ^ -1;
      var $224=$info_ptr_addr;
      var $free_me208=(($224+184)|0);
      var $225=HEAP32[(($free_me208)>>2)];
      var $and209=$225 & $neg;
      HEAP32[(($free_me208)>>2)]=$and209;
      __label__ = 73; break;
    case 73: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_free_data["X"]=1;

function _png_handle_as_unknown($png_ptr, $chunk_name) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $chunk_name_addr;
      var $p;
      var $p_end;
      $png_ptr_addr=$png_ptr;
      $chunk_name_addr=$chunk_name;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$chunk_name_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$png_ptr_addr;
      var $num_chunk_list=(($2+560)|0);
      var $3=HEAP32[(($num_chunk_list)>>2)];
      var $cmp3=(($3)|0) <= 0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=0;
      __label__ = 11; break;
    case 5: 
      var $4=$png_ptr_addr;
      var $chunk_list=(($4+564)|0);
      var $5=HEAP32[(($chunk_list)>>2)];
      $p_end=$5;
      var $6=$p_end;
      var $7=$png_ptr_addr;
      var $num_chunk_list4=(($7+560)|0);
      var $8=HEAP32[(($num_chunk_list4)>>2)];
      var $mul=(($8*5)|0);
      var $add_ptr=(($6+$mul)|0);
      $p=$add_ptr;
      __label__ = 6; break;
    case 6: 
      var $9=$p;
      var $add_ptr5=(($9-5)|0);
      $p=$add_ptr5;
      var $10=$chunk_name_addr;
      var $11=$p;
      var $call=_memcmp($10, $11, 4);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $12=$p;
      var $arrayidx=(($12+4)|0);
      var $13=HEAPU8[($arrayidx)];
      var $conv=(($13)&255);
      $retval=$conv;
      __label__ = 11; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $14=$p;
      var $15=$p_end;
      var $cmp8=(($14)>>>0) > (($15)>>>0);
      if ($cmp8) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 10: 
      $retval=0;
      __label__ = 11; break;
    case 11: 
      var $16=$retval;
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_as_unknown["X"]=1;

function _png_chunk_unknown_handling($png_ptr, $chunk_name) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $png_ptr_addr;
  var $chunk_name_addr;
  var $chunk_string=__stackBase__;
  $png_ptr_addr=$png_ptr;
  $chunk_name_addr=$chunk_name;
  var $0=$chunk_name_addr;
  var $shr=$0 >>> 24;
  var $conv=(($shr) & 255);
  var $arraydecay=(($chunk_string)|0);
  var $arrayidx=(($arraydecay)|0);
  HEAP8[($arrayidx)]=$conv;
  var $1=$chunk_name_addr;
  var $shr1=$1 >>> 16;
  var $conv2=(($shr1) & 255);
  var $arraydecay3=(($chunk_string)|0);
  var $arrayidx4=(($arraydecay3+1)|0);
  HEAP8[($arrayidx4)]=$conv2;
  var $2=$chunk_name_addr;
  var $shr5=$2 >>> 8;
  var $conv6=(($shr5) & 255);
  var $arraydecay7=(($chunk_string)|0);
  var $arrayidx8=(($arraydecay7+2)|0);
  HEAP8[($arrayidx8)]=$conv6;
  var $3=$chunk_name_addr;
  var $conv9=(($3) & 255);
  var $arraydecay10=(($chunk_string)|0);
  var $arrayidx11=(($arraydecay10+3)|0);
  HEAP8[($arrayidx11)]=$conv9;
  var $arraydecay12=(($chunk_string)|0);
  var $arrayidx13=(($arraydecay12+4)|0);
  HEAP8[($arrayidx13)]=0;
  var $4=$png_ptr_addr;
  var $arraydecay14=(($chunk_string)|0);
  var $call=_png_handle_as_unknown($4, $arraydecay14);
  STACKTOP = __stackBase__;
  return $call;
}


function _png_64bit_product($v1, $v2, $hi_product, $lo_product) {
  ;
  var __label__;

  var $v1_addr;
  var $v2_addr;
  var $hi_product_addr;
  var $lo_product_addr;
  var $a;
  var $b;
  var $c;
  var $d;
  var $lo;
  var $hi;
  var $x;
  var $y;
  $v1_addr=$v1;
  $v2_addr=$v2;
  $hi_product_addr=$hi_product;
  $lo_product_addr=$lo_product;
  var $0=$v1_addr;
  var $shr=$0 >> 16;
  var $and=$shr & 65535;
  $a=$and;
  var $1=$v1_addr;
  var $and1=$1 & 65535;
  $b=$and1;
  var $2=$v2_addr;
  var $shr2=$2 >> 16;
  var $and3=$shr2 & 65535;
  $c=$and3;
  var $3=$v2_addr;
  var $and4=$3 & 65535;
  $d=$and4;
  var $4=$b;
  var $5=$d;
  var $mul=(($4*$5)|0);
  $lo=$mul;
  var $6=$a;
  var $7=$d;
  var $mul5=(($6*$7)|0);
  var $8=$c;
  var $9=$b;
  var $mul6=(($8*$9)|0);
  var $add=(($mul5+$mul6)|0);
  $x=$add;
  var $10=$lo;
  var $shr7=$10 >> 16;
  var $and8=$shr7 & 65535;
  var $11=$x;
  var $add9=(($and8+$11)|0);
  $y=$add9;
  var $12=$lo;
  var $and10=$12 & 65535;
  var $13=$y;
  var $and11=$13 & 65535;
  var $shl=$and11 << 16;
  var $or=$and10 | $shl;
  $lo=$or;
  var $14=$y;
  var $shr12=$14 >> 16;
  var $and13=$shr12 & 65535;
  $hi=$and13;
  var $15=$a;
  var $16=$c;
  var $mul14=(($15*$16)|0);
  var $17=$hi;
  var $add15=(($17+$mul14)|0);
  $hi=$add15;
  var $18=$hi;
  var $19=$hi_product_addr;
  HEAP32[(($19)>>2)]=$18;
  var $20=$lo;
  var $21=$lo_product_addr;
  HEAP32[(($21)>>2)]=$20;
  ;
  return;
}
_png_64bit_product["X"]=1;

function _png_check_cHRM_fixed($png_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $white_x_addr;
      var $white_y_addr;
      var $red_x_addr;
      var $red_y_addr;
      var $green_x_addr;
      var $green_y_addr;
      var $blue_x_addr;
      var $blue_y_addr;
      var $ret;
      var $xy_hi=__stackBase__;
      var $xy_lo=__stackBase__+4;
      var $yx_hi=__stackBase__+8;
      var $yx_lo=__stackBase__+12;
      $png_ptr_addr=$png_ptr;
      $white_x_addr=$white_x;
      $white_y_addr=$white_y;
      $red_x_addr=$red_x;
      $red_y_addr=$red_y;
      $green_x_addr=$green_x;
      $green_y_addr=$green_y;
      $blue_x_addr=$blue_x;
      $blue_y_addr=$blue_y;
      $ret=1;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 24; break;
    case 3: 
      var $1=$white_x_addr;
      var $cmp1=(($1)|0) < 0;
      if ($cmp1) { __label__ = 11; break; } else { __label__ = 4; break; }
    case 4: 
      var $2=$white_y_addr;
      var $cmp2=(($2)|0) <= 0;
      if ($cmp2) { __label__ = 11; break; } else { __label__ = 5; break; }
    case 5: 
      var $3=$red_x_addr;
      var $cmp4=(($3)|0) < 0;
      if ($cmp4) { __label__ = 11; break; } else { __label__ = 6; break; }
    case 6: 
      var $4=$red_y_addr;
      var $cmp6=(($4)|0) < 0;
      if ($cmp6) { __label__ = 11; break; } else { __label__ = 7; break; }
    case 7: 
      var $5=$green_x_addr;
      var $cmp8=(($5)|0) < 0;
      if ($cmp8) { __label__ = 11; break; } else { __label__ = 8; break; }
    case 8: 
      var $6=$green_y_addr;
      var $cmp10=(($6)|0) < 0;
      if ($cmp10) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $7=$blue_x_addr;
      var $cmp12=(($7)|0) < 0;
      if ($cmp12) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $8=$blue_y_addr;
      var $cmp14=(($8)|0) < 0;
      if ($cmp14) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $9=$png_ptr_addr;
      _png_warning($9, ((STRING_TABLE.__str10289)|0));
      $ret=0;
      __label__ = 12; break;
    case 12: 
      var $10=$white_x_addr;
      var $11=$white_y_addr;
      var $sub=((100000-$11)|0);
      var $cmp17=(($10)|0) > (($sub)|0);
      if ($cmp17) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $12=$png_ptr_addr;
      _png_warning($12, ((STRING_TABLE.__str11290)|0));
      $ret=0;
      __label__ = 14; break;
    case 14: 
      var $13=$red_x_addr;
      var $14=$red_y_addr;
      var $sub20=((100000-$14)|0);
      var $cmp21=(($13)|0) > (($sub20)|0);
      if ($cmp21) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $15=$png_ptr_addr;
      _png_warning($15, ((STRING_TABLE.__str12291)|0));
      $ret=0;
      __label__ = 16; break;
    case 16: 
      var $16=$green_x_addr;
      var $17=$green_y_addr;
      var $sub24=((100000-$17)|0);
      var $cmp25=(($16)|0) > (($sub24)|0);
      if ($cmp25) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $18=$png_ptr_addr;
      _png_warning($18, ((STRING_TABLE.__str13292)|0));
      $ret=0;
      __label__ = 18; break;
    case 18: 
      var $19=$blue_x_addr;
      var $20=$blue_y_addr;
      var $sub28=((100000-$20)|0);
      var $cmp29=(($19)|0) > (($sub28)|0);
      if ($cmp29) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $21=$png_ptr_addr;
      _png_warning($21, ((STRING_TABLE.__str14293)|0));
      $ret=0;
      __label__ = 20; break;
    case 20: 
      var $22=$green_x_addr;
      var $23=$red_x_addr;
      var $sub32=(($22-$23)|0);
      var $24=$blue_y_addr;
      var $25=$red_y_addr;
      var $sub33=(($24-$25)|0);
      _png_64bit_product($sub32, $sub33, $xy_hi, $xy_lo);
      var $26=$green_y_addr;
      var $27=$red_y_addr;
      var $sub34=(($26-$27)|0);
      var $28=$blue_x_addr;
      var $29=$red_x_addr;
      var $sub35=(($28-$29)|0);
      _png_64bit_product($sub34, $sub35, $yx_hi, $yx_lo);
      var $30=HEAP32[(($xy_hi)>>2)];
      var $31=HEAP32[(($yx_hi)>>2)];
      var $cmp36=(($30)|0)==(($31)|0);
      if ($cmp36) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $32=HEAP32[(($xy_lo)>>2)];
      var $33=HEAP32[(($yx_lo)>>2)];
      var $cmp37=(($32)|0)==(($33)|0);
      if ($cmp37) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $34=$png_ptr_addr;
      _png_warning($34, ((STRING_TABLE.__str15294)|0));
      $ret=0;
      __label__ = 23; break;
    case 23: 
      var $35=$ret;
      $retval=$35;
      __label__ = 24; break;
    case 24: 
      var $36=$retval;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_check_cHRM_fixed["X"]=1;

function _png_muldiv($res, $a, $times, $divisor) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $res_addr;
      var $a_addr;
      var $times_addr;
      var $divisor_addr;
      var $r;
      $res_addr=$res;
      $a_addr=$a;
      $times_addr=$times;
      $divisor_addr=$divisor;
      var $0=$divisor_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 10; break; }
    case 2: 
      var $1=$a_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$times_addr;
      var $cmp2=(($2)|0)==0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$res_addr;
      HEAP32[(($3)>>2)]=0;
      $retval=1;
      __label__ = 11; break;
    case 5: 
      var $4=$a_addr;
      var $conv=(($4)|0);
      $r=$conv;
      var $5=$times_addr;
      var $conv4=(($5)|0);
      var $6=$r;
      var $mul=$6*$conv4;
      $r=$mul;
      var $7=$divisor_addr;
      var $conv5=(($7)|0);
      var $8=$r;
      var $div=$8/$conv5;
      $r=$div;
      var $9=$r;
      var $add=$9+0.5;
      var $call=_floor($add);
      $r=$call;
      var $10=$r;
      var $cmp6=$10 <= 2147483647;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $11=$r;
      var $cmp8=$11 >= -2147483648;
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $12=$r;
      var $conv11=(($12)&-1);
      var $13=$res_addr;
      HEAP32[(($13)>>2)]=$conv11;
      $retval=1;
      __label__ = 11; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      $retval=0;
      __label__ = 11; break;
    case 11: 
      var $14=$retval;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_muldiv["X"]=1;

function _png_XYZ_from_xy($XYZ, $xy) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var tempParam = $xy; $xy = STACKTOP;STACKTOP += 32;assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack");HEAP32[(($xy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[(($xy+4)>>2)]=HEAP32[((tempParam+4)>>2)];HEAP32[(($xy+8)>>2)]=HEAP32[((tempParam+8)>>2)];HEAP32[(($xy+12)>>2)]=HEAP32[((tempParam+12)>>2)];HEAP32[(($xy+16)>>2)]=HEAP32[((tempParam+16)>>2)];HEAP32[(($xy+20)>>2)]=HEAP32[((tempParam+20)>>2)];HEAP32[(($xy+24)>>2)]=HEAP32[((tempParam+24)>>2)];HEAP32[(($xy+28)>>2)]=HEAP32[((tempParam+28)>>2)];
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $XYZ_addr;
      var $red_inverse=__stackBase__;
      var $green_inverse=__stackBase__+4;
      var $blue_scale;
      var $left=__stackBase__+8;
      var $right=__stackBase__+12;
      var $denominator;
      $XYZ_addr=$XYZ;
      var $redx=(($xy)|0);
      var $0=HEAP32[(($redx)>>2)];
      var $cmp=(($0)|0) < 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $redx1=(($xy)|0);
      var $1=HEAP32[(($redx1)>>2)];
      var $cmp2=(($1)|0) > 100000;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=1;
      __label__ = 64; break;
    case 4: 
      var $redy=(($xy+4)|0);
      var $2=HEAP32[(($redy)>>2)];
      var $cmp3=(($2)|0) < 0;
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $redy5=(($xy+4)|0);
      var $3=HEAP32[(($redy5)>>2)];
      var $redx6=(($xy)|0);
      var $4=HEAP32[(($redx6)>>2)];
      var $sub=((100000-$4)|0);
      var $cmp7=(($3)|0) > (($sub)|0);
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $retval=1;
      __label__ = 64; break;
    case 7: 
      var $greenx=(($xy+8)|0);
      var $5=HEAP32[(($greenx)>>2)];
      var $cmp10=(($5)|0) < 0;
      if ($cmp10) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $greenx12=(($xy+8)|0);
      var $6=HEAP32[(($greenx12)>>2)];
      var $cmp13=(($6)|0) > 100000;
      if ($cmp13) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $retval=1;
      __label__ = 64; break;
    case 10: 
      var $greeny=(($xy+12)|0);
      var $7=HEAP32[(($greeny)>>2)];
      var $cmp16=(($7)|0) < 0;
      if ($cmp16) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $greeny18=(($xy+12)|0);
      var $8=HEAP32[(($greeny18)>>2)];
      var $greenx19=(($xy+8)|0);
      var $9=HEAP32[(($greenx19)>>2)];
      var $sub20=((100000-$9)|0);
      var $cmp21=(($8)|0) > (($sub20)|0);
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $retval=1;
      __label__ = 64; break;
    case 13: 
      var $bluex=(($xy+16)|0);
      var $10=HEAP32[(($bluex)>>2)];
      var $cmp24=(($10)|0) < 0;
      if ($cmp24) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $bluex26=(($xy+16)|0);
      var $11=HEAP32[(($bluex26)>>2)];
      var $cmp27=(($11)|0) > 100000;
      if ($cmp27) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $retval=1;
      __label__ = 64; break;
    case 16: 
      var $bluey=(($xy+20)|0);
      var $12=HEAP32[(($bluey)>>2)];
      var $cmp30=(($12)|0) < 0;
      if ($cmp30) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $bluey32=(($xy+20)|0);
      var $13=HEAP32[(($bluey32)>>2)];
      var $bluex33=(($xy+16)|0);
      var $14=HEAP32[(($bluex33)>>2)];
      var $sub34=((100000-$14)|0);
      var $cmp35=(($13)|0) > (($sub34)|0);
      if ($cmp35) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $retval=1;
      __label__ = 64; break;
    case 19: 
      var $whitex=(($xy+24)|0);
      var $15=HEAP32[(($whitex)>>2)];
      var $cmp38=(($15)|0) < 0;
      if ($cmp38) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $whitex40=(($xy+24)|0);
      var $16=HEAP32[(($whitex40)>>2)];
      var $cmp41=(($16)|0) > 100000;
      if ($cmp41) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      $retval=1;
      __label__ = 64; break;
    case 22: 
      var $whitey=(($xy+28)|0);
      var $17=HEAP32[(($whitey)>>2)];
      var $cmp44=(($17)|0) < 0;
      if ($cmp44) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: 
      var $whitey46=(($xy+28)|0);
      var $18=HEAP32[(($whitey46)>>2)];
      var $whitex47=(($xy+24)|0);
      var $19=HEAP32[(($whitex47)>>2)];
      var $sub48=((100000-$19)|0);
      var $cmp49=(($18)|0) > (($sub48)|0);
      if ($cmp49) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      $retval=1;
      __label__ = 64; break;
    case 25: 
      var $greenx52=(($xy+8)|0);
      var $20=HEAP32[(($greenx52)>>2)];
      var $bluex53=(($xy+16)|0);
      var $21=HEAP32[(($bluex53)>>2)];
      var $sub54=(($20-$21)|0);
      var $redy55=(($xy+4)|0);
      var $22=HEAP32[(($redy55)>>2)];
      var $bluey56=(($xy+20)|0);
      var $23=HEAP32[(($bluey56)>>2)];
      var $sub57=(($22-$23)|0);
      var $call=_png_muldiv($left, $sub54, $sub57, 7);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      $retval=2;
      __label__ = 64; break;
    case 27: 
      var $greeny60=(($xy+12)|0);
      var $24=HEAP32[(($greeny60)>>2)];
      var $bluey61=(($xy+20)|0);
      var $25=HEAP32[(($bluey61)>>2)];
      var $sub62=(($24-$25)|0);
      var $redx63=(($xy)|0);
      var $26=HEAP32[(($redx63)>>2)];
      var $bluex64=(($xy+16)|0);
      var $27=HEAP32[(($bluex64)>>2)];
      var $sub65=(($26-$27)|0);
      var $call66=_png_muldiv($right, $sub62, $sub65, 7);
      var $tobool67=(($call66)|0)!=0;
      if ($tobool67) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: 
      $retval=2;
      __label__ = 64; break;
    case 29: 
      var $28=HEAP32[(($left)>>2)];
      var $29=HEAP32[(($right)>>2)];
      var $sub70=(($28-$29)|0);
      $denominator=$sub70;
      var $greenx71=(($xy+8)|0);
      var $30=HEAP32[(($greenx71)>>2)];
      var $bluex72=(($xy+16)|0);
      var $31=HEAP32[(($bluex72)>>2)];
      var $sub73=(($30-$31)|0);
      var $whitey74=(($xy+28)|0);
      var $32=HEAP32[(($whitey74)>>2)];
      var $bluey75=(($xy+20)|0);
      var $33=HEAP32[(($bluey75)>>2)];
      var $sub76=(($32-$33)|0);
      var $call77=_png_muldiv($left, $sub73, $sub76, 7);
      var $tobool78=(($call77)|0)!=0;
      if ($tobool78) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      $retval=2;
      __label__ = 64; break;
    case 31: 
      var $greeny81=(($xy+12)|0);
      var $34=HEAP32[(($greeny81)>>2)];
      var $bluey82=(($xy+20)|0);
      var $35=HEAP32[(($bluey82)>>2)];
      var $sub83=(($34-$35)|0);
      var $whitex84=(($xy+24)|0);
      var $36=HEAP32[(($whitex84)>>2)];
      var $bluex85=(($xy+16)|0);
      var $37=HEAP32[(($bluex85)>>2)];
      var $sub86=(($36-$37)|0);
      var $call87=_png_muldiv($right, $sub83, $sub86, 7);
      var $tobool88=(($call87)|0)!=0;
      if ($tobool88) { __label__ = 33; break; } else { __label__ = 32; break; }
    case 32: 
      $retval=2;
      __label__ = 64; break;
    case 33: 
      var $whitey91=(($xy+28)|0);
      var $38=HEAP32[(($whitey91)>>2)];
      var $39=$denominator;
      var $40=HEAP32[(($left)>>2)];
      var $41=HEAP32[(($right)>>2)];
      var $sub92=(($40-$41)|0);
      var $call93=_png_muldiv($red_inverse, $38, $39, $sub92);
      var $tobool94=(($call93)|0)!=0;
      if ($tobool94) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $42=HEAP32[(($red_inverse)>>2)];
      var $whitey96=(($xy+28)|0);
      var $43=HEAP32[(($whitey96)>>2)];
      var $cmp97=(($42)|0) <= (($43)|0);
      if ($cmp97) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      $retval=1;
      __label__ = 64; break;
    case 36: 
      var $redy100=(($xy+4)|0);
      var $44=HEAP32[(($redy100)>>2)];
      var $bluey101=(($xy+20)|0);
      var $45=HEAP32[(($bluey101)>>2)];
      var $sub102=(($44-$45)|0);
      var $whitex103=(($xy+24)|0);
      var $46=HEAP32[(($whitex103)>>2)];
      var $bluex104=(($xy+16)|0);
      var $47=HEAP32[(($bluex104)>>2)];
      var $sub105=(($46-$47)|0);
      var $call106=_png_muldiv($left, $sub102, $sub105, 7);
      var $tobool107=(($call106)|0)!=0;
      if ($tobool107) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      $retval=2;
      __label__ = 64; break;
    case 38: 
      var $redx110=(($xy)|0);
      var $48=HEAP32[(($redx110)>>2)];
      var $bluex111=(($xy+16)|0);
      var $49=HEAP32[(($bluex111)>>2)];
      var $sub112=(($48-$49)|0);
      var $whitey113=(($xy+28)|0);
      var $50=HEAP32[(($whitey113)>>2)];
      var $bluey114=(($xy+20)|0);
      var $51=HEAP32[(($bluey114)>>2)];
      var $sub115=(($50-$51)|0);
      var $call116=_png_muldiv($right, $sub112, $sub115, 7);
      var $tobool117=(($call116)|0)!=0;
      if ($tobool117) { __label__ = 40; break; } else { __label__ = 39; break; }
    case 39: 
      $retval=2;
      __label__ = 64; break;
    case 40: 
      var $whitey120=(($xy+28)|0);
      var $52=HEAP32[(($whitey120)>>2)];
      var $53=$denominator;
      var $54=HEAP32[(($left)>>2)];
      var $55=HEAP32[(($right)>>2)];
      var $sub121=(($54-$55)|0);
      var $call122=_png_muldiv($green_inverse, $52, $53, $sub121);
      var $tobool123=(($call122)|0)!=0;
      if ($tobool123) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $56=HEAP32[(($green_inverse)>>2)];
      var $whitey125=(($xy+28)|0);
      var $57=HEAP32[(($whitey125)>>2)];
      var $cmp126=(($56)|0) <= (($57)|0);
      if ($cmp126) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      $retval=1;
      __label__ = 64; break;
    case 43: 
      var $whitey129=(($xy+28)|0);
      var $58=HEAP32[(($whitey129)>>2)];
      var $call130=_png_reciprocal($58);
      var $59=HEAP32[(($red_inverse)>>2)];
      var $call131=_png_reciprocal($59);
      var $sub132=(($call130-$call131)|0);
      var $60=HEAP32[(($green_inverse)>>2)];
      var $call133=_png_reciprocal($60);
      var $sub134=(($sub132-$call133)|0);
      $blue_scale=$sub134;
      var $61=$blue_scale;
      var $cmp135=(($61)|0) <= 0;
      if ($cmp135) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      $retval=1;
      __label__ = 64; break;
    case 45: 
      var $62=$XYZ_addr;
      var $redX=(($62)|0);
      var $redx138=(($xy)|0);
      var $63=HEAP32[(($redx138)>>2)];
      var $64=HEAP32[(($red_inverse)>>2)];
      var $call139=_png_muldiv($redX, $63, 100000, $64);
      var $tobool140=(($call139)|0)!=0;
      if ($tobool140) { __label__ = 47; break; } else { __label__ = 46; break; }
    case 46: 
      $retval=1;
      __label__ = 64; break;
    case 47: 
      var $65=$XYZ_addr;
      var $redY=(($65+4)|0);
      var $redy143=(($xy+4)|0);
      var $66=HEAP32[(($redy143)>>2)];
      var $67=HEAP32[(($red_inverse)>>2)];
      var $call144=_png_muldiv($redY, $66, 100000, $67);
      var $tobool145=(($call144)|0)!=0;
      if ($tobool145) { __label__ = 49; break; } else { __label__ = 48; break; }
    case 48: 
      $retval=1;
      __label__ = 64; break;
    case 49: 
      var $68=$XYZ_addr;
      var $redZ=(($68+8)|0);
      var $redx148=(($xy)|0);
      var $69=HEAP32[(($redx148)>>2)];
      var $sub149=((100000-$69)|0);
      var $redy150=(($xy+4)|0);
      var $70=HEAP32[(($redy150)>>2)];
      var $sub151=(($sub149-$70)|0);
      var $71=HEAP32[(($red_inverse)>>2)];
      var $call152=_png_muldiv($redZ, $sub151, 100000, $71);
      var $tobool153=(($call152)|0)!=0;
      if ($tobool153) { __label__ = 51; break; } else { __label__ = 50; break; }
    case 50: 
      $retval=1;
      __label__ = 64; break;
    case 51: 
      var $72=$XYZ_addr;
      var $greenX=(($72+12)|0);
      var $greenx156=(($xy+8)|0);
      var $73=HEAP32[(($greenx156)>>2)];
      var $74=HEAP32[(($green_inverse)>>2)];
      var $call157=_png_muldiv($greenX, $73, 100000, $74);
      var $tobool158=(($call157)|0)!=0;
      if ($tobool158) { __label__ = 53; break; } else { __label__ = 52; break; }
    case 52: 
      $retval=1;
      __label__ = 64; break;
    case 53: 
      var $75=$XYZ_addr;
      var $greenY=(($75+16)|0);
      var $greeny161=(($xy+12)|0);
      var $76=HEAP32[(($greeny161)>>2)];
      var $77=HEAP32[(($green_inverse)>>2)];
      var $call162=_png_muldiv($greenY, $76, 100000, $77);
      var $tobool163=(($call162)|0)!=0;
      if ($tobool163) { __label__ = 55; break; } else { __label__ = 54; break; }
    case 54: 
      $retval=1;
      __label__ = 64; break;
    case 55: 
      var $78=$XYZ_addr;
      var $greenZ=(($78+20)|0);
      var $greenx166=(($xy+8)|0);
      var $79=HEAP32[(($greenx166)>>2)];
      var $sub167=((100000-$79)|0);
      var $greeny168=(($xy+12)|0);
      var $80=HEAP32[(($greeny168)>>2)];
      var $sub169=(($sub167-$80)|0);
      var $81=HEAP32[(($green_inverse)>>2)];
      var $call170=_png_muldiv($greenZ, $sub169, 100000, $81);
      var $tobool171=(($call170)|0)!=0;
      if ($tobool171) { __label__ = 57; break; } else { __label__ = 56; break; }
    case 56: 
      $retval=1;
      __label__ = 64; break;
    case 57: 
      var $82=$XYZ_addr;
      var $blueX=(($82+24)|0);
      var $bluex174=(($xy+16)|0);
      var $83=HEAP32[(($bluex174)>>2)];
      var $84=$blue_scale;
      var $call175=_png_muldiv($blueX, $83, $84, 100000);
      var $tobool176=(($call175)|0)!=0;
      if ($tobool176) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      $retval=1;
      __label__ = 64; break;
    case 59: 
      var $85=$XYZ_addr;
      var $blueY=(($85+28)|0);
      var $bluey179=(($xy+20)|0);
      var $86=HEAP32[(($bluey179)>>2)];
      var $87=$blue_scale;
      var $call180=_png_muldiv($blueY, $86, $87, 100000);
      var $tobool181=(($call180)|0)!=0;
      if ($tobool181) { __label__ = 61; break; } else { __label__ = 60; break; }
    case 60: 
      $retval=1;
      __label__ = 64; break;
    case 61: 
      var $88=$XYZ_addr;
      var $blueZ=(($88+32)|0);
      var $bluex184=(($xy+16)|0);
      var $89=HEAP32[(($bluex184)>>2)];
      var $sub185=((100000-$89)|0);
      var $bluey186=(($xy+20)|0);
      var $90=HEAP32[(($bluey186)>>2)];
      var $sub187=(($sub185-$90)|0);
      var $91=$blue_scale;
      var $call188=_png_muldiv($blueZ, $sub187, $91, 100000);
      var $tobool189=(($call188)|0)!=0;
      if ($tobool189) { __label__ = 63; break; } else { __label__ = 62; break; }
    case 62: 
      $retval=1;
      __label__ = 64; break;
    case 63: 
      $retval=0;
      __label__ = 64; break;
    case 64: 
      var $92=$retval;
      STACKTOP = __stackBase__;
      return $92;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_XYZ_from_xy["X"]=1;

function _png_reciprocal($a) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $a_addr;
      var $r;
      $a_addr=$a;
      var $0=$a_addr;
      var $conv=(($0)|0);
      var $div=10000000000/$conv;
      var $add=$div+0.5;
      var $call=_floor($add);
      $r=$call;
      var $1=$r;
      var $cmp=$1 <= 2147483647;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $2=$r;
      var $cmp2=$2 >= -2147483648;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$r;
      var $conv4=(($3)&-1);
      $retval=$conv4;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $4=$retval;
      ;
      return $4;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_XYZ_from_xy_checked($png_ptr, $XYZ, $xy) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var tempParam = $xy; $xy = STACKTOP;STACKTOP += 32;assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack");HEAP32[(($xy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[(($xy+4)>>2)]=HEAP32[((tempParam+4)>>2)];HEAP32[(($xy+8)>>2)]=HEAP32[((tempParam+8)>>2)];HEAP32[(($xy+12)>>2)]=HEAP32[((tempParam+12)>>2)];HEAP32[(($xy+16)>>2)]=HEAP32[((tempParam+16)>>2)];HEAP32[(($xy+20)>>2)]=HEAP32[((tempParam+20)>>2)];HEAP32[(($xy+24)>>2)]=HEAP32[((tempParam+24)>>2)];HEAP32[(($xy+28)>>2)]=HEAP32[((tempParam+28)>>2)];
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $XYZ_addr;
      $png_ptr_addr=$png_ptr;
      $XYZ_addr=$XYZ;
      var $0=$XYZ_addr;
      var $call=_png_XYZ_from_xy($0, $xy);
      if ((($call)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($call)|0) == 1) {
        __label__ = 3; break;
      }
      else {
      __label__ = 4; break;
      }
      
    case 2: 
      $retval=1;
      __label__ = 6; break;
    case 3: 
      var $1=$png_ptr_addr;
      _png_warning($1, ((STRING_TABLE.__str16295)|0));
      __label__ = 5; break;
    case 4: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str17296)|0));
      __label__ = 5; break;
    case 5: 
      $retval=0;
      __label__ = 6; break;
    case 6: 
      var $3=$retval;
      STACKTOP = __stackBase__;
      return $3;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_check_fp_number($string, $size, $statep, $whereami) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $string_addr;
      var $size_addr;
      var $statep_addr;
      var $whereami_addr;
      var $state;
      var $i;
      var $type;
      $string_addr=$string;
      $size_addr=$size;
      $statep_addr=$statep;
      $whereami_addr=$whereami;
      var $0=$statep_addr;
      var $1=HEAP32[(($0)>>2)];
      $state=$1;
      var $2=$whereami_addr;
      var $3=HEAP32[(($2)>>2)];
      $i=$3;
      __label__ = 2; break;
    case 2: 
      var $4=$i;
      var $5=$size_addr;
      var $cmp=(($4)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 38; break; }
    case 3: 
      var $6=$i;
      var $7=$string_addr;
      var $arrayidx=(($7+$6)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8 << 24) >> 24);
      if ((($conv)|0) == 43) {
        __label__ = 4; break;
      }
      else if ((($conv)|0) == 45) {
        __label__ = 5; break;
      }
      else if ((($conv)|0) == 46) {
        __label__ = 6; break;
      }
      else if ((($conv)|0) == 48) {
        __label__ = 7; break;
      }
      else if ((($conv)|0) == 49 || (($conv)|0) == 50 || (($conv)|0) == 51 || (($conv)|0) == 52 || (($conv)|0) == 53 || (($conv)|0) == 54 || (($conv)|0) == 55 || (($conv)|0) == 56 || (($conv)|0) == 57) {
        __label__ = 8; break;
      }
      else if ((($conv)|0) == 69 || (($conv)|0) == 101) {
        __label__ = 9; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 4: 
      $type=4;
      __label__ = 11; break;
    case 5: 
      $type=132;
      __label__ = 11; break;
    case 6: 
      $type=16;
      __label__ = 11; break;
    case 7: 
      $type=8;
      __label__ = 11; break;
    case 8: 
      $type=264;
      __label__ = 11; break;
    case 9: 
      $type=32;
      __label__ = 11; break;
    case 10: 
      __label__ = 39; break;
    case 11: 
      var $9=$state;
      var $and=$9 & 3;
      var $10=$type;
      var $and6=$10 & 60;
      var $add=(($and+$and6)|0);
      if ((($add)|0) == 4) {
        __label__ = 12; break;
      }
      else if ((($add)|0) == 16) {
        __label__ = 15; break;
      }
      else if ((($add)|0) == 8) {
        __label__ = 22; break;
      }
      else if ((($add)|0) == 32) {
        __label__ = 25; break;
      }
      else if ((($add)|0) == 9) {
        __label__ = 28; break;
      }
      else if ((($add)|0) == 33) {
        __label__ = 29; break;
      }
      else if ((($add)|0) == 6) {
        __label__ = 32; break;
      }
      else if ((($add)|0) == 10) {
        __label__ = 35; break;
      }
      else {
      __label__ = 36; break;
      }
      
    case 12: 
      var $11=$state;
      var $and8=$11 & 60;
      var $tobool=(($and8)|0)!=0;
      if ($tobool) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 39; break;
    case 14: 
      var $12=$type;
      var $13=$state;
      var $or=$13 | $12;
      $state=$or;
      __label__ = 37; break;
    case 15: 
      var $14=$state;
      var $and10=$14 & 16;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 39; break;
    case 17: 
      var $15=$state;
      var $and13=$15 & 8;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $16=$type;
      var $17=$state;
      var $or16=$17 | $16;
      $state=$or16;
      __label__ = 20; break;
    case 19: 
      var $18=$type;
      var $or18=1 | $18;
      var $19=$state;
      var $and19=$19 & 448;
      var $or20=$or18 | $and19;
      $state=$or20;
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 37; break;
    case 22: 
      var $20=$state;
      var $and24=$20 & 16;
      var $tobool25=(($and24)|0)!=0;
      if ($tobool25) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $21=$state;
      var $and27=$21 & 448;
      var $or28=17 | $and27;
      $state=$or28;
      __label__ = 24; break;
    case 24: 
      var $22=$type;
      var $or30=$22 | 64;
      var $23=$state;
      var $or31=$23 | $or30;
      $state=$or31;
      __label__ = 37; break;
    case 25: 
      var $24=$state;
      var $and33=$24 & 8;
      var $cmp34=(($and33)|0)==0;
      if ($cmp34) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 39; break;
    case 27: 
      var $25=$state;
      var $and38=$25 & 448;
      var $or39=2 | $and38;
      $state=$or39;
      __label__ = 37; break;
    case 28: 
      var $26=$type;
      var $or41=$26 | 64;
      var $27=$state;
      var $or42=$27 | $or41;
      $state=$or42;
      __label__ = 37; break;
    case 29: 
      var $28=$state;
      var $and44=$28 & 8;
      var $cmp45=(($and44)|0)==0;
      if ($cmp45) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      __label__ = 39; break;
    case 31: 
      var $29=$state;
      var $and49=$29 & 448;
      var $or50=2 | $and49;
      $state=$or50;
      __label__ = 37; break;
    case 32: 
      var $30=$state;
      var $and52=$30 & 60;
      var $tobool53=(($and52)|0)!=0;
      if ($tobool53) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      __label__ = 39; break;
    case 34: 
      var $31=$state;
      var $or56=$31 | 4;
      $state=$or56;
      __label__ = 37; break;
    case 35: 
      var $32=$state;
      var $or58=$32 | 72;
      $state=$or58;
      __label__ = 37; break;
    case 36: 
      __label__ = 39; break;
    case 37: 
      var $33=$i;
      var $inc=(($33+1)|0);
      $i=$inc;
      __label__ = 2; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $34=$state;
      var $35=$statep_addr;
      HEAP32[(($35)>>2)]=$34;
      var $36=$i;
      var $37=$whereami_addr;
      HEAP32[(($37)>>2)]=$36;
      var $38=$state;
      var $and61=$38 & 8;
      var $cmp62=(($and61)|0)!=0;
      var $conv63=(($cmp62)&1);
      ;
      return $conv63;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_check_fp_number["X"]=1;

function _png_check_IHDR($png_ptr, $width, $height, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $width_addr;
      var $height_addr;
      var $bit_depth_addr;
      var $color_type_addr;
      var $interlace_type_addr;
      var $compression_type_addr;
      var $filter_type_addr;
      var $error;
      $png_ptr_addr=$png_ptr;
      $width_addr=$width;
      $height_addr=$height;
      $bit_depth_addr=$bit_depth;
      $color_type_addr=$color_type;
      $interlace_type_addr=$interlace_type;
      $compression_type_addr=$compression_type;
      $filter_type_addr=$filter_type;
      $error=0;
      var $0=$width_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      _png_warning($1, ((STRING_TABLE.__str18297)|0));
      $error=1;
      __label__ = 3; break;
    case 3: 
      var $2=$height_addr;
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$png_ptr_addr;
      _png_warning($3, ((STRING_TABLE.__str19298)|0));
      $error=1;
      __label__ = 5; break;
    case 5: 
      var $4=$width_addr;
      var $5=$png_ptr_addr;
      var $user_width_max=(($5+616)|0);
      var $6=HEAPU32[(($user_width_max)>>2)];
      var $cmp4=(($4)>>>0) > (($6)>>>0);
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $7=$png_ptr_addr;
      _png_warning($7, ((STRING_TABLE.__str20299)|0));
      $error=1;
      __label__ = 7; break;
    case 7: 
      var $8=$height_addr;
      var $9=$png_ptr_addr;
      var $user_height_max=(($9+620)|0);
      var $10=HEAPU32[(($user_height_max)>>2)];
      var $cmp7=(($8)>>>0) > (($10)>>>0);
      if ($cmp7) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$png_ptr_addr;
      _png_warning($11, ((STRING_TABLE.__str21300)|0));
      $error=1;
      __label__ = 9; break;
    case 9: 
      var $12=$width_addr;
      var $cmp10=(($12)>>>0) > 2147483647;
      if ($cmp10) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $13=$png_ptr_addr;
      _png_warning($13, ((STRING_TABLE.__str22301)|0));
      $error=1;
      __label__ = 11; break;
    case 11: 
      var $14=$height_addr;
      var $cmp13=(($14)>>>0) > 2147483647;
      if ($cmp13) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $15=$png_ptr_addr;
      _png_warning($15, ((STRING_TABLE.__str23302)|0));
      $error=1;
      __label__ = 13; break;
    case 13: 
      var $16=$width_addr;
      var $cmp16=(($16)>>>0) > 536870798;
      if ($cmp16) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $17=$png_ptr_addr;
      _png_warning($17, ((STRING_TABLE.__str24303)|0));
      __label__ = 15; break;
    case 15: 
      var $18=$bit_depth_addr;
      var $cmp19=(($18)|0)!=1;
      if ($cmp19) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $19=$bit_depth_addr;
      var $cmp20=(($19)|0)!=2;
      if ($cmp20) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $20=$bit_depth_addr;
      var $cmp22=(($20)|0)!=4;
      if ($cmp22) { __label__ = 18; break; } else { __label__ = 21; break; }
    case 18: 
      var $21=$bit_depth_addr;
      var $cmp24=(($21)|0)!=8;
      if ($cmp24) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $22=$bit_depth_addr;
      var $cmp26=(($22)|0)!=16;
      if ($cmp26) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $23=$png_ptr_addr;
      _png_warning($23, ((STRING_TABLE.__str25304)|0));
      $error=1;
      __label__ = 21; break;
    case 21: 
      var $24=$color_type_addr;
      var $cmp29=(($24)|0) < 0;
      if ($cmp29) { __label__ = 25; break; } else { __label__ = 22; break; }
    case 22: 
      var $25=$color_type_addr;
      var $cmp30=(($25)|0)==1;
      if ($cmp30) { __label__ = 25; break; } else { __label__ = 23; break; }
    case 23: 
      var $26=$color_type_addr;
      var $cmp32=(($26)|0)==5;
      if ($cmp32) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $27=$color_type_addr;
      var $cmp34=(($27)|0) > 6;
      if ($cmp34) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $28=$png_ptr_addr;
      _png_warning($28, ((STRING_TABLE.__str26305)|0));
      $error=1;
      __label__ = 26; break;
    case 26: 
      var $29=$color_type_addr;
      var $cmp37=(($29)|0)==3;
      if ($cmp37) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $30=$bit_depth_addr;
      var $cmp39=(($30)|0) > 8;
      if ($cmp39) { __label__ = 32; break; } else { __label__ = 28; break; }
    case 28: 
      var $31=$color_type_addr;
      var $cmp41=(($31)|0)==2;
      if ($cmp41) { __label__ = 31; break; } else { __label__ = 29; break; }
    case 29: 
      var $32=$color_type_addr;
      var $cmp43=(($32)|0)==4;
      if ($cmp43) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $33=$color_type_addr;
      var $cmp45=(($33)|0)==6;
      if ($cmp45) { __label__ = 31; break; } else { __label__ = 33; break; }
    case 31: 
      var $34=$bit_depth_addr;
      var $cmp47=(($34)|0) < 8;
      if ($cmp47) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $35=$png_ptr_addr;
      _png_warning($35, ((STRING_TABLE.__str27306)|0));
      $error=1;
      __label__ = 33; break;
    case 33: 
      var $36=$interlace_type_addr;
      var $cmp50=(($36)|0) >= 2;
      if ($cmp50) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $37=$png_ptr_addr;
      _png_warning($37, ((STRING_TABLE.__str28307)|0));
      $error=1;
      __label__ = 35; break;
    case 35: 
      var $38=$compression_type_addr;
      var $cmp53=(($38)|0)!=0;
      if ($cmp53) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $39=$png_ptr_addr;
      _png_warning($39, ((STRING_TABLE.__str29308)|0));
      $error=1;
      __label__ = 37; break;
    case 37: 
      var $40=$png_ptr_addr;
      var $mode=(($40+84)|0);
      var $41=HEAP32[(($mode)>>2)];
      var $and=$41 & 4096;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $42=$png_ptr_addr;
      var $mng_features_permitted=(($42+576)|0);
      var $43=HEAP32[(($mng_features_permitted)>>2)];
      var $tobool57=(($43)|0)!=0;
      if ($tobool57) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $44=$png_ptr_addr;
      _png_warning($44, ((STRING_TABLE.__str30309)|0));
      __label__ = 40; break;
    case 40: 
      var $45=$filter_type_addr;
      var $cmp60=(($45)|0)!=0;
      if ($cmp60) { __label__ = 41; break; } else { __label__ = 50; break; }
    case 41: 
      var $46=$png_ptr_addr;
      var $mng_features_permitted62=(($46+576)|0);
      var $47=HEAP32[(($mng_features_permitted62)>>2)];
      var $and63=$47 & 4;
      var $tobool64=(($and63)|0)!=0;
      if ($tobool64) { __label__ = 42; break; } else { __label__ = 46; break; }
    case 42: 
      var $48=$filter_type_addr;
      var $cmp66=(($48)|0)==64;
      if ($cmp66) { __label__ = 43; break; } else { __label__ = 46; break; }
    case 43: 
      var $49=$png_ptr_addr;
      var $mode68=(($49+84)|0);
      var $50=HEAP32[(($mode68)>>2)];
      var $and69=$50 & 4096;
      var $cmp70=(($and69)|0)==0;
      if ($cmp70) { __label__ = 44; break; } else { __label__ = 46; break; }
    case 44: 
      var $51=$color_type_addr;
      var $cmp72=(($51)|0)==2;
      if ($cmp72) { __label__ = 47; break; } else { __label__ = 45; break; }
    case 45: 
      var $52=$color_type_addr;
      var $cmp74=(($52)|0)==6;
      if ($cmp74) { __label__ = 47; break; } else { __label__ = 46; break; }
    case 46: 
      var $53=$png_ptr_addr;
      _png_warning($53, ((STRING_TABLE.__str31310)|0));
      $error=1;
      __label__ = 47; break;
    case 47: 
      var $54=$png_ptr_addr;
      var $mode77=(($54+84)|0);
      var $55=HEAP32[(($mode77)>>2)];
      var $and78=$55 & 4096;
      var $tobool79=(($and78)|0)!=0;
      if ($tobool79) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $56=$png_ptr_addr;
      _png_warning($56, ((STRING_TABLE.__str32311)|0));
      $error=1;
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $57=$error;
      var $cmp83=(($57)|0)==1;
      if ($cmp83) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $58=$png_ptr_addr;
      _png_error($58, ((STRING_TABLE.__str33312)|0));
      __label__ = 52; break;
    case 52: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_check_IHDR["X"]=1;

function _png_check_fp_string($string, $size) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $string_addr;
      var $size_addr;
      var $state=__stackBase__;
      var $char_index=__stackBase__+4;
      $string_addr=$string;
      $size_addr=$size;
      HEAP32[(($state)>>2)]=0;
      HEAP32[(($char_index)>>2)]=0;
      var $0=$string_addr;
      var $1=$size_addr;
      var $call=_png_check_fp_number($0, $1, $state, $char_index);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $2=HEAP32[(($char_index)>>2)];
      var $3=$size_addr;
      var $cmp=(($2)|0)==(($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=HEAP32[(($char_index)>>2)];
      var $5=$string_addr;
      var $arrayidx=(($5+$4)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv=(($6 << 24) >> 24);
      var $cmp1=(($conv)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $7=HEAP32[(($state)>>2)];
      $retval=$7;
      __label__ = 6; break;
    case 5: 
      $retval=0;
      __label__ = 6; break;
    case 6: 
      var $8=$retval;
      STACKTOP = __stackBase__;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_pow10($power) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $power_addr;
      var $recip;
      var $d;
      var $mult;
      $power_addr=$power;
      $recip=0;
      $d=1;
      var $0=$power_addr;
      var $cmp=(($0)|0) < 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $1=$power_addr;
      var $cmp1=(($1)|0) < -307;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 15; break;
    case 4: 
      $recip=1;
      var $2=$power_addr;
      var $sub=(((-$2))|0);
      $power_addr=$sub;
      __label__ = 5; break;
    case 5: 
      var $3=$power_addr;
      var $cmp4=(($3)|0) > 0;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 14; break; }
    case 6: 
      $mult=10;
      __label__ = 7; break;
    case 7: 
      var $4=$power_addr;
      var $and=$4 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $5=$mult;
      var $6=$d;
      var $mul=$6*$5;
      $d=$mul;
      __label__ = 9; break;
    case 9: 
      var $7=$mult;
      var $8=$mult;
      var $mul8=$8*$7;
      $mult=$mul8;
      var $9=$power_addr;
      var $shr=$9 >> 1;
      $power_addr=$shr;
      __label__ = 10; break;
    case 10: 
      var $10=$power_addr;
      var $cmp9=(($10)|0) > 0;
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 11: 
      var $11=$recip;
      var $tobool10=(($11)|0)!=0;
      if ($tobool10) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $12=$d;
      var $div=1/$12;
      $d=$div;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $13=$d;
      $retval=$13;
      __label__ = 15; break;
    case 15: 
      var $14=$retval;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_pow10["X"]=1;

function _png_gamma_significant($gamma_val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $gamma_val_addr;
      $gamma_val_addr=$gamma_val;
      var $0=$gamma_val_addr;
      var $cmp=(($0)|0) < 95000;
      if ($cmp) { var $2 = 1;__label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$gamma_val_addr;
      var $cmp1=(($1)|0) > 105000;
      var $2 = $cmp1;__label__ = 3; break;
    case 3: 
      var $2;
      var $lor_ext=(($2)&1);
      ;
      return $lor_ext;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_ascii_from_fp($png_ptr, $ascii, $size, $fp, $precision) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ascii_addr;
      var $size_addr;
      var $fp_addr;
      var $precision_addr;
      var $exp_b10=__stackBase__;
      var $base;
      var $test;
      var $czero;
      var $clead;
      var $cdigits;
      var $exponent=__stackBase__+4;
      var $d=__stackBase__+16;
      var $ch;
      var $ch81;
      var $uexp_b10;
      $png_ptr_addr=$png_ptr;
      $ascii_addr=$ascii;
      $size_addr=$size;
      $fp_addr=$fp;
      $precision_addr=$precision;
      var $0=$precision_addr;
      var $cmp=(($0)>>>0) < 1;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $precision_addr=15;
      __label__ = 3; break;
    case 3: 
      var $1=$precision_addr;
      var $cmp1=(($1)>>>0) > 16;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $precision_addr=16;
      __label__ = 5; break;
    case 5: 
      var $2=$size_addr;
      var $3=$precision_addr;
      var $add=(($3+5)|0);
      var $cmp4=(($2)>>>0) >= (($add)>>>0);
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 95; break; }
    case 6: 
      var $4=$fp_addr;
      var $cmp6=$4 < 0;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $5=$fp_addr;
      var $sub=(-$5);
      $fp_addr=$sub;
      var $6=$ascii_addr;
      var $incdec_ptr=(($6+1)|0);
      $ascii_addr=$incdec_ptr;
      HEAP8[($6)]=45;
      var $7=$size_addr;
      var $dec=(($7-1)|0);
      $size_addr=$dec;
      __label__ = 8; break;
    case 8: 
      var $8=$fp_addr;
      var $cmp9=$8 >= 2.2250738585072014e-308;
      if ($cmp9) { __label__ = 9; break; } else { __label__ = 91; break; }
    case 9: 
      var $9=$fp_addr;
      var $cmp10=$9 <= 1.7976931348623157e+308;
      if ($cmp10) { __label__ = 10; break; } else { __label__ = 91; break; }
    case 10: 
      var $10=$fp_addr;
      var $call=_frexp($10, $exp_b10);
      var $11=HEAP32[(($exp_b10)>>2)];
      var $mul=(($11*77)|0);
      var $shr=$mul >> 8;
      HEAP32[(($exp_b10)>>2)]=$shr;
      var $12=HEAP32[(($exp_b10)>>2)];
      var $call12=_png_pow10($12);
      $base=$call12;
      __label__ = 11; break;
    case 11: 
      var $13=$base;
      var $cmp13=$13 < 2.2250738585072014e-308;
      if ($cmp13) { var $16 = 1;__label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $14=$base;
      var $15=$fp_addr;
      var $cmp14=$14 < $15;
      var $16 = $cmp14;__label__ = 13; break;
    case 13: 
      var $16;
      if ($16) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $17=HEAP32[(($exp_b10)>>2)];
      var $add15=(($17+1)|0);
      var $call16=_png_pow10($add15);
      $test=$call16;
      var $18=$test;
      var $cmp17=$18 <= 1.7976931348623157e+308;
      if ($cmp17) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $19=HEAP32[(($exp_b10)>>2)];
      var $inc=(($19+1)|0);
      HEAP32[(($exp_b10)>>2)]=$inc;
      var $20=$test;
      $base=$20;
      __label__ = 17; break;
    case 16: 
      __label__ = 18; break;
    case 17: 
      __label__ = 11; break;
    case 18: 
      var $21=$base;
      var $22=$fp_addr;
      var $div=$22/$21;
      $fp_addr=$div;
      __label__ = 19; break;
    case 19: 
      var $23=$fp_addr;
      var $cmp21=$23 >= 1;
      if ($cmp21) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $24=$fp_addr;
      var $div23=$24/10;
      $fp_addr=$div23;
      var $25=HEAP32[(($exp_b10)>>2)];
      var $inc24=(($25+1)|0);
      HEAP32[(($exp_b10)>>2)]=$inc24;
      __label__ = 19; break;
    case 21: 
      var $26=HEAP32[(($exp_b10)>>2)];
      var $cmp26=(($26)|0) < 0;
      if ($cmp26) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $27=HEAP32[(($exp_b10)>>2)];
      var $cmp28=(($27)|0) > -3;
      if ($cmp28) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $28=HEAP32[(($exp_b10)>>2)];
      var $sub30=(((-$28))|0);
      $czero=$sub30;
      HEAP32[(($exp_b10)>>2)]=0;
      __label__ = 25; break;
    case 24: 
      $czero=0;
      __label__ = 25; break;
    case 25: 
      var $29=$czero;
      $clead=$29;
      $cdigits=0;
      __label__ = 26; break;
    case 26: 
      var $30=$fp_addr;
      var $mul33=$30*10;
      $fp_addr=$mul33;
      var $31=$cdigits;
      var $32=$czero;
      var $add34=(($31+$32)|0);
      var $33=$clead;
      var $sub35=(($add34-$33)|0);
      var $add36=(($sub35+1)|0);
      var $34=$precision_addr;
      var $cmp37=(($add36)|0) < (($34)|0);
      if ($cmp37) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $35=$fp_addr;
      var $call39=_modf($35, $d);
      $fp_addr=$call39;
      __label__ = 53; break;
    case 28: 
      var $36=$fp_addr;
      var $add41=$36+0.5;
      var $call42=_floor($add41);
      (tempDoubleF64[0]=$call42,HEAP32[(($d)>>2)]=tempDoubleI32[0],HEAP32[(($d+4)>>2)]=tempDoubleI32[1]);
      var $37=(tempDoubleI32[0]=HEAP32[(($d)>>2)],tempDoubleI32[1]=HEAP32[(($d+4)>>2)],tempDoubleF64[0]);
      var $cmp43=$37 > 9;
      if ($cmp43) { __label__ = 29; break; } else { __label__ = 52; break; }
    case 29: 
      var $38=$czero;
      var $cmp45=(($38)|0) > 0;
      if ($cmp45) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $39=$czero;
      var $dec47=(($39-1)|0);
      $czero=$dec47;
      (tempDoubleF64[0]=1,HEAP32[(($d)>>2)]=tempDoubleI32[0],HEAP32[(($d+4)>>2)]=tempDoubleI32[1]);
      var $40=$cdigits;
      var $cmp48=(($40)|0)==0;
      if ($cmp48) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $41=$clead;
      var $dec50=(($41-1)|0);
      $clead=$dec50;
      __label__ = 32; break;
    case 32: 
      __label__ = 51; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $42=$cdigits;
      var $cmp54=(($42)|0) > 0;
      if ($cmp54) { __label__ = 35; break; } else { var $44 = 0;__label__ = 36; break; }
    case 35: 
      var $43=(tempDoubleI32[0]=HEAP32[(($d)>>2)],tempDoubleI32[1]=HEAP32[(($d+4)>>2)],tempDoubleF64[0]);
      var $cmp55=$43 > 9;
      var $44 = $cmp55;__label__ = 36; break;
    case 36: 
      var $44;
      if ($44) { __label__ = 37; break; } else { __label__ = 43; break; }
    case 37: 
      var $45=$ascii_addr;
      var $incdec_ptr57=(($45-1)|0);
      $ascii_addr=$incdec_ptr57;
      var $46=HEAP8[($incdec_ptr57)];
      var $conv=(($46 << 24) >> 24);
      $ch=$conv;
      var $47=HEAP32[(($exp_b10)>>2)];
      var $cmp58=(($47)|0)!=-1;
      if ($cmp58) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $48=HEAP32[(($exp_b10)>>2)];
      var $inc61=(($48+1)|0);
      HEAP32[(($exp_b10)>>2)]=$inc61;
      __label__ = 42; break;
    case 39: 
      var $49=$ch;
      var $cmp63=(($49)|0)==46;
      if ($cmp63) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $50=$ascii_addr;
      var $incdec_ptr66=(($50-1)|0);
      $ascii_addr=$incdec_ptr66;
      var $51=HEAP8[($incdec_ptr66)];
      var $conv67=(($51 << 24) >> 24);
      $ch=$conv67;
      var $52=$size_addr;
      var $inc68=(($52+1)|0);
      $size_addr=$inc68;
      HEAP32[(($exp_b10)>>2)]=1;
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $53=$cdigits;
      var $dec71=(($53-1)|0);
      $cdigits=$dec71;
      var $54=$ch;
      var $sub72=(($54-47)|0);
      var $conv73=(($sub72)|0);
      (tempDoubleF64[0]=$conv73,HEAP32[(($d)>>2)]=tempDoubleI32[0],HEAP32[(($d+4)>>2)]=tempDoubleI32[1]);
      __label__ = 34; break;
    case 43: 
      var $55=(tempDoubleI32[0]=HEAP32[(($d)>>2)],tempDoubleI32[1]=HEAP32[(($d+4)>>2)],tempDoubleF64[0]);
      var $cmp75=$55 > 9;
      if ($cmp75) { __label__ = 44; break; } else { __label__ = 50; break; }
    case 44: 
      var $56=HEAP32[(($exp_b10)>>2)];
      var $cmp78=(($56)|0)==-1;
      if ($cmp78) { __label__ = 45; break; } else { __label__ = 48; break; }
    case 45: 
      var $57=$ascii_addr;
      var $incdec_ptr82=(($57-1)|0);
      $ascii_addr=$incdec_ptr82;
      var $58=HEAP8[($incdec_ptr82)];
      var $conv83=(($58 << 24) >> 24);
      $ch81=$conv83;
      var $59=$ch81;
      var $cmp84=(($59)|0)==46;
      if ($cmp84) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $60=$size_addr;
      var $inc87=(($60+1)|0);
      $size_addr=$inc87;
      HEAP32[(($exp_b10)>>2)]=1;
      __label__ = 47; break;
    case 47: 
      __label__ = 49; break;
    case 48: 
      var $61=HEAP32[(($exp_b10)>>2)];
      var $inc90=(($61+1)|0);
      HEAP32[(($exp_b10)>>2)]=$inc90;
      __label__ = 49; break;
    case 49: 
      (tempDoubleF64[0]=1,HEAP32[(($d)>>2)]=tempDoubleI32[0],HEAP32[(($d+4)>>2)]=tempDoubleI32[1]);
      __label__ = 50; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      $fp_addr=0;
      __label__ = 53; break;
    case 53: 
      var $62=(tempDoubleI32[0]=HEAP32[(($d)>>2)],tempDoubleI32[1]=HEAP32[(($d+4)>>2)],tempDoubleF64[0]);
      var $cmp96=$62 == 0;
      if ($cmp96) { __label__ = 54; break; } else { __label__ = 57; break; }
    case 54: 
      var $63=$czero;
      var $inc99=(($63+1)|0);
      $czero=$inc99;
      var $64=$cdigits;
      var $cmp100=(($64)|0)==0;
      if ($cmp100) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $65=$clead;
      var $inc103=(($65+1)|0);
      $clead=$inc103;
      __label__ = 56; break;
    case 56: 
      __label__ = 69; break;
    case 57: 
      var $66=$czero;
      var $67=$clead;
      var $sub106=(($66-$67)|0);
      var $68=$cdigits;
      var $add107=(($68+$sub106)|0);
      $cdigits=$add107;
      $clead=0;
      __label__ = 58; break;
    case 58: 
      var $69=$czero;
      var $cmp109=(($69)|0) > 0;
      if ($cmp109) { __label__ = 59; break; } else { __label__ = 64; break; }
    case 59: 
      var $70=HEAP32[(($exp_b10)>>2)];
      var $cmp112=(($70)|0)!=-1;
      if ($cmp112) { __label__ = 60; break; } else { __label__ = 63; break; }
    case 60: 
      var $71=HEAP32[(($exp_b10)>>2)];
      var $cmp115=(($71)|0)==0;
      if ($cmp115) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $72=$ascii_addr;
      var $incdec_ptr118=(($72+1)|0);
      $ascii_addr=$incdec_ptr118;
      HEAP8[($72)]=46;
      var $73=$size_addr;
      var $dec119=(($73-1)|0);
      $size_addr=$dec119;
      __label__ = 62; break;
    case 62: 
      var $74=HEAP32[(($exp_b10)>>2)];
      var $dec121=(($74-1)|0);
      HEAP32[(($exp_b10)>>2)]=$dec121;
      __label__ = 63; break;
    case 63: 
      var $75=$ascii_addr;
      var $incdec_ptr123=(($75+1)|0);
      $ascii_addr=$incdec_ptr123;
      HEAP8[($75)]=48;
      var $76=$czero;
      var $dec124=(($76-1)|0);
      $czero=$dec124;
      __label__ = 58; break;
    case 64: 
      var $77=HEAP32[(($exp_b10)>>2)];
      var $cmp126=(($77)|0)!=-1;
      if ($cmp126) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: 
      var $78=HEAP32[(($exp_b10)>>2)];
      var $cmp129=(($78)|0)==0;
      if ($cmp129) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $79=$ascii_addr;
      var $incdec_ptr132=(($79+1)|0);
      $ascii_addr=$incdec_ptr132;
      HEAP8[($79)]=46;
      var $80=$size_addr;
      var $dec133=(($80-1)|0);
      $size_addr=$dec133;
      __label__ = 67; break;
    case 67: 
      var $81=HEAP32[(($exp_b10)>>2)];
      var $dec135=(($81-1)|0);
      HEAP32[(($exp_b10)>>2)]=$dec135;
      __label__ = 68; break;
    case 68: 
      var $82=(tempDoubleI32[0]=HEAP32[(($d)>>2)],tempDoubleI32[1]=HEAP32[(($d+4)>>2)],tempDoubleF64[0]);
      var $conv137=(($82)&-1);
      var $add138=(($conv137+48)|0);
      var $conv139=(($add138) & 255);
      var $83=$ascii_addr;
      var $incdec_ptr140=(($83+1)|0);
      $ascii_addr=$incdec_ptr140;
      HEAP8[($83)]=$conv139;
      var $84=$cdigits;
      var $inc141=(($84+1)|0);
      $cdigits=$inc141;
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $85=$cdigits;
      var $86=$czero;
      var $add143=(($85+$86)|0);
      var $87=$clead;
      var $sub144=(($add143-$87)|0);
      var $88=$precision_addr;
      var $cmp145=(($sub144)|0) < (($88)|0);
      if ($cmp145) { __label__ = 71; break; } else { var $90 = 0;__label__ = 72; break; }
    case 71: 
      var $89=$fp_addr;
      var $cmp148=$89 > 2.2250738585072014e-308;
      var $90 = $cmp148;__label__ = 72; break;
    case 72: 
      var $90;
      if ($90) { __label__ = 26; break; } else { __label__ = 73; break; }
    case 73: 
      var $91=HEAP32[(($exp_b10)>>2)];
      var $cmp151=(($91)|0) >= -1;
      if ($cmp151) { __label__ = 74; break; } else { __label__ = 79; break; }
    case 74: 
      var $92=HEAP32[(($exp_b10)>>2)];
      var $cmp154=(($92)|0) <= 2;
      if ($cmp154) { __label__ = 75; break; } else { __label__ = 79; break; }
    case 75: 
      __label__ = 76; break;
    case 76: 
      var $93=HEAP32[(($exp_b10)>>2)];
      var $dec158=(($93-1)|0);
      HEAP32[(($exp_b10)>>2)]=$dec158;
      var $cmp159=(($dec158)|0) >= 0;
      if ($cmp159) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $94=$ascii_addr;
      var $incdec_ptr162=(($94+1)|0);
      $ascii_addr=$incdec_ptr162;
      HEAP8[($94)]=48;
      __label__ = 76; break;
    case 78: 
      var $95=$ascii_addr;
      HEAP8[($95)]=0;
      __label__ = 96; break;
    case 79: 
      var $96=$cdigits;
      var $97=$size_addr;
      var $sub165=(($97-$96)|0);
      $size_addr=$sub165;
      var $98=$ascii_addr;
      var $incdec_ptr166=(($98+1)|0);
      $ascii_addr=$incdec_ptr166;
      HEAP8[($98)]=69;
      var $99=$size_addr;
      var $dec167=(($99-1)|0);
      $size_addr=$dec167;
      var $100=HEAP32[(($exp_b10)>>2)];
      var $cmp168=(($100)|0) < 0;
      if ($cmp168) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $101=$ascii_addr;
      var $incdec_ptr171=(($101+1)|0);
      $ascii_addr=$incdec_ptr171;
      HEAP8[($101)]=45;
      var $102=$size_addr;
      var $dec172=(($102-1)|0);
      $size_addr=$dec172;
      var $103=HEAP32[(($exp_b10)>>2)];
      var $sub173=(((-$103))|0);
      $uexp_b10=$sub173;
      __label__ = 82; break;
    case 81: 
      var $104=HEAP32[(($exp_b10)>>2)];
      $uexp_b10=$104;
      __label__ = 82; break;
    case 82: 
      $cdigits=0;
      __label__ = 83; break;
    case 83: 
      var $105=$uexp_b10;
      var $cmp177=(($105)>>>0) > 0;
      if ($cmp177) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $106=$uexp_b10;
      var $rem=(($106)>>>0)%10;
      var $add180=(($rem+48)|0);
      var $conv181=(($add180) & 255);
      var $107=$cdigits;
      var $inc182=(($107+1)|0);
      $cdigits=$inc182;
      var $arrayidx=(($exponent+$107)|0);
      HEAP8[($arrayidx)]=$conv181;
      var $108=$uexp_b10;
      var $div183=Math.floor((($108)>>>0)/10);
      $uexp_b10=$div183;
      __label__ = 83; break;
    case 85: 
      var $109=$size_addr;
      var $110=$cdigits;
      var $cmp185=(($109)|0) > (($110)|0);
      if ($cmp185) { __label__ = 86; break; } else { __label__ = 90; break; }
    case 86: 
      __label__ = 87; break;
    case 87: 
      var $111=$cdigits;
      var $cmp189=(($111)|0) > 0;
      if ($cmp189) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      var $112=$cdigits;
      var $dec192=(($112-1)|0);
      $cdigits=$dec192;
      var $arrayidx193=(($exponent+$dec192)|0);
      var $113=HEAP8[($arrayidx193)];
      var $114=$ascii_addr;
      var $incdec_ptr194=(($114+1)|0);
      $ascii_addr=$incdec_ptr194;
      HEAP8[($114)]=$113;
      __label__ = 87; break;
    case 89: 
      var $115=$ascii_addr;
      HEAP8[($115)]=0;
      __label__ = 96; break;
    case 90: 
      __label__ = 94; break;
    case 91: 
      var $116=$fp_addr;
      var $cmp198=$116 >= 2.2250738585072014e-308;
      if ($cmp198) { __label__ = 93; break; } else { __label__ = 92; break; }
    case 92: 
      var $117=$ascii_addr;
      var $incdec_ptr201=(($117+1)|0);
      $ascii_addr=$incdec_ptr201;
      HEAP8[($117)]=48;
      var $118=$ascii_addr;
      HEAP8[($118)]=0;
      __label__ = 96; break;
    case 93: 
      var $119=$ascii_addr;
      var $incdec_ptr203=(($119+1)|0);
      $ascii_addr=$incdec_ptr203;
      HEAP8[($119)]=105;
      var $120=$ascii_addr;
      var $incdec_ptr204=(($120+1)|0);
      $ascii_addr=$incdec_ptr204;
      HEAP8[($120)]=110;
      var $121=$ascii_addr;
      var $incdec_ptr205=(($121+1)|0);
      $ascii_addr=$incdec_ptr205;
      HEAP8[($121)]=102;
      var $122=$ascii_addr;
      HEAP8[($122)]=0;
      __label__ = 96; break;
    case 94: 
      __label__ = 95; break;
    case 95: 
      var $123=$png_ptr_addr;
      _png_error($123, ((STRING_TABLE.__str34313)|0));
      __label__ = 96; break;
    case 96: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_ascii_from_fp["X"]=1;

function _png_reciprocal2($a, $b) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $a_addr;
      var $b_addr;
      var $r;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr;
      var $conv=(($0)|0);
      var $div=1000000000000000/$conv;
      $r=$div;
      var $1=$b_addr;
      var $conv1=(($1)|0);
      var $2=$r;
      var $div2=$2/$conv1;
      $r=$div2;
      var $3=$r;
      var $add=$3+0.5;
      var $call=_floor($add);
      $r=$call;
      var $4=$r;
      var $cmp=$4 <= 2147483647;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $5=$r;
      var $cmp4=$5 >= -2147483648;
      if ($cmp4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$r;
      var $conv6=(($6)&-1);
      $retval=$conv6;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $7=$retval;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_gamma_8bit_correct($value, $gamma_val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $value_addr;
      var $gamma_val_addr;
      var $r;
      $value_addr=$value;
      $gamma_val_addr=$gamma_val;
      var $0=$value_addr;
      var $cmp=(($0)>>>0) > 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $1=$value_addr;
      var $cmp1=(($1)>>>0) < 255;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$value_addr;
      var $conv=(($2)>>>0);
      var $div=$conv/255;
      var $3=$gamma_val_addr;
      var $conv2=(($3)|0);
      var $mul=$conv2*0.00001;
      var $4=_llvm_pow_f64($div, $mul);
      var $mul3=$4*255;
      var $add=$mul3+0.5;
      var $call=_floor($add);
      $r=$call;
      var $5=$r;
      var $conv4=($5 >= 0 ? Math.floor($5) : Math.ceil($5));
      $retval=$conv4;
      __label__ = 5; break;
    case 4: 
      var $6=$value_addr;
      var $conv5=(($6) & 255);
      $retval=$conv5;
      __label__ = 5; break;
    case 5: 
      var $7=$retval;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_gamma_16bit_correct($value, $gamma_val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $value_addr;
      var $gamma_val_addr;
      var $r;
      $value_addr=$value;
      $gamma_val_addr=$gamma_val;
      var $0=$value_addr;
      var $cmp=(($0)>>>0) > 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $1=$value_addr;
      var $cmp1=(($1)>>>0) < 65535;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$value_addr;
      var $conv=(($2)>>>0);
      var $div=$conv/65535;
      var $3=$gamma_val_addr;
      var $conv2=(($3)|0);
      var $mul=$conv2*0.00001;
      var $4=_llvm_pow_f64($div, $mul);
      var $mul3=$4*65535;
      var $add=$mul3+0.5;
      var $call=_floor($add);
      $r=$call;
      var $5=$r;
      var $conv4=($5 >= 0 ? Math.floor($5) : Math.ceil($5));
      $retval=$conv4;
      __label__ = 5; break;
    case 4: 
      var $6=$value_addr;
      var $conv5=(($6) & 65535);
      $retval=$conv5;
      __label__ = 5; break;
    case 5: 
      var $7=$retval;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_gamma_correct($png_ptr, $value, $gamma_val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $value_addr;
      var $gamma_val_addr;
      $png_ptr_addr=$png_ptr;
      $value_addr=$value;
      $gamma_val_addr=$gamma_val;
      var $0=$png_ptr_addr;
      var $bit_depth=(($0+292)|0);
      var $1=HEAPU8[($bit_depth)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$value_addr;
      var $3=$gamma_val_addr;
      var $call=_png_gamma_8bit_correct($2, $3);
      var $conv2=(($call)&255);
      $retval=$conv2;
      __label__ = 4; break;
    case 3: 
      var $4=$value_addr;
      var $5=$gamma_val_addr;
      var $call3=_png_gamma_16bit_correct($4, $5);
      $retval=$call3;
      __label__ = 4; break;
    case 4: 
      var $6=$retval;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_destroy_gamma_table($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $i;
      var $istop;
      var $i10;
      var $istop11;
      var $i28;
      var $istop29;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $1=$png_ptr_addr;
      var $gamma_table=(($1+360)|0);
      var $2=HEAP32[(($gamma_table)>>2)];
      _png_free($0, $2);
      var $3=$png_ptr_addr;
      var $gamma_table1=(($3+360)|0);
      HEAP32[(($gamma_table1)>>2)]=0;
      var $4=$png_ptr_addr;
      var $gamma_16_table=(($4+364)|0);
      var $5=HEAP32[(($gamma_16_table)>>2)];
      var $cmp=(($5)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $6=$png_ptr_addr;
      var $gamma_shift=(($6+348)|0);
      var $7=HEAP32[(($gamma_shift)>>2)];
      var $sub=((8-$7)|0);
      var $shl=1 << $sub;
      $istop=$shl;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $8=$i;
      var $9=$istop;
      var $cmp2=(($8)|0) < (($9)|0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $10=$png_ptr_addr;
      var $11=$i;
      var $12=$png_ptr_addr;
      var $gamma_16_table3=(($12+364)|0);
      var $13=HEAP32[(($gamma_16_table3)>>2)];
      var $arrayidx=(($13+($11<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      var $15=$14;
      _png_free($10, $15);
      __label__ = 5; break;
    case 5: 
      var $16=$i;
      var $inc=(($16+1)|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      var $17=$png_ptr_addr;
      var $18=$png_ptr_addr;
      var $gamma_16_table4=(($18+364)|0);
      var $19=HEAP32[(($gamma_16_table4)>>2)];
      var $20=$19;
      _png_free($17, $20);
      var $21=$png_ptr_addr;
      var $gamma_16_table5=(($21+364)|0);
      HEAP32[(($gamma_16_table5)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      var $22=$png_ptr_addr;
      var $23=$png_ptr_addr;
      var $gamma_from_1=(($23+368)|0);
      var $24=HEAP32[(($gamma_from_1)>>2)];
      _png_free($22, $24);
      var $25=$png_ptr_addr;
      var $gamma_from_16=(($25+368)|0);
      HEAP32[(($gamma_from_16)>>2)]=0;
      var $26=$png_ptr_addr;
      var $27=$png_ptr_addr;
      var $gamma_to_1=(($27+372)|0);
      var $28=HEAP32[(($gamma_to_1)>>2)];
      _png_free($26, $28);
      var $29=$png_ptr_addr;
      var $gamma_to_17=(($29+372)|0);
      HEAP32[(($gamma_to_17)>>2)]=0;
      var $30=$png_ptr_addr;
      var $gamma_16_from_1=(($30+376)|0);
      var $31=HEAP32[(($gamma_16_from_1)>>2)];
      var $cmp8=(($31)|0)!=0;
      if ($cmp8) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: 
      var $32=$png_ptr_addr;
      var $gamma_shift12=(($32+348)|0);
      var $33=HEAP32[(($gamma_shift12)>>2)];
      var $sub13=((8-$33)|0);
      var $shl14=1 << $sub13;
      $istop11=$shl14;
      $i10=0;
      __label__ = 9; break;
    case 9: 
      var $34=$i10;
      var $35=$istop11;
      var $cmp16=(($34)|0) < (($35)|0);
      if ($cmp16) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $36=$png_ptr_addr;
      var $37=$i10;
      var $38=$png_ptr_addr;
      var $gamma_16_from_118=(($38+376)|0);
      var $39=HEAP32[(($gamma_16_from_118)>>2)];
      var $arrayidx19=(($39+($37<<2))|0);
      var $40=HEAP32[(($arrayidx19)>>2)];
      var $41=$40;
      _png_free($36, $41);
      __label__ = 11; break;
    case 11: 
      var $42=$i10;
      var $inc21=(($42+1)|0);
      $i10=$inc21;
      __label__ = 9; break;
    case 12: 
      var $43=$png_ptr_addr;
      var $44=$png_ptr_addr;
      var $gamma_16_from_123=(($44+376)|0);
      var $45=HEAP32[(($gamma_16_from_123)>>2)];
      var $46=$45;
      _png_free($43, $46);
      var $47=$png_ptr_addr;
      var $gamma_16_from_124=(($47+376)|0);
      HEAP32[(($gamma_16_from_124)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      var $48=$png_ptr_addr;
      var $gamma_16_to_1=(($48+380)|0);
      var $49=HEAP32[(($gamma_16_to_1)>>2)];
      var $cmp26=(($49)|0)!=0;
      if ($cmp26) { __label__ = 14; break; } else { __label__ = 19; break; }
    case 14: 
      var $50=$png_ptr_addr;
      var $gamma_shift30=(($50+348)|0);
      var $51=HEAP32[(($gamma_shift30)>>2)];
      var $sub31=((8-$51)|0);
      var $shl32=1 << $sub31;
      $istop29=$shl32;
      $i28=0;
      __label__ = 15; break;
    case 15: 
      var $52=$i28;
      var $53=$istop29;
      var $cmp34=(($52)|0) < (($53)|0);
      if ($cmp34) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $54=$png_ptr_addr;
      var $55=$i28;
      var $56=$png_ptr_addr;
      var $gamma_16_to_136=(($56+380)|0);
      var $57=HEAP32[(($gamma_16_to_136)>>2)];
      var $arrayidx37=(($57+($55<<2))|0);
      var $58=HEAP32[(($arrayidx37)>>2)];
      var $59=$58;
      _png_free($54, $59);
      __label__ = 17; break;
    case 17: 
      var $60=$i28;
      var $inc39=(($60+1)|0);
      $i28=$inc39;
      __label__ = 15; break;
    case 18: 
      var $61=$png_ptr_addr;
      var $62=$png_ptr_addr;
      var $gamma_16_to_141=(($62+380)|0);
      var $63=HEAP32[(($gamma_16_to_141)>>2)];
      var $64=$63;
      _png_free($61, $64);
      var $65=$png_ptr_addr;
      var $gamma_16_to_142=(($65+380)|0);
      HEAP32[(($gamma_16_to_142)>>2)]=0;
      __label__ = 19; break;
    case 19: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_destroy_gamma_table["X"]=1;

function _png_build_gamma_table($png_ptr, $bit_depth) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $bit_depth_addr;
      var $shift;
      var $sig_bit;
      $png_ptr_addr=$png_ptr;
      $bit_depth_addr=$bit_depth;
      var $0=$png_ptr_addr;
      var $gamma_table=(($0+360)|0);
      var $1=HEAP32[(($gamma_table)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $gamma_16_table=(($2+364)|0);
      var $3=HEAP32[(($gamma_16_table)>>2)];
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$png_ptr_addr;
      _png_warning($4, ((STRING_TABLE.__str36315)|0));
      var $5=$png_ptr_addr;
      _png_destroy_gamma_table($5);
      __label__ = 4; break;
    case 4: 
      var $6=$bit_depth_addr;
      var $cmp2=(($6)|0) <= 8;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 14; break; }
    case 5: 
      var $7=$png_ptr_addr;
      var $8=$png_ptr_addr;
      var $gamma_table4=(($8+360)|0);
      var $9=$png_ptr_addr;
      var $screen_gamma=(($9+356)|0);
      var $10=HEAP32[(($screen_gamma)>>2)];
      var $cmp5=(($10)|0) > 0;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $11=$png_ptr_addr;
      var $gamma=(($11+352)|0);
      var $12=HEAP32[(($gamma)>>2)];
      var $13=$png_ptr_addr;
      var $screen_gamma6=(($13+356)|0);
      var $14=HEAP32[(($screen_gamma6)>>2)];
      var $call=_png_reciprocal2($12, $14);
      var $cond = $call;__label__ = 8; break;
    case 7: 
      var $cond = 100000;__label__ = 8; break;
    case 8: 
      var $cond;
      _png_build_8bit_table($7, $gamma_table4, $cond);
      var $15=$png_ptr_addr;
      var $transformations=(($15+92)|0);
      var $16=HEAP32[(($transformations)>>2)];
      var $and=$16 & 6291584;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $17=$png_ptr_addr;
      var $18=$png_ptr_addr;
      var $gamma_to_1=(($18+372)|0);
      var $19=$png_ptr_addr;
      var $gamma8=(($19+352)|0);
      var $20=HEAP32[(($gamma8)>>2)];
      var $call9=_png_reciprocal($20);
      _png_build_8bit_table($17, $gamma_to_1, $call9);
      var $21=$png_ptr_addr;
      var $22=$png_ptr_addr;
      var $gamma_from_1=(($22+368)|0);
      var $23=$png_ptr_addr;
      var $screen_gamma10=(($23+356)|0);
      var $24=HEAP32[(($screen_gamma10)>>2)];
      var $cmp11=(($24)|0) > 0;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $25=$png_ptr_addr;
      var $screen_gamma13=(($25+356)|0);
      var $26=HEAP32[(($screen_gamma13)>>2)];
      var $call14=_png_reciprocal($26);
      var $cond18 = $call14;__label__ = 12; break;
    case 11: 
      var $27=$png_ptr_addr;
      var $gamma16=(($27+352)|0);
      var $28=HEAP32[(($gamma16)>>2)];
      var $cond18 = $28;__label__ = 12; break;
    case 12: 
      var $cond18;
      _png_build_8bit_table($21, $gamma_from_1, $cond18);
      __label__ = 13; break;
    case 13: 
      __label__ = 46; break;
    case 14: 
      var $29=$png_ptr_addr;
      var $color_type=(($29+291)|0);
      var $30=HEAPU8[($color_type)];
      var $conv=(($30)&255);
      var $and20=$conv & 2;
      var $tobool21=(($and20)|0)!=0;
      if ($tobool21) { __label__ = 15; break; } else { __label__ = 20; break; }
    case 15: 
      var $31=$png_ptr_addr;
      var $sig_bit23=(($31+384)|0);
      var $red=(($sig_bit23)|0);
      var $32=HEAP8[($red)];
      $sig_bit=$32;
      var $33=$png_ptr_addr;
      var $sig_bit24=(($33+384)|0);
      var $green=(($sig_bit24+1)|0);
      var $34=HEAPU8[($green)];
      var $conv25=(($34)&255);
      var $35=$sig_bit;
      var $conv26=(($35)&255);
      var $cmp27=(($conv25)|0) > (($conv26)|0);
      if ($cmp27) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $36=$png_ptr_addr;
      var $sig_bit30=(($36+384)|0);
      var $green31=(($sig_bit30+1)|0);
      var $37=HEAP8[($green31)];
      $sig_bit=$37;
      __label__ = 17; break;
    case 17: 
      var $38=$png_ptr_addr;
      var $sig_bit33=(($38+384)|0);
      var $blue=(($sig_bit33+2)|0);
      var $39=HEAPU8[($blue)];
      var $conv34=(($39)&255);
      var $40=$sig_bit;
      var $conv35=(($40)&255);
      var $cmp36=(($conv34)|0) > (($conv35)|0);
      if ($cmp36) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $41=$png_ptr_addr;
      var $sig_bit39=(($41+384)|0);
      var $blue40=(($sig_bit39+2)|0);
      var $42=HEAP8[($blue40)];
      $sig_bit=$42;
      __label__ = 19; break;
    case 19: 
      __label__ = 21; break;
    case 20: 
      var $43=$png_ptr_addr;
      var $sig_bit43=(($43+384)|0);
      var $gray=(($sig_bit43+3)|0);
      var $44=HEAP8[($gray)];
      $sig_bit=$44;
      __label__ = 21; break;
    case 21: 
      var $45=$sig_bit;
      var $conv45=(($45)&255);
      var $cmp46=(($conv45)|0) > 0;
      if ($cmp46) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $46=$sig_bit;
      var $conv48=(($46)&255);
      var $cmp49=(($conv48)>>>0) < 16;
      if ($cmp49) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $47=$sig_bit;
      var $conv52=(($47)&255);
      var $sub=((16-$conv52)|0);
      var $conv53=(($sub) & 255);
      $shift=$conv53;
      __label__ = 25; break;
    case 24: 
      $shift=0;
      __label__ = 25; break;
    case 25: 
      var $48=$png_ptr_addr;
      var $transformations56=(($48+92)|0);
      var $49=HEAP32[(($transformations56)>>2)];
      var $and57=$49 & 67109888;
      var $tobool58=(($and57)|0)!=0;
      if ($tobool58) { __label__ = 26; break; } else { __label__ = 29; break; }
    case 26: 
      var $50=$shift;
      var $conv60=(($50)&255);
      var $cmp61=(($conv60)>>>0) < 5;
      if ($cmp61) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      $shift=5;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $51=$shift;
      var $conv66=(($51)&255);
      var $cmp67=(($conv66)>>>0) > 8;
      if ($cmp67) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      $shift=8;
      __label__ = 31; break;
    case 31: 
      var $52=$shift;
      var $conv71=(($52)&255);
      var $53=$png_ptr_addr;
      var $gamma_shift=(($53+348)|0);
      HEAP32[(($gamma_shift)>>2)]=$conv71;
      var $54=$png_ptr_addr;
      var $transformations72=(($54+92)|0);
      var $55=HEAP32[(($transformations72)>>2)];
      var $and73=$55 & 67109888;
      var $tobool74=(($and73)|0)!=0;
      if ($tobool74) { __label__ = 32; break; } else { __label__ = 36; break; }
    case 32: 
      var $56=$png_ptr_addr;
      var $57=$png_ptr_addr;
      var $gamma_16_table76=(($57+364)|0);
      var $58=$shift;
      var $conv77=(($58)&255);
      var $59=$png_ptr_addr;
      var $screen_gamma78=(($59+356)|0);
      var $60=HEAP32[(($screen_gamma78)>>2)];
      var $cmp79=(($60)|0) > 0;
      if ($cmp79) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $61=$png_ptr_addr;
      var $gamma82=(($61+352)|0);
      var $62=HEAP32[(($gamma82)>>2)];
      var $63=$png_ptr_addr;
      var $screen_gamma83=(($63+356)|0);
      var $64=HEAP32[(($screen_gamma83)>>2)];
      var $call84=_png_product2($62, $64);
      var $cond87 = $call84;__label__ = 35; break;
    case 34: 
      var $cond87 = 100000;__label__ = 35; break;
    case 35: 
      var $cond87;
      _png_build_16to8_table($56, $gamma_16_table76, $conv77, $cond87);
      __label__ = 40; break;
    case 36: 
      var $65=$png_ptr_addr;
      var $66=$png_ptr_addr;
      var $gamma_16_table89=(($66+364)|0);
      var $67=$shift;
      var $conv90=(($67)&255);
      var $68=$png_ptr_addr;
      var $screen_gamma91=(($68+356)|0);
      var $69=HEAP32[(($screen_gamma91)>>2)];
      var $cmp92=(($69)|0) > 0;
      if ($cmp92) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $70=$png_ptr_addr;
      var $gamma95=(($70+352)|0);
      var $71=HEAP32[(($gamma95)>>2)];
      var $72=$png_ptr_addr;
      var $screen_gamma96=(($72+356)|0);
      var $73=HEAP32[(($screen_gamma96)>>2)];
      var $call97=_png_reciprocal2($71, $73);
      var $cond100 = $call97;__label__ = 39; break;
    case 38: 
      var $cond100 = 100000;__label__ = 39; break;
    case 39: 
      var $cond100;
      _png_build_16bit_table($65, $gamma_16_table89, $conv90, $cond100);
      __label__ = 40; break;
    case 40: 
      var $74=$png_ptr_addr;
      var $transformations102=(($74+92)|0);
      var $75=HEAP32[(($transformations102)>>2)];
      var $and103=$75 & 6291584;
      var $tobool104=(($and103)|0)!=0;
      if ($tobool104) { __label__ = 41; break; } else { __label__ = 45; break; }
    case 41: 
      var $76=$png_ptr_addr;
      var $77=$png_ptr_addr;
      var $gamma_16_to_1=(($77+380)|0);
      var $78=$shift;
      var $conv106=(($78)&255);
      var $79=$png_ptr_addr;
      var $gamma107=(($79+352)|0);
      var $80=HEAP32[(($gamma107)>>2)];
      var $call108=_png_reciprocal($80);
      _png_build_16bit_table($76, $gamma_16_to_1, $conv106, $call108);
      var $81=$png_ptr_addr;
      var $82=$png_ptr_addr;
      var $gamma_16_from_1=(($82+376)|0);
      var $83=$shift;
      var $conv109=(($83)&255);
      var $84=$png_ptr_addr;
      var $screen_gamma110=(($84+356)|0);
      var $85=HEAP32[(($screen_gamma110)>>2)];
      var $cmp111=(($85)|0) > 0;
      if ($cmp111) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $86=$png_ptr_addr;
      var $screen_gamma114=(($86+356)|0);
      var $87=HEAP32[(($screen_gamma114)>>2)];
      var $call115=_png_reciprocal($87);
      var $cond119 = $call115;__label__ = 44; break;
    case 43: 
      var $88=$png_ptr_addr;
      var $gamma117=(($88+352)|0);
      var $89=HEAP32[(($gamma117)>>2)];
      var $cond119 = $89;__label__ = 44; break;
    case 44: 
      var $cond119;
      _png_build_16bit_table($81, $gamma_16_from_1, $conv109, $cond119);
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_build_gamma_table["X"]=1;

function _png_build_8bit_table($png_ptr, $ptable, $gamma_val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ptable_addr;
      var $gamma_val_addr;
      var $i;
      var $table;
      $png_ptr_addr=$png_ptr;
      $ptable_addr=$ptable;
      $gamma_val_addr=$gamma_val;
      var $0=$png_ptr_addr;
      var $call=_png_malloc($0, 256);
      var $1=$ptable_addr;
      HEAP32[(($1)>>2)]=$call;
      $table=$call;
      var $2=$gamma_val_addr;
      var $call1=_png_gamma_significant($2);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $3=$i;
      var $cmp=(($3)>>>0) < 256;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$i;
      var $5=$gamma_val_addr;
      var $call2=_png_gamma_8bit_correct($4, $5);
      var $6=$i;
      var $7=$table;
      var $arrayidx=(($7+$6)|0);
      HEAP8[($arrayidx)]=$call2;
      __label__ = 5; break;
    case 5: 
      var $8=$i;
      var $inc=(($8+1)|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      __label__ = 12; break;
    case 7: 
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $9=$i;
      var $cmp4=(($9)>>>0) < 256;
      if ($cmp4) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $10=$i;
      var $conv=(($10) & 255);
      var $11=$i;
      var $12=$table;
      var $arrayidx6=(($12+$11)|0);
      HEAP8[($arrayidx6)]=$conv;
      __label__ = 10; break;
    case 10: 
      var $13=$i;
      var $inc8=(($13+1)|0);
      $i=$inc8;
      __label__ = 8; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_build_8bit_table["X"]=1;

function _png_build_16to8_table($png_ptr, $ptable, $shift, $gamma_val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ptable_addr;
      var $shift_addr;
      var $gamma_val_addr;
      var $num;
      var $max;
      var $i;
      var $last;
      var $table;
      var $out;
      var $bound;
      $png_ptr_addr=$png_ptr;
      $ptable_addr=$ptable;
      $shift_addr=$shift;
      $gamma_val_addr=$gamma_val;
      var $0=$shift_addr;
      var $sub=((8-$0)|0);
      var $shl=1 << $sub;
      $num=$shl;
      var $1=$shift_addr;
      var $sub1=((16-$1)|0);
      var $shl2=1 << $sub1;
      var $sub3=(($shl2-1)|0);
      $max=$sub3;
      var $2=$png_ptr_addr;
      var $3=$num;
      var $mul=((($3<<2))|0);
      var $call=_png_calloc($2, $mul);
      var $4=$call;
      var $5=$ptable_addr;
      HEAP32[(($5)>>2)]=$4;
      $table=$4;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $6=$i;
      var $7=$num;
      var $cmp=(($6)>>>0) < (($7)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $8=$png_ptr_addr;
      var $call4=_png_malloc($8, 512);
      var $9=$call4;
      var $10=$i;
      var $11=$table;
      var $arrayidx=(($11+($10<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$9;
      __label__ = 4; break;
    case 4: 
      var $12=$i;
      var $inc=(($12+1)|0);
      $i=$inc;
      __label__ = 2; break;
    case 5: 
      $last=0;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $13=$i;
      var $cmp6=(($13)>>>0) < 255;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $14=$i;
      var $mul8=(($14*257)|0);
      var $conv=(($mul8) & 65535);
      $out=$conv;
      var $15=$out;
      var $conv9=(($15)&65535);
      var $add=(($conv9+128)|0);
      var $16=$gamma_val_addr;
      var $call10=_png_gamma_16bit_correct($add, $16);
      var $conv11=(($call10)&65535);
      $bound=$conv11;
      var $17=$bound;
      var $18=$max;
      var $mul12=(($17*$18)|0);
      var $add13=(($mul12+32768)|0);
      var $div=Math.floor((($add13)>>>0)/65535);
      var $add14=(($div+1)|0);
      $bound=$add14;
      __label__ = 8; break;
    case 8: 
      var $19=$last;
      var $20=$bound;
      var $cmp15=(($19)>>>0) < (($20)>>>0);
      if ($cmp15) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $21=$out;
      var $22=$last;
      var $23=$shift_addr;
      var $sub17=((8-$23)|0);
      var $shr=$22 >>> (($sub17)>>>0);
      var $24=$last;
      var $25=$shift_addr;
      var $shr18=255 >>> (($25)>>>0);
      var $and=$24 & $shr18;
      var $26=$table;
      var $arrayidx19=(($26+($and<<2))|0);
      var $27=HEAP32[(($arrayidx19)>>2)];
      var $arrayidx20=(($27+($shr<<1))|0);
      HEAP16[(($arrayidx20)>>1)]=$21;
      var $28=$last;
      var $inc21=(($28+1)|0);
      $last=$inc21;
      __label__ = 8; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $29=$i;
      var $inc23=(($29+1)|0);
      $i=$inc23;
      __label__ = 6; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $30=$last;
      var $31=$num;
      var $shl26=$31 << 8;
      var $cmp27=(($30)>>>0) < (($shl26)>>>0);
      if ($cmp27) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $32=$last;
      var $33=$shift_addr;
      var $sub30=((8-$33)|0);
      var $shr31=$32 >>> (($sub30)>>>0);
      var $34=$last;
      var $35=$shift_addr;
      var $shr32=255 >> (($35)|0);
      var $and33=$34 & $shr32;
      var $36=$table;
      var $arrayidx34=(($36+($and33<<2))|0);
      var $37=HEAP32[(($arrayidx34)>>2)];
      var $arrayidx35=(($37+($shr31<<1))|0);
      HEAP16[(($arrayidx35)>>1)]=-1;
      var $38=$last;
      var $inc36=(($38+1)|0);
      $last=$inc36;
      __label__ = 13; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_build_16to8_table["X"]=1;

function _png_product2($a, $b) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $a_addr;
      var $b_addr;
      var $r;
      $a_addr=$a;
      $b_addr=$b;
      var $0=$a_addr;
      var $conv=(($0)|0);
      var $mul=$conv*0.00001;
      $r=$mul;
      var $1=$b_addr;
      var $conv1=(($1)|0);
      var $2=$r;
      var $mul2=$2*$conv1;
      $r=$mul2;
      var $3=$r;
      var $add=$3+0.5;
      var $call=_floor($add);
      $r=$call;
      var $4=$r;
      var $cmp=$4 <= 2147483647;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $5=$r;
      var $cmp4=$5 >= -2147483648;
      if ($cmp4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$r;
      var $conv6=(($6)&-1);
      $retval=$conv6;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $7=$retval;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_build_16bit_table($png_ptr, $ptable, $shift, $gamma_val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ptable_addr;
      var $shift_addr;
      var $gamma_val_addr;
      var $num;
      var $max;
      var $max_by_2;
      var $i;
      var $table;
      var $sub_table;
      var $j;
      var $ig;
      var $d;
      var $j21;
      var $ig26;
      $png_ptr_addr=$png_ptr;
      $ptable_addr=$ptable;
      $shift_addr=$shift;
      $gamma_val_addr=$gamma_val;
      var $0=$shift_addr;
      var $sub=((8-$0)|0);
      var $shl=1 << $sub;
      $num=$shl;
      var $1=$shift_addr;
      var $sub1=((16-$1)|0);
      var $shl2=1 << $sub1;
      var $sub3=(($shl2-1)|0);
      $max=$sub3;
      var $2=$shift_addr;
      var $sub4=((15-$2)|0);
      var $shl5=1 << $sub4;
      $max_by_2=$shl5;
      var $3=$png_ptr_addr;
      var $4=$num;
      var $mul=((($4<<2))|0);
      var $call=_png_calloc($3, $mul);
      var $5=$call;
      var $6=$ptable_addr;
      HEAP32[(($6)>>2)]=$5;
      $table=$5;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $7=$i;
      var $8=$num;
      var $cmp=(($7)>>>0) < (($8)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 18; break; }
    case 3: 
      var $9=$png_ptr_addr;
      var $call6=_png_malloc($9, 512);
      var $10=$call6;
      var $11=$i;
      var $12=$table;
      var $arrayidx=(($12+($11<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$10;
      $sub_table=$10;
      var $13=$gamma_val_addr;
      var $call7=_png_gamma_significant($13);
      var $tobool=(($call7)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      $j=0;
      __label__ = 5; break;
    case 5: 
      var $14=$j;
      var $cmp9=(($14)>>>0) < 256;
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $15=$j;
      var $16=$shift_addr;
      var $sub11=((8-$16)|0);
      var $shl12=$15 << $sub11;
      var $17=$i;
      var $add=(($shl12+$17)|0);
      $ig=$add;
      var $18=$ig;
      var $conv=(($18)>>>0);
      var $19=$max;
      var $conv13=(($19)>>>0);
      var $div=$conv/$conv13;
      var $20=$gamma_val_addr;
      var $conv14=(($20)|0);
      var $mul15=$conv14*0.00001;
      var $21=_llvm_pow_f64($div, $mul15);
      var $mul16=$21*65535;
      var $add17=$mul16+0.5;
      var $call18=_floor($add17);
      $d=$call18;
      var $22=$d;
      var $conv19=($22 >= 0 ? Math.floor($22) : Math.ceil($22));
      var $23=$j;
      var $24=$sub_table;
      var $arrayidx20=(($24+($23<<1))|0);
      HEAP16[(($arrayidx20)>>1)]=$conv19;
      __label__ = 7; break;
    case 7: 
      var $25=$j;
      var $inc=(($25+1)|0);
      $j=$inc;
      __label__ = 5; break;
    case 8: 
      __label__ = 16; break;
    case 9: 
      $j21=0;
      __label__ = 10; break;
    case 10: 
      var $26=$j21;
      var $cmp23=(($26)>>>0) < 256;
      if ($cmp23) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $27=$j21;
      var $28=$shift_addr;
      var $sub27=((8-$28)|0);
      var $shl28=$27 << $sub27;
      var $29=$i;
      var $add29=(($shl28+$29)|0);
      $ig26=$add29;
      var $30=$shift_addr;
      var $tobool30=(($30)|0)!=0;
      if ($tobool30) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $31=$ig26;
      var $mul32=(($31*65535)|0);
      var $32=$max_by_2;
      var $add33=(($mul32+$32)|0);
      var $33=$max;
      var $div34=Math.floor((($add33)>>>0)/(($33)>>>0));
      $ig26=$div34;
      __label__ = 13; break;
    case 13: 
      var $34=$ig26;
      var $conv35=(($34) & 65535);
      var $35=$j21;
      var $36=$sub_table;
      var $arrayidx36=(($36+($35<<1))|0);
      HEAP16[(($arrayidx36)>>1)]=$conv35;
      __label__ = 14; break;
    case 14: 
      var $37=$j21;
      var $inc38=(($37+1)|0);
      $j21=$inc38;
      __label__ = 10; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $38=$i;
      var $inc42=(($38+1)|0);
      $i=$inc42;
      __label__ = 2; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_build_16bit_table["X"]=1;

function _png_safecat($buffer, $bufsize, $pos, $string) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $buffer_addr;
      var $bufsize_addr;
      var $pos_addr;
      var $string_addr;
      $buffer_addr=$buffer;
      $bufsize_addr=$bufsize;
      $pos_addr=$pos;
      $string_addr=$string;
      var $0=$buffer_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      var $1=$pos_addr;
      var $2=$bufsize_addr;
      var $cmp1=(($1)>>>0) < (($2)>>>0);
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 11; break; }
    case 3: 
      var $3=$string_addr;
      var $cmp2=(($3)|0)!=0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $4=$string_addr;
      var $5=HEAP8[($4)];
      var $conv=(($5 << 24) >> 24);
      var $cmp4=(($conv)|0)!=0;
      if ($cmp4) { __label__ = 6; break; } else { var $8 = 0;__label__ = 7; break; }
    case 6: 
      var $6=$pos_addr;
      var $7=$bufsize_addr;
      var $sub=(($7-1)|0);
      var $cmp6=(($6)>>>0) < (($sub)>>>0);
      var $8 = $cmp6;__label__ = 7; break;
    case 7: 
      var $8;
      if ($8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $9=$string_addr;
      var $incdec_ptr=(($9+1)|0);
      $string_addr=$incdec_ptr;
      var $10=HEAP8[($9)];
      var $11=$pos_addr;
      var $inc=(($11+1)|0);
      $pos_addr=$inc;
      var $12=$buffer_addr;
      var $arrayidx=(($12+$11)|0);
      HEAP8[($arrayidx)]=$10;
      __label__ = 5; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $13=$pos_addr;
      var $14=$buffer_addr;
      var $arrayidx8=(($14+$13)|0);
      HEAP8[($arrayidx8)]=0;
      __label__ = 11; break;
    case 11: 
      var $15=$pos_addr;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_safecat["X"]=1;

function _png_format_number($start, $end, $format, $number) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $start_addr;
      var $end_addr;
      var $format_addr;
      var $number_addr;
      var $count;
      var $mincount;
      var $output;
      $start_addr=$start;
      $end_addr=$end;
      $format_addr=$format;
      $number_addr=$number;
      $count=0;
      $mincount=1;
      $output=0;
      var $0=$end_addr;
      var $incdec_ptr=(($0-1)|0);
      $end_addr=$incdec_ptr;
      HEAP8[($incdec_ptr)]=0;
      __label__ = 2; break;
    case 2: 
      var $1=$end_addr;
      var $2=$start_addr;
      var $cmp=(($1)>>>0) > (($2)>>>0);
      if ($cmp) { __label__ = 3; break; } else { var $7 = 0;__label__ = 6; break; }
    case 3: 
      var $3=$number_addr;
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { var $6 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $4=$count;
      var $5=$mincount;
      var $cmp2=(($4)|0) < (($5)|0);
      var $6 = $cmp2;__label__ = 5; break;
    case 5: 
      var $6;
      var $7 = $6;__label__ = 6; break;
    case 6: 
      var $7;
      if ($7) { __label__ = 7; break; } else { __label__ = 29; break; }
    case 7: 
      var $8=$format_addr;
      if ((($8)|0) == 5) {
        __label__ = 8; break;
      }
      else if ((($8)|0) == 2) {
        __label__ = 12; break;
      }
      else if ((($8)|0) == 1) {
        __label__ = 13; break;
      }
      else if ((($8)|0) == 4) {
        __label__ = 14; break;
      }
      else if ((($8)|0) == 3) {
        __label__ = 15; break;
      }
      else {
      __label__ = 16; break;
      }
      
    case 8: 
      $mincount=5;
      var $9=$output;
      var $tobool=(($9)|0)!=0;
      if ($tobool) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $10=$number_addr;
      var $rem=(($10)>>>0)%10;
      var $cmp3=(($rem)|0)!=0;
      if ($cmp3) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $11=$number_addr;
      var $rem4=(($11)>>>0)%10;
      var $arrayidx=((STRING_TABLE._png_format_number_digits+$rem4)|0);
      var $12=HEAP8[($arrayidx)];
      var $13=$end_addr;
      var $incdec_ptr5=(($13-1)|0);
      $end_addr=$incdec_ptr5;
      HEAP8[($incdec_ptr5)]=$12;
      $output=1;
      __label__ = 11; break;
    case 11: 
      var $14=$number_addr;
      var $div=Math.floor((($14)>>>0)/10);
      $number_addr=$div;
      __label__ = 17; break;
    case 12: 
      $mincount=2;
      __label__ = 13; break;
    case 13: 
      var $15=$number_addr;
      var $rem8=(($15)>>>0)%10;
      var $arrayidx9=((STRING_TABLE._png_format_number_digits+$rem8)|0);
      var $16=HEAP8[($arrayidx9)];
      var $17=$end_addr;
      var $incdec_ptr10=(($17-1)|0);
      $end_addr=$incdec_ptr10;
      HEAP8[($incdec_ptr10)]=$16;
      var $18=$number_addr;
      var $div11=Math.floor((($18)>>>0)/10);
      $number_addr=$div11;
      __label__ = 17; break;
    case 14: 
      $mincount=2;
      __label__ = 15; break;
    case 15: 
      var $19=$number_addr;
      var $and=$19 & 15;
      var $arrayidx14=((STRING_TABLE._png_format_number_digits+$and)|0);
      var $20=HEAP8[($arrayidx14)];
      var $21=$end_addr;
      var $incdec_ptr15=(($21-1)|0);
      $end_addr=$incdec_ptr15;
      HEAP8[($incdec_ptr15)]=$20;
      var $22=$number_addr;
      var $shr=$22 >>> 4;
      $number_addr=$shr;
      __label__ = 17; break;
    case 16: 
      $number_addr=0;
      __label__ = 17; break;
    case 17: 
      var $23=$count;
      var $inc=(($23+1)|0);
      $count=$inc;
      var $24=$format_addr;
      var $cmp16=(($24)|0)==5;
      if ($cmp16) { __label__ = 18; break; } else { __label__ = 28; break; }
    case 18: 
      var $25=$count;
      var $cmp18=(($25)|0)==5;
      if ($cmp18) { __label__ = 19; break; } else { __label__ = 27; break; }
    case 19: 
      var $26=$end_addr;
      var $27=$start_addr;
      var $cmp20=(($26)>>>0) > (($27)>>>0);
      if ($cmp20) { __label__ = 20; break; } else { __label__ = 26; break; }
    case 20: 
      var $28=$output;
      var $tobool22=(($28)|0)!=0;
      if ($tobool22) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $29=$end_addr;
      var $incdec_ptr24=(($29-1)|0);
      $end_addr=$incdec_ptr24;
      HEAP8[($incdec_ptr24)]=46;
      __label__ = 25; break;
    case 22: 
      var $30=$number_addr;
      var $cmp25=(($30)|0)==0;
      if ($cmp25) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $31=$end_addr;
      var $incdec_ptr27=(($31-1)|0);
      $end_addr=$incdec_ptr27;
      HEAP8[($incdec_ptr27)]=48;
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 2; break;
    case 29: 
      var $32=$end_addr;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_format_number["X"]=1;

function _png_format_buffer($png_ptr, $buffer, $error_message) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $buffer_addr;
      var $error_message_addr;
      var $chunk_name;
      var $iout;
      var $ishift;
      var $c;
      var $iin;
      $png_ptr_addr=$png_ptr;
      $buffer_addr=$buffer;
      $error_message_addr=$error_message;
      var $0=$png_ptr_addr;
      var $chunk_name1=(($0+232)|0);
      var $1=HEAP32[(($chunk_name1)>>2)];
      $chunk_name=$1;
      $iout=0;
      $ishift=24;
      __label__ = 2; break;
    case 2: 
      var $2=$ishift;
      var $cmp=(($2)|0) >= 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      var $3=$chunk_name;
      var $4=$ishift;
      var $shr=$3 >>> (($4)>>>0);
      var $and=$shr & 255;
      $c=$and;
      var $5=$ishift;
      var $sub=(($5-8)|0);
      $ishift=$sub;
      var $6=$c;
      var $cmp2=(($6)|0) < 65;
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $7=$c;
      var $cmp3=(($7)|0) > 122;
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $8=$c;
      var $cmp5=(($8)|0) > 90;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $9=$c;
      var $cmp6=(($9)|0) < 97;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $10=$iout;
      var $inc=(($10+1)|0);
      $iout=$inc;
      var $11=$buffer_addr;
      var $arrayidx=(($11+$10)|0);
      HEAP8[($arrayidx)]=91;
      var $12=$c;
      var $and7=$12 & 240;
      var $shr8=$and7 >> 4;
      var $arrayidx9=((STRING_TABLE._png_digit+$shr8)|0);
      var $13=HEAP8[($arrayidx9)];
      var $14=$iout;
      var $inc10=(($14+1)|0);
      $iout=$inc10;
      var $15=$buffer_addr;
      var $arrayidx11=(($15+$14)|0);
      HEAP8[($arrayidx11)]=$13;
      var $16=$c;
      var $and12=$16 & 15;
      var $arrayidx13=((STRING_TABLE._png_digit+$and12)|0);
      var $17=HEAP8[($arrayidx13)];
      var $18=$iout;
      var $inc14=(($18+1)|0);
      $iout=$inc14;
      var $19=$buffer_addr;
      var $arrayidx15=(($19+$18)|0);
      HEAP8[($arrayidx15)]=$17;
      var $20=$iout;
      var $inc16=(($20+1)|0);
      $iout=$inc16;
      var $21=$buffer_addr;
      var $arrayidx17=(($21+$20)|0);
      HEAP8[($arrayidx17)]=93;
      __label__ = 9; break;
    case 8: 
      var $22=$c;
      var $conv=(($22) & 255);
      var $23=$iout;
      var $inc18=(($23+1)|0);
      $iout=$inc18;
      var $24=$buffer_addr;
      var $arrayidx19=(($24+$23)|0);
      HEAP8[($arrayidx19)]=$conv;
      __label__ = 9; break;
    case 9: 
      __label__ = 2; break;
    case 10: 
      var $25=$error_message_addr;
      var $cmp20=(($25)|0)==0;
      if ($cmp20) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $26=$iout;
      var $27=$buffer_addr;
      var $arrayidx23=(($27+$26)|0);
      HEAP8[($arrayidx23)]=0;
      __label__ = 18; break;
    case 12: 
      $iin=0;
      var $28=$iout;
      var $inc25=(($28+1)|0);
      $iout=$inc25;
      var $29=$buffer_addr;
      var $arrayidx26=(($29+$28)|0);
      HEAP8[($arrayidx26)]=58;
      var $30=$iout;
      var $inc27=(($30+1)|0);
      $iout=$inc27;
      var $31=$buffer_addr;
      var $arrayidx28=(($31+$30)|0);
      HEAP8[($arrayidx28)]=32;
      __label__ = 13; break;
    case 13: 
      var $32=$iin;
      var $cmp30=(($32)|0) < 63;
      if ($cmp30) { __label__ = 14; break; } else { var $36 = 0;__label__ = 15; break; }
    case 14: 
      var $33=$iin;
      var $34=$error_message_addr;
      var $arrayidx32=(($34+$33)|0);
      var $35=HEAP8[($arrayidx32)];
      var $conv33=(($35 << 24) >> 24);
      var $cmp34=(($conv33)|0)!=0;
      var $36 = $cmp34;__label__ = 15; break;
    case 15: 
      var $36;
      if ($36) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $37=$iin;
      var $inc37=(($37+1)|0);
      $iin=$inc37;
      var $38=$error_message_addr;
      var $arrayidx38=(($38+$37)|0);
      var $39=HEAP8[($arrayidx38)];
      var $40=$iout;
      var $inc39=(($40+1)|0);
      $iout=$inc39;
      var $41=$buffer_addr;
      var $arrayidx40=(($41+$40)|0);
      HEAP8[($arrayidx40)]=$39;
      __label__ = 13; break;
    case 17: 
      var $42=$iout;
      var $43=$buffer_addr;
      var $arrayidx42=(($43+$42)|0);
      HEAP8[($arrayidx42)]=0;
      __label__ = 18; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_format_buffer["X"]=1;

function _png_error($png_ptr, $error_message) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $error_message_addr;
      $png_ptr_addr=$png_ptr;
      $error_message_addr=$error_message;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $error_fn=(($1+44)|0);
      var $error_fn1=$error_fn;
      var $2=HEAP32[(($error_fn1)>>2)];
      var $cmp2=(($2)|0)!=0;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$png_ptr_addr;
      var $error_fn3=(($3+44)|0);
      var $error_fn4=$error_fn3;
      var $4=HEAP32[(($error_fn4)>>2)];
      var $5=$png_ptr_addr;
      var $6=$error_message_addr;
      FUNCTION_TABLE[$4]($5, $6);
      __label__ = 4; break;
    case 4: 
      var $7=$png_ptr_addr;
      var $8=$error_message_addr;
      _png_default_error($7, $8);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_default_error($png_ptr, $error_message) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $error_message_addr;
      $png_ptr_addr=$png_ptr;
      $error_message_addr=$error_message;
      var $0=HEAP32[((_stderr)>>2)];
      var $1=$error_message_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$error_message_addr;
      var $cond = $2;__label__ = 4; break;
    case 3: 
      var $cond = ((STRING_TABLE.__str4581)|0);__label__ = 4; break;
    case 4: 
      var $cond;
      var $call=_fprintf($0, ((STRING_TABLE.__str3580)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$cond,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($3, ((STRING_TABLE.__str2579)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=$png_ptr_addr;
      _png_longjmp($4, 1);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_warning($png_ptr, $warning_message) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $warning_message_addr;
      var $offset;
      $png_ptr_addr=$png_ptr;
      $warning_message_addr=$warning_message;
      $offset=0;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      var $1=$warning_message_addr;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp1=(($conv)|0)==35;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      $offset=1;
      __label__ = 4; break;
    case 4: 
      var $3=$offset;
      var $cmp4=(($3)|0) < 15;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $4=$offset;
      var $5=$warning_message_addr;
      var $arrayidx=(($5+$4)|0);
      var $6=HEAP8[($arrayidx)];
      var $conv6=(($6 << 24) >> 24);
      var $cmp7=(($conv6)|0)==32;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 9; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $7=$offset;
      var $inc=(($7+1)|0);
      $offset=$inc;
      __label__ = 4; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $8=$png_ptr_addr;
      var $cmp12=(($8)|0)!=0;
      if ($cmp12) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $9=$png_ptr_addr;
      var $warning_fn=(($9+48)|0);
      var $warning_fn14=$warning_fn;
      var $10=HEAP32[(($warning_fn14)>>2)];
      var $cmp15=(($10)|0)!=0;
      if ($cmp15) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $11=$png_ptr_addr;
      var $warning_fn18=(($11+48)|0);
      var $warning_fn19=$warning_fn18;
      var $12=HEAP32[(($warning_fn19)>>2)];
      var $13=$png_ptr_addr;
      var $14=$warning_message_addr;
      var $15=$offset;
      var $add_ptr=(($14+$15)|0);
      FUNCTION_TABLE[$12]($13, $add_ptr);
      __label__ = 15; break;
    case 14: 
      var $16=$png_ptr_addr;
      var $17=$warning_message_addr;
      var $18=$offset;
      var $add_ptr20=(($17+$18)|0);
      _png_default_warning($16, $add_ptr20);
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_warning["X"]=1;

function _png_default_warning($png_ptr, $warning_message) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $png_ptr_addr;
  var $warning_message_addr;
  $png_ptr_addr=$png_ptr;
  $warning_message_addr=$warning_message;
  var $0=HEAP32[((_stderr)>>2)];
  var $1=$warning_message_addr;
  var $call=_fprintf($0, ((STRING_TABLE.__str1578)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1,tempInt));
  var $2=HEAP32[((_stderr)>>2)];
  var $call1=_fprintf($2, ((STRING_TABLE.__str2579)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $3=$png_ptr_addr;
  STACKTOP = __stackBase__;
  return;
}


function _png_warning_parameter($p, $number, $string) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $p_addr;
      var $number_addr;
      var $string_addr;
      $p_addr=$p;
      $number_addr=$number;
      $string_addr=$string;
      var $0=$number_addr;
      var $cmp=(($0)|0) > 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $1=$number_addr;
      var $cmp1=(($1)|0) <= 8;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$number_addr;
      var $sub=(($2-1)|0);
      var $3=$p_addr;
      var $arrayidx=(($3+($sub<<5))|0);
      var $arraydecay=(($arrayidx)|0);
      var $4=$string_addr;
      var $call=_png_safecat($arraydecay, 32, 0, $4);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_warning_parameter_unsigned($p, $number, $format, $value) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $p_addr;
  var $number_addr;
  var $format_addr;
  var $value_addr;
  var $buffer=__stackBase__;
  $p_addr=$p;
  $number_addr=$number;
  $format_addr=$format;
  $value_addr=$value;
  var $0=$p_addr;
  var $1=$number_addr;
  var $arraydecay=(($buffer)|0);
  var $arraydecay1=(($buffer)|0);
  var $add_ptr=(($arraydecay1+24)|0);
  var $2=$format_addr;
  var $3=$value_addr;
  var $call=_png_format_number($arraydecay, $add_ptr, $2, $3);
  _png_warning_parameter($0, $1, $call);
  STACKTOP = __stackBase__;
  return;
}


function _png_warning_parameter_signed($p, $number, $format, $value) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $p_addr;
      var $number_addr;
      var $format_addr;
      var $value_addr;
      var $u;
      var $str;
      var $buffer=__stackBase__;
      $p_addr=$p;
      $number_addr=$number;
      $format_addr=$format;
      $value_addr=$value;
      var $0=$value_addr;
      $u=$0;
      var $1=$value_addr;
      var $cmp=(($1)|0) < 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$u;
      var $neg=$2 ^ -1;
      var $add=(($neg+1)|0);
      $u=$add;
      __label__ = 3; break;
    case 3: 
      var $arraydecay=(($buffer)|0);
      var $arraydecay1=(($buffer)|0);
      var $add_ptr=(($arraydecay1+24)|0);
      var $3=$format_addr;
      var $4=$u;
      var $call=_png_format_number($arraydecay, $add_ptr, $3, $4);
      $str=$call;
      var $5=$value_addr;
      var $cmp2=(($5)|0) < 0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $6=$str;
      var $arraydecay3=(($buffer)|0);
      var $cmp4=(($6)>>>0) > (($arraydecay3)>>>0);
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $7=$str;
      var $incdec_ptr=(($7-1)|0);
      $str=$incdec_ptr;
      HEAP8[($incdec_ptr)]=45;
      __label__ = 6; break;
    case 6: 
      var $8=$p_addr;
      var $9=$number_addr;
      var $10=$str;
      _png_warning_parameter($8, $9, $10);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_formatted_warning($png_ptr, $p, $message) {
  var __stackBase__  = STACKTOP; STACKTOP += 192; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $p_addr;
      var $message_addr;
      var $i;
      var $msg=__stackBase__;
      var $parameter_char;
      var $parameter;
      var $parm;
      var $pend;
      $png_ptr_addr=$png_ptr;
      $p_addr=$p;
      $message_addr=$message;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $0=$i;
      var $cmp=(($0)>>>0) < 191;
      if ($cmp) { __label__ = 3; break; } else { var $3 = 0;__label__ = 4; break; }
    case 3: 
      var $1=$message_addr;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp1=(($conv)|0)!=0;
      var $3 = $cmp1;__label__ = 4; break;
    case 4: 
      var $3;
      if ($3) { __label__ = 5; break; } else { __label__ = 23; break; }
    case 5: 
      var $4=$p_addr;
      var $cmp3=(($4)|0)!=0;
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 22; break; }
    case 6: 
      var $5=$message_addr;
      var $6=HEAP8[($5)];
      var $conv5=(($6 << 24) >> 24);
      var $cmp6=(($conv5)|0)==64;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 22; break; }
    case 7: 
      var $7=$message_addr;
      var $arrayidx=(($7+1)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv9=(($8 << 24) >> 24);
      var $cmp10=(($conv9)|0)!=0;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 22; break; }
    case 8: 
      var $9=$message_addr;
      var $incdec_ptr=(($9+1)|0);
      $message_addr=$incdec_ptr;
      var $10=HEAP8[($incdec_ptr)];
      var $conv12=(($10 << 24) >> 24);
      $parameter_char=$conv12;
      $parameter=0;
      __label__ = 9; break;
    case 9: 
      var $11=$parameter;
      var $arrayidx14=((STRING_TABLE._png_formatted_warning_valid_parameters+$11)|0);
      var $12=HEAP8[($arrayidx14)];
      var $conv15=(($12 << 24) >> 24);
      var $13=$parameter_char;
      var $cmp16=(($conv15)|0)!=(($13)|0);
      if ($cmp16) { __label__ = 10; break; } else { var $16 = 0;__label__ = 11; break; }
    case 10: 
      var $14=$parameter;
      var $arrayidx19=((STRING_TABLE._png_formatted_warning_valid_parameters+$14)|0);
      var $15=HEAP8[($arrayidx19)];
      var $conv20=(($15 << 24) >> 24);
      var $cmp21=(($conv20)|0)!=0;
      var $16 = $cmp21;__label__ = 11; break;
    case 11: 
      var $16;
      if ($16) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $17=$parameter;
      var $inc=(($17+1)|0);
      $parameter=$inc;
      __label__ = 9; break;
    case 13: 
      var $18=$parameter;
      var $cmp25=(($18)|0) < 8;
      if ($cmp25) { __label__ = 14; break; } else { __label__ = 21; break; }
    case 14: 
      var $19=$parameter;
      var $20=$p_addr;
      var $arrayidx28=(($20+($19<<5))|0);
      var $arraydecay=(($arrayidx28)|0);
      $parm=$arraydecay;
      var $21=$parameter;
      var $22=$p_addr;
      var $arrayidx29=(($22+($21<<5))|0);
      var $arraydecay30=(($arrayidx29)|0);
      var $add_ptr=(($arraydecay30+32)|0);
      $pend=$add_ptr;
      __label__ = 15; break;
    case 15: 
      var $23=$i;
      var $cmp32=(($23)>>>0) < 191;
      if ($cmp32) { __label__ = 16; break; } else { var $28 = 0;__label__ = 18; break; }
    case 16: 
      var $24=$parm;
      var $25=HEAP8[($24)];
      var $conv35=(($25 << 24) >> 24);
      var $cmp36=(($conv35)|0)!=0;
      if ($cmp36) { __label__ = 17; break; } else { var $28 = 0;__label__ = 18; break; }
    case 17: 
      var $26=$parm;
      var $27=$pend;
      var $cmp39=(($26)>>>0) < (($27)>>>0);
      var $28 = $cmp39;__label__ = 18; break;
    case 18: 
      var $28;
      if ($28) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $29=$parm;
      var $incdec_ptr43=(($29+1)|0);
      $parm=$incdec_ptr43;
      var $30=HEAP8[($29)];
      var $31=$i;
      var $inc44=(($31+1)|0);
      $i=$inc44;
      var $arrayidx45=(($msg+$31)|0);
      HEAP8[($arrayidx45)]=$30;
      __label__ = 15; break;
    case 20: 
      var $32=$message_addr;
      var $incdec_ptr47=(($32+1)|0);
      $message_addr=$incdec_ptr47;
      __label__ = 2; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $33=$message_addr;
      var $incdec_ptr49=(($33+1)|0);
      $message_addr=$incdec_ptr49;
      var $34=HEAP8[($33)];
      var $35=$i;
      var $inc50=(($35+1)|0);
      $i=$inc50;
      var $arrayidx51=(($msg+$35)|0);
      HEAP8[($arrayidx51)]=$34;
      __label__ = 2; break;
    case 23: 
      var $36=$i;
      var $arrayidx53=(($msg+$36)|0);
      HEAP8[($arrayidx53)]=0;
      var $37=$png_ptr_addr;
      var $arraydecay54=(($msg)|0);
      _png_warning($37, $arraydecay54);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_formatted_warning["X"]=1;

function _png_benign_error($png_ptr, $error_message) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $error_message_addr;
      $png_ptr_addr=$png_ptr;
      $error_message_addr=$error_message;
      var $0=$png_ptr_addr;
      var $flags=(($0+88)|0);
      var $1=HEAP32[(($flags)>>2)];
      var $and=$1 & 8388608;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $3=$error_message_addr;
      _png_warning($2, $3);
      __label__ = 4; break;
    case 3: 
      var $4=$png_ptr_addr;
      var $5=$error_message_addr;
      _png_error($4, $5);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_chunk_error($png_ptr, $error_message) {
  var __stackBase__  = STACKTOP; STACKTOP += 84; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $error_message_addr;
      var $msg=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $error_message_addr=$error_message;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $2=$error_message_addr;
      _png_error($1, $2);
      __label__ = 4; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $arraydecay=(($msg)|0);
      var $4=$error_message_addr;
      _png_format_buffer($3, $arraydecay, $4);
      var $5=$png_ptr_addr;
      var $arraydecay1=(($msg)|0);
      _png_error($5, $arraydecay1);
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_chunk_warning($png_ptr, $warning_message) {
  var __stackBase__  = STACKTOP; STACKTOP += 84; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $warning_message_addr;
      var $msg=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $warning_message_addr=$warning_message;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $2=$warning_message_addr;
      _png_warning($1, $2);
      __label__ = 4; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $arraydecay=(($msg)|0);
      var $4=$warning_message_addr;
      _png_format_buffer($3, $arraydecay, $4);
      var $5=$png_ptr_addr;
      var $arraydecay1=(($msg)|0);
      _png_warning($5, $arraydecay1);
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_longjmp_fn($png_ptr, $longjmp_fn, $jmp_buf_size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $longjmp_fn_addr;
      var $jmp_buf_size_addr;
      $png_ptr_addr=$png_ptr;
      $longjmp_fn_addr=$longjmp_fn;
      $jmp_buf_size_addr=$jmp_buf_size;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$jmp_buf_size_addr;
      var $cmp1=(($1)|0)!=40;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 5; break;
    case 4: 
      var $2=$longjmp_fn_addr;
      var $3=$png_ptr_addr;
      var $longjmp_fn2=(($3+40)|0);
      HEAP32[(($longjmp_fn2)>>2)]=$2;
      var $4=$png_ptr_addr;
      var $longjmp_buffer=(($4)|0);
      $retval=$longjmp_buffer;
      __label__ = 5; break;
    case 5: 
      var $5=$retval;
      ;
      return $5;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_error_fn($png_ptr, $error_ptr, $error_fn, $warning_fn) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $error_ptr_addr;
      var $error_fn_addr;
      var $warning_fn_addr;
      $png_ptr_addr=$png_ptr;
      $error_ptr_addr=$error_ptr;
      $error_fn_addr=$error_fn;
      $warning_fn_addr=$warning_fn;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$error_ptr_addr;
      var $2=$png_ptr_addr;
      var $error_ptr1=(($2+52)|0);
      HEAP32[(($error_ptr1)>>2)]=$1;
      var $3=$error_fn_addr;
      var $4=$png_ptr_addr;
      var $error_fn2=(($4+44)|0);
      var $error_fn3=$error_fn2;
      HEAP32[(($error_fn3)>>2)]=$3;
      var $5=$warning_fn_addr;
      var $6=$png_ptr_addr;
      var $warning_fn4=(($6+48)|0);
      var $warning_fn5=$warning_fn4;
      HEAP32[(($warning_fn5)>>2)]=$5;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_rowbytes($png_ptr, $info_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $rowbytes=(($2+12)|0);
      var $3=HEAP32[(($rowbytes)>>2)];
      $retval=$3;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $4=$retval;
      ;
      return $4;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_bKGD($png_ptr, $info_ptr, $background) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $background_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $background_addr=$background;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 32;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$background_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $background5=(($5+90)|0);
      var $6=$background_addr;
      HEAP32[(($6)>>2)]=$background5;
      $retval=32;
      __label__ = 7; break;
    case 6: 
      $retval=0;
      __label__ = 7; break;
    case 7: 
      var $7=$retval;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_cHRM_fixed($png_ptr, $info_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $white_x_addr;
      var $white_y_addr;
      var $red_x_addr;
      var $red_y_addr;
      var $green_x_addr;
      var $green_y_addr;
      var $blue_x_addr;
      var $blue_y_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $white_x_addr=$white_x;
      $white_y_addr=$white_y;
      $red_x_addr=$red_x;
      $red_y_addr=$red_y;
      $green_x_addr=$green_x;
      $green_y_addr=$green_y;
      $blue_x_addr=$blue_x;
      $blue_y_addr=$blue_y;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 21; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 21; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 21; break; }
    case 4: 
      var $4=$white_x_addr;
      var $cmp3=(($4)|0)!=0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $x_white=(($5+128)|0);
      var $6=HEAP32[(($x_white)>>2)];
      var $7=$white_x_addr;
      HEAP32[(($7)>>2)]=$6;
      __label__ = 6; break;
    case 6: 
      var $8=$white_y_addr;
      var $cmp5=(($8)|0)!=0;
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $9=$info_ptr_addr;
      var $y_white=(($9+132)|0);
      var $10=HEAP32[(($y_white)>>2)];
      var $11=$white_y_addr;
      HEAP32[(($11)>>2)]=$10;
      __label__ = 8; break;
    case 8: 
      var $12=$red_x_addr;
      var $cmp8=(($12)|0)!=0;
      if ($cmp8) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $13=$info_ptr_addr;
      var $x_red=(($13+136)|0);
      var $14=HEAP32[(($x_red)>>2)];
      var $15=$red_x_addr;
      HEAP32[(($15)>>2)]=$14;
      __label__ = 10; break;
    case 10: 
      var $16=$red_y_addr;
      var $cmp11=(($16)|0)!=0;
      if ($cmp11) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $17=$info_ptr_addr;
      var $y_red=(($17+140)|0);
      var $18=HEAP32[(($y_red)>>2)];
      var $19=$red_y_addr;
      HEAP32[(($19)>>2)]=$18;
      __label__ = 12; break;
    case 12: 
      var $20=$green_x_addr;
      var $cmp14=(($20)|0)!=0;
      if ($cmp14) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $21=$info_ptr_addr;
      var $x_green=(($21+144)|0);
      var $22=HEAP32[(($x_green)>>2)];
      var $23=$green_x_addr;
      HEAP32[(($23)>>2)]=$22;
      __label__ = 14; break;
    case 14: 
      var $24=$green_y_addr;
      var $cmp17=(($24)|0)!=0;
      if ($cmp17) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $25=$info_ptr_addr;
      var $y_green=(($25+148)|0);
      var $26=HEAP32[(($y_green)>>2)];
      var $27=$green_y_addr;
      HEAP32[(($27)>>2)]=$26;
      __label__ = 16; break;
    case 16: 
      var $28=$blue_x_addr;
      var $cmp20=(($28)|0)!=0;
      if ($cmp20) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $29=$info_ptr_addr;
      var $x_blue=(($29+152)|0);
      var $30=HEAP32[(($x_blue)>>2)];
      var $31=$blue_x_addr;
      HEAP32[(($31)>>2)]=$30;
      __label__ = 18; break;
    case 18: 
      var $32=$blue_y_addr;
      var $cmp23=(($32)|0)!=0;
      if ($cmp23) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $33=$info_ptr_addr;
      var $y_blue=(($33+156)|0);
      var $34=HEAP32[(($y_blue)>>2)];
      var $35=$blue_y_addr;
      HEAP32[(($35)>>2)]=$34;
      __label__ = 20; break;
    case 20: 
      $retval=4;
      __label__ = 22; break;
    case 21: 
      $retval=0;
      __label__ = 22; break;
    case 22: 
      var $36=$retval;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_get_cHRM_fixed["X"]=1;

function _png_get_gAMA_fixed($png_ptr, $info_ptr, $file_gamma) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $file_gamma_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $file_gamma_addr=$file_gamma;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$file_gamma_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $gamma=(($5+40)|0);
      var $6=HEAP32[(($gamma)>>2)];
      var $7=$file_gamma_addr;
      HEAP32[(($7)>>2)]=$6;
      $retval=1;
      __label__ = 7; break;
    case 6: 
      $retval=0;
      __label__ = 7; break;
    case 7: 
      var $8=$retval;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_sRGB($png_ptr, $info_ptr, $file_srgb_intent) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $file_srgb_intent_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $file_srgb_intent_addr=$file_srgb_intent;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 2048;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$file_srgb_intent_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $srgb_intent=(($5+44)|0);
      var $6=HEAPU8[($srgb_intent)];
      var $conv=(($6)&255);
      var $7=$file_srgb_intent_addr;
      HEAP32[(($7)>>2)]=$conv;
      $retval=2048;
      __label__ = 7; break;
    case 6: 
      $retval=0;
      __label__ = 7; break;
    case 7: 
      var $8=$retval;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_iCCP($png_ptr, $info_ptr, $name, $compression_type, $profile, $proflen) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $name_addr;
      var $compression_type_addr;
      var $profile_addr;
      var $proflen_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $name_addr=$name;
      $compression_type_addr=$compression_type;
      $profile_addr=$profile;
      $proflen_addr=$proflen;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 4096;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $4=$name_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $5=$compression_type_addr;
      var $cmp6=(($5)|0)!=0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $6=$profile_addr;
      var $cmp8=(($6)|0)!=0;
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $7=$proflen_addr;
      var $cmp10=(($7)|0)!=0;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $8=$info_ptr_addr;
      var $iccp_name=(($8+196)|0);
      var $9=HEAP32[(($iccp_name)>>2)];
      var $10=$name_addr;
      HEAP32[(($10)>>2)]=$9;
      var $11=$info_ptr_addr;
      var $iccp_profile=(($11+200)|0);
      var $12=HEAP32[(($iccp_profile)>>2)];
      var $13=$profile_addr;
      HEAP32[(($13)>>2)]=$12;
      var $14=$info_ptr_addr;
      var $iccp_proflen=(($14+204)|0);
      var $15=HEAP32[(($iccp_proflen)>>2)];
      var $16=$proflen_addr;
      HEAP32[(($16)>>2)]=$15;
      var $17=$info_ptr_addr;
      var $iccp_compression=(($17+208)|0);
      var $18=HEAPU8[($iccp_compression)];
      var $conv=(($18)&255);
      var $19=$compression_type_addr;
      HEAP32[(($19)>>2)]=$conv;
      $retval=4096;
      __label__ = 10; break;
    case 9: 
      $retval=0;
      __label__ = 10; break;
    case 10: 
      var $20=$retval;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_get_iCCP["X"]=1;

function _png_get_sPLT($png_ptr, $info_ptr, $spalettes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $spalettes_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $spalettes_addr=$spalettes;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $2=$spalettes_addr;
      var $cmp3=(($2)|0)!=0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$info_ptr_addr;
      var $splt_palettes=(($3+212)|0);
      var $4=HEAP32[(($splt_palettes)>>2)];
      var $5=$spalettes_addr;
      HEAP32[(($5)>>2)]=$4;
      var $6=$info_ptr_addr;
      var $splt_palettes_num=(($6+216)|0);
      var $7=HEAP32[(($splt_palettes_num)>>2)];
      $retval=$7;
      __label__ = 6; break;
    case 5: 
      $retval=0;
      __label__ = 6; break;
    case 6: 
      var $8=$retval;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_hIST($png_ptr, $info_ptr, $hist) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $hist_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $hist_addr=$hist;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$hist_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $hist5=(($5+124)|0);
      var $6=HEAP32[(($hist5)>>2)];
      var $7=$hist_addr;
      HEAP32[(($7)>>2)]=$6;
      $retval=64;
      __label__ = 7; break;
    case 6: 
      $retval=0;
      __label__ = 7; break;
    case 7: 
      var $8=$retval;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_oFFs($png_ptr, $info_ptr, $offset_x, $offset_y, $unit_type) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $offset_x_addr;
      var $offset_y_addr;
      var $unit_type_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $offset_x_addr=$offset_x;
      $offset_y_addr=$offset_y;
      $unit_type_addr=$unit_type;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 8; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 256;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $4=$offset_x_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $5=$offset_y_addr;
      var $cmp6=(($5)|0)!=0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $6=$unit_type_addr;
      var $cmp8=(($6)|0)!=0;
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $7=$info_ptr_addr;
      var $x_offset=(($7+100)|0);
      var $8=HEAP32[(($x_offset)>>2)];
      var $9=$offset_x_addr;
      HEAP32[(($9)>>2)]=$8;
      var $10=$info_ptr_addr;
      var $y_offset=(($10+104)|0);
      var $11=HEAP32[(($y_offset)>>2)];
      var $12=$offset_y_addr;
      HEAP32[(($12)>>2)]=$11;
      var $13=$info_ptr_addr;
      var $offset_unit_type=(($13+108)|0);
      var $14=HEAPU8[($offset_unit_type)];
      var $conv=(($14)&255);
      var $15=$unit_type_addr;
      HEAP32[(($15)>>2)]=$conv;
      $retval=256;
      __label__ = 9; break;
    case 8: 
      $retval=0;
      __label__ = 9; break;
    case 9: 
      var $16=$retval;
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_get_oFFs["X"]=1;

function _png_get_pCAL($png_ptr, $info_ptr, $purpose, $X0, $X1, $type, $nparams, $units, $params) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $purpose_addr;
      var $X0_addr;
      var $X1_addr;
      var $type_addr;
      var $nparams_addr;
      var $units_addr;
      var $params_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $purpose_addr=$purpose;
      $X0_addr=$X0;
      $X1_addr=$X1;
      $type_addr=$type;
      $nparams_addr=$nparams;
      $units_addr=$units;
      $params_addr=$params;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 12; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 1024;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $4=$purpose_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      var $5=$X0_addr;
      var $cmp6=(($5)|0)!=0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $6=$X1_addr;
      var $cmp8=(($6)|0)!=0;
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $7=$type_addr;
      var $cmp10=(($7)|0)!=0;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $8=$nparams_addr;
      var $cmp12=(($8)|0)!=0;
      if ($cmp12) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $9=$units_addr;
      var $cmp14=(($9)|0)!=0;
      if ($cmp14) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $10=$params_addr;
      var $cmp16=(($10)|0)!=0;
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $11=$info_ptr_addr;
      var $pcal_purpose=(($11+160)|0);
      var $12=HEAP32[(($pcal_purpose)>>2)];
      var $13=$purpose_addr;
      HEAP32[(($13)>>2)]=$12;
      var $14=$info_ptr_addr;
      var $pcal_X0=(($14+164)|0);
      var $15=HEAP32[(($pcal_X0)>>2)];
      var $16=$X0_addr;
      HEAP32[(($16)>>2)]=$15;
      var $17=$info_ptr_addr;
      var $pcal_X1=(($17+168)|0);
      var $18=HEAP32[(($pcal_X1)>>2)];
      var $19=$X1_addr;
      HEAP32[(($19)>>2)]=$18;
      var $20=$info_ptr_addr;
      var $pcal_type=(($20+180)|0);
      var $21=HEAPU8[($pcal_type)];
      var $conv=(($21)&255);
      var $22=$type_addr;
      HEAP32[(($22)>>2)]=$conv;
      var $23=$info_ptr_addr;
      var $pcal_nparams=(($23+181)|0);
      var $24=HEAPU8[($pcal_nparams)];
      var $conv17=(($24)&255);
      var $25=$nparams_addr;
      HEAP32[(($25)>>2)]=$conv17;
      var $26=$info_ptr_addr;
      var $pcal_units=(($26+172)|0);
      var $27=HEAP32[(($pcal_units)>>2)];
      var $28=$units_addr;
      HEAP32[(($28)>>2)]=$27;
      var $29=$info_ptr_addr;
      var $pcal_params=(($29+176)|0);
      var $30=HEAP32[(($pcal_params)>>2)];
      var $31=$params_addr;
      HEAP32[(($31)>>2)]=$30;
      $retval=1024;
      __label__ = 13; break;
    case 12: 
      $retval=0;
      __label__ = 13; break;
    case 13: 
      var $32=$retval;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_get_pCAL["X"]=1;

function _png_chunk_benign_error($png_ptr, $error_message) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $error_message_addr;
      $png_ptr_addr=$png_ptr;
      $error_message_addr=$error_message;
      var $0=$png_ptr_addr;
      var $flags=(($0+88)|0);
      var $1=HEAP32[(($flags)>>2)];
      var $and=$1 & 8388608;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $3=$error_message_addr;
      _png_chunk_warning($2, $3);
      __label__ = 4; break;
    case 3: 
      var $4=$png_ptr_addr;
      var $5=$error_message_addr;
      _png_chunk_error($4, $5);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_longjmp($png_ptr, $val) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $val_addr;
      $png_ptr_addr=$png_ptr;
      $val_addr=$val;
      var $0=$png_ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $longjmp_fn=(($1+40)|0);
      var $2=HEAP32[(($longjmp_fn)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$png_ptr_addr;
      var $longjmp_fn2=(($3+40)|0);
      var $4=HEAP32[(($longjmp_fn2)>>2)];
      var $5=$png_ptr_addr;
      var $longjmp_buffer=(($5)|0);
      var $arraydecay=(($longjmp_buffer)|0);
      var $6=$val_addr;
      FUNCTION_TABLE[$4]($arraydecay, $6);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_IHDR($png_ptr, $info_ptr, $width, $height, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $width_addr;
      var $height_addr;
      var $bit_depth_addr;
      var $color_type_addr;
      var $interlace_type_addr;
      var $compression_type_addr;
      var $filter_type_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $width_addr=$width;
      $height_addr=$height;
      $bit_depth_addr=$bit_depth;
      $color_type_addr=$color_type;
      $interlace_type_addr=$interlace_type;
      $compression_type_addr=$compression_type;
      $filter_type_addr=$filter_type;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 7; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$width_addr;
      var $cmp3=(($2)|0)==0;
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$height_addr;
      var $cmp5=(($3)|0)==0;
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $4=$bit_depth_addr;
      var $cmp7=(($4)|0)==0;
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $5=$color_type_addr;
      var $cmp9=(($5)|0)==0;
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $retval=0;
      __label__ = 15; break;
    case 8: 
      var $6=$info_ptr_addr;
      var $width10=(($6)|0);
      var $7=HEAP32[(($width10)>>2)];
      var $8=$width_addr;
      HEAP32[(($8)>>2)]=$7;
      var $9=$info_ptr_addr;
      var $height11=(($9+4)|0);
      var $10=HEAP32[(($height11)>>2)];
      var $11=$height_addr;
      HEAP32[(($11)>>2)]=$10;
      var $12=$info_ptr_addr;
      var $bit_depth12=(($12+24)|0);
      var $13=HEAPU8[($bit_depth12)];
      var $conv=(($13)&255);
      var $14=$bit_depth_addr;
      HEAP32[(($14)>>2)]=$conv;
      var $15=$info_ptr_addr;
      var $color_type13=(($15+25)|0);
      var $16=HEAPU8[($color_type13)];
      var $conv14=(($16)&255);
      var $17=$color_type_addr;
      HEAP32[(($17)>>2)]=$conv14;
      var $18=$compression_type_addr;
      var $cmp15=(($18)|0)!=0;
      if ($cmp15) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $19=$info_ptr_addr;
      var $compression_type18=(($19+26)|0);
      var $20=HEAPU8[($compression_type18)];
      var $conv19=(($20)&255);
      var $21=$compression_type_addr;
      HEAP32[(($21)>>2)]=$conv19;
      __label__ = 10; break;
    case 10: 
      var $22=$filter_type_addr;
      var $cmp21=(($22)|0)!=0;
      if ($cmp21) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $23=$info_ptr_addr;
      var $filter_type24=(($23+27)|0);
      var $24=HEAPU8[($filter_type24)];
      var $conv25=(($24)&255);
      var $25=$filter_type_addr;
      HEAP32[(($25)>>2)]=$conv25;
      __label__ = 12; break;
    case 12: 
      var $26=$interlace_type_addr;
      var $cmp27=(($26)|0)!=0;
      if ($cmp27) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $27=$info_ptr_addr;
      var $interlace_type30=(($27+28)|0);
      var $28=HEAPU8[($interlace_type30)];
      var $conv31=(($28)&255);
      var $29=$interlace_type_addr;
      HEAP32[(($29)>>2)]=$conv31;
      __label__ = 14; break;
    case 14: 
      var $30=$png_ptr_addr;
      var $31=$info_ptr_addr;
      var $width33=(($31)|0);
      var $32=HEAP32[(($width33)>>2)];
      var $33=$info_ptr_addr;
      var $height34=(($33+4)|0);
      var $34=HEAP32[(($height34)>>2)];
      var $35=$info_ptr_addr;
      var $bit_depth35=(($35+24)|0);
      var $36=HEAPU8[($bit_depth35)];
      var $conv36=(($36)&255);
      var $37=$info_ptr_addr;
      var $color_type37=(($37+25)|0);
      var $38=HEAPU8[($color_type37)];
      var $conv38=(($38)&255);
      var $39=$info_ptr_addr;
      var $interlace_type39=(($39+28)|0);
      var $40=HEAPU8[($interlace_type39)];
      var $conv40=(($40)&255);
      var $41=$info_ptr_addr;
      var $compression_type41=(($41+26)|0);
      var $42=HEAPU8[($compression_type41)];
      var $conv42=(($42)&255);
      var $43=$info_ptr_addr;
      var $filter_type43=(($43+27)|0);
      var $44=HEAPU8[($filter_type43)];
      var $conv44=(($44)&255);
      _png_check_IHDR($30, $32, $34, $conv36, $conv38, $conv40, $conv42, $conv44);
      $retval=1;
      __label__ = 15; break;
    case 15: 
      var $45=$retval;
      ;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_get_IHDR["X"]=1;

function _png_get_pHYs($png_ptr, $info_ptr, $res_x, $res_y, $unit_type) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $res_x_addr;
      var $res_y_addr;
      var $unit_type_addr;
      var $retval1;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $res_x_addr=$res_x;
      $res_y_addr=$res_y;
      $unit_type_addr=$unit_type;
      $retval1=0;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 11; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp2=(($1)|0)!=0;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 11; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 128;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $4=$res_x_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $x_pixels_per_unit=(($5+112)|0);
      var $6=HEAP32[(($x_pixels_per_unit)>>2)];
      var $7=$res_x_addr;
      HEAP32[(($7)>>2)]=$6;
      var $8=$retval1;
      var $or=$8 | 128;
      $retval1=$or;
      __label__ = 6; break;
    case 6: 
      var $9=$res_y_addr;
      var $cmp6=(($9)|0)!=0;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $10=$info_ptr_addr;
      var $y_pixels_per_unit=(($10+116)|0);
      var $11=HEAP32[(($y_pixels_per_unit)>>2)];
      var $12=$res_y_addr;
      HEAP32[(($12)>>2)]=$11;
      var $13=$retval1;
      var $or8=$13 | 128;
      $retval1=$or8;
      __label__ = 8; break;
    case 8: 
      var $14=$unit_type_addr;
      var $cmp10=(($14)|0)!=0;
      if ($cmp10) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$info_ptr_addr;
      var $phys_unit_type=(($15+120)|0);
      var $16=HEAPU8[($phys_unit_type)];
      var $conv=(($16)&255);
      var $17=$unit_type_addr;
      HEAP32[(($17)>>2)]=$conv;
      var $18=$retval1;
      var $or12=$18 | 128;
      $retval1=$or12;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $19=$retval1;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_get_pHYs["X"]=1;

function _png_get_PLTE($png_ptr, $info_ptr, $palette, $num_palette) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $palette_addr;
      var $num_palette_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $palette_addr=$palette;
      $num_palette_addr=$num_palette;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$palette_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $palette5=(($5+16)|0);
      var $6=HEAP32[(($palette5)>>2)];
      var $7=$palette_addr;
      HEAP32[(($7)>>2)]=$6;
      var $8=$info_ptr_addr;
      var $num_palette6=(($8+20)|0);
      var $9=HEAPU16[(($num_palette6)>>1)];
      var $conv=(($9)&65535);
      var $10=$num_palette_addr;
      HEAP32[(($10)>>2)]=$conv;
      $retval=8;
      __label__ = 7; break;
    case 6: 
      $retval=0;
      __label__ = 7; break;
    case 7: 
      var $11=$retval;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_sBIT($png_ptr, $info_ptr, $sig_bit) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $sig_bit_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $sig_bit_addr=$sig_bit;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$sig_bit_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $sig_bit5=(($5+68)|0);
      var $6=$sig_bit_addr;
      HEAP32[(($6)>>2)]=$sig_bit5;
      $retval=2;
      __label__ = 7; break;
    case 6: 
      $retval=0;
      __label__ = 7; break;
    case 7: 
      var $7=$retval;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_text($png_ptr, $info_ptr, $text_ptr, $num_text) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $text_ptr_addr;
      var $num_text_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $text_ptr_addr=$text_ptr;
      $num_text_addr=$num_text;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 9; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $num_text3=(($2+48)|0);
      var $3=HEAP32[(($num_text3)>>2)];
      var $cmp4=(($3)|0) > 0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $4=$text_ptr_addr;
      var $cmp5=(($4)|0)!=0;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $text=(($5+56)|0);
      var $6=HEAP32[(($text)>>2)];
      var $7=$text_ptr_addr;
      HEAP32[(($7)>>2)]=$6;
      __label__ = 6; break;
    case 6: 
      var $8=$num_text_addr;
      var $cmp7=(($8)|0)!=0;
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $9=$info_ptr_addr;
      var $num_text9=(($9+48)|0);
      var $10=HEAP32[(($num_text9)>>2)];
      var $11=$num_text_addr;
      HEAP32[(($11)>>2)]=$10;
      __label__ = 8; break;
    case 8: 
      var $12=$info_ptr_addr;
      var $num_text11=(($12+48)|0);
      var $13=HEAP32[(($num_text11)>>2)];
      $retval=$13;
      __label__ = 12; break;
    case 9: 
      var $14=$num_text_addr;
      var $cmp13=(($14)|0)!=0;
      if ($cmp13) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $15=$num_text_addr;
      HEAP32[(($15)>>2)]=0;
      __label__ = 11; break;
    case 11: 
      $retval=0;
      __label__ = 12; break;
    case 12: 
      var $16=$retval;
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_get_text["X"]=1;

function _png_get_tIME($png_ptr, $info_ptr, $mod_time) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $mod_time_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $mod_time_addr=$mod_time;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 512;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$mod_time_addr;
      var $cmp4=(($4)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$info_ptr_addr;
      var $mod_time5=(($5+60)|0);
      var $6=$mod_time_addr;
      HEAP32[(($6)>>2)]=$mod_time5;
      $retval=512;
      __label__ = 7; break;
    case 6: 
      $retval=0;
      __label__ = 7; break;
    case 7: 
      var $7=$retval;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_tRNS($png_ptr, $info_ptr, $trans_alpha, $num_trans, $trans_color) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $trans_alpha_addr;
      var $num_trans_addr;
      var $trans_color_addr;
      var $retval1;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $trans_alpha_addr=$trans_alpha;
      $num_trans_addr=$num_trans;
      $trans_color_addr=$trans_color;
      $retval1=0;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 18; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp2=(($1)|0)!=0;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 18; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 16;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 18; break; }
    case 4: 
      var $4=$info_ptr_addr;
      var $color_type=(($4+25)|0);
      var $5=HEAPU8[($color_type)];
      var $conv=(($5)&255);
      var $cmp4=(($conv)|0)==3;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $6=$trans_alpha_addr;
      var $cmp7=(($6)|0)!=0;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $7=$info_ptr_addr;
      var $trans_alpha10=(($7+76)|0);
      var $8=HEAP32[(($trans_alpha10)>>2)];
      var $9=$trans_alpha_addr;
      HEAP32[(($9)>>2)]=$8;
      var $10=$retval1;
      var $or=$10 | 16;
      $retval1=$or;
      __label__ = 7; break;
    case 7: 
      var $11=$trans_color_addr;
      var $cmp11=(($11)|0)!=0;
      if ($cmp11) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $12=$info_ptr_addr;
      var $trans_color14=(($12+80)|0);
      var $13=$trans_color_addr;
      HEAP32[(($13)>>2)]=$trans_color14;
      __label__ = 9; break;
    case 9: 
      __label__ = 15; break;
    case 10: 
      var $14=$trans_color_addr;
      var $cmp16=(($14)|0)!=0;
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $15=$info_ptr_addr;
      var $trans_color19=(($15+80)|0);
      var $16=$trans_color_addr;
      HEAP32[(($16)>>2)]=$trans_color19;
      var $17=$retval1;
      var $or20=$17 | 16;
      $retval1=$or20;
      __label__ = 12; break;
    case 12: 
      var $18=$trans_alpha_addr;
      var $cmp22=(($18)|0)!=0;
      if ($cmp22) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $19=$trans_alpha_addr;
      HEAP32[(($19)>>2)]=0;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $20=$num_trans_addr;
      var $cmp27=(($20)|0)!=0;
      if ($cmp27) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $21=$info_ptr_addr;
      var $num_trans30=(($21+22)|0);
      var $22=HEAPU16[(($num_trans30)>>1)];
      var $conv31=(($22)&65535);
      var $23=$num_trans_addr;
      HEAP32[(($23)>>2)]=$conv31;
      var $24=$retval1;
      var $or32=$24 | 16;
      $retval1=$or32;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $25=$retval1;
      ;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_get_tRNS["X"]=1;

function _png_get_unknown_chunks($png_ptr, $info_ptr, $unknowns) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $unknowns_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $unknowns_addr=$unknowns;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $2=$unknowns_addr;
      var $cmp3=(($2)|0)!=0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$info_ptr_addr;
      var $unknown_chunks=(($3+188)|0);
      var $4=HEAP32[(($unknown_chunks)>>2)];
      var $5=$unknowns_addr;
      HEAP32[(($5)>>2)]=$4;
      var $6=$info_ptr_addr;
      var $unknown_chunks_num=(($6+192)|0);
      var $7=HEAP32[(($unknown_chunks_num)>>2)];
      $retval=$7;
      __label__ = 6; break;
    case 5: 
      $retval=0;
      __label__ = 6; break;
    case 6: 
      var $8=$retval;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_rgb_to_gray_status($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $rgb_to_gray_status=(($1+569)|0);
      var $2=HEAPU8[($rgb_to_gray_status)];
      var $conv=(($2)&255);
      var $cond = $conv;__label__ = 4; break;
    case 3: 
      var $cond = 0;__label__ = 4; break;
    case 4: 
      var $cond;
      var $conv1=(($cond) & 255);
      ;
      return $conv1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_compression_buffer_size($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $zbuf_size=(($1+156)|0);
      var $2=HEAP32[(($zbuf_size)>>2)];
      var $cond = $2;__label__ = 4; break;
    case 3: 
      var $cond = 0;__label__ = 4; break;
    case 4: 
      var $cond;
      ;
      return $cond;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_get_sCAL($png_ptr, $info_ptr, $unit, $width, $height) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $unit_addr;
      var $width_addr;
      var $height_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $unit_addr=$unit;
      $width_addr=$width;
      $height_addr=$height;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $2=$info_ptr_addr;
      var $valid=(($2+8)|0);
      var $3=HEAP32[(($valid)>>2)];
      var $and=$3 & 16384;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$info_ptr_addr;
      var $scal_unit=(($4+220)|0);
      var $5=HEAPU8[($scal_unit)];
      var $conv=(($5)&255);
      var $6=$unit_addr;
      HEAP32[(($6)>>2)]=$conv;
      var $7=$info_ptr_addr;
      var $scal_s_width=(($7+224)|0);
      var $8=HEAP32[(($scal_s_width)>>2)];
      var $call=_atof($8);
      var $9=$width_addr;
      (tempDoubleF64[0]=$call,HEAP32[(($9)>>2)]=tempDoubleI32[0],HEAP32[(($9+4)>>2)]=tempDoubleI32[1]);
      var $10=$info_ptr_addr;
      var $scal_s_height=(($10+228)|0);
      var $11=HEAP32[(($scal_s_height)>>2)];
      var $call3=_atof($11);
      var $12=$height_addr;
      (tempDoubleF64[0]=$call3,HEAP32[(($12)>>2)]=tempDoubleI32[0],HEAP32[(($12+4)>>2)]=tempDoubleI32[1]);
      $retval=16384;
      __label__ = 6; break;
    case 5: 
      $retval=0;
      __label__ = 6; break;
    case 6: 
      var $13=$retval;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_create_struct($type) {
  ;
  var __label__;

  var $type_addr;
  $type_addr=$type;
  var $0=$type_addr;
  var $call=_png_create_struct_2($0, 0, 0);
  ;
  return $call;
}


function _png_create_struct_2($type, $malloc_fn, $mem_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 684; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $type_addr;
      var $malloc_fn_addr;
      var $mem_ptr_addr;
      var $size;
      var $struct_ptr;
      var $dummy_struct=__stackBase__;
      var $png_ptr;
      $type_addr=$type;
      $malloc_fn_addr=$malloc_fn;
      $mem_ptr_addr=$mem_ptr;
      var $0=$type_addr;
      var $cmp=(($0)|0)==2;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $size=236;
      __label__ = 7; break;
    case 3: 
      var $1=$type_addr;
      var $cmp1=(($1)|0)==1;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $size=684;
      __label__ = 6; break;
    case 5: 
      $retval=0;
      __label__ = 14; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $2=$malloc_fn_addr;
      var $cmp5=(($2)|0)!=0;
      if ($cmp5) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      $png_ptr=$dummy_struct;
      var $3=$mem_ptr_addr;
      var $4=$png_ptr;
      var $mem_ptr7=(($4+584)|0);
      HEAP32[(($mem_ptr7)>>2)]=$3;
      var $5=$malloc_fn_addr;
      var $6=$png_ptr;
      var $7=$size;
      var $call=FUNCTION_TABLE[$5]($6, $7);
      $struct_ptr=$call;
      var $8=$struct_ptr;
      var $cmp8=(($8)|0)!=0;
      if ($cmp8) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $9=$struct_ptr;
      var $10=$size;
      _memset($9, 0, $10, 1);
      __label__ = 10; break;
    case 10: 
      var $11=$struct_ptr;
      $retval=$11;
      __label__ = 14; break;
    case 11: 
      var $12=$size;
      var $call12=_malloc($12);
      $struct_ptr=$call12;
      var $13=$struct_ptr;
      var $cmp13=(($13)|0)!=0;
      if ($cmp13) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $14=$struct_ptr;
      var $15=$size;
      _memset($14, 0, $15, 1);
      __label__ = 13; break;
    case 13: 
      var $16=$struct_ptr;
      $retval=$16;
      __label__ = 14; break;
    case 14: 
      var $17=$retval;
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_create_struct_2["X"]=1;

function _png_destroy_struct($struct_ptr) {
  ;
  var __label__;

  var $struct_ptr_addr;
  $struct_ptr_addr=$struct_ptr;
  var $0=$struct_ptr_addr;
  _png_destroy_struct_2($0, 0, 0);
  ;
  return;
}


function _png_destroy_struct_2($struct_ptr, $free_fn, $mem_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 684; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $struct_ptr_addr;
      var $free_fn_addr;
      var $mem_ptr_addr;
      var $dummy_struct=__stackBase__;
      var $png_ptr;
      $struct_ptr_addr=$struct_ptr;
      $free_fn_addr=$free_fn;
      $mem_ptr_addr=$mem_ptr;
      var $0=$struct_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $1=$free_fn_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $png_ptr=$dummy_struct;
      var $2=$mem_ptr_addr;
      var $3=$png_ptr;
      var $mem_ptr3=(($3+584)|0);
      HEAP32[(($mem_ptr3)>>2)]=$2;
      var $4=$free_fn_addr;
      var $5=$png_ptr;
      var $6=$struct_ptr_addr;
      FUNCTION_TABLE[$4]($5, $6);
      __label__ = 5; break;
    case 4: 
      var $7=$struct_ptr_addr;
      _free($7);
      __label__ = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_calloc($png_ptr, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $size_addr;
      var $ret;
      $png_ptr_addr=$png_ptr;
      $size_addr=$size;
      var $0=$png_ptr_addr;
      var $1=$size_addr;
      var $call=_png_malloc($0, $1);
      $ret=$call;
      var $2=$ret;
      var $cmp=(($2)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $3=$ret;
      var $4=$size_addr;
      _memset($3, 0, $4, 1);
      __label__ = 3; break;
    case 3: 
      var $5=$ret;
      ;
      return $5;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_malloc($png_ptr, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $size_addr;
      var $ret;
      $png_ptr_addr=$png_ptr;
      $size_addr=$size;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$size_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 11; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $malloc_fn=(($2+588)|0);
      var $malloc_fn2=$malloc_fn;
      var $3=HEAP32[(($malloc_fn2)>>2)];
      var $cmp3=(($3)|0)!=0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $4=$png_ptr_addr;
      var $malloc_fn5=(($4+588)|0);
      var $malloc_fn6=$malloc_fn5;
      var $5=HEAP32[(($malloc_fn6)>>2)];
      var $6=$png_ptr_addr;
      var $7=$size_addr;
      var $call=FUNCTION_TABLE[$5]($6, $7);
      $ret=$call;
      __label__ = 7; break;
    case 6: 
      var $8=$png_ptr_addr;
      var $9=$size_addr;
      var $call7=_png_malloc_default($8, $9);
      $ret=$call7;
      __label__ = 7; break;
    case 7: 
      var $10=$ret;
      var $cmp9=(($10)|0)==0;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $11=$png_ptr_addr;
      var $flags=(($11+88)|0);
      var $12=HEAP32[(($flags)>>2)];
      var $and=$12 & 1048576;
      var $cmp10=(($and)|0)==0;
      if ($cmp10) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $13=$png_ptr_addr;
      _png_error($13, ((STRING_TABLE.__str636)|0));
      __label__ = 10; break;
    case 10: 
      var $14=$ret;
      $retval=$14;
      __label__ = 11; break;
    case 11: 
      var $15=$retval;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_malloc["X"]=1;

function _png_malloc_default($png_ptr, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $size_addr;
      var $ret;
      $png_ptr_addr=$png_ptr;
      $size_addr=$size;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$size_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 8; break;
    case 4: 
      var $2=$size_addr;
      var $3=$size_addr;
      var $cmp2=(($2)|0)!=(($3)|0);
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $ret=0;
      __label__ = 7; break;
    case 6: 
      var $4=$size_addr;
      var $call=_malloc($4);
      $ret=$call;
      __label__ = 7; break;
    case 7: 
      var $5=$ret;
      $retval=$5;
      __label__ = 8; break;
    case 8: 
      var $6=$retval;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_free($png_ptr, $ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ptr_addr;
      $png_ptr_addr=$png_ptr;
      $ptr_addr=$ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 7; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $free_fn=(($2+592)|0);
      var $3=HEAP32[(($free_fn)>>2)];
      var $cmp2=(($3)|0)!=0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $4=$png_ptr_addr;
      var $free_fn4=(($4+592)|0);
      var $5=HEAP32[(($free_fn4)>>2)];
      var $6=$png_ptr_addr;
      var $7=$ptr_addr;
      FUNCTION_TABLE[$5]($6, $7);
      __label__ = 7; break;
    case 6: 
      var $8=$png_ptr_addr;
      var $9=$ptr_addr;
      _png_free_default($8, $9);
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_free_default($png_ptr, $ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ptr_addr;
      $png_ptr_addr=$png_ptr;
      $ptr_addr=$ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$ptr_addr;
      _free($2);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_malloc_warn($png_ptr, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $size_addr;
      var $ptr;
      var $save_flags;
      $png_ptr_addr=$png_ptr;
      $size_addr=$size;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $flags=(($1+88)|0);
      var $2=HEAP32[(($flags)>>2)];
      $save_flags=$2;
      var $3=$png_ptr_addr;
      var $flags1=(($3+88)|0);
      var $4=HEAP32[(($flags1)>>2)];
      var $or=$4 | 1048576;
      HEAP32[(($flags1)>>2)]=$or;
      var $5=$png_ptr_addr;
      var $6=$size_addr;
      var $call=_png_malloc($5, $6);
      $ptr=$call;
      var $7=$save_flags;
      var $8=$png_ptr_addr;
      var $flags2=(($8+88)|0);
      HEAP32[(($flags2)>>2)]=$7;
      var $9=$ptr;
      $retval=$9;
      __label__ = 4; break;
    case 4: 
      var $10=$retval;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_mem_fn($png_ptr, $mem_ptr, $malloc_fn, $free_fn) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $mem_ptr_addr;
      var $malloc_fn_addr;
      var $free_fn_addr;
      $png_ptr_addr=$png_ptr;
      $mem_ptr_addr=$mem_ptr;
      $malloc_fn_addr=$malloc_fn;
      $free_fn_addr=$free_fn;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$mem_ptr_addr;
      var $2=$png_ptr_addr;
      var $mem_ptr1=(($2+584)|0);
      HEAP32[(($mem_ptr1)>>2)]=$1;
      var $3=$malloc_fn_addr;
      var $4=$png_ptr_addr;
      var $malloc_fn2=(($4+588)|0);
      var $malloc_fn3=$malloc_fn2;
      HEAP32[(($malloc_fn3)>>2)]=$3;
      var $5=$free_fn_addr;
      var $6=$png_ptr_addr;
      var $free_fn4=(($6+592)|0);
      HEAP32[(($free_fn4)>>2)]=$5;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_create_read_struct($user_png_ver, $error_ptr, $error_fn, $warn_fn) {
  ;
  var __label__;

  var $user_png_ver_addr;
  var $error_ptr_addr;
  var $error_fn_addr;
  var $warn_fn_addr;
  $user_png_ver_addr=$user_png_ver;
  $error_ptr_addr=$error_ptr;
  $error_fn_addr=$error_fn;
  $warn_fn_addr=$warn_fn;
  var $0=$user_png_ver_addr;
  var $1=$error_ptr_addr;
  var $2=$error_fn_addr;
  var $3=$warn_fn_addr;
  var $call=_png_create_read_struct_2($0, $1, $2, $3, 0, 0, 0);
  ;
  return $call;
}


function _png_create_read_struct_2($user_png_ver, $error_ptr, $error_fn, $warn_fn, $mem_ptr, $malloc_fn, $free_fn) {
  ;
  var __label__;
  __label__ = 1; 
  var setjmpTable = {"3": function(value) { __label__ = 22; $call2 = value },dummy: 0};
  while(1) try { switch(__label__) {
    case 1: 
      var $retval;
      var $user_png_ver_addr;
      var $error_ptr_addr;
      var $error_fn_addr;
      var $warn_fn_addr;
      var $mem_ptr_addr;
      var $malloc_fn_addr;
      var $free_fn_addr;
      var $png_ptr;
      var $png_cleanup_needed;
      $user_png_ver_addr=$user_png_ver;
      $error_ptr_addr=$error_ptr;
      $error_fn_addr=$error_fn;
      $warn_fn_addr=$warn_fn;
      $mem_ptr_addr=$mem_ptr;
      $malloc_fn_addr=$malloc_fn;
      $free_fn_addr=$free_fn;
      $png_cleanup_needed=0;
      var $0=$malloc_fn_addr;
      var $1=$mem_ptr_addr;
      var $call=_png_create_struct_2(1, $0, $1);
      var $2=$call;
      $png_ptr=$2;
      var $3=$png_ptr;
      var $cmp=(($3)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 21; break;
    case 3: 
      var $4=$png_ptr;
      var $user_width_max=(($4+616)|0);
      HEAP32[(($user_width_max)>>2)]=2147483647;
      var $5=$png_ptr;
      var $user_height_max=(($5+620)|0);
      HEAP32[(($user_height_max)>>2)]=2147483647;
      var $6=$png_ptr;
      var $user_chunk_cache_max=(($6+624)|0);
      HEAP32[(($user_chunk_cache_max)>>2)]=0;
      var $7=$png_ptr;
      var $user_chunk_malloc_max=(($7+628)|0);
      HEAP32[(($user_chunk_malloc_max)>>2)]=0;
      var $8=$png_ptr;
      var $call1=_png_set_longjmp_fn($8, 12, 40);
      var $arraydecay=(($call1)|0);
      var $call2=(HEAP32[(($arraydecay)>>2)]=__label__, 0);
      __label__ = 22; break;
    case 22: 
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $9=$png_ptr;
      var $10=$mem_ptr_addr;
      var $11=$malloc_fn_addr;
      var $12=$free_fn_addr;
      _png_set_mem_fn($9, $10, $11, $12);
      var $13=$png_ptr;
      var $14=$error_ptr_addr;
      var $15=$error_fn_addr;
      var $16=$warn_fn_addr;
      _png_set_error_fn($13, $14, $15, $16);
      var $17=$png_ptr;
      var $18=$user_png_ver_addr;
      var $call5=_png_user_version_check($17, $18);
      var $tobool6=(($call5)|0)!=0;
      if ($tobool6) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      $png_cleanup_needed=1;
      __label__ = 7; break;
    case 7: 
      var $19=$png_cleanup_needed;
      var $tobool9=(($19)|0)!=0;
      if ($tobool9) { __label__ = 11; break; } else { __label__ = 8; break; }
    case 8: 
      var $20=$png_ptr;
      var $zbuf_size=(($20+156)|0);
      HEAP32[(($zbuf_size)>>2)]=8192;
      var $21=$png_ptr;
      var $22=$png_ptr;
      var $zbuf_size11=(($22+156)|0);
      var $23=HEAP32[(($zbuf_size11)>>2)];
      var $call12=_png_malloc_warn($21, $23);
      var $24=$png_ptr;
      var $zbuf=(($24+152)|0);
      HEAP32[(($zbuf)>>2)]=$call12;
      var $25=$png_ptr;
      var $zbuf13=(($25+152)|0);
      var $26=HEAP32[(($zbuf13)>>2)];
      var $cmp14=(($26)|0)==0;
      if ($cmp14) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $png_cleanup_needed=1;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $27=$png_ptr;
      var $zstream=(($27+96)|0);
      var $zalloc=(($zstream+32)|0);
      HEAP32[(($zalloc)>>2)]=8;
      var $28=$png_ptr;
      var $zstream18=(($28+96)|0);
      var $zfree=(($zstream18+36)|0);
      HEAP32[(($zfree)>>2)]=10;
      var $29=$png_ptr;
      var $30=$29;
      var $31=$png_ptr;
      var $zstream19=(($31+96)|0);
      var $opaque=(($zstream19+40)|0);
      HEAP32[(($opaque)>>2)]=$30;
      var $32=$png_cleanup_needed;
      var $tobool20=(($32)|0)!=0;
      if ($tobool20) { __label__ = 18; break; } else { __label__ = 12; break; }
    case 12: 
      var $33=$png_ptr;
      var $zstream22=(($33+96)|0);
      var $call23=_inflateInit_($zstream22, ((STRING_TABLE.__str674)|0), 56);
      if ((($call23)|0) == -4) {
        __label__ = 13; break;
      }
      else if ((($call23)|0) == -2) {
        __label__ = 14; break;
      }
      else if ((($call23)|0) == -6) {
        __label__ = 15; break;
      }
      else if ((($call23)|0) == 0) {
        __label__ = 17; break;
      }
      else {
      __label__ = 16; break;
      }
      
    case 13: 
      var $34=$png_ptr;
      _png_warning($34, ((STRING_TABLE.__str1675)|0));
      $png_cleanup_needed=1;
      __label__ = 17; break;
    case 14: 
      var $35=$png_ptr;
      _png_warning($35, ((STRING_TABLE.__str2676)|0));
      $png_cleanup_needed=1;
      __label__ = 17; break;
    case 15: 
      var $36=$png_ptr;
      _png_warning($36, ((STRING_TABLE.__str3677)|0));
      $png_cleanup_needed=1;
      __label__ = 17; break;
    case 16: 
      var $37=$png_ptr;
      _png_warning($37, ((STRING_TABLE.__str4678)|0));
      $png_cleanup_needed=1;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $38=$png_cleanup_needed;
      var $tobool27=(($38)|0)!=0;
      if ($tobool27) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $39=$png_ptr;
      var $40=$png_ptr;
      var $zbuf29=(($40+152)|0);
      var $41=HEAP32[(($zbuf29)>>2)];
      _png_free($39, $41);
      var $42=$png_ptr;
      var $zbuf30=(($42+152)|0);
      HEAP32[(($zbuf30)>>2)]=0;
      var $43=$png_ptr;
      var $44=$43;
      var $45=$free_fn_addr;
      var $46=$mem_ptr_addr;
      _png_destroy_struct_2($44, $45, $46);
      $retval=0;
      __label__ = 21; break;
    case 20: 
      var $47=$png_ptr;
      var $zbuf32=(($47+152)|0);
      var $48=HEAP32[(($zbuf32)>>2)];
      var $49=$png_ptr;
      var $zstream33=(($49+96)|0);
      var $next_out=(($zstream33+12)|0);
      HEAP32[(($next_out)>>2)]=$48;
      var $50=$png_ptr;
      var $zbuf_size34=(($50+156)|0);
      var $51=HEAP32[(($zbuf_size34)>>2)];
      var $52=$png_ptr;
      var $zstream35=(($52+96)|0);
      var $avail_out=(($zstream35+16)|0);
      HEAP32[(($avail_out)>>2)]=$51;
      var $53=$png_ptr;
      _png_set_read_fn($53, 0, 0);
      var $54=$png_ptr;
      $retval=$54;
      __label__ = 21; break;
    case 21: 
      var $55=$retval;
      ;
      return $55;
    default: assert(0, "bad label: " + __label__);
  } } catch(e) { if (!e.longjmp) throw(e); setjmpTable[e.label](e.value) }
}
_png_create_read_struct_2["X"]=1;

function _png_read_info($png_ptr, $info_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length;
      var $chunk_name;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 95; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $3=$info_ptr_addr;
      _png_read_sig($2, $3);
      __label__ = 5; break;
    case 5: 
      var $4=$png_ptr_addr;
      var $call=_png_read_chunk_header($4);
      $length=$call;
      var $5=$png_ptr_addr;
      var $chunk_name2=(($5+232)|0);
      var $6=HEAP32[(($chunk_name2)>>2)];
      $chunk_name=$6;
      var $7=$chunk_name;
      var $cmp3=(($7)|0)==1229209940;
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $8=$png_ptr_addr;
      var $mode=(($8+84)|0);
      var $9=HEAP32[(($mode)>>2)];
      var $and=$9 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $10=$png_ptr_addr;
      var $mode6=(($10+84)|0);
      var $11=HEAP32[(($mode6)>>2)];
      var $or=$11 | 8192;
      HEAP32[(($mode6)>>2)]=$or;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $12=$chunk_name;
      var $cmp9=(($12)|0)==1229472850;
      if ($cmp9) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $13=$png_ptr_addr;
      var $14=$info_ptr_addr;
      var $15=$length;
      _png_handle_IHDR($13, $14, $15);
      __label__ = 94; break;
    case 11: 
      var $16=$chunk_name;
      var $cmp11=(($16)|0)==1229278788;
      if ($cmp11) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $17=$png_ptr_addr;
      var $18=$info_ptr_addr;
      var $19=$length;
      _png_handle_IEND($17, $18, $19);
      __label__ = 93; break;
    case 13: 
      var $20=$png_ptr_addr;
      var $21=$chunk_name;
      var $call14=_png_chunk_unknown_handling($20, $21);
      var $cmp15=(($call14)|0)!=0;
      if ($cmp15) { __label__ = 14; break; } else { __label__ = 28; break; }
    case 14: 
      var $22=$chunk_name;
      var $cmp17=(($22)|0)==1229209940;
      if ($cmp17) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $23=$png_ptr_addr;
      var $mode19=(($23+84)|0);
      var $24=HEAP32[(($mode19)>>2)];
      var $or20=$24 | 4;
      HEAP32[(($mode19)>>2)]=$or20;
      __label__ = 16; break;
    case 16: 
      var $25=$png_ptr_addr;
      var $26=$info_ptr_addr;
      var $27=$length;
      _png_handle_unknown($25, $26, $27);
      var $28=$chunk_name;
      var $cmp22=(($28)|0)==1347179589;
      if ($cmp22) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $29=$png_ptr_addr;
      var $mode24=(($29+84)|0);
      var $30=HEAP32[(($mode24)>>2)];
      var $or25=$30 | 2;
      HEAP32[(($mode24)>>2)]=$or25;
      __label__ = 27; break;
    case 18: 
      var $31=$chunk_name;
      var $cmp27=(($31)|0)==1229209940;
      if ($cmp27) { __label__ = 19; break; } else { __label__ = 26; break; }
    case 19: 
      var $32=$png_ptr_addr;
      var $mode29=(($32+84)|0);
      var $33=HEAP32[(($mode29)>>2)];
      var $and30=$33 & 1;
      var $tobool31=(($and30)|0)!=0;
      if ($tobool31) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $34=$png_ptr_addr;
      _png_error($34, ((STRING_TABLE.__str5679)|0));
      __label__ = 25; break;
    case 21: 
      var $35=$png_ptr_addr;
      var $color_type=(($35+291)|0);
      var $36=HEAPU8[($color_type)];
      var $conv=(($36)&255);
      var $cmp34=(($conv)|0)==3;
      if ($cmp34) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $37=$png_ptr_addr;
      var $mode36=(($37+84)|0);
      var $38=HEAP32[(($mode36)>>2)];
      var $and37=$38 & 2;
      var $tobool38=(($and37)|0)!=0;
      if ($tobool38) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: 
      var $39=$png_ptr_addr;
      _png_error($39, ((STRING_TABLE.__str6680)|0));
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 95; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 92; break;
    case 28: 
      var $40=$chunk_name;
      var $cmp45=(($40)|0)==1347179589;
      if ($cmp45) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $41=$png_ptr_addr;
      var $42=$info_ptr_addr;
      var $43=$length;
      _png_handle_PLTE($41, $42, $43);
      __label__ = 91; break;
    case 30: 
      var $44=$chunk_name;
      var $cmp49=(($44)|0)==1229209940;
      if ($cmp49) { __label__ = 31; break; } else { __label__ = 38; break; }
    case 31: 
      var $45=$png_ptr_addr;
      var $mode52=(($45+84)|0);
      var $46=HEAP32[(($mode52)>>2)];
      var $and53=$46 & 1;
      var $tobool54=(($and53)|0)!=0;
      if ($tobool54) { __label__ = 33; break; } else { __label__ = 32; break; }
    case 32: 
      var $47=$png_ptr_addr;
      _png_error($47, ((STRING_TABLE.__str5679)|0));
      __label__ = 37; break;
    case 33: 
      var $48=$png_ptr_addr;
      var $color_type57=(($48+291)|0);
      var $49=HEAPU8[($color_type57)];
      var $conv58=(($49)&255);
      var $cmp59=(($conv58)|0)==3;
      if ($cmp59) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: 
      var $50=$png_ptr_addr;
      var $mode62=(($50+84)|0);
      var $51=HEAP32[(($mode62)>>2)];
      var $and63=$51 & 2;
      var $tobool64=(($and63)|0)!=0;
      if ($tobool64) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $52=$png_ptr_addr;
      _png_error($52, ((STRING_TABLE.__str6680)|0));
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $53=$length;
      var $54=$png_ptr_addr;
      var $idat_size=(($54+264)|0);
      HEAP32[(($idat_size)>>2)]=$53;
      var $55=$png_ptr_addr;
      var $mode68=(($55+84)|0);
      var $56=HEAP32[(($mode68)>>2)];
      var $or69=$56 | 4;
      HEAP32[(($mode68)>>2)]=$or69;
      __label__ = 95; break;
    case 38: 
      var $57=$chunk_name;
      var $cmp71=(($57)|0)==1649100612;
      if ($cmp71) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $58=$png_ptr_addr;
      var $59=$info_ptr_addr;
      var $60=$length;
      _png_handle_bKGD($58, $59, $60);
      __label__ = 89; break;
    case 40: 
      var $61=$chunk_name;
      var $cmp75=(($61)|0)==1665684045;
      if ($cmp75) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $62=$png_ptr_addr;
      var $63=$info_ptr_addr;
      var $64=$length;
      _png_handle_cHRM($62, $63, $64);
      __label__ = 88; break;
    case 42: 
      var $65=$chunk_name;
      var $cmp79=(($65)|0)==1732332865;
      if ($cmp79) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $66=$png_ptr_addr;
      var $67=$info_ptr_addr;
      var $68=$length;
      _png_handle_gAMA($66, $67, $68);
      __label__ = 87; break;
    case 44: 
      var $69=$chunk_name;
      var $cmp83=(($69)|0)==1749635924;
      if ($cmp83) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $70=$png_ptr_addr;
      var $71=$info_ptr_addr;
      var $72=$length;
      _png_handle_hIST($70, $71, $72);
      __label__ = 86; break;
    case 46: 
      var $73=$chunk_name;
      var $cmp87=(($73)|0)==1866876531;
      if ($cmp87) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $74=$png_ptr_addr;
      var $75=$info_ptr_addr;
      var $76=$length;
      _png_handle_oFFs($74, $75, $76);
      __label__ = 85; break;
    case 48: 
      var $77=$chunk_name;
      var $cmp91=(($77)|0)==1883455820;
      if ($cmp91) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $78=$png_ptr_addr;
      var $79=$info_ptr_addr;
      var $80=$length;
      _png_handle_pCAL($78, $79, $80);
      __label__ = 84; break;
    case 50: 
      var $81=$chunk_name;
      var $cmp95=(($81)|0)==1933787468;
      if ($cmp95) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $82=$png_ptr_addr;
      var $83=$info_ptr_addr;
      var $84=$length;
      _png_handle_sCAL($82, $83, $84);
      __label__ = 83; break;
    case 52: 
      var $85=$chunk_name;
      var $cmp99=(($85)|0)==1883789683;
      if ($cmp99) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $86=$png_ptr_addr;
      var $87=$info_ptr_addr;
      var $88=$length;
      _png_handle_pHYs($86, $87, $88);
      __label__ = 82; break;
    case 54: 
      var $89=$chunk_name;
      var $cmp103=(($89)|0)==1933723988;
      if ($cmp103) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $90=$png_ptr_addr;
      var $91=$info_ptr_addr;
      var $92=$length;
      _png_handle_sBIT($90, $91, $92);
      __label__ = 81; break;
    case 56: 
      var $93=$chunk_name;
      var $cmp107=(($93)|0)==1934772034;
      if ($cmp107) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $94=$png_ptr_addr;
      var $95=$info_ptr_addr;
      var $96=$length;
      _png_handle_sRGB($94, $95, $96);
      __label__ = 80; break;
    case 58: 
      var $97=$chunk_name;
      var $cmp111=(($97)|0)==1766015824;
      if ($cmp111) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $98=$png_ptr_addr;
      var $99=$info_ptr_addr;
      var $100=$length;
      _png_handle_iCCP($98, $99, $100);
      __label__ = 79; break;
    case 60: 
      var $101=$chunk_name;
      var $cmp115=(($101)|0)==1934642260;
      if ($cmp115) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $102=$png_ptr_addr;
      var $103=$info_ptr_addr;
      var $104=$length;
      _png_handle_sPLT($102, $103, $104);
      __label__ = 78; break;
    case 62: 
      var $105=$chunk_name;
      var $cmp119=(($105)|0)==1950701684;
      if ($cmp119) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $106=$png_ptr_addr;
      var $107=$info_ptr_addr;
      var $108=$length;
      _png_handle_tEXt($106, $107, $108);
      __label__ = 77; break;
    case 64: 
      var $109=$chunk_name;
      var $cmp123=(($109)|0)==1950960965;
      if ($cmp123) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $110=$png_ptr_addr;
      var $111=$info_ptr_addr;
      var $112=$length;
      _png_handle_tIME($110, $111, $112);
      __label__ = 76; break;
    case 66: 
      var $113=$chunk_name;
      var $cmp127=(($113)|0)==1951551059;
      if ($cmp127) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $114=$png_ptr_addr;
      var $115=$info_ptr_addr;
      var $116=$length;
      _png_handle_tRNS($114, $115, $116);
      __label__ = 75; break;
    case 68: 
      var $117=$chunk_name;
      var $cmp131=(($117)|0)==2052348020;
      if ($cmp131) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $118=$png_ptr_addr;
      var $119=$info_ptr_addr;
      var $120=$length;
      _png_handle_zTXt($118, $119, $120);
      __label__ = 74; break;
    case 70: 
      var $121=$chunk_name;
      var $cmp135=(($121)|0)==1767135348;
      if ($cmp135) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $122=$png_ptr_addr;
      var $123=$info_ptr_addr;
      var $124=$length;
      _png_handle_iTXt($122, $123, $124);
      __label__ = 73; break;
    case 72: 
      var $125=$png_ptr_addr;
      var $126=$info_ptr_addr;
      var $127=$length;
      _png_handle_unknown($125, $126, $127);
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      __label__ = 80; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      __label__ = 83; break;
    case 83: 
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      __label__ = 91; break;
    case 91: 
      __label__ = 92; break;
    case 92: 
      __label__ = 93; break;
    case 93: 
      __label__ = 94; break;
    case 94: 
      __label__ = 5; break;
    case 95: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_info["X"]=1;

function _png_read_row($png_ptr, $row, $dsp_row) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $row_addr;
      var $dsp_row_addr;
      var $ret;
      var $row_info=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $row_addr=$row;
      $dsp_row_addr=$dsp_row;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 115; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $flags=(($1+88)|0);
      var $2=HEAP32[(($flags)>>2)];
      var $and=$2 & 64;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$png_ptr_addr;
      _png_read_start_row($3);
      __label__ = 5; break;
    case 5: 
      var $4=$png_ptr_addr;
      var $iwidth=(($4+224)|0);
      var $5=HEAP32[(($iwidth)>>2)];
      var $width=(($row_info)|0);
      HEAP32[(($width)>>2)]=$5;
      var $6=$png_ptr_addr;
      var $color_type=(($6+291)|0);
      var $7=HEAP8[($color_type)];
      var $color_type3=(($row_info+8)|0);
      HEAP8[($color_type3)]=$7;
      var $8=$png_ptr_addr;
      var $bit_depth=(($8+292)|0);
      var $9=HEAP8[($bit_depth)];
      var $bit_depth4=(($row_info+9)|0);
      HEAP8[($bit_depth4)]=$9;
      var $10=$png_ptr_addr;
      var $channels=(($10+295)|0);
      var $11=HEAP8[($channels)];
      var $channels5=(($row_info+10)|0);
      HEAP8[($channels5)]=$11;
      var $12=$png_ptr_addr;
      var $pixel_depth=(($12+294)|0);
      var $13=HEAP8[($pixel_depth)];
      var $pixel_depth6=(($row_info+11)|0);
      HEAP8[($pixel_depth6)]=$13;
      var $pixel_depth7=(($row_info+11)|0);
      var $14=HEAPU8[($pixel_depth7)];
      var $conv=(($14)&255);
      var $cmp8=(($conv)|0) >= 8;
      if ($cmp8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $width10=(($row_info)|0);
      var $15=HEAP32[(($width10)>>2)];
      var $pixel_depth11=(($row_info+11)|0);
      var $16=HEAPU8[($pixel_depth11)];
      var $conv12=(($16)&255);
      var $shr=$conv12 >>> 3;
      var $mul=(($15*$shr)|0);
      var $cond = $mul;__label__ = 8; break;
    case 7: 
      var $width13=(($row_info)|0);
      var $17=HEAP32[(($width13)>>2)];
      var $pixel_depth14=(($row_info+11)|0);
      var $18=HEAPU8[($pixel_depth14)];
      var $conv15=(($18)&255);
      var $mul16=(($17*$conv15)|0);
      var $add=(($mul16+7)|0);
      var $shr17=$add >>> 3;
      var $cond = $shr17;__label__ = 8; break;
    case 8: 
      var $cond;
      var $rowbytes=(($row_info+4)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      var $19=$png_ptr_addr;
      var $row_number=(($19+228)|0);
      var $20=HEAP32[(($row_number)>>2)];
      var $cmp18=(($20)|0)==0;
      if ($cmp18) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $21=$png_ptr_addr;
      var $pass=(($21+289)|0);
      var $22=HEAPU8[($pass)];
      var $conv20=(($22)&255);
      var $cmp21=(($conv20)|0)==0;
      if ($cmp21) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $23=$png_ptr_addr;
      var $interlaced=(($23+288)|0);
      var $24=HEAPU8[($interlaced)];
      var $conv25=(($24)&255);
      var $tobool26=(($conv25)|0)!=0;
      if ($tobool26) { __label__ = 12; break; } else { __label__ = 54; break; }
    case 12: 
      var $25=$png_ptr_addr;
      var $transformations=(($25+92)|0);
      var $26=HEAP32[(($transformations)>>2)];
      var $and28=$26 & 2;
      var $tobool29=(($and28)|0)!=0;
      if ($tobool29) { __label__ = 13; break; } else { __label__ = 54; break; }
    case 13: 
      var $27=$png_ptr_addr;
      var $pass31=(($27+289)|0);
      var $28=HEAPU8[($pass31)];
      var $conv32=(($28)&255);
      if ((($conv32)|0) == 0) {
        __label__ = 14; break;
      }
      else if ((($conv32)|0) == 1) {
        __label__ = 19; break;
      }
      else if ((($conv32)|0) == 2) {
        __label__ = 25; break;
      }
      else if ((($conv32)|0) == 3) {
        __label__ = 31; break;
      }
      else if ((($conv32)|0) == 4) {
        __label__ = 37; break;
      }
      else if ((($conv32)|0) == 5) {
        __label__ = 43; break;
      }
      else if ((($conv32)|0) == 6) {
        __label__ = 50; break;
      }
      else {
      __label__ = 49; break;
      }
      
    case 14: 
      var $29=$png_ptr_addr;
      var $row_number33=(($29+228)|0);
      var $30=HEAP32[(($row_number33)>>2)];
      var $and34=$30 & 7;
      var $tobool35=(($and34)|0)!=0;
      if ($tobool35) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $31=$dsp_row_addr;
      var $cmp37=(($31)|0)!=0;
      if ($cmp37) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $32=$png_ptr_addr;
      var $33=$dsp_row_addr;
      _png_combine_row($32, $33, 1);
      __label__ = 17; break;
    case 17: 
      var $34=$png_ptr_addr;
      _png_read_finish_row($34);
      __label__ = 115; break;
    case 18: 
      __label__ = 53; break;
    case 19: 
      var $35=$png_ptr_addr;
      var $row_number43=(($35+228)|0);
      var $36=HEAP32[(($row_number43)>>2)];
      var $and44=$36 & 7;
      var $tobool45=(($and44)|0)!=0;
      if ($tobool45) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $37=$png_ptr_addr;
      var $width46=(($37+204)|0);
      var $38=HEAPU32[(($width46)>>2)];
      var $cmp47=(($38)>>>0) < 5;
      if ($cmp47) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $39=$dsp_row_addr;
      var $cmp50=(($39)|0)!=0;
      if ($cmp50) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $40=$png_ptr_addr;
      var $41=$dsp_row_addr;
      _png_combine_row($40, $41, 1);
      __label__ = 23; break;
    case 23: 
      var $42=$png_ptr_addr;
      _png_read_finish_row($42);
      __label__ = 115; break;
    case 24: 
      __label__ = 53; break;
    case 25: 
      var $43=$png_ptr_addr;
      var $row_number56=(($43+228)|0);
      var $44=HEAP32[(($row_number56)>>2)];
      var $and57=$44 & 7;
      var $cmp58=(($and57)|0)!=4;
      if ($cmp58) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 26: 
      var $45=$dsp_row_addr;
      var $cmp61=(($45)|0)!=0;
      if ($cmp61) { __label__ = 27; break; } else { __label__ = 29; break; }
    case 27: 
      var $46=$png_ptr_addr;
      var $row_number64=(($46+228)|0);
      var $47=HEAP32[(($row_number64)>>2)];
      var $and65=$47 & 4;
      var $tobool66=(($and65)|0)!=0;
      if ($tobool66) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $48=$png_ptr_addr;
      var $49=$dsp_row_addr;
      _png_combine_row($48, $49, 1);
      __label__ = 29; break;
    case 29: 
      var $50=$png_ptr_addr;
      _png_read_finish_row($50);
      __label__ = 115; break;
    case 30: 
      __label__ = 53; break;
    case 31: 
      var $51=$png_ptr_addr;
      var $row_number71=(($51+228)|0);
      var $52=HEAP32[(($row_number71)>>2)];
      var $and72=$52 & 3;
      var $tobool73=(($and72)|0)!=0;
      if ($tobool73) { __label__ = 33; break; } else { __label__ = 32; break; }
    case 32: 
      var $53=$png_ptr_addr;
      var $width75=(($53+204)|0);
      var $54=HEAPU32[(($width75)>>2)];
      var $cmp76=(($54)>>>0) < 3;
      if ($cmp76) { __label__ = 33; break; } else { __label__ = 36; break; }
    case 33: 
      var $55=$dsp_row_addr;
      var $cmp79=(($55)|0)!=0;
      if ($cmp79) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $56=$png_ptr_addr;
      var $57=$dsp_row_addr;
      _png_combine_row($56, $57, 1);
      __label__ = 35; break;
    case 35: 
      var $58=$png_ptr_addr;
      _png_read_finish_row($58);
      __label__ = 115; break;
    case 36: 
      __label__ = 53; break;
    case 37: 
      var $59=$png_ptr_addr;
      var $row_number85=(($59+228)|0);
      var $60=HEAP32[(($row_number85)>>2)];
      var $and86=$60 & 3;
      var $cmp87=(($and86)|0)!=2;
      if ($cmp87) { __label__ = 38; break; } else { __label__ = 42; break; }
    case 38: 
      var $61=$dsp_row_addr;
      var $cmp90=(($61)|0)!=0;
      if ($cmp90) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 39: 
      var $62=$png_ptr_addr;
      var $row_number93=(($62+228)|0);
      var $63=HEAP32[(($row_number93)>>2)];
      var $and94=$63 & 2;
      var $tobool95=(($and94)|0)!=0;
      if ($tobool95) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $64=$png_ptr_addr;
      var $65=$dsp_row_addr;
      _png_combine_row($64, $65, 1);
      __label__ = 41; break;
    case 41: 
      var $66=$png_ptr_addr;
      _png_read_finish_row($66);
      __label__ = 115; break;
    case 42: 
      __label__ = 53; break;
    case 43: 
      var $67=$png_ptr_addr;
      var $row_number100=(($67+228)|0);
      var $68=HEAP32[(($row_number100)>>2)];
      var $and101=$68 & 1;
      var $tobool102=(($and101)|0)!=0;
      if ($tobool102) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $69=$png_ptr_addr;
      var $width104=(($69+204)|0);
      var $70=HEAPU32[(($width104)>>2)];
      var $cmp105=(($70)>>>0) < 2;
      if ($cmp105) { __label__ = 45; break; } else { __label__ = 48; break; }
    case 45: 
      var $71=$dsp_row_addr;
      var $cmp108=(($71)|0)!=0;
      if ($cmp108) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $72=$png_ptr_addr;
      var $73=$dsp_row_addr;
      _png_combine_row($72, $73, 1);
      __label__ = 47; break;
    case 47: 
      var $74=$png_ptr_addr;
      _png_read_finish_row($74);
      __label__ = 115; break;
    case 48: 
      __label__ = 53; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $75=$png_ptr_addr;
      var $row_number114=(($75+228)|0);
      var $76=HEAP32[(($row_number114)>>2)];
      var $and115=$76 & 1;
      var $tobool116=(($and115)|0)!=0;
      if ($tobool116) { __label__ = 52; break; } else { __label__ = 51; break; }
    case 51: 
      var $77=$png_ptr_addr;
      _png_read_finish_row($77);
      __label__ = 115; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $78=$png_ptr_addr;
      var $mode=(($78+84)|0);
      var $79=HEAP32[(($mode)>>2)];
      var $and120=$79 & 4;
      var $tobool121=(($and120)|0)!=0;
      if ($tobool121) { __label__ = 56; break; } else { __label__ = 55; break; }
    case 55: 
      var $80=$png_ptr_addr;
      _png_error($80, ((STRING_TABLE.__str7681)|0));
      __label__ = 56; break;
    case 56: 
      var $81=$png_ptr_addr;
      var $row_buf=(($81+240)|0);
      var $82=HEAP32[(($row_buf)>>2)];
      var $83=$png_ptr_addr;
      var $zstream=(($83+96)|0);
      var $next_out=(($zstream+12)|0);
      HEAP32[(($next_out)>>2)]=$82;
      var $84=$png_ptr_addr;
      var $pixel_depth124=(($84+294)|0);
      var $85=HEAPU8[($pixel_depth124)];
      var $conv125=(($85)&255);
      var $cmp126=(($conv125)|0) >= 8;
      if ($cmp126) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $86=$png_ptr_addr;
      var $iwidth129=(($86+224)|0);
      var $87=HEAP32[(($iwidth129)>>2)];
      var $88=$png_ptr_addr;
      var $pixel_depth130=(($88+294)|0);
      var $89=HEAPU8[($pixel_depth130)];
      var $conv131=(($89)&255);
      var $shr132=$conv131 >>> 3;
      var $mul133=(($87*$shr132)|0);
      var $cond142 = $mul133;__label__ = 59; break;
    case 58: 
      var $90=$png_ptr_addr;
      var $iwidth135=(($90+224)|0);
      var $91=HEAP32[(($iwidth135)>>2)];
      var $92=$png_ptr_addr;
      var $pixel_depth136=(($92+294)|0);
      var $93=HEAPU8[($pixel_depth136)];
      var $conv137=(($93)&255);
      var $mul138=(($91*$conv137)|0);
      var $add139=(($mul138+7)|0);
      var $shr140=$add139 >>> 3;
      var $cond142 = $shr140;__label__ = 59; break;
    case 59: 
      var $cond142;
      var $add143=(($cond142+1)|0);
      var $94=$png_ptr_addr;
      var $zstream144=(($94+96)|0);
      var $avail_out=(($zstream144+16)|0);
      HEAP32[(($avail_out)>>2)]=$add143;
      __label__ = 60; break;
    case 60: 
      var $95=$png_ptr_addr;
      var $zstream145=(($95+96)|0);
      var $avail_in=(($zstream145+4)|0);
      var $96=HEAP32[(($avail_in)>>2)];
      var $tobool146=(($96)|0)!=0;
      if ($tobool146) { __label__ = 69; break; } else { __label__ = 61; break; }
    case 61: 
      __label__ = 62; break;
    case 62: 
      var $97=$png_ptr_addr;
      var $idat_size=(($97+264)|0);
      var $98=HEAP32[(($idat_size)>>2)];
      var $tobool148=(($98)|0)!=0;
      var $lnot=$tobool148 ^ 1;
      if ($lnot) { __label__ = 63; break; } else { __label__ = 66; break; }
    case 63: 
      var $99=$png_ptr_addr;
      var $call=_png_crc_finish($99, 0);
      var $100=$png_ptr_addr;
      var $call149=_png_read_chunk_header($100);
      var $101=$png_ptr_addr;
      var $idat_size150=(($101+264)|0);
      HEAP32[(($idat_size150)>>2)]=$call149;
      var $102=$png_ptr_addr;
      var $chunk_name=(($102+232)|0);
      var $103=HEAP32[(($chunk_name)>>2)];
      var $cmp151=(($103)|0)!=1229209940;
      if ($cmp151) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $104=$png_ptr_addr;
      _png_error($104, ((STRING_TABLE.__str8682)|0));
      __label__ = 65; break;
    case 65: 
      __label__ = 62; break;
    case 66: 
      var $105=$png_ptr_addr;
      var $zbuf_size=(($105+156)|0);
      var $106=HEAP32[(($zbuf_size)>>2)];
      var $107=$png_ptr_addr;
      var $zstream155=(($107+96)|0);
      var $avail_in156=(($zstream155+4)|0);
      HEAP32[(($avail_in156)>>2)]=$106;
      var $108=$png_ptr_addr;
      var $zbuf=(($108+152)|0);
      var $109=HEAP32[(($zbuf)>>2)];
      var $110=$png_ptr_addr;
      var $zstream157=(($110+96)|0);
      var $next_in=(($zstream157)|0);
      HEAP32[(($next_in)>>2)]=$109;
      var $111=$png_ptr_addr;
      var $zbuf_size158=(($111+156)|0);
      var $112=HEAPU32[(($zbuf_size158)>>2)];
      var $113=$png_ptr_addr;
      var $idat_size159=(($113+264)|0);
      var $114=HEAPU32[(($idat_size159)>>2)];
      var $cmp160=(($112)>>>0) > (($114)>>>0);
      if ($cmp160) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $115=$png_ptr_addr;
      var $idat_size163=(($115+264)|0);
      var $116=HEAP32[(($idat_size163)>>2)];
      var $117=$png_ptr_addr;
      var $zstream164=(($117+96)|0);
      var $avail_in165=(($zstream164+4)|0);
      HEAP32[(($avail_in165)>>2)]=$116;
      __label__ = 68; break;
    case 68: 
      var $118=$png_ptr_addr;
      var $119=$png_ptr_addr;
      var $zbuf167=(($119+152)|0);
      var $120=HEAP32[(($zbuf167)>>2)];
      var $121=$png_ptr_addr;
      var $zstream168=(($121+96)|0);
      var $avail_in169=(($zstream168+4)|0);
      var $122=HEAP32[(($avail_in169)>>2)];
      _png_crc_read($118, $120, $122);
      var $123=$png_ptr_addr;
      var $zstream170=(($123+96)|0);
      var $avail_in171=(($zstream170+4)|0);
      var $124=HEAP32[(($avail_in171)>>2)];
      var $125=$png_ptr_addr;
      var $idat_size172=(($125+264)|0);
      var $126=HEAP32[(($idat_size172)>>2)];
      var $sub=(($126-$124)|0);
      HEAP32[(($idat_size172)>>2)]=$sub;
      __label__ = 69; break;
    case 69: 
      var $127=$png_ptr_addr;
      var $zstream174=(($127+96)|0);
      var $call175=_inflate($zstream174, 1);
      $ret=$call175;
      var $128=$ret;
      var $cmp176=(($128)|0)==1;
      if ($cmp176) { __label__ = 70; break; } else { __label__ = 75; break; }
    case 70: 
      var $129=$png_ptr_addr;
      var $zstream179=(($129+96)|0);
      var $avail_out180=(($zstream179+16)|0);
      var $130=HEAP32[(($avail_out180)>>2)];
      var $tobool181=(($130)|0)!=0;
      if ($tobool181) { __label__ = 73; break; } else { __label__ = 71; break; }
    case 71: 
      var $131=$png_ptr_addr;
      var $zstream183=(($131+96)|0);
      var $avail_in184=(($zstream183+4)|0);
      var $132=HEAP32[(($avail_in184)>>2)];
      var $tobool185=(($132)|0)!=0;
      if ($tobool185) { __label__ = 73; break; } else { __label__ = 72; break; }
    case 72: 
      var $133=$png_ptr_addr;
      var $idat_size187=(($133+264)|0);
      var $134=HEAP32[(($idat_size187)>>2)];
      var $tobool188=(($134)|0)!=0;
      if ($tobool188) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $135=$png_ptr_addr;
      _png_benign_error($135, ((STRING_TABLE.__str9683)|0));
      __label__ = 74; break;
    case 74: 
      var $136=$png_ptr_addr;
      var $mode191=(($136+84)|0);
      var $137=HEAP32[(($mode191)>>2)];
      var $or=$137 | 8;
      HEAP32[(($mode191)>>2)]=$or;
      var $138=$png_ptr_addr;
      var $flags192=(($138+88)|0);
      var $139=HEAP32[(($flags192)>>2)];
      var $or193=$139 | 32;
      HEAP32[(($flags192)>>2)]=$or193;
      __label__ = 82; break;
    case 75: 
      var $140=$ret;
      var $cmp195=(($140)|0)!=0;
      if ($cmp195) { __label__ = 76; break; } else { __label__ = 80; break; }
    case 76: 
      var $141=$png_ptr_addr;
      var $142=$png_ptr_addr;
      var $zstream198=(($142+96)|0);
      var $msg=(($zstream198+24)|0);
      var $143=HEAP32[(($msg)>>2)];
      var $tobool199=(($143)|0)!=0;
      if ($tobool199) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $144=$png_ptr_addr;
      var $zstream201=(($144+96)|0);
      var $msg202=(($zstream201+24)|0);
      var $145=HEAP32[(($msg202)>>2)];
      var $cond205 = $145;__label__ = 79; break;
    case 78: 
      var $cond205 = ((STRING_TABLE.__str10684)|0);__label__ = 79; break;
    case 79: 
      var $cond205;
      _png_error($141, $cond205);
      __label__ = 80; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      var $146=$png_ptr_addr;
      var $zstream207=(($146+96)|0);
      var $avail_out208=(($zstream207+16)|0);
      var $147=HEAP32[(($avail_out208)>>2)];
      var $tobool209=(($147)|0)!=0;
      if ($tobool209) { __label__ = 60; break; } else { __label__ = 82; break; }
    case 82: 
      var $148=$png_ptr_addr;
      var $row_buf210=(($148+240)|0);
      var $149=HEAP32[(($row_buf210)>>2)];
      var $arrayidx=(($149)|0);
      var $150=HEAPU8[($arrayidx)];
      var $conv211=(($150)&255);
      var $cmp212=(($conv211)|0) > 0;
      if ($cmp212) { __label__ = 83; break; } else { __label__ = 87; break; }
    case 83: 
      var $151=$png_ptr_addr;
      var $row_buf215=(($151+240)|0);
      var $152=HEAP32[(($row_buf215)>>2)];
      var $arrayidx216=(($152)|0);
      var $153=HEAPU8[($arrayidx216)];
      var $conv217=(($153)&255);
      var $cmp218=(($conv217)|0) < 5;
      if ($cmp218) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $154=$png_ptr_addr;
      var $155=$png_ptr_addr;
      var $row_buf221=(($155+240)|0);
      var $156=HEAP32[(($row_buf221)>>2)];
      var $add_ptr=(($156+1)|0);
      var $157=$png_ptr_addr;
      var $prev_row=(($157+236)|0);
      var $158=HEAP32[(($prev_row)>>2)];
      var $add_ptr222=(($158+1)|0);
      var $159=$png_ptr_addr;
      var $row_buf223=(($159+240)|0);
      var $160=HEAP32[(($row_buf223)>>2)];
      var $arrayidx224=(($160)|0);
      var $161=HEAPU8[($arrayidx224)];
      var $conv225=(($161)&255);
      _png_read_filter_row($154, $row_info, $add_ptr, $add_ptr222, $conv225);
      __label__ = 86; break;
    case 85: 
      var $162=$png_ptr_addr;
      _png_error($162, ((STRING_TABLE.__str11685)|0));
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      var $163=$png_ptr_addr;
      var $prev_row228=(($163+236)|0);
      var $164=HEAP32[(($prev_row228)>>2)];
      var $165=$png_ptr_addr;
      var $row_buf229=(($165+240)|0);
      var $166=HEAP32[(($row_buf229)>>2)];
      var $rowbytes230=(($row_info+4)|0);
      var $167=HEAP32[(($rowbytes230)>>2)];
      var $add231=(($167+1)|0);
      assert($add231 % 1 === 0, 'memcpy given ' + $add231 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($164, $166, $add231, 1);
      var $168=$png_ptr_addr;
      var $mng_features_permitted=(($168+576)|0);
      var $169=HEAP32[(($mng_features_permitted)>>2)];
      var $and232=$169 & 4;
      var $tobool233=(($and232)|0)!=0;
      if ($tobool233) { __label__ = 88; break; } else { __label__ = 90; break; }
    case 88: 
      var $170=$png_ptr_addr;
      var $filter_type=(($170+580)|0);
      var $171=HEAPU8[($filter_type)];
      var $conv235=(($171)&255);
      var $cmp236=(($conv235)|0)==64;
      if ($cmp236) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: 
      var $172=$png_ptr_addr;
      var $row_buf239=(($172+240)|0);
      var $173=HEAP32[(($row_buf239)>>2)];
      var $add_ptr240=(($173+1)|0);
      _png_do_read_intrapixel($row_info, $add_ptr240);
      __label__ = 90; break;
    case 90: 
      var $174=$png_ptr_addr;
      var $transformations242=(($174+92)|0);
      var $175=HEAP32[(($transformations242)>>2)];
      var $tobool243=(($175)|0)!=0;
      if ($tobool243) { __label__ = 91; break; } else { __label__ = 92; break; }
    case 91: 
      var $176=$png_ptr_addr;
      _png_do_read_transformations($176, $row_info);
      __label__ = 92; break;
    case 92: 
      var $177=$png_ptr_addr;
      var $transformed_pixel_depth=(($177+299)|0);
      var $178=HEAPU8[($transformed_pixel_depth)];
      var $conv246=(($178)&255);
      var $cmp247=(($conv246)|0)==0;
      if ($cmp247) { __label__ = 93; break; } else { __label__ = 96; break; }
    case 93: 
      var $pixel_depth250=(($row_info+11)|0);
      var $179=HEAP8[($pixel_depth250)];
      var $180=$png_ptr_addr;
      var $transformed_pixel_depth251=(($180+299)|0);
      HEAP8[($transformed_pixel_depth251)]=$179;
      var $pixel_depth252=(($row_info+11)|0);
      var $181=HEAPU8[($pixel_depth252)];
      var $conv253=(($181)&255);
      var $182=$png_ptr_addr;
      var $maximum_pixel_depth=(($182+298)|0);
      var $183=HEAPU8[($maximum_pixel_depth)];
      var $conv254=(($183)&255);
      var $cmp255=(($conv253)|0) > (($conv254)|0);
      if ($cmp255) { __label__ = 94; break; } else { __label__ = 95; break; }
    case 94: 
      var $184=$png_ptr_addr;
      _png_error($184, ((STRING_TABLE.__str12686)|0));
      __label__ = 95; break;
    case 95: 
      __label__ = 99; break;
    case 96: 
      var $185=$png_ptr_addr;
      var $transformed_pixel_depth260=(($185+299)|0);
      var $186=HEAPU8[($transformed_pixel_depth260)];
      var $conv261=(($186)&255);
      var $pixel_depth262=(($row_info+11)|0);
      var $187=HEAPU8[($pixel_depth262)];
      var $conv263=(($187)&255);
      var $cmp264=(($conv261)|0)!=(($conv263)|0);
      if ($cmp264) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: 
      var $188=$png_ptr_addr;
      _png_error($188, ((STRING_TABLE.__str13687)|0));
      __label__ = 98; break;
    case 98: 
      __label__ = 99; break;
    case 99: 
      var $189=$png_ptr_addr;
      var $interlaced269=(($189+288)|0);
      var $190=HEAPU8[($interlaced269)];
      var $conv270=(($190)&255);
      var $tobool271=(($conv270)|0)!=0;
      if ($tobool271) { __label__ = 100; break; } else { __label__ = 108; break; }
    case 100: 
      var $191=$png_ptr_addr;
      var $transformations273=(($191+92)|0);
      var $192=HEAP32[(($transformations273)>>2)];
      var $and274=$192 & 2;
      var $tobool275=(($and274)|0)!=0;
      if ($tobool275) { __label__ = 101; break; } else { __label__ = 108; break; }
    case 101: 
      var $193=$png_ptr_addr;
      var $pass277=(($193+289)|0);
      var $194=HEAPU8[($pass277)];
      var $conv278=(($194)&255);
      var $cmp279=(($conv278)|0) < 6;
      if ($cmp279) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: 
      var $195=$png_ptr_addr;
      var $row_buf282=(($195+240)|0);
      var $196=HEAP32[(($row_buf282)>>2)];
      var $add_ptr283=(($196+1)|0);
      var $197=$png_ptr_addr;
      var $pass284=(($197+289)|0);
      var $198=HEAPU8[($pass284)];
      var $conv285=(($198)&255);
      var $199=$png_ptr_addr;
      var $transformations286=(($199+92)|0);
      var $200=HEAP32[(($transformations286)>>2)];
      _png_do_read_interlace($row_info, $add_ptr283, $conv285, $200);
      __label__ = 103; break;
    case 103: 
      var $201=$dsp_row_addr;
      var $cmp288=(($201)|0)!=0;
      if ($cmp288) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      var $202=$png_ptr_addr;
      var $203=$dsp_row_addr;
      _png_combine_row($202, $203, 1);
      __label__ = 105; break;
    case 105: 
      var $204=$row_addr;
      var $cmp292=(($204)|0)!=0;
      if ($cmp292) { __label__ = 106; break; } else { __label__ = 107; break; }
    case 106: 
      var $205=$png_ptr_addr;
      var $206=$row_addr;
      _png_combine_row($205, $206, 0);
      __label__ = 107; break;
    case 107: 
      __label__ = 113; break;
    case 108: 
      var $207=$row_addr;
      var $cmp297=(($207)|0)!=0;
      if ($cmp297) { __label__ = 109; break; } else { __label__ = 110; break; }
    case 109: 
      var $208=$png_ptr_addr;
      var $209=$row_addr;
      _png_combine_row($208, $209, -1);
      __label__ = 110; break;
    case 110: 
      var $210=$dsp_row_addr;
      var $cmp301=(($210)|0)!=0;
      if ($cmp301) { __label__ = 111; break; } else { __label__ = 112; break; }
    case 111: 
      var $211=$png_ptr_addr;
      var $212=$dsp_row_addr;
      _png_combine_row($211, $212, -1);
      __label__ = 112; break;
    case 112: 
      __label__ = 113; break;
    case 113: 
      var $213=$png_ptr_addr;
      _png_read_finish_row($213);
      var $214=$png_ptr_addr;
      var $read_row_fn=(($214+412)|0);
      var $215=HEAP32[(($read_row_fn)>>2)];
      var $cmp306=(($215)|0)!=0;
      if ($cmp306) { __label__ = 114; break; } else { __label__ = 115; break; }
    case 114: 
      var $216=$png_ptr_addr;
      var $read_row_fn309=(($216+412)|0);
      var $217=HEAP32[(($read_row_fn309)>>2)];
      var $218=$png_ptr_addr;
      var $219=$png_ptr_addr;
      var $row_number310=(($219+228)|0);
      var $220=HEAP32[(($row_number310)>>2)];
      var $221=$png_ptr_addr;
      var $pass311=(($221+289)|0);
      var $222=HEAPU8[($pass311)];
      var $conv312=(($222)&255);
      FUNCTION_TABLE[$217]($218, $220, $conv312);
      __label__ = 115; break;
    case 115: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_row["X"]=1;

function _png_read_end($png_ptr, $info_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length;
      var $chunk_name;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 85; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $call=_png_crc_finish($1, 0);
      var $2=$png_ptr_addr;
      var $color_type=(($2+291)|0);
      var $3=HEAPU8[($color_type)];
      var $conv=(($3)&255);
      var $cmp1=(($conv)|0)==3;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$png_ptr_addr;
      var $num_palette_max=(($4+280)|0);
      var $5=HEAP32[(($num_palette_max)>>2)];
      var $6=$png_ptr_addr;
      var $num_palette=(($6+276)|0);
      var $7=HEAPU16[(($num_palette)>>1)];
      var $conv3=(($7)&65535);
      var $cmp4=(($5)|0) > (($conv3)|0);
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$png_ptr_addr;
      _png_benign_error($8, ((STRING_TABLE.__str15689)|0));
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $9=$png_ptr_addr;
      var $call8=_png_read_chunk_header($9);
      $length=$call8;
      var $10=$png_ptr_addr;
      var $chunk_name9=(($10+232)|0);
      var $11=HEAP32[(($chunk_name9)>>2)];
      $chunk_name=$11;
      var $12=$chunk_name;
      var $cmp10=(($12)|0)==1229472850;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $13=$png_ptr_addr;
      var $14=$info_ptr_addr;
      var $15=$length;
      _png_handle_IHDR($13, $14, $15);
      __label__ = 83; break;
    case 9: 
      var $16=$chunk_name;
      var $cmp13=(($16)|0)==1229278788;
      if ($cmp13) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $17=$png_ptr_addr;
      var $18=$info_ptr_addr;
      var $19=$length;
      _png_handle_IEND($17, $18, $19);
      __label__ = 82; break;
    case 11: 
      var $20=$png_ptr_addr;
      var $21=$chunk_name;
      var $call17=_png_chunk_unknown_handling($20, $21);
      var $cmp18=(($call17)|0)!=0;
      if ($cmp18) { __label__ = 12; break; } else { __label__ = 20; break; }
    case 12: 
      var $22=$chunk_name;
      var $cmp21=(($22)|0)==1229209940;
      if ($cmp21) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $23=$length;
      var $cmp24=(($23)>>>0) > 0;
      if ($cmp24) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $24=$png_ptr_addr;
      var $mode=(($24+84)|0);
      var $25=HEAP32[(($mode)>>2)];
      var $and=$25 & 8192;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $26=$png_ptr_addr;
      _png_benign_error($26, ((STRING_TABLE.__str16690)|0));
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $27=$png_ptr_addr;
      var $28=$info_ptr_addr;
      var $29=$length;
      _png_handle_unknown($27, $28, $29);
      var $30=$chunk_name;
      var $cmp29=(($30)|0)==1347179589;
      if ($cmp29) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $31=$png_ptr_addr;
      var $mode32=(($31+84)|0);
      var $32=HEAP32[(($mode32)>>2)];
      var $or=$32 | 2;
      HEAP32[(($mode32)>>2)]=$or;
      __label__ = 19; break;
    case 19: 
      __label__ = 81; break;
    case 20: 
      var $33=$chunk_name;
      var $cmp35=(($33)|0)==1229209940;
      if ($cmp35) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $34=$length;
      var $cmp38=(($34)>>>0) > 0;
      if ($cmp38) { __label__ = 23; break; } else { __label__ = 22; break; }
    case 22: 
      var $35=$png_ptr_addr;
      var $mode41=(($35+84)|0);
      var $36=HEAP32[(($mode41)>>2)];
      var $and42=$36 & 8192;
      var $tobool43=(($and42)|0)!=0;
      if ($tobool43) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $37=$png_ptr_addr;
      _png_benign_error($37, ((STRING_TABLE.__str16690)|0));
      __label__ = 24; break;
    case 24: 
      var $38=$png_ptr_addr;
      var $39=$length;
      var $call46=_png_crc_finish($38, $39);
      __label__ = 80; break;
    case 25: 
      var $40=$chunk_name;
      var $cmp48=(($40)|0)==1347179589;
      if ($cmp48) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $41=$png_ptr_addr;
      var $42=$info_ptr_addr;
      var $43=$length;
      _png_handle_PLTE($41, $42, $43);
      __label__ = 79; break;
    case 27: 
      var $44=$chunk_name;
      var $cmp52=(($44)|0)==1649100612;
      if ($cmp52) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $45=$png_ptr_addr;
      var $46=$info_ptr_addr;
      var $47=$length;
      _png_handle_bKGD($45, $46, $47);
      __label__ = 78; break;
    case 29: 
      var $48=$chunk_name;
      var $cmp56=(($48)|0)==1665684045;
      if ($cmp56) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $49=$png_ptr_addr;
      var $50=$info_ptr_addr;
      var $51=$length;
      _png_handle_cHRM($49, $50, $51);
      __label__ = 77; break;
    case 31: 
      var $52=$chunk_name;
      var $cmp60=(($52)|0)==1732332865;
      if ($cmp60) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $53=$png_ptr_addr;
      var $54=$info_ptr_addr;
      var $55=$length;
      _png_handle_gAMA($53, $54, $55);
      __label__ = 76; break;
    case 33: 
      var $56=$chunk_name;
      var $cmp64=(($56)|0)==1749635924;
      if ($cmp64) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $57=$png_ptr_addr;
      var $58=$info_ptr_addr;
      var $59=$length;
      _png_handle_hIST($57, $58, $59);
      __label__ = 75; break;
    case 35: 
      var $60=$chunk_name;
      var $cmp68=(($60)|0)==1866876531;
      if ($cmp68) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $61=$png_ptr_addr;
      var $62=$info_ptr_addr;
      var $63=$length;
      _png_handle_oFFs($61, $62, $63);
      __label__ = 74; break;
    case 37: 
      var $64=$chunk_name;
      var $cmp72=(($64)|0)==1883455820;
      if ($cmp72) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $65=$png_ptr_addr;
      var $66=$info_ptr_addr;
      var $67=$length;
      _png_handle_pCAL($65, $66, $67);
      __label__ = 73; break;
    case 39: 
      var $68=$chunk_name;
      var $cmp76=(($68)|0)==1933787468;
      if ($cmp76) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $69=$png_ptr_addr;
      var $70=$info_ptr_addr;
      var $71=$length;
      _png_handle_sCAL($69, $70, $71);
      __label__ = 72; break;
    case 41: 
      var $72=$chunk_name;
      var $cmp80=(($72)|0)==1883789683;
      if ($cmp80) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $73=$png_ptr_addr;
      var $74=$info_ptr_addr;
      var $75=$length;
      _png_handle_pHYs($73, $74, $75);
      __label__ = 71; break;
    case 43: 
      var $76=$chunk_name;
      var $cmp84=(($76)|0)==1933723988;
      if ($cmp84) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $77=$png_ptr_addr;
      var $78=$info_ptr_addr;
      var $79=$length;
      _png_handle_sBIT($77, $78, $79);
      __label__ = 70; break;
    case 45: 
      var $80=$chunk_name;
      var $cmp88=(($80)|0)==1934772034;
      if ($cmp88) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $81=$png_ptr_addr;
      var $82=$info_ptr_addr;
      var $83=$length;
      _png_handle_sRGB($81, $82, $83);
      __label__ = 69; break;
    case 47: 
      var $84=$chunk_name;
      var $cmp92=(($84)|0)==1766015824;
      if ($cmp92) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $85=$png_ptr_addr;
      var $86=$info_ptr_addr;
      var $87=$length;
      _png_handle_iCCP($85, $86, $87);
      __label__ = 68; break;
    case 49: 
      var $88=$chunk_name;
      var $cmp96=(($88)|0)==1934642260;
      if ($cmp96) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $89=$png_ptr_addr;
      var $90=$info_ptr_addr;
      var $91=$length;
      _png_handle_sPLT($89, $90, $91);
      __label__ = 67; break;
    case 51: 
      var $92=$chunk_name;
      var $cmp100=(($92)|0)==1950701684;
      if ($cmp100) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $93=$png_ptr_addr;
      var $94=$info_ptr_addr;
      var $95=$length;
      _png_handle_tEXt($93, $94, $95);
      __label__ = 66; break;
    case 53: 
      var $96=$chunk_name;
      var $cmp104=(($96)|0)==1950960965;
      if ($cmp104) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $97=$png_ptr_addr;
      var $98=$info_ptr_addr;
      var $99=$length;
      _png_handle_tIME($97, $98, $99);
      __label__ = 65; break;
    case 55: 
      var $100=$chunk_name;
      var $cmp108=(($100)|0)==1951551059;
      if ($cmp108) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $101=$png_ptr_addr;
      var $102=$info_ptr_addr;
      var $103=$length;
      _png_handle_tRNS($101, $102, $103);
      __label__ = 64; break;
    case 57: 
      var $104=$chunk_name;
      var $cmp112=(($104)|0)==2052348020;
      if ($cmp112) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $105=$png_ptr_addr;
      var $106=$info_ptr_addr;
      var $107=$length;
      _png_handle_zTXt($105, $106, $107);
      __label__ = 63; break;
    case 59: 
      var $108=$chunk_name;
      var $cmp116=(($108)|0)==1767135348;
      if ($cmp116) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $109=$png_ptr_addr;
      var $110=$info_ptr_addr;
      var $111=$length;
      _png_handle_iTXt($109, $110, $111);
      __label__ = 62; break;
    case 61: 
      var $112=$png_ptr_addr;
      var $113=$info_ptr_addr;
      var $114=$length;
      _png_handle_unknown($112, $113, $114);
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      __label__ = 80; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      __label__ = 83; break;
    case 83: 
      __label__ = 84; break;
    case 84: 
      var $115=$png_ptr_addr;
      var $mode142=(($115+84)|0);
      var $116=HEAP32[(($mode142)>>2)];
      var $and143=$116 & 16;
      var $tobool144=(($and143)|0)!=0;
      var $lnot=$tobool144 ^ 1;
      if ($lnot) { __label__ = 7; break; } else { __label__ = 85; break; }
    case 85: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_end["X"]=1;

function _png_destroy_read_struct($png_ptr_ptr, $info_ptr_ptr, $end_info_ptr_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_ptr_addr;
      var $info_ptr_ptr_addr;
      var $end_info_ptr_ptr_addr;
      var $png_ptr;
      var $info_ptr;
      var $end_info_ptr;
      var $free_fn;
      var $mem_ptr;
      $png_ptr_ptr_addr=$png_ptr_ptr;
      $info_ptr_ptr_addr=$info_ptr_ptr;
      $end_info_ptr_ptr_addr=$end_info_ptr_ptr;
      $png_ptr=0;
      $info_ptr=0;
      $end_info_ptr=0;
      $free_fn=0;
      $mem_ptr=0;
      var $0=$png_ptr_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_ptr_addr;
      var $2=HEAP32[(($1)>>2)];
      $png_ptr=$2;
      __label__ = 3; break;
    case 3: 
      var $3=$png_ptr;
      var $cmp1=(($3)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 15; break;
    case 5: 
      var $4=$png_ptr;
      var $free_fn4=(($4+592)|0);
      var $5=HEAP32[(($free_fn4)>>2)];
      $free_fn=$5;
      var $6=$png_ptr;
      var $mem_ptr5=(($6+584)|0);
      var $7=HEAP32[(($mem_ptr5)>>2)];
      $mem_ptr=$7;
      var $8=$info_ptr_ptr_addr;
      var $cmp6=(($8)|0)!=0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $9=$info_ptr_ptr_addr;
      var $10=HEAP32[(($9)>>2)];
      $info_ptr=$10;
      __label__ = 7; break;
    case 7: 
      var $11=$end_info_ptr_ptr_addr;
      var $cmp9=(($11)|0)!=0;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $12=$end_info_ptr_ptr_addr;
      var $13=HEAP32[(($12)>>2)];
      $end_info_ptr=$13;
      __label__ = 9; break;
    case 9: 
      var $14=$png_ptr;
      var $15=$info_ptr;
      var $16=$end_info_ptr;
      _png_read_destroy($14, $15, $16);
      var $17=$info_ptr;
      var $cmp12=(($17)|0)!=0;
      if ($cmp12) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $18=$png_ptr;
      var $19=$info_ptr;
      _png_free_data($18, $19, 16384, -1);
      var $20=$info_ptr;
      var $21=$20;
      var $22=$free_fn;
      var $23=$mem_ptr;
      _png_destroy_struct_2($21, $22, $23);
      var $24=$info_ptr_ptr_addr;
      HEAP32[(($24)>>2)]=0;
      __label__ = 11; break;
    case 11: 
      var $25=$end_info_ptr;
      var $cmp15=(($25)|0)!=0;
      if ($cmp15) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $26=$png_ptr;
      var $27=$end_info_ptr;
      _png_free_data($26, $27, 16384, -1);
      var $28=$end_info_ptr;
      var $29=$28;
      var $30=$free_fn;
      var $31=$mem_ptr;
      _png_destroy_struct_2($29, $30, $31);
      var $32=$end_info_ptr_ptr_addr;
      HEAP32[(($32)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      var $33=$png_ptr;
      var $cmp18=(($33)|0)!=0;
      if ($cmp18) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $34=$png_ptr;
      var $35=$34;
      var $36=$free_fn;
      var $37=$mem_ptr;
      _png_destroy_struct_2($35, $36, $37);
      var $38=$png_ptr_ptr_addr;
      HEAP32[(($38)>>2)]=0;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_destroy_read_struct["X"]=1;

function _png_read_destroy($png_ptr, $info_ptr, $end_info_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $end_info_ptr_addr;
      var $tmp_jmp=__stackBase__;
      var $error_fn;
      var $warning_fn;
      var $error_ptr;
      var $free_fn;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $end_info_ptr_addr=$end_info_ptr;
      var $0=$info_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $2=$info_ptr_addr;
      _png_info_destroy($1, $2);
      __label__ = 3; break;
    case 3: 
      var $3=$end_info_ptr_addr;
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$png_ptr_addr;
      var $5=$end_info_ptr_addr;
      _png_info_destroy($4, $5);
      __label__ = 5; break;
    case 5: 
      var $6=$png_ptr_addr;
      _png_destroy_gamma_table($6);
      var $7=$png_ptr_addr;
      var $8=$png_ptr_addr;
      var $zbuf=(($8+152)|0);
      var $9=HEAP32[(($zbuf)>>2)];
      _png_free($7, $9);
      var $10=$png_ptr_addr;
      var $11=$png_ptr_addr;
      var $big_row_buf=(($11+596)|0);
      var $12=HEAP32[(($big_row_buf)>>2)];
      _png_free($10, $12);
      var $13=$png_ptr_addr;
      var $14=$png_ptr_addr;
      var $big_prev_row=(($14+664)|0);
      var $15=HEAP32[(($big_prev_row)>>2)];
      _png_free($13, $15);
      var $16=$png_ptr_addr;
      var $17=$png_ptr_addr;
      var $chunkdata=(($17+656)|0);
      var $18=HEAP32[(($chunkdata)>>2)];
      _png_free($16, $18);
      var $19=$png_ptr_addr;
      var $20=$png_ptr_addr;
      var $palette_lookup=(($20+480)|0);
      var $21=HEAP32[(($palette_lookup)>>2)];
      _png_free($19, $21);
      var $22=$png_ptr_addr;
      var $23=$png_ptr_addr;
      var $quantize_index=(($23+484)|0);
      var $24=HEAP32[(($quantize_index)>>2)];
      _png_free($22, $24);
      var $25=$png_ptr_addr;
      var $free_me=(($25+548)|0);
      var $26=HEAP32[(($free_me)>>2)];
      var $and=$26 & 4096;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $27=$png_ptr_addr;
      var $28=$27;
      var $29=$png_ptr_addr;
      var $palette=(($29+272)|0);
      var $30=HEAP32[(($palette)>>2)];
      var $31=$30;
      _png_zfree($28, $31);
      __label__ = 7; break;
    case 7: 
      var $32=$png_ptr_addr;
      var $free_me6=(($32+548)|0);
      var $33=HEAP32[(($free_me6)>>2)];
      var $and7=$33 & -4097;
      HEAP32[(($free_me6)>>2)]=$and7;
      var $34=$png_ptr_addr;
      var $free_me8=(($34+548)|0);
      var $35=HEAP32[(($free_me8)>>2)];
      var $and9=$35 & 8192;
      var $tobool10=(($and9)|0)!=0;
      if ($tobool10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $36=$png_ptr_addr;
      var $37=$png_ptr_addr;
      var $trans_alpha=(($37+396)|0);
      var $38=HEAP32[(($trans_alpha)>>2)];
      _png_free($36, $38);
      __label__ = 9; break;
    case 9: 
      var $39=$png_ptr_addr;
      var $free_me13=(($39+548)|0);
      var $40=HEAP32[(($free_me13)>>2)];
      var $and14=$40 & -8193;
      HEAP32[(($free_me13)>>2)]=$and14;
      var $41=$png_ptr_addr;
      var $free_me15=(($41+548)|0);
      var $42=HEAP32[(($free_me15)>>2)];
      var $and16=$42 & 8;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $43=$png_ptr_addr;
      var $44=$png_ptr_addr;
      var $hist=(($44+488)|0);
      var $45=HEAP32[(($hist)>>2)];
      var $46=$45;
      _png_free($43, $46);
      __label__ = 11; break;
    case 11: 
      var $47=$png_ptr_addr;
      var $free_me20=(($47+548)|0);
      var $48=HEAP32[(($free_me20)>>2)];
      var $and21=$48 & -9;
      HEAP32[(($free_me20)>>2)]=$and21;
      var $49=$png_ptr_addr;
      var $zstream=(($49+96)|0);
      var $call=_inflateEnd($zstream);
      var $50=$png_ptr_addr;
      var $51=$png_ptr_addr;
      var $save_buffer=(($51+436)|0);
      var $52=HEAP32[(($save_buffer)>>2)];
      _png_free($50, $52);
      var $arraydecay=(($tmp_jmp)|0);
      var $53=$arraydecay;
      var $54=$png_ptr_addr;
      var $longjmp_buffer=(($54)|0);
      var $arraydecay22=(($longjmp_buffer)|0);
      var $55=$arraydecay22;
      assert(40 % 1 === 0, 'memcpy given ' + 40 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($53, $55, 40, 1);
      var $56=$png_ptr_addr;
      var $error_fn23=(($56+44)|0);
      var $57=HEAP32[(($error_fn23)>>2)];
      $error_fn=$57;
      var $58=$png_ptr_addr;
      var $warning_fn24=(($58+48)|0);
      var $59=HEAP32[(($warning_fn24)>>2)];
      $warning_fn=$59;
      var $60=$png_ptr_addr;
      var $error_ptr25=(($60+52)|0);
      var $61=HEAP32[(($error_ptr25)>>2)];
      $error_ptr=$61;
      var $62=$png_ptr_addr;
      var $free_fn26=(($62+592)|0);
      var $63=HEAP32[(($free_fn26)>>2)];
      $free_fn=$63;
      var $64=$png_ptr_addr;
      var $65=$64;
      _memset($65, 0, 684, 1);
      var $66=$error_fn;
      var $67=$png_ptr_addr;
      var $error_fn27=(($67+44)|0);
      HEAP32[(($error_fn27)>>2)]=$66;
      var $68=$warning_fn;
      var $69=$png_ptr_addr;
      var $warning_fn28=(($69+48)|0);
      HEAP32[(($warning_fn28)>>2)]=$68;
      var $70=$error_ptr;
      var $71=$png_ptr_addr;
      var $error_ptr29=(($71+52)|0);
      HEAP32[(($error_ptr29)>>2)]=$70;
      var $72=$free_fn;
      var $73=$png_ptr_addr;
      var $free_fn30=(($73+592)|0);
      HEAP32[(($free_fn30)>>2)]=$72;
      var $74=$png_ptr_addr;
      var $longjmp_buffer31=(($74)|0);
      var $arraydecay32=(($longjmp_buffer31)|0);
      var $75=$arraydecay32;
      var $arraydecay33=(($tmp_jmp)|0);
      var $76=$arraydecay33;
      assert(40 % 1 === 0, 'memcpy given ' + 40 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($75, $76, 40, 1);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_destroy["X"]=1;

function _png_read_data($png_ptr, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $data_addr;
      var $length_addr;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $read_data_fn=(($0+60)|0);
      var $read_data_fn1=$read_data_fn;
      var $1=HEAP32[(($read_data_fn1)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $read_data_fn2=(($2+60)|0);
      var $read_data_fn3=$read_data_fn2;
      var $3=HEAP32[(($read_data_fn3)>>2)];
      var $4=$png_ptr_addr;
      var $5=$data_addr;
      var $6=$length_addr;
      FUNCTION_TABLE[$3]($4, $5, $6);
      __label__ = 4; break;
    case 3: 
      var $7=$png_ptr_addr;
      _png_error($7, ((STRING_TABLE.__str704)|0));
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_default_read_data($png_ptr, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $data_addr;
      var $length_addr;
      var $check;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 5; break;
    case 3: 
      var $1=$data_addr;
      var $2=$length_addr;
      var $3=$png_ptr_addr;
      var $io_ptr=(($3+64)|0);
      var $4=HEAP32[(($io_ptr)>>2)];
      var $5=$4;
      var $call=_fread($1, 1, $2, $5);
      $check=$call;
      var $6=$check;
      var $7=$length_addr;
      var $cmp1=(($6)|0)!=(($7)|0);
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $8=$png_ptr_addr;
      _png_error($8, ((STRING_TABLE.__str1705)|0));
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_read_fn($png_ptr, $io_ptr, $read_data_fn) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $io_ptr_addr;
      var $read_data_fn_addr;
      $png_ptr_addr=$png_ptr;
      $io_ptr_addr=$io_ptr;
      $read_data_fn_addr=$read_data_fn;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 9; break;
    case 3: 
      var $1=$io_ptr_addr;
      var $2=$png_ptr_addr;
      var $io_ptr1=(($2+64)|0);
      HEAP32[(($io_ptr1)>>2)]=$1;
      var $3=$read_data_fn_addr;
      var $cmp2=(($3)|0)!=0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$read_data_fn_addr;
      var $5=$png_ptr_addr;
      var $read_data_fn4=(($5+60)|0);
      var $read_data_fn5=$read_data_fn4;
      HEAP32[(($read_data_fn5)>>2)]=$4;
      __label__ = 6; break;
    case 5: 
      var $6=$png_ptr_addr;
      var $read_data_fn6=(($6+60)|0);
      var $read_data_fn7=$read_data_fn6;
      HEAP32[(($read_data_fn7)>>2)]=14;
      __label__ = 6; break;
    case 6: 
      var $7=$png_ptr_addr;
      var $write_data_fn=(($7+56)|0);
      var $write_data_fn9=$write_data_fn;
      var $8=HEAP32[(($write_data_fn9)>>2)];
      var $cmp10=(($8)|0)!=0;
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $9=$png_ptr_addr;
      var $write_data_fn12=(($9+56)|0);
      var $write_data_fn13=$write_data_fn12;
      HEAP32[(($write_data_fn13)>>2)]=0;
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str2706)|0));
      __label__ = 8; break;
    case 8: 
      var $11=$png_ptr_addr;
      var $output_flush_fn=(($11+336)|0);
      HEAP32[(($output_flush_fn)>>2)]=0;
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_strip_alpha($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $transformations=(($1+92)|0);
      var $2=HEAP32[(($transformations)>>2)];
      var $or=$2 | 262144;
      HEAP32[(($transformations)>>2)]=$or;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_expand($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $transformations=(($1+92)|0);
      var $2=HEAP32[(($transformations)>>2)];
      var $or=$2 | 33558528;
      HEAP32[(($transformations)>>2)]=$or;
      var $3=$png_ptr_addr;
      var $flags=(($3+88)|0);
      var $4=HEAP32[(($flags)>>2)];
      var $and=$4 & -65;
      HEAP32[(($flags)>>2)]=$and;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_expand_gray_1_2_4_to_8($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $transformations=(($1+92)|0);
      var $2=HEAP32[(($transformations)>>2)];
      var $or=$2 | 4096;
      HEAP32[(($transformations)>>2)]=$or;
      var $3=$png_ptr_addr;
      var $flags=(($3+88)|0);
      var $4=HEAP32[(($flags)>>2)];
      var $and=$4 & -65;
      HEAP32[(($flags)>>2)]=$and;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_crc_action($png_ptr, $crit_action, $ancil_action) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $crit_action_addr;
      var $ancil_action_addr;
      $png_ptr_addr=$png_ptr;
      $crit_action_addr=$crit_action;
      $ancil_action_addr=$ancil_action;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 15; break;
    case 3: 
      var $1=$crit_action_addr;
      if ((($1)|0) == 3) {
        __label__ = 4; break;
      }
      else if ((($1)|0) == 4) {
        __label__ = 5; break;
      }
      else if ((($1)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($1)|0) == 1 || (($1)|0) == 0) {
        __label__ = 7; break;
      }
      else if ((($1)|0) == 5) {
        __label__ = 9; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 4: 
      var $2=$png_ptr_addr;
      var $flags=(($2+88)|0);
      var $3=HEAP32[(($flags)>>2)];
      var $and=$3 & -3073;
      HEAP32[(($flags)>>2)]=$and;
      var $4=$png_ptr_addr;
      var $flags1=(($4+88)|0);
      var $5=HEAP32[(($flags1)>>2)];
      var $or=$5 | 1024;
      HEAP32[(($flags1)>>2)]=$or;
      __label__ = 9; break;
    case 5: 
      var $6=$png_ptr_addr;
      var $flags3=(($6+88)|0);
      var $7=HEAP32[(($flags3)>>2)];
      var $and4=$7 & -3073;
      HEAP32[(($flags3)>>2)]=$and4;
      var $8=$png_ptr_addr;
      var $flags5=(($8+88)|0);
      var $9=HEAP32[(($flags5)>>2)];
      var $or6=$9 | 3072;
      HEAP32[(($flags5)>>2)]=$or6;
      __label__ = 9; break;
    case 6: 
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str709)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $11=$png_ptr_addr;
      var $flags9=(($11+88)|0);
      var $12=HEAP32[(($flags9)>>2)];
      var $and10=$12 & -3073;
      HEAP32[(($flags9)>>2)]=$and10;
      __label__ = 9; break;
    case 9: 
      var $13=$ancil_action_addr;
      if ((($13)|0) == 3) {
        __label__ = 10; break;
      }
      else if ((($13)|0) == 4) {
        __label__ = 11; break;
      }
      else if ((($13)|0) == 1) {
        __label__ = 12; break;
      }
      else if ((($13)|0) == 2 || (($13)|0) == 0) {
        __label__ = 13; break;
      }
      else if ((($13)|0) == 5) {
        __label__ = 15; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 10: 
      var $14=$png_ptr_addr;
      var $flags12=(($14+88)|0);
      var $15=HEAP32[(($flags12)>>2)];
      var $and13=$15 & -769;
      HEAP32[(($flags12)>>2)]=$and13;
      var $16=$png_ptr_addr;
      var $flags14=(($16+88)|0);
      var $17=HEAP32[(($flags14)>>2)];
      var $or15=$17 | 256;
      HEAP32[(($flags14)>>2)]=$or15;
      __label__ = 15; break;
    case 11: 
      var $18=$png_ptr_addr;
      var $flags17=(($18+88)|0);
      var $19=HEAP32[(($flags17)>>2)];
      var $and18=$19 & -769;
      HEAP32[(($flags17)>>2)]=$and18;
      var $20=$png_ptr_addr;
      var $flags19=(($20+88)|0);
      var $21=HEAP32[(($flags19)>>2)];
      var $or20=$21 | 768;
      HEAP32[(($flags19)>>2)]=$or20;
      __label__ = 15; break;
    case 12: 
      var $22=$png_ptr_addr;
      var $flags22=(($22+88)|0);
      var $23=HEAP32[(($flags22)>>2)];
      var $and23=$23 & -769;
      HEAP32[(($flags22)>>2)]=$and23;
      var $24=$png_ptr_addr;
      var $flags24=(($24+88)|0);
      var $25=HEAP32[(($flags24)>>2)];
      var $or25=$25 | 512;
      HEAP32[(($flags24)>>2)]=$or25;
      __label__ = 15; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $26=$png_ptr_addr;
      var $flags28=(($26+88)|0);
      var $27=HEAP32[(($flags28)>>2)];
      var $and29=$27 & -769;
      HEAP32[(($flags28)>>2)]=$and29;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_crc_action["X"]=1;

function _png_set_gray_to_rgb($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      _png_set_expand_gray_1_2_4_to_8($1);
      var $2=$png_ptr_addr;
      var $transformations=(($2+92)|0);
      var $3=HEAP32[(($transformations)>>2)];
      var $or=$3 | 16384;
      HEAP32[(($transformations)>>2)]=$or;
      var $4=$png_ptr_addr;
      var $flags=(($4+88)|0);
      var $5=HEAP32[(($flags)>>2)];
      var $and=$5 & -65;
      HEAP32[(($flags)>>2)]=$and;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_rgb_to_gray_fixed($png_ptr, $error_action, $red, $green) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $error_action_addr;
      var $red_addr;
      var $green_addr;
      var $red_int;
      var $green_int;
      $png_ptr_addr=$png_ptr;
      $error_action_addr=$error_action;
      $red_addr=$red;
      $green_addr=$green;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 21; break;
    case 3: 
      var $1=$error_action_addr;
      if ((($1)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($1)|0) == 2) {
        __label__ = 5; break;
      }
      else if ((($1)|0) == 3) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 4: 
      var $2=$png_ptr_addr;
      var $transformations=(($2+92)|0);
      var $3=HEAP32[(($transformations)>>2)];
      var $or=$3 | 6291456;
      HEAP32[(($transformations)>>2)]=$or;
      __label__ = 8; break;
    case 5: 
      var $4=$png_ptr_addr;
      var $transformations2=(($4+92)|0);
      var $5=HEAP32[(($transformations2)>>2)];
      var $or3=$5 | 4194304;
      HEAP32[(($transformations2)>>2)]=$or3;
      __label__ = 8; break;
    case 6: 
      var $6=$png_ptr_addr;
      var $transformations5=(($6+92)|0);
      var $7=HEAP32[(($transformations5)>>2)];
      var $or6=$7 | 2097152;
      HEAP32[(($transformations5)>>2)]=$or6;
      __label__ = 8; break;
    case 7: 
      var $8=$png_ptr_addr;
      _png_error($8, ((STRING_TABLE.__str6715)|0));
      __label__ = 8; break;
    case 8: 
      var $9=$png_ptr_addr;
      var $color_type=(($9+291)|0);
      var $10=HEAPU8[($color_type)];
      var $conv=(($10)&255);
      var $cmp7=(($conv)|0)==3;
      if ($cmp7) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $11=$png_ptr_addr;
      var $transformations10=(($11+92)|0);
      var $12=HEAP32[(($transformations10)>>2)];
      var $or11=$12 | 4096;
      HEAP32[(($transformations10)>>2)]=$or11;
      __label__ = 10; break;
    case 10: 
      var $13=$red_addr;
      var $cmp13=(($13)|0) >= 0;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $14=$green_addr;
      var $cmp15=(($14)|0) >= 0;
      if ($cmp15) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $15=$red_addr;
      var $16=$green_addr;
      var $add=(($15+$16)|0);
      var $cmp18=(($add)|0) <= 100000;
      if ($cmp18) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $17=$red_addr;
      var $mul=((($17<<15))|0);
      var $div=Math.floor((($mul)>>>0)/100000);
      var $conv21=(($div) & 65535);
      $red_int=$conv21;
      var $18=$green_addr;
      var $mul22=((($18<<15))|0);
      var $div23=Math.floor((($mul22)>>>0)/100000);
      var $conv24=(($div23) & 65535);
      $green_int=$conv24;
      var $19=$red_int;
      var $20=$png_ptr_addr;
      var $rgb_to_gray_red_coeff=(($20+572)|0);
      HEAP16[(($rgb_to_gray_red_coeff)>>1)]=$19;
      var $21=$green_int;
      var $22=$png_ptr_addr;
      var $rgb_to_gray_green_coeff=(($22+574)|0);
      HEAP16[(($rgb_to_gray_green_coeff)>>1)]=$21;
      var $23=$png_ptr_addr;
      var $rgb_to_gray_coefficients_set=(($23+570)|0);
      HEAP8[($rgb_to_gray_coefficients_set)]=1;
      __label__ = 21; break;
    case 14: 
      var $24=$red_addr;
      var $cmp25=(($24)|0) >= 0;
      if ($cmp25) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $25=$green_addr;
      var $cmp28=(($25)|0) >= 0;
      if ($cmp28) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $26=$png_ptr_addr;
      _png_warning($26, ((STRING_TABLE.__str7716)|0));
      __label__ = 17; break;
    case 17: 
      var $27=$png_ptr_addr;
      var $rgb_to_gray_red_coeff32=(($27+572)|0);
      var $28=HEAPU16[(($rgb_to_gray_red_coeff32)>>1)];
      var $conv33=(($28)&65535);
      var $cmp34=(($conv33)|0)==0;
      if ($cmp34) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $29=$png_ptr_addr;
      var $rgb_to_gray_green_coeff37=(($29+574)|0);
      var $30=HEAPU16[(($rgb_to_gray_green_coeff37)>>1)];
      var $conv38=(($30)&65535);
      var $cmp39=(($conv38)|0)==0;
      if ($cmp39) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $31=$png_ptr_addr;
      var $rgb_to_gray_red_coeff42=(($31+572)|0);
      HEAP16[(($rgb_to_gray_red_coeff42)>>1)]=6968;
      var $32=$png_ptr_addr;
      var $rgb_to_gray_green_coeff43=(($32+574)|0);
      HEAP16[(($rgb_to_gray_green_coeff43)>>1)]=23434;
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_rgb_to_gray_fixed["X"]=1;

function _png_init_read_transformations($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $gamma_correction;
      var $back=__stackBase__;
      var $back_1=__stackBase__+4;
      var $palette;
      var $num_palette;
      var $i;
      var $g;
      var $gs;
      var $v;
      var $w;
      var $temp;
      var $temp428;
      var $temp466;
      var $gs_sig;
      var $g_sig;
      var $g526;
      var $gs527;
      var $palette671;
      var $num_palette673;
      var $i676;
      var $i719;
      var $istop;
      var $back722=__stackBase__+8;
      var $palette723;
      var $temp755;
      var $temp787;
      var $temp819;
      var $i873;
      var $istop874;
      var $shift;
      var $component;
      var $component919;
      var $component947;
      $png_ptr_addr=$png_ptr;
      $gamma_correction=0;
      var $0=$png_ptr_addr;
      var $gamma=(($0+352)|0);
      var $1=HEAP32[(($gamma)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $screen_gamma=(($2+356)|0);
      var $3=HEAP32[(($screen_gamma)>>2)];
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$png_ptr_addr;
      var $gamma3=(($4+352)|0);
      var $5=HEAP32[(($gamma3)>>2)];
      var $6=$png_ptr_addr;
      var $screen_gamma4=(($6+356)|0);
      var $7=HEAP32[(($screen_gamma4)>>2)];
      var $call=_png_gamma_threshold($5, $7);
      $gamma_correction=$call;
      __label__ = 5; break;
    case 4: 
      var $8=$png_ptr_addr;
      var $gamma5=(($8+352)|0);
      var $9=HEAP32[(($gamma5)>>2)];
      var $call6=_png_reciprocal($9);
      var $10=$png_ptr_addr;
      var $screen_gamma7=(($10+356)|0);
      HEAP32[(($screen_gamma7)>>2)]=$call6;
      __label__ = 5; break;
    case 5: 
      __label__ = 10; break;
    case 6: 
      var $11=$png_ptr_addr;
      var $screen_gamma9=(($11+356)|0);
      var $12=HEAP32[(($screen_gamma9)>>2)];
      var $cmp10=(($12)|0)!=0;
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $13=$png_ptr_addr;
      var $screen_gamma12=(($13+356)|0);
      var $14=HEAP32[(($screen_gamma12)>>2)];
      var $call13=_png_reciprocal($14);
      var $15=$png_ptr_addr;
      var $gamma14=(($15+352)|0);
      HEAP32[(($gamma14)>>2)]=$call13;
      __label__ = 9; break;
    case 8: 
      var $16=$png_ptr_addr;
      var $gamma16=(($16+352)|0);
      HEAP32[(($gamma16)>>2)]=100000;
      var $17=$png_ptr_addr;
      var $screen_gamma17=(($17+356)|0);
      HEAP32[(($screen_gamma17)>>2)]=100000;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $18=$gamma_correction;
      var $tobool=(($18)|0)!=0;
      if ($tobool) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $19=$png_ptr_addr;
      var $transformations=(($19+92)|0);
      var $20=HEAP32[(($transformations)>>2)];
      var $or=$20 | 8192;
      HEAP32[(($transformations)>>2)]=$or;
      __label__ = 13; break;
    case 12: 
      var $21=$png_ptr_addr;
      var $transformations22=(($21+92)|0);
      var $22=HEAP32[(($transformations22)>>2)];
      var $and=$22 & -8193;
      HEAP32[(($transformations22)>>2)]=$and;
      __label__ = 13; break;
    case 13: 
      var $23=$png_ptr_addr;
      var $transformations24=(($23+92)|0);
      var $24=HEAP32[(($transformations24)>>2)];
      var $and25=$24 & 262144;
      var $tobool26=(($and25)|0)!=0;
      if ($tobool26) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $25=$png_ptr_addr;
      var $transformations27=(($25+92)|0);
      var $26=HEAP32[(($transformations27)>>2)];
      var $and28=$26 & 128;
      var $tobool29=(($and28)|0)!=0;
      if ($tobool29) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $27=$png_ptr_addr;
      var $transformations31=(($27+92)|0);
      var $28=HEAP32[(($transformations31)>>2)];
      var $and32=$28 & -41943297;
      HEAP32[(($transformations31)>>2)]=$and32;
      var $29=$png_ptr_addr;
      var $flags=(($29+88)|0);
      var $30=HEAP32[(($flags)>>2)];
      var $and33=$30 & -8193;
      HEAP32[(($flags)>>2)]=$and33;
      var $31=$png_ptr_addr;
      var $num_trans=(($31+284)|0);
      HEAP16[(($num_trans)>>1)]=0;
      __label__ = 16; break;
    case 16: 
      var $32=$png_ptr_addr;
      var $screen_gamma35=(($32+356)|0);
      var $33=HEAP32[(($screen_gamma35)>>2)];
      var $call36=_png_gamma_significant($33);
      var $tobool37=(($call36)|0)!=0;
      if ($tobool37) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $34=$png_ptr_addr;
      var $transformations39=(($34+92)|0);
      var $35=HEAP32[(($transformations39)>>2)];
      var $and40=$35 & -8388609;
      HEAP32[(($transformations39)>>2)]=$and40;
      var $36=$png_ptr_addr;
      var $flags41=(($36+88)|0);
      var $37=HEAP32[(($flags41)>>2)];
      var $and42=$37 & -8193;
      HEAP32[(($flags41)>>2)]=$and42;
      __label__ = 18; break;
    case 18: 
      var $38=$png_ptr_addr;
      var $transformations44=(($38+92)|0);
      var $39=HEAP32[(($transformations44)>>2)];
      var $and45=$39 & 256;
      var $tobool46=(($and45)|0)!=0;
      if ($tobool46) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $40=$png_ptr_addr;
      var $color_type=(($40+291)|0);
      var $41=HEAPU8[($color_type)];
      var $conv=(($41)&255);
      var $and48=$conv & 2;
      var $tobool49=(($and48)|0)!=0;
      if ($tobool49) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $42=$png_ptr_addr;
      var $mode=(($42+84)|0);
      var $43=HEAP32[(($mode)>>2)];
      var $or51=$43 | 2048;
      HEAP32[(($mode)>>2)]=$or51;
      __label__ = 21; break;
    case 21: 
      __label__ = 30; break;
    case 22: 
      var $44=$png_ptr_addr;
      var $transformations54=(($44+92)|0);
      var $45=HEAP32[(($transformations54)>>2)];
      var $and55=$45 & 128;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { __label__ = 23; break; } else { __label__ = 29; break; }
    case 23: 
      var $46=$png_ptr_addr;
      var $transformations58=(($46+92)|0);
      var $47=HEAP32[(($transformations58)>>2)];
      var $and59=$47 & 16384;
      var $tobool60=(($and59)|0)!=0;
      if ($tobool60) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: 
      var $48=$png_ptr_addr;
      var $background=(($48+316)|0);
      var $red=(($background+2)|0);
      var $49=HEAPU16[(($red)>>1)];
      var $conv62=(($49)&65535);
      var $50=$png_ptr_addr;
      var $background63=(($50+316)|0);
      var $green=(($background63+4)|0);
      var $51=HEAPU16[(($green)>>1)];
      var $conv64=(($51)&65535);
      var $cmp65=(($conv62)|0)==(($conv64)|0);
      if ($cmp65) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $52=$png_ptr_addr;
      var $background68=(($52+316)|0);
      var $red69=(($background68+2)|0);
      var $53=HEAPU16[(($red69)>>1)];
      var $conv70=(($53)&65535);
      var $54=$png_ptr_addr;
      var $background71=(($54+316)|0);
      var $blue=(($background71+6)|0);
      var $55=HEAPU16[(($blue)>>1)];
      var $conv72=(($55)&65535);
      var $cmp73=(($conv70)|0)==(($conv72)|0);
      if ($cmp73) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $56=$png_ptr_addr;
      var $mode76=(($56+84)|0);
      var $57=HEAP32[(($mode76)>>2)];
      var $or77=$57 | 2048;
      HEAP32[(($mode76)>>2)]=$or77;
      var $58=$png_ptr_addr;
      var $background78=(($58+316)|0);
      var $red79=(($background78+2)|0);
      var $59=HEAP16[(($red79)>>1)];
      var $60=$png_ptr_addr;
      var $background80=(($60+316)|0);
      var $gray=(($background80+8)|0);
      HEAP16[(($gray)>>1)]=$59;
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $61=$png_ptr_addr;
      var $color_type85=(($61+291)|0);
      var $62=HEAPU8[($color_type85)];
      var $conv86=(($62)&255);
      var $cmp87=(($conv86)|0)==3;
      if ($cmp87) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $63=$png_ptr_addr;
      _png_init_palette_transformations($63);
      __label__ = 33; break;
    case 32: 
      var $64=$png_ptr_addr;
      _png_init_rgb_transformations($64);
      __label__ = 33; break;
    case 33: 
      var $65=$png_ptr_addr;
      var $transformations92=(($65+92)|0);
      var $66=HEAP32[(($transformations92)>>2)];
      var $and93=$66 & 512;
      var $tobool94=(($and93)|0)!=0;
      if ($tobool94) { __label__ = 34; break; } else { __label__ = 38; break; }
    case 34: 
      var $67=$png_ptr_addr;
      var $transformations96=(($67+92)|0);
      var $68=HEAP32[(($transformations96)>>2)];
      var $and97=$68 & 128;
      var $tobool98=(($and97)|0)!=0;
      if ($tobool98) { __label__ = 35; break; } else { __label__ = 38; break; }
    case 35: 
      var $69=$png_ptr_addr;
      var $transformations100=(($69+92)|0);
      var $70=HEAP32[(($transformations100)>>2)];
      var $and101=$70 & 256;
      var $tobool102=(($and101)|0)!=0;
      if ($tobool102) { __label__ = 38; break; } else { __label__ = 36; break; }
    case 36: 
      var $71=$png_ptr_addr;
      var $bit_depth=(($71+292)|0);
      var $72=HEAPU8[($bit_depth)];
      var $conv104=(($72)&255);
      var $cmp105=(($conv104)|0)!=16;
      if ($cmp105) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $73=$png_ptr_addr;
      var $background108=(($73+316)|0);
      var $red109=(($background108+2)|0);
      var $74=HEAPU16[(($red109)>>1)];
      var $conv110=(($74)&65535);
      var $mul=(($conv110*255)|0);
      var $add=(($mul+32895)|0);
      var $shr=$add >>> 16;
      var $conv111=(($shr) & 65535);
      var $75=$png_ptr_addr;
      var $background112=(($75+316)|0);
      var $red113=(($background112+2)|0);
      HEAP16[(($red113)>>1)]=$conv111;
      var $76=$png_ptr_addr;
      var $background114=(($76+316)|0);
      var $green115=(($background114+4)|0);
      var $77=HEAPU16[(($green115)>>1)];
      var $conv116=(($77)&65535);
      var $mul117=(($conv116*255)|0);
      var $add118=(($mul117+32895)|0);
      var $shr119=$add118 >>> 16;
      var $conv120=(($shr119) & 65535);
      var $78=$png_ptr_addr;
      var $background121=(($78+316)|0);
      var $green122=(($background121+4)|0);
      HEAP16[(($green122)>>1)]=$conv120;
      var $79=$png_ptr_addr;
      var $background123=(($79+316)|0);
      var $blue124=(($background123+6)|0);
      var $80=HEAPU16[(($blue124)>>1)];
      var $conv125=(($80)&65535);
      var $mul126=(($conv125*255)|0);
      var $add127=(($mul126+32895)|0);
      var $shr128=$add127 >>> 16;
      var $conv129=(($shr128) & 65535);
      var $81=$png_ptr_addr;
      var $background130=(($81+316)|0);
      var $blue131=(($background130+6)|0);
      HEAP16[(($blue131)>>1)]=$conv129;
      var $82=$png_ptr_addr;
      var $background132=(($82+316)|0);
      var $gray133=(($background132+8)|0);
      var $83=HEAPU16[(($gray133)>>1)];
      var $conv134=(($83)&65535);
      var $mul135=(($conv134*255)|0);
      var $add136=(($mul135+32895)|0);
      var $shr137=$add136 >>> 16;
      var $conv138=(($shr137) & 65535);
      var $84=$png_ptr_addr;
      var $background139=(($84+316)|0);
      var $gray140=(($background139+8)|0);
      HEAP16[(($gray140)>>1)]=$conv138;
      __label__ = 38; break;
    case 38: 
      var $85=$png_ptr_addr;
      var $transformations142=(($85+92)|0);
      var $86=HEAP32[(($transformations142)>>2)];
      var $and143=$86 & 67109888;
      var $tobool144=(($and143)|0)!=0;
      if ($tobool144) { __label__ = 39; break; } else { __label__ = 43; break; }
    case 39: 
      var $87=$png_ptr_addr;
      var $transformations146=(($87+92)|0);
      var $88=HEAP32[(($transformations146)>>2)];
      var $and147=$88 & 128;
      var $tobool148=(($and147)|0)!=0;
      if ($tobool148) { __label__ = 40; break; } else { __label__ = 43; break; }
    case 40: 
      var $89=$png_ptr_addr;
      var $transformations150=(($89+92)|0);
      var $90=HEAP32[(($transformations150)>>2)];
      var $and151=$90 & 256;
      var $tobool152=(($and151)|0)!=0;
      if ($tobool152) { __label__ = 43; break; } else { __label__ = 41; break; }
    case 41: 
      var $91=$png_ptr_addr;
      var $bit_depth154=(($91+292)|0);
      var $92=HEAPU8[($bit_depth154)];
      var $conv155=(($92)&255);
      var $cmp156=(($conv155)|0)==16;
      if ($cmp156) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $93=$png_ptr_addr;
      var $background159=(($93+316)|0);
      var $red160=(($background159+2)|0);
      var $94=HEAPU16[(($red160)>>1)];
      var $conv161=(($94)&65535);
      var $mul162=(($conv161*257)|0);
      var $conv163=(($mul162) & 65535);
      var $95=$png_ptr_addr;
      var $background164=(($95+316)|0);
      var $red165=(($background164+2)|0);
      HEAP16[(($red165)>>1)]=$conv163;
      var $96=$png_ptr_addr;
      var $background166=(($96+316)|0);
      var $green167=(($background166+4)|0);
      var $97=HEAPU16[(($green167)>>1)];
      var $conv168=(($97)&65535);
      var $mul169=(($conv168*257)|0);
      var $conv170=(($mul169) & 65535);
      var $98=$png_ptr_addr;
      var $background171=(($98+316)|0);
      var $green172=(($background171+4)|0);
      HEAP16[(($green172)>>1)]=$conv170;
      var $99=$png_ptr_addr;
      var $background173=(($99+316)|0);
      var $blue174=(($background173+6)|0);
      var $100=HEAPU16[(($blue174)>>1)];
      var $conv175=(($100)&65535);
      var $mul176=(($conv175*257)|0);
      var $conv177=(($mul176) & 65535);
      var $101=$png_ptr_addr;
      var $background178=(($101+316)|0);
      var $blue179=(($background178+6)|0);
      HEAP16[(($blue179)>>1)]=$conv177;
      var $102=$png_ptr_addr;
      var $background180=(($102+316)|0);
      var $gray181=(($background180+8)|0);
      var $103=HEAPU16[(($gray181)>>1)];
      var $conv182=(($103)&65535);
      var $mul183=(($conv182*257)|0);
      var $conv184=(($mul183) & 65535);
      var $104=$png_ptr_addr;
      var $background185=(($104+316)|0);
      var $gray186=(($background185+8)|0);
      HEAP16[(($gray186)>>1)]=$conv184;
      __label__ = 43; break;
    case 43: 
      var $105=$png_ptr_addr;
      var $background_1=(($105+326)|0);
      var $106=$png_ptr_addr;
      var $background188=(($106+316)|0);
      var $107=$background_1;
      var $108=$background188;
      assert(10 % 1 === 0, 'memcpy given ' + 10 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($107)>>1)]=HEAP16[(($108)>>1)];HEAP16[(($107+2)>>1)]=HEAP16[(($108+2)>>1)];HEAP16[(($107+4)>>1)]=HEAP16[(($108+4)>>1)];HEAP16[(($107+6)>>1)]=HEAP16[(($108+6)>>1)];HEAP16[(($107+8)>>1)]=HEAP16[(($108+8)>>1)];
      var $109=$png_ptr_addr;
      var $transformations189=(($109+92)|0);
      var $110=HEAP32[(($transformations189)>>2)];
      var $and190=$110 & 8192;
      var $tobool191=(($and190)|0)!=0;
      if ($tobool191) { __label__ = 54; break; } else { __label__ = 44; break; }
    case 44: 
      var $111=$png_ptr_addr;
      var $transformations192=(($111+92)|0);
      var $112=HEAP32[(($transformations192)>>2)];
      var $and193=$112 & 6291456;
      var $tobool194=(($and193)|0)!=0;
      if ($tobool194) { __label__ = 45; break; } else { __label__ = 47; break; }
    case 45: 
      var $113=$png_ptr_addr;
      var $gamma196=(($113+352)|0);
      var $114=HEAP32[(($gamma196)>>2)];
      var $call197=_png_gamma_significant($114);
      var $tobool198=(($call197)|0)!=0;
      if ($tobool198) { __label__ = 54; break; } else { __label__ = 46; break; }
    case 46: 
      var $115=$png_ptr_addr;
      var $screen_gamma200=(($115+356)|0);
      var $116=HEAP32[(($screen_gamma200)>>2)];
      var $call201=_png_gamma_significant($116);
      var $tobool202=(($call201)|0)!=0;
      if ($tobool202) { __label__ = 54; break; } else { __label__ = 47; break; }
    case 47: 
      var $117=$png_ptr_addr;
      var $transformations204=(($117+92)|0);
      var $118=HEAP32[(($transformations204)>>2)];
      var $and205=$118 & 128;
      var $tobool206=(($and205)|0)!=0;
      if ($tobool206) { __label__ = 48; break; } else { __label__ = 52; break; }
    case 48: 
      var $119=$png_ptr_addr;
      var $gamma208=(($119+352)|0);
      var $120=HEAP32[(($gamma208)>>2)];
      var $call209=_png_gamma_significant($120);
      var $tobool210=(($call209)|0)!=0;
      if ($tobool210) { __label__ = 54; break; } else { __label__ = 49; break; }
    case 49: 
      var $121=$png_ptr_addr;
      var $screen_gamma212=(($121+356)|0);
      var $122=HEAP32[(($screen_gamma212)>>2)];
      var $call213=_png_gamma_significant($122);
      var $tobool214=(($call213)|0)!=0;
      if ($tobool214) { __label__ = 54; break; } else { __label__ = 50; break; }
    case 50: 
      var $123=$png_ptr_addr;
      var $background_gamma_type=(($123+308)|0);
      var $124=HEAPU8[($background_gamma_type)];
      var $conv216=(($124)&255);
      var $cmp217=(($conv216)|0)==3;
      if ($cmp217) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $125=$png_ptr_addr;
      var $background_gamma=(($125+312)|0);
      var $126=HEAP32[(($background_gamma)>>2)];
      var $call220=_png_gamma_significant($126);
      var $tobool221=(($call220)|0)!=0;
      if ($tobool221) { __label__ = 54; break; } else { __label__ = 52; break; }
    case 52: 
      var $127=$png_ptr_addr;
      var $transformations223=(($127+92)|0);
      var $128=HEAP32[(($transformations223)>>2)];
      var $and224=$128 & 8388608;
      var $tobool225=(($and224)|0)!=0;
      if ($tobool225) { __label__ = 53; break; } else { __label__ = 114; break; }
    case 53: 
      var $129=$png_ptr_addr;
      var $screen_gamma227=(($129+356)|0);
      var $130=HEAP32[(($screen_gamma227)>>2)];
      var $call228=_png_gamma_significant($130);
      var $tobool229=(($call228)|0)!=0;
      if ($tobool229) { __label__ = 54; break; } else { __label__ = 114; break; }
    case 54: 
      var $131=$png_ptr_addr;
      var $132=$png_ptr_addr;
      var $bit_depth231=(($132+292)|0);
      var $133=HEAPU8[($bit_depth231)];
      var $conv232=(($133)&255);
      _png_build_gamma_table($131, $conv232);
      var $134=$png_ptr_addr;
      var $transformations233=(($134+92)|0);
      var $135=HEAP32[(($transformations233)>>2)];
      var $and234=$135 & 128;
      var $tobool235=(($and234)|0)!=0;
      if ($tobool235) { __label__ = 55; break; } else { __label__ = 104; break; }
    case 55: 
      var $136=$png_ptr_addr;
      var $transformations237=(($136+92)|0);
      var $137=HEAP32[(($transformations237)>>2)];
      var $and238=$137 & 6291456;
      var $tobool239=(($and238)|0)!=0;
      if ($tobool239) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $138=$png_ptr_addr;
      _png_warning($138, ((STRING_TABLE.__str10719)|0));
      __label__ = 57; break;
    case 57: 
      var $139=$png_ptr_addr;
      var $color_type242=(($139+291)|0);
      var $140=HEAPU8[($color_type242)];
      var $conv243=(($140)&255);
      var $cmp244=(($conv243)|0)==3;
      if ($cmp244) { __label__ = 58; break; } else { __label__ = 84; break; }
    case 58: 
      var $141=$png_ptr_addr;
      var $palette247=(($141+272)|0);
      var $142=HEAP32[(($palette247)>>2)];
      $palette=$142;
      var $143=$png_ptr_addr;
      var $num_palette248=(($143+276)|0);
      var $144=HEAPU16[(($num_palette248)>>1)];
      var $conv249=(($144)&65535);
      $num_palette=$conv249;
      var $145=$png_ptr_addr;
      var $background_gamma_type250=(($145+308)|0);
      var $146=HEAPU8[($background_gamma_type250)];
      var $conv251=(($146)&255);
      var $cmp252=(($conv251)|0)==2;
      if ($cmp252) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $147=$png_ptr_addr;
      var $background255=(($147+316)|0);
      var $red256=(($background255+2)|0);
      var $148=HEAPU16[(($red256)>>1)];
      var $idxprom=(($148)&65535);
      var $149=$png_ptr_addr;
      var $gamma_table=(($149+360)|0);
      var $150=HEAP32[(($gamma_table)>>2)];
      var $arrayidx=(($150+$idxprom)|0);
      var $151=HEAP8[($arrayidx)];
      var $red257=(($back)|0);
      HEAP8[($red257)]=$151;
      var $152=$png_ptr_addr;
      var $background258=(($152+316)|0);
      var $green259=(($background258+4)|0);
      var $153=HEAPU16[(($green259)>>1)];
      var $idxprom260=(($153)&65535);
      var $154=$png_ptr_addr;
      var $gamma_table261=(($154+360)|0);
      var $155=HEAP32[(($gamma_table261)>>2)];
      var $arrayidx262=(($155+$idxprom260)|0);
      var $156=HEAP8[($arrayidx262)];
      var $green263=(($back+1)|0);
      HEAP8[($green263)]=$156;
      var $157=$png_ptr_addr;
      var $background264=(($157+316)|0);
      var $blue265=(($background264+6)|0);
      var $158=HEAPU16[(($blue265)>>1)];
      var $idxprom266=(($158)&65535);
      var $159=$png_ptr_addr;
      var $gamma_table267=(($159+360)|0);
      var $160=HEAP32[(($gamma_table267)>>2)];
      var $arrayidx268=(($160+$idxprom266)|0);
      var $161=HEAP8[($arrayidx268)];
      var $blue269=(($back+2)|0);
      HEAP8[($blue269)]=$161;
      var $162=$png_ptr_addr;
      var $background270=(($162+316)|0);
      var $red271=(($background270+2)|0);
      var $163=HEAPU16[(($red271)>>1)];
      var $idxprom272=(($163)&65535);
      var $164=$png_ptr_addr;
      var $gamma_to_1=(($164+372)|0);
      var $165=HEAP32[(($gamma_to_1)>>2)];
      var $arrayidx273=(($165+$idxprom272)|0);
      var $166=HEAP8[($arrayidx273)];
      var $red274=(($back_1)|0);
      HEAP8[($red274)]=$166;
      var $167=$png_ptr_addr;
      var $background275=(($167+316)|0);
      var $green276=(($background275+4)|0);
      var $168=HEAPU16[(($green276)>>1)];
      var $idxprom277=(($168)&65535);
      var $169=$png_ptr_addr;
      var $gamma_to_1278=(($169+372)|0);
      var $170=HEAP32[(($gamma_to_1278)>>2)];
      var $arrayidx279=(($170+$idxprom277)|0);
      var $171=HEAP8[($arrayidx279)];
      var $green280=(($back_1+1)|0);
      HEAP8[($green280)]=$171;
      var $172=$png_ptr_addr;
      var $background281=(($172+316)|0);
      var $blue282=(($background281+6)|0);
      var $173=HEAPU16[(($blue282)>>1)];
      var $idxprom283=(($173)&65535);
      var $174=$png_ptr_addr;
      var $gamma_to_1284=(($174+372)|0);
      var $175=HEAP32[(($gamma_to_1284)>>2)];
      var $arrayidx285=(($175+$idxprom283)|0);
      var $176=HEAP8[($arrayidx285)];
      var $blue286=(($back_1+2)|0);
      HEAP8[($blue286)]=$176;
      __label__ = 72; break;
    case 60: 
      var $177=$png_ptr_addr;
      var $background_gamma_type288=(($177+308)|0);
      var $178=HEAPU8[($background_gamma_type288)];
      var $conv289=(($178)&255);
      if ((($conv289)|0) == 1) {
        __label__ = 61; break;
      }
      else if ((($conv289)|0) == 2) {
        __label__ = 62; break;
      }
      else if ((($conv289)|0) == 3) {
        __label__ = 63; break;
      }
      else {
      __label__ = 64; break;
      }
      
    case 61: 
      var $179=$png_ptr_addr;
      var $screen_gamma290=(($179+356)|0);
      var $180=HEAP32[(($screen_gamma290)>>2)];
      $g=$180;
      $gs=100000;
      __label__ = 65; break;
    case 62: 
      var $181=$png_ptr_addr;
      var $gamma292=(($181+352)|0);
      var $182=HEAP32[(($gamma292)>>2)];
      var $call293=_png_reciprocal($182);
      $g=$call293;
      var $183=$png_ptr_addr;
      var $gamma294=(($183+352)|0);
      var $184=HEAP32[(($gamma294)>>2)];
      var $185=$png_ptr_addr;
      var $screen_gamma295=(($185+356)|0);
      var $186=HEAP32[(($screen_gamma295)>>2)];
      var $call296=_png_reciprocal2($184, $186);
      $gs=$call296;
      __label__ = 65; break;
    case 63: 
      var $187=$png_ptr_addr;
      var $background_gamma298=(($187+312)|0);
      var $188=HEAP32[(($background_gamma298)>>2)];
      var $call299=_png_reciprocal($188);
      $g=$call299;
      var $189=$png_ptr_addr;
      var $background_gamma300=(($189+312)|0);
      var $190=HEAP32[(($background_gamma300)>>2)];
      var $191=$png_ptr_addr;
      var $screen_gamma301=(($191+356)|0);
      var $192=HEAP32[(($screen_gamma301)>>2)];
      var $call302=_png_reciprocal2($190, $192);
      $gs=$call302;
      __label__ = 65; break;
    case 64: 
      $g=100000;
      $gs=100000;
      __label__ = 65; break;
    case 65: 
      var $193=$gs;
      var $call303=_png_gamma_significant($193);
      var $tobool304=(($call303)|0)!=0;
      if ($tobool304) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $194=$png_ptr_addr;
      var $background306=(($194+316)|0);
      var $red307=(($background306+2)|0);
      var $195=HEAPU16[(($red307)>>1)];
      var $conv308=(($195)&65535);
      var $196=$gs;
      var $call309=_png_gamma_8bit_correct($conv308, $196);
      var $red310=(($back)|0);
      HEAP8[($red310)]=$call309;
      var $197=$png_ptr_addr;
      var $background311=(($197+316)|0);
      var $green312=(($background311+4)|0);
      var $198=HEAPU16[(($green312)>>1)];
      var $conv313=(($198)&65535);
      var $199=$gs;
      var $call314=_png_gamma_8bit_correct($conv313, $199);
      var $green315=(($back+1)|0);
      HEAP8[($green315)]=$call314;
      var $200=$png_ptr_addr;
      var $background316=(($200+316)|0);
      var $blue317=(($background316+6)|0);
      var $201=HEAPU16[(($blue317)>>1)];
      var $conv318=(($201)&65535);
      var $202=$gs;
      var $call319=_png_gamma_8bit_correct($conv318, $202);
      var $blue320=(($back+2)|0);
      HEAP8[($blue320)]=$call319;
      __label__ = 68; break;
    case 67: 
      var $203=$png_ptr_addr;
      var $background322=(($203+316)|0);
      var $red323=(($background322+2)|0);
      var $204=HEAP16[(($red323)>>1)];
      var $conv324=(($204) & 255);
      var $red325=(($back)|0);
      HEAP8[($red325)]=$conv324;
      var $205=$png_ptr_addr;
      var $background326=(($205+316)|0);
      var $green327=(($background326+4)|0);
      var $206=HEAP16[(($green327)>>1)];
      var $conv328=(($206) & 255);
      var $green329=(($back+1)|0);
      HEAP8[($green329)]=$conv328;
      var $207=$png_ptr_addr;
      var $background330=(($207+316)|0);
      var $blue331=(($background330+6)|0);
      var $208=HEAP16[(($blue331)>>1)];
      var $conv332=(($208) & 255);
      var $blue333=(($back+2)|0);
      HEAP8[($blue333)]=$conv332;
      __label__ = 68; break;
    case 68: 
      var $209=$g;
      var $call335=_png_gamma_significant($209);
      var $tobool336=(($call335)|0)!=0;
      if ($tobool336) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $210=$png_ptr_addr;
      var $background338=(($210+316)|0);
      var $red339=(($background338+2)|0);
      var $211=HEAPU16[(($red339)>>1)];
      var $conv340=(($211)&65535);
      var $212=$g;
      var $call341=_png_gamma_8bit_correct($conv340, $212);
      var $red342=(($back_1)|0);
      HEAP8[($red342)]=$call341;
      var $213=$png_ptr_addr;
      var $background343=(($213+316)|0);
      var $green344=(($background343+4)|0);
      var $214=HEAPU16[(($green344)>>1)];
      var $conv345=(($214)&65535);
      var $215=$g;
      var $call346=_png_gamma_8bit_correct($conv345, $215);
      var $green347=(($back_1+1)|0);
      HEAP8[($green347)]=$call346;
      var $216=$png_ptr_addr;
      var $background348=(($216+316)|0);
      var $blue349=(($background348+6)|0);
      var $217=HEAPU16[(($blue349)>>1)];
      var $conv350=(($217)&65535);
      var $218=$g;
      var $call351=_png_gamma_8bit_correct($conv350, $218);
      var $blue352=(($back_1+2)|0);
      HEAP8[($blue352)]=$call351;
      __label__ = 71; break;
    case 70: 
      var $219=$png_ptr_addr;
      var $background354=(($219+316)|0);
      var $red355=(($background354+2)|0);
      var $220=HEAP16[(($red355)>>1)];
      var $conv356=(($220) & 255);
      var $red357=(($back_1)|0);
      HEAP8[($red357)]=$conv356;
      var $221=$png_ptr_addr;
      var $background358=(($221+316)|0);
      var $green359=(($background358+4)|0);
      var $222=HEAP16[(($green359)>>1)];
      var $conv360=(($222) & 255);
      var $green361=(($back_1+1)|0);
      HEAP8[($green361)]=$conv360;
      var $223=$png_ptr_addr;
      var $background362=(($223+316)|0);
      var $blue363=(($background362+6)|0);
      var $224=HEAP16[(($blue363)>>1)];
      var $conv364=(($224) & 255);
      var $blue365=(($back_1+2)|0);
      HEAP8[($blue365)]=$conv364;
      __label__ = 71; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      $i=0;
      __label__ = 73; break;
    case 73: 
      var $225=$i;
      var $226=$num_palette;
      var $cmp368=(($225)|0) < (($226)|0);
      if ($cmp368) { __label__ = 74; break; } else { __label__ = 83; break; }
    case 74: 
      var $227=$i;
      var $228=$png_ptr_addr;
      var $num_trans370=(($228+284)|0);
      var $229=HEAPU16[(($num_trans370)>>1)];
      var $conv371=(($229)&65535);
      var $cmp372=(($227)|0) < (($conv371)|0);
      if ($cmp372) { __label__ = 75; break; } else { __label__ = 80; break; }
    case 75: 
      var $230=$i;
      var $231=$png_ptr_addr;
      var $trans_alpha=(($231+396)|0);
      var $232=HEAP32[(($trans_alpha)>>2)];
      var $arrayidx375=(($232+$230)|0);
      var $233=HEAPU8[($arrayidx375)];
      var $conv376=(($233)&255);
      var $cmp377=(($conv376)|0)!=255;
      if ($cmp377) { __label__ = 76; break; } else { __label__ = 80; break; }
    case 76: 
      var $234=$i;
      var $235=$png_ptr_addr;
      var $trans_alpha380=(($235+396)|0);
      var $236=HEAP32[(($trans_alpha380)>>2)];
      var $arrayidx381=(($236+$234)|0);
      var $237=HEAPU8[($arrayidx381)];
      var $conv382=(($237)&255);
      var $cmp383=(($conv382)|0)==0;
      if ($cmp383) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $238=$i;
      var $239=$palette;
      var $arrayidx386=(($239+$238*3)|0);
      var $240=$arrayidx386;
      var $241=$back;
      assert(3 % 1 === 0, 'memcpy given ' + 3 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($240)]=HEAP8[($241)];HEAP8[($240+1)]=HEAP8[($241+1)];HEAP8[($240+2)]=HEAP8[($241+2)];
      __label__ = 79; break;
    case 78: 
      var $242=$i;
      var $243=$palette;
      var $arrayidx388=(($243+$242*3)|0);
      var $red389=(($arrayidx388)|0);
      var $244=HEAPU8[($red389)];
      var $idxprom390=(($244)&255);
      var $245=$png_ptr_addr;
      var $gamma_to_1391=(($245+372)|0);
      var $246=HEAP32[(($gamma_to_1391)>>2)];
      var $arrayidx392=(($246+$idxprom390)|0);
      var $247=HEAP8[($arrayidx392)];
      $v=$247;
      var $248=$v;
      var $conv393=(($248)&255);
      var $conv394=(($conv393)&65535);
      var $249=$i;
      var $250=$png_ptr_addr;
      var $trans_alpha395=(($250+396)|0);
      var $251=HEAP32[(($trans_alpha395)>>2)];
      var $arrayidx396=(($251+$249)|0);
      var $252=HEAPU8[($arrayidx396)];
      var $conv397=(($252)&255);
      var $conv398=(($conv397)&65535);
      var $mul399=(($conv394*$conv398)|0);
      var $red400=(($back_1)|0);
      var $253=HEAPU8[($red400)];
      var $conv401=(($253)&255);
      var $conv402=(($conv401)&65535);
      var $254=$i;
      var $255=$png_ptr_addr;
      var $trans_alpha403=(($255+396)|0);
      var $256=HEAP32[(($trans_alpha403)>>2)];
      var $arrayidx404=(($256+$254)|0);
      var $257=HEAPU8[($arrayidx404)];
      var $conv405=(($257)&255);
      var $conv406=(($conv405)&65535);
      var $sub=((255-$conv406)|0);
      var $conv407=(($sub) & 65535);
      var $conv408=(($conv407)&65535);
      var $mul409=(($conv402*$conv408)|0);
      var $add410=(($mul399+$mul409)|0);
      var $add411=(($add410+128)|0);
      var $conv412=(($add411) & 65535);
      $temp=$conv412;
      var $258=$temp;
      var $conv413=(($258)&65535);
      var $259=$temp;
      var $conv414=(($259)&65535);
      var $shr415=$conv414 >> 8;
      var $add416=(($conv413+$shr415)|0);
      var $shr417=$add416 >> 8;
      var $conv418=(($shr417) & 255);
      $w=$conv418;
      var $260=$w;
      var $idxprom419=(($260)&255);
      var $261=$png_ptr_addr;
      var $gamma_from_1=(($261+368)|0);
      var $262=HEAP32[(($gamma_from_1)>>2)];
      var $arrayidx420=(($262+$idxprom419)|0);
      var $263=HEAP8[($arrayidx420)];
      var $264=$i;
      var $265=$palette;
      var $arrayidx421=(($265+$264*3)|0);
      var $red422=(($arrayidx421)|0);
      HEAP8[($red422)]=$263;
      var $266=$i;
      var $267=$palette;
      var $arrayidx423=(($267+$266*3)|0);
      var $green424=(($arrayidx423+1)|0);
      var $268=HEAPU8[($green424)];
      var $idxprom425=(($268)&255);
      var $269=$png_ptr_addr;
      var $gamma_to_1426=(($269+372)|0);
      var $270=HEAP32[(($gamma_to_1426)>>2)];
      var $arrayidx427=(($270+$idxprom425)|0);
      var $271=HEAP8[($arrayidx427)];
      $v=$271;
      var $272=$v;
      var $conv429=(($272)&255);
      var $conv430=(($conv429)&65535);
      var $273=$i;
      var $274=$png_ptr_addr;
      var $trans_alpha431=(($274+396)|0);
      var $275=HEAP32[(($trans_alpha431)>>2)];
      var $arrayidx432=(($275+$273)|0);
      var $276=HEAPU8[($arrayidx432)];
      var $conv433=(($276)&255);
      var $conv434=(($conv433)&65535);
      var $mul435=(($conv430*$conv434)|0);
      var $green436=(($back_1+1)|0);
      var $277=HEAPU8[($green436)];
      var $conv437=(($277)&255);
      var $conv438=(($conv437)&65535);
      var $278=$i;
      var $279=$png_ptr_addr;
      var $trans_alpha439=(($279+396)|0);
      var $280=HEAP32[(($trans_alpha439)>>2)];
      var $arrayidx440=(($280+$278)|0);
      var $281=HEAPU8[($arrayidx440)];
      var $conv441=(($281)&255);
      var $conv442=(($conv441)&65535);
      var $sub443=((255-$conv442)|0);
      var $conv444=(($sub443) & 65535);
      var $conv445=(($conv444)&65535);
      var $mul446=(($conv438*$conv445)|0);
      var $add447=(($mul435+$mul446)|0);
      var $add448=(($add447+128)|0);
      var $conv449=(($add448) & 65535);
      $temp428=$conv449;
      var $282=$temp428;
      var $conv450=(($282)&65535);
      var $283=$temp428;
      var $conv451=(($283)&65535);
      var $shr452=$conv451 >> 8;
      var $add453=(($conv450+$shr452)|0);
      var $shr454=$add453 >> 8;
      var $conv455=(($shr454) & 255);
      $w=$conv455;
      var $284=$w;
      var $idxprom456=(($284)&255);
      var $285=$png_ptr_addr;
      var $gamma_from_1457=(($285+368)|0);
      var $286=HEAP32[(($gamma_from_1457)>>2)];
      var $arrayidx458=(($286+$idxprom456)|0);
      var $287=HEAP8[($arrayidx458)];
      var $288=$i;
      var $289=$palette;
      var $arrayidx459=(($289+$288*3)|0);
      var $green460=(($arrayidx459+1)|0);
      HEAP8[($green460)]=$287;
      var $290=$i;
      var $291=$palette;
      var $arrayidx461=(($291+$290*3)|0);
      var $blue462=(($arrayidx461+2)|0);
      var $292=HEAPU8[($blue462)];
      var $idxprom463=(($292)&255);
      var $293=$png_ptr_addr;
      var $gamma_to_1464=(($293+372)|0);
      var $294=HEAP32[(($gamma_to_1464)>>2)];
      var $arrayidx465=(($294+$idxprom463)|0);
      var $295=HEAP8[($arrayidx465)];
      $v=$295;
      var $296=$v;
      var $conv467=(($296)&255);
      var $conv468=(($conv467)&65535);
      var $297=$i;
      var $298=$png_ptr_addr;
      var $trans_alpha469=(($298+396)|0);
      var $299=HEAP32[(($trans_alpha469)>>2)];
      var $arrayidx470=(($299+$297)|0);
      var $300=HEAPU8[($arrayidx470)];
      var $conv471=(($300)&255);
      var $conv472=(($conv471)&65535);
      var $mul473=(($conv468*$conv472)|0);
      var $blue474=(($back_1+2)|0);
      var $301=HEAPU8[($blue474)];
      var $conv475=(($301)&255);
      var $conv476=(($conv475)&65535);
      var $302=$i;
      var $303=$png_ptr_addr;
      var $trans_alpha477=(($303+396)|0);
      var $304=HEAP32[(($trans_alpha477)>>2)];
      var $arrayidx478=(($304+$302)|0);
      var $305=HEAPU8[($arrayidx478)];
      var $conv479=(($305)&255);
      var $conv480=(($conv479)&65535);
      var $sub481=((255-$conv480)|0);
      var $conv482=(($sub481) & 65535);
      var $conv483=(($conv482)&65535);
      var $mul484=(($conv476*$conv483)|0);
      var $add485=(($mul473+$mul484)|0);
      var $add486=(($add485+128)|0);
      var $conv487=(($add486) & 65535);
      $temp466=$conv487;
      var $306=$temp466;
      var $conv488=(($306)&65535);
      var $307=$temp466;
      var $conv489=(($307)&65535);
      var $shr490=$conv489 >> 8;
      var $add491=(($conv488+$shr490)|0);
      var $shr492=$add491 >> 8;
      var $conv493=(($shr492) & 255);
      $w=$conv493;
      var $308=$w;
      var $idxprom494=(($308)&255);
      var $309=$png_ptr_addr;
      var $gamma_from_1495=(($309+368)|0);
      var $310=HEAP32[(($gamma_from_1495)>>2)];
      var $arrayidx496=(($310+$idxprom494)|0);
      var $311=HEAP8[($arrayidx496)];
      var $312=$i;
      var $313=$palette;
      var $arrayidx497=(($313+$312*3)|0);
      var $blue498=(($arrayidx497+2)|0);
      HEAP8[($blue498)]=$311;
      __label__ = 79; break;
    case 79: 
      __label__ = 81; break;
    case 80: 
      var $314=$i;
      var $315=$palette;
      var $arrayidx501=(($315+$314*3)|0);
      var $red502=(($arrayidx501)|0);
      var $316=HEAPU8[($red502)];
      var $idxprom503=(($316)&255);
      var $317=$png_ptr_addr;
      var $gamma_table504=(($317+360)|0);
      var $318=HEAP32[(($gamma_table504)>>2)];
      var $arrayidx505=(($318+$idxprom503)|0);
      var $319=HEAP8[($arrayidx505)];
      var $320=$i;
      var $321=$palette;
      var $arrayidx506=(($321+$320*3)|0);
      var $red507=(($arrayidx506)|0);
      HEAP8[($red507)]=$319;
      var $322=$i;
      var $323=$palette;
      var $arrayidx508=(($323+$322*3)|0);
      var $green509=(($arrayidx508+1)|0);
      var $324=HEAPU8[($green509)];
      var $idxprom510=(($324)&255);
      var $325=$png_ptr_addr;
      var $gamma_table511=(($325+360)|0);
      var $326=HEAP32[(($gamma_table511)>>2)];
      var $arrayidx512=(($326+$idxprom510)|0);
      var $327=HEAP8[($arrayidx512)];
      var $328=$i;
      var $329=$palette;
      var $arrayidx513=(($329+$328*3)|0);
      var $green514=(($arrayidx513+1)|0);
      HEAP8[($green514)]=$327;
      var $330=$i;
      var $331=$palette;
      var $arrayidx515=(($331+$330*3)|0);
      var $blue516=(($arrayidx515+2)|0);
      var $332=HEAPU8[($blue516)];
      var $idxprom517=(($332)&255);
      var $333=$png_ptr_addr;
      var $gamma_table518=(($333+360)|0);
      var $334=HEAP32[(($gamma_table518)>>2)];
      var $arrayidx519=(($334+$idxprom517)|0);
      var $335=HEAP8[($arrayidx519)];
      var $336=$i;
      var $337=$palette;
      var $arrayidx520=(($337+$336*3)|0);
      var $blue521=(($arrayidx520+2)|0);
      HEAP8[($blue521)]=$335;
      __label__ = 81; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      var $338=$i;
      var $inc=(($338+1)|0);
      $i=$inc;
      __label__ = 73; break;
    case 83: 
      var $339=$png_ptr_addr;
      var $transformations523=(($339+92)|0);
      var $340=HEAP32[(($transformations523)>>2)];
      var $and524=$340 & -8321;
      HEAP32[(($transformations523)>>2)]=$and524;
      __label__ = 103; break;
    case 84: 
      $g526=100000;
      $gs527=100000;
      var $341=$png_ptr_addr;
      var $background_gamma_type528=(($341+308)|0);
      var $342=HEAPU8[($background_gamma_type528)];
      var $conv529=(($342)&255);
      if ((($conv529)|0) == 1) {
        __label__ = 85; break;
      }
      else if ((($conv529)|0) == 2) {
        __label__ = 86; break;
      }
      else if ((($conv529)|0) == 3) {
        __label__ = 87; break;
      }
      else {
      __label__ = 88; break;
      }
      
    case 85: 
      var $343=$png_ptr_addr;
      var $screen_gamma531=(($343+356)|0);
      var $344=HEAP32[(($screen_gamma531)>>2)];
      $g526=$344;
      __label__ = 89; break;
    case 86: 
      var $345=$png_ptr_addr;
      var $gamma533=(($345+352)|0);
      var $346=HEAP32[(($gamma533)>>2)];
      var $call534=_png_reciprocal($346);
      $g526=$call534;
      var $347=$png_ptr_addr;
      var $gamma535=(($347+352)|0);
      var $348=HEAP32[(($gamma535)>>2)];
      var $349=$png_ptr_addr;
      var $screen_gamma536=(($349+356)|0);
      var $350=HEAP32[(($screen_gamma536)>>2)];
      var $call537=_png_reciprocal2($348, $350);
      $gs527=$call537;
      __label__ = 89; break;
    case 87: 
      var $351=$png_ptr_addr;
      var $background_gamma539=(($351+312)|0);
      var $352=HEAP32[(($background_gamma539)>>2)];
      var $call540=_png_reciprocal($352);
      $g526=$call540;
      var $353=$png_ptr_addr;
      var $background_gamma541=(($353+312)|0);
      var $354=HEAP32[(($background_gamma541)>>2)];
      var $355=$png_ptr_addr;
      var $screen_gamma542=(($355+356)|0);
      var $356=HEAP32[(($screen_gamma542)>>2)];
      var $call543=_png_reciprocal2($354, $356);
      $gs527=$call543;
      __label__ = 89; break;
    case 88: 
      var $357=$png_ptr_addr;
      _png_error($357, ((STRING_TABLE.__str11720)|0));
      __label__ = 89; break;
    case 89: 
      var $358=$g526;
      var $call546=_png_gamma_significant($358);
      $g_sig=$call546;
      var $359=$gs527;
      var $call547=_png_gamma_significant($359);
      $gs_sig=$call547;
      var $360=$g_sig;
      var $tobool548=(($360)|0)!=0;
      if ($tobool548) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      var $361=$png_ptr_addr;
      var $362=$png_ptr_addr;
      var $background550=(($362+316)|0);
      var $gray551=(($background550+8)|0);
      var $363=HEAPU16[(($gray551)>>1)];
      var $conv552=(($363)&65535);
      var $364=$g526;
      var $call553=_png_gamma_correct($361, $conv552, $364);
      var $365=$png_ptr_addr;
      var $background_1554=(($365+326)|0);
      var $gray555=(($background_1554+8)|0);
      HEAP16[(($gray555)>>1)]=$call553;
      __label__ = 91; break;
    case 91: 
      var $366=$gs_sig;
      var $tobool557=(($366)|0)!=0;
      if ($tobool557) { __label__ = 92; break; } else { __label__ = 93; break; }
    case 92: 
      var $367=$png_ptr_addr;
      var $368=$png_ptr_addr;
      var $background559=(($368+316)|0);
      var $gray560=(($background559+8)|0);
      var $369=HEAPU16[(($gray560)>>1)];
      var $conv561=(($369)&65535);
      var $370=$gs527;
      var $call562=_png_gamma_correct($367, $conv561, $370);
      var $371=$png_ptr_addr;
      var $background563=(($371+316)|0);
      var $gray564=(($background563+8)|0);
      HEAP16[(($gray564)>>1)]=$call562;
      __label__ = 93; break;
    case 93: 
      var $372=$png_ptr_addr;
      var $background566=(($372+316)|0);
      var $red567=(($background566+2)|0);
      var $373=HEAPU16[(($red567)>>1)];
      var $conv568=(($373)&65535);
      var $374=$png_ptr_addr;
      var $background569=(($374+316)|0);
      var $green570=(($background569+4)|0);
      var $375=HEAPU16[(($green570)>>1)];
      var $conv571=(($375)&65535);
      var $cmp572=(($conv568)|0)!=(($conv571)|0);
      if ($cmp572) { __label__ = 96; break; } else { __label__ = 94; break; }
    case 94: 
      var $376=$png_ptr_addr;
      var $background575=(($376+316)|0);
      var $red576=(($background575+2)|0);
      var $377=HEAPU16[(($red576)>>1)];
      var $conv577=(($377)&65535);
      var $378=$png_ptr_addr;
      var $background578=(($378+316)|0);
      var $blue579=(($background578+6)|0);
      var $379=HEAPU16[(($blue579)>>1)];
      var $conv580=(($379)&65535);
      var $cmp581=(($conv577)|0)!=(($conv580)|0);
      if ($cmp581) { __label__ = 96; break; } else { __label__ = 95; break; }
    case 95: 
      var $380=$png_ptr_addr;
      var $background584=(($380+316)|0);
      var $red585=(($background584+2)|0);
      var $381=HEAPU16[(($red585)>>1)];
      var $conv586=(($381)&65535);
      var $382=$png_ptr_addr;
      var $background587=(($382+316)|0);
      var $gray588=(($background587+8)|0);
      var $383=HEAPU16[(($gray588)>>1)];
      var $conv589=(($383)&65535);
      var $cmp590=(($conv586)|0)!=(($conv589)|0);
      if ($cmp590) { __label__ = 96; break; } else { __label__ = 101; break; }
    case 96: 
      var $384=$g_sig;
      var $tobool593=(($384)|0)!=0;
      if ($tobool593) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: 
      var $385=$png_ptr_addr;
      var $386=$png_ptr_addr;
      var $background595=(($386+316)|0);
      var $red596=(($background595+2)|0);
      var $387=HEAPU16[(($red596)>>1)];
      var $conv597=(($387)&65535);
      var $388=$g526;
      var $call598=_png_gamma_correct($385, $conv597, $388);
      var $389=$png_ptr_addr;
      var $background_1599=(($389+326)|0);
      var $red600=(($background_1599+2)|0);
      HEAP16[(($red600)>>1)]=$call598;
      var $390=$png_ptr_addr;
      var $391=$png_ptr_addr;
      var $background601=(($391+316)|0);
      var $green602=(($background601+4)|0);
      var $392=HEAPU16[(($green602)>>1)];
      var $conv603=(($392)&65535);
      var $393=$g526;
      var $call604=_png_gamma_correct($390, $conv603, $393);
      var $394=$png_ptr_addr;
      var $background_1605=(($394+326)|0);
      var $green606=(($background_1605+4)|0);
      HEAP16[(($green606)>>1)]=$call604;
      var $395=$png_ptr_addr;
      var $396=$png_ptr_addr;
      var $background607=(($396+316)|0);
      var $blue608=(($background607+6)|0);
      var $397=HEAPU16[(($blue608)>>1)];
      var $conv609=(($397)&65535);
      var $398=$g526;
      var $call610=_png_gamma_correct($395, $conv609, $398);
      var $399=$png_ptr_addr;
      var $background_1611=(($399+326)|0);
      var $blue612=(($background_1611+6)|0);
      HEAP16[(($blue612)>>1)]=$call610;
      __label__ = 98; break;
    case 98: 
      var $400=$gs_sig;
      var $tobool614=(($400)|0)!=0;
      if ($tobool614) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      var $401=$png_ptr_addr;
      var $402=$png_ptr_addr;
      var $background616=(($402+316)|0);
      var $red617=(($background616+2)|0);
      var $403=HEAPU16[(($red617)>>1)];
      var $conv618=(($403)&65535);
      var $404=$gs527;
      var $call619=_png_gamma_correct($401, $conv618, $404);
      var $405=$png_ptr_addr;
      var $background620=(($405+316)|0);
      var $red621=(($background620+2)|0);
      HEAP16[(($red621)>>1)]=$call619;
      var $406=$png_ptr_addr;
      var $407=$png_ptr_addr;
      var $background622=(($407+316)|0);
      var $green623=(($background622+4)|0);
      var $408=HEAPU16[(($green623)>>1)];
      var $conv624=(($408)&65535);
      var $409=$gs527;
      var $call625=_png_gamma_correct($406, $conv624, $409);
      var $410=$png_ptr_addr;
      var $background626=(($410+316)|0);
      var $green627=(($background626+4)|0);
      HEAP16[(($green627)>>1)]=$call625;
      var $411=$png_ptr_addr;
      var $412=$png_ptr_addr;
      var $background628=(($412+316)|0);
      var $blue629=(($background628+6)|0);
      var $413=HEAPU16[(($blue629)>>1)];
      var $conv630=(($413)&65535);
      var $414=$gs527;
      var $call631=_png_gamma_correct($411, $conv630, $414);
      var $415=$png_ptr_addr;
      var $background632=(($415+316)|0);
      var $blue633=(($background632+6)|0);
      HEAP16[(($blue633)>>1)]=$call631;
      __label__ = 100; break;
    case 100: 
      __label__ = 102; break;
    case 101: 
      var $416=$png_ptr_addr;
      var $background_1636=(($416+326)|0);
      var $gray637=(($background_1636+8)|0);
      var $417=HEAPU16[(($gray637)>>1)];
      var $418=$png_ptr_addr;
      var $background_1638=(($418+326)|0);
      var $blue639=(($background_1638+6)|0);
      HEAP16[(($blue639)>>1)]=$417;
      var $419=$png_ptr_addr;
      var $background_1640=(($419+326)|0);
      var $green641=(($background_1640+4)|0);
      HEAP16[(($green641)>>1)]=$417;
      var $420=$png_ptr_addr;
      var $background_1642=(($420+326)|0);
      var $red643=(($background_1642+2)|0);
      HEAP16[(($red643)>>1)]=$417;
      var $421=$png_ptr_addr;
      var $background644=(($421+316)|0);
      var $gray645=(($background644+8)|0);
      var $422=HEAP16[(($gray645)>>1)];
      var $423=$png_ptr_addr;
      var $background646=(($423+316)|0);
      var $blue647=(($background646+6)|0);
      HEAP16[(($blue647)>>1)]=$422;
      var $424=$png_ptr_addr;
      var $background648=(($424+316)|0);
      var $green649=(($background648+4)|0);
      HEAP16[(($green649)>>1)]=$422;
      var $425=$png_ptr_addr;
      var $background650=(($425+316)|0);
      var $red651=(($background650+2)|0);
      HEAP16[(($red651)>>1)]=$422;
      __label__ = 102; break;
    case 102: 
      var $426=$png_ptr_addr;
      var $background_gamma_type653=(($426+308)|0);
      HEAP8[($background_gamma_type653)]=1;
      __label__ = 103; break;
    case 103: 
      __label__ = 113; break;
    case 104: 
      var $427=$png_ptr_addr;
      var $color_type656=(($427+291)|0);
      var $428=HEAPU8[($color_type656)];
      var $conv657=(($428)&255);
      var $cmp658=(($conv657)|0)==3;
      if ($cmp658) { __label__ = 105; break; } else { __label__ = 112; break; }
    case 105: 
      var $429=$png_ptr_addr;
      var $transformations661=(($429+92)|0);
      var $430=HEAP32[(($transformations661)>>2)];
      var $and662=$430 & 4096;
      var $cmp663=(($and662)|0)==0;
      if ($cmp663) { __label__ = 107; break; } else { __label__ = 106; break; }
    case 106: 
      var $431=$png_ptr_addr;
      var $transformations666=(($431+92)|0);
      var $432=HEAP32[(($transformations666)>>2)];
      var $and667=$432 & 6291456;
      var $cmp668=(($and667)|0)==0;
      if ($cmp668) { __label__ = 107; break; } else { __label__ = 112; break; }
    case 107: 
      var $433=$png_ptr_addr;
      var $palette672=(($433+272)|0);
      var $434=HEAP32[(($palette672)>>2)];
      $palette671=$434;
      var $435=$png_ptr_addr;
      var $num_palette674=(($435+276)|0);
      var $436=HEAPU16[(($num_palette674)>>1)];
      var $conv675=(($436)&65535);
      $num_palette673=$conv675;
      $i676=0;
      __label__ = 108; break;
    case 108: 
      var $437=$i676;
      var $438=$num_palette673;
      var $cmp678=(($437)|0) < (($438)|0);
      if ($cmp678) { __label__ = 109; break; } else { __label__ = 111; break; }
    case 109: 
      var $439=$i676;
      var $440=$palette671;
      var $arrayidx681=(($440+$439*3)|0);
      var $red682=(($arrayidx681)|0);
      var $441=HEAPU8[($red682)];
      var $idxprom683=(($441)&255);
      var $442=$png_ptr_addr;
      var $gamma_table684=(($442+360)|0);
      var $443=HEAP32[(($gamma_table684)>>2)];
      var $arrayidx685=(($443+$idxprom683)|0);
      var $444=HEAP8[($arrayidx685)];
      var $445=$i676;
      var $446=$palette671;
      var $arrayidx686=(($446+$445*3)|0);
      var $red687=(($arrayidx686)|0);
      HEAP8[($red687)]=$444;
      var $447=$i676;
      var $448=$palette671;
      var $arrayidx688=(($448+$447*3)|0);
      var $green689=(($arrayidx688+1)|0);
      var $449=HEAPU8[($green689)];
      var $idxprom690=(($449)&255);
      var $450=$png_ptr_addr;
      var $gamma_table691=(($450+360)|0);
      var $451=HEAP32[(($gamma_table691)>>2)];
      var $arrayidx692=(($451+$idxprom690)|0);
      var $452=HEAP8[($arrayidx692)];
      var $453=$i676;
      var $454=$palette671;
      var $arrayidx693=(($454+$453*3)|0);
      var $green694=(($arrayidx693+1)|0);
      HEAP8[($green694)]=$452;
      var $455=$i676;
      var $456=$palette671;
      var $arrayidx695=(($456+$455*3)|0);
      var $blue696=(($arrayidx695+2)|0);
      var $457=HEAPU8[($blue696)];
      var $idxprom697=(($457)&255);
      var $458=$png_ptr_addr;
      var $gamma_table698=(($458+360)|0);
      var $459=HEAP32[(($gamma_table698)>>2)];
      var $arrayidx699=(($459+$idxprom697)|0);
      var $460=HEAP8[($arrayidx699)];
      var $461=$i676;
      var $462=$palette671;
      var $arrayidx700=(($462+$461*3)|0);
      var $blue701=(($arrayidx700+2)|0);
      HEAP8[($blue701)]=$460;
      __label__ = 110; break;
    case 110: 
      var $463=$i676;
      var $inc703=(($463+1)|0);
      $i676=$inc703;
      __label__ = 108; break;
    case 111: 
      var $464=$png_ptr_addr;
      var $transformations705=(($464+92)|0);
      var $465=HEAP32[(($transformations705)>>2)];
      var $and706=$465 & -8193;
      HEAP32[(($transformations705)>>2)]=$and706;
      __label__ = 112; break;
    case 112: 
      __label__ = 113; break;
    case 113: 
      __label__ = 127; break;
    case 114: 
      var $466=$png_ptr_addr;
      var $transformations710=(($466+92)|0);
      var $467=HEAP32[(($transformations710)>>2)];
      var $and711=$467 & 128;
      var $tobool712=(($and711)|0)!=0;
      if ($tobool712) { __label__ = 115; break; } else { __label__ = 126; break; }
    case 115: 
      var $468=$png_ptr_addr;
      var $color_type714=(($468+291)|0);
      var $469=HEAPU8[($color_type714)];
      var $conv715=(($469)&255);
      var $cmp716=(($conv715)|0)==3;
      if ($cmp716) { __label__ = 116; break; } else { __label__ = 126; break; }
    case 116: 
      var $470=$png_ptr_addr;
      var $num_trans720=(($470+284)|0);
      var $471=HEAPU16[(($num_trans720)>>1)];
      var $conv721=(($471)&65535);
      $istop=$conv721;
      var $472=$png_ptr_addr;
      var $palette724=(($472+272)|0);
      var $473=HEAP32[(($palette724)>>2)];
      $palette723=$473;
      var $474=$png_ptr_addr;
      var $background725=(($474+316)|0);
      var $red726=(($background725+2)|0);
      var $475=HEAP16[(($red726)>>1)];
      var $conv727=(($475) & 255);
      var $red728=(($back722)|0);
      HEAP8[($red728)]=$conv727;
      var $476=$png_ptr_addr;
      var $background729=(($476+316)|0);
      var $green730=(($background729+4)|0);
      var $477=HEAP16[(($green730)>>1)];
      var $conv731=(($477) & 255);
      var $green732=(($back722+1)|0);
      HEAP8[($green732)]=$conv731;
      var $478=$png_ptr_addr;
      var $background733=(($478+316)|0);
      var $blue734=(($background733+6)|0);
      var $479=HEAP16[(($blue734)>>1)];
      var $conv735=(($479) & 255);
      var $blue736=(($back722+2)|0);
      HEAP8[($blue736)]=$conv735;
      $i719=0;
      __label__ = 117; break;
    case 117: 
      var $480=$i719;
      var $481=$istop;
      var $cmp738=(($480)|0) < (($481)|0);
      if ($cmp738) { __label__ = 118; break; } else { __label__ = 125; break; }
    case 118: 
      var $482=$i719;
      var $483=$png_ptr_addr;
      var $trans_alpha741=(($483+396)|0);
      var $484=HEAP32[(($trans_alpha741)>>2)];
      var $arrayidx742=(($484+$482)|0);
      var $485=HEAPU8[($arrayidx742)];
      var $conv743=(($485)&255);
      var $cmp744=(($conv743)|0)==0;
      if ($cmp744) { __label__ = 119; break; } else { __label__ = 120; break; }
    case 119: 
      var $486=$i719;
      var $487=$palette723;
      var $arrayidx747=(($487+$486*3)|0);
      var $488=$arrayidx747;
      var $489=$back722;
      assert(3 % 1 === 0, 'memcpy given ' + 3 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($488)]=HEAP8[($489)];HEAP8[($488+1)]=HEAP8[($489+1)];HEAP8[($488+2)]=HEAP8[($489+2)];
      __label__ = 123; break;
    case 120: 
      var $490=$i719;
      var $491=$png_ptr_addr;
      var $trans_alpha749=(($491+396)|0);
      var $492=HEAP32[(($trans_alpha749)>>2)];
      var $arrayidx750=(($492+$490)|0);
      var $493=HEAPU8[($arrayidx750)];
      var $conv751=(($493)&255);
      var $cmp752=(($conv751)|0)!=255;
      if ($cmp752) { __label__ = 121; break; } else { __label__ = 122; break; }
    case 121: 
      var $494=$i719;
      var $495=$palette723;
      var $arrayidx756=(($495+$494*3)|0);
      var $red757=(($arrayidx756)|0);
      var $496=HEAPU8[($red757)];
      var $conv758=(($496)&255);
      var $conv759=(($conv758)&65535);
      var $497=$i719;
      var $498=$png_ptr_addr;
      var $trans_alpha760=(($498+396)|0);
      var $499=HEAP32[(($trans_alpha760)>>2)];
      var $arrayidx761=(($499+$497)|0);
      var $500=HEAPU8[($arrayidx761)];
      var $conv762=(($500)&255);
      var $conv763=(($conv762)&65535);
      var $mul764=(($conv759*$conv763)|0);
      var $red765=(($back722)|0);
      var $501=HEAPU8[($red765)];
      var $conv766=(($501)&255);
      var $conv767=(($conv766)&65535);
      var $502=$i719;
      var $503=$png_ptr_addr;
      var $trans_alpha768=(($503+396)|0);
      var $504=HEAP32[(($trans_alpha768)>>2)];
      var $arrayidx769=(($504+$502)|0);
      var $505=HEAPU8[($arrayidx769)];
      var $conv770=(($505)&255);
      var $conv771=(($conv770)&65535);
      var $sub772=((255-$conv771)|0);
      var $conv773=(($sub772) & 65535);
      var $conv774=(($conv773)&65535);
      var $mul775=(($conv767*$conv774)|0);
      var $add776=(($mul764+$mul775)|0);
      var $add777=(($add776+128)|0);
      var $conv778=(($add777) & 65535);
      $temp755=$conv778;
      var $506=$temp755;
      var $conv779=(($506)&65535);
      var $507=$temp755;
      var $conv780=(($507)&65535);
      var $shr781=$conv780 >> 8;
      var $add782=(($conv779+$shr781)|0);
      var $shr783=$add782 >> 8;
      var $conv784=(($shr783) & 255);
      var $508=$i719;
      var $509=$palette723;
      var $arrayidx785=(($509+$508*3)|0);
      var $red786=(($arrayidx785)|0);
      HEAP8[($red786)]=$conv784;
      var $510=$i719;
      var $511=$palette723;
      var $arrayidx788=(($511+$510*3)|0);
      var $green789=(($arrayidx788+1)|0);
      var $512=HEAPU8[($green789)];
      var $conv790=(($512)&255);
      var $conv791=(($conv790)&65535);
      var $513=$i719;
      var $514=$png_ptr_addr;
      var $trans_alpha792=(($514+396)|0);
      var $515=HEAP32[(($trans_alpha792)>>2)];
      var $arrayidx793=(($515+$513)|0);
      var $516=HEAPU8[($arrayidx793)];
      var $conv794=(($516)&255);
      var $conv795=(($conv794)&65535);
      var $mul796=(($conv791*$conv795)|0);
      var $green797=(($back722+1)|0);
      var $517=HEAPU8[($green797)];
      var $conv798=(($517)&255);
      var $conv799=(($conv798)&65535);
      var $518=$i719;
      var $519=$png_ptr_addr;
      var $trans_alpha800=(($519+396)|0);
      var $520=HEAP32[(($trans_alpha800)>>2)];
      var $arrayidx801=(($520+$518)|0);
      var $521=HEAPU8[($arrayidx801)];
      var $conv802=(($521)&255);
      var $conv803=(($conv802)&65535);
      var $sub804=((255-$conv803)|0);
      var $conv805=(($sub804) & 65535);
      var $conv806=(($conv805)&65535);
      var $mul807=(($conv799*$conv806)|0);
      var $add808=(($mul796+$mul807)|0);
      var $add809=(($add808+128)|0);
      var $conv810=(($add809) & 65535);
      $temp787=$conv810;
      var $522=$temp787;
      var $conv811=(($522)&65535);
      var $523=$temp787;
      var $conv812=(($523)&65535);
      var $shr813=$conv812 >> 8;
      var $add814=(($conv811+$shr813)|0);
      var $shr815=$add814 >> 8;
      var $conv816=(($shr815) & 255);
      var $524=$i719;
      var $525=$palette723;
      var $arrayidx817=(($525+$524*3)|0);
      var $green818=(($arrayidx817+1)|0);
      HEAP8[($green818)]=$conv816;
      var $526=$i719;
      var $527=$palette723;
      var $arrayidx820=(($527+$526*3)|0);
      var $blue821=(($arrayidx820+2)|0);
      var $528=HEAPU8[($blue821)];
      var $conv822=(($528)&255);
      var $conv823=(($conv822)&65535);
      var $529=$i719;
      var $530=$png_ptr_addr;
      var $trans_alpha824=(($530+396)|0);
      var $531=HEAP32[(($trans_alpha824)>>2)];
      var $arrayidx825=(($531+$529)|0);
      var $532=HEAPU8[($arrayidx825)];
      var $conv826=(($532)&255);
      var $conv827=(($conv826)&65535);
      var $mul828=(($conv823*$conv827)|0);
      var $blue829=(($back722+2)|0);
      var $533=HEAPU8[($blue829)];
      var $conv830=(($533)&255);
      var $conv831=(($conv830)&65535);
      var $534=$i719;
      var $535=$png_ptr_addr;
      var $trans_alpha832=(($535+396)|0);
      var $536=HEAP32[(($trans_alpha832)>>2)];
      var $arrayidx833=(($536+$534)|0);
      var $537=HEAPU8[($arrayidx833)];
      var $conv834=(($537)&255);
      var $conv835=(($conv834)&65535);
      var $sub836=((255-$conv835)|0);
      var $conv837=(($sub836) & 65535);
      var $conv838=(($conv837)&65535);
      var $mul839=(($conv831*$conv838)|0);
      var $add840=(($mul828+$mul839)|0);
      var $add841=(($add840+128)|0);
      var $conv842=(($add841) & 65535);
      $temp819=$conv842;
      var $538=$temp819;
      var $conv843=(($538)&65535);
      var $539=$temp819;
      var $conv844=(($539)&65535);
      var $shr845=$conv844 >> 8;
      var $add846=(($conv843+$shr845)|0);
      var $shr847=$add846 >> 8;
      var $conv848=(($shr847) & 255);
      var $540=$i719;
      var $541=$palette723;
      var $arrayidx849=(($541+$540*3)|0);
      var $blue850=(($arrayidx849+2)|0);
      HEAP8[($blue850)]=$conv848;
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      __label__ = 124; break;
    case 124: 
      var $542=$i719;
      var $inc854=(($542+1)|0);
      $i719=$inc854;
      __label__ = 117; break;
    case 125: 
      var $543=$png_ptr_addr;
      var $transformations856=(($543+92)|0);
      var $544=HEAP32[(($transformations856)>>2)];
      var $and857=$544 & -129;
      HEAP32[(($transformations856)>>2)]=$and857;
      __label__ = 126; break;
    case 126: 
      __label__ = 127; break;
    case 127: 
      var $545=$png_ptr_addr;
      var $transformations860=(($545+92)|0);
      var $546=HEAP32[(($transformations860)>>2)];
      var $and861=$546 & 8;
      var $tobool862=(($and861)|0)!=0;
      if ($tobool862) { __label__ = 128; break; } else { __label__ = 152; break; }
    case 128: 
      var $547=$png_ptr_addr;
      var $transformations864=(($547+92)|0);
      var $548=HEAP32[(($transformations864)>>2)];
      var $and865=$548 & 4096;
      var $tobool866=(($and865)|0)!=0;
      if ($tobool866) { __label__ = 152; break; } else { __label__ = 129; break; }
    case 129: 
      var $549=$png_ptr_addr;
      var $color_type868=(($549+291)|0);
      var $550=HEAPU8[($color_type868)];
      var $conv869=(($550)&255);
      var $cmp870=(($conv869)|0)==3;
      if ($cmp870) { __label__ = 130; break; } else { __label__ = 152; break; }
    case 130: 
      var $551=$png_ptr_addr;
      var $num_palette875=(($551+276)|0);
      var $552=HEAPU16[(($num_palette875)>>1)];
      var $conv876=(($552)&65535);
      $istop874=$conv876;
      var $553=$png_ptr_addr;
      var $sig_bit=(($553+384)|0);
      var $red877=(($sig_bit)|0);
      var $554=HEAPU8[($red877)];
      var $conv878=(($554)&255);
      var $sub879=((8-$conv878)|0);
      $shift=$sub879;
      var $555=$png_ptr_addr;
      var $transformations880=(($555+92)|0);
      var $556=HEAP32[(($transformations880)>>2)];
      var $and881=$556 & -9;
      HEAP32[(($transformations880)>>2)]=$and881;
      var $557=$shift;
      var $cmp882=(($557)|0) > 0;
      if ($cmp882) { __label__ = 131; break; } else { __label__ = 137; break; }
    case 131: 
      var $558=$shift;
      var $cmp885=(($558)|0) < 8;
      if ($cmp885) { __label__ = 132; break; } else { __label__ = 137; break; }
    case 132: 
      $i873=0;
      __label__ = 133; break;
    case 133: 
      var $559=$i873;
      var $560=$istop874;
      var $cmp889=(($559)|0) < (($560)|0);
      if ($cmp889) { __label__ = 134; break; } else { __label__ = 136; break; }
    case 134: 
      var $561=$i873;
      var $562=$png_ptr_addr;
      var $palette892=(($562+272)|0);
      var $563=HEAP32[(($palette892)>>2)];
      var $arrayidx893=(($563+$561*3)|0);
      var $red894=(($arrayidx893)|0);
      var $564=HEAPU8[($red894)];
      var $conv895=(($564)&255);
      $component=$conv895;
      var $565=$shift;
      var $566=$component;
      var $shr896=$566 >> (($565)|0);
      $component=$shr896;
      var $567=$component;
      var $conv897=(($567) & 255);
      var $568=$i873;
      var $569=$png_ptr_addr;
      var $palette898=(($569+272)|0);
      var $570=HEAP32[(($palette898)>>2)];
      var $arrayidx899=(($570+$568*3)|0);
      var $red900=(($arrayidx899)|0);
      HEAP8[($red900)]=$conv897;
      __label__ = 135; break;
    case 135: 
      var $571=$i873;
      var $inc902=(($571+1)|0);
      $i873=$inc902;
      __label__ = 133; break;
    case 136: 
      __label__ = 137; break;
    case 137: 
      var $572=$png_ptr_addr;
      var $sig_bit905=(($572+384)|0);
      var $green906=(($sig_bit905+1)|0);
      var $573=HEAPU8[($green906)];
      var $conv907=(($573)&255);
      var $sub908=((8-$conv907)|0);
      $shift=$sub908;
      var $574=$shift;
      var $cmp909=(($574)|0) > 0;
      if ($cmp909) { __label__ = 138; break; } else { __label__ = 144; break; }
    case 138: 
      var $575=$shift;
      var $cmp912=(($575)|0) < 8;
      if ($cmp912) { __label__ = 139; break; } else { __label__ = 144; break; }
    case 139: 
      $i873=0;
      __label__ = 140; break;
    case 140: 
      var $576=$i873;
      var $577=$istop874;
      var $cmp916=(($576)|0) < (($577)|0);
      if ($cmp916) { __label__ = 141; break; } else { __label__ = 143; break; }
    case 141: 
      var $578=$i873;
      var $579=$png_ptr_addr;
      var $palette920=(($579+272)|0);
      var $580=HEAP32[(($palette920)>>2)];
      var $arrayidx921=(($580+$578*3)|0);
      var $green922=(($arrayidx921+1)|0);
      var $581=HEAPU8[($green922)];
      var $conv923=(($581)&255);
      $component919=$conv923;
      var $582=$shift;
      var $583=$component919;
      var $shr924=$583 >> (($582)|0);
      $component919=$shr924;
      var $584=$component919;
      var $conv925=(($584) & 255);
      var $585=$i873;
      var $586=$png_ptr_addr;
      var $palette926=(($586+272)|0);
      var $587=HEAP32[(($palette926)>>2)];
      var $arrayidx927=(($587+$585*3)|0);
      var $green928=(($arrayidx927+1)|0);
      HEAP8[($green928)]=$conv925;
      __label__ = 142; break;
    case 142: 
      var $588=$i873;
      var $inc930=(($588+1)|0);
      $i873=$inc930;
      __label__ = 140; break;
    case 143: 
      __label__ = 144; break;
    case 144: 
      var $589=$png_ptr_addr;
      var $sig_bit933=(($589+384)|0);
      var $blue934=(($sig_bit933+2)|0);
      var $590=HEAPU8[($blue934)];
      var $conv935=(($590)&255);
      var $sub936=((8-$conv935)|0);
      $shift=$sub936;
      var $591=$shift;
      var $cmp937=(($591)|0) > 0;
      if ($cmp937) { __label__ = 145; break; } else { __label__ = 151; break; }
    case 145: 
      var $592=$shift;
      var $cmp940=(($592)|0) < 8;
      if ($cmp940) { __label__ = 146; break; } else { __label__ = 151; break; }
    case 146: 
      $i873=0;
      __label__ = 147; break;
    case 147: 
      var $593=$i873;
      var $594=$istop874;
      var $cmp944=(($593)|0) < (($594)|0);
      if ($cmp944) { __label__ = 148; break; } else { __label__ = 150; break; }
    case 148: 
      var $595=$i873;
      var $596=$png_ptr_addr;
      var $palette948=(($596+272)|0);
      var $597=HEAP32[(($palette948)>>2)];
      var $arrayidx949=(($597+$595*3)|0);
      var $blue950=(($arrayidx949+2)|0);
      var $598=HEAPU8[($blue950)];
      var $conv951=(($598)&255);
      $component947=$conv951;
      var $599=$shift;
      var $600=$component947;
      var $shr952=$600 >> (($599)|0);
      $component947=$shr952;
      var $601=$component947;
      var $conv953=(($601) & 255);
      var $602=$i873;
      var $603=$png_ptr_addr;
      var $palette954=(($603+272)|0);
      var $604=HEAP32[(($palette954)>>2)];
      var $arrayidx955=(($604+$602*3)|0);
      var $blue956=(($arrayidx955+2)|0);
      HEAP8[($blue956)]=$conv953;
      __label__ = 149; break;
    case 149: 
      var $605=$i873;
      var $inc958=(($605+1)|0);
      $i873=$inc958;
      __label__ = 147; break;
    case 150: 
      __label__ = 151; break;
    case 151: 
      __label__ = 152; break;
    case 152: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_init_read_transformations["X"]=1;

function _png_init_palette_transformations($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $input_has_alpha;
      var $input_has_transparency;
      var $i;
      var $i62;
      var $istop;
      $png_ptr_addr=$png_ptr;
      $input_has_alpha=0;
      $input_has_transparency=0;
      var $0=$png_ptr_addr;
      var $num_trans=(($0+284)|0);
      var $1=HEAPU16[(($num_trans)>>1)];
      var $conv=(($1)&65535);
      var $cmp=(($conv)|0) > 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 13; break; }
    case 2: 
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $2=$i;
      var $3=$png_ptr_addr;
      var $num_trans2=(($3+284)|0);
      var $4=HEAPU16[(($num_trans2)>>1)];
      var $conv3=(($4)&65535);
      var $cmp4=(($2)|0) < (($conv3)|0);
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $5=$i;
      var $6=$png_ptr_addr;
      var $trans_alpha=(($6+396)|0);
      var $7=HEAP32[(($trans_alpha)>>2)];
      var $arrayidx=(($7+$5)|0);
      var $8=HEAPU8[($arrayidx)];
      var $conv6=(($8)&255);
      var $cmp7=(($conv6)|0)==255;
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 11; break;
    case 6: 
      var $9=$i;
      var $10=$png_ptr_addr;
      var $trans_alpha10=(($10+396)|0);
      var $11=HEAP32[(($trans_alpha10)>>2)];
      var $arrayidx11=(($11+$9)|0);
      var $12=HEAPU8[($arrayidx11)];
      var $conv12=(($12)&255);
      var $cmp13=(($conv12)|0)==0;
      if ($cmp13) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $input_has_transparency=1;
      __label__ = 9; break;
    case 8: 
      $input_has_alpha=1;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $13=$i;
      var $inc=(($13+1)|0);
      $i=$inc;
      __label__ = 3; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $14=$input_has_alpha;
      var $tobool=(($14)|0)!=0;
      if ($tobool) { __label__ = 17; break; } else { __label__ = 14; break; }
    case 14: 
      var $15=$png_ptr_addr;
      var $transformations=(($15+92)|0);
      var $16=HEAP32[(($transformations)>>2)];
      var $and=$16 & -8388609;
      HEAP32[(($transformations)>>2)]=$and;
      var $17=$png_ptr_addr;
      var $flags=(($17+88)|0);
      var $18=HEAP32[(($flags)>>2)];
      var $and20=$18 & -8193;
      HEAP32[(($flags)>>2)]=$and20;
      var $19=$input_has_transparency;
      var $tobool21=(($19)|0)!=0;
      if ($tobool21) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $20=$png_ptr_addr;
      var $transformations23=(($20+92)|0);
      var $21=HEAP32[(($transformations23)>>2)];
      var $and24=$21 & -385;
      HEAP32[(($transformations23)>>2)]=$and24;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $22=$png_ptr_addr;
      var $transformations27=(($22+92)|0);
      var $23=HEAP32[(($transformations27)>>2)];
      var $and28=$23 & 256;
      var $tobool29=(($and28)|0)!=0;
      if ($tobool29) { __label__ = 18; break; } else { __label__ = 28; break; }
    case 18: 
      var $24=$png_ptr_addr;
      var $transformations30=(($24+92)|0);
      var $25=HEAP32[(($transformations30)>>2)];
      var $and31=$25 & 4096;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 19; break; } else { __label__ = 28; break; }
    case 19: 
      var $26=$png_ptr_addr;
      var $background=(($26+316)|0);
      var $index=(($background)|0);
      var $27=HEAPU8[($index)];
      var $idxprom=(($27)&255);
      var $28=$png_ptr_addr;
      var $palette=(($28+272)|0);
      var $29=HEAP32[(($palette)>>2)];
      var $arrayidx34=(($29+$idxprom*3)|0);
      var $red=(($arrayidx34)|0);
      var $30=HEAPU8[($red)];
      var $conv35=(($30)&255);
      var $31=$png_ptr_addr;
      var $background36=(($31+316)|0);
      var $red37=(($background36+2)|0);
      HEAP16[(($red37)>>1)]=$conv35;
      var $32=$png_ptr_addr;
      var $background38=(($32+316)|0);
      var $index39=(($background38)|0);
      var $33=HEAPU8[($index39)];
      var $idxprom40=(($33)&255);
      var $34=$png_ptr_addr;
      var $palette41=(($34+272)|0);
      var $35=HEAP32[(($palette41)>>2)];
      var $arrayidx42=(($35+$idxprom40*3)|0);
      var $green=(($arrayidx42+1)|0);
      var $36=HEAPU8[($green)];
      var $conv43=(($36)&255);
      var $37=$png_ptr_addr;
      var $background44=(($37+316)|0);
      var $green45=(($background44+4)|0);
      HEAP16[(($green45)>>1)]=$conv43;
      var $38=$png_ptr_addr;
      var $background46=(($38+316)|0);
      var $index47=(($background46)|0);
      var $39=HEAPU8[($index47)];
      var $idxprom48=(($39)&255);
      var $40=$png_ptr_addr;
      var $palette49=(($40+272)|0);
      var $41=HEAP32[(($palette49)>>2)];
      var $arrayidx50=(($41+$idxprom48*3)|0);
      var $blue=(($arrayidx50+2)|0);
      var $42=HEAPU8[($blue)];
      var $conv51=(($42)&255);
      var $43=$png_ptr_addr;
      var $background52=(($43+316)|0);
      var $blue53=(($background52+6)|0);
      HEAP16[(($blue53)>>1)]=$conv51;
      var $44=$png_ptr_addr;
      var $transformations54=(($44+92)|0);
      var $45=HEAP32[(($transformations54)>>2)];
      var $and55=$45 & 524288;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { __label__ = 20; break; } else { __label__ = 27; break; }
    case 20: 
      var $46=$png_ptr_addr;
      var $transformations58=(($46+92)|0);
      var $47=HEAP32[(($transformations58)>>2)];
      var $and59=$47 & 33554432;
      var $tobool60=(($and59)|0)!=0;
      if ($tobool60) { __label__ = 26; break; } else { __label__ = 21; break; }
    case 21: 
      var $48=$png_ptr_addr;
      var $num_trans63=(($48+284)|0);
      var $49=HEAPU16[(($num_trans63)>>1)];
      var $conv64=(($49)&65535);
      $istop=$conv64;
      $i62=0;
      __label__ = 22; break;
    case 22: 
      var $50=$i62;
      var $51=$istop;
      var $cmp66=(($50)|0) < (($51)|0);
      if ($cmp66) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $52=$i62;
      var $53=$png_ptr_addr;
      var $trans_alpha69=(($53+396)|0);
      var $54=HEAP32[(($trans_alpha69)>>2)];
      var $arrayidx70=(($54+$52)|0);
      var $55=HEAPU8[($arrayidx70)];
      var $conv71=(($55)&255);
      var $sub=((255-$conv71)|0);
      var $conv72=(($sub) & 255);
      var $56=$i62;
      var $57=$png_ptr_addr;
      var $trans_alpha73=(($57+396)|0);
      var $58=HEAP32[(($trans_alpha73)>>2)];
      var $arrayidx74=(($58+$56)|0);
      HEAP8[($arrayidx74)]=$conv72;
      __label__ = 24; break;
    case 24: 
      var $59=$i62;
      var $inc76=(($59+1)|0);
      $i62=$inc76;
      __label__ = 22; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_init_palette_transformations["X"]=1;

function _png_init_rgb_transformations($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $input_has_alpha;
      var $input_has_transparency;
      var $gray;
      var $trans_gray;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $color_type=(($0+291)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $and=$conv & 4;
      var $cmp=(($and)|0)!=0;
      var $conv1=(($cmp)&1);
      $input_has_alpha=$conv1;
      var $2=$png_ptr_addr;
      var $num_trans=(($2+284)|0);
      var $3=HEAPU16[(($num_trans)>>1)];
      var $conv2=(($3)&65535);
      var $cmp3=(($conv2)|0) > 0;
      var $conv4=(($cmp3)&1);
      $input_has_transparency=$conv4;
      var $4=$input_has_alpha;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 2; break; }
    case 2: 
      var $5=$png_ptr_addr;
      var $transformations=(($5+92)|0);
      var $6=HEAP32[(($transformations)>>2)];
      var $and5=$6 & -8388609;
      HEAP32[(($transformations)>>2)]=$and5;
      var $7=$png_ptr_addr;
      var $flags=(($7+88)|0);
      var $8=HEAP32[(($flags)>>2)];
      var $and6=$8 & -8193;
      HEAP32[(($flags)>>2)]=$and6;
      var $9=$input_has_transparency;
      var $tobool7=(($9)|0)!=0;
      if ($tobool7) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $10=$png_ptr_addr;
      var $transformations9=(($10+92)|0);
      var $11=HEAP32[(($transformations9)>>2)];
      var $and10=$11 & -385;
      HEAP32[(($transformations9)>>2)]=$and10;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $12=$png_ptr_addr;
      var $transformations12=(($12+92)|0);
      var $13=HEAP32[(($transformations12)>>2)];
      var $and13=$13 & 256;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 6; break; } else { __label__ = 17; break; }
    case 6: 
      var $14=$png_ptr_addr;
      var $transformations15=(($14+92)|0);
      var $15=HEAP32[(($transformations15)>>2)];
      var $and16=$15 & 4096;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { __label__ = 7; break; } else { __label__ = 17; break; }
    case 7: 
      var $16=$png_ptr_addr;
      var $color_type19=(($16+291)|0);
      var $17=HEAPU8[($color_type19)];
      var $conv20=(($17)&255);
      var $and21=$conv20 & 2;
      var $tobool22=(($and21)|0)!=0;
      if ($tobool22) { __label__ = 17; break; } else { __label__ = 8; break; }
    case 8: 
      var $18=$png_ptr_addr;
      var $background=(($18+316)|0);
      var $gray24=(($background+8)|0);
      var $19=HEAPU16[(($gray24)>>1)];
      var $conv25=(($19)&65535);
      $gray=$conv25;
      var $20=$png_ptr_addr;
      var $trans_color=(($20+400)|0);
      var $gray26=(($trans_color+8)|0);
      var $21=HEAPU16[(($gray26)>>1)];
      var $conv27=(($21)&65535);
      $trans_gray=$conv27;
      var $22=$png_ptr_addr;
      var $bit_depth=(($22+292)|0);
      var $23=HEAPU8[($bit_depth)];
      var $conv28=(($23)&255);
      if ((($conv28)|0) == 1) {
        __label__ = 9; break;
      }
      else if ((($conv28)|0) == 2) {
        __label__ = 10; break;
      }
      else if ((($conv28)|0) == 4) {
        __label__ = 11; break;
      }
      else if ((($conv28)|0) == 8 || (($conv28)|0) == 16) {
        __label__ = 13; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 9: 
      var $24=$gray;
      var $mul=(($24*255)|0);
      $gray=$mul;
      var $25=$trans_gray;
      var $mul29=(($25*255)|0);
      $trans_gray=$mul29;
      __label__ = 14; break;
    case 10: 
      var $26=$gray;
      var $mul31=(($26*85)|0);
      $gray=$mul31;
      var $27=$trans_gray;
      var $mul32=(($27*85)|0);
      $trans_gray=$mul32;
      __label__ = 14; break;
    case 11: 
      var $28=$gray;
      var $mul34=(($28*17)|0);
      $gray=$mul34;
      var $29=$trans_gray;
      var $mul35=(($29*17)|0);
      $trans_gray=$mul35;
      __label__ = 14; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $30=$gray;
      var $conv37=(($30) & 65535);
      var $31=$png_ptr_addr;
      var $background38=(($31+316)|0);
      var $blue=(($background38+6)|0);
      HEAP16[(($blue)>>1)]=$conv37;
      var $32=$png_ptr_addr;
      var $background39=(($32+316)|0);
      var $green=(($background39+4)|0);
      HEAP16[(($green)>>1)]=$conv37;
      var $33=$png_ptr_addr;
      var $background40=(($33+316)|0);
      var $red=(($background40+2)|0);
      HEAP16[(($red)>>1)]=$conv37;
      var $34=$png_ptr_addr;
      var $transformations41=(($34+92)|0);
      var $35=HEAP32[(($transformations41)>>2)];
      var $and42=$35 & 33554432;
      var $tobool43=(($and42)|0)!=0;
      if ($tobool43) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $36=$trans_gray;
      var $conv45=(($36) & 65535);
      var $37=$png_ptr_addr;
      var $trans_color46=(($37+400)|0);
      var $blue47=(($trans_color46+6)|0);
      HEAP16[(($blue47)>>1)]=$conv45;
      var $38=$png_ptr_addr;
      var $trans_color48=(($38+400)|0);
      var $green49=(($trans_color48+4)|0);
      HEAP16[(($green49)>>1)]=$conv45;
      var $39=$png_ptr_addr;
      var $trans_color50=(($39+400)|0);
      var $red51=(($trans_color50+2)|0);
      HEAP16[(($red51)>>1)]=$conv45;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_init_rgb_transformations["X"]=1;

function _png_gamma_threshold($screen_gamma, $file_gamma) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $screen_gamma_addr;
      var $file_gamma_addr;
      var $gtest=__stackBase__;
      $screen_gamma_addr=$screen_gamma;
      $file_gamma_addr=$file_gamma;
      var $0=$screen_gamma_addr;
      var $1=$file_gamma_addr;
      var $call=_png_muldiv($gtest, $0, $1, 100000);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { var $3 = 1;__label__ = 3; break; }
    case 2: 
      var $2=HEAP32[(($gtest)>>2)];
      var $call1=_png_gamma_significant($2);
      var $tobool2=(($call1)|0)!=0;
      var $3 = $tobool2;__label__ = 3; break;
    case 3: 
      var $3;
      var $lor_ext=(($3)&1);
      STACKTOP = __stackBase__;
      return $lor_ext;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_read_transform_info($png_ptr, $info_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      var $0=$png_ptr_addr;
      var $transformations=(($0+92)|0);
      var $1=HEAP32[(($transformations)>>2)];
      var $and=$1 & 4096;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 15; break; }
    case 2: 
      var $2=$info_ptr_addr;
      var $color_type=(($2+25)|0);
      var $3=HEAPU8[($color_type)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==3;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $4=$png_ptr_addr;
      var $num_trans=(($4+284)|0);
      var $5=HEAPU16[(($num_trans)>>1)];
      var $conv3=(($5)&65535);
      var $cmp4=(($conv3)|0) > 0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $6=$info_ptr_addr;
      var $color_type7=(($6+25)|0);
      HEAP8[($color_type7)]=6;
      __label__ = 6; break;
    case 5: 
      var $7=$info_ptr_addr;
      var $color_type8=(($7+25)|0);
      HEAP8[($color_type8)]=2;
      __label__ = 6; break;
    case 6: 
      var $8=$info_ptr_addr;
      var $bit_depth=(($8+24)|0);
      HEAP8[($bit_depth)]=8;
      var $9=$info_ptr_addr;
      var $num_trans9=(($9+22)|0);
      HEAP16[(($num_trans9)>>1)]=0;
      __label__ = 14; break;
    case 7: 
      var $10=$png_ptr_addr;
      var $num_trans11=(($10+284)|0);
      var $11=HEAP16[(($num_trans11)>>1)];
      var $tobool12=(($11 << 16) >> 16)!=0;
      if ($tobool12) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $12=$png_ptr_addr;
      var $transformations14=(($12+92)|0);
      var $13=HEAP32[(($transformations14)>>2)];
      var $and15=$13 & 33554432;
      var $tobool16=(($and15)|0)!=0;
      if ($tobool16) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $14=$info_ptr_addr;
      var $color_type18=(($14+25)|0);
      var $15=HEAPU8[($color_type18)];
      var $conv19=(($15)&255);
      var $or=$conv19 | 4;
      var $conv20=(($or) & 255);
      HEAP8[($color_type18)]=$conv20;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $16=$info_ptr_addr;
      var $bit_depth23=(($16+24)|0);
      var $17=HEAPU8[($bit_depth23)];
      var $conv24=(($17)&255);
      var $cmp25=(($conv24)|0) < 8;
      if ($cmp25) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $18=$info_ptr_addr;
      var $bit_depth28=(($18+24)|0);
      HEAP8[($bit_depth28)]=8;
      __label__ = 13; break;
    case 13: 
      var $19=$info_ptr_addr;
      var $num_trans30=(($19+22)|0);
      HEAP16[(($num_trans30)>>1)]=0;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $20=$png_ptr_addr;
      var $transformations33=(($20+92)|0);
      var $21=HEAP32[(($transformations33)>>2)];
      var $and34=$21 & 128;
      var $tobool35=(($and34)|0)!=0;
      if ($tobool35) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $22=$info_ptr_addr;
      var $background=(($22+90)|0);
      var $23=$png_ptr_addr;
      var $background37=(($23+316)|0);
      var $24=$background;
      var $25=$background37;
      assert(10 % 1 === 0, 'memcpy given ' + 10 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($24)>>1)]=HEAP16[(($25)>>1)];HEAP16[(($24+2)>>1)]=HEAP16[(($25+2)>>1)];HEAP16[(($24+4)>>1)]=HEAP16[(($25+4)>>1)];HEAP16[(($24+6)>>1)]=HEAP16[(($25+6)>>1)];HEAP16[(($24+8)>>1)]=HEAP16[(($25+8)>>1)];
      __label__ = 17; break;
    case 17: 
      var $26=$png_ptr_addr;
      var $gamma=(($26+352)|0);
      var $27=HEAP32[(($gamma)>>2)];
      var $28=$info_ptr_addr;
      var $gamma39=(($28+40)|0);
      HEAP32[(($gamma39)>>2)]=$27;
      var $29=$info_ptr_addr;
      var $bit_depth40=(($29+24)|0);
      var $30=HEAPU8[($bit_depth40)];
      var $conv41=(($30)&255);
      var $cmp42=(($conv41)|0)==16;
      if ($cmp42) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: 
      var $31=$png_ptr_addr;
      var $transformations45=(($31+92)|0);
      var $32=HEAP32[(($transformations45)>>2)];
      var $and46=$32 & 67108864;
      var $tobool47=(($and46)|0)!=0;
      if ($tobool47) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $33=$info_ptr_addr;
      var $bit_depth49=(($33+24)|0);
      HEAP8[($bit_depth49)]=8;
      __label__ = 20; break;
    case 20: 
      var $34=$png_ptr_addr;
      var $transformations51=(($34+92)|0);
      var $35=HEAP32[(($transformations51)>>2)];
      var $and52=$35 & 1024;
      var $tobool53=(($and52)|0)!=0;
      if ($tobool53) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $36=$info_ptr_addr;
      var $bit_depth55=(($36+24)|0);
      HEAP8[($bit_depth55)]=8;
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $37=$png_ptr_addr;
      var $transformations58=(($37+92)|0);
      var $38=HEAP32[(($transformations58)>>2)];
      var $and59=$38 & 16384;
      var $tobool60=(($and59)|0)!=0;
      if ($tobool60) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $39=$info_ptr_addr;
      var $color_type62=(($39+25)|0);
      var $40=HEAPU8[($color_type62)];
      var $conv63=(($40)&255);
      var $or64=$conv63 | 2;
      var $conv65=(($or64) & 255);
      var $41=$info_ptr_addr;
      var $color_type66=(($41+25)|0);
      HEAP8[($color_type66)]=$conv65;
      __label__ = 25; break;
    case 25: 
      var $42=$png_ptr_addr;
      var $transformations68=(($42+92)|0);
      var $43=HEAP32[(($transformations68)>>2)];
      var $and69=$43 & 6291456;
      var $tobool70=(($and69)|0)!=0;
      if ($tobool70) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $44=$info_ptr_addr;
      var $color_type72=(($44+25)|0);
      var $45=HEAPU8[($color_type72)];
      var $conv73=(($45)&255);
      var $and74=$conv73 & -3;
      var $conv75=(($and74) & 255);
      var $46=$info_ptr_addr;
      var $color_type76=(($46+25)|0);
      HEAP8[($color_type76)]=$conv75;
      __label__ = 27; break;
    case 27: 
      var $47=$png_ptr_addr;
      var $transformations78=(($47+92)|0);
      var $48=HEAP32[(($transformations78)>>2)];
      var $and79=$48 & 64;
      var $tobool80=(($and79)|0)!=0;
      if ($tobool80) { __label__ = 28; break; } else { __label__ = 34; break; }
    case 28: 
      var $49=$info_ptr_addr;
      var $color_type82=(($49+25)|0);
      var $50=HEAPU8[($color_type82)];
      var $conv83=(($50)&255);
      var $cmp84=(($conv83)|0)==2;
      if ($cmp84) { __label__ = 30; break; } else { __label__ = 29; break; }
    case 29: 
      var $51=$info_ptr_addr;
      var $color_type86=(($51+25)|0);
      var $52=HEAPU8[($color_type86)];
      var $conv87=(($52)&255);
      var $cmp88=(($conv87)|0)==6;
      if ($cmp88) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $53=$png_ptr_addr;
      var $palette_lookup=(($53+480)|0);
      var $54=HEAP32[(($palette_lookup)>>2)];
      var $tobool90=(($54)|0)!=0;
      if ($tobool90) { __label__ = 31; break; } else { __label__ = 33; break; }
    case 31: 
      var $55=$info_ptr_addr;
      var $bit_depth92=(($55+24)|0);
      var $56=HEAPU8[($bit_depth92)];
      var $conv93=(($56)&255);
      var $cmp94=(($conv93)|0)==8;
      if ($cmp94) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $57=$info_ptr_addr;
      var $color_type97=(($57+25)|0);
      HEAP8[($color_type97)]=3;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $58=$png_ptr_addr;
      var $transformations100=(($58+92)|0);
      var $59=HEAP32[(($transformations100)>>2)];
      var $and101=$59 & 512;
      var $tobool102=(($and101)|0)!=0;
      if ($tobool102) { __label__ = 35; break; } else { __label__ = 38; break; }
    case 35: 
      var $60=$info_ptr_addr;
      var $bit_depth104=(($60+24)|0);
      var $61=HEAPU8[($bit_depth104)];
      var $conv105=(($61)&255);
      var $cmp106=(($conv105)|0)==8;
      if ($cmp106) { __label__ = 36; break; } else { __label__ = 38; break; }
    case 36: 
      var $62=$info_ptr_addr;
      var $color_type109=(($62+25)|0);
      var $63=HEAPU8[($color_type109)];
      var $conv110=(($63)&255);
      var $cmp111=(($conv110)|0)!=3;
      if ($cmp111) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $64=$info_ptr_addr;
      var $bit_depth114=(($64+24)|0);
      HEAP8[($bit_depth114)]=16;
      __label__ = 38; break;
    case 38: 
      var $65=$png_ptr_addr;
      var $transformations116=(($65+92)|0);
      var $66=HEAP32[(($transformations116)>>2)];
      var $and117=$66 & 4;
      var $tobool118=(($and117)|0)!=0;
      if ($tobool118) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 39: 
      var $67=$info_ptr_addr;
      var $bit_depth120=(($67+24)|0);
      var $68=HEAPU8[($bit_depth120)];
      var $conv121=(($68)&255);
      var $cmp122=(($conv121)|0) < 8;
      if ($cmp122) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $69=$info_ptr_addr;
      var $bit_depth125=(($69+24)|0);
      HEAP8[($bit_depth125)]=8;
      __label__ = 41; break;
    case 41: 
      var $70=$info_ptr_addr;
      var $color_type127=(($70+25)|0);
      var $71=HEAPU8[($color_type127)];
      var $conv128=(($71)&255);
      var $cmp129=(($conv128)|0)==3;
      if ($cmp129) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $72=$info_ptr_addr;
      var $channels=(($72+29)|0);
      HEAP8[($channels)]=1;
      __label__ = 47; break;
    case 43: 
      var $73=$info_ptr_addr;
      var $color_type133=(($73+25)|0);
      var $74=HEAPU8[($color_type133)];
      var $conv134=(($74)&255);
      var $and135=$conv134 & 2;
      var $tobool136=(($and135)|0)!=0;
      if ($tobool136) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $75=$info_ptr_addr;
      var $channels138=(($75+29)|0);
      HEAP8[($channels138)]=3;
      __label__ = 46; break;
    case 45: 
      var $76=$info_ptr_addr;
      var $channels140=(($76+29)|0);
      HEAP8[($channels140)]=1;
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $77=$png_ptr_addr;
      var $transformations143=(($77+92)|0);
      var $78=HEAP32[(($transformations143)>>2)];
      var $and144=$78 & 262144;
      var $tobool145=(($and144)|0)!=0;
      if ($tobool145) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $79=$info_ptr_addr;
      var $color_type147=(($79+25)|0);
      var $80=HEAPU8[($color_type147)];
      var $conv148=(($80)&255);
      var $and149=$conv148 & -5;
      var $conv150=(($and149) & 255);
      var $81=$info_ptr_addr;
      var $color_type151=(($81+25)|0);
      HEAP8[($color_type151)]=$conv150;
      var $82=$info_ptr_addr;
      var $num_trans152=(($82+22)|0);
      HEAP16[(($num_trans152)>>1)]=0;
      __label__ = 49; break;
    case 49: 
      var $83=$info_ptr_addr;
      var $color_type154=(($83+25)|0);
      var $84=HEAPU8[($color_type154)];
      var $conv155=(($84)&255);
      var $and156=$conv155 & 4;
      var $tobool157=(($and156)|0)!=0;
      if ($tobool157) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $85=$info_ptr_addr;
      var $channels159=(($85+29)|0);
      var $86=HEAP8[($channels159)];
      var $inc=(($86+1)&255);
      HEAP8[($channels159)]=$inc;
      __label__ = 51; break;
    case 51: 
      var $87=$png_ptr_addr;
      var $transformations161=(($87+92)|0);
      var $88=HEAP32[(($transformations161)>>2)];
      var $and162=$88 & 32768;
      var $tobool163=(($and162)|0)!=0;
      if ($tobool163) { __label__ = 52; break; } else { __label__ = 57; break; }
    case 52: 
      var $89=$info_ptr_addr;
      var $color_type165=(($89+25)|0);
      var $90=HEAPU8[($color_type165)];
      var $conv166=(($90)&255);
      var $cmp167=(($conv166)|0)==2;
      if ($cmp167) { __label__ = 54; break; } else { __label__ = 53; break; }
    case 53: 
      var $91=$info_ptr_addr;
      var $color_type170=(($91+25)|0);
      var $92=HEAPU8[($color_type170)];
      var $conv171=(($92)&255);
      var $cmp172=(($conv171)|0)==0;
      if ($cmp172) { __label__ = 54; break; } else { __label__ = 57; break; }
    case 54: 
      var $93=$info_ptr_addr;
      var $channels175=(($93+29)|0);
      var $94=HEAP8[($channels175)];
      var $inc176=(($94+1)&255);
      HEAP8[($channels175)]=$inc176;
      var $95=$png_ptr_addr;
      var $transformations177=(($95+92)|0);
      var $96=HEAP32[(($transformations177)>>2)];
      var $and178=$96 & 16777216;
      var $tobool179=(($and178)|0)!=0;
      if ($tobool179) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $97=$info_ptr_addr;
      var $color_type181=(($97+25)|0);
      var $98=HEAPU8[($color_type181)];
      var $conv182=(($98)&255);
      var $or183=$conv182 | 4;
      var $conv184=(($or183) & 255);
      HEAP8[($color_type181)]=$conv184;
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $99=$png_ptr_addr;
      var $transformations187=(($99+92)|0);
      var $100=HEAP32[(($transformations187)>>2)];
      var $and188=$100 & 1048576;
      var $tobool189=(($and188)|0)!=0;
      if ($tobool189) { __label__ = 58; break; } else { __label__ = 63; break; }
    case 58: 
      var $101=$info_ptr_addr;
      var $bit_depth191=(($101+24)|0);
      var $102=HEAPU8[($bit_depth191)];
      var $conv192=(($102)&255);
      var $103=$png_ptr_addr;
      var $user_transform_depth=(($103+80)|0);
      var $104=HEAPU8[($user_transform_depth)];
      var $conv193=(($104)&255);
      var $cmp194=(($conv192)|0) < (($conv193)|0);
      if ($cmp194) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $105=$png_ptr_addr;
      var $user_transform_depth197=(($105+80)|0);
      var $106=HEAP8[($user_transform_depth197)];
      var $107=$info_ptr_addr;
      var $bit_depth198=(($107+24)|0);
      HEAP8[($bit_depth198)]=$106;
      __label__ = 60; break;
    case 60: 
      var $108=$info_ptr_addr;
      var $channels200=(($108+29)|0);
      var $109=HEAPU8[($channels200)];
      var $conv201=(($109)&255);
      var $110=$png_ptr_addr;
      var $user_transform_channels=(($110+81)|0);
      var $111=HEAPU8[($user_transform_channels)];
      var $conv202=(($111)&255);
      var $cmp203=(($conv201)|0) < (($conv202)|0);
      if ($cmp203) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $112=$png_ptr_addr;
      var $user_transform_channels206=(($112+81)|0);
      var $113=HEAP8[($user_transform_channels206)];
      var $114=$info_ptr_addr;
      var $channels207=(($114+29)|0);
      HEAP8[($channels207)]=$113;
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $115=$info_ptr_addr;
      var $channels210=(($115+29)|0);
      var $116=HEAPU8[($channels210)];
      var $conv211=(($116)&255);
      var $117=$info_ptr_addr;
      var $bit_depth212=(($117+24)|0);
      var $118=HEAPU8[($bit_depth212)];
      var $conv213=(($118)&255);
      var $mul=(($conv211*$conv213)|0);
      var $conv214=(($mul) & 255);
      var $119=$info_ptr_addr;
      var $pixel_depth=(($119+30)|0);
      HEAP8[($pixel_depth)]=$conv214;
      var $120=$info_ptr_addr;
      var $pixel_depth215=(($120+30)|0);
      var $121=HEAPU8[($pixel_depth215)];
      var $conv216=(($121)&255);
      var $cmp217=(($conv216)|0) >= 8;
      if ($cmp217) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $122=$info_ptr_addr;
      var $width=(($122)|0);
      var $123=HEAP32[(($width)>>2)];
      var $124=$info_ptr_addr;
      var $pixel_depth219=(($124+30)|0);
      var $125=HEAPU8[($pixel_depth219)];
      var $conv220=(($125)&255);
      var $shr=$conv220 >>> 3;
      var $mul221=(($123*$shr)|0);
      var $cond = $mul221;__label__ = 66; break;
    case 65: 
      var $126=$info_ptr_addr;
      var $width222=(($126)|0);
      var $127=HEAP32[(($width222)>>2)];
      var $128=$info_ptr_addr;
      var $pixel_depth223=(($128+30)|0);
      var $129=HEAPU8[($pixel_depth223)];
      var $conv224=(($129)&255);
      var $mul225=(($127*$conv224)|0);
      var $add=(($mul225+7)|0);
      var $shr226=$add >>> 3;
      var $cond = $shr226;__label__ = 66; break;
    case 66: 
      var $cond;
      var $130=$info_ptr_addr;
      var $rowbytes=(($130+12)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      var $131=$info_ptr_addr;
      var $rowbytes227=(($131+12)|0);
      var $132=HEAP32[(($rowbytes227)>>2)];
      var $133=$png_ptr_addr;
      var $info_rowbytes=(($133+260)|0);
      HEAP32[(($info_rowbytes)>>2)]=$132;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_transform_info["X"]=1;

function _png_do_read_transformations($png_ptr, $row_info) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $row_info_addr;
      var $rgb_error;
      $png_ptr_addr=$png_ptr;
      $row_info_addr=$row_info;
      var $0=$png_ptr_addr;
      var $row_buf=(($0+240)|0);
      var $1=HEAP32[(($row_buf)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str12721)|0));
      __label__ = 3; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $flags=(($3+88)|0);
      var $4=HEAP32[(($flags)>>2)];
      var $and=$4 & 16384;
      var $cmp1=(($and)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $5=$png_ptr_addr;
      var $flags2=(($5+88)|0);
      var $6=HEAP32[(($flags2)>>2)];
      var $and3=$6 & 64;
      var $tobool=(($and3)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $7=$png_ptr_addr;
      _png_error($7, ((STRING_TABLE.__str13722)|0));
      __label__ = 6; break;
    case 6: 
      var $8=$png_ptr_addr;
      var $transformations=(($8+92)|0);
      var $9=HEAP32[(($transformations)>>2)];
      var $and6=$9 & 4096;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { __label__ = 7; break; } else { __label__ = 15; break; }
    case 7: 
      var $10=$row_info_addr;
      var $color_type=(($10+8)|0);
      var $11=HEAPU8[($color_type)];
      var $conv=(($11)&255);
      var $cmp9=(($conv)|0)==3;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $12=$row_info_addr;
      var $13=$png_ptr_addr;
      var $row_buf12=(($13+240)|0);
      var $14=HEAP32[(($row_buf12)>>2)];
      var $add_ptr=(($14+1)|0);
      var $15=$png_ptr_addr;
      var $palette=(($15+272)|0);
      var $16=HEAP32[(($palette)>>2)];
      var $17=$png_ptr_addr;
      var $trans_alpha=(($17+396)|0);
      var $18=HEAP32[(($trans_alpha)>>2)];
      var $19=$png_ptr_addr;
      var $num_trans=(($19+284)|0);
      var $20=HEAPU16[(($num_trans)>>1)];
      var $conv13=(($20)&65535);
      _png_do_expand_palette($12, $add_ptr, $16, $18, $conv13);
      __label__ = 14; break;
    case 9: 
      var $21=$png_ptr_addr;
      var $num_trans14=(($21+284)|0);
      var $22=HEAPU16[(($num_trans14)>>1)];
      var $conv15=(($22)&65535);
      var $tobool16=(($conv15)|0)!=0;
      if ($tobool16) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $23=$png_ptr_addr;
      var $transformations18=(($23+92)|0);
      var $24=HEAP32[(($transformations18)>>2)];
      var $and19=$24 & 33554432;
      var $tobool20=(($and19)|0)!=0;
      if ($tobool20) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $25=$row_info_addr;
      var $26=$png_ptr_addr;
      var $row_buf22=(($26+240)|0);
      var $27=HEAP32[(($row_buf22)>>2)];
      var $add_ptr23=(($27+1)|0);
      var $28=$png_ptr_addr;
      var $trans_color=(($28+400)|0);
      _png_do_expand($25, $add_ptr23, $trans_color);
      __label__ = 13; break;
    case 12: 
      var $29=$row_info_addr;
      var $30=$png_ptr_addr;
      var $row_buf25=(($30+240)|0);
      var $31=HEAP32[(($row_buf25)>>2)];
      var $add_ptr26=(($31+1)|0);
      _png_do_expand($29, $add_ptr26, 0);
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $32=$png_ptr_addr;
      var $transformations30=(($32+92)|0);
      var $33=HEAP32[(($transformations30)>>2)];
      var $and31=$33 & 262144;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      var $34=$png_ptr_addr;
      var $transformations34=(($34+92)|0);
      var $35=HEAP32[(($transformations34)>>2)];
      var $and35=$35 & 128;
      var $tobool36=(($and35)|0)!=0;
      if ($tobool36) { __label__ = 20; break; } else { __label__ = 17; break; }
    case 17: 
      var $36=$row_info_addr;
      var $color_type38=(($36+8)|0);
      var $37=HEAPU8[($color_type38)];
      var $conv39=(($37)&255);
      var $cmp40=(($conv39)|0)==6;
      if ($cmp40) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $38=$row_info_addr;
      var $color_type42=(($38+8)|0);
      var $39=HEAPU8[($color_type42)];
      var $conv43=(($39)&255);
      var $cmp44=(($conv43)|0)==4;
      if ($cmp44) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $40=$row_info_addr;
      var $41=$png_ptr_addr;
      var $row_buf47=(($41+240)|0);
      var $42=HEAP32[(($row_buf47)>>2)];
      var $add_ptr48=(($42+1)|0);
      _png_do_strip_channel($40, $add_ptr48, 0);
      __label__ = 20; break;
    case 20: 
      var $43=$png_ptr_addr;
      var $transformations50=(($43+92)|0);
      var $44=HEAP32[(($transformations50)>>2)];
      var $and51=$44 & 6291456;
      var $tobool52=(($and51)|0)!=0;
      if ($tobool52) { __label__ = 21; break; } else { __label__ = 28; break; }
    case 21: 
      var $45=$png_ptr_addr;
      var $46=$row_info_addr;
      var $47=$png_ptr_addr;
      var $row_buf54=(($47+240)|0);
      var $48=HEAP32[(($row_buf54)>>2)];
      var $add_ptr55=(($48+1)|0);
      var $call=_png_do_rgb_to_gray($45, $46, $add_ptr55);
      $rgb_error=$call;
      var $49=$rgb_error;
      var $tobool56=(($49)|0)!=0;
      if ($tobool56) { __label__ = 22; break; } else { __label__ = 27; break; }
    case 22: 
      var $50=$png_ptr_addr;
      var $rgb_to_gray_status=(($50+569)|0);
      HEAP8[($rgb_to_gray_status)]=1;
      var $51=$png_ptr_addr;
      var $transformations58=(($51+92)|0);
      var $52=HEAP32[(($transformations58)>>2)];
      var $and59=$52 & 6291456;
      var $cmp60=(($and59)|0)==4194304;
      if ($cmp60) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $53=$png_ptr_addr;
      _png_warning($53, ((STRING_TABLE.__str14723)|0));
      __label__ = 24; break;
    case 24: 
      var $54=$png_ptr_addr;
      var $transformations64=(($54+92)|0);
      var $55=HEAP32[(($transformations64)>>2)];
      var $and65=$55 & 6291456;
      var $cmp66=(($and65)|0)==2097152;
      if ($cmp66) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $56=$png_ptr_addr;
      _png_error($56, ((STRING_TABLE.__str14723)|0));
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $57=$png_ptr_addr;
      var $transformations72=(($57+92)|0);
      var $58=HEAP32[(($transformations72)>>2)];
      var $and73=$58 & 16384;
      var $tobool74=(($and73)|0)!=0;
      if ($tobool74) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: 
      var $59=$png_ptr_addr;
      var $mode=(($59+84)|0);
      var $60=HEAP32[(($mode)>>2)];
      var $and76=$60 & 2048;
      var $tobool77=(($and76)|0)!=0;
      if ($tobool77) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $61=$row_info_addr;
      var $62=$png_ptr_addr;
      var $row_buf79=(($62+240)|0);
      var $63=HEAP32[(($row_buf79)>>2)];
      var $add_ptr80=(($63+1)|0);
      _png_do_gray_to_rgb($61, $add_ptr80);
      __label__ = 31; break;
    case 31: 
      var $64=$png_ptr_addr;
      var $transformations82=(($64+92)|0);
      var $65=HEAP32[(($transformations82)>>2)];
      var $and83=$65 & 128;
      var $tobool84=(($and83)|0)!=0;
      if ($tobool84) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $66=$row_info_addr;
      var $67=$png_ptr_addr;
      var $row_buf86=(($67+240)|0);
      var $68=HEAP32[(($row_buf86)>>2)];
      var $add_ptr87=(($68+1)|0);
      var $69=$png_ptr_addr;
      _png_do_compose($66, $add_ptr87, $69);
      __label__ = 33; break;
    case 33: 
      var $70=$png_ptr_addr;
      var $transformations89=(($70+92)|0);
      var $71=HEAP32[(($transformations89)>>2)];
      var $and90=$71 & 8192;
      var $tobool91=(($and90)|0)!=0;
      if ($tobool91) { __label__ = 34; break; } else { __label__ = 40; break; }
    case 34: 
      var $72=$png_ptr_addr;
      var $transformations93=(($72+92)|0);
      var $73=HEAP32[(($transformations93)>>2)];
      var $and94=$73 & 6291456;
      var $tobool95=(($and94)|0)!=0;
      if ($tobool95) { __label__ = 40; break; } else { __label__ = 35; break; }
    case 35: 
      var $74=$png_ptr_addr;
      var $transformations97=(($74+92)|0);
      var $75=HEAP32[(($transformations97)>>2)];
      var $and98=$75 & 128;
      var $tobool99=(($and98)|0)!=0;
      if ($tobool99) { __label__ = 36; break; } else { __label__ = 38; break; }
    case 36: 
      var $76=$png_ptr_addr;
      var $num_trans101=(($76+284)|0);
      var $77=HEAPU16[(($num_trans101)>>1)];
      var $conv102=(($77)&65535);
      var $cmp103=(($conv102)|0)!=0;
      if ($cmp103) { __label__ = 40; break; } else { __label__ = 37; break; }
    case 37: 
      var $78=$png_ptr_addr;
      var $color_type106=(($78+291)|0);
      var $79=HEAPU8[($color_type106)];
      var $conv107=(($79)&255);
      var $and108=$conv107 & 4;
      var $tobool109=(($and108)|0)!=0;
      if ($tobool109) { __label__ = 40; break; } else { __label__ = 38; break; }
    case 38: 
      var $80=$png_ptr_addr;
      var $color_type111=(($80+291)|0);
      var $81=HEAPU8[($color_type111)];
      var $conv112=(($81)&255);
      var $cmp113=(($conv112)|0)!=3;
      if ($cmp113) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $82=$row_info_addr;
      var $83=$png_ptr_addr;
      var $row_buf116=(($83+240)|0);
      var $84=HEAP32[(($row_buf116)>>2)];
      var $add_ptr117=(($84+1)|0);
      var $85=$png_ptr_addr;
      _png_do_gamma($82, $add_ptr117, $85);
      __label__ = 40; break;
    case 40: 
      var $86=$png_ptr_addr;
      var $transformations119=(($86+92)|0);
      var $87=HEAP32[(($transformations119)>>2)];
      var $and120=$87 & 262144;
      var $tobool121=(($and120)|0)!=0;
      if ($tobool121) { __label__ = 41; break; } else { __label__ = 45; break; }
    case 41: 
      var $88=$png_ptr_addr;
      var $transformations123=(($88+92)|0);
      var $89=HEAP32[(($transformations123)>>2)];
      var $and124=$89 & 128;
      var $tobool125=(($and124)|0)!=0;
      if ($tobool125) { __label__ = 42; break; } else { __label__ = 45; break; }
    case 42: 
      var $90=$row_info_addr;
      var $color_type127=(($90+8)|0);
      var $91=HEAPU8[($color_type127)];
      var $conv128=(($91)&255);
      var $cmp129=(($conv128)|0)==6;
      if ($cmp129) { __label__ = 44; break; } else { __label__ = 43; break; }
    case 43: 
      var $92=$row_info_addr;
      var $color_type132=(($92+8)|0);
      var $93=HEAPU8[($color_type132)];
      var $conv133=(($93)&255);
      var $cmp134=(($conv133)|0)==4;
      if ($cmp134) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $94=$row_info_addr;
      var $95=$png_ptr_addr;
      var $row_buf137=(($95+240)|0);
      var $96=HEAP32[(($row_buf137)>>2)];
      var $add_ptr138=(($96+1)|0);
      _png_do_strip_channel($94, $add_ptr138, 0);
      __label__ = 45; break;
    case 45: 
      var $97=$png_ptr_addr;
      var $transformations140=(($97+92)|0);
      var $98=HEAP32[(($transformations140)>>2)];
      var $and141=$98 & 8388608;
      var $tobool142=(($and141)|0)!=0;
      if ($tobool142) { __label__ = 46; break; } else { __label__ = 48; break; }
    case 46: 
      var $99=$row_info_addr;
      var $color_type144=(($99+8)|0);
      var $100=HEAPU8[($color_type144)];
      var $conv145=(($100)&255);
      var $and146=$conv145 & 4;
      var $tobool147=(($and146)|0)!=0;
      if ($tobool147) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $101=$row_info_addr;
      var $102=$png_ptr_addr;
      var $row_buf149=(($102+240)|0);
      var $103=HEAP32[(($row_buf149)>>2)];
      var $add_ptr150=(($103+1)|0);
      var $104=$png_ptr_addr;
      _png_do_encode_alpha($101, $add_ptr150, $104);
      __label__ = 48; break;
    case 48: 
      var $105=$png_ptr_addr;
      var $transformations152=(($105+92)|0);
      var $106=HEAP32[(($transformations152)>>2)];
      var $and153=$106 & 67108864;
      var $tobool154=(($and153)|0)!=0;
      if ($tobool154) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $107=$row_info_addr;
      var $108=$png_ptr_addr;
      var $row_buf156=(($108+240)|0);
      var $109=HEAP32[(($row_buf156)>>2)];
      var $add_ptr157=(($109+1)|0);
      _png_do_scale_16_to_8($107, $add_ptr157);
      __label__ = 50; break;
    case 50: 
      var $110=$png_ptr_addr;
      var $transformations159=(($110+92)|0);
      var $111=HEAP32[(($transformations159)>>2)];
      var $and160=$111 & 1024;
      var $tobool161=(($and160)|0)!=0;
      if ($tobool161) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $112=$row_info_addr;
      var $113=$png_ptr_addr;
      var $row_buf163=(($113+240)|0);
      var $114=HEAP32[(($row_buf163)>>2)];
      var $add_ptr164=(($114+1)|0);
      _png_do_chop($112, $add_ptr164);
      __label__ = 52; break;
    case 52: 
      var $115=$png_ptr_addr;
      var $transformations166=(($115+92)|0);
      var $116=HEAP32[(($transformations166)>>2)];
      var $and167=$116 & 64;
      var $tobool168=(($and167)|0)!=0;
      if ($tobool168) { __label__ = 53; break; } else { __label__ = 56; break; }
    case 53: 
      var $117=$row_info_addr;
      var $118=$png_ptr_addr;
      var $row_buf170=(($118+240)|0);
      var $119=HEAP32[(($row_buf170)>>2)];
      var $add_ptr171=(($119+1)|0);
      var $120=$png_ptr_addr;
      var $palette_lookup=(($120+480)|0);
      var $121=HEAP32[(($palette_lookup)>>2)];
      var $122=$png_ptr_addr;
      var $quantize_index=(($122+484)|0);
      var $123=HEAP32[(($quantize_index)>>2)];
      _png_do_quantize($117, $add_ptr171, $121, $123);
      var $124=$row_info_addr;
      var $rowbytes=(($124+4)|0);
      var $125=HEAP32[(($rowbytes)>>2)];
      var $cmp172=(($125)|0)==0;
      if ($cmp172) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $126=$png_ptr_addr;
      _png_error($126, ((STRING_TABLE.__str15724)|0));
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      var $127=$png_ptr_addr;
      var $transformations177=(($127+92)|0);
      var $128=HEAP32[(($transformations177)>>2)];
      var $and178=$128 & 512;
      var $tobool179=(($and178)|0)!=0;
      if ($tobool179) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $129=$row_info_addr;
      var $130=$png_ptr_addr;
      var $row_buf181=(($130+240)|0);
      var $131=HEAP32[(($row_buf181)>>2)];
      var $add_ptr182=(($131+1)|0);
      _png_do_expand_16($129, $add_ptr182);
      __label__ = 58; break;
    case 58: 
      var $132=$png_ptr_addr;
      var $transformations184=(($132+92)|0);
      var $133=HEAP32[(($transformations184)>>2)];
      var $and185=$133 & 16384;
      var $tobool186=(($and185)|0)!=0;
      if ($tobool186) { __label__ = 59; break; } else { __label__ = 61; break; }
    case 59: 
      var $134=$png_ptr_addr;
      var $mode188=(($134+84)|0);
      var $135=HEAP32[(($mode188)>>2)];
      var $and189=$135 & 2048;
      var $tobool190=(($and189)|0)!=0;
      if ($tobool190) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $136=$row_info_addr;
      var $137=$png_ptr_addr;
      var $row_buf192=(($137+240)|0);
      var $138=HEAP32[(($row_buf192)>>2)];
      var $add_ptr193=(($138+1)|0);
      _png_do_gray_to_rgb($136, $add_ptr193);
      __label__ = 61; break;
    case 61: 
      var $139=$png_ptr_addr;
      var $transformations195=(($139+92)|0);
      var $140=HEAP32[(($transformations195)>>2)];
      var $and196=$140 & 32;
      var $tobool197=(($and196)|0)!=0;
      if ($tobool197) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $141=$row_info_addr;
      var $142=$png_ptr_addr;
      var $row_buf199=(($142+240)|0);
      var $143=HEAP32[(($row_buf199)>>2)];
      var $add_ptr200=(($143+1)|0);
      _png_do_invert($141, $add_ptr200);
      __label__ = 63; break;
    case 63: 
      var $144=$png_ptr_addr;
      var $transformations202=(($144+92)|0);
      var $145=HEAP32[(($transformations202)>>2)];
      var $and203=$145 & 8;
      var $tobool204=(($and203)|0)!=0;
      if ($tobool204) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $146=$row_info_addr;
      var $147=$png_ptr_addr;
      var $row_buf206=(($147+240)|0);
      var $148=HEAP32[(($row_buf206)>>2)];
      var $add_ptr207=(($148+1)|0);
      var $149=$png_ptr_addr;
      var $shift=(($149+389)|0);
      _png_do_unshift($146, $add_ptr207, $shift);
      __label__ = 65; break;
    case 65: 
      var $150=$png_ptr_addr;
      var $transformations209=(($150+92)|0);
      var $151=HEAP32[(($transformations209)>>2)];
      var $and210=$151 & 4;
      var $tobool211=(($and210)|0)!=0;
      if ($tobool211) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $152=$row_info_addr;
      var $153=$png_ptr_addr;
      var $row_buf213=(($153+240)|0);
      var $154=HEAP32[(($row_buf213)>>2)];
      var $add_ptr214=(($154+1)|0);
      _png_do_unpack($152, $add_ptr214);
      __label__ = 67; break;
    case 67: 
      var $155=$row_info_addr;
      var $color_type216=(($155+8)|0);
      var $156=HEAPU8[($color_type216)];
      var $conv217=(($156)&255);
      var $cmp218=(($conv217)|0)==3;
      if ($cmp218) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $157=$png_ptr_addr;
      var $158=$row_info_addr;
      _png_do_check_palette_indexes($157, $158);
      __label__ = 69; break;
    case 69: 
      var $159=$png_ptr_addr;
      var $transformations222=(($159+92)|0);
      var $160=HEAP32[(($transformations222)>>2)];
      var $and223=$160 & 1;
      var $tobool224=(($and223)|0)!=0;
      if ($tobool224) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $161=$row_info_addr;
      var $162=$png_ptr_addr;
      var $row_buf226=(($162+240)|0);
      var $163=HEAP32[(($row_buf226)>>2)];
      var $add_ptr227=(($163+1)|0);
      _png_do_bgr($161, $add_ptr227);
      __label__ = 71; break;
    case 71: 
      var $164=$png_ptr_addr;
      var $transformations229=(($164+92)|0);
      var $165=HEAP32[(($transformations229)>>2)];
      var $and230=$165 & 65536;
      var $tobool231=(($and230)|0)!=0;
      if ($tobool231) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $166=$row_info_addr;
      var $167=$png_ptr_addr;
      var $row_buf233=(($167+240)|0);
      var $168=HEAP32[(($row_buf233)>>2)];
      var $add_ptr234=(($168+1)|0);
      _png_do_packswap($166, $add_ptr234);
      __label__ = 73; break;
    case 73: 
      var $169=$png_ptr_addr;
      var $transformations236=(($169+92)|0);
      var $170=HEAP32[(($transformations236)>>2)];
      var $and237=$170 & 32768;
      var $tobool238=(($and237)|0)!=0;
      if ($tobool238) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: 
      var $171=$row_info_addr;
      var $172=$png_ptr_addr;
      var $row_buf240=(($172+240)|0);
      var $173=HEAP32[(($row_buf240)>>2)];
      var $add_ptr241=(($173+1)|0);
      var $174=$png_ptr_addr;
      var $filler=(($174+306)|0);
      var $175=HEAPU16[(($filler)>>1)];
      var $conv242=(($175)&65535);
      var $176=$png_ptr_addr;
      var $flags243=(($176+88)|0);
      var $177=HEAP32[(($flags243)>>2)];
      _png_do_read_filler($171, $add_ptr241, $conv242, $177);
      __label__ = 75; break;
    case 75: 
      var $178=$png_ptr_addr;
      var $transformations245=(($178+92)|0);
      var $179=HEAP32[(($transformations245)>>2)];
      var $and246=$179 & 524288;
      var $tobool247=(($and246)|0)!=0;
      if ($tobool247) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      var $180=$row_info_addr;
      var $181=$png_ptr_addr;
      var $row_buf249=(($181+240)|0);
      var $182=HEAP32[(($row_buf249)>>2)];
      var $add_ptr250=(($182+1)|0);
      _png_do_read_invert_alpha($180, $add_ptr250);
      __label__ = 77; break;
    case 77: 
      var $183=$png_ptr_addr;
      var $transformations252=(($183+92)|0);
      var $184=HEAP32[(($transformations252)>>2)];
      var $and253=$184 & 131072;
      var $tobool254=(($and253)|0)!=0;
      if ($tobool254) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      var $185=$row_info_addr;
      var $186=$png_ptr_addr;
      var $row_buf256=(($186+240)|0);
      var $187=HEAP32[(($row_buf256)>>2)];
      var $add_ptr257=(($187+1)|0);
      _png_do_read_swap_alpha($185, $add_ptr257);
      __label__ = 79; break;
    case 79: 
      var $188=$png_ptr_addr;
      var $transformations259=(($188+92)|0);
      var $189=HEAP32[(($transformations259)>>2)];
      var $and260=$189 & 16;
      var $tobool261=(($and260)|0)!=0;
      if ($tobool261) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $190=$row_info_addr;
      var $191=$png_ptr_addr;
      var $row_buf263=(($191+240)|0);
      var $192=HEAP32[(($row_buf263)>>2)];
      var $add_ptr264=(($192+1)|0);
      _png_do_swap($190, $add_ptr264);
      __label__ = 81; break;
    case 81: 
      var $193=$png_ptr_addr;
      var $transformations266=(($193+92)|0);
      var $194=HEAP32[(($transformations266)>>2)];
      var $and267=$194 & 1048576;
      var $tobool268=(($and267)|0)!=0;
      if ($tobool268) { __label__ = 82; break; } else { __label__ = 92; break; }
    case 82: 
      var $195=$png_ptr_addr;
      var $read_user_transform_fn=(($195+68)|0);
      var $196=HEAP32[(($read_user_transform_fn)>>2)];
      var $cmp270=(($196)|0)!=0;
      if ($cmp270) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $197=$png_ptr_addr;
      var $read_user_transform_fn273=(($197+68)|0);
      var $198=HEAP32[(($read_user_transform_fn273)>>2)];
      var $199=$png_ptr_addr;
      var $200=$row_info_addr;
      var $201=$png_ptr_addr;
      var $row_buf274=(($201+240)|0);
      var $202=HEAP32[(($row_buf274)>>2)];
      var $add_ptr275=(($202+1)|0);
      FUNCTION_TABLE[$198]($199, $200, $add_ptr275);
      __label__ = 84; break;
    case 84: 
      var $203=$png_ptr_addr;
      var $user_transform_depth=(($203+80)|0);
      var $204=HEAP8[($user_transform_depth)];
      var $tobool277=(($204 << 24) >> 24)!=0;
      if ($tobool277) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      var $205=$png_ptr_addr;
      var $user_transform_depth279=(($205+80)|0);
      var $206=HEAP8[($user_transform_depth279)];
      var $207=$row_info_addr;
      var $bit_depth=(($207+9)|0);
      HEAP8[($bit_depth)]=$206;
      __label__ = 86; break;
    case 86: 
      var $208=$png_ptr_addr;
      var $user_transform_channels=(($208+81)|0);
      var $209=HEAP8[($user_transform_channels)];
      var $tobool281=(($209 << 24) >> 24)!=0;
      if ($tobool281) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      var $210=$png_ptr_addr;
      var $user_transform_channels283=(($210+81)|0);
      var $211=HEAP8[($user_transform_channels283)];
      var $212=$row_info_addr;
      var $channels=(($212+10)|0);
      HEAP8[($channels)]=$211;
      __label__ = 88; break;
    case 88: 
      var $213=$row_info_addr;
      var $bit_depth285=(($213+9)|0);
      var $214=HEAPU8[($bit_depth285)];
      var $conv286=(($214)&255);
      var $215=$row_info_addr;
      var $channels287=(($215+10)|0);
      var $216=HEAPU8[($channels287)];
      var $conv288=(($216)&255);
      var $mul=(($conv286*$conv288)|0);
      var $conv289=(($mul) & 255);
      var $217=$row_info_addr;
      var $pixel_depth=(($217+11)|0);
      HEAP8[($pixel_depth)]=$conv289;
      var $218=$row_info_addr;
      var $pixel_depth290=(($218+11)|0);
      var $219=HEAPU8[($pixel_depth290)];
      var $conv291=(($219)&255);
      var $cmp292=(($conv291)|0) >= 8;
      if ($cmp292) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: 
      var $220=$row_info_addr;
      var $width=(($220)|0);
      var $221=HEAP32[(($width)>>2)];
      var $222=$row_info_addr;
      var $pixel_depth294=(($222+11)|0);
      var $223=HEAPU8[($pixel_depth294)];
      var $conv295=(($223)&255);
      var $shr=$conv295 >>> 3;
      var $mul296=(($221*$shr)|0);
      var $cond = $mul296;__label__ = 91; break;
    case 90: 
      var $224=$row_info_addr;
      var $width297=(($224)|0);
      var $225=HEAP32[(($width297)>>2)];
      var $226=$row_info_addr;
      var $pixel_depth298=(($226+11)|0);
      var $227=HEAPU8[($pixel_depth298)];
      var $conv299=(($227)&255);
      var $mul300=(($225*$conv299)|0);
      var $add=(($mul300+7)|0);
      var $shr301=$add >>> 3;
      var $cond = $shr301;__label__ = 91; break;
    case 91: 
      var $cond;
      var $228=$row_info_addr;
      var $rowbytes302=(($228+4)|0);
      HEAP32[(($rowbytes302)>>2)]=$cond;
      __label__ = 92; break;
    case 92: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_read_transformations["X"]=1;

function _png_do_expand_palette($row_info, $row, $palette, $trans_alpha, $num_trans) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $palette_addr;
      var $trans_alpha_addr;
      var $num_trans_addr;
      var $shift;
      var $value;
      var $sp;
      var $dp;
      var $i;
      var $row_width;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $palette_addr=$palette;
      $trans_alpha_addr=$trans_alpha;
      $num_trans_addr=$num_trans;
      var $0=$row_info_addr;
      var $width=(($0)|0);
      var $1=HEAP32[(($width)>>2)];
      $row_width=$1;
      var $2=$row_info_addr;
      var $color_type=(($2+8)|0);
      var $3=HEAPU8[($color_type)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==3;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 50; break; }
    case 2: 
      var $4=$row_info_addr;
      var $bit_depth=(($4+9)|0);
      var $5=HEAPU8[($bit_depth)];
      var $conv2=(($5)&255);
      var $cmp3=(($conv2)|0) < 8;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 33; break; }
    case 3: 
      var $6=$row_info_addr;
      var $bit_depth6=(($6+9)|0);
      var $7=HEAPU8[($bit_depth6)];
      var $conv7=(($7)&255);
      if ((($conv7)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($conv7)|0) == 2) {
        __label__ = 15; break;
      }
      else if ((($conv7)|0) == 4) {
        __label__ = 23; break;
      }
      else {
      __label__ = 31; break;
      }
      
    case 4: 
      var $8=$row_addr;
      var $9=$row_width;
      var $sub=(($9-1)|0);
      var $shr=$sub >>> 3;
      var $add_ptr=(($8+$shr)|0);
      $sp=$add_ptr;
      var $10=$row_addr;
      var $11=$row_width;
      var $add_ptr8=(($10+$11)|0);
      var $add_ptr9=(($add_ptr8-1)|0);
      $dp=$add_ptr9;
      var $12=$row_width;
      var $add=(($12+7)|0);
      var $and=$add & 7;
      var $sub10=((7-$and)|0);
      $shift=$sub10;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $13=$i;
      var $14=$row_width;
      var $cmp11=(($13)>>>0) < (($14)>>>0);
      if ($cmp11) { __label__ = 6; break; } else { __label__ = 14; break; }
    case 6: 
      var $15=$sp;
      var $16=HEAPU8[($15)];
      var $conv13=(($16)&255);
      var $17=$shift;
      var $shr14=$conv13 >> (($17)|0);
      var $and15=$shr14 & 1;
      var $tobool=(($and15)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $18=$dp;
      HEAP8[($18)]=1;
      __label__ = 9; break;
    case 8: 
      var $19=$dp;
      HEAP8[($19)]=0;
      __label__ = 9; break;
    case 9: 
      var $20=$shift;
      var $cmp17=(($20)|0)==7;
      if ($cmp17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $shift=0;
      var $21=$sp;
      var $incdec_ptr=(($21-1)|0);
      $sp=$incdec_ptr;
      __label__ = 12; break;
    case 11: 
      var $22=$shift;
      var $inc=(($22+1)|0);
      $shift=$inc;
      __label__ = 12; break;
    case 12: 
      var $23=$dp;
      var $incdec_ptr22=(($23-1)|0);
      $dp=$incdec_ptr22;
      __label__ = 13; break;
    case 13: 
      var $24=$i;
      var $inc23=(($24+1)|0);
      $i=$inc23;
      __label__ = 5; break;
    case 14: 
      __label__ = 32; break;
    case 15: 
      var $25=$row_addr;
      var $26=$row_width;
      var $sub25=(($26-1)|0);
      var $shr26=$sub25 >>> 2;
      var $add_ptr27=(($25+$shr26)|0);
      $sp=$add_ptr27;
      var $27=$row_addr;
      var $28=$row_width;
      var $add_ptr28=(($27+$28)|0);
      var $add_ptr29=(($add_ptr28-1)|0);
      $dp=$add_ptr29;
      var $29=$row_width;
      var $add30=(($29+3)|0);
      var $and31=$add30 & 3;
      var $sub32=((3-$and31)|0);
      var $shl=$sub32 << 1;
      $shift=$shl;
      $i=0;
      __label__ = 16; break;
    case 16: 
      var $30=$i;
      var $31=$row_width;
      var $cmp34=(($30)>>>0) < (($31)>>>0);
      if ($cmp34) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: 
      var $32=$sp;
      var $33=HEAPU8[($32)];
      var $conv37=(($33)&255);
      var $34=$shift;
      var $shr38=$conv37 >> (($34)|0);
      var $and39=$shr38 & 3;
      $value=$and39;
      var $35=$value;
      var $conv40=(($35) & 255);
      var $36=$dp;
      HEAP8[($36)]=$conv40;
      var $37=$shift;
      var $cmp41=(($37)|0)==6;
      if ($cmp41) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $shift=0;
      var $38=$sp;
      var $incdec_ptr44=(($38-1)|0);
      $sp=$incdec_ptr44;
      __label__ = 20; break;
    case 19: 
      var $39=$shift;
      var $add46=(($39+2)|0);
      $shift=$add46;
      __label__ = 20; break;
    case 20: 
      var $40=$dp;
      var $incdec_ptr48=(($40-1)|0);
      $dp=$incdec_ptr48;
      __label__ = 21; break;
    case 21: 
      var $41=$i;
      var $inc50=(($41+1)|0);
      $i=$inc50;
      __label__ = 16; break;
    case 22: 
      __label__ = 32; break;
    case 23: 
      var $42=$row_addr;
      var $43=$row_width;
      var $sub53=(($43-1)|0);
      var $shr54=$sub53 >>> 1;
      var $add_ptr55=(($42+$shr54)|0);
      $sp=$add_ptr55;
      var $44=$row_addr;
      var $45=$row_width;
      var $add_ptr56=(($44+$45)|0);
      var $add_ptr57=(($add_ptr56-1)|0);
      $dp=$add_ptr57;
      var $46=$row_width;
      var $and58=$46 & 1;
      var $shl59=$and58 << 2;
      $shift=$shl59;
      $i=0;
      __label__ = 24; break;
    case 24: 
      var $47=$i;
      var $48=$row_width;
      var $cmp61=(($47)>>>0) < (($48)>>>0);
      if ($cmp61) { __label__ = 25; break; } else { __label__ = 30; break; }
    case 25: 
      var $49=$sp;
      var $50=HEAPU8[($49)];
      var $conv64=(($50)&255);
      var $51=$shift;
      var $shr65=$conv64 >> (($51)|0);
      var $and66=$shr65 & 15;
      $value=$and66;
      var $52=$value;
      var $conv67=(($52) & 255);
      var $53=$dp;
      HEAP8[($53)]=$conv67;
      var $54=$shift;
      var $cmp68=(($54)|0)==4;
      if ($cmp68) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      $shift=0;
      var $55=$sp;
      var $incdec_ptr71=(($55-1)|0);
      $sp=$incdec_ptr71;
      __label__ = 28; break;
    case 27: 
      var $56=$shift;
      var $add73=(($56+4)|0);
      $shift=$add73;
      __label__ = 28; break;
    case 28: 
      var $57=$dp;
      var $incdec_ptr75=(($57-1)|0);
      $dp=$incdec_ptr75;
      __label__ = 29; break;
    case 29: 
      var $58=$i;
      var $inc77=(($58+1)|0);
      $i=$inc77;
      __label__ = 24; break;
    case 30: 
      __label__ = 32; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      var $59=$row_info_addr;
      var $bit_depth79=(($59+9)|0);
      HEAP8[($bit_depth79)]=8;
      var $60=$row_info_addr;
      var $pixel_depth=(($60+11)|0);
      HEAP8[($pixel_depth)]=8;
      var $61=$row_width;
      var $62=$row_info_addr;
      var $rowbytes=(($62+4)|0);
      HEAP32[(($rowbytes)>>2)]=$61;
      __label__ = 33; break;
    case 33: 
      var $63=$row_info_addr;
      var $bit_depth81=(($63+9)|0);
      var $64=HEAPU8[($bit_depth81)];
      var $conv82=(($64)&255);
      var $cmp83=(($conv82)|0)==8;
      if ($cmp83) { __label__ = 34; break; } else { __label__ = 49; break; }
    case 34: 
      var $65=$num_trans_addr;
      var $cmp86=(($65)|0) > 0;
      if ($cmp86) { __label__ = 35; break; } else { __label__ = 43; break; }
    case 35: 
      var $66=$row_addr;
      var $67=$row_width;
      var $add_ptr89=(($66+$67)|0);
      var $add_ptr90=(($add_ptr89-1)|0);
      $sp=$add_ptr90;
      var $68=$row_addr;
      var $69=$row_width;
      var $shl91=$69 << 2;
      var $add_ptr92=(($68+$shl91)|0);
      var $add_ptr93=(($add_ptr92-1)|0);
      $dp=$add_ptr93;
      $i=0;
      __label__ = 36; break;
    case 36: 
      var $70=$i;
      var $71=$row_width;
      var $cmp95=(($70)>>>0) < (($71)>>>0);
      if ($cmp95) { __label__ = 37; break; } else { __label__ = 42; break; }
    case 37: 
      var $72=$sp;
      var $73=HEAPU8[($72)];
      var $conv98=(($73)&255);
      var $74=$num_trans_addr;
      var $cmp99=(($conv98)|0) >= (($74)|0);
      if ($cmp99) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $75=$dp;
      var $incdec_ptr102=(($75-1)|0);
      $dp=$incdec_ptr102;
      HEAP8[($75)]=-1;
      __label__ = 40; break;
    case 39: 
      var $76=$sp;
      var $77=HEAPU8[($76)];
      var $idxprom=(($77)&255);
      var $78=$trans_alpha_addr;
      var $arrayidx=(($78+$idxprom)|0);
      var $79=HEAP8[($arrayidx)];
      var $80=$dp;
      var $incdec_ptr104=(($80-1)|0);
      $dp=$incdec_ptr104;
      HEAP8[($80)]=$79;
      __label__ = 40; break;
    case 40: 
      var $81=$sp;
      var $82=HEAPU8[($81)];
      var $idxprom106=(($82)&255);
      var $83=$palette_addr;
      var $arrayidx107=(($83+$idxprom106*3)|0);
      var $blue=(($arrayidx107+2)|0);
      var $84=HEAP8[($blue)];
      var $85=$dp;
      var $incdec_ptr108=(($85-1)|0);
      $dp=$incdec_ptr108;
      HEAP8[($85)]=$84;
      var $86=$sp;
      var $87=HEAPU8[($86)];
      var $idxprom109=(($87)&255);
      var $88=$palette_addr;
      var $arrayidx110=(($88+$idxprom109*3)|0);
      var $green=(($arrayidx110+1)|0);
      var $89=HEAP8[($green)];
      var $90=$dp;
      var $incdec_ptr111=(($90-1)|0);
      $dp=$incdec_ptr111;
      HEAP8[($90)]=$89;
      var $91=$sp;
      var $92=HEAPU8[($91)];
      var $idxprom112=(($92)&255);
      var $93=$palette_addr;
      var $arrayidx113=(($93+$idxprom112*3)|0);
      var $red=(($arrayidx113)|0);
      var $94=HEAP8[($red)];
      var $95=$dp;
      var $incdec_ptr114=(($95-1)|0);
      $dp=$incdec_ptr114;
      HEAP8[($95)]=$94;
      var $96=$sp;
      var $incdec_ptr115=(($96-1)|0);
      $sp=$incdec_ptr115;
      __label__ = 41; break;
    case 41: 
      var $97=$i;
      var $inc117=(($97+1)|0);
      $i=$inc117;
      __label__ = 36; break;
    case 42: 
      var $98=$row_info_addr;
      var $bit_depth119=(($98+9)|0);
      HEAP8[($bit_depth119)]=8;
      var $99=$row_info_addr;
      var $pixel_depth120=(($99+11)|0);
      HEAP8[($pixel_depth120)]=32;
      var $100=$row_width;
      var $mul=((($100<<2))|0);
      var $101=$row_info_addr;
      var $rowbytes121=(($101+4)|0);
      HEAP32[(($rowbytes121)>>2)]=$mul;
      var $102=$row_info_addr;
      var $color_type122=(($102+8)|0);
      HEAP8[($color_type122)]=6;
      var $103=$row_info_addr;
      var $channels=(($103+10)|0);
      HEAP8[($channels)]=4;
      __label__ = 48; break;
    case 43: 
      var $104=$row_addr;
      var $105=$row_width;
      var $add_ptr124=(($104+$105)|0);
      var $add_ptr125=(($add_ptr124-1)|0);
      $sp=$add_ptr125;
      var $106=$row_addr;
      var $107=$row_width;
      var $mul126=(($107*3)|0);
      var $add_ptr127=(($106+$mul126)|0);
      var $add_ptr128=(($add_ptr127-1)|0);
      $dp=$add_ptr128;
      $i=0;
      __label__ = 44; break;
    case 44: 
      var $108=$i;
      var $109=$row_width;
      var $cmp130=(($108)>>>0) < (($109)>>>0);
      if ($cmp130) { __label__ = 45; break; } else { __label__ = 47; break; }
    case 45: 
      var $110=$sp;
      var $111=HEAPU8[($110)];
      var $idxprom133=(($111)&255);
      var $112=$palette_addr;
      var $arrayidx134=(($112+$idxprom133*3)|0);
      var $blue135=(($arrayidx134+2)|0);
      var $113=HEAP8[($blue135)];
      var $114=$dp;
      var $incdec_ptr136=(($114-1)|0);
      $dp=$incdec_ptr136;
      HEAP8[($114)]=$113;
      var $115=$sp;
      var $116=HEAPU8[($115)];
      var $idxprom137=(($116)&255);
      var $117=$palette_addr;
      var $arrayidx138=(($117+$idxprom137*3)|0);
      var $green139=(($arrayidx138+1)|0);
      var $118=HEAP8[($green139)];
      var $119=$dp;
      var $incdec_ptr140=(($119-1)|0);
      $dp=$incdec_ptr140;
      HEAP8[($119)]=$118;
      var $120=$sp;
      var $121=HEAPU8[($120)];
      var $idxprom141=(($121)&255);
      var $122=$palette_addr;
      var $arrayidx142=(($122+$idxprom141*3)|0);
      var $red143=(($arrayidx142)|0);
      var $123=HEAP8[($red143)];
      var $124=$dp;
      var $incdec_ptr144=(($124-1)|0);
      $dp=$incdec_ptr144;
      HEAP8[($124)]=$123;
      var $125=$sp;
      var $incdec_ptr145=(($125-1)|0);
      $sp=$incdec_ptr145;
      __label__ = 46; break;
    case 46: 
      var $126=$i;
      var $inc147=(($126+1)|0);
      $i=$inc147;
      __label__ = 44; break;
    case 47: 
      var $127=$row_info_addr;
      var $bit_depth149=(($127+9)|0);
      HEAP8[($bit_depth149)]=8;
      var $128=$row_info_addr;
      var $pixel_depth150=(($128+11)|0);
      HEAP8[($pixel_depth150)]=24;
      var $129=$row_width;
      var $mul151=(($129*3)|0);
      var $130=$row_info_addr;
      var $rowbytes152=(($130+4)|0);
      HEAP32[(($rowbytes152)>>2)]=$mul151;
      var $131=$row_info_addr;
      var $color_type153=(($131+8)|0);
      HEAP8[($color_type153)]=2;
      var $132=$row_info_addr;
      var $channels154=(($132+10)|0);
      HEAP8[($channels154)]=3;
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_expand_palette["X"]=1;

function _png_do_expand($row_info, $row, $trans_color) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $trans_color_addr;
      var $shift;
      var $value;
      var $sp;
      var $dp;
      var $i;
      var $row_width;
      var $gray;
      var $gray_high;
      var $gray_low;
      var $red;
      var $green;
      var $blue;
      var $red_high;
      var $green_high;
      var $blue_high;
      var $red_low;
      var $green_low;
      var $blue_low;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $trans_color_addr=$trans_color;
      var $0=$row_info_addr;
      var $width=(($0)|0);
      var $1=HEAP32[(($width)>>2)];
      $row_width=$1;
      var $2=$row_info_addr;
      var $color_type=(($2+8)|0);
      var $3=HEAPU8[($color_type)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 62; break; }
    case 2: 
      var $4=$trans_color_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$trans_color_addr;
      var $gray2=(($5+8)|0);
      var $6=HEAPU16[(($gray2)>>1)];
      var $conv3=(($6)&65535);
      var $cond = $conv3;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      var $conv4=(($cond) & 65535);
      $gray=$conv4;
      var $7=$row_info_addr;
      var $bit_depth=(($7+9)|0);
      var $8=HEAPU8[($bit_depth)];
      var $conv5=(($8)&255);
      var $cmp6=(($conv5)|0) < 8;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 36; break; }
    case 6: 
      var $9=$row_info_addr;
      var $bit_depth9=(($9+9)|0);
      var $10=HEAPU8[($bit_depth9)];
      var $conv10=(($10)&255);
      if ((($conv10)|0) == 1) {
        __label__ = 7; break;
      }
      else if ((($conv10)|0) == 2) {
        __label__ = 18; break;
      }
      else if ((($conv10)|0) == 4) {
        __label__ = 26; break;
      }
      else {
      __label__ = 34; break;
      }
      
    case 7: 
      var $11=$gray;
      var $conv11=(($11)&65535);
      var $and=$conv11 & 1;
      var $mul=(($and*255)|0);
      var $conv12=(($mul) & 65535);
      $gray=$conv12;
      var $12=$row_addr;
      var $13=$row_width;
      var $sub=(($13-1)|0);
      var $shr=$sub >>> 3;
      var $add_ptr=(($12+$shr)|0);
      $sp=$add_ptr;
      var $14=$row_addr;
      var $15=$row_width;
      var $add_ptr13=(($14+$15)|0);
      var $add_ptr14=(($add_ptr13-1)|0);
      $dp=$add_ptr14;
      var $16=$row_width;
      var $add=(($16+7)|0);
      var $and15=$add & 7;
      var $sub16=((7-$and15)|0);
      $shift=$sub16;
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $17=$i;
      var $18=$row_width;
      var $cmp17=(($17)>>>0) < (($18)>>>0);
      if ($cmp17) { __label__ = 9; break; } else { __label__ = 17; break; }
    case 9: 
      var $19=$sp;
      var $20=HEAPU8[($19)];
      var $conv19=(($20)&255);
      var $21=$shift;
      var $shr20=$conv19 >> (($21)|0);
      var $and21=$shr20 & 1;
      var $tobool22=(($and21)|0)!=0;
      if ($tobool22) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $22=$dp;
      HEAP8[($22)]=-1;
      __label__ = 12; break;
    case 11: 
      var $23=$dp;
      HEAP8[($23)]=0;
      __label__ = 12; break;
    case 12: 
      var $24=$shift;
      var $cmp24=(($24)|0)==7;
      if ($cmp24) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $shift=0;
      var $25=$sp;
      var $incdec_ptr=(($25-1)|0);
      $sp=$incdec_ptr;
      __label__ = 15; break;
    case 14: 
      var $26=$shift;
      var $inc=(($26+1)|0);
      $shift=$inc;
      __label__ = 15; break;
    case 15: 
      var $27=$dp;
      var $incdec_ptr29=(($27-1)|0);
      $dp=$incdec_ptr29;
      __label__ = 16; break;
    case 16: 
      var $28=$i;
      var $inc30=(($28+1)|0);
      $i=$inc30;
      __label__ = 8; break;
    case 17: 
      __label__ = 35; break;
    case 18: 
      var $29=$gray;
      var $conv32=(($29)&65535);
      var $and33=$conv32 & 3;
      var $mul34=(($and33*85)|0);
      var $conv35=(($mul34) & 65535);
      $gray=$conv35;
      var $30=$row_addr;
      var $31=$row_width;
      var $sub36=(($31-1)|0);
      var $shr37=$sub36 >>> 2;
      var $add_ptr38=(($30+$shr37)|0);
      $sp=$add_ptr38;
      var $32=$row_addr;
      var $33=$row_width;
      var $add_ptr39=(($32+$33)|0);
      var $add_ptr40=(($add_ptr39-1)|0);
      $dp=$add_ptr40;
      var $34=$row_width;
      var $add41=(($34+3)|0);
      var $and42=$add41 & 3;
      var $sub43=((3-$and42)|0);
      var $shl=$sub43 << 1;
      $shift=$shl;
      $i=0;
      __label__ = 19; break;
    case 19: 
      var $35=$i;
      var $36=$row_width;
      var $cmp45=(($35)>>>0) < (($36)>>>0);
      if ($cmp45) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: 
      var $37=$sp;
      var $38=HEAPU8[($37)];
      var $conv48=(($38)&255);
      var $39=$shift;
      var $shr49=$conv48 >> (($39)|0);
      var $and50=$shr49 & 3;
      $value=$and50;
      var $40=$value;
      var $41=$value;
      var $shl51=$41 << 2;
      var $or=$40 | $shl51;
      var $42=$value;
      var $shl52=$42 << 4;
      var $or53=$or | $shl52;
      var $43=$value;
      var $shl54=$43 << 6;
      var $or55=$or53 | $shl54;
      var $conv56=(($or55) & 255);
      var $44=$dp;
      HEAP8[($44)]=$conv56;
      var $45=$shift;
      var $cmp57=(($45)|0)==6;
      if ($cmp57) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      $shift=0;
      var $46=$sp;
      var $incdec_ptr60=(($46-1)|0);
      $sp=$incdec_ptr60;
      __label__ = 23; break;
    case 22: 
      var $47=$shift;
      var $add62=(($47+2)|0);
      $shift=$add62;
      __label__ = 23; break;
    case 23: 
      var $48=$dp;
      var $incdec_ptr64=(($48-1)|0);
      $dp=$incdec_ptr64;
      __label__ = 24; break;
    case 24: 
      var $49=$i;
      var $inc66=(($49+1)|0);
      $i=$inc66;
      __label__ = 19; break;
    case 25: 
      __label__ = 35; break;
    case 26: 
      var $50=$gray;
      var $conv69=(($50)&65535);
      var $and70=$conv69 & 15;
      var $mul71=(($and70*17)|0);
      var $conv72=(($mul71) & 65535);
      $gray=$conv72;
      var $51=$row_addr;
      var $52=$row_width;
      var $sub73=(($52-1)|0);
      var $shr74=$sub73 >>> 1;
      var $add_ptr75=(($51+$shr74)|0);
      $sp=$add_ptr75;
      var $53=$row_addr;
      var $54=$row_width;
      var $add_ptr76=(($53+$54)|0);
      var $add_ptr77=(($add_ptr76-1)|0);
      $dp=$add_ptr77;
      var $55=$row_width;
      var $add78=(($55+1)|0);
      var $and79=$add78 & 1;
      var $sub80=((1-$and79)|0);
      var $shl81=$sub80 << 2;
      $shift=$shl81;
      $i=0;
      __label__ = 27; break;
    case 27: 
      var $56=$i;
      var $57=$row_width;
      var $cmp83=(($56)>>>0) < (($57)>>>0);
      if ($cmp83) { __label__ = 28; break; } else { __label__ = 33; break; }
    case 28: 
      var $58=$sp;
      var $59=HEAPU8[($58)];
      var $conv86=(($59)&255);
      var $60=$shift;
      var $shr87=$conv86 >> (($60)|0);
      var $and88=$shr87 & 15;
      $value=$and88;
      var $61=$value;
      var $62=$value;
      var $shl89=$62 << 4;
      var $or90=$61 | $shl89;
      var $conv91=(($or90) & 255);
      var $63=$dp;
      HEAP8[($63)]=$conv91;
      var $64=$shift;
      var $cmp92=(($64)|0)==4;
      if ($cmp92) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      $shift=0;
      var $65=$sp;
      var $incdec_ptr95=(($65-1)|0);
      $sp=$incdec_ptr95;
      __label__ = 31; break;
    case 30: 
      $shift=4;
      __label__ = 31; break;
    case 31: 
      var $66=$dp;
      var $incdec_ptr98=(($66-1)|0);
      $dp=$incdec_ptr98;
      __label__ = 32; break;
    case 32: 
      var $67=$i;
      var $inc100=(($67+1)|0);
      $i=$inc100;
      __label__ = 27; break;
    case 33: 
      __label__ = 35; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $68=$row_info_addr;
      var $bit_depth102=(($68+9)|0);
      HEAP8[($bit_depth102)]=8;
      var $69=$row_info_addr;
      var $pixel_depth=(($69+11)|0);
      HEAP8[($pixel_depth)]=8;
      var $70=$row_width;
      var $71=$row_info_addr;
      var $rowbytes=(($71+4)|0);
      HEAP32[(($rowbytes)>>2)]=$70;
      __label__ = 36; break;
    case 36: 
      var $72=$trans_color_addr;
      var $cmp104=(($72)|0)!=0;
      if ($cmp104) { __label__ = 37; break; } else { __label__ = 61; break; }
    case 37: 
      var $73=$row_info_addr;
      var $bit_depth107=(($73+9)|0);
      var $74=HEAPU8[($bit_depth107)];
      var $conv108=(($74)&255);
      var $cmp109=(($conv108)|0)==8;
      if ($cmp109) { __label__ = 38; break; } else { __label__ = 46; break; }
    case 38: 
      var $75=$gray;
      var $conv112=(($75)&65535);
      var $and113=$conv112 & 255;
      var $conv114=(($and113) & 65535);
      $gray=$conv114;
      var $76=$row_addr;
      var $77=$row_width;
      var $add_ptr115=(($76+$77)|0);
      var $add_ptr116=(($add_ptr115-1)|0);
      $sp=$add_ptr116;
      var $78=$row_addr;
      var $79=$row_width;
      var $shl117=$79 << 1;
      var $add_ptr118=(($78+$shl117)|0);
      var $add_ptr119=(($add_ptr118-1)|0);
      $dp=$add_ptr119;
      $i=0;
      __label__ = 39; break;
    case 39: 
      var $80=$i;
      var $81=$row_width;
      var $cmp121=(($80)>>>0) < (($81)>>>0);
      if ($cmp121) { __label__ = 40; break; } else { __label__ = 45; break; }
    case 40: 
      var $82=$sp;
      var $83=HEAPU8[($82)];
      var $conv124=(($83)&255);
      var $84=$gray;
      var $conv125=(($84)&65535);
      var $cmp126=(($conv124)|0)==(($conv125)|0);
      if ($cmp126) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $85=$dp;
      var $incdec_ptr129=(($85-1)|0);
      $dp=$incdec_ptr129;
      HEAP8[($85)]=0;
      __label__ = 43; break;
    case 42: 
      var $86=$dp;
      var $incdec_ptr131=(($86-1)|0);
      $dp=$incdec_ptr131;
      HEAP8[($86)]=-1;
      __label__ = 43; break;
    case 43: 
      var $87=$sp;
      var $incdec_ptr133=(($87-1)|0);
      $sp=$incdec_ptr133;
      var $88=HEAP8[($87)];
      var $89=$dp;
      var $incdec_ptr134=(($89-1)|0);
      $dp=$incdec_ptr134;
      HEAP8[($89)]=$88;
      __label__ = 44; break;
    case 44: 
      var $90=$i;
      var $inc136=(($90+1)|0);
      $i=$inc136;
      __label__ = 39; break;
    case 45: 
      __label__ = 57; break;
    case 46: 
      var $91=$row_info_addr;
      var $bit_depth139=(($91+9)|0);
      var $92=HEAPU8[($bit_depth139)];
      var $conv140=(($92)&255);
      var $cmp141=(($conv140)|0)==16;
      if ($cmp141) { __label__ = 47; break; } else { __label__ = 56; break; }
    case 47: 
      var $93=$gray;
      var $conv144=(($93)&65535);
      var $shr145=$conv144 >> 8;
      var $and146=$shr145 & 255;
      var $conv147=(($and146) & 255);
      $gray_high=$conv147;
      var $94=$gray;
      var $conv148=(($94)&65535);
      var $and149=$conv148 & 255;
      var $conv150=(($and149) & 255);
      $gray_low=$conv150;
      var $95=$row_addr;
      var $96=$row_info_addr;
      var $rowbytes151=(($96+4)|0);
      var $97=HEAP32[(($rowbytes151)>>2)];
      var $add_ptr152=(($95+$97)|0);
      var $add_ptr153=(($add_ptr152-1)|0);
      $sp=$add_ptr153;
      var $98=$row_addr;
      var $99=$row_info_addr;
      var $rowbytes154=(($99+4)|0);
      var $100=HEAP32[(($rowbytes154)>>2)];
      var $shl155=$100 << 1;
      var $add_ptr156=(($98+$shl155)|0);
      var $add_ptr157=(($add_ptr156-1)|0);
      $dp=$add_ptr157;
      $i=0;
      __label__ = 48; break;
    case 48: 
      var $101=$i;
      var $102=$row_width;
      var $cmp159=(($101)>>>0) < (($102)>>>0);
      if ($cmp159) { __label__ = 49; break; } else { __label__ = 55; break; }
    case 49: 
      var $103=$sp;
      var $add_ptr162=(($103-1)|0);
      var $104=HEAPU8[($add_ptr162)];
      var $conv163=(($104)&255);
      var $105=$gray_high;
      var $conv164=(($105)&255);
      var $cmp165=(($conv163)|0)==(($conv164)|0);
      if ($cmp165) { __label__ = 50; break; } else { __label__ = 52; break; }
    case 50: 
      var $106=$sp;
      var $107=HEAPU8[($106)];
      var $conv167=(($107)&255);
      var $108=$gray_low;
      var $conv168=(($108)&255);
      var $cmp169=(($conv167)|0)==(($conv168)|0);
      if ($cmp169) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $109=$dp;
      var $incdec_ptr172=(($109-1)|0);
      $dp=$incdec_ptr172;
      HEAP8[($109)]=0;
      var $110=$dp;
      var $incdec_ptr173=(($110-1)|0);
      $dp=$incdec_ptr173;
      HEAP8[($110)]=0;
      __label__ = 53; break;
    case 52: 
      var $111=$dp;
      var $incdec_ptr175=(($111-1)|0);
      $dp=$incdec_ptr175;
      HEAP8[($111)]=-1;
      var $112=$dp;
      var $incdec_ptr176=(($112-1)|0);
      $dp=$incdec_ptr176;
      HEAP8[($112)]=-1;
      __label__ = 53; break;
    case 53: 
      var $113=$sp;
      var $incdec_ptr178=(($113-1)|0);
      $sp=$incdec_ptr178;
      var $114=HEAP8[($113)];
      var $115=$dp;
      var $incdec_ptr179=(($115-1)|0);
      $dp=$incdec_ptr179;
      HEAP8[($115)]=$114;
      var $116=$sp;
      var $incdec_ptr180=(($116-1)|0);
      $sp=$incdec_ptr180;
      var $117=HEAP8[($116)];
      var $118=$dp;
      var $incdec_ptr181=(($118-1)|0);
      $dp=$incdec_ptr181;
      HEAP8[($118)]=$117;
      __label__ = 54; break;
    case 54: 
      var $119=$i;
      var $inc183=(($119+1)|0);
      $i=$inc183;
      __label__ = 48; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $120=$row_info_addr;
      var $color_type187=(($120+8)|0);
      HEAP8[($color_type187)]=4;
      var $121=$row_info_addr;
      var $channels=(($121+10)|0);
      HEAP8[($channels)]=2;
      var $122=$row_info_addr;
      var $bit_depth188=(($122+9)|0);
      var $123=HEAPU8[($bit_depth188)];
      var $conv189=(($123)&255);
      var $shl190=$conv189 << 1;
      var $conv191=(($shl190) & 255);
      var $124=$row_info_addr;
      var $pixel_depth192=(($124+11)|0);
      HEAP8[($pixel_depth192)]=$conv191;
      var $125=$row_info_addr;
      var $pixel_depth193=(($125+11)|0);
      var $126=HEAPU8[($pixel_depth193)];
      var $conv194=(($126)&255);
      var $cmp195=(($conv194)|0) >= 8;
      if ($cmp195) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $127=$row_width;
      var $128=$row_info_addr;
      var $pixel_depth198=(($128+11)|0);
      var $129=HEAPU8[($pixel_depth198)];
      var $conv199=(($129)&255);
      var $shr200=$conv199 >>> 3;
      var $mul201=(($127*$shr200)|0);
      var $cond209 = $mul201;__label__ = 60; break;
    case 59: 
      var $130=$row_width;
      var $131=$row_info_addr;
      var $pixel_depth203=(($131+11)|0);
      var $132=HEAPU8[($pixel_depth203)];
      var $conv204=(($132)&255);
      var $mul205=(($130*$conv204)|0);
      var $add206=(($mul205+7)|0);
      var $shr207=$add206 >>> 3;
      var $cond209 = $shr207;__label__ = 60; break;
    case 60: 
      var $cond209;
      var $133=$row_info_addr;
      var $rowbytes210=(($133+4)|0);
      HEAP32[(($rowbytes210)>>2)]=$cond209;
      __label__ = 61; break;
    case 61: 
      __label__ = 95; break;
    case 62: 
      var $134=$row_info_addr;
      var $color_type213=(($134+8)|0);
      var $135=HEAPU8[($color_type213)];
      var $conv214=(($135)&255);
      var $cmp215=(($conv214)|0)==2;
      if ($cmp215) { __label__ = 63; break; } else { __label__ = 94; break; }
    case 63: 
      var $136=$trans_color_addr;
      var $tobool218=(($136)|0)!=0;
      if ($tobool218) { __label__ = 64; break; } else { __label__ = 94; break; }
    case 64: 
      var $137=$row_info_addr;
      var $bit_depth220=(($137+9)|0);
      var $138=HEAPU8[($bit_depth220)];
      var $conv221=(($138)&255);
      var $cmp222=(($conv221)|0)==8;
      if ($cmp222) { __label__ = 65; break; } else { __label__ = 75; break; }
    case 65: 
      var $139=$trans_color_addr;
      var $red225=(($139+2)|0);
      var $140=HEAPU16[(($red225)>>1)];
      var $conv226=(($140)&65535);
      var $and227=$conv226 & 255;
      var $conv228=(($and227) & 255);
      $red=$conv228;
      var $141=$trans_color_addr;
      var $green229=(($141+4)|0);
      var $142=HEAPU16[(($green229)>>1)];
      var $conv230=(($142)&65535);
      var $and231=$conv230 & 255;
      var $conv232=(($and231) & 255);
      $green=$conv232;
      var $143=$trans_color_addr;
      var $blue233=(($143+6)|0);
      var $144=HEAPU16[(($blue233)>>1)];
      var $conv234=(($144)&65535);
      var $and235=$conv234 & 255;
      var $conv236=(($and235) & 255);
      $blue=$conv236;
      var $145=$row_addr;
      var $146=$row_info_addr;
      var $rowbytes237=(($146+4)|0);
      var $147=HEAP32[(($rowbytes237)>>2)];
      var $add_ptr238=(($145+$147)|0);
      var $add_ptr239=(($add_ptr238-1)|0);
      $sp=$add_ptr239;
      var $148=$row_addr;
      var $149=$row_width;
      var $shl240=$149 << 2;
      var $add_ptr241=(($148+$shl240)|0);
      var $add_ptr242=(($add_ptr241-1)|0);
      $dp=$add_ptr242;
      $i=0;
      __label__ = 66; break;
    case 66: 
      var $150=$i;
      var $151=$row_width;
      var $cmp244=(($150)>>>0) < (($151)>>>0);
      if ($cmp244) { __label__ = 67; break; } else { __label__ = 74; break; }
    case 67: 
      var $152=$sp;
      var $add_ptr247=(($152-2)|0);
      var $153=HEAPU8[($add_ptr247)];
      var $conv248=(($153)&255);
      var $154=$red;
      var $conv249=(($154)&255);
      var $cmp250=(($conv248)|0)==(($conv249)|0);
      if ($cmp250) { __label__ = 68; break; } else { __label__ = 71; break; }
    case 68: 
      var $155=$sp;
      var $add_ptr253=(($155-1)|0);
      var $156=HEAPU8[($add_ptr253)];
      var $conv254=(($156)&255);
      var $157=$green;
      var $conv255=(($157)&255);
      var $cmp256=(($conv254)|0)==(($conv255)|0);
      if ($cmp256) { __label__ = 69; break; } else { __label__ = 71; break; }
    case 69: 
      var $158=$sp;
      var $159=HEAPU8[($158)];
      var $conv259=(($159)&255);
      var $160=$blue;
      var $conv260=(($160)&255);
      var $cmp261=(($conv259)|0)==(($conv260)|0);
      if ($cmp261) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $161=$dp;
      var $incdec_ptr264=(($161-1)|0);
      $dp=$incdec_ptr264;
      HEAP8[($161)]=0;
      __label__ = 72; break;
    case 71: 
      var $162=$dp;
      var $incdec_ptr266=(($162-1)|0);
      $dp=$incdec_ptr266;
      HEAP8[($162)]=-1;
      __label__ = 72; break;
    case 72: 
      var $163=$sp;
      var $incdec_ptr268=(($163-1)|0);
      $sp=$incdec_ptr268;
      var $164=HEAP8[($163)];
      var $165=$dp;
      var $incdec_ptr269=(($165-1)|0);
      $dp=$incdec_ptr269;
      HEAP8[($165)]=$164;
      var $166=$sp;
      var $incdec_ptr270=(($166-1)|0);
      $sp=$incdec_ptr270;
      var $167=HEAP8[($166)];
      var $168=$dp;
      var $incdec_ptr271=(($168-1)|0);
      $dp=$incdec_ptr271;
      HEAP8[($168)]=$167;
      var $169=$sp;
      var $incdec_ptr272=(($169-1)|0);
      $sp=$incdec_ptr272;
      var $170=HEAP8[($169)];
      var $171=$dp;
      var $incdec_ptr273=(($171-1)|0);
      $dp=$incdec_ptr273;
      HEAP8[($171)]=$170;
      __label__ = 73; break;
    case 73: 
      var $172=$i;
      var $inc275=(($172+1)|0);
      $i=$inc275;
      __label__ = 66; break;
    case 74: 
      __label__ = 90; break;
    case 75: 
      var $173=$row_info_addr;
      var $bit_depth278=(($173+9)|0);
      var $174=HEAPU8[($bit_depth278)];
      var $conv279=(($174)&255);
      var $cmp280=(($conv279)|0)==16;
      if ($cmp280) { __label__ = 76; break; } else { __label__ = 89; break; }
    case 76: 
      var $175=$trans_color_addr;
      var $red283=(($175+2)|0);
      var $176=HEAPU16[(($red283)>>1)];
      var $conv284=(($176)&65535);
      var $shr285=$conv284 >> 8;
      var $and286=$shr285 & 255;
      var $conv287=(($and286) & 255);
      $red_high=$conv287;
      var $177=$trans_color_addr;
      var $green288=(($177+4)|0);
      var $178=HEAPU16[(($green288)>>1)];
      var $conv289=(($178)&65535);
      var $shr290=$conv289 >> 8;
      var $and291=$shr290 & 255;
      var $conv292=(($and291) & 255);
      $green_high=$conv292;
      var $179=$trans_color_addr;
      var $blue293=(($179+6)|0);
      var $180=HEAPU16[(($blue293)>>1)];
      var $conv294=(($180)&65535);
      var $shr295=$conv294 >> 8;
      var $and296=$shr295 & 255;
      var $conv297=(($and296) & 255);
      $blue_high=$conv297;
      var $181=$trans_color_addr;
      var $red298=(($181+2)|0);
      var $182=HEAPU16[(($red298)>>1)];
      var $conv299=(($182)&65535);
      var $and300=$conv299 & 255;
      var $conv301=(($and300) & 255);
      $red_low=$conv301;
      var $183=$trans_color_addr;
      var $green302=(($183+4)|0);
      var $184=HEAPU16[(($green302)>>1)];
      var $conv303=(($184)&65535);
      var $and304=$conv303 & 255;
      var $conv305=(($and304) & 255);
      $green_low=$conv305;
      var $185=$trans_color_addr;
      var $blue306=(($185+6)|0);
      var $186=HEAPU16[(($blue306)>>1)];
      var $conv307=(($186)&65535);
      var $and308=$conv307 & 255;
      var $conv309=(($and308) & 255);
      $blue_low=$conv309;
      var $187=$row_addr;
      var $188=$row_info_addr;
      var $rowbytes310=(($188+4)|0);
      var $189=HEAP32[(($rowbytes310)>>2)];
      var $add_ptr311=(($187+$189)|0);
      var $add_ptr312=(($add_ptr311-1)|0);
      $sp=$add_ptr312;
      var $190=$row_addr;
      var $191=$row_width;
      var $shl313=$191 << 3;
      var $add_ptr314=(($190+$shl313)|0);
      var $add_ptr315=(($add_ptr314-1)|0);
      $dp=$add_ptr315;
      $i=0;
      __label__ = 77; break;
    case 77: 
      var $192=$i;
      var $193=$row_width;
      var $cmp317=(($192)>>>0) < (($193)>>>0);
      if ($cmp317) { __label__ = 78; break; } else { __label__ = 88; break; }
    case 78: 
      var $194=$sp;
      var $add_ptr320=(($194-5)|0);
      var $195=HEAPU8[($add_ptr320)];
      var $conv321=(($195)&255);
      var $196=$red_high;
      var $conv322=(($196)&255);
      var $cmp323=(($conv321)|0)==(($conv322)|0);
      if ($cmp323) { __label__ = 79; break; } else { __label__ = 85; break; }
    case 79: 
      var $197=$sp;
      var $add_ptr326=(($197-4)|0);
      var $198=HEAPU8[($add_ptr326)];
      var $conv327=(($198)&255);
      var $199=$red_low;
      var $conv328=(($199)&255);
      var $cmp329=(($conv327)|0)==(($conv328)|0);
      if ($cmp329) { __label__ = 80; break; } else { __label__ = 85; break; }
    case 80: 
      var $200=$sp;
      var $add_ptr332=(($200-3)|0);
      var $201=HEAPU8[($add_ptr332)];
      var $conv333=(($201)&255);
      var $202=$green_high;
      var $conv334=(($202)&255);
      var $cmp335=(($conv333)|0)==(($conv334)|0);
      if ($cmp335) { __label__ = 81; break; } else { __label__ = 85; break; }
    case 81: 
      var $203=$sp;
      var $add_ptr338=(($203-2)|0);
      var $204=HEAPU8[($add_ptr338)];
      var $conv339=(($204)&255);
      var $205=$green_low;
      var $conv340=(($205)&255);
      var $cmp341=(($conv339)|0)==(($conv340)|0);
      if ($cmp341) { __label__ = 82; break; } else { __label__ = 85; break; }
    case 82: 
      var $206=$sp;
      var $add_ptr344=(($206-1)|0);
      var $207=HEAPU8[($add_ptr344)];
      var $conv345=(($207)&255);
      var $208=$blue_high;
      var $conv346=(($208)&255);
      var $cmp347=(($conv345)|0)==(($conv346)|0);
      if ($cmp347) { __label__ = 83; break; } else { __label__ = 85; break; }
    case 83: 
      var $209=$sp;
      var $210=HEAPU8[($209)];
      var $conv350=(($210)&255);
      var $211=$blue_low;
      var $conv351=(($211)&255);
      var $cmp352=(($conv350)|0)==(($conv351)|0);
      if ($cmp352) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $212=$dp;
      var $incdec_ptr355=(($212-1)|0);
      $dp=$incdec_ptr355;
      HEAP8[($212)]=0;
      var $213=$dp;
      var $incdec_ptr356=(($213-1)|0);
      $dp=$incdec_ptr356;
      HEAP8[($213)]=0;
      __label__ = 86; break;
    case 85: 
      var $214=$dp;
      var $incdec_ptr358=(($214-1)|0);
      $dp=$incdec_ptr358;
      HEAP8[($214)]=-1;
      var $215=$dp;
      var $incdec_ptr359=(($215-1)|0);
      $dp=$incdec_ptr359;
      HEAP8[($215)]=-1;
      __label__ = 86; break;
    case 86: 
      var $216=$sp;
      var $incdec_ptr361=(($216-1)|0);
      $sp=$incdec_ptr361;
      var $217=HEAP8[($216)];
      var $218=$dp;
      var $incdec_ptr362=(($218-1)|0);
      $dp=$incdec_ptr362;
      HEAP8[($218)]=$217;
      var $219=$sp;
      var $incdec_ptr363=(($219-1)|0);
      $sp=$incdec_ptr363;
      var $220=HEAP8[($219)];
      var $221=$dp;
      var $incdec_ptr364=(($221-1)|0);
      $dp=$incdec_ptr364;
      HEAP8[($221)]=$220;
      var $222=$sp;
      var $incdec_ptr365=(($222-1)|0);
      $sp=$incdec_ptr365;
      var $223=HEAP8[($222)];
      var $224=$dp;
      var $incdec_ptr366=(($224-1)|0);
      $dp=$incdec_ptr366;
      HEAP8[($224)]=$223;
      var $225=$sp;
      var $incdec_ptr367=(($225-1)|0);
      $sp=$incdec_ptr367;
      var $226=HEAP8[($225)];
      var $227=$dp;
      var $incdec_ptr368=(($227-1)|0);
      $dp=$incdec_ptr368;
      HEAP8[($227)]=$226;
      var $228=$sp;
      var $incdec_ptr369=(($228-1)|0);
      $sp=$incdec_ptr369;
      var $229=HEAP8[($228)];
      var $230=$dp;
      var $incdec_ptr370=(($230-1)|0);
      $dp=$incdec_ptr370;
      HEAP8[($230)]=$229;
      var $231=$sp;
      var $incdec_ptr371=(($231-1)|0);
      $sp=$incdec_ptr371;
      var $232=HEAP8[($231)];
      var $233=$dp;
      var $incdec_ptr372=(($233-1)|0);
      $dp=$incdec_ptr372;
      HEAP8[($233)]=$232;
      __label__ = 87; break;
    case 87: 
      var $234=$i;
      var $inc374=(($234+1)|0);
      $i=$inc374;
      __label__ = 77; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      var $235=$row_info_addr;
      var $color_type378=(($235+8)|0);
      HEAP8[($color_type378)]=6;
      var $236=$row_info_addr;
      var $channels379=(($236+10)|0);
      HEAP8[($channels379)]=4;
      var $237=$row_info_addr;
      var $bit_depth380=(($237+9)|0);
      var $238=HEAPU8[($bit_depth380)];
      var $conv381=(($238)&255);
      var $shl382=$conv381 << 2;
      var $conv383=(($shl382) & 255);
      var $239=$row_info_addr;
      var $pixel_depth384=(($239+11)|0);
      HEAP8[($pixel_depth384)]=$conv383;
      var $240=$row_info_addr;
      var $pixel_depth385=(($240+11)|0);
      var $241=HEAPU8[($pixel_depth385)];
      var $conv386=(($241)&255);
      var $cmp387=(($conv386)|0) >= 8;
      if ($cmp387) { __label__ = 91; break; } else { __label__ = 92; break; }
    case 91: 
      var $242=$row_width;
      var $243=$row_info_addr;
      var $pixel_depth390=(($243+11)|0);
      var $244=HEAPU8[($pixel_depth390)];
      var $conv391=(($244)&255);
      var $shr392=$conv391 >>> 3;
      var $mul393=(($242*$shr392)|0);
      var $cond401 = $mul393;__label__ = 93; break;
    case 92: 
      var $245=$row_width;
      var $246=$row_info_addr;
      var $pixel_depth395=(($246+11)|0);
      var $247=HEAPU8[($pixel_depth395)];
      var $conv396=(($247)&255);
      var $mul397=(($245*$conv396)|0);
      var $add398=(($mul397+7)|0);
      var $shr399=$add398 >>> 3;
      var $cond401 = $shr399;__label__ = 93; break;
    case 93: 
      var $cond401;
      var $248=$row_info_addr;
      var $rowbytes402=(($248+4)|0);
      HEAP32[(($rowbytes402)>>2)]=$cond401;
      __label__ = 94; break;
    case 94: 
      __label__ = 95; break;
    case 95: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_expand["X"]=1;

function _png_do_rgb_to_gray($png_ptr, $row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $row_info_addr;
      var $row_addr;
      var $rgb_error;
      var $rc;
      var $gc;
      var $bc;
      var $row_width;
      var $have_alpha;
      var $sp;
      var $dp;
      var $i;
      var $red;
      var $green;
      var $blue;
      var $sp66;
      var $dp67;
      var $i68;
      var $red73;
      var $green75;
      var $blue77;
      var $sp120;
      var $dp121;
      var $i122;
      var $red127;
      var $green128;
      var $blue129;
      var $w;
      var $red_1;
      var $green_1;
      var $blue_1;
      var $gray16;
      var $sp242;
      var $dp243;
      var $i244;
      var $red249;
      var $green250;
      var $blue251;
      var $gray16252;
      $png_ptr_addr=$png_ptr;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $rgb_error=0;
      var $0=$row_info_addr;
      var $color_type=(($0+8)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $and=$conv & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 62; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$row_info_addr;
      var $color_type1=(($2+8)|0);
      var $3=HEAPU8[($color_type1)];
      var $conv2=(($3)&255);
      var $and3=$conv2 & 2;
      var $tobool4=(($and3)|0)!=0;
      if ($tobool4) { __label__ = 3; break; } else { __label__ = 62; break; }
    case 3: 
      var $4=$png_ptr_addr;
      var $rgb_to_gray_red_coeff=(($4+572)|0);
      var $5=HEAPU16[(($rgb_to_gray_red_coeff)>>1)];
      var $conv5=(($5)&65535);
      $rc=$conv5;
      var $6=$png_ptr_addr;
      var $rgb_to_gray_green_coeff=(($6+574)|0);
      var $7=HEAPU16[(($rgb_to_gray_green_coeff)>>1)];
      var $conv6=(($7)&65535);
      $gc=$conv6;
      var $8=$rc;
      var $sub=((32768-$8)|0);
      var $9=$gc;
      var $sub7=(($sub-$9)|0);
      $bc=$sub7;
      var $10=$row_info_addr;
      var $width=(($10)|0);
      var $11=HEAP32[(($width)>>2)];
      $row_width=$11;
      var $12=$row_info_addr;
      var $color_type8=(($12+8)|0);
      var $13=HEAPU8[($color_type8)];
      var $conv9=(($13)&255);
      var $and10=$conv9 & 4;
      var $cmp=(($and10)|0)!=0;
      var $conv11=(($cmp)&1);
      $have_alpha=$conv11;
      var $14=$row_info_addr;
      var $bit_depth=(($14+9)|0);
      var $15=HEAPU8[($bit_depth)];
      var $conv12=(($15)&255);
      var $cmp13=(($conv12)|0)==8;
      if ($cmp13) { __label__ = 4; break; } else { __label__ = 31; break; }
    case 4: 
      var $16=$png_ptr_addr;
      var $gamma_from_1=(($16+368)|0);
      var $17=HEAP32[(($gamma_from_1)>>2)];
      var $cmp16=(($17)|0)!=0;
      if ($cmp16) { __label__ = 5; break; } else { __label__ = 19; break; }
    case 5: 
      var $18=$png_ptr_addr;
      var $gamma_to_1=(($18+372)|0);
      var $19=HEAP32[(($gamma_to_1)>>2)];
      var $cmp19=(($19)|0)!=0;
      if ($cmp19) { __label__ = 6; break; } else { __label__ = 19; break; }
    case 6: 
      var $20=$row_addr;
      $sp=$20;
      var $21=$row_addr;
      $dp=$21;
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $22=$i;
      var $23=$row_width;
      var $cmp22=(($22)>>>0) < (($23)>>>0);
      if ($cmp22) { __label__ = 8; break; } else { __label__ = 18; break; }
    case 8: 
      var $24=$sp;
      var $incdec_ptr=(($24+1)|0);
      $sp=$incdec_ptr;
      var $25=HEAP8[($24)];
      $red=$25;
      var $26=$sp;
      var $incdec_ptr24=(($26+1)|0);
      $sp=$incdec_ptr24;
      var $27=HEAP8[($26)];
      $green=$27;
      var $28=$sp;
      var $incdec_ptr25=(($28+1)|0);
      $sp=$incdec_ptr25;
      var $29=HEAP8[($28)];
      $blue=$29;
      var $30=$red;
      var $conv26=(($30)&255);
      var $31=$green;
      var $conv27=(($31)&255);
      var $cmp28=(($conv26)|0)!=(($conv27)|0);
      if ($cmp28) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $32=$red;
      var $conv30=(($32)&255);
      var $33=$blue;
      var $conv31=(($33)&255);
      var $cmp32=(($conv30)|0)!=(($conv31)|0);
      if ($cmp32) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $34=$red;
      var $idxprom=(($34)&255);
      var $35=$png_ptr_addr;
      var $gamma_to_135=(($35+372)|0);
      var $36=HEAP32[(($gamma_to_135)>>2)];
      var $arrayidx=(($36+$idxprom)|0);
      var $37=HEAP8[($arrayidx)];
      $red=$37;
      var $38=$green;
      var $idxprom36=(($38)&255);
      var $39=$png_ptr_addr;
      var $gamma_to_137=(($39+372)|0);
      var $40=HEAP32[(($gamma_to_137)>>2)];
      var $arrayidx38=(($40+$idxprom36)|0);
      var $41=HEAP8[($arrayidx38)];
      $green=$41;
      var $42=$blue;
      var $idxprom39=(($42)&255);
      var $43=$png_ptr_addr;
      var $gamma_to_140=(($43+372)|0);
      var $44=HEAP32[(($gamma_to_140)>>2)];
      var $arrayidx41=(($44+$idxprom39)|0);
      var $45=HEAP8[($arrayidx41)];
      $blue=$45;
      var $46=$rgb_error;
      var $or=$46 | 1;
      $rgb_error=$or;
      var $47=$rc;
      var $48=$red;
      var $conv42=(($48)&255);
      var $mul=(($47*$conv42)|0);
      var $49=$gc;
      var $50=$green;
      var $conv43=(($50)&255);
      var $mul44=(($49*$conv43)|0);
      var $add=(($mul+$mul44)|0);
      var $51=$bc;
      var $52=$blue;
      var $conv45=(($52)&255);
      var $mul46=(($51*$conv45)|0);
      var $add47=(($add+$mul46)|0);
      var $add48=(($add47+16384)|0);
      var $shr=$add48 >>> 15;
      var $53=$png_ptr_addr;
      var $gamma_from_149=(($53+368)|0);
      var $54=HEAP32[(($gamma_from_149)>>2)];
      var $arrayidx50=(($54+$shr)|0);
      var $55=HEAP8[($arrayidx50)];
      var $56=$dp;
      var $incdec_ptr51=(($56+1)|0);
      $dp=$incdec_ptr51;
      HEAP8[($56)]=$55;
      __label__ = 14; break;
    case 11: 
      var $57=$png_ptr_addr;
      var $gamma_table=(($57+360)|0);
      var $58=HEAP32[(($gamma_table)>>2)];
      var $cmp52=(($58)|0)!=0;
      if ($cmp52) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $59=$red;
      var $idxprom55=(($59)&255);
      var $60=$png_ptr_addr;
      var $gamma_table56=(($60+360)|0);
      var $61=HEAP32[(($gamma_table56)>>2)];
      var $arrayidx57=(($61+$idxprom55)|0);
      var $62=HEAP8[($arrayidx57)];
      $red=$62;
      __label__ = 13; break;
    case 13: 
      var $63=$red;
      var $64=$dp;
      var $incdec_ptr58=(($64+1)|0);
      $dp=$incdec_ptr58;
      HEAP8[($64)]=$63;
      __label__ = 14; break;
    case 14: 
      var $65=$have_alpha;
      var $tobool60=(($65)|0)!=0;
      if ($tobool60) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $66=$sp;
      var $incdec_ptr62=(($66+1)|0);
      $sp=$incdec_ptr62;
      var $67=HEAP8[($66)];
      var $68=$dp;
      var $incdec_ptr63=(($68+1)|0);
      $dp=$incdec_ptr63;
      HEAP8[($68)]=$67;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $69=$i;
      var $inc=(($69+1)|0);
      $i=$inc;
      __label__ = 7; break;
    case 18: 
      __label__ = 30; break;
    case 19: 
      var $70=$row_addr;
      $sp66=$70;
      var $71=$row_addr;
      $dp67=$71;
      $i68=0;
      __label__ = 20; break;
    case 20: 
      var $72=$i68;
      var $73=$row_width;
      var $cmp70=(($72)>>>0) < (($73)>>>0);
      if ($cmp70) { __label__ = 21; break; } else { __label__ = 29; break; }
    case 21: 
      var $74=$sp66;
      var $incdec_ptr74=(($74+1)|0);
      $sp66=$incdec_ptr74;
      var $75=HEAP8[($74)];
      $red73=$75;
      var $76=$sp66;
      var $incdec_ptr76=(($76+1)|0);
      $sp66=$incdec_ptr76;
      var $77=HEAP8[($76)];
      $green75=$77;
      var $78=$sp66;
      var $incdec_ptr78=(($78+1)|0);
      $sp66=$incdec_ptr78;
      var $79=HEAP8[($78)];
      $blue77=$79;
      var $80=$red73;
      var $conv79=(($80)&255);
      var $81=$green75;
      var $conv80=(($81)&255);
      var $cmp81=(($conv79)|0)!=(($conv80)|0);
      if ($cmp81) { __label__ = 23; break; } else { __label__ = 22; break; }
    case 22: 
      var $82=$red73;
      var $conv84=(($82)&255);
      var $83=$blue77;
      var $conv85=(($83)&255);
      var $cmp86=(($conv84)|0)!=(($conv85)|0);
      if ($cmp86) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $84=$rgb_error;
      var $or89=$84 | 1;
      $rgb_error=$or89;
      var $85=$rc;
      var $86=$red73;
      var $conv90=(($86)&255);
      var $mul91=(($85*$conv90)|0);
      var $87=$gc;
      var $88=$green75;
      var $conv92=(($88)&255);
      var $mul93=(($87*$conv92)|0);
      var $add94=(($mul91+$mul93)|0);
      var $89=$bc;
      var $90=$blue77;
      var $conv95=(($90)&255);
      var $mul96=(($89*$conv95)|0);
      var $add97=(($add94+$mul96)|0);
      var $shr98=$add97 >>> 15;
      var $conv99=(($shr98) & 255);
      var $91=$dp67;
      var $incdec_ptr100=(($91+1)|0);
      $dp67=$incdec_ptr100;
      HEAP8[($91)]=$conv99;
      __label__ = 25; break;
    case 24: 
      var $92=$red73;
      var $93=$dp67;
      var $incdec_ptr102=(($93+1)|0);
      $dp67=$incdec_ptr102;
      HEAP8[($93)]=$92;
      __label__ = 25; break;
    case 25: 
      var $94=$have_alpha;
      var $tobool104=(($94)|0)!=0;
      if ($tobool104) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $95=$sp66;
      var $incdec_ptr106=(($95+1)|0);
      $sp66=$incdec_ptr106;
      var $96=HEAP8[($95)];
      var $97=$dp67;
      var $incdec_ptr107=(($97+1)|0);
      $dp67=$incdec_ptr107;
      HEAP8[($97)]=$96;
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $98=$i68;
      var $inc110=(($98+1)|0);
      $i68=$inc110;
      __label__ = 20; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 58; break;
    case 31: 
      var $99=$png_ptr_addr;
      var $gamma_16_to_1=(($99+380)|0);
      var $100=HEAP32[(($gamma_16_to_1)>>2)];
      var $cmp114=(($100)|0)!=0;
      if ($cmp114) { __label__ = 32; break; } else { __label__ = 47; break; }
    case 32: 
      var $101=$png_ptr_addr;
      var $gamma_16_from_1=(($101+376)|0);
      var $102=HEAP32[(($gamma_16_from_1)>>2)];
      var $cmp117=(($102)|0)!=0;
      if ($cmp117) { __label__ = 33; break; } else { __label__ = 47; break; }
    case 33: 
      var $103=$row_addr;
      $sp120=$103;
      var $104=$row_addr;
      $dp121=$104;
      $i122=0;
      __label__ = 34; break;
    case 34: 
      var $105=$i122;
      var $106=$row_width;
      var $cmp124=(($105)>>>0) < (($106)>>>0);
      if ($cmp124) { __label__ = 35; break; } else { __label__ = 46; break; }
    case 35: 
      var $107=$sp120;
      var $108=HEAPU8[($107)];
      var $conv130=(($108)&255);
      var $shl=$conv130 << 8;
      var $109=$sp120;
      var $add_ptr=(($109+1)|0);
      var $110=HEAPU8[($add_ptr)];
      var $conv131=(($110)&255);
      var $or132=$shl | $conv131;
      var $conv133=(($or132) & 65535);
      $red127=$conv133;
      var $111=$sp120;
      var $add_ptr134=(($111+2)|0);
      $sp120=$add_ptr134;
      var $112=$sp120;
      var $113=HEAPU8[($112)];
      var $conv135=(($113)&255);
      var $shl136=$conv135 << 8;
      var $114=$sp120;
      var $add_ptr137=(($114+1)|0);
      var $115=HEAPU8[($add_ptr137)];
      var $conv138=(($115)&255);
      var $or139=$shl136 | $conv138;
      var $conv140=(($or139) & 65535);
      $green128=$conv140;
      var $116=$sp120;
      var $add_ptr141=(($116+2)|0);
      $sp120=$add_ptr141;
      var $117=$sp120;
      var $118=HEAPU8[($117)];
      var $conv142=(($118)&255);
      var $shl143=$conv142 << 8;
      var $119=$sp120;
      var $add_ptr144=(($119+1)|0);
      var $120=HEAPU8[($add_ptr144)];
      var $conv145=(($120)&255);
      var $or146=$shl143 | $conv145;
      var $conv147=(($or146) & 65535);
      $blue129=$conv147;
      var $121=$sp120;
      var $add_ptr148=(($121+2)|0);
      $sp120=$add_ptr148;
      var $122=$red127;
      var $conv149=(($122)&65535);
      var $123=$green128;
      var $conv150=(($123)&65535);
      var $cmp151=(($conv149)|0)==(($conv150)|0);
      if ($cmp151) { __label__ = 36; break; } else { __label__ = 41; break; }
    case 36: 
      var $124=$red127;
      var $conv154=(($124)&65535);
      var $125=$blue129;
      var $conv155=(($125)&65535);
      var $cmp156=(($conv154)|0)==(($conv155)|0);
      if ($cmp156) { __label__ = 37; break; } else { __label__ = 41; break; }
    case 37: 
      var $126=$png_ptr_addr;
      var $gamma_16_table=(($126+364)|0);
      var $127=HEAP32[(($gamma_16_table)>>2)];
      var $cmp159=(($127)|0)!=0;
      if ($cmp159) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $128=$red127;
      var $conv162=(($128)&65535);
      var $shr163=$conv162 >> 8;
      var $129=$red127;
      var $conv164=(($129)&65535);
      var $and165=$conv164 & 255;
      var $130=$png_ptr_addr;
      var $gamma_shift=(($130+348)|0);
      var $131=HEAP32[(($gamma_shift)>>2)];
      var $shr166=$and165 >> (($131)|0);
      var $132=$png_ptr_addr;
      var $gamma_16_table167=(($132+364)|0);
      var $133=HEAP32[(($gamma_16_table167)>>2)];
      var $arrayidx168=(($133+($shr166<<2))|0);
      var $134=HEAP32[(($arrayidx168)>>2)];
      var $arrayidx169=(($134+($shr163<<1))|0);
      var $135=HEAP16[(($arrayidx169)>>1)];
      $w=$135;
      __label__ = 40; break;
    case 39: 
      var $136=$red127;
      $w=$136;
      __label__ = 40; break;
    case 40: 
      __label__ = 42; break;
    case 41: 
      var $137=$red127;
      var $conv173=(($137)&65535);
      var $shr174=$conv173 >> 8;
      var $138=$red127;
      var $conv175=(($138)&65535);
      var $and176=$conv175 & 255;
      var $139=$png_ptr_addr;
      var $gamma_shift177=(($139+348)|0);
      var $140=HEAP32[(($gamma_shift177)>>2)];
      var $shr178=$and176 >> (($140)|0);
      var $141=$png_ptr_addr;
      var $gamma_16_to_1179=(($141+380)|0);
      var $142=HEAP32[(($gamma_16_to_1179)>>2)];
      var $arrayidx180=(($142+($shr178<<2))|0);
      var $143=HEAP32[(($arrayidx180)>>2)];
      var $arrayidx181=(($143+($shr174<<1))|0);
      var $144=HEAP16[(($arrayidx181)>>1)];
      $red_1=$144;
      var $145=$green128;
      var $conv182=(($145)&65535);
      var $shr183=$conv182 >> 8;
      var $146=$green128;
      var $conv184=(($146)&65535);
      var $and185=$conv184 & 255;
      var $147=$png_ptr_addr;
      var $gamma_shift186=(($147+348)|0);
      var $148=HEAP32[(($gamma_shift186)>>2)];
      var $shr187=$and185 >> (($148)|0);
      var $149=$png_ptr_addr;
      var $gamma_16_to_1188=(($149+380)|0);
      var $150=HEAP32[(($gamma_16_to_1188)>>2)];
      var $arrayidx189=(($150+($shr187<<2))|0);
      var $151=HEAP32[(($arrayidx189)>>2)];
      var $arrayidx190=(($151+($shr183<<1))|0);
      var $152=HEAP16[(($arrayidx190)>>1)];
      $green_1=$152;
      var $153=$blue129;
      var $conv191=(($153)&65535);
      var $shr192=$conv191 >> 8;
      var $154=$blue129;
      var $conv193=(($154)&65535);
      var $and194=$conv193 & 255;
      var $155=$png_ptr_addr;
      var $gamma_shift195=(($155+348)|0);
      var $156=HEAP32[(($gamma_shift195)>>2)];
      var $shr196=$and194 >> (($156)|0);
      var $157=$png_ptr_addr;
      var $gamma_16_to_1197=(($157+380)|0);
      var $158=HEAP32[(($gamma_16_to_1197)>>2)];
      var $arrayidx198=(($158+($shr196<<2))|0);
      var $159=HEAP32[(($arrayidx198)>>2)];
      var $arrayidx199=(($159+($shr192<<1))|0);
      var $160=HEAP16[(($arrayidx199)>>1)];
      $blue_1=$160;
      var $161=$rc;
      var $162=$red_1;
      var $conv200=(($162)&65535);
      var $mul201=(($161*$conv200)|0);
      var $163=$gc;
      var $164=$green_1;
      var $conv202=(($164)&65535);
      var $mul203=(($163*$conv202)|0);
      var $add204=(($mul201+$mul203)|0);
      var $165=$bc;
      var $166=$blue_1;
      var $conv205=(($166)&65535);
      var $mul206=(($165*$conv205)|0);
      var $add207=(($add204+$mul206)|0);
      var $add208=(($add207+16384)|0);
      var $shr209=$add208 >>> 15;
      var $conv210=(($shr209) & 65535);
      $gray16=$conv210;
      var $167=$gray16;
      var $conv211=(($167)&65535);
      var $shr212=$conv211 >> 8;
      var $168=$gray16;
      var $conv213=(($168)&65535);
      var $and214=$conv213 & 255;
      var $169=$png_ptr_addr;
      var $gamma_shift215=(($169+348)|0);
      var $170=HEAP32[(($gamma_shift215)>>2)];
      var $shr216=$and214 >> (($170)|0);
      var $171=$png_ptr_addr;
      var $gamma_16_from_1217=(($171+376)|0);
      var $172=HEAP32[(($gamma_16_from_1217)>>2)];
      var $arrayidx218=(($172+($shr216<<2))|0);
      var $173=HEAP32[(($arrayidx218)>>2)];
      var $arrayidx219=(($173+($shr212<<1))|0);
      var $174=HEAP16[(($arrayidx219)>>1)];
      $w=$174;
      var $175=$rgb_error;
      var $or220=$175 | 1;
      $rgb_error=$or220;
      __label__ = 42; break;
    case 42: 
      var $176=$w;
      var $conv222=(($176)&65535);
      var $shr223=$conv222 >> 8;
      var $and224=$shr223 & 255;
      var $conv225=(($and224) & 255);
      var $177=$dp121;
      var $incdec_ptr226=(($177+1)|0);
      $dp121=$incdec_ptr226;
      HEAP8[($177)]=$conv225;
      var $178=$w;
      var $conv227=(($178)&65535);
      var $and228=$conv227 & 255;
      var $conv229=(($and228) & 255);
      var $179=$dp121;
      var $incdec_ptr230=(($179+1)|0);
      $dp121=$incdec_ptr230;
      HEAP8[($179)]=$conv229;
      var $180=$have_alpha;
      var $tobool231=(($180)|0)!=0;
      if ($tobool231) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $181=$sp120;
      var $incdec_ptr233=(($181+1)|0);
      $sp120=$incdec_ptr233;
      var $182=HEAP8[($181)];
      var $183=$dp121;
      var $incdec_ptr234=(($183+1)|0);
      $dp121=$incdec_ptr234;
      HEAP8[($183)]=$182;
      var $184=$sp120;
      var $incdec_ptr235=(($184+1)|0);
      $sp120=$incdec_ptr235;
      var $185=HEAP8[($184)];
      var $186=$dp121;
      var $incdec_ptr236=(($186+1)|0);
      $dp121=$incdec_ptr236;
      HEAP8[($186)]=$185;
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $187=$i122;
      var $inc239=(($187+1)|0);
      $i122=$inc239;
      __label__ = 34; break;
    case 46: 
      __label__ = 57; break;
    case 47: 
      var $188=$row_addr;
      $sp242=$188;
      var $189=$row_addr;
      $dp243=$189;
      $i244=0;
      __label__ = 48; break;
    case 48: 
      var $190=$i244;
      var $191=$row_width;
      var $cmp246=(($190)>>>0) < (($191)>>>0);
      if ($cmp246) { __label__ = 49; break; } else { __label__ = 56; break; }
    case 49: 
      var $192=$sp242;
      var $193=HEAPU8[($192)];
      var $conv253=(($193)&255);
      var $shl254=$conv253 << 8;
      var $194=$sp242;
      var $add_ptr255=(($194+1)|0);
      var $195=HEAPU8[($add_ptr255)];
      var $conv256=(($195)&255);
      var $or257=$shl254 | $conv256;
      var $conv258=(($or257) & 65535);
      $red249=$conv258;
      var $196=$sp242;
      var $add_ptr259=(($196+2)|0);
      $sp242=$add_ptr259;
      var $197=$sp242;
      var $198=HEAPU8[($197)];
      var $conv260=(($198)&255);
      var $shl261=$conv260 << 8;
      var $199=$sp242;
      var $add_ptr262=(($199+1)|0);
      var $200=HEAPU8[($add_ptr262)];
      var $conv263=(($200)&255);
      var $or264=$shl261 | $conv263;
      var $conv265=(($or264) & 65535);
      $green250=$conv265;
      var $201=$sp242;
      var $add_ptr266=(($201+2)|0);
      $sp242=$add_ptr266;
      var $202=$sp242;
      var $203=HEAPU8[($202)];
      var $conv267=(($203)&255);
      var $shl268=$conv267 << 8;
      var $204=$sp242;
      var $add_ptr269=(($204+1)|0);
      var $205=HEAPU8[($add_ptr269)];
      var $conv270=(($205)&255);
      var $or271=$shl268 | $conv270;
      var $conv272=(($or271) & 65535);
      $blue251=$conv272;
      var $206=$sp242;
      var $add_ptr273=(($206+2)|0);
      $sp242=$add_ptr273;
      var $207=$red249;
      var $conv274=(($207)&65535);
      var $208=$green250;
      var $conv275=(($208)&65535);
      var $cmp276=(($conv274)|0)!=(($conv275)|0);
      if ($cmp276) { __label__ = 51; break; } else { __label__ = 50; break; }
    case 50: 
      var $209=$red249;
      var $conv279=(($209)&65535);
      var $210=$blue251;
      var $conv280=(($210)&65535);
      var $cmp281=(($conv279)|0)!=(($conv280)|0);
      if ($cmp281) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $211=$rgb_error;
      var $or284=$211 | 1;
      $rgb_error=$or284;
      __label__ = 52; break;
    case 52: 
      var $212=$rc;
      var $213=$red249;
      var $conv286=(($213)&65535);
      var $mul287=(($212*$conv286)|0);
      var $214=$gc;
      var $215=$green250;
      var $conv288=(($215)&65535);
      var $mul289=(($214*$conv288)|0);
      var $add290=(($mul287+$mul289)|0);
      var $216=$bc;
      var $217=$blue251;
      var $conv291=(($217)&65535);
      var $mul292=(($216*$conv291)|0);
      var $add293=(($add290+$mul292)|0);
      var $add294=(($add293+16384)|0);
      var $shr295=$add294 >>> 15;
      var $conv296=(($shr295) & 65535);
      $gray16252=$conv296;
      var $218=$gray16252;
      var $conv297=(($218)&65535);
      var $shr298=$conv297 >> 8;
      var $and299=$shr298 & 255;
      var $conv300=(($and299) & 255);
      var $219=$dp243;
      var $incdec_ptr301=(($219+1)|0);
      $dp243=$incdec_ptr301;
      HEAP8[($219)]=$conv300;
      var $220=$gray16252;
      var $conv302=(($220)&65535);
      var $and303=$conv302 & 255;
      var $conv304=(($and303) & 255);
      var $221=$dp243;
      var $incdec_ptr305=(($221+1)|0);
      $dp243=$incdec_ptr305;
      HEAP8[($221)]=$conv304;
      var $222=$have_alpha;
      var $tobool306=(($222)|0)!=0;
      if ($tobool306) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $223=$sp242;
      var $incdec_ptr308=(($223+1)|0);
      $sp242=$incdec_ptr308;
      var $224=HEAP8[($223)];
      var $225=$dp243;
      var $incdec_ptr309=(($225+1)|0);
      $dp243=$incdec_ptr309;
      HEAP8[($225)]=$224;
      var $226=$sp242;
      var $incdec_ptr310=(($226+1)|0);
      $sp242=$incdec_ptr310;
      var $227=HEAP8[($226)];
      var $228=$dp243;
      var $incdec_ptr311=(($228+1)|0);
      $dp243=$incdec_ptr311;
      HEAP8[($228)]=$227;
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $229=$i244;
      var $inc314=(($229+1)|0);
      $i244=$inc314;
      __label__ = 48; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $230=$row_info_addr;
      var $channels=(($230+10)|0);
      var $231=HEAPU8[($channels)];
      var $conv318=(($231)&255);
      var $sub319=(($conv318-2)|0);
      var $conv320=(($sub319) & 255);
      var $232=$row_info_addr;
      var $channels321=(($232+10)|0);
      HEAP8[($channels321)]=$conv320;
      var $233=$row_info_addr;
      var $color_type322=(($233+8)|0);
      var $234=HEAPU8[($color_type322)];
      var $conv323=(($234)&255);
      var $and324=$conv323 & -3;
      var $conv325=(($and324) & 255);
      var $235=$row_info_addr;
      var $color_type326=(($235+8)|0);
      HEAP8[($color_type326)]=$conv325;
      var $236=$row_info_addr;
      var $channels327=(($236+10)|0);
      var $237=HEAPU8[($channels327)];
      var $conv328=(($237)&255);
      var $238=$row_info_addr;
      var $bit_depth329=(($238+9)|0);
      var $239=HEAPU8[($bit_depth329)];
      var $conv330=(($239)&255);
      var $mul331=(($conv328*$conv330)|0);
      var $conv332=(($mul331) & 255);
      var $240=$row_info_addr;
      var $pixel_depth=(($240+11)|0);
      HEAP8[($pixel_depth)]=$conv332;
      var $241=$row_info_addr;
      var $pixel_depth333=(($241+11)|0);
      var $242=HEAPU8[($pixel_depth333)];
      var $conv334=(($242)&255);
      var $cmp335=(($conv334)|0) >= 8;
      if ($cmp335) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $243=$row_width;
      var $244=$row_info_addr;
      var $pixel_depth337=(($244+11)|0);
      var $245=HEAPU8[($pixel_depth337)];
      var $conv338=(($245)&255);
      var $shr339=$conv338 >>> 3;
      var $mul340=(($243*$shr339)|0);
      var $cond = $mul340;__label__ = 61; break;
    case 60: 
      var $246=$row_width;
      var $247=$row_info_addr;
      var $pixel_depth341=(($247+11)|0);
      var $248=HEAPU8[($pixel_depth341)];
      var $conv342=(($248)&255);
      var $mul343=(($246*$conv342)|0);
      var $add344=(($mul343+7)|0);
      var $shr345=$add344 >>> 3;
      var $cond = $shr345;__label__ = 61; break;
    case 61: 
      var $cond;
      var $249=$row_info_addr;
      var $rowbytes=(($249+4)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      __label__ = 62; break;
    case 62: 
      var $250=$rgb_error;
      ;
      return $250;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_rgb_to_gray["X"]=1;

function _png_do_gray_to_rgb($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $i;
      var $row_width;
      var $sp;
      var $dp;
      var $sp20;
      var $dp24;
      var $sp55;
      var $dp59;
      var $sp76;
      var $dp80;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $width=(($0)|0);
      var $1=HEAP32[(($width)>>2)];
      $row_width=$1;
      var $2=$row_info_addr;
      var $bit_depth=(($2+9)|0);
      var $3=HEAPU8[($bit_depth)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0) >= 8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 34; break; }
    case 2: 
      var $4=$row_info_addr;
      var $color_type=(($4+8)|0);
      var $5=HEAPU8[($color_type)];
      var $conv2=(($5)&255);
      var $and=$conv2 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 34; break; } else { __label__ = 3; break; }
    case 3: 
      var $6=$row_info_addr;
      var $color_type3=(($6+8)|0);
      var $7=HEAPU8[($color_type3)];
      var $conv4=(($7)&255);
      var $cmp5=(($conv4)|0)==0;
      if ($cmp5) { __label__ = 4; break; } else { __label__ = 16; break; }
    case 4: 
      var $8=$row_info_addr;
      var $bit_depth8=(($8+9)|0);
      var $9=HEAPU8[($bit_depth8)];
      var $conv9=(($9)&255);
      var $cmp10=(($conv9)|0)==8;
      if ($cmp10) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $10=$row_addr;
      var $11=$row_width;
      var $add_ptr=(($10+$11)|0);
      var $add_ptr13=(($add_ptr-1)|0);
      $sp=$add_ptr13;
      var $12=$sp;
      var $13=$row_width;
      var $mul=((($13<<1))|0);
      var $add_ptr14=(($12+$mul)|0);
      $dp=$add_ptr14;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $14=$i;
      var $15=$row_width;
      var $cmp15=(($14)>>>0) < (($15)>>>0);
      if ($cmp15) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $16=$sp;
      var $17=HEAP8[($16)];
      var $18=$dp;
      var $incdec_ptr=(($18-1)|0);
      $dp=$incdec_ptr;
      HEAP8[($18)]=$17;
      var $19=$sp;
      var $20=HEAP8[($19)];
      var $21=$dp;
      var $incdec_ptr17=(($21-1)|0);
      $dp=$incdec_ptr17;
      HEAP8[($21)]=$20;
      var $22=$sp;
      var $incdec_ptr18=(($22-1)|0);
      $sp=$incdec_ptr18;
      var $23=HEAP8[($22)];
      var $24=$dp;
      var $incdec_ptr19=(($24-1)|0);
      $dp=$incdec_ptr19;
      HEAP8[($24)]=$23;
      __label__ = 8; break;
    case 8: 
      var $25=$i;
      var $inc=(($25+1)|0);
      $i=$inc;
      __label__ = 6; break;
    case 9: 
      __label__ = 15; break;
    case 10: 
      var $26=$row_addr;
      var $27=$row_width;
      var $mul21=((($27<<1))|0);
      var $add_ptr22=(($26+$mul21)|0);
      var $add_ptr23=(($add_ptr22-1)|0);
      $sp20=$add_ptr23;
      var $28=$sp20;
      var $29=$row_width;
      var $mul25=((($29<<2))|0);
      var $add_ptr26=(($28+$mul25)|0);
      $dp24=$add_ptr26;
      $i=0;
      __label__ = 11; break;
    case 11: 
      var $30=$i;
      var $31=$row_width;
      var $cmp28=(($30)>>>0) < (($31)>>>0);
      if ($cmp28) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $32=$sp20;
      var $33=HEAP8[($32)];
      var $34=$dp24;
      var $incdec_ptr31=(($34-1)|0);
      $dp24=$incdec_ptr31;
      HEAP8[($34)]=$33;
      var $35=$sp20;
      var $add_ptr32=(($35-1)|0);
      var $36=HEAP8[($add_ptr32)];
      var $37=$dp24;
      var $incdec_ptr33=(($37-1)|0);
      $dp24=$incdec_ptr33;
      HEAP8[($37)]=$36;
      var $38=$sp20;
      var $39=HEAP8[($38)];
      var $40=$dp24;
      var $incdec_ptr34=(($40-1)|0);
      $dp24=$incdec_ptr34;
      HEAP8[($40)]=$39;
      var $41=$sp20;
      var $add_ptr35=(($41-1)|0);
      var $42=HEAP8[($add_ptr35)];
      var $43=$dp24;
      var $incdec_ptr36=(($43-1)|0);
      $dp24=$incdec_ptr36;
      HEAP8[($43)]=$42;
      var $44=$sp20;
      var $incdec_ptr37=(($44-1)|0);
      $sp20=$incdec_ptr37;
      var $45=HEAP8[($44)];
      var $46=$dp24;
      var $incdec_ptr38=(($46-1)|0);
      $dp24=$incdec_ptr38;
      HEAP8[($46)]=$45;
      var $47=$sp20;
      var $incdec_ptr39=(($47-1)|0);
      $sp20=$incdec_ptr39;
      var $48=HEAP8[($47)];
      var $49=$dp24;
      var $incdec_ptr40=(($49-1)|0);
      $dp24=$incdec_ptr40;
      HEAP8[($49)]=$48;
      __label__ = 13; break;
    case 13: 
      var $50=$i;
      var $inc42=(($50+1)|0);
      $i=$inc42;
      __label__ = 11; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 30; break;
    case 16: 
      var $51=$row_info_addr;
      var $color_type45=(($51+8)|0);
      var $52=HEAPU8[($color_type45)];
      var $conv46=(($52)&255);
      var $cmp47=(($conv46)|0)==4;
      if ($cmp47) { __label__ = 17; break; } else { __label__ = 29; break; }
    case 17: 
      var $53=$row_info_addr;
      var $bit_depth50=(($53+9)|0);
      var $54=HEAPU8[($bit_depth50)];
      var $conv51=(($54)&255);
      var $cmp52=(($conv51)|0)==8;
      if ($cmp52) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: 
      var $55=$row_addr;
      var $56=$row_width;
      var $mul56=((($56<<1))|0);
      var $add_ptr57=(($55+$mul56)|0);
      var $add_ptr58=(($add_ptr57-1)|0);
      $sp55=$add_ptr58;
      var $57=$sp55;
      var $58=$row_width;
      var $mul60=((($58<<1))|0);
      var $add_ptr61=(($57+$mul60)|0);
      $dp59=$add_ptr61;
      $i=0;
      __label__ = 19; break;
    case 19: 
      var $59=$i;
      var $60=$row_width;
      var $cmp63=(($59)>>>0) < (($60)>>>0);
      if ($cmp63) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $61=$sp55;
      var $incdec_ptr66=(($61-1)|0);
      $sp55=$incdec_ptr66;
      var $62=HEAP8[($61)];
      var $63=$dp59;
      var $incdec_ptr67=(($63-1)|0);
      $dp59=$incdec_ptr67;
      HEAP8[($63)]=$62;
      var $64=$sp55;
      var $65=HEAP8[($64)];
      var $66=$dp59;
      var $incdec_ptr68=(($66-1)|0);
      $dp59=$incdec_ptr68;
      HEAP8[($66)]=$65;
      var $67=$sp55;
      var $68=HEAP8[($67)];
      var $69=$dp59;
      var $incdec_ptr69=(($69-1)|0);
      $dp59=$incdec_ptr69;
      HEAP8[($69)]=$68;
      var $70=$sp55;
      var $incdec_ptr70=(($70-1)|0);
      $sp55=$incdec_ptr70;
      var $71=HEAP8[($70)];
      var $72=$dp59;
      var $incdec_ptr71=(($72-1)|0);
      $dp59=$incdec_ptr71;
      HEAP8[($72)]=$71;
      __label__ = 21; break;
    case 21: 
      var $73=$i;
      var $inc73=(($73+1)|0);
      $i=$inc73;
      __label__ = 19; break;
    case 22: 
      __label__ = 28; break;
    case 23: 
      var $74=$row_addr;
      var $75=$row_width;
      var $mul77=((($75<<2))|0);
      var $add_ptr78=(($74+$mul77)|0);
      var $add_ptr79=(($add_ptr78-1)|0);
      $sp76=$add_ptr79;
      var $76=$sp76;
      var $77=$row_width;
      var $mul81=((($77<<2))|0);
      var $add_ptr82=(($76+$mul81)|0);
      $dp80=$add_ptr82;
      $i=0;
      __label__ = 24; break;
    case 24: 
      var $78=$i;
      var $79=$row_width;
      var $cmp84=(($78)>>>0) < (($79)>>>0);
      if ($cmp84) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $80=$sp76;
      var $incdec_ptr87=(($80-1)|0);
      $sp76=$incdec_ptr87;
      var $81=HEAP8[($80)];
      var $82=$dp80;
      var $incdec_ptr88=(($82-1)|0);
      $dp80=$incdec_ptr88;
      HEAP8[($82)]=$81;
      var $83=$sp76;
      var $incdec_ptr89=(($83-1)|0);
      $sp76=$incdec_ptr89;
      var $84=HEAP8[($83)];
      var $85=$dp80;
      var $incdec_ptr90=(($85-1)|0);
      $dp80=$incdec_ptr90;
      HEAP8[($85)]=$84;
      var $86=$sp76;
      var $87=HEAP8[($86)];
      var $88=$dp80;
      var $incdec_ptr91=(($88-1)|0);
      $dp80=$incdec_ptr91;
      HEAP8[($88)]=$87;
      var $89=$sp76;
      var $add_ptr92=(($89-1)|0);
      var $90=HEAP8[($add_ptr92)];
      var $91=$dp80;
      var $incdec_ptr93=(($91-1)|0);
      $dp80=$incdec_ptr93;
      HEAP8[($91)]=$90;
      var $92=$sp76;
      var $93=HEAP8[($92)];
      var $94=$dp80;
      var $incdec_ptr94=(($94-1)|0);
      $dp80=$incdec_ptr94;
      HEAP8[($94)]=$93;
      var $95=$sp76;
      var $add_ptr95=(($95-1)|0);
      var $96=HEAP8[($add_ptr95)];
      var $97=$dp80;
      var $incdec_ptr96=(($97-1)|0);
      $dp80=$incdec_ptr96;
      HEAP8[($97)]=$96;
      var $98=$sp76;
      var $incdec_ptr97=(($98-1)|0);
      $sp76=$incdec_ptr97;
      var $99=HEAP8[($98)];
      var $100=$dp80;
      var $incdec_ptr98=(($100-1)|0);
      $dp80=$incdec_ptr98;
      HEAP8[($100)]=$99;
      var $101=$sp76;
      var $incdec_ptr99=(($101-1)|0);
      $sp76=$incdec_ptr99;
      var $102=HEAP8[($101)];
      var $103=$dp80;
      var $incdec_ptr100=(($103-1)|0);
      $dp80=$incdec_ptr100;
      HEAP8[($103)]=$102;
      __label__ = 26; break;
    case 26: 
      var $104=$i;
      var $inc102=(($104+1)|0);
      $i=$inc102;
      __label__ = 24; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $105=$row_info_addr;
      var $channels=(($105+10)|0);
      var $106=HEAPU8[($channels)];
      var $conv107=(($106)&255);
      var $add=(($conv107+2)|0);
      var $conv108=(($add) & 255);
      var $107=$row_info_addr;
      var $channels109=(($107+10)|0);
      HEAP8[($channels109)]=$conv108;
      var $108=$row_info_addr;
      var $color_type110=(($108+8)|0);
      var $109=HEAPU8[($color_type110)];
      var $conv111=(($109)&255);
      var $or=$conv111 | 2;
      var $conv112=(($or) & 255);
      HEAP8[($color_type110)]=$conv112;
      var $110=$row_info_addr;
      var $channels113=(($110+10)|0);
      var $111=HEAPU8[($channels113)];
      var $conv114=(($111)&255);
      var $112=$row_info_addr;
      var $bit_depth115=(($112+9)|0);
      var $113=HEAPU8[($bit_depth115)];
      var $conv116=(($113)&255);
      var $mul117=(($conv114*$conv116)|0);
      var $conv118=(($mul117) & 255);
      var $114=$row_info_addr;
      var $pixel_depth=(($114+11)|0);
      HEAP8[($pixel_depth)]=$conv118;
      var $115=$row_info_addr;
      var $pixel_depth119=(($115+11)|0);
      var $116=HEAPU8[($pixel_depth119)];
      var $conv120=(($116)&255);
      var $cmp121=(($conv120)|0) >= 8;
      if ($cmp121) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $117=$row_width;
      var $118=$row_info_addr;
      var $pixel_depth123=(($118+11)|0);
      var $119=HEAPU8[($pixel_depth123)];
      var $conv124=(($119)&255);
      var $shr=$conv124 >>> 3;
      var $mul125=(($117*$shr)|0);
      var $cond = $mul125;__label__ = 33; break;
    case 32: 
      var $120=$row_width;
      var $121=$row_info_addr;
      var $pixel_depth126=(($121+11)|0);
      var $122=HEAPU8[($pixel_depth126)];
      var $conv127=(($122)&255);
      var $mul128=(($120*$conv127)|0);
      var $add129=(($mul128+7)|0);
      var $shr130=$add129 >>> 3;
      var $cond = $shr130;__label__ = 33; break;
    case 33: 
      var $cond;
      var $123=$row_info_addr;
      var $rowbytes=(($123+4)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      __label__ = 34; break;
    case 34: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_gray_to_rgb["X"]=1;

function _png_do_compose($row_info, $row, $png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $png_ptr_addr;
      var $gamma_table;
      var $gamma_from_1;
      var $gamma_to_1;
      var $gamma_16;
      var $gamma_16_from_1;
      var $gamma_16_to_1;
      var $gamma_shift;
      var $sp;
      var $i;
      var $row_width;
      var $optimize;
      var $shift;
      var $p;
      var $g;
      var $p195;
      var $g200;
      var $v;
      var $v381;
      var $r;
      var $g531;
      var $b;
      var $v606;
      var $r663;
      var $g670;
      var $b678;
      var $a;
      var $v788;
      var $w;
      var $temp;
      var $a826;
      var $temp840;
      var $a885;
      var $v897;
      var $g930;
      var $v931;
      var $w932;
      var $temp939;
      var $a985;
      var $g1014;
      var $v1015;
      var $temp1022;
      var $a1073;
      var $v1106;
      var $w1107;
      var $temp1110;
      var $temp1142;
      var $temp1175;
      var $a1216;
      var $temp1238;
      var $temp1262;
      var $temp1288;
      var $a1335;
      var $v1349;
      var $v1440;
      var $w1441;
      var $temp1448;
      var $temp1489;
      var $temp1531;
      var $a1577;
      var $v1634;
      var $r1635;
      var $g1642;
      var $b1650;
      var $temp1658;
      var $temp1682;
      var $temp1707;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $gamma_table1=(($0+360)|0);
      var $1=HEAP32[(($gamma_table1)>>2)];
      $gamma_table=$1;
      var $2=$png_ptr_addr;
      var $gamma_from_12=(($2+368)|0);
      var $3=HEAP32[(($gamma_from_12)>>2)];
      $gamma_from_1=$3;
      var $4=$png_ptr_addr;
      var $gamma_to_13=(($4+372)|0);
      var $5=HEAP32[(($gamma_to_13)>>2)];
      $gamma_to_1=$5;
      var $6=$png_ptr_addr;
      var $gamma_16_table=(($6+364)|0);
      var $7=HEAP32[(($gamma_16_table)>>2)];
      $gamma_16=$7;
      var $8=$png_ptr_addr;
      var $gamma_16_from_14=(($8+376)|0);
      var $9=HEAP32[(($gamma_16_from_14)>>2)];
      $gamma_16_from_1=$9;
      var $10=$png_ptr_addr;
      var $gamma_16_to_15=(($10+380)|0);
      var $11=HEAP32[(($gamma_16_to_15)>>2)];
      $gamma_16_to_1=$11;
      var $12=$png_ptr_addr;
      var $gamma_shift6=(($12+348)|0);
      var $13=HEAP32[(($gamma_shift6)>>2)];
      $gamma_shift=$13;
      var $14=$row_info_addr;
      var $width=(($14)|0);
      var $15=HEAP32[(($width)>>2)];
      $row_width=$15;
      var $16=$png_ptr_addr;
      var $flags=(($16+88)|0);
      var $17=HEAP32[(($flags)>>2)];
      var $and=$17 & 8192;
      var $cmp=(($and)|0)!=0;
      var $conv=(($cmp)&1);
      $optimize=$conv;
      var $18=$row_info_addr;
      var $color_type=(($18+8)|0);
      var $19=HEAPU8[($color_type)];
      var $conv7=(($19)&255);
      if ((($conv7)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($conv7)|0) == 2) {
        __label__ = 95; break;
      }
      else if ((($conv7)|0) == 4) {
        __label__ = 139; break;
      }
      else if ((($conv7)|0) == 6) {
        __label__ = 196; break;
      }
      else {
      __label__ = 260; break;
      }
      
    case 2: 
      var $20=$row_info_addr;
      var $bit_depth=(($20+9)|0);
      var $21=HEAPU8[($bit_depth)];
      var $conv8=(($21)&255);
      if ((($conv8)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($conv8)|0) == 2) {
        __label__ = 13; break;
      }
      else if ((($conv8)|0) == 4) {
        __label__ = 36; break;
      }
      else if ((($conv8)|0) == 8) {
        __label__ = 59; break;
      }
      else if ((($conv8)|0) == 16) {
        __label__ = 76; break;
      }
      else {
      __label__ = 93; break;
      }
      
    case 3: 
      var $22=$row_addr;
      $sp=$22;
      $shift=7;
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $23=$i;
      var $24=$row_width;
      var $cmp10=(($23)>>>0) < (($24)>>>0);
      if ($cmp10) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      var $25=$sp;
      var $26=HEAPU8[($25)];
      var $conv12=(($26)&255);
      var $27=$shift;
      var $shr=$conv12 >> (($27)|0);
      var $and13=$shr & 1;
      var $conv14=(($and13) & 65535);
      var $conv15=(($conv14)&65535);
      var $28=$png_ptr_addr;
      var $trans_color=(($28+400)|0);
      var $gray=(($trans_color+8)|0);
      var $29=HEAPU16[(($gray)>>1)];
      var $conv16=(($29)&65535);
      var $cmp17=(($conv15)|0)==(($conv16)|0);
      if ($cmp17) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $30=$shift;
      var $sub=((7-$30)|0);
      var $shr19=32639 >> (($sub)|0);
      var $and20=$shr19 & 255;
      var $conv21=(($and20) & 255);
      var $conv22=(($conv21)&255);
      var $31=$sp;
      var $32=HEAPU8[($31)];
      var $conv23=(($32)&255);
      var $and24=$conv23 & $conv22;
      var $conv25=(($and24) & 255);
      HEAP8[($31)]=$conv25;
      var $33=$png_ptr_addr;
      var $background=(($33+316)|0);
      var $gray26=(($background+8)|0);
      var $34=HEAPU16[(($gray26)>>1)];
      var $conv27=(($34)&65535);
      var $35=$shift;
      var $shl=$conv27 << $35;
      var $conv28=(($shl) & 255);
      var $conv29=(($conv28)&255);
      var $36=$sp;
      var $37=HEAPU8[($36)];
      var $conv30=(($37)&255);
      var $or=$conv30 | $conv29;
      var $conv31=(($or) & 255);
      HEAP8[($36)]=$conv31;
      __label__ = 7; break;
    case 7: 
      var $38=$shift;
      var $tobool=(($38)|0)!=0;
      if ($tobool) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      $shift=7;
      var $39=$sp;
      var $incdec_ptr=(($39+1)|0);
      $sp=$incdec_ptr;
      __label__ = 10; break;
    case 9: 
      var $40=$shift;
      var $dec=(($40-1)|0);
      $shift=$dec;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $41=$i;
      var $inc=(($41+1)|0);
      $i=$inc;
      __label__ = 4; break;
    case 12: 
      __label__ = 94; break;
    case 13: 
      var $42=$gamma_table;
      var $cmp35=(($42)|0)!=0;
      if ($cmp35) { __label__ = 14; break; } else { __label__ = 25; break; }
    case 14: 
      var $43=$row_addr;
      $sp=$43;
      $shift=6;
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $44=$i;
      var $45=$row_width;
      var $cmp39=(($44)>>>0) < (($45)>>>0);
      if ($cmp39) { __label__ = 16; break; } else { __label__ = 24; break; }
    case 16: 
      var $46=$sp;
      var $47=HEAPU8[($46)];
      var $conv42=(($47)&255);
      var $48=$shift;
      var $shr43=$conv42 >> (($48)|0);
      var $and44=$shr43 & 3;
      var $conv45=(($and44) & 65535);
      var $conv46=(($conv45)&65535);
      var $49=$png_ptr_addr;
      var $trans_color47=(($49+400)|0);
      var $gray48=(($trans_color47+8)|0);
      var $50=HEAPU16[(($gray48)>>1)];
      var $conv49=(($50)&65535);
      var $cmp50=(($conv46)|0)==(($conv49)|0);
      if ($cmp50) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $51=$shift;
      var $sub53=((6-$51)|0);
      var $shr54=16191 >> (($sub53)|0);
      var $and55=$shr54 & 255;
      var $conv56=(($and55) & 255);
      var $conv57=(($conv56)&255);
      var $52=$sp;
      var $53=HEAPU8[($52)];
      var $conv58=(($53)&255);
      var $and59=$conv58 & $conv57;
      var $conv60=(($and59) & 255);
      HEAP8[($52)]=$conv60;
      var $54=$png_ptr_addr;
      var $background61=(($54+316)|0);
      var $gray62=(($background61+8)|0);
      var $55=HEAPU16[(($gray62)>>1)];
      var $conv63=(($55)&65535);
      var $56=$shift;
      var $shl64=$conv63 << $56;
      var $conv65=(($shl64) & 255);
      var $conv66=(($conv65)&255);
      var $57=$sp;
      var $58=HEAPU8[($57)];
      var $conv67=(($58)&255);
      var $or68=$conv67 | $conv66;
      var $conv69=(($or68) & 255);
      HEAP8[($57)]=$conv69;
      __label__ = 19; break;
    case 18: 
      var $59=$sp;
      var $60=HEAPU8[($59)];
      var $conv71=(($60)&255);
      var $61=$shift;
      var $shr72=$conv71 >> (($61)|0);
      var $and73=$shr72 & 3;
      var $conv74=(($and73) & 255);
      $p=$conv74;
      var $62=$p;
      var $conv75=(($62)&255);
      var $63=$p;
      var $conv76=(($63)&255);
      var $shl77=$conv76 << 2;
      var $or78=$conv75 | $shl77;
      var $64=$p;
      var $conv79=(($64)&255);
      var $shl80=$conv79 << 4;
      var $or81=$or78 | $shl80;
      var $65=$p;
      var $conv82=(($65)&255);
      var $shl83=$conv82 << 6;
      var $or84=$or81 | $shl83;
      var $66=$gamma_table;
      var $arrayidx=(($66+$or84)|0);
      var $67=HEAPU8[($arrayidx)];
      var $conv85=(($67)&255);
      var $shr86=$conv85 >> 6;
      var $and87=$shr86 & 3;
      var $conv88=(($and87) & 255);
      $g=$conv88;
      var $68=$shift;
      var $sub89=((6-$68)|0);
      var $shr90=16191 >> (($sub89)|0);
      var $and91=$shr90 & 255;
      var $conv92=(($and91) & 255);
      var $conv93=(($conv92)&255);
      var $69=$sp;
      var $70=HEAPU8[($69)];
      var $conv94=(($70)&255);
      var $and95=$conv94 & $conv93;
      var $conv96=(($and95) & 255);
      HEAP8[($69)]=$conv96;
      var $71=$g;
      var $conv97=(($71)&255);
      var $72=$shift;
      var $shl98=$conv97 << $72;
      var $conv99=(($shl98) & 255);
      var $conv100=(($conv99)&255);
      var $73=$sp;
      var $74=HEAPU8[($73)];
      var $conv101=(($74)&255);
      var $or102=$conv101 | $conv100;
      var $conv103=(($or102) & 255);
      HEAP8[($73)]=$conv103;
      __label__ = 19; break;
    case 19: 
      var $75=$shift;
      var $tobool105=(($75)|0)!=0;
      if ($tobool105) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      $shift=6;
      var $76=$sp;
      var $incdec_ptr107=(($76+1)|0);
      $sp=$incdec_ptr107;
      __label__ = 22; break;
    case 21: 
      var $77=$shift;
      var $sub109=(($77-2)|0);
      $shift=$sub109;
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $78=$i;
      var $inc112=(($78+1)|0);
      $i=$inc112;
      __label__ = 15; break;
    case 24: 
      __label__ = 35; break;
    case 25: 
      var $79=$row_addr;
      $sp=$79;
      $shift=6;
      $i=0;
      __label__ = 26; break;
    case 26: 
      var $80=$i;
      var $81=$row_width;
      var $cmp116=(($80)>>>0) < (($81)>>>0);
      if ($cmp116) { __label__ = 27; break; } else { __label__ = 34; break; }
    case 27: 
      var $82=$sp;
      var $83=HEAPU8[($82)];
      var $conv119=(($83)&255);
      var $84=$shift;
      var $shr120=$conv119 >> (($84)|0);
      var $and121=$shr120 & 3;
      var $conv122=(($and121) & 65535);
      var $conv123=(($conv122)&65535);
      var $85=$png_ptr_addr;
      var $trans_color124=(($85+400)|0);
      var $gray125=(($trans_color124+8)|0);
      var $86=HEAPU16[(($gray125)>>1)];
      var $conv126=(($86)&65535);
      var $cmp127=(($conv123)|0)==(($conv126)|0);
      if ($cmp127) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $87=$shift;
      var $sub130=((6-$87)|0);
      var $shr131=16191 >> (($sub130)|0);
      var $and132=$shr131 & 255;
      var $conv133=(($and132) & 255);
      var $conv134=(($conv133)&255);
      var $88=$sp;
      var $89=HEAPU8[($88)];
      var $conv135=(($89)&255);
      var $and136=$conv135 & $conv134;
      var $conv137=(($and136) & 255);
      HEAP8[($88)]=$conv137;
      var $90=$png_ptr_addr;
      var $background138=(($90+316)|0);
      var $gray139=(($background138+8)|0);
      var $91=HEAPU16[(($gray139)>>1)];
      var $conv140=(($91)&65535);
      var $92=$shift;
      var $shl141=$conv140 << $92;
      var $conv142=(($shl141) & 255);
      var $conv143=(($conv142)&255);
      var $93=$sp;
      var $94=HEAPU8[($93)];
      var $conv144=(($94)&255);
      var $or145=$conv144 | $conv143;
      var $conv146=(($or145) & 255);
      HEAP8[($93)]=$conv146;
      __label__ = 29; break;
    case 29: 
      var $95=$shift;
      var $tobool148=(($95)|0)!=0;
      if ($tobool148) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      $shift=6;
      var $96=$sp;
      var $incdec_ptr150=(($96+1)|0);
      $sp=$incdec_ptr150;
      __label__ = 32; break;
    case 31: 
      var $97=$shift;
      var $sub152=(($97-2)|0);
      $shift=$sub152;
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      var $98=$i;
      var $inc155=(($98+1)|0);
      $i=$inc155;
      __label__ = 26; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 94; break;
    case 36: 
      var $99=$gamma_table;
      var $cmp159=(($99)|0)!=0;
      if ($cmp159) { __label__ = 37; break; } else { __label__ = 48; break; }
    case 37: 
      var $100=$row_addr;
      $sp=$100;
      $shift=4;
      $i=0;
      __label__ = 38; break;
    case 38: 
      var $101=$i;
      var $102=$row_width;
      var $cmp163=(($101)>>>0) < (($102)>>>0);
      if ($cmp163) { __label__ = 39; break; } else { __label__ = 47; break; }
    case 39: 
      var $103=$sp;
      var $104=HEAPU8[($103)];
      var $conv166=(($104)&255);
      var $105=$shift;
      var $shr167=$conv166 >> (($105)|0);
      var $and168=$shr167 & 15;
      var $conv169=(($and168) & 65535);
      var $conv170=(($conv169)&65535);
      var $106=$png_ptr_addr;
      var $trans_color171=(($106+400)|0);
      var $gray172=(($trans_color171+8)|0);
      var $107=HEAPU16[(($gray172)>>1)];
      var $conv173=(($107)&65535);
      var $cmp174=(($conv170)|0)==(($conv173)|0);
      if ($cmp174) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $108=$shift;
      var $sub177=((4-$108)|0);
      var $shr178=3855 >> (($sub177)|0);
      var $and179=$shr178 & 255;
      var $conv180=(($and179) & 255);
      var $conv181=(($conv180)&255);
      var $109=$sp;
      var $110=HEAPU8[($109)];
      var $conv182=(($110)&255);
      var $and183=$conv182 & $conv181;
      var $conv184=(($and183) & 255);
      HEAP8[($109)]=$conv184;
      var $111=$png_ptr_addr;
      var $background185=(($111+316)|0);
      var $gray186=(($background185+8)|0);
      var $112=HEAPU16[(($gray186)>>1)];
      var $conv187=(($112)&65535);
      var $113=$shift;
      var $shl188=$conv187 << $113;
      var $conv189=(($shl188) & 255);
      var $conv190=(($conv189)&255);
      var $114=$sp;
      var $115=HEAPU8[($114)];
      var $conv191=(($115)&255);
      var $or192=$conv191 | $conv190;
      var $conv193=(($or192) & 255);
      HEAP8[($114)]=$conv193;
      __label__ = 42; break;
    case 41: 
      var $116=$sp;
      var $117=HEAPU8[($116)];
      var $conv196=(($117)&255);
      var $118=$shift;
      var $shr197=$conv196 >> (($118)|0);
      var $and198=$shr197 & 15;
      var $conv199=(($and198) & 255);
      $p195=$conv199;
      var $119=$p195;
      var $conv201=(($119)&255);
      var $120=$p195;
      var $conv202=(($120)&255);
      var $shl203=$conv202 << 4;
      var $or204=$conv201 | $shl203;
      var $121=$gamma_table;
      var $arrayidx205=(($121+$or204)|0);
      var $122=HEAPU8[($arrayidx205)];
      var $conv206=(($122)&255);
      var $shr207=$conv206 >> 4;
      var $and208=$shr207 & 15;
      var $conv209=(($and208) & 255);
      $g200=$conv209;
      var $123=$shift;
      var $sub210=((4-$123)|0);
      var $shr211=3855 >> (($sub210)|0);
      var $and212=$shr211 & 255;
      var $conv213=(($and212) & 255);
      var $conv214=(($conv213)&255);
      var $124=$sp;
      var $125=HEAPU8[($124)];
      var $conv215=(($125)&255);
      var $and216=$conv215 & $conv214;
      var $conv217=(($and216) & 255);
      HEAP8[($124)]=$conv217;
      var $126=$g200;
      var $conv218=(($126)&255);
      var $127=$shift;
      var $shl219=$conv218 << $127;
      var $conv220=(($shl219) & 255);
      var $conv221=(($conv220)&255);
      var $128=$sp;
      var $129=HEAPU8[($128)];
      var $conv222=(($129)&255);
      var $or223=$conv222 | $conv221;
      var $conv224=(($or223) & 255);
      HEAP8[($128)]=$conv224;
      __label__ = 42; break;
    case 42: 
      var $130=$shift;
      var $tobool226=(($130)|0)!=0;
      if ($tobool226) { __label__ = 44; break; } else { __label__ = 43; break; }
    case 43: 
      $shift=4;
      var $131=$sp;
      var $incdec_ptr228=(($131+1)|0);
      $sp=$incdec_ptr228;
      __label__ = 45; break;
    case 44: 
      var $132=$shift;
      var $sub230=(($132-4)|0);
      $shift=$sub230;
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      var $133=$i;
      var $inc233=(($133+1)|0);
      $i=$inc233;
      __label__ = 38; break;
    case 47: 
      __label__ = 58; break;
    case 48: 
      var $134=$row_addr;
      $sp=$134;
      $shift=4;
      $i=0;
      __label__ = 49; break;
    case 49: 
      var $135=$i;
      var $136=$row_width;
      var $cmp237=(($135)>>>0) < (($136)>>>0);
      if ($cmp237) { __label__ = 50; break; } else { __label__ = 57; break; }
    case 50: 
      var $137=$sp;
      var $138=HEAPU8[($137)];
      var $conv240=(($138)&255);
      var $139=$shift;
      var $shr241=$conv240 >> (($139)|0);
      var $and242=$shr241 & 15;
      var $conv243=(($and242) & 65535);
      var $conv244=(($conv243)&65535);
      var $140=$png_ptr_addr;
      var $trans_color245=(($140+400)|0);
      var $gray246=(($trans_color245+8)|0);
      var $141=HEAPU16[(($gray246)>>1)];
      var $conv247=(($141)&65535);
      var $cmp248=(($conv244)|0)==(($conv247)|0);
      if ($cmp248) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $142=$shift;
      var $sub251=((4-$142)|0);
      var $shr252=3855 >> (($sub251)|0);
      var $and253=$shr252 & 255;
      var $conv254=(($and253) & 255);
      var $conv255=(($conv254)&255);
      var $143=$sp;
      var $144=HEAPU8[($143)];
      var $conv256=(($144)&255);
      var $and257=$conv256 & $conv255;
      var $conv258=(($and257) & 255);
      HEAP8[($143)]=$conv258;
      var $145=$png_ptr_addr;
      var $background259=(($145+316)|0);
      var $gray260=(($background259+8)|0);
      var $146=HEAPU16[(($gray260)>>1)];
      var $conv261=(($146)&65535);
      var $147=$shift;
      var $shl262=$conv261 << $147;
      var $conv263=(($shl262) & 255);
      var $conv264=(($conv263)&255);
      var $148=$sp;
      var $149=HEAPU8[($148)];
      var $conv265=(($149)&255);
      var $or266=$conv265 | $conv264;
      var $conv267=(($or266) & 255);
      HEAP8[($148)]=$conv267;
      __label__ = 52; break;
    case 52: 
      var $150=$shift;
      var $tobool269=(($150)|0)!=0;
      if ($tobool269) { __label__ = 54; break; } else { __label__ = 53; break; }
    case 53: 
      $shift=4;
      var $151=$sp;
      var $incdec_ptr271=(($151+1)|0);
      $sp=$incdec_ptr271;
      __label__ = 55; break;
    case 54: 
      var $152=$shift;
      var $sub273=(($152-4)|0);
      $shift=$sub273;
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      var $153=$i;
      var $inc276=(($153+1)|0);
      $i=$inc276;
      __label__ = 49; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 94; break;
    case 59: 
      var $154=$gamma_table;
      var $cmp280=(($154)|0)!=0;
      if ($cmp280) { __label__ = 60; break; } else { __label__ = 68; break; }
    case 60: 
      var $155=$row_addr;
      $sp=$155;
      $i=0;
      __label__ = 61; break;
    case 61: 
      var $156=$i;
      var $157=$row_width;
      var $cmp284=(($156)>>>0) < (($157)>>>0);
      if ($cmp284) { __label__ = 62; break; } else { __label__ = 67; break; }
    case 62: 
      var $158=$sp;
      var $159=HEAPU8[($158)];
      var $conv287=(($159)&255);
      var $160=$png_ptr_addr;
      var $trans_color288=(($160+400)|0);
      var $gray289=(($trans_color288+8)|0);
      var $161=HEAPU16[(($gray289)>>1)];
      var $conv290=(($161)&65535);
      var $cmp291=(($conv287)|0)==(($conv290)|0);
      if ($cmp291) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $162=$png_ptr_addr;
      var $background294=(($162+316)|0);
      var $gray295=(($background294+8)|0);
      var $163=HEAP16[(($gray295)>>1)];
      var $conv296=(($163) & 255);
      var $164=$sp;
      HEAP8[($164)]=$conv296;
      __label__ = 65; break;
    case 64: 
      var $165=$sp;
      var $166=HEAPU8[($165)];
      var $idxprom=(($166)&255);
      var $167=$gamma_table;
      var $arrayidx298=(($167+$idxprom)|0);
      var $168=HEAP8[($arrayidx298)];
      var $169=$sp;
      HEAP8[($169)]=$168;
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $170=$i;
      var $inc301=(($170+1)|0);
      $i=$inc301;
      var $171=$sp;
      var $incdec_ptr302=(($171+1)|0);
      $sp=$incdec_ptr302;
      __label__ = 61; break;
    case 67: 
      __label__ = 75; break;
    case 68: 
      var $172=$row_addr;
      $sp=$172;
      $i=0;
      __label__ = 69; break;
    case 69: 
      var $173=$i;
      var $174=$row_width;
      var $cmp306=(($173)>>>0) < (($174)>>>0);
      if ($cmp306) { __label__ = 70; break; } else { __label__ = 74; break; }
    case 70: 
      var $175=$sp;
      var $176=HEAPU8[($175)];
      var $conv309=(($176)&255);
      var $177=$png_ptr_addr;
      var $trans_color310=(($177+400)|0);
      var $gray311=(($trans_color310+8)|0);
      var $178=HEAPU16[(($gray311)>>1)];
      var $conv312=(($178)&65535);
      var $cmp313=(($conv309)|0)==(($conv312)|0);
      if ($cmp313) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $179=$png_ptr_addr;
      var $background316=(($179+316)|0);
      var $gray317=(($background316+8)|0);
      var $180=HEAP16[(($gray317)>>1)];
      var $conv318=(($180) & 255);
      var $181=$sp;
      HEAP8[($181)]=$conv318;
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      var $182=$i;
      var $inc321=(($182+1)|0);
      $i=$inc321;
      var $183=$sp;
      var $incdec_ptr322=(($183+1)|0);
      $sp=$incdec_ptr322;
      __label__ = 69; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      __label__ = 94; break;
    case 76: 
      var $184=$gamma_16;
      var $cmp326=(($184)|0)!=0;
      if ($cmp326) { __label__ = 77; break; } else { __label__ = 85; break; }
    case 77: 
      var $185=$row_addr;
      $sp=$185;
      $i=0;
      __label__ = 78; break;
    case 78: 
      var $186=$i;
      var $187=$row_width;
      var $cmp330=(($186)>>>0) < (($187)>>>0);
      if ($cmp330) { __label__ = 79; break; } else { __label__ = 84; break; }
    case 79: 
      var $188=$sp;
      var $189=HEAPU8[($188)];
      var $conv333=(($189)&255);
      var $shl334=$conv333 << 8;
      var $190=$sp;
      var $add_ptr=(($190+1)|0);
      var $191=HEAPU8[($add_ptr)];
      var $conv335=(($191)&255);
      var $add=(($shl334+$conv335)|0);
      var $conv336=(($add) & 65535);
      $v=$conv336;
      var $192=$v;
      var $conv337=(($192)&65535);
      var $193=$png_ptr_addr;
      var $trans_color338=(($193+400)|0);
      var $gray339=(($trans_color338+8)|0);
      var $194=HEAPU16[(($gray339)>>1)];
      var $conv340=(($194)&65535);
      var $cmp341=(($conv337)|0)==(($conv340)|0);
      if ($cmp341) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $195=$png_ptr_addr;
      var $background344=(($195+316)|0);
      var $gray345=(($background344+8)|0);
      var $196=HEAPU16[(($gray345)>>1)];
      var $conv346=(($196)&65535);
      var $shr347=$conv346 >> 8;
      var $and348=$shr347 & 255;
      var $conv349=(($and348) & 255);
      var $197=$sp;
      HEAP8[($197)]=$conv349;
      var $198=$png_ptr_addr;
      var $background350=(($198+316)|0);
      var $gray351=(($background350+8)|0);
      var $199=HEAPU16[(($gray351)>>1)];
      var $conv352=(($199)&65535);
      var $and353=$conv352 & 255;
      var $conv354=(($and353) & 255);
      var $200=$sp;
      var $add_ptr355=(($200+1)|0);
      HEAP8[($add_ptr355)]=$conv354;
      __label__ = 82; break;
    case 81: 
      var $201=$sp;
      var $202=HEAPU8[($201)];
      var $idxprom357=(($202)&255);
      var $203=$sp;
      var $add_ptr358=(($203+1)|0);
      var $204=HEAPU8[($add_ptr358)];
      var $conv359=(($204)&255);
      var $205=$gamma_shift;
      var $shr360=$conv359 >> (($205)|0);
      var $206=$gamma_16;
      var $arrayidx361=(($206+($shr360<<2))|0);
      var $207=HEAP32[(($arrayidx361)>>2)];
      var $arrayidx362=(($207+($idxprom357<<1))|0);
      var $208=HEAP16[(($arrayidx362)>>1)];
      $v=$208;
      var $209=$v;
      var $conv363=(($209)&65535);
      var $shr364=$conv363 >> 8;
      var $and365=$shr364 & 255;
      var $conv366=(($and365) & 255);
      var $210=$sp;
      HEAP8[($210)]=$conv366;
      var $211=$v;
      var $conv367=(($211)&65535);
      var $and368=$conv367 & 255;
      var $conv369=(($and368) & 255);
      var $212=$sp;
      var $add_ptr370=(($212+1)|0);
      HEAP8[($add_ptr370)]=$conv369;
      __label__ = 82; break;
    case 82: 
      __label__ = 83; break;
    case 83: 
      var $213=$i;
      var $inc373=(($213+1)|0);
      $i=$inc373;
      var $214=$sp;
      var $add_ptr374=(($214+2)|0);
      $sp=$add_ptr374;
      __label__ = 78; break;
    case 84: 
      __label__ = 92; break;
    case 85: 
      var $215=$row_addr;
      $sp=$215;
      $i=0;
      __label__ = 86; break;
    case 86: 
      var $216=$i;
      var $217=$row_width;
      var $cmp378=(($216)>>>0) < (($217)>>>0);
      if ($cmp378) { __label__ = 87; break; } else { __label__ = 91; break; }
    case 87: 
      var $218=$sp;
      var $219=HEAPU8[($218)];
      var $conv382=(($219)&255);
      var $shl383=$conv382 << 8;
      var $220=$sp;
      var $add_ptr384=(($220+1)|0);
      var $221=HEAPU8[($add_ptr384)];
      var $conv385=(($221)&255);
      var $add386=(($shl383+$conv385)|0);
      var $conv387=(($add386) & 65535);
      $v381=$conv387;
      var $222=$v381;
      var $conv388=(($222)&65535);
      var $223=$png_ptr_addr;
      var $trans_color389=(($223+400)|0);
      var $gray390=(($trans_color389+8)|0);
      var $224=HEAPU16[(($gray390)>>1)];
      var $conv391=(($224)&65535);
      var $cmp392=(($conv388)|0)==(($conv391)|0);
      if ($cmp392) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      var $225=$png_ptr_addr;
      var $background395=(($225+316)|0);
      var $gray396=(($background395+8)|0);
      var $226=HEAPU16[(($gray396)>>1)];
      var $conv397=(($226)&65535);
      var $shr398=$conv397 >> 8;
      var $and399=$shr398 & 255;
      var $conv400=(($and399) & 255);
      var $227=$sp;
      HEAP8[($227)]=$conv400;
      var $228=$png_ptr_addr;
      var $background401=(($228+316)|0);
      var $gray402=(($background401+8)|0);
      var $229=HEAPU16[(($gray402)>>1)];
      var $conv403=(($229)&65535);
      var $and404=$conv403 & 255;
      var $conv405=(($and404) & 255);
      var $230=$sp;
      var $add_ptr406=(($230+1)|0);
      HEAP8[($add_ptr406)]=$conv405;
      __label__ = 89; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      var $231=$i;
      var $inc409=(($231+1)|0);
      $i=$inc409;
      var $232=$sp;
      var $add_ptr410=(($232+2)|0);
      $sp=$add_ptr410;
      __label__ = 86; break;
    case 91: 
      __label__ = 92; break;
    case 92: 
      __label__ = 94; break;
    case 93: 
      __label__ = 94; break;
    case 94: 
      __label__ = 261; break;
    case 95: 
      var $233=$row_info_addr;
      var $bit_depth414=(($233+9)|0);
      var $234=HEAPU8[($bit_depth414)];
      var $conv415=(($234)&255);
      var $cmp416=(($conv415)|0)==8;
      if ($cmp416) { __label__ = 96; break; } else { __label__ = 117; break; }
    case 96: 
      var $235=$gamma_table;
      var $cmp419=(($235)|0)!=0;
      if ($cmp419) { __label__ = 97; break; } else { __label__ = 107; break; }
    case 97: 
      var $236=$row_addr;
      $sp=$236;
      $i=0;
      __label__ = 98; break;
    case 98: 
      var $237=$i;
      var $238=$row_width;
      var $cmp423=(($237)>>>0) < (($238)>>>0);
      if ($cmp423) { __label__ = 99; break; } else { __label__ = 106; break; }
    case 99: 
      var $239=$sp;
      var $240=HEAPU8[($239)];
      var $conv426=(($240)&255);
      var $241=$png_ptr_addr;
      var $trans_color427=(($241+400)|0);
      var $red=(($trans_color427+2)|0);
      var $242=HEAPU16[(($red)>>1)];
      var $conv428=(($242)&65535);
      var $cmp429=(($conv426)|0)==(($conv428)|0);
      if ($cmp429) { __label__ = 100; break; } else { __label__ = 103; break; }
    case 100: 
      var $243=$sp;
      var $add_ptr431=(($243+1)|0);
      var $244=HEAPU8[($add_ptr431)];
      var $conv432=(($244)&255);
      var $245=$png_ptr_addr;
      var $trans_color433=(($245+400)|0);
      var $green=(($trans_color433+4)|0);
      var $246=HEAPU16[(($green)>>1)];
      var $conv434=(($246)&65535);
      var $cmp435=(($conv432)|0)==(($conv434)|0);
      if ($cmp435) { __label__ = 101; break; } else { __label__ = 103; break; }
    case 101: 
      var $247=$sp;
      var $add_ptr438=(($247+2)|0);
      var $248=HEAPU8[($add_ptr438)];
      var $conv439=(($248)&255);
      var $249=$png_ptr_addr;
      var $trans_color440=(($249+400)|0);
      var $blue=(($trans_color440+6)|0);
      var $250=HEAPU16[(($blue)>>1)];
      var $conv441=(($250)&65535);
      var $cmp442=(($conv439)|0)==(($conv441)|0);
      if ($cmp442) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: 
      var $251=$png_ptr_addr;
      var $background445=(($251+316)|0);
      var $red446=(($background445+2)|0);
      var $252=HEAP16[(($red446)>>1)];
      var $conv447=(($252) & 255);
      var $253=$sp;
      HEAP8[($253)]=$conv447;
      var $254=$png_ptr_addr;
      var $background448=(($254+316)|0);
      var $green449=(($background448+4)|0);
      var $255=HEAP16[(($green449)>>1)];
      var $conv450=(($255) & 255);
      var $256=$sp;
      var $add_ptr451=(($256+1)|0);
      HEAP8[($add_ptr451)]=$conv450;
      var $257=$png_ptr_addr;
      var $background452=(($257+316)|0);
      var $blue453=(($background452+6)|0);
      var $258=HEAP16[(($blue453)>>1)];
      var $conv454=(($258) & 255);
      var $259=$sp;
      var $add_ptr455=(($259+2)|0);
      HEAP8[($add_ptr455)]=$conv454;
      __label__ = 104; break;
    case 103: 
      var $260=$sp;
      var $261=HEAPU8[($260)];
      var $idxprom457=(($261)&255);
      var $262=$gamma_table;
      var $arrayidx458=(($262+$idxprom457)|0);
      var $263=HEAP8[($arrayidx458)];
      var $264=$sp;
      HEAP8[($264)]=$263;
      var $265=$sp;
      var $add_ptr459=(($265+1)|0);
      var $266=HEAPU8[($add_ptr459)];
      var $idxprom460=(($266)&255);
      var $267=$gamma_table;
      var $arrayidx461=(($267+$idxprom460)|0);
      var $268=HEAP8[($arrayidx461)];
      var $269=$sp;
      var $add_ptr462=(($269+1)|0);
      HEAP8[($add_ptr462)]=$268;
      var $270=$sp;
      var $add_ptr463=(($270+2)|0);
      var $271=HEAPU8[($add_ptr463)];
      var $idxprom464=(($271)&255);
      var $272=$gamma_table;
      var $arrayidx465=(($272+$idxprom464)|0);
      var $273=HEAP8[($arrayidx465)];
      var $274=$sp;
      var $add_ptr466=(($274+2)|0);
      HEAP8[($add_ptr466)]=$273;
      __label__ = 104; break;
    case 104: 
      __label__ = 105; break;
    case 105: 
      var $275=$i;
      var $inc469=(($275+1)|0);
      $i=$inc469;
      var $276=$sp;
      var $add_ptr470=(($276+3)|0);
      $sp=$add_ptr470;
      __label__ = 98; break;
    case 106: 
      __label__ = 116; break;
    case 107: 
      var $277=$row_addr;
      $sp=$277;
      $i=0;
      __label__ = 108; break;
    case 108: 
      var $278=$i;
      var $279=$row_width;
      var $cmp474=(($278)>>>0) < (($279)>>>0);
      if ($cmp474) { __label__ = 109; break; } else { __label__ = 115; break; }
    case 109: 
      var $280=$sp;
      var $281=HEAPU8[($280)];
      var $conv477=(($281)&255);
      var $282=$png_ptr_addr;
      var $trans_color478=(($282+400)|0);
      var $red479=(($trans_color478+2)|0);
      var $283=HEAPU16[(($red479)>>1)];
      var $conv480=(($283)&65535);
      var $cmp481=(($conv477)|0)==(($conv480)|0);
      if ($cmp481) { __label__ = 110; break; } else { __label__ = 113; break; }
    case 110: 
      var $284=$sp;
      var $add_ptr484=(($284+1)|0);
      var $285=HEAPU8[($add_ptr484)];
      var $conv485=(($285)&255);
      var $286=$png_ptr_addr;
      var $trans_color486=(($286+400)|0);
      var $green487=(($trans_color486+4)|0);
      var $287=HEAPU16[(($green487)>>1)];
      var $conv488=(($287)&65535);
      var $cmp489=(($conv485)|0)==(($conv488)|0);
      if ($cmp489) { __label__ = 111; break; } else { __label__ = 113; break; }
    case 111: 
      var $288=$sp;
      var $add_ptr492=(($288+2)|0);
      var $289=HEAPU8[($add_ptr492)];
      var $conv493=(($289)&255);
      var $290=$png_ptr_addr;
      var $trans_color494=(($290+400)|0);
      var $blue495=(($trans_color494+6)|0);
      var $291=HEAPU16[(($blue495)>>1)];
      var $conv496=(($291)&65535);
      var $cmp497=(($conv493)|0)==(($conv496)|0);
      if ($cmp497) { __label__ = 112; break; } else { __label__ = 113; break; }
    case 112: 
      var $292=$png_ptr_addr;
      var $background500=(($292+316)|0);
      var $red501=(($background500+2)|0);
      var $293=HEAP16[(($red501)>>1)];
      var $conv502=(($293) & 255);
      var $294=$sp;
      HEAP8[($294)]=$conv502;
      var $295=$png_ptr_addr;
      var $background503=(($295+316)|0);
      var $green504=(($background503+4)|0);
      var $296=HEAP16[(($green504)>>1)];
      var $conv505=(($296) & 255);
      var $297=$sp;
      var $add_ptr506=(($297+1)|0);
      HEAP8[($add_ptr506)]=$conv505;
      var $298=$png_ptr_addr;
      var $background507=(($298+316)|0);
      var $blue508=(($background507+6)|0);
      var $299=HEAP16[(($blue508)>>1)];
      var $conv509=(($299) & 255);
      var $300=$sp;
      var $add_ptr510=(($300+2)|0);
      HEAP8[($add_ptr510)]=$conv509;
      __label__ = 113; break;
    case 113: 
      __label__ = 114; break;
    case 114: 
      var $301=$i;
      var $inc513=(($301+1)|0);
      $i=$inc513;
      var $302=$sp;
      var $add_ptr514=(($302+3)|0);
      $sp=$add_ptr514;
      __label__ = 108; break;
    case 115: 
      __label__ = 116; break;
    case 116: 
      __label__ = 138; break;
    case 117: 
      var $303=$gamma_16;
      var $cmp518=(($303)|0)!=0;
      if ($cmp518) { __label__ = 118; break; } else { __label__ = 128; break; }
    case 118: 
      var $304=$row_addr;
      $sp=$304;
      $i=0;
      __label__ = 119; break;
    case 119: 
      var $305=$i;
      var $306=$row_width;
      var $cmp522=(($305)>>>0) < (($306)>>>0);
      if ($cmp522) { __label__ = 120; break; } else { __label__ = 127; break; }
    case 120: 
      var $307=$sp;
      var $308=HEAPU8[($307)];
      var $conv525=(($308)&255);
      var $shl526=$conv525 << 8;
      var $309=$sp;
      var $add_ptr527=(($309+1)|0);
      var $310=HEAPU8[($add_ptr527)];
      var $conv528=(($310)&255);
      var $add529=(($shl526+$conv528)|0);
      var $conv530=(($add529) & 65535);
      $r=$conv530;
      var $311=$sp;
      var $add_ptr532=(($311+2)|0);
      var $312=HEAPU8[($add_ptr532)];
      var $conv533=(($312)&255);
      var $shl534=$conv533 << 8;
      var $313=$sp;
      var $add_ptr535=(($313+3)|0);
      var $314=HEAPU8[($add_ptr535)];
      var $conv536=(($314)&255);
      var $add537=(($shl534+$conv536)|0);
      var $conv538=(($add537) & 65535);
      $g531=$conv538;
      var $315=$sp;
      var $add_ptr539=(($315+4)|0);
      var $316=HEAPU8[($add_ptr539)];
      var $conv540=(($316)&255);
      var $shl541=$conv540 << 8;
      var $317=$sp;
      var $add_ptr542=(($317+5)|0);
      var $318=HEAPU8[($add_ptr542)];
      var $conv543=(($318)&255);
      var $add544=(($shl541+$conv543)|0);
      var $conv545=(($add544) & 65535);
      $b=$conv545;
      var $319=$r;
      var $conv546=(($319)&65535);
      var $320=$png_ptr_addr;
      var $trans_color547=(($320+400)|0);
      var $red548=(($trans_color547+2)|0);
      var $321=HEAPU16[(($red548)>>1)];
      var $conv549=(($321)&65535);
      var $cmp550=(($conv546)|0)==(($conv549)|0);
      if ($cmp550) { __label__ = 121; break; } else { __label__ = 124; break; }
    case 121: 
      var $322=$g531;
      var $conv553=(($322)&65535);
      var $323=$png_ptr_addr;
      var $trans_color554=(($323+400)|0);
      var $green555=(($trans_color554+4)|0);
      var $324=HEAPU16[(($green555)>>1)];
      var $conv556=(($324)&65535);
      var $cmp557=(($conv553)|0)==(($conv556)|0);
      if ($cmp557) { __label__ = 122; break; } else { __label__ = 124; break; }
    case 122: 
      var $325=$b;
      var $conv560=(($325)&65535);
      var $326=$png_ptr_addr;
      var $trans_color561=(($326+400)|0);
      var $blue562=(($trans_color561+6)|0);
      var $327=HEAPU16[(($blue562)>>1)];
      var $conv563=(($327)&65535);
      var $cmp564=(($conv560)|0)==(($conv563)|0);
      if ($cmp564) { __label__ = 123; break; } else { __label__ = 124; break; }
    case 123: 
      var $328=$png_ptr_addr;
      var $background567=(($328+316)|0);
      var $red568=(($background567+2)|0);
      var $329=HEAPU16[(($red568)>>1)];
      var $conv569=(($329)&65535);
      var $shr570=$conv569 >> 8;
      var $and571=$shr570 & 255;
      var $conv572=(($and571) & 255);
      var $330=$sp;
      HEAP8[($330)]=$conv572;
      var $331=$png_ptr_addr;
      var $background573=(($331+316)|0);
      var $red574=(($background573+2)|0);
      var $332=HEAPU16[(($red574)>>1)];
      var $conv575=(($332)&65535);
      var $and576=$conv575 & 255;
      var $conv577=(($and576) & 255);
      var $333=$sp;
      var $add_ptr578=(($333+1)|0);
      HEAP8[($add_ptr578)]=$conv577;
      var $334=$png_ptr_addr;
      var $background579=(($334+316)|0);
      var $green580=(($background579+4)|0);
      var $335=HEAPU16[(($green580)>>1)];
      var $conv581=(($335)&65535);
      var $shr582=$conv581 >> 8;
      var $and583=$shr582 & 255;
      var $conv584=(($and583) & 255);
      var $336=$sp;
      var $add_ptr585=(($336+2)|0);
      HEAP8[($add_ptr585)]=$conv584;
      var $337=$png_ptr_addr;
      var $background586=(($337+316)|0);
      var $green587=(($background586+4)|0);
      var $338=HEAPU16[(($green587)>>1)];
      var $conv588=(($338)&65535);
      var $and589=$conv588 & 255;
      var $conv590=(($and589) & 255);
      var $339=$sp;
      var $add_ptr591=(($339+3)|0);
      HEAP8[($add_ptr591)]=$conv590;
      var $340=$png_ptr_addr;
      var $background592=(($340+316)|0);
      var $blue593=(($background592+6)|0);
      var $341=HEAPU16[(($blue593)>>1)];
      var $conv594=(($341)&65535);
      var $shr595=$conv594 >> 8;
      var $and596=$shr595 & 255;
      var $conv597=(($and596) & 255);
      var $342=$sp;
      var $add_ptr598=(($342+4)|0);
      HEAP8[($add_ptr598)]=$conv597;
      var $343=$png_ptr_addr;
      var $background599=(($343+316)|0);
      var $blue600=(($background599+6)|0);
      var $344=HEAPU16[(($blue600)>>1)];
      var $conv601=(($344)&65535);
      var $and602=$conv601 & 255;
      var $conv603=(($and602) & 255);
      var $345=$sp;
      var $add_ptr604=(($345+5)|0);
      HEAP8[($add_ptr604)]=$conv603;
      __label__ = 125; break;
    case 124: 
      var $346=$sp;
      var $347=HEAPU8[($346)];
      var $idxprom607=(($347)&255);
      var $348=$sp;
      var $add_ptr608=(($348+1)|0);
      var $349=HEAPU8[($add_ptr608)];
      var $conv609=(($349)&255);
      var $350=$gamma_shift;
      var $shr610=$conv609 >> (($350)|0);
      var $351=$gamma_16;
      var $arrayidx611=(($351+($shr610<<2))|0);
      var $352=HEAP32[(($arrayidx611)>>2)];
      var $arrayidx612=(($352+($idxprom607<<1))|0);
      var $353=HEAP16[(($arrayidx612)>>1)];
      $v606=$353;
      var $354=$v606;
      var $conv613=(($354)&65535);
      var $shr614=$conv613 >> 8;
      var $and615=$shr614 & 255;
      var $conv616=(($and615) & 255);
      var $355=$sp;
      HEAP8[($355)]=$conv616;
      var $356=$v606;
      var $conv617=(($356)&65535);
      var $and618=$conv617 & 255;
      var $conv619=(($and618) & 255);
      var $357=$sp;
      var $add_ptr620=(($357+1)|0);
      HEAP8[($add_ptr620)]=$conv619;
      var $358=$sp;
      var $add_ptr621=(($358+2)|0);
      var $359=HEAPU8[($add_ptr621)];
      var $idxprom622=(($359)&255);
      var $360=$sp;
      var $add_ptr623=(($360+3)|0);
      var $361=HEAPU8[($add_ptr623)];
      var $conv624=(($361)&255);
      var $362=$gamma_shift;
      var $shr625=$conv624 >> (($362)|0);
      var $363=$gamma_16;
      var $arrayidx626=(($363+($shr625<<2))|0);
      var $364=HEAP32[(($arrayidx626)>>2)];
      var $arrayidx627=(($364+($idxprom622<<1))|0);
      var $365=HEAP16[(($arrayidx627)>>1)];
      $v606=$365;
      var $366=$v606;
      var $conv628=(($366)&65535);
      var $shr629=$conv628 >> 8;
      var $and630=$shr629 & 255;
      var $conv631=(($and630) & 255);
      var $367=$sp;
      var $add_ptr632=(($367+2)|0);
      HEAP8[($add_ptr632)]=$conv631;
      var $368=$v606;
      var $conv633=(($368)&65535);
      var $and634=$conv633 & 255;
      var $conv635=(($and634) & 255);
      var $369=$sp;
      var $add_ptr636=(($369+3)|0);
      HEAP8[($add_ptr636)]=$conv635;
      var $370=$sp;
      var $add_ptr637=(($370+4)|0);
      var $371=HEAPU8[($add_ptr637)];
      var $idxprom638=(($371)&255);
      var $372=$sp;
      var $add_ptr639=(($372+5)|0);
      var $373=HEAPU8[($add_ptr639)];
      var $conv640=(($373)&255);
      var $374=$gamma_shift;
      var $shr641=$conv640 >> (($374)|0);
      var $375=$gamma_16;
      var $arrayidx642=(($375+($shr641<<2))|0);
      var $376=HEAP32[(($arrayidx642)>>2)];
      var $arrayidx643=(($376+($idxprom638<<1))|0);
      var $377=HEAP16[(($arrayidx643)>>1)];
      $v606=$377;
      var $378=$v606;
      var $conv644=(($378)&65535);
      var $shr645=$conv644 >> 8;
      var $and646=$shr645 & 255;
      var $conv647=(($and646) & 255);
      var $379=$sp;
      var $add_ptr648=(($379+4)|0);
      HEAP8[($add_ptr648)]=$conv647;
      var $380=$v606;
      var $conv649=(($380)&65535);
      var $and650=$conv649 & 255;
      var $conv651=(($and650) & 255);
      var $381=$sp;
      var $add_ptr652=(($381+5)|0);
      HEAP8[($add_ptr652)]=$conv651;
      __label__ = 125; break;
    case 125: 
      __label__ = 126; break;
    case 126: 
      var $382=$i;
      var $inc655=(($382+1)|0);
      $i=$inc655;
      var $383=$sp;
      var $add_ptr656=(($383+6)|0);
      $sp=$add_ptr656;
      __label__ = 119; break;
    case 127: 
      __label__ = 137; break;
    case 128: 
      var $384=$row_addr;
      $sp=$384;
      $i=0;
      __label__ = 129; break;
    case 129: 
      var $385=$i;
      var $386=$row_width;
      var $cmp660=(($385)>>>0) < (($386)>>>0);
      if ($cmp660) { __label__ = 130; break; } else { __label__ = 136; break; }
    case 130: 
      var $387=$sp;
      var $388=HEAPU8[($387)];
      var $conv664=(($388)&255);
      var $shl665=$conv664 << 8;
      var $389=$sp;
      var $add_ptr666=(($389+1)|0);
      var $390=HEAPU8[($add_ptr666)];
      var $conv667=(($390)&255);
      var $add668=(($shl665+$conv667)|0);
      var $conv669=(($add668) & 65535);
      $r663=$conv669;
      var $391=$sp;
      var $add_ptr671=(($391+2)|0);
      var $392=HEAPU8[($add_ptr671)];
      var $conv672=(($392)&255);
      var $shl673=$conv672 << 8;
      var $393=$sp;
      var $add_ptr674=(($393+3)|0);
      var $394=HEAPU8[($add_ptr674)];
      var $conv675=(($394)&255);
      var $add676=(($shl673+$conv675)|0);
      var $conv677=(($add676) & 65535);
      $g670=$conv677;
      var $395=$sp;
      var $add_ptr679=(($395+4)|0);
      var $396=HEAPU8[($add_ptr679)];
      var $conv680=(($396)&255);
      var $shl681=$conv680 << 8;
      var $397=$sp;
      var $add_ptr682=(($397+5)|0);
      var $398=HEAPU8[($add_ptr682)];
      var $conv683=(($398)&255);
      var $add684=(($shl681+$conv683)|0);
      var $conv685=(($add684) & 65535);
      $b678=$conv685;
      var $399=$r663;
      var $conv686=(($399)&65535);
      var $400=$png_ptr_addr;
      var $trans_color687=(($400+400)|0);
      var $red688=(($trans_color687+2)|0);
      var $401=HEAPU16[(($red688)>>1)];
      var $conv689=(($401)&65535);
      var $cmp690=(($conv686)|0)==(($conv689)|0);
      if ($cmp690) { __label__ = 131; break; } else { __label__ = 134; break; }
    case 131: 
      var $402=$g670;
      var $conv693=(($402)&65535);
      var $403=$png_ptr_addr;
      var $trans_color694=(($403+400)|0);
      var $green695=(($trans_color694+4)|0);
      var $404=HEAPU16[(($green695)>>1)];
      var $conv696=(($404)&65535);
      var $cmp697=(($conv693)|0)==(($conv696)|0);
      if ($cmp697) { __label__ = 132; break; } else { __label__ = 134; break; }
    case 132: 
      var $405=$b678;
      var $conv700=(($405)&65535);
      var $406=$png_ptr_addr;
      var $trans_color701=(($406+400)|0);
      var $blue702=(($trans_color701+6)|0);
      var $407=HEAPU16[(($blue702)>>1)];
      var $conv703=(($407)&65535);
      var $cmp704=(($conv700)|0)==(($conv703)|0);
      if ($cmp704) { __label__ = 133; break; } else { __label__ = 134; break; }
    case 133: 
      var $408=$png_ptr_addr;
      var $background707=(($408+316)|0);
      var $red708=(($background707+2)|0);
      var $409=HEAPU16[(($red708)>>1)];
      var $conv709=(($409)&65535);
      var $shr710=$conv709 >> 8;
      var $and711=$shr710 & 255;
      var $conv712=(($and711) & 255);
      var $410=$sp;
      HEAP8[($410)]=$conv712;
      var $411=$png_ptr_addr;
      var $background713=(($411+316)|0);
      var $red714=(($background713+2)|0);
      var $412=HEAPU16[(($red714)>>1)];
      var $conv715=(($412)&65535);
      var $and716=$conv715 & 255;
      var $conv717=(($and716) & 255);
      var $413=$sp;
      var $add_ptr718=(($413+1)|0);
      HEAP8[($add_ptr718)]=$conv717;
      var $414=$png_ptr_addr;
      var $background719=(($414+316)|0);
      var $green720=(($background719+4)|0);
      var $415=HEAPU16[(($green720)>>1)];
      var $conv721=(($415)&65535);
      var $shr722=$conv721 >> 8;
      var $and723=$shr722 & 255;
      var $conv724=(($and723) & 255);
      var $416=$sp;
      var $add_ptr725=(($416+2)|0);
      HEAP8[($add_ptr725)]=$conv724;
      var $417=$png_ptr_addr;
      var $background726=(($417+316)|0);
      var $green727=(($background726+4)|0);
      var $418=HEAPU16[(($green727)>>1)];
      var $conv728=(($418)&65535);
      var $and729=$conv728 & 255;
      var $conv730=(($and729) & 255);
      var $419=$sp;
      var $add_ptr731=(($419+3)|0);
      HEAP8[($add_ptr731)]=$conv730;
      var $420=$png_ptr_addr;
      var $background732=(($420+316)|0);
      var $blue733=(($background732+6)|0);
      var $421=HEAPU16[(($blue733)>>1)];
      var $conv734=(($421)&65535);
      var $shr735=$conv734 >> 8;
      var $and736=$shr735 & 255;
      var $conv737=(($and736) & 255);
      var $422=$sp;
      var $add_ptr738=(($422+4)|0);
      HEAP8[($add_ptr738)]=$conv737;
      var $423=$png_ptr_addr;
      var $background739=(($423+316)|0);
      var $blue740=(($background739+6)|0);
      var $424=HEAPU16[(($blue740)>>1)];
      var $conv741=(($424)&65535);
      var $and742=$conv741 & 255;
      var $conv743=(($and742) & 255);
      var $425=$sp;
      var $add_ptr744=(($425+5)|0);
      HEAP8[($add_ptr744)]=$conv743;
      __label__ = 134; break;
    case 134: 
      __label__ = 135; break;
    case 135: 
      var $426=$i;
      var $inc747=(($426+1)|0);
      $i=$inc747;
      var $427=$sp;
      var $add_ptr748=(($427+6)|0);
      $sp=$add_ptr748;
      __label__ = 129; break;
    case 136: 
      __label__ = 137; break;
    case 137: 
      __label__ = 138; break;
    case 138: 
      __label__ = 261; break;
    case 139: 
      var $428=$row_info_addr;
      var $bit_depth753=(($428+9)|0);
      var $429=HEAPU8[($bit_depth753)];
      var $conv754=(($429)&255);
      var $cmp755=(($conv754)|0)==8;
      if ($cmp755) { __label__ = 140; break; } else { __label__ = 167; break; }
    case 140: 
      var $430=$gamma_to_1;
      var $cmp758=(($430)|0)!=0;
      if ($cmp758) { __label__ = 141; break; } else { __label__ = 156; break; }
    case 141: 
      var $431=$gamma_from_1;
      var $cmp761=(($431)|0)!=0;
      if ($cmp761) { __label__ = 142; break; } else { __label__ = 156; break; }
    case 142: 
      var $432=$gamma_table;
      var $cmp764=(($432)|0)!=0;
      if ($cmp764) { __label__ = 143; break; } else { __label__ = 156; break; }
    case 143: 
      var $433=$row_addr;
      $sp=$433;
      $i=0;
      __label__ = 144; break;
    case 144: 
      var $434=$i;
      var $435=$row_width;
      var $cmp768=(($434)>>>0) < (($435)>>>0);
      if ($cmp768) { __label__ = 145; break; } else { __label__ = 155; break; }
    case 145: 
      var $436=$sp;
      var $add_ptr771=(($436+1)|0);
      var $437=HEAPU8[($add_ptr771)];
      var $conv772=(($437)&255);
      $a=$conv772;
      var $438=$a;
      var $conv773=(($438)&65535);
      var $cmp774=(($conv773)|0)==255;
      if ($cmp774) { __label__ = 146; break; } else { __label__ = 147; break; }
    case 146: 
      var $439=$sp;
      var $440=HEAPU8[($439)];
      var $idxprom777=(($440)&255);
      var $441=$gamma_table;
      var $arrayidx778=(($441+$idxprom777)|0);
      var $442=HEAP8[($arrayidx778)];
      var $443=$sp;
      HEAP8[($443)]=$442;
      __label__ = 153; break;
    case 147: 
      var $444=$a;
      var $conv780=(($444)&65535);
      var $cmp781=(($conv780)|0)==0;
      if ($cmp781) { __label__ = 148; break; } else { __label__ = 149; break; }
    case 148: 
      var $445=$png_ptr_addr;
      var $background784=(($445+316)|0);
      var $gray785=(($background784+8)|0);
      var $446=HEAP16[(($gray785)>>1)];
      var $conv786=(($446) & 255);
      var $447=$sp;
      HEAP8[($447)]=$conv786;
      __label__ = 152; break;
    case 149: 
      var $448=$sp;
      var $449=HEAPU8[($448)];
      var $idxprom789=(($449)&255);
      var $450=$gamma_to_1;
      var $arrayidx790=(($450+$idxprom789)|0);
      var $451=HEAP8[($arrayidx790)];
      $v788=$451;
      var $452=$v788;
      var $conv791=(($452)&255);
      var $conv792=(($conv791)&65535);
      var $453=$a;
      var $conv793=(($453)&65535);
      var $mul=(($conv792*$conv793)|0);
      var $454=$png_ptr_addr;
      var $background_1=(($454+326)|0);
      var $gray794=(($background_1+8)|0);
      var $455=HEAPU16[(($gray794)>>1)];
      var $conv795=(($455)&65535);
      var $456=$a;
      var $conv796=(($456)&65535);
      var $sub797=((255-$conv796)|0);
      var $conv798=(($sub797) & 65535);
      var $conv799=(($conv798)&65535);
      var $mul800=(($conv795*$conv799)|0);
      var $add801=(($mul+$mul800)|0);
      var $add802=(($add801+128)|0);
      var $conv803=(($add802) & 65535);
      $temp=$conv803;
      var $457=$temp;
      var $conv804=(($457)&65535);
      var $458=$temp;
      var $conv805=(($458)&65535);
      var $shr806=$conv805 >> 8;
      var $add807=(($conv804+$shr806)|0);
      var $shr808=$add807 >> 8;
      var $conv809=(($shr808) & 255);
      $w=$conv809;
      var $459=$optimize;
      var $tobool810=(($459)|0)!=0;
      if ($tobool810) { __label__ = 151; break; } else { __label__ = 150; break; }
    case 150: 
      var $460=$w;
      var $idxprom812=(($460)&255);
      var $461=$gamma_from_1;
      var $arrayidx813=(($461+$idxprom812)|0);
      var $462=HEAP8[($arrayidx813)];
      $w=$462;
      __label__ = 151; break;
    case 151: 
      var $463=$w;
      var $464=$sp;
      HEAP8[($464)]=$463;
      __label__ = 152; break;
    case 152: 
      __label__ = 153; break;
    case 153: 
      __label__ = 154; break;
    case 154: 
      var $465=$i;
      var $inc818=(($465+1)|0);
      $i=$inc818;
      var $466=$sp;
      var $add_ptr819=(($466+2)|0);
      $sp=$add_ptr819;
      __label__ = 144; break;
    case 155: 
      __label__ = 166; break;
    case 156: 
      var $467=$row_addr;
      $sp=$467;
      $i=0;
      __label__ = 157; break;
    case 157: 
      var $468=$i;
      var $469=$row_width;
      var $cmp823=(($468)>>>0) < (($469)>>>0);
      if ($cmp823) { __label__ = 158; break; } else { __label__ = 165; break; }
    case 158: 
      var $470=$sp;
      var $add_ptr827=(($470+1)|0);
      var $471=HEAP8[($add_ptr827)];
      $a826=$471;
      var $472=$a826;
      var $conv828=(($472)&255);
      var $cmp829=(($conv828)|0)==0;
      if ($cmp829) { __label__ = 159; break; } else { __label__ = 160; break; }
    case 159: 
      var $473=$png_ptr_addr;
      var $background832=(($473+316)|0);
      var $gray833=(($background832+8)|0);
      var $474=HEAP16[(($gray833)>>1)];
      var $conv834=(($474) & 255);
      var $475=$sp;
      HEAP8[($475)]=$conv834;
      __label__ = 163; break;
    case 160: 
      var $476=$a826;
      var $conv836=(($476)&255);
      var $cmp837=(($conv836)|0) < 255;
      if ($cmp837) { __label__ = 161; break; } else { __label__ = 162; break; }
    case 161: 
      var $477=$sp;
      var $478=HEAPU8[($477)];
      var $conv841=(($478)&255);
      var $conv842=(($conv841)&65535);
      var $479=$a826;
      var $conv843=(($479)&255);
      var $conv844=(($conv843)&65535);
      var $mul845=(($conv842*$conv844)|0);
      var $480=$png_ptr_addr;
      var $background_1846=(($480+326)|0);
      var $gray847=(($background_1846+8)|0);
      var $481=HEAPU16[(($gray847)>>1)];
      var $conv848=(($481)&65535);
      var $482=$a826;
      var $conv849=(($482)&255);
      var $conv850=(($conv849)&65535);
      var $sub851=((255-$conv850)|0);
      var $conv852=(($sub851) & 65535);
      var $conv853=(($conv852)&65535);
      var $mul854=(($conv848*$conv853)|0);
      var $add855=(($mul845+$mul854)|0);
      var $add856=(($add855+128)|0);
      var $conv857=(($add856) & 65535);
      $temp840=$conv857;
      var $483=$temp840;
      var $conv858=(($483)&65535);
      var $484=$temp840;
      var $conv859=(($484)&65535);
      var $shr860=$conv859 >> 8;
      var $add861=(($conv858+$shr860)|0);
      var $shr862=$add861 >> 8;
      var $conv863=(($shr862) & 255);
      var $485=$sp;
      HEAP8[($485)]=$conv863;
      __label__ = 162; break;
    case 162: 
      __label__ = 163; break;
    case 163: 
      __label__ = 164; break;
    case 164: 
      var $486=$i;
      var $inc867=(($486+1)|0);
      $i=$inc867;
      var $487=$sp;
      var $add_ptr868=(($487+2)|0);
      $sp=$add_ptr868;
      __label__ = 157; break;
    case 165: 
      __label__ = 166; break;
    case 166: 
      __label__ = 195; break;
    case 167: 
      var $488=$gamma_16;
      var $cmp872=(($488)|0)!=0;
      if ($cmp872) { __label__ = 168; break; } else { __label__ = 184; break; }
    case 168: 
      var $489=$gamma_16_from_1;
      var $cmp875=(($489)|0)!=0;
      if ($cmp875) { __label__ = 169; break; } else { __label__ = 184; break; }
    case 169: 
      var $490=$gamma_16_to_1;
      var $cmp878=(($490)|0)!=0;
      if ($cmp878) { __label__ = 170; break; } else { __label__ = 184; break; }
    case 170: 
      var $491=$row_addr;
      $sp=$491;
      $i=0;
      __label__ = 171; break;
    case 171: 
      var $492=$i;
      var $493=$row_width;
      var $cmp882=(($492)>>>0) < (($493)>>>0);
      if ($cmp882) { __label__ = 172; break; } else { __label__ = 183; break; }
    case 172: 
      var $494=$sp;
      var $add_ptr886=(($494+2)|0);
      var $495=HEAPU8[($add_ptr886)];
      var $conv887=(($495)&255);
      var $shl888=$conv887 << 8;
      var $496=$sp;
      var $add_ptr889=(($496+3)|0);
      var $497=HEAPU8[($add_ptr889)];
      var $conv890=(($497)&255);
      var $add891=(($shl888+$conv890)|0);
      var $conv892=(($add891) & 65535);
      $a885=$conv892;
      var $498=$a885;
      var $conv893=(($498)&65535);
      var $cmp894=(($conv893)|0)==65535;
      if ($cmp894) { __label__ = 173; break; } else { __label__ = 174; break; }
    case 173: 
      var $499=$sp;
      var $500=HEAPU8[($499)];
      var $idxprom898=(($500)&255);
      var $501=$sp;
      var $add_ptr899=(($501+1)|0);
      var $502=HEAPU8[($add_ptr899)];
      var $conv900=(($502)&255);
      var $503=$gamma_shift;
      var $shr901=$conv900 >> (($503)|0);
      var $504=$gamma_16;
      var $arrayidx902=(($504+($shr901<<2))|0);
      var $505=HEAP32[(($arrayidx902)>>2)];
      var $arrayidx903=(($505+($idxprom898<<1))|0);
      var $506=HEAP16[(($arrayidx903)>>1)];
      $v897=$506;
      var $507=$v897;
      var $conv904=(($507)&65535);
      var $shr905=$conv904 >> 8;
      var $and906=$shr905 & 255;
      var $conv907=(($and906) & 255);
      var $508=$sp;
      HEAP8[($508)]=$conv907;
      var $509=$v897;
      var $conv908=(($509)&65535);
      var $and909=$conv908 & 255;
      var $conv910=(($and909) & 255);
      var $510=$sp;
      var $add_ptr911=(($510+1)|0);
      HEAP8[($add_ptr911)]=$conv910;
      __label__ = 181; break;
    case 174: 
      var $511=$a885;
      var $conv913=(($511)&65535);
      var $cmp914=(($conv913)|0)==0;
      if ($cmp914) { __label__ = 175; break; } else { __label__ = 176; break; }
    case 175: 
      var $512=$png_ptr_addr;
      var $background917=(($512+316)|0);
      var $gray918=(($background917+8)|0);
      var $513=HEAPU16[(($gray918)>>1)];
      var $conv919=(($513)&65535);
      var $shr920=$conv919 >> 8;
      var $and921=$shr920 & 255;
      var $conv922=(($and921) & 255);
      var $514=$sp;
      HEAP8[($514)]=$conv922;
      var $515=$png_ptr_addr;
      var $background923=(($515+316)|0);
      var $gray924=(($background923+8)|0);
      var $516=HEAPU16[(($gray924)>>1)];
      var $conv925=(($516)&65535);
      var $and926=$conv925 & 255;
      var $conv927=(($and926) & 255);
      var $517=$sp;
      var $add_ptr928=(($517+1)|0);
      HEAP8[($add_ptr928)]=$conv927;
      __label__ = 180; break;
    case 176: 
      var $518=$sp;
      var $519=HEAPU8[($518)];
      var $idxprom933=(($519)&255);
      var $520=$sp;
      var $add_ptr934=(($520+1)|0);
      var $521=HEAPU8[($add_ptr934)];
      var $conv935=(($521)&255);
      var $522=$gamma_shift;
      var $shr936=$conv935 >> (($522)|0);
      var $523=$gamma_16_to_1;
      var $arrayidx937=(($523+($shr936<<2))|0);
      var $524=HEAP32[(($arrayidx937)>>2)];
      var $arrayidx938=(($524+($idxprom933<<1))|0);
      var $525=HEAP16[(($arrayidx938)>>1)];
      $g930=$525;
      var $526=$g930;
      var $conv940=(($526)&65535);
      var $527=$a885;
      var $conv941=(($527)&65535);
      var $mul942=(($conv940*$conv941)|0);
      var $528=$png_ptr_addr;
      var $background_1943=(($528+326)|0);
      var $gray944=(($background_1943+8)|0);
      var $529=HEAPU16[(($gray944)>>1)];
      var $conv945=(($529)&65535);
      var $530=$a885;
      var $conv946=(($530)&65535);
      var $sub947=((65535-$conv946)|0);
      var $mul948=(($conv945*$sub947)|0);
      var $add949=(($mul942+$mul948)|0);
      var $add950=(($add949+32768)|0);
      $temp939=$add950;
      var $531=$temp939;
      var $532=$temp939;
      var $shr951=$532 >>> 16;
      var $add952=(($531+$shr951)|0);
      var $shr953=$add952 >>> 16;
      var $conv954=(($shr953) & 65535);
      $v931=$conv954;
      var $533=$optimize;
      var $tobool955=(($533)|0)!=0;
      if ($tobool955) { __label__ = 177; break; } else { __label__ = 178; break; }
    case 177: 
      var $534=$v931;
      $w932=$534;
      __label__ = 179; break;
    case 178: 
      var $535=$v931;
      var $conv958=(($535)&65535);
      var $shr959=$conv958 >> 8;
      var $536=$v931;
      var $conv960=(($536)&65535);
      var $and961=$conv960 & 255;
      var $537=$gamma_shift;
      var $shr962=$and961 >> (($537)|0);
      var $538=$gamma_16_from_1;
      var $arrayidx963=(($538+($shr962<<2))|0);
      var $539=HEAP32[(($arrayidx963)>>2)];
      var $arrayidx964=(($539+($shr959<<1))|0);
      var $540=HEAP16[(($arrayidx964)>>1)];
      $w932=$540;
      __label__ = 179; break;
    case 179: 
      var $541=$w932;
      var $conv966=(($541)&65535);
      var $shr967=$conv966 >> 8;
      var $and968=$shr967 & 255;
      var $conv969=(($and968) & 255);
      var $542=$sp;
      HEAP8[($542)]=$conv969;
      var $543=$w932;
      var $conv970=(($543)&65535);
      var $and971=$conv970 & 255;
      var $conv972=(($and971) & 255);
      var $544=$sp;
      var $add_ptr973=(($544+1)|0);
      HEAP8[($add_ptr973)]=$conv972;
      __label__ = 180; break;
    case 180: 
      __label__ = 181; break;
    case 181: 
      __label__ = 182; break;
    case 182: 
      var $545=$i;
      var $inc977=(($545+1)|0);
      $i=$inc977;
      var $546=$sp;
      var $add_ptr978=(($546+4)|0);
      $sp=$add_ptr978;
      __label__ = 171; break;
    case 183: 
      __label__ = 194; break;
    case 184: 
      var $547=$row_addr;
      $sp=$547;
      $i=0;
      __label__ = 185; break;
    case 185: 
      var $548=$i;
      var $549=$row_width;
      var $cmp982=(($548)>>>0) < (($549)>>>0);
      if ($cmp982) { __label__ = 186; break; } else { __label__ = 193; break; }
    case 186: 
      var $550=$sp;
      var $add_ptr986=(($550+2)|0);
      var $551=HEAPU8[($add_ptr986)];
      var $conv987=(($551)&255);
      var $shl988=$conv987 << 8;
      var $552=$sp;
      var $add_ptr989=(($552+3)|0);
      var $553=HEAPU8[($add_ptr989)];
      var $conv990=(($553)&255);
      var $add991=(($shl988+$conv990)|0);
      var $conv992=(($add991) & 65535);
      $a985=$conv992;
      var $554=$a985;
      var $conv993=(($554)&65535);
      var $cmp994=(($conv993)|0)==0;
      if ($cmp994) { __label__ = 187; break; } else { __label__ = 188; break; }
    case 187: 
      var $555=$png_ptr_addr;
      var $background997=(($555+316)|0);
      var $gray998=(($background997+8)|0);
      var $556=HEAPU16[(($gray998)>>1)];
      var $conv999=(($556)&65535);
      var $shr1000=$conv999 >> 8;
      var $and1001=$shr1000 & 255;
      var $conv1002=(($and1001) & 255);
      var $557=$sp;
      HEAP8[($557)]=$conv1002;
      var $558=$png_ptr_addr;
      var $background1003=(($558+316)|0);
      var $gray1004=(($background1003+8)|0);
      var $559=HEAPU16[(($gray1004)>>1)];
      var $conv1005=(($559)&65535);
      var $and1006=$conv1005 & 255;
      var $conv1007=(($and1006) & 255);
      var $560=$sp;
      var $add_ptr1008=(($560+1)|0);
      HEAP8[($add_ptr1008)]=$conv1007;
      __label__ = 191; break;
    case 188: 
      var $561=$a985;
      var $conv1010=(($561)&65535);
      var $cmp1011=(($conv1010)|0) < 65535;
      if ($cmp1011) { __label__ = 189; break; } else { __label__ = 190; break; }
    case 189: 
      var $562=$sp;
      var $563=HEAPU8[($562)];
      var $conv1016=(($563)&255);
      var $shl1017=$conv1016 << 8;
      var $564=$sp;
      var $add_ptr1018=(($564+1)|0);
      var $565=HEAPU8[($add_ptr1018)];
      var $conv1019=(($565)&255);
      var $add1020=(($shl1017+$conv1019)|0);
      var $conv1021=(($add1020) & 65535);
      $g1014=$conv1021;
      var $566=$g1014;
      var $conv1023=(($566)&65535);
      var $567=$a985;
      var $conv1024=(($567)&65535);
      var $mul1025=(($conv1023*$conv1024)|0);
      var $568=$png_ptr_addr;
      var $background_11026=(($568+326)|0);
      var $gray1027=(($background_11026+8)|0);
      var $569=HEAPU16[(($gray1027)>>1)];
      var $conv1028=(($569)&65535);
      var $570=$a985;
      var $conv1029=(($570)&65535);
      var $sub1030=((65535-$conv1029)|0);
      var $mul1031=(($conv1028*$sub1030)|0);
      var $add1032=(($mul1025+$mul1031)|0);
      var $add1033=(($add1032+32768)|0);
      $temp1022=$add1033;
      var $571=$temp1022;
      var $572=$temp1022;
      var $shr1034=$572 >>> 16;
      var $add1035=(($571+$shr1034)|0);
      var $shr1036=$add1035 >>> 16;
      var $conv1037=(($shr1036) & 65535);
      $v1015=$conv1037;
      var $573=$v1015;
      var $conv1038=(($573)&65535);
      var $shr1039=$conv1038 >> 8;
      var $and1040=$shr1039 & 255;
      var $conv1041=(($and1040) & 255);
      var $574=$sp;
      HEAP8[($574)]=$conv1041;
      var $575=$v1015;
      var $conv1042=(($575)&65535);
      var $and1043=$conv1042 & 255;
      var $conv1044=(($and1043) & 255);
      var $576=$sp;
      var $add_ptr1045=(($576+1)|0);
      HEAP8[($add_ptr1045)]=$conv1044;
      __label__ = 190; break;
    case 190: 
      __label__ = 191; break;
    case 191: 
      __label__ = 192; break;
    case 192: 
      var $577=$i;
      var $inc1049=(($577+1)|0);
      $i=$inc1049;
      var $578=$sp;
      var $add_ptr1050=(($578+4)|0);
      $sp=$add_ptr1050;
      __label__ = 185; break;
    case 193: 
      __label__ = 194; break;
    case 194: 
      __label__ = 195; break;
    case 195: 
      __label__ = 261; break;
    case 196: 
      var $579=$row_info_addr;
      var $bit_depth1055=(($579+9)|0);
      var $580=HEAPU8[($bit_depth1055)];
      var $conv1056=(($580)&255);
      var $cmp1057=(($conv1056)|0)==8;
      if ($cmp1057) { __label__ = 197; break; } else { __label__ = 228; break; }
    case 197: 
      var $581=$gamma_to_1;
      var $cmp1060=(($581)|0)!=0;
      if ($cmp1060) { __label__ = 198; break; } else { __label__ = 217; break; }
    case 198: 
      var $582=$gamma_from_1;
      var $cmp1063=(($582)|0)!=0;
      if ($cmp1063) { __label__ = 199; break; } else { __label__ = 217; break; }
    case 199: 
      var $583=$gamma_table;
      var $cmp1066=(($583)|0)!=0;
      if ($cmp1066) { __label__ = 200; break; } else { __label__ = 217; break; }
    case 200: 
      var $584=$row_addr;
      $sp=$584;
      $i=0;
      __label__ = 201; break;
    case 201: 
      var $585=$i;
      var $586=$row_width;
      var $cmp1070=(($585)>>>0) < (($586)>>>0);
      if ($cmp1070) { __label__ = 202; break; } else { __label__ = 216; break; }
    case 202: 
      var $587=$sp;
      var $add_ptr1074=(($587+3)|0);
      var $588=HEAP8[($add_ptr1074)];
      $a1073=$588;
      var $589=$a1073;
      var $conv1075=(($589)&255);
      var $cmp1076=(($conv1075)|0)==255;
      if ($cmp1076) { __label__ = 203; break; } else { __label__ = 204; break; }
    case 203: 
      var $590=$sp;
      var $591=HEAPU8[($590)];
      var $idxprom1079=(($591)&255);
      var $592=$gamma_table;
      var $arrayidx1080=(($592+$idxprom1079)|0);
      var $593=HEAP8[($arrayidx1080)];
      var $594=$sp;
      HEAP8[($594)]=$593;
      var $595=$sp;
      var $add_ptr1081=(($595+1)|0);
      var $596=HEAPU8[($add_ptr1081)];
      var $idxprom1082=(($596)&255);
      var $597=$gamma_table;
      var $arrayidx1083=(($597+$idxprom1082)|0);
      var $598=HEAP8[($arrayidx1083)];
      var $599=$sp;
      var $add_ptr1084=(($599+1)|0);
      HEAP8[($add_ptr1084)]=$598;
      var $600=$sp;
      var $add_ptr1085=(($600+2)|0);
      var $601=HEAPU8[($add_ptr1085)];
      var $idxprom1086=(($601)&255);
      var $602=$gamma_table;
      var $arrayidx1087=(($602+$idxprom1086)|0);
      var $603=HEAP8[($arrayidx1087)];
      var $604=$sp;
      var $add_ptr1088=(($604+2)|0);
      HEAP8[($add_ptr1088)]=$603;
      __label__ = 214; break;
    case 204: 
      var $605=$a1073;
      var $conv1090=(($605)&255);
      var $cmp1091=(($conv1090)|0)==0;
      if ($cmp1091) { __label__ = 205; break; } else { __label__ = 206; break; }
    case 205: 
      var $606=$png_ptr_addr;
      var $background1094=(($606+316)|0);
      var $red1095=(($background1094+2)|0);
      var $607=HEAP16[(($red1095)>>1)];
      var $conv1096=(($607) & 255);
      var $608=$sp;
      HEAP8[($608)]=$conv1096;
      var $609=$png_ptr_addr;
      var $background1097=(($609+316)|0);
      var $green1098=(($background1097+4)|0);
      var $610=HEAP16[(($green1098)>>1)];
      var $conv1099=(($610) & 255);
      var $611=$sp;
      var $add_ptr1100=(($611+1)|0);
      HEAP8[($add_ptr1100)]=$conv1099;
      var $612=$png_ptr_addr;
      var $background1101=(($612+316)|0);
      var $blue1102=(($background1101+6)|0);
      var $613=HEAP16[(($blue1102)>>1)];
      var $conv1103=(($613) & 255);
      var $614=$sp;
      var $add_ptr1104=(($614+2)|0);
      HEAP8[($add_ptr1104)]=$conv1103;
      __label__ = 213; break;
    case 206: 
      var $615=$sp;
      var $616=HEAPU8[($615)];
      var $idxprom1108=(($616)&255);
      var $617=$gamma_to_1;
      var $arrayidx1109=(($617+$idxprom1108)|0);
      var $618=HEAP8[($arrayidx1109)];
      $v1106=$618;
      var $619=$v1106;
      var $conv1111=(($619)&255);
      var $conv1112=(($conv1111)&65535);
      var $620=$a1073;
      var $conv1113=(($620)&255);
      var $conv1114=(($conv1113)&65535);
      var $mul1115=(($conv1112*$conv1114)|0);
      var $621=$png_ptr_addr;
      var $background_11116=(($621+326)|0);
      var $red1117=(($background_11116+2)|0);
      var $622=HEAPU16[(($red1117)>>1)];
      var $conv1118=(($622)&65535);
      var $623=$a1073;
      var $conv1119=(($623)&255);
      var $conv1120=(($conv1119)&65535);
      var $sub1121=((255-$conv1120)|0);
      var $conv1122=(($sub1121) & 65535);
      var $conv1123=(($conv1122)&65535);
      var $mul1124=(($conv1118*$conv1123)|0);
      var $add1125=(($mul1115+$mul1124)|0);
      var $add1126=(($add1125+128)|0);
      var $conv1127=(($add1126) & 65535);
      $temp1110=$conv1127;
      var $624=$temp1110;
      var $conv1128=(($624)&65535);
      var $625=$temp1110;
      var $conv1129=(($625)&65535);
      var $shr1130=$conv1129 >> 8;
      var $add1131=(($conv1128+$shr1130)|0);
      var $shr1132=$add1131 >> 8;
      var $conv1133=(($shr1132) & 255);
      $w1107=$conv1133;
      var $626=$optimize;
      var $tobool1134=(($626)|0)!=0;
      if ($tobool1134) { __label__ = 208; break; } else { __label__ = 207; break; }
    case 207: 
      var $627=$w1107;
      var $idxprom1136=(($627)&255);
      var $628=$gamma_from_1;
      var $arrayidx1137=(($628+$idxprom1136)|0);
      var $629=HEAP8[($arrayidx1137)];
      $w1107=$629;
      __label__ = 208; break;
    case 208: 
      var $630=$w1107;
      var $631=$sp;
      HEAP8[($631)]=$630;
      var $632=$sp;
      var $add_ptr1139=(($632+1)|0);
      var $633=HEAPU8[($add_ptr1139)];
      var $idxprom1140=(($633)&255);
      var $634=$gamma_to_1;
      var $arrayidx1141=(($634+$idxprom1140)|0);
      var $635=HEAP8[($arrayidx1141)];
      $v1106=$635;
      var $636=$v1106;
      var $conv1143=(($636)&255);
      var $conv1144=(($conv1143)&65535);
      var $637=$a1073;
      var $conv1145=(($637)&255);
      var $conv1146=(($conv1145)&65535);
      var $mul1147=(($conv1144*$conv1146)|0);
      var $638=$png_ptr_addr;
      var $background_11148=(($638+326)|0);
      var $green1149=(($background_11148+4)|0);
      var $639=HEAPU16[(($green1149)>>1)];
      var $conv1150=(($639)&65535);
      var $640=$a1073;
      var $conv1151=(($640)&255);
      var $conv1152=(($conv1151)&65535);
      var $sub1153=((255-$conv1152)|0);
      var $conv1154=(($sub1153) & 65535);
      var $conv1155=(($conv1154)&65535);
      var $mul1156=(($conv1150*$conv1155)|0);
      var $add1157=(($mul1147+$mul1156)|0);
      var $add1158=(($add1157+128)|0);
      var $conv1159=(($add1158) & 65535);
      $temp1142=$conv1159;
      var $641=$temp1142;
      var $conv1160=(($641)&65535);
      var $642=$temp1142;
      var $conv1161=(($642)&65535);
      var $shr1162=$conv1161 >> 8;
      var $add1163=(($conv1160+$shr1162)|0);
      var $shr1164=$add1163 >> 8;
      var $conv1165=(($shr1164) & 255);
      $w1107=$conv1165;
      var $643=$optimize;
      var $tobool1166=(($643)|0)!=0;
      if ($tobool1166) { __label__ = 210; break; } else { __label__ = 209; break; }
    case 209: 
      var $644=$w1107;
      var $idxprom1168=(($644)&255);
      var $645=$gamma_from_1;
      var $arrayidx1169=(($645+$idxprom1168)|0);
      var $646=HEAP8[($arrayidx1169)];
      $w1107=$646;
      __label__ = 210; break;
    case 210: 
      var $647=$w1107;
      var $648=$sp;
      var $add_ptr1171=(($648+1)|0);
      HEAP8[($add_ptr1171)]=$647;
      var $649=$sp;
      var $add_ptr1172=(($649+2)|0);
      var $650=HEAPU8[($add_ptr1172)];
      var $idxprom1173=(($650)&255);
      var $651=$gamma_to_1;
      var $arrayidx1174=(($651+$idxprom1173)|0);
      var $652=HEAP8[($arrayidx1174)];
      $v1106=$652;
      var $653=$v1106;
      var $conv1176=(($653)&255);
      var $conv1177=(($conv1176)&65535);
      var $654=$a1073;
      var $conv1178=(($654)&255);
      var $conv1179=(($conv1178)&65535);
      var $mul1180=(($conv1177*$conv1179)|0);
      var $655=$png_ptr_addr;
      var $background_11181=(($655+326)|0);
      var $blue1182=(($background_11181+6)|0);
      var $656=HEAPU16[(($blue1182)>>1)];
      var $conv1183=(($656)&65535);
      var $657=$a1073;
      var $conv1184=(($657)&255);
      var $conv1185=(($conv1184)&65535);
      var $sub1186=((255-$conv1185)|0);
      var $conv1187=(($sub1186) & 65535);
      var $conv1188=(($conv1187)&65535);
      var $mul1189=(($conv1183*$conv1188)|0);
      var $add1190=(($mul1180+$mul1189)|0);
      var $add1191=(($add1190+128)|0);
      var $conv1192=(($add1191) & 65535);
      $temp1175=$conv1192;
      var $658=$temp1175;
      var $conv1193=(($658)&65535);
      var $659=$temp1175;
      var $conv1194=(($659)&65535);
      var $shr1195=$conv1194 >> 8;
      var $add1196=(($conv1193+$shr1195)|0);
      var $shr1197=$add1196 >> 8;
      var $conv1198=(($shr1197) & 255);
      $w1107=$conv1198;
      var $660=$optimize;
      var $tobool1199=(($660)|0)!=0;
      if ($tobool1199) { __label__ = 212; break; } else { __label__ = 211; break; }
    case 211: 
      var $661=$w1107;
      var $idxprom1201=(($661)&255);
      var $662=$gamma_from_1;
      var $arrayidx1202=(($662+$idxprom1201)|0);
      var $663=HEAP8[($arrayidx1202)];
      $w1107=$663;
      __label__ = 212; break;
    case 212: 
      var $664=$w1107;
      var $665=$sp;
      var $add_ptr1204=(($665+2)|0);
      HEAP8[($add_ptr1204)]=$664;
      __label__ = 213; break;
    case 213: 
      __label__ = 214; break;
    case 214: 
      __label__ = 215; break;
    case 215: 
      var $666=$i;
      var $inc1208=(($666+1)|0);
      $i=$inc1208;
      var $667=$sp;
      var $add_ptr1209=(($667+4)|0);
      $sp=$add_ptr1209;
      __label__ = 201; break;
    case 216: 
      __label__ = 227; break;
    case 217: 
      var $668=$row_addr;
      $sp=$668;
      $i=0;
      __label__ = 218; break;
    case 218: 
      var $669=$i;
      var $670=$row_width;
      var $cmp1213=(($669)>>>0) < (($670)>>>0);
      if ($cmp1213) { __label__ = 219; break; } else { __label__ = 226; break; }
    case 219: 
      var $671=$sp;
      var $add_ptr1217=(($671+3)|0);
      var $672=HEAP8[($add_ptr1217)];
      $a1216=$672;
      var $673=$a1216;
      var $conv1218=(($673)&255);
      var $cmp1219=(($conv1218)|0)==0;
      if ($cmp1219) { __label__ = 220; break; } else { __label__ = 221; break; }
    case 220: 
      var $674=$png_ptr_addr;
      var $background1222=(($674+316)|0);
      var $red1223=(($background1222+2)|0);
      var $675=HEAP16[(($red1223)>>1)];
      var $conv1224=(($675) & 255);
      var $676=$sp;
      HEAP8[($676)]=$conv1224;
      var $677=$png_ptr_addr;
      var $background1225=(($677+316)|0);
      var $green1226=(($background1225+4)|0);
      var $678=HEAP16[(($green1226)>>1)];
      var $conv1227=(($678) & 255);
      var $679=$sp;
      var $add_ptr1228=(($679+1)|0);
      HEAP8[($add_ptr1228)]=$conv1227;
      var $680=$png_ptr_addr;
      var $background1229=(($680+316)|0);
      var $blue1230=(($background1229+6)|0);
      var $681=HEAP16[(($blue1230)>>1)];
      var $conv1231=(($681) & 255);
      var $682=$sp;
      var $add_ptr1232=(($682+2)|0);
      HEAP8[($add_ptr1232)]=$conv1231;
      __label__ = 224; break;
    case 221: 
      var $683=$a1216;
      var $conv1234=(($683)&255);
      var $cmp1235=(($conv1234)|0) < 255;
      if ($cmp1235) { __label__ = 222; break; } else { __label__ = 223; break; }
    case 222: 
      var $684=$sp;
      var $685=HEAPU8[($684)];
      var $conv1239=(($685)&255);
      var $conv1240=(($conv1239)&65535);
      var $686=$a1216;
      var $conv1241=(($686)&255);
      var $conv1242=(($conv1241)&65535);
      var $mul1243=(($conv1240*$conv1242)|0);
      var $687=$png_ptr_addr;
      var $background1244=(($687+316)|0);
      var $red1245=(($background1244+2)|0);
      var $688=HEAPU16[(($red1245)>>1)];
      var $conv1246=(($688)&65535);
      var $689=$a1216;
      var $conv1247=(($689)&255);
      var $conv1248=(($conv1247)&65535);
      var $sub1249=((255-$conv1248)|0);
      var $conv1250=(($sub1249) & 65535);
      var $conv1251=(($conv1250)&65535);
      var $mul1252=(($conv1246*$conv1251)|0);
      var $add1253=(($mul1243+$mul1252)|0);
      var $add1254=(($add1253+128)|0);
      var $conv1255=(($add1254) & 65535);
      $temp1238=$conv1255;
      var $690=$temp1238;
      var $conv1256=(($690)&65535);
      var $691=$temp1238;
      var $conv1257=(($691)&65535);
      var $shr1258=$conv1257 >> 8;
      var $add1259=(($conv1256+$shr1258)|0);
      var $shr1260=$add1259 >> 8;
      var $conv1261=(($shr1260) & 255);
      var $692=$sp;
      HEAP8[($692)]=$conv1261;
      var $693=$sp;
      var $add_ptr1263=(($693+1)|0);
      var $694=HEAPU8[($add_ptr1263)];
      var $conv1264=(($694)&255);
      var $conv1265=(($conv1264)&65535);
      var $695=$a1216;
      var $conv1266=(($695)&255);
      var $conv1267=(($conv1266)&65535);
      var $mul1268=(($conv1265*$conv1267)|0);
      var $696=$png_ptr_addr;
      var $background1269=(($696+316)|0);
      var $green1270=(($background1269+4)|0);
      var $697=HEAPU16[(($green1270)>>1)];
      var $conv1271=(($697)&65535);
      var $698=$a1216;
      var $conv1272=(($698)&255);
      var $conv1273=(($conv1272)&65535);
      var $sub1274=((255-$conv1273)|0);
      var $conv1275=(($sub1274) & 65535);
      var $conv1276=(($conv1275)&65535);
      var $mul1277=(($conv1271*$conv1276)|0);
      var $add1278=(($mul1268+$mul1277)|0);
      var $add1279=(($add1278+128)|0);
      var $conv1280=(($add1279) & 65535);
      $temp1262=$conv1280;
      var $699=$temp1262;
      var $conv1281=(($699)&65535);
      var $700=$temp1262;
      var $conv1282=(($700)&65535);
      var $shr1283=$conv1282 >> 8;
      var $add1284=(($conv1281+$shr1283)|0);
      var $shr1285=$add1284 >> 8;
      var $conv1286=(($shr1285) & 255);
      var $701=$sp;
      var $add_ptr1287=(($701+1)|0);
      HEAP8[($add_ptr1287)]=$conv1286;
      var $702=$sp;
      var $add_ptr1289=(($702+2)|0);
      var $703=HEAPU8[($add_ptr1289)];
      var $conv1290=(($703)&255);
      var $conv1291=(($conv1290)&65535);
      var $704=$a1216;
      var $conv1292=(($704)&255);
      var $conv1293=(($conv1292)&65535);
      var $mul1294=(($conv1291*$conv1293)|0);
      var $705=$png_ptr_addr;
      var $background1295=(($705+316)|0);
      var $blue1296=(($background1295+6)|0);
      var $706=HEAPU16[(($blue1296)>>1)];
      var $conv1297=(($706)&65535);
      var $707=$a1216;
      var $conv1298=(($707)&255);
      var $conv1299=(($conv1298)&65535);
      var $sub1300=((255-$conv1299)|0);
      var $conv1301=(($sub1300) & 65535);
      var $conv1302=(($conv1301)&65535);
      var $mul1303=(($conv1297*$conv1302)|0);
      var $add1304=(($mul1294+$mul1303)|0);
      var $add1305=(($add1304+128)|0);
      var $conv1306=(($add1305) & 65535);
      $temp1288=$conv1306;
      var $708=$temp1288;
      var $conv1307=(($708)&65535);
      var $709=$temp1288;
      var $conv1308=(($709)&65535);
      var $shr1309=$conv1308 >> 8;
      var $add1310=(($conv1307+$shr1309)|0);
      var $shr1311=$add1310 >> 8;
      var $conv1312=(($shr1311) & 255);
      var $710=$sp;
      var $add_ptr1313=(($710+2)|0);
      HEAP8[($add_ptr1313)]=$conv1312;
      __label__ = 223; break;
    case 223: 
      __label__ = 224; break;
    case 224: 
      __label__ = 225; break;
    case 225: 
      var $711=$i;
      var $inc1317=(($711+1)|0);
      $i=$inc1317;
      var $712=$sp;
      var $add_ptr1318=(($712+4)|0);
      $sp=$add_ptr1318;
      __label__ = 218; break;
    case 226: 
      __label__ = 227; break;
    case 227: 
      __label__ = 259; break;
    case 228: 
      var $713=$gamma_16;
      var $cmp1322=(($713)|0)!=0;
      if ($cmp1322) { __label__ = 229; break; } else { __label__ = 248; break; }
    case 229: 
      var $714=$gamma_16_from_1;
      var $cmp1325=(($714)|0)!=0;
      if ($cmp1325) { __label__ = 230; break; } else { __label__ = 248; break; }
    case 230: 
      var $715=$gamma_16_to_1;
      var $cmp1328=(($715)|0)!=0;
      if ($cmp1328) { __label__ = 231; break; } else { __label__ = 248; break; }
    case 231: 
      var $716=$row_addr;
      $sp=$716;
      $i=0;
      __label__ = 232; break;
    case 232: 
      var $717=$i;
      var $718=$row_width;
      var $cmp1332=(($717)>>>0) < (($718)>>>0);
      if ($cmp1332) { __label__ = 233; break; } else { __label__ = 247; break; }
    case 233: 
      var $719=$sp;
      var $add_ptr1336=(($719+6)|0);
      var $720=HEAPU8[($add_ptr1336)];
      var $conv1337=(($720)&255);
      var $conv1338=(($conv1337)&65535);
      var $shl1339=$conv1338 << 8;
      var $721=$sp;
      var $add_ptr1340=(($721+7)|0);
      var $722=HEAPU8[($add_ptr1340)];
      var $conv1341=(($722)&255);
      var $conv1342=(($conv1341)&65535);
      var $add1343=(($shl1339+$conv1342)|0);
      var $conv1344=(($add1343) & 65535);
      $a1335=$conv1344;
      var $723=$a1335;
      var $conv1345=(($723)&65535);
      var $cmp1346=(($conv1345)|0)==65535;
      if ($cmp1346) { __label__ = 234; break; } else { __label__ = 235; break; }
    case 234: 
      var $724=$sp;
      var $725=HEAPU8[($724)];
      var $idxprom1350=(($725)&255);
      var $726=$sp;
      var $add_ptr1351=(($726+1)|0);
      var $727=HEAPU8[($add_ptr1351)];
      var $conv1352=(($727)&255);
      var $728=$gamma_shift;
      var $shr1353=$conv1352 >> (($728)|0);
      var $729=$gamma_16;
      var $arrayidx1354=(($729+($shr1353<<2))|0);
      var $730=HEAP32[(($arrayidx1354)>>2)];
      var $arrayidx1355=(($730+($idxprom1350<<1))|0);
      var $731=HEAP16[(($arrayidx1355)>>1)];
      $v1349=$731;
      var $732=$v1349;
      var $conv1356=(($732)&65535);
      var $shr1357=$conv1356 >> 8;
      var $and1358=$shr1357 & 255;
      var $conv1359=(($and1358) & 255);
      var $733=$sp;
      HEAP8[($733)]=$conv1359;
      var $734=$v1349;
      var $conv1360=(($734)&65535);
      var $and1361=$conv1360 & 255;
      var $conv1362=(($and1361) & 255);
      var $735=$sp;
      var $add_ptr1363=(($735+1)|0);
      HEAP8[($add_ptr1363)]=$conv1362;
      var $736=$sp;
      var $add_ptr1364=(($736+2)|0);
      var $737=HEAPU8[($add_ptr1364)];
      var $idxprom1365=(($737)&255);
      var $738=$sp;
      var $add_ptr1366=(($738+3)|0);
      var $739=HEAPU8[($add_ptr1366)];
      var $conv1367=(($739)&255);
      var $740=$gamma_shift;
      var $shr1368=$conv1367 >> (($740)|0);
      var $741=$gamma_16;
      var $arrayidx1369=(($741+($shr1368<<2))|0);
      var $742=HEAP32[(($arrayidx1369)>>2)];
      var $arrayidx1370=(($742+($idxprom1365<<1))|0);
      var $743=HEAP16[(($arrayidx1370)>>1)];
      $v1349=$743;
      var $744=$v1349;
      var $conv1371=(($744)&65535);
      var $shr1372=$conv1371 >> 8;
      var $and1373=$shr1372 & 255;
      var $conv1374=(($and1373) & 255);
      var $745=$sp;
      var $add_ptr1375=(($745+2)|0);
      HEAP8[($add_ptr1375)]=$conv1374;
      var $746=$v1349;
      var $conv1376=(($746)&65535);
      var $and1377=$conv1376 & 255;
      var $conv1378=(($and1377) & 255);
      var $747=$sp;
      var $add_ptr1379=(($747+3)|0);
      HEAP8[($add_ptr1379)]=$conv1378;
      var $748=$sp;
      var $add_ptr1380=(($748+4)|0);
      var $749=HEAPU8[($add_ptr1380)];
      var $idxprom1381=(($749)&255);
      var $750=$sp;
      var $add_ptr1382=(($750+5)|0);
      var $751=HEAPU8[($add_ptr1382)];
      var $conv1383=(($751)&255);
      var $752=$gamma_shift;
      var $shr1384=$conv1383 >> (($752)|0);
      var $753=$gamma_16;
      var $arrayidx1385=(($753+($shr1384<<2))|0);
      var $754=HEAP32[(($arrayidx1385)>>2)];
      var $arrayidx1386=(($754+($idxprom1381<<1))|0);
      var $755=HEAP16[(($arrayidx1386)>>1)];
      $v1349=$755;
      var $756=$v1349;
      var $conv1387=(($756)&65535);
      var $shr1388=$conv1387 >> 8;
      var $and1389=$shr1388 & 255;
      var $conv1390=(($and1389) & 255);
      var $757=$sp;
      var $add_ptr1391=(($757+4)|0);
      HEAP8[($add_ptr1391)]=$conv1390;
      var $758=$v1349;
      var $conv1392=(($758)&65535);
      var $and1393=$conv1392 & 255;
      var $conv1394=(($and1393) & 255);
      var $759=$sp;
      var $add_ptr1395=(($759+5)|0);
      HEAP8[($add_ptr1395)]=$conv1394;
      __label__ = 245; break;
    case 235: 
      var $760=$a1335;
      var $conv1397=(($760)&65535);
      var $cmp1398=(($conv1397)|0)==0;
      if ($cmp1398) { __label__ = 236; break; } else { __label__ = 237; break; }
    case 236: 
      var $761=$png_ptr_addr;
      var $background1401=(($761+316)|0);
      var $red1402=(($background1401+2)|0);
      var $762=HEAPU16[(($red1402)>>1)];
      var $conv1403=(($762)&65535);
      var $shr1404=$conv1403 >> 8;
      var $and1405=$shr1404 & 255;
      var $conv1406=(($and1405) & 255);
      var $763=$sp;
      HEAP8[($763)]=$conv1406;
      var $764=$png_ptr_addr;
      var $background1407=(($764+316)|0);
      var $red1408=(($background1407+2)|0);
      var $765=HEAPU16[(($red1408)>>1)];
      var $conv1409=(($765)&65535);
      var $and1410=$conv1409 & 255;
      var $conv1411=(($and1410) & 255);
      var $766=$sp;
      var $add_ptr1412=(($766+1)|0);
      HEAP8[($add_ptr1412)]=$conv1411;
      var $767=$png_ptr_addr;
      var $background1413=(($767+316)|0);
      var $green1414=(($background1413+4)|0);
      var $768=HEAPU16[(($green1414)>>1)];
      var $conv1415=(($768)&65535);
      var $shr1416=$conv1415 >> 8;
      var $and1417=$shr1416 & 255;
      var $conv1418=(($and1417) & 255);
      var $769=$sp;
      var $add_ptr1419=(($769+2)|0);
      HEAP8[($add_ptr1419)]=$conv1418;
      var $770=$png_ptr_addr;
      var $background1420=(($770+316)|0);
      var $green1421=(($background1420+4)|0);
      var $771=HEAPU16[(($green1421)>>1)];
      var $conv1422=(($771)&65535);
      var $and1423=$conv1422 & 255;
      var $conv1424=(($and1423) & 255);
      var $772=$sp;
      var $add_ptr1425=(($772+3)|0);
      HEAP8[($add_ptr1425)]=$conv1424;
      var $773=$png_ptr_addr;
      var $background1426=(($773+316)|0);
      var $blue1427=(($background1426+6)|0);
      var $774=HEAPU16[(($blue1427)>>1)];
      var $conv1428=(($774)&65535);
      var $shr1429=$conv1428 >> 8;
      var $and1430=$shr1429 & 255;
      var $conv1431=(($and1430) & 255);
      var $775=$sp;
      var $add_ptr1432=(($775+4)|0);
      HEAP8[($add_ptr1432)]=$conv1431;
      var $776=$png_ptr_addr;
      var $background1433=(($776+316)|0);
      var $blue1434=(($background1433+6)|0);
      var $777=HEAPU16[(($blue1434)>>1)];
      var $conv1435=(($777)&65535);
      var $and1436=$conv1435 & 255;
      var $conv1437=(($and1436) & 255);
      var $778=$sp;
      var $add_ptr1438=(($778+5)|0);
      HEAP8[($add_ptr1438)]=$conv1437;
      __label__ = 244; break;
    case 237: 
      var $779=$sp;
      var $780=HEAPU8[($779)];
      var $idxprom1442=(($780)&255);
      var $781=$sp;
      var $add_ptr1443=(($781+1)|0);
      var $782=HEAPU8[($add_ptr1443)];
      var $conv1444=(($782)&255);
      var $783=$gamma_shift;
      var $shr1445=$conv1444 >> (($783)|0);
      var $784=$gamma_16_to_1;
      var $arrayidx1446=(($784+($shr1445<<2))|0);
      var $785=HEAP32[(($arrayidx1446)>>2)];
      var $arrayidx1447=(($785+($idxprom1442<<1))|0);
      var $786=HEAP16[(($arrayidx1447)>>1)];
      $v1440=$786;
      var $787=$v1440;
      var $conv1449=(($787)&65535);
      var $788=$a1335;
      var $conv1450=(($788)&65535);
      var $mul1451=(($conv1449*$conv1450)|0);
      var $789=$png_ptr_addr;
      var $background_11452=(($789+326)|0);
      var $red1453=(($background_11452+2)|0);
      var $790=HEAPU16[(($red1453)>>1)];
      var $conv1454=(($790)&65535);
      var $791=$a1335;
      var $conv1455=(($791)&65535);
      var $sub1456=((65535-$conv1455)|0);
      var $mul1457=(($conv1454*$sub1456)|0);
      var $add1458=(($mul1451+$mul1457)|0);
      var $add1459=(($add1458+32768)|0);
      $temp1448=$add1459;
      var $792=$temp1448;
      var $793=$temp1448;
      var $shr1460=$793 >>> 16;
      var $add1461=(($792+$shr1460)|0);
      var $shr1462=$add1461 >>> 16;
      var $conv1463=(($shr1462) & 65535);
      $w1441=$conv1463;
      var $794=$optimize;
      var $tobool1464=(($794)|0)!=0;
      if ($tobool1464) { __label__ = 239; break; } else { __label__ = 238; break; }
    case 238: 
      var $795=$w1441;
      var $conv1466=(($795)&65535);
      var $shr1467=$conv1466 >> 8;
      var $796=$w1441;
      var $conv1468=(($796)&65535);
      var $and1469=$conv1468 & 255;
      var $797=$gamma_shift;
      var $shr1470=$and1469 >> (($797)|0);
      var $798=$gamma_16_from_1;
      var $arrayidx1471=(($798+($shr1470<<2))|0);
      var $799=HEAP32[(($arrayidx1471)>>2)];
      var $arrayidx1472=(($799+($shr1467<<1))|0);
      var $800=HEAP16[(($arrayidx1472)>>1)];
      $w1441=$800;
      __label__ = 239; break;
    case 239: 
      var $801=$w1441;
      var $conv1474=(($801)&65535);
      var $shr1475=$conv1474 >> 8;
      var $and1476=$shr1475 & 255;
      var $conv1477=(($and1476) & 255);
      var $802=$sp;
      HEAP8[($802)]=$conv1477;
      var $803=$w1441;
      var $conv1478=(($803)&65535);
      var $and1479=$conv1478 & 255;
      var $conv1480=(($and1479) & 255);
      var $804=$sp;
      var $add_ptr1481=(($804+1)|0);
      HEAP8[($add_ptr1481)]=$conv1480;
      var $805=$sp;
      var $add_ptr1482=(($805+2)|0);
      var $806=HEAPU8[($add_ptr1482)];
      var $idxprom1483=(($806)&255);
      var $807=$sp;
      var $add_ptr1484=(($807+3)|0);
      var $808=HEAPU8[($add_ptr1484)];
      var $conv1485=(($808)&255);
      var $809=$gamma_shift;
      var $shr1486=$conv1485 >> (($809)|0);
      var $810=$gamma_16_to_1;
      var $arrayidx1487=(($810+($shr1486<<2))|0);
      var $811=HEAP32[(($arrayidx1487)>>2)];
      var $arrayidx1488=(($811+($idxprom1483<<1))|0);
      var $812=HEAP16[(($arrayidx1488)>>1)];
      $v1440=$812;
      var $813=$v1440;
      var $conv1490=(($813)&65535);
      var $814=$a1335;
      var $conv1491=(($814)&65535);
      var $mul1492=(($conv1490*$conv1491)|0);
      var $815=$png_ptr_addr;
      var $background_11493=(($815+326)|0);
      var $green1494=(($background_11493+4)|0);
      var $816=HEAPU16[(($green1494)>>1)];
      var $conv1495=(($816)&65535);
      var $817=$a1335;
      var $conv1496=(($817)&65535);
      var $sub1497=((65535-$conv1496)|0);
      var $mul1498=(($conv1495*$sub1497)|0);
      var $add1499=(($mul1492+$mul1498)|0);
      var $add1500=(($add1499+32768)|0);
      $temp1489=$add1500;
      var $818=$temp1489;
      var $819=$temp1489;
      var $shr1501=$819 >>> 16;
      var $add1502=(($818+$shr1501)|0);
      var $shr1503=$add1502 >>> 16;
      var $conv1504=(($shr1503) & 65535);
      $w1441=$conv1504;
      var $820=$optimize;
      var $tobool1505=(($820)|0)!=0;
      if ($tobool1505) { __label__ = 241; break; } else { __label__ = 240; break; }
    case 240: 
      var $821=$w1441;
      var $conv1507=(($821)&65535);
      var $shr1508=$conv1507 >> 8;
      var $822=$w1441;
      var $conv1509=(($822)&65535);
      var $and1510=$conv1509 & 255;
      var $823=$gamma_shift;
      var $shr1511=$and1510 >> (($823)|0);
      var $824=$gamma_16_from_1;
      var $arrayidx1512=(($824+($shr1511<<2))|0);
      var $825=HEAP32[(($arrayidx1512)>>2)];
      var $arrayidx1513=(($825+($shr1508<<1))|0);
      var $826=HEAP16[(($arrayidx1513)>>1)];
      $w1441=$826;
      __label__ = 241; break;
    case 241: 
      var $827=$w1441;
      var $conv1515=(($827)&65535);
      var $shr1516=$conv1515 >> 8;
      var $and1517=$shr1516 & 255;
      var $conv1518=(($and1517) & 255);
      var $828=$sp;
      var $add_ptr1519=(($828+2)|0);
      HEAP8[($add_ptr1519)]=$conv1518;
      var $829=$w1441;
      var $conv1520=(($829)&65535);
      var $and1521=$conv1520 & 255;
      var $conv1522=(($and1521) & 255);
      var $830=$sp;
      var $add_ptr1523=(($830+3)|0);
      HEAP8[($add_ptr1523)]=$conv1522;
      var $831=$sp;
      var $add_ptr1524=(($831+4)|0);
      var $832=HEAPU8[($add_ptr1524)];
      var $idxprom1525=(($832)&255);
      var $833=$sp;
      var $add_ptr1526=(($833+5)|0);
      var $834=HEAPU8[($add_ptr1526)];
      var $conv1527=(($834)&255);
      var $835=$gamma_shift;
      var $shr1528=$conv1527 >> (($835)|0);
      var $836=$gamma_16_to_1;
      var $arrayidx1529=(($836+($shr1528<<2))|0);
      var $837=HEAP32[(($arrayidx1529)>>2)];
      var $arrayidx1530=(($837+($idxprom1525<<1))|0);
      var $838=HEAP16[(($arrayidx1530)>>1)];
      $v1440=$838;
      var $839=$v1440;
      var $conv1532=(($839)&65535);
      var $840=$a1335;
      var $conv1533=(($840)&65535);
      var $mul1534=(($conv1532*$conv1533)|0);
      var $841=$png_ptr_addr;
      var $background_11535=(($841+326)|0);
      var $blue1536=(($background_11535+6)|0);
      var $842=HEAPU16[(($blue1536)>>1)];
      var $conv1537=(($842)&65535);
      var $843=$a1335;
      var $conv1538=(($843)&65535);
      var $sub1539=((65535-$conv1538)|0);
      var $mul1540=(($conv1537*$sub1539)|0);
      var $add1541=(($mul1534+$mul1540)|0);
      var $add1542=(($add1541+32768)|0);
      $temp1531=$add1542;
      var $844=$temp1531;
      var $845=$temp1531;
      var $shr1543=$845 >>> 16;
      var $add1544=(($844+$shr1543)|0);
      var $shr1545=$add1544 >>> 16;
      var $conv1546=(($shr1545) & 65535);
      $w1441=$conv1546;
      var $846=$optimize;
      var $tobool1547=(($846)|0)!=0;
      if ($tobool1547) { __label__ = 243; break; } else { __label__ = 242; break; }
    case 242: 
      var $847=$w1441;
      var $conv1549=(($847)&65535);
      var $shr1550=$conv1549 >> 8;
      var $848=$w1441;
      var $conv1551=(($848)&65535);
      var $and1552=$conv1551 & 255;
      var $849=$gamma_shift;
      var $shr1553=$and1552 >> (($849)|0);
      var $850=$gamma_16_from_1;
      var $arrayidx1554=(($850+($shr1553<<2))|0);
      var $851=HEAP32[(($arrayidx1554)>>2)];
      var $arrayidx1555=(($851+($shr1550<<1))|0);
      var $852=HEAP16[(($arrayidx1555)>>1)];
      $w1441=$852;
      __label__ = 243; break;
    case 243: 
      var $853=$w1441;
      var $conv1557=(($853)&65535);
      var $shr1558=$conv1557 >> 8;
      var $and1559=$shr1558 & 255;
      var $conv1560=(($and1559) & 255);
      var $854=$sp;
      var $add_ptr1561=(($854+4)|0);
      HEAP8[($add_ptr1561)]=$conv1560;
      var $855=$w1441;
      var $conv1562=(($855)&65535);
      var $and1563=$conv1562 & 255;
      var $conv1564=(($and1563) & 255);
      var $856=$sp;
      var $add_ptr1565=(($856+5)|0);
      HEAP8[($add_ptr1565)]=$conv1564;
      __label__ = 244; break;
    case 244: 
      __label__ = 245; break;
    case 245: 
      __label__ = 246; break;
    case 246: 
      var $857=$i;
      var $inc1569=(($857+1)|0);
      $i=$inc1569;
      var $858=$sp;
      var $add_ptr1570=(($858+8)|0);
      $sp=$add_ptr1570;
      __label__ = 232; break;
    case 247: 
      __label__ = 258; break;
    case 248: 
      var $859=$row_addr;
      $sp=$859;
      $i=0;
      __label__ = 249; break;
    case 249: 
      var $860=$i;
      var $861=$row_width;
      var $cmp1574=(($860)>>>0) < (($861)>>>0);
      if ($cmp1574) { __label__ = 250; break; } else { __label__ = 257; break; }
    case 250: 
      var $862=$sp;
      var $add_ptr1578=(($862+6)|0);
      var $863=HEAPU8[($add_ptr1578)];
      var $conv1579=(($863)&255);
      var $conv1580=(($conv1579)&65535);
      var $shl1581=$conv1580 << 8;
      var $864=$sp;
      var $add_ptr1582=(($864+7)|0);
      var $865=HEAPU8[($add_ptr1582)];
      var $conv1583=(($865)&255);
      var $conv1584=(($conv1583)&65535);
      var $add1585=(($shl1581+$conv1584)|0);
      var $conv1586=(($add1585) & 65535);
      $a1577=$conv1586;
      var $866=$a1577;
      var $conv1587=(($866)&65535);
      var $cmp1588=(($conv1587)|0)==0;
      if ($cmp1588) { __label__ = 251; break; } else { __label__ = 252; break; }
    case 251: 
      var $867=$png_ptr_addr;
      var $background1591=(($867+316)|0);
      var $red1592=(($background1591+2)|0);
      var $868=HEAPU16[(($red1592)>>1)];
      var $conv1593=(($868)&65535);
      var $shr1594=$conv1593 >> 8;
      var $and1595=$shr1594 & 255;
      var $conv1596=(($and1595) & 255);
      var $869=$sp;
      HEAP8[($869)]=$conv1596;
      var $870=$png_ptr_addr;
      var $background1597=(($870+316)|0);
      var $red1598=(($background1597+2)|0);
      var $871=HEAPU16[(($red1598)>>1)];
      var $conv1599=(($871)&65535);
      var $and1600=$conv1599 & 255;
      var $conv1601=(($and1600) & 255);
      var $872=$sp;
      var $add_ptr1602=(($872+1)|0);
      HEAP8[($add_ptr1602)]=$conv1601;
      var $873=$png_ptr_addr;
      var $background1603=(($873+316)|0);
      var $green1604=(($background1603+4)|0);
      var $874=HEAPU16[(($green1604)>>1)];
      var $conv1605=(($874)&65535);
      var $shr1606=$conv1605 >> 8;
      var $and1607=$shr1606 & 255;
      var $conv1608=(($and1607) & 255);
      var $875=$sp;
      var $add_ptr1609=(($875+2)|0);
      HEAP8[($add_ptr1609)]=$conv1608;
      var $876=$png_ptr_addr;
      var $background1610=(($876+316)|0);
      var $green1611=(($background1610+4)|0);
      var $877=HEAPU16[(($green1611)>>1)];
      var $conv1612=(($877)&65535);
      var $and1613=$conv1612 & 255;
      var $conv1614=(($and1613) & 255);
      var $878=$sp;
      var $add_ptr1615=(($878+3)|0);
      HEAP8[($add_ptr1615)]=$conv1614;
      var $879=$png_ptr_addr;
      var $background1616=(($879+316)|0);
      var $blue1617=(($background1616+6)|0);
      var $880=HEAPU16[(($blue1617)>>1)];
      var $conv1618=(($880)&65535);
      var $shr1619=$conv1618 >> 8;
      var $and1620=$shr1619 & 255;
      var $conv1621=(($and1620) & 255);
      var $881=$sp;
      var $add_ptr1622=(($881+4)|0);
      HEAP8[($add_ptr1622)]=$conv1621;
      var $882=$png_ptr_addr;
      var $background1623=(($882+316)|0);
      var $blue1624=(($background1623+6)|0);
      var $883=HEAPU16[(($blue1624)>>1)];
      var $conv1625=(($883)&65535);
      var $and1626=$conv1625 & 255;
      var $conv1627=(($and1626) & 255);
      var $884=$sp;
      var $add_ptr1628=(($884+5)|0);
      HEAP8[($add_ptr1628)]=$conv1627;
      __label__ = 255; break;
    case 252: 
      var $885=$a1577;
      var $conv1630=(($885)&65535);
      var $cmp1631=(($conv1630)|0) < 65535;
      if ($cmp1631) { __label__ = 253; break; } else { __label__ = 254; break; }
    case 253: 
      var $886=$sp;
      var $887=HEAPU8[($886)];
      var $conv1636=(($887)&255);
      var $shl1637=$conv1636 << 8;
      var $888=$sp;
      var $add_ptr1638=(($888+1)|0);
      var $889=HEAPU8[($add_ptr1638)];
      var $conv1639=(($889)&255);
      var $add1640=(($shl1637+$conv1639)|0);
      var $conv1641=(($add1640) & 65535);
      $r1635=$conv1641;
      var $890=$sp;
      var $add_ptr1643=(($890+2)|0);
      var $891=HEAPU8[($add_ptr1643)];
      var $conv1644=(($891)&255);
      var $shl1645=$conv1644 << 8;
      var $892=$sp;
      var $add_ptr1646=(($892+3)|0);
      var $893=HEAPU8[($add_ptr1646)];
      var $conv1647=(($893)&255);
      var $add1648=(($shl1645+$conv1647)|0);
      var $conv1649=(($add1648) & 65535);
      $g1642=$conv1649;
      var $894=$sp;
      var $add_ptr1651=(($894+4)|0);
      var $895=HEAPU8[($add_ptr1651)];
      var $conv1652=(($895)&255);
      var $shl1653=$conv1652 << 8;
      var $896=$sp;
      var $add_ptr1654=(($896+5)|0);
      var $897=HEAPU8[($add_ptr1654)];
      var $conv1655=(($897)&255);
      var $add1656=(($shl1653+$conv1655)|0);
      var $conv1657=(($add1656) & 65535);
      $b1650=$conv1657;
      var $898=$r1635;
      var $conv1659=(($898)&65535);
      var $899=$a1577;
      var $conv1660=(($899)&65535);
      var $mul1661=(($conv1659*$conv1660)|0);
      var $900=$png_ptr_addr;
      var $background1662=(($900+316)|0);
      var $red1663=(($background1662+2)|0);
      var $901=HEAPU16[(($red1663)>>1)];
      var $conv1664=(($901)&65535);
      var $902=$a1577;
      var $conv1665=(($902)&65535);
      var $sub1666=((65535-$conv1665)|0);
      var $mul1667=(($conv1664*$sub1666)|0);
      var $add1668=(($mul1661+$mul1667)|0);
      var $add1669=(($add1668+32768)|0);
      $temp1658=$add1669;
      var $903=$temp1658;
      var $904=$temp1658;
      var $shr1670=$904 >>> 16;
      var $add1671=(($903+$shr1670)|0);
      var $shr1672=$add1671 >>> 16;
      var $conv1673=(($shr1672) & 65535);
      $v1634=$conv1673;
      var $905=$v1634;
      var $conv1674=(($905)&65535);
      var $shr1675=$conv1674 >> 8;
      var $and1676=$shr1675 & 255;
      var $conv1677=(($and1676) & 255);
      var $906=$sp;
      HEAP8[($906)]=$conv1677;
      var $907=$v1634;
      var $conv1678=(($907)&65535);
      var $and1679=$conv1678 & 255;
      var $conv1680=(($and1679) & 255);
      var $908=$sp;
      var $add_ptr1681=(($908+1)|0);
      HEAP8[($add_ptr1681)]=$conv1680;
      var $909=$g1642;
      var $conv1683=(($909)&65535);
      var $910=$a1577;
      var $conv1684=(($910)&65535);
      var $mul1685=(($conv1683*$conv1684)|0);
      var $911=$png_ptr_addr;
      var $background1686=(($911+316)|0);
      var $green1687=(($background1686+4)|0);
      var $912=HEAPU16[(($green1687)>>1)];
      var $conv1688=(($912)&65535);
      var $913=$a1577;
      var $conv1689=(($913)&65535);
      var $sub1690=((65535-$conv1689)|0);
      var $mul1691=(($conv1688*$sub1690)|0);
      var $add1692=(($mul1685+$mul1691)|0);
      var $add1693=(($add1692+32768)|0);
      $temp1682=$add1693;
      var $914=$temp1682;
      var $915=$temp1682;
      var $shr1694=$915 >>> 16;
      var $add1695=(($914+$shr1694)|0);
      var $shr1696=$add1695 >>> 16;
      var $conv1697=(($shr1696) & 65535);
      $v1634=$conv1697;
      var $916=$v1634;
      var $conv1698=(($916)&65535);
      var $shr1699=$conv1698 >> 8;
      var $and1700=$shr1699 & 255;
      var $conv1701=(($and1700) & 255);
      var $917=$sp;
      var $add_ptr1702=(($917+2)|0);
      HEAP8[($add_ptr1702)]=$conv1701;
      var $918=$v1634;
      var $conv1703=(($918)&65535);
      var $and1704=$conv1703 & 255;
      var $conv1705=(($and1704) & 255);
      var $919=$sp;
      var $add_ptr1706=(($919+3)|0);
      HEAP8[($add_ptr1706)]=$conv1705;
      var $920=$b1650;
      var $conv1708=(($920)&65535);
      var $921=$a1577;
      var $conv1709=(($921)&65535);
      var $mul1710=(($conv1708*$conv1709)|0);
      var $922=$png_ptr_addr;
      var $background1711=(($922+316)|0);
      var $blue1712=(($background1711+6)|0);
      var $923=HEAPU16[(($blue1712)>>1)];
      var $conv1713=(($923)&65535);
      var $924=$a1577;
      var $conv1714=(($924)&65535);
      var $sub1715=((65535-$conv1714)|0);
      var $mul1716=(($conv1713*$sub1715)|0);
      var $add1717=(($mul1710+$mul1716)|0);
      var $add1718=(($add1717+32768)|0);
      $temp1707=$add1718;
      var $925=$temp1707;
      var $926=$temp1707;
      var $shr1719=$926 >>> 16;
      var $add1720=(($925+$shr1719)|0);
      var $shr1721=$add1720 >>> 16;
      var $conv1722=(($shr1721) & 65535);
      $v1634=$conv1722;
      var $927=$v1634;
      var $conv1723=(($927)&65535);
      var $shr1724=$conv1723 >> 8;
      var $and1725=$shr1724 & 255;
      var $conv1726=(($and1725) & 255);
      var $928=$sp;
      var $add_ptr1727=(($928+4)|0);
      HEAP8[($add_ptr1727)]=$conv1726;
      var $929=$v1634;
      var $conv1728=(($929)&65535);
      var $and1729=$conv1728 & 255;
      var $conv1730=(($and1729) & 255);
      var $930=$sp;
      var $add_ptr1731=(($930+5)|0);
      HEAP8[($add_ptr1731)]=$conv1730;
      __label__ = 254; break;
    case 254: 
      __label__ = 255; break;
    case 255: 
      __label__ = 256; break;
    case 256: 
      var $931=$i;
      var $inc1735=(($931+1)|0);
      $i=$inc1735;
      var $932=$sp;
      var $add_ptr1736=(($932+8)|0);
      $sp=$add_ptr1736;
      __label__ = 249; break;
    case 257: 
      __label__ = 258; break;
    case 258: 
      __label__ = 259; break;
    case 259: 
      __label__ = 261; break;
    case 260: 
      __label__ = 261; break;
    case 261: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_compose["X"]=1;

function _png_do_gamma($row_info, $row, $png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $png_ptr_addr;
      var $gamma_table;
      var $gamma_16_table;
      var $gamma_shift;
      var $sp;
      var $i;
      var $row_width;
      var $v;
      var $v105;
      var $v176;
      var $a;
      var $b;
      var $c;
      var $d;
      var $msb;
      var $lsb;
      var $v313;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $gamma_table1=(($0+360)|0);
      var $1=HEAP32[(($gamma_table1)>>2)];
      $gamma_table=$1;
      var $2=$png_ptr_addr;
      var $gamma_16_table2=(($2+364)|0);
      var $3=HEAP32[(($gamma_16_table2)>>2)];
      $gamma_16_table=$3;
      var $4=$png_ptr_addr;
      var $gamma_shift3=(($4+348)|0);
      var $5=HEAP32[(($gamma_shift3)>>2)];
      $gamma_shift=$5;
      var $6=$row_info_addr;
      var $width=(($6)|0);
      var $7=HEAP32[(($width)>>2)];
      $row_width=$7;
      var $8=$row_info_addr;
      var $bit_depth=(($8+9)|0);
      var $9=HEAPU8[($bit_depth)];
      var $conv=(($9)&255);
      var $cmp=(($conv)|0) <= 8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $10=$gamma_table;
      var $cmp5=(($10)|0)!=0;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $11=$row_info_addr;
      var $bit_depth7=(($11+9)|0);
      var $12=HEAPU8[($bit_depth7)];
      var $conv8=(($12)&255);
      var $cmp9=(($conv8)|0)==16;
      if ($cmp9) { __label__ = 4; break; } else { __label__ = 71; break; }
    case 4: 
      var $13=$gamma_16_table;
      var $cmp12=(($13)|0)!=0;
      if ($cmp12) { __label__ = 5; break; } else { __label__ = 71; break; }
    case 5: 
      var $14=$row_info_addr;
      var $color_type=(($14+8)|0);
      var $15=HEAPU8[($color_type)];
      var $conv14=(($15)&255);
      if ((($conv14)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($conv14)|0) == 6) {
        __label__ = 18; break;
      }
      else if ((($conv14)|0) == 4) {
        __label__ = 30; break;
      }
      else if ((($conv14)|0) == 0) {
        __label__ = 42; break;
      }
      else {
      __label__ = 69; break;
      }
      
    case 6: 
      var $16=$row_info_addr;
      var $bit_depth15=(($16+9)|0);
      var $17=HEAPU8[($bit_depth15)];
      var $conv16=(($17)&255);
      var $cmp17=(($conv16)|0)==8;
      if ($cmp17) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $18=$row_addr;
      $sp=$18;
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $19=$i;
      var $20=$row_width;
      var $cmp20=(($19)>>>0) < (($20)>>>0);
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $21=$sp;
      var $22=HEAPU8[($21)];
      var $idxprom=(($22)&255);
      var $23=$gamma_table;
      var $arrayidx=(($23+$idxprom)|0);
      var $24=HEAP8[($arrayidx)];
      var $25=$sp;
      HEAP8[($25)]=$24;
      var $26=$sp;
      var $incdec_ptr=(($26+1)|0);
      $sp=$incdec_ptr;
      var $27=$sp;
      var $28=HEAPU8[($27)];
      var $idxprom22=(($28)&255);
      var $29=$gamma_table;
      var $arrayidx23=(($29+$idxprom22)|0);
      var $30=HEAP8[($arrayidx23)];
      var $31=$sp;
      HEAP8[($31)]=$30;
      var $32=$sp;
      var $incdec_ptr24=(($32+1)|0);
      $sp=$incdec_ptr24;
      var $33=$sp;
      var $34=HEAPU8[($33)];
      var $idxprom25=(($34)&255);
      var $35=$gamma_table;
      var $arrayidx26=(($35+$idxprom25)|0);
      var $36=HEAP8[($arrayidx26)];
      var $37=$sp;
      HEAP8[($37)]=$36;
      var $38=$sp;
      var $incdec_ptr27=(($38+1)|0);
      $sp=$incdec_ptr27;
      __label__ = 10; break;
    case 10: 
      var $39=$i;
      var $inc=(($39+1)|0);
      $i=$inc;
      __label__ = 8; break;
    case 11: 
      __label__ = 17; break;
    case 12: 
      var $40=$row_addr;
      $sp=$40;
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $41=$i;
      var $42=$row_width;
      var $cmp29=(($41)>>>0) < (($42)>>>0);
      if ($cmp29) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $43=$sp;
      var $44=HEAPU8[($43)];
      var $idxprom32=(($44)&255);
      var $45=$sp;
      var $add_ptr=(($45+1)|0);
      var $46=HEAPU8[($add_ptr)];
      var $conv33=(($46)&255);
      var $47=$gamma_shift;
      var $shr=$conv33 >> (($47)|0);
      var $48=$gamma_16_table;
      var $arrayidx34=(($48+($shr<<2))|0);
      var $49=HEAP32[(($arrayidx34)>>2)];
      var $arrayidx35=(($49+($idxprom32<<1))|0);
      var $50=HEAP16[(($arrayidx35)>>1)];
      $v=$50;
      var $51=$v;
      var $conv36=(($51)&65535);
      var $shr37=$conv36 >> 8;
      var $and=$shr37 & 255;
      var $conv38=(($and) & 255);
      var $52=$sp;
      HEAP8[($52)]=$conv38;
      var $53=$v;
      var $conv39=(($53)&65535);
      var $and40=$conv39 & 255;
      var $conv41=(($and40) & 255);
      var $54=$sp;
      var $add_ptr42=(($54+1)|0);
      HEAP8[($add_ptr42)]=$conv41;
      var $55=$sp;
      var $add_ptr43=(($55+2)|0);
      $sp=$add_ptr43;
      var $56=$sp;
      var $57=HEAPU8[($56)];
      var $idxprom44=(($57)&255);
      var $58=$sp;
      var $add_ptr45=(($58+1)|0);
      var $59=HEAPU8[($add_ptr45)];
      var $conv46=(($59)&255);
      var $60=$gamma_shift;
      var $shr47=$conv46 >> (($60)|0);
      var $61=$gamma_16_table;
      var $arrayidx48=(($61+($shr47<<2))|0);
      var $62=HEAP32[(($arrayidx48)>>2)];
      var $arrayidx49=(($62+($idxprom44<<1))|0);
      var $63=HEAP16[(($arrayidx49)>>1)];
      $v=$63;
      var $64=$v;
      var $conv50=(($64)&65535);
      var $shr51=$conv50 >> 8;
      var $and52=$shr51 & 255;
      var $conv53=(($and52) & 255);
      var $65=$sp;
      HEAP8[($65)]=$conv53;
      var $66=$v;
      var $conv54=(($66)&65535);
      var $and55=$conv54 & 255;
      var $conv56=(($and55) & 255);
      var $67=$sp;
      var $add_ptr57=(($67+1)|0);
      HEAP8[($add_ptr57)]=$conv56;
      var $68=$sp;
      var $add_ptr58=(($68+2)|0);
      $sp=$add_ptr58;
      var $69=$sp;
      var $70=HEAPU8[($69)];
      var $idxprom59=(($70)&255);
      var $71=$sp;
      var $add_ptr60=(($71+1)|0);
      var $72=HEAPU8[($add_ptr60)];
      var $conv61=(($72)&255);
      var $73=$gamma_shift;
      var $shr62=$conv61 >> (($73)|0);
      var $74=$gamma_16_table;
      var $arrayidx63=(($74+($shr62<<2))|0);
      var $75=HEAP32[(($arrayidx63)>>2)];
      var $arrayidx64=(($75+($idxprom59<<1))|0);
      var $76=HEAP16[(($arrayidx64)>>1)];
      $v=$76;
      var $77=$v;
      var $conv65=(($77)&65535);
      var $shr66=$conv65 >> 8;
      var $and67=$shr66 & 255;
      var $conv68=(($and67) & 255);
      var $78=$sp;
      HEAP8[($78)]=$conv68;
      var $79=$v;
      var $conv69=(($79)&65535);
      var $and70=$conv69 & 255;
      var $conv71=(($and70) & 255);
      var $80=$sp;
      var $add_ptr72=(($80+1)|0);
      HEAP8[($add_ptr72)]=$conv71;
      var $81=$sp;
      var $add_ptr73=(($81+2)|0);
      $sp=$add_ptr73;
      __label__ = 15; break;
    case 15: 
      var $82=$i;
      var $inc75=(($82+1)|0);
      $i=$inc75;
      __label__ = 13; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 70; break;
    case 18: 
      var $83=$row_info_addr;
      var $bit_depth78=(($83+9)|0);
      var $84=HEAPU8[($bit_depth78)];
      var $conv79=(($84)&255);
      var $cmp80=(($conv79)|0)==8;
      if ($cmp80) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: 
      var $85=$row_addr;
      $sp=$85;
      $i=0;
      __label__ = 20; break;
    case 20: 
      var $86=$i;
      var $87=$row_width;
      var $cmp84=(($86)>>>0) < (($87)>>>0);
      if ($cmp84) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $88=$sp;
      var $89=HEAPU8[($88)];
      var $idxprom87=(($89)&255);
      var $90=$gamma_table;
      var $arrayidx88=(($90+$idxprom87)|0);
      var $91=HEAP8[($arrayidx88)];
      var $92=$sp;
      HEAP8[($92)]=$91;
      var $93=$sp;
      var $incdec_ptr89=(($93+1)|0);
      $sp=$incdec_ptr89;
      var $94=$sp;
      var $95=HEAPU8[($94)];
      var $idxprom90=(($95)&255);
      var $96=$gamma_table;
      var $arrayidx91=(($96+$idxprom90)|0);
      var $97=HEAP8[($arrayidx91)];
      var $98=$sp;
      HEAP8[($98)]=$97;
      var $99=$sp;
      var $incdec_ptr92=(($99+1)|0);
      $sp=$incdec_ptr92;
      var $100=$sp;
      var $101=HEAPU8[($100)];
      var $idxprom93=(($101)&255);
      var $102=$gamma_table;
      var $arrayidx94=(($102+$idxprom93)|0);
      var $103=HEAP8[($arrayidx94)];
      var $104=$sp;
      HEAP8[($104)]=$103;
      var $105=$sp;
      var $incdec_ptr95=(($105+1)|0);
      $sp=$incdec_ptr95;
      var $106=$sp;
      var $incdec_ptr96=(($106+1)|0);
      $sp=$incdec_ptr96;
      __label__ = 22; break;
    case 22: 
      var $107=$i;
      var $inc98=(($107+1)|0);
      $i=$inc98;
      __label__ = 20; break;
    case 23: 
      __label__ = 29; break;
    case 24: 
      var $108=$row_addr;
      $sp=$108;
      $i=0;
      __label__ = 25; break;
    case 25: 
      var $109=$i;
      var $110=$row_width;
      var $cmp102=(($109)>>>0) < (($110)>>>0);
      if ($cmp102) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $111=$sp;
      var $112=HEAPU8[($111)];
      var $idxprom106=(($112)&255);
      var $113=$sp;
      var $add_ptr107=(($113+1)|0);
      var $114=HEAPU8[($add_ptr107)];
      var $conv108=(($114)&255);
      var $115=$gamma_shift;
      var $shr109=$conv108 >> (($115)|0);
      var $116=$gamma_16_table;
      var $arrayidx110=(($116+($shr109<<2))|0);
      var $117=HEAP32[(($arrayidx110)>>2)];
      var $arrayidx111=(($117+($idxprom106<<1))|0);
      var $118=HEAP16[(($arrayidx111)>>1)];
      $v105=$118;
      var $119=$v105;
      var $conv112=(($119)&65535);
      var $shr113=$conv112 >> 8;
      var $and114=$shr113 & 255;
      var $conv115=(($and114) & 255);
      var $120=$sp;
      HEAP8[($120)]=$conv115;
      var $121=$v105;
      var $conv116=(($121)&65535);
      var $and117=$conv116 & 255;
      var $conv118=(($and117) & 255);
      var $122=$sp;
      var $add_ptr119=(($122+1)|0);
      HEAP8[($add_ptr119)]=$conv118;
      var $123=$sp;
      var $add_ptr120=(($123+2)|0);
      $sp=$add_ptr120;
      var $124=$sp;
      var $125=HEAPU8[($124)];
      var $idxprom121=(($125)&255);
      var $126=$sp;
      var $add_ptr122=(($126+1)|0);
      var $127=HEAPU8[($add_ptr122)];
      var $conv123=(($127)&255);
      var $128=$gamma_shift;
      var $shr124=$conv123 >> (($128)|0);
      var $129=$gamma_16_table;
      var $arrayidx125=(($129+($shr124<<2))|0);
      var $130=HEAP32[(($arrayidx125)>>2)];
      var $arrayidx126=(($130+($idxprom121<<1))|0);
      var $131=HEAP16[(($arrayidx126)>>1)];
      $v105=$131;
      var $132=$v105;
      var $conv127=(($132)&65535);
      var $shr128=$conv127 >> 8;
      var $and129=$shr128 & 255;
      var $conv130=(($and129) & 255);
      var $133=$sp;
      HEAP8[($133)]=$conv130;
      var $134=$v105;
      var $conv131=(($134)&65535);
      var $and132=$conv131 & 255;
      var $conv133=(($and132) & 255);
      var $135=$sp;
      var $add_ptr134=(($135+1)|0);
      HEAP8[($add_ptr134)]=$conv133;
      var $136=$sp;
      var $add_ptr135=(($136+2)|0);
      $sp=$add_ptr135;
      var $137=$sp;
      var $138=HEAPU8[($137)];
      var $idxprom136=(($138)&255);
      var $139=$sp;
      var $add_ptr137=(($139+1)|0);
      var $140=HEAPU8[($add_ptr137)];
      var $conv138=(($140)&255);
      var $141=$gamma_shift;
      var $shr139=$conv138 >> (($141)|0);
      var $142=$gamma_16_table;
      var $arrayidx140=(($142+($shr139<<2))|0);
      var $143=HEAP32[(($arrayidx140)>>2)];
      var $arrayidx141=(($143+($idxprom136<<1))|0);
      var $144=HEAP16[(($arrayidx141)>>1)];
      $v105=$144;
      var $145=$v105;
      var $conv142=(($145)&65535);
      var $shr143=$conv142 >> 8;
      var $and144=$shr143 & 255;
      var $conv145=(($and144) & 255);
      var $146=$sp;
      HEAP8[($146)]=$conv145;
      var $147=$v105;
      var $conv146=(($147)&65535);
      var $and147=$conv146 & 255;
      var $conv148=(($and147) & 255);
      var $148=$sp;
      var $add_ptr149=(($148+1)|0);
      HEAP8[($add_ptr149)]=$conv148;
      var $149=$sp;
      var $add_ptr150=(($149+4)|0);
      $sp=$add_ptr150;
      __label__ = 27; break;
    case 27: 
      var $150=$i;
      var $inc152=(($150+1)|0);
      $i=$inc152;
      __label__ = 25; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 70; break;
    case 30: 
      var $151=$row_info_addr;
      var $bit_depth156=(($151+9)|0);
      var $152=HEAPU8[($bit_depth156)];
      var $conv157=(($152)&255);
      var $cmp158=(($conv157)|0)==8;
      if ($cmp158) { __label__ = 31; break; } else { __label__ = 36; break; }
    case 31: 
      var $153=$row_addr;
      $sp=$153;
      $i=0;
      __label__ = 32; break;
    case 32: 
      var $154=$i;
      var $155=$row_width;
      var $cmp162=(($154)>>>0) < (($155)>>>0);
      if ($cmp162) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: 
      var $156=$sp;
      var $157=HEAPU8[($156)];
      var $idxprom165=(($157)&255);
      var $158=$gamma_table;
      var $arrayidx166=(($158+$idxprom165)|0);
      var $159=HEAP8[($arrayidx166)];
      var $160=$sp;
      HEAP8[($160)]=$159;
      var $161=$sp;
      var $add_ptr167=(($161+2)|0);
      $sp=$add_ptr167;
      __label__ = 34; break;
    case 34: 
      var $162=$i;
      var $inc169=(($162+1)|0);
      $i=$inc169;
      __label__ = 32; break;
    case 35: 
      __label__ = 41; break;
    case 36: 
      var $163=$row_addr;
      $sp=$163;
      $i=0;
      __label__ = 37; break;
    case 37: 
      var $164=$i;
      var $165=$row_width;
      var $cmp173=(($164)>>>0) < (($165)>>>0);
      if ($cmp173) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $166=$sp;
      var $167=HEAPU8[($166)];
      var $idxprom177=(($167)&255);
      var $168=$sp;
      var $add_ptr178=(($168+1)|0);
      var $169=HEAPU8[($add_ptr178)];
      var $conv179=(($169)&255);
      var $170=$gamma_shift;
      var $shr180=$conv179 >> (($170)|0);
      var $171=$gamma_16_table;
      var $arrayidx181=(($171+($shr180<<2))|0);
      var $172=HEAP32[(($arrayidx181)>>2)];
      var $arrayidx182=(($172+($idxprom177<<1))|0);
      var $173=HEAP16[(($arrayidx182)>>1)];
      $v176=$173;
      var $174=$v176;
      var $conv183=(($174)&65535);
      var $shr184=$conv183 >> 8;
      var $and185=$shr184 & 255;
      var $conv186=(($and185) & 255);
      var $175=$sp;
      HEAP8[($175)]=$conv186;
      var $176=$v176;
      var $conv187=(($176)&65535);
      var $and188=$conv187 & 255;
      var $conv189=(($and188) & 255);
      var $177=$sp;
      var $add_ptr190=(($177+1)|0);
      HEAP8[($add_ptr190)]=$conv189;
      var $178=$sp;
      var $add_ptr191=(($178+4)|0);
      $sp=$add_ptr191;
      __label__ = 39; break;
    case 39: 
      var $179=$i;
      var $inc193=(($179+1)|0);
      $i=$inc193;
      __label__ = 37; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 70; break;
    case 42: 
      var $180=$row_info_addr;
      var $bit_depth197=(($180+9)|0);
      var $181=HEAPU8[($bit_depth197)];
      var $conv198=(($181)&255);
      var $cmp199=(($conv198)|0)==2;
      if ($cmp199) { __label__ = 43; break; } else { __label__ = 48; break; }
    case 43: 
      var $182=$row_addr;
      $sp=$182;
      $i=0;
      __label__ = 44; break;
    case 44: 
      var $183=$i;
      var $184=$row_width;
      var $cmp203=(($183)>>>0) < (($184)>>>0);
      if ($cmp203) { __label__ = 45; break; } else { __label__ = 47; break; }
    case 45: 
      var $185=$sp;
      var $186=HEAPU8[($185)];
      var $conv206=(($186)&255);
      var $and207=$conv206 & 192;
      $a=$and207;
      var $187=$sp;
      var $188=HEAPU8[($187)];
      var $conv208=(($188)&255);
      var $and209=$conv208 & 48;
      $b=$and209;
      var $189=$sp;
      var $190=HEAPU8[($189)];
      var $conv210=(($190)&255);
      var $and211=$conv210 & 12;
      $c=$and211;
      var $191=$sp;
      var $192=HEAPU8[($191)];
      var $conv212=(($192)&255);
      var $and213=$conv212 & 3;
      $d=$and213;
      var $193=$a;
      var $194=$a;
      var $shr214=$194 >> 2;
      var $or=$193 | $shr214;
      var $195=$a;
      var $shr215=$195 >> 4;
      var $or216=$or | $shr215;
      var $196=$a;
      var $shr217=$196 >> 6;
      var $or218=$or216 | $shr217;
      var $197=$gamma_table;
      var $arrayidx219=(($197+$or218)|0);
      var $198=HEAPU8[($arrayidx219)];
      var $conv220=(($198)&255);
      var $and221=$conv220 & 192;
      var $199=$b;
      var $shl=$199 << 2;
      var $200=$b;
      var $or222=$shl | $200;
      var $201=$b;
      var $shr223=$201 >> 2;
      var $or224=$or222 | $shr223;
      var $202=$b;
      var $shr225=$202 >> 4;
      var $or226=$or224 | $shr225;
      var $203=$gamma_table;
      var $arrayidx227=(($203+$or226)|0);
      var $204=HEAPU8[($arrayidx227)];
      var $conv228=(($204)&255);
      var $shr229=$conv228 >> 2;
      var $and230=$shr229 & 48;
      var $or231=$and221 | $and230;
      var $205=$c;
      var $shl232=$205 << 4;
      var $206=$c;
      var $shl233=$206 << 2;
      var $or234=$shl232 | $shl233;
      var $207=$c;
      var $or235=$or234 | $207;
      var $208=$c;
      var $shr236=$208 >> 2;
      var $or237=$or235 | $shr236;
      var $209=$gamma_table;
      var $arrayidx238=(($209+$or237)|0);
      var $210=HEAPU8[($arrayidx238)];
      var $conv239=(($210)&255);
      var $shr240=$conv239 >> 4;
      var $and241=$shr240 & 12;
      var $or242=$or231 | $and241;
      var $211=$d;
      var $shl243=$211 << 6;
      var $212=$d;
      var $shl244=$212 << 4;
      var $or245=$shl243 | $shl244;
      var $213=$d;
      var $shl246=$213 << 2;
      var $or247=$or245 | $shl246;
      var $214=$d;
      var $or248=$or247 | $214;
      var $215=$gamma_table;
      var $arrayidx249=(($215+$or248)|0);
      var $216=HEAPU8[($arrayidx249)];
      var $conv250=(($216)&255);
      var $shr251=$conv250 >> 6;
      var $or252=$or242 | $shr251;
      var $conv253=(($or252) & 255);
      var $217=$sp;
      HEAP8[($217)]=$conv253;
      var $218=$sp;
      var $incdec_ptr254=(($218+1)|0);
      $sp=$incdec_ptr254;
      __label__ = 46; break;
    case 46: 
      var $219=$i;
      var $add=(($219+4)|0);
      $i=$add;
      __label__ = 44; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      var $220=$row_info_addr;
      var $bit_depth258=(($220+9)|0);
      var $221=HEAPU8[($bit_depth258)];
      var $conv259=(($221)&255);
      var $cmp260=(($conv259)|0)==4;
      if ($cmp260) { __label__ = 49; break; } else { __label__ = 54; break; }
    case 49: 
      var $222=$row_addr;
      $sp=$222;
      $i=0;
      __label__ = 50; break;
    case 50: 
      var $223=$i;
      var $224=$row_width;
      var $cmp264=(($223)>>>0) < (($224)>>>0);
      if ($cmp264) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: 
      var $225=$sp;
      var $226=HEAPU8[($225)];
      var $conv267=(($226)&255);
      var $and268=$conv267 & 240;
      $msb=$and268;
      var $227=$sp;
      var $228=HEAPU8[($227)];
      var $conv269=(($228)&255);
      var $and270=$conv269 & 15;
      $lsb=$and270;
      var $229=$msb;
      var $230=$msb;
      var $shr271=$230 >> 4;
      var $or272=$229 | $shr271;
      var $231=$gamma_table;
      var $arrayidx273=(($231+$or272)|0);
      var $232=HEAPU8[($arrayidx273)];
      var $conv274=(($232)&255);
      var $and275=$conv274 & 240;
      var $233=$lsb;
      var $shl276=$233 << 4;
      var $234=$lsb;
      var $or277=$shl276 | $234;
      var $235=$gamma_table;
      var $arrayidx278=(($235+$or277)|0);
      var $236=HEAPU8[($arrayidx278)];
      var $conv279=(($236)&255);
      var $shr280=$conv279 >> 4;
      var $or281=$and275 | $shr280;
      var $conv282=(($or281) & 255);
      var $237=$sp;
      HEAP8[($237)]=$conv282;
      var $238=$sp;
      var $incdec_ptr283=(($238+1)|0);
      $sp=$incdec_ptr283;
      __label__ = 52; break;
    case 52: 
      var $239=$i;
      var $add285=(($239+2)|0);
      $i=$add285;
      __label__ = 50; break;
    case 53: 
      __label__ = 68; break;
    case 54: 
      var $240=$row_info_addr;
      var $bit_depth288=(($240+9)|0);
      var $241=HEAPU8[($bit_depth288)];
      var $conv289=(($241)&255);
      var $cmp290=(($conv289)|0)==8;
      if ($cmp290) { __label__ = 55; break; } else { __label__ = 60; break; }
    case 55: 
      var $242=$row_addr;
      $sp=$242;
      $i=0;
      __label__ = 56; break;
    case 56: 
      var $243=$i;
      var $244=$row_width;
      var $cmp294=(($243)>>>0) < (($244)>>>0);
      if ($cmp294) { __label__ = 57; break; } else { __label__ = 59; break; }
    case 57: 
      var $245=$sp;
      var $246=HEAPU8[($245)];
      var $idxprom297=(($246)&255);
      var $247=$gamma_table;
      var $arrayidx298=(($247+$idxprom297)|0);
      var $248=HEAP8[($arrayidx298)];
      var $249=$sp;
      HEAP8[($249)]=$248;
      var $250=$sp;
      var $incdec_ptr299=(($250+1)|0);
      $sp=$incdec_ptr299;
      __label__ = 58; break;
    case 58: 
      var $251=$i;
      var $inc301=(($251+1)|0);
      $i=$inc301;
      __label__ = 56; break;
    case 59: 
      __label__ = 67; break;
    case 60: 
      var $252=$row_info_addr;
      var $bit_depth304=(($252+9)|0);
      var $253=HEAPU8[($bit_depth304)];
      var $conv305=(($253)&255);
      var $cmp306=(($conv305)|0)==16;
      if ($cmp306) { __label__ = 61; break; } else { __label__ = 66; break; }
    case 61: 
      var $254=$row_addr;
      $sp=$254;
      $i=0;
      __label__ = 62; break;
    case 62: 
      var $255=$i;
      var $256=$row_width;
      var $cmp310=(($255)>>>0) < (($256)>>>0);
      if ($cmp310) { __label__ = 63; break; } else { __label__ = 65; break; }
    case 63: 
      var $257=$sp;
      var $258=HEAPU8[($257)];
      var $idxprom314=(($258)&255);
      var $259=$sp;
      var $add_ptr315=(($259+1)|0);
      var $260=HEAPU8[($add_ptr315)];
      var $conv316=(($260)&255);
      var $261=$gamma_shift;
      var $shr317=$conv316 >> (($261)|0);
      var $262=$gamma_16_table;
      var $arrayidx318=(($262+($shr317<<2))|0);
      var $263=HEAP32[(($arrayidx318)>>2)];
      var $arrayidx319=(($263+($idxprom314<<1))|0);
      var $264=HEAP16[(($arrayidx319)>>1)];
      $v313=$264;
      var $265=$v313;
      var $conv320=(($265)&65535);
      var $shr321=$conv320 >> 8;
      var $and322=$shr321 & 255;
      var $conv323=(($and322) & 255);
      var $266=$sp;
      HEAP8[($266)]=$conv323;
      var $267=$v313;
      var $conv324=(($267)&65535);
      var $and325=$conv324 & 255;
      var $conv326=(($and325) & 255);
      var $268=$sp;
      var $add_ptr327=(($268+1)|0);
      HEAP8[($add_ptr327)]=$conv326;
      var $269=$sp;
      var $add_ptr328=(($269+2)|0);
      $sp=$add_ptr328;
      __label__ = 64; break;
    case 64: 
      var $270=$i;
      var $inc330=(($270+1)|0);
      $i=$inc330;
      __label__ = 62; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      __label__ = 70; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_gamma["X"]=1;

function _png_do_scale_16_to_8($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $sp;
      var $dp;
      var $ep;
      var $tmp;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $bit_depth=(($0+9)|0);
      var $1=HEAPU8[($bit_depth)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==16;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $2=$row_addr;
      $sp=$2;
      var $3=$row_addr;
      $dp=$3;
      var $4=$sp;
      var $5=$row_info_addr;
      var $rowbytes=(($5+4)|0);
      var $6=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($4+$6)|0);
      $ep=$add_ptr;
      __label__ = 3; break;
    case 3: 
      var $7=$sp;
      var $8=$ep;
      var $cmp2=(($7)>>>0) < (($8)>>>0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $9=$sp;
      var $incdec_ptr=(($9+1)|0);
      $sp=$incdec_ptr;
      var $10=HEAPU8[($9)];
      var $conv4=(($10)&255);
      $tmp=$conv4;
      var $11=$sp;
      var $incdec_ptr5=(($11+1)|0);
      $sp=$incdec_ptr5;
      var $12=HEAPU8[($11)];
      var $conv6=(($12)&255);
      var $13=$tmp;
      var $sub=(($conv6-$13)|0);
      var $add=(($sub+128)|0);
      var $mul=(($add*65535)|0);
      var $shr=$mul >> 24;
      var $14=$tmp;
      var $add7=(($14+$shr)|0);
      $tmp=$add7;
      var $15=$tmp;
      var $conv8=(($15) & 255);
      var $16=$dp;
      var $incdec_ptr9=(($16+1)|0);
      $dp=$incdec_ptr9;
      HEAP8[($16)]=$conv8;
      __label__ = 3; break;
    case 5: 
      var $17=$row_info_addr;
      var $bit_depth10=(($17+9)|0);
      HEAP8[($bit_depth10)]=8;
      var $18=$row_info_addr;
      var $channels=(($18+10)|0);
      var $19=HEAPU8[($channels)];
      var $conv11=(($19)&255);
      var $mul12=((($conv11<<3))|0);
      var $conv13=(($mul12) & 255);
      var $20=$row_info_addr;
      var $pixel_depth=(($20+11)|0);
      HEAP8[($pixel_depth)]=$conv13;
      var $21=$row_info_addr;
      var $width=(($21)|0);
      var $22=HEAP32[(($width)>>2)];
      var $23=$row_info_addr;
      var $channels14=(($23+10)|0);
      var $24=HEAPU8[($channels14)];
      var $conv15=(($24)&255);
      var $mul16=(($22*$conv15)|0);
      var $25=$row_info_addr;
      var $rowbytes17=(($25+4)|0);
      HEAP32[(($rowbytes17)>>2)]=$mul16;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_scale_16_to_8["X"]=1;

function _png_do_chop($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $sp;
      var $dp;
      var $ep;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $bit_depth=(($0+9)|0);
      var $1=HEAPU8[($bit_depth)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==16;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $2=$row_addr;
      $sp=$2;
      var $3=$row_addr;
      $dp=$3;
      var $4=$sp;
      var $5=$row_info_addr;
      var $rowbytes=(($5+4)|0);
      var $6=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($4+$6)|0);
      $ep=$add_ptr;
      __label__ = 3; break;
    case 3: 
      var $7=$sp;
      var $8=$ep;
      var $cmp2=(($7)>>>0) < (($8)>>>0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $9=$sp;
      var $10=HEAP8[($9)];
      var $11=$dp;
      var $incdec_ptr=(($11+1)|0);
      $dp=$incdec_ptr;
      HEAP8[($11)]=$10;
      var $12=$sp;
      var $add_ptr4=(($12+2)|0);
      $sp=$add_ptr4;
      __label__ = 3; break;
    case 5: 
      var $13=$row_info_addr;
      var $bit_depth5=(($13+9)|0);
      HEAP8[($bit_depth5)]=8;
      var $14=$row_info_addr;
      var $channels=(($14+10)|0);
      var $15=HEAPU8[($channels)];
      var $conv6=(($15)&255);
      var $mul=((($conv6<<3))|0);
      var $conv7=(($mul) & 255);
      var $16=$row_info_addr;
      var $pixel_depth=(($16+11)|0);
      HEAP8[($pixel_depth)]=$conv7;
      var $17=$row_info_addr;
      var $width=(($17)|0);
      var $18=HEAP32[(($width)>>2)];
      var $19=$row_info_addr;
      var $channels8=(($19+10)|0);
      var $20=HEAPU8[($channels8)];
      var $conv9=(($20)&255);
      var $mul10=(($18*$conv9)|0);
      var $21=$row_info_addr;
      var $rowbytes11=(($21+4)|0);
      HEAP32[(($rowbytes11)>>2)]=$mul10;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_chop["X"]=1;

function _png_do_quantize($row_info, $row, $palette_lookup, $quantize_lookup) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $palette_lookup_addr;
      var $quantize_lookup_addr;
      var $sp;
      var $dp;
      var $i;
      var $row_width;
      var $r;
      var $g;
      var $b;
      var $p;
      var $r41;
      var $g42;
      var $b43;
      var $p44;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $palette_lookup_addr=$palette_lookup;
      $quantize_lookup_addr=$quantize_lookup;
      var $0=$row_info_addr;
      var $width=(($0)|0);
      var $1=HEAP32[(($width)>>2)];
      $row_width=$1;
      var $2=$row_info_addr;
      var $bit_depth=(($2+9)|0);
      var $3=HEAPU8[($bit_depth)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 32; break; }
    case 2: 
      var $4=$row_info_addr;
      var $color_type=(($4+8)|0);
      var $5=HEAPU8[($color_type)];
      var $conv2=(($5)&255);
      var $cmp3=(($conv2)|0)==2;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 3: 
      var $6=$palette_lookup_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $7=$row_addr;
      $sp=$7;
      var $8=$row_addr;
      $dp=$8;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $9=$i;
      var $10=$row_width;
      var $cmp6=(($9)>>>0) < (($10)>>>0);
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $11=$sp;
      var $incdec_ptr=(($11+1)|0);
      $sp=$incdec_ptr;
      var $12=HEAPU8[($11)];
      var $conv8=(($12)&255);
      $r=$conv8;
      var $13=$sp;
      var $incdec_ptr9=(($13+1)|0);
      $sp=$incdec_ptr9;
      var $14=HEAPU8[($13)];
      var $conv10=(($14)&255);
      $g=$conv10;
      var $15=$sp;
      var $incdec_ptr11=(($15+1)|0);
      $sp=$incdec_ptr11;
      var $16=HEAPU8[($15)];
      var $conv12=(($16)&255);
      $b=$conv12;
      var $17=$r;
      var $shr=$17 >> 3;
      var $and=$shr & 31;
      var $shl=$and << 10;
      var $18=$g;
      var $shr13=$18 >> 3;
      var $and14=$shr13 & 31;
      var $shl15=$and14 << 5;
      var $or=$shl | $shl15;
      var $19=$b;
      var $shr16=$19 >> 3;
      var $and17=$shr16 & 31;
      var $or18=$or | $and17;
      $p=$or18;
      var $20=$p;
      var $21=$palette_lookup_addr;
      var $arrayidx=(($21+$20)|0);
      var $22=HEAP8[($arrayidx)];
      var $23=$dp;
      var $incdec_ptr19=(($23+1)|0);
      $dp=$incdec_ptr19;
      HEAP8[($23)]=$22;
      __label__ = 7; break;
    case 7: 
      var $24=$i;
      var $inc=(($24+1)|0);
      $i=$inc;
      __label__ = 5; break;
    case 8: 
      var $25=$row_info_addr;
      var $color_type20=(($25+8)|0);
      HEAP8[($color_type20)]=3;
      var $26=$row_info_addr;
      var $channels=(($26+10)|0);
      HEAP8[($channels)]=1;
      var $27=$row_info_addr;
      var $bit_depth21=(($27+9)|0);
      var $28=HEAP8[($bit_depth21)];
      var $29=$row_info_addr;
      var $pixel_depth=(($29+11)|0);
      HEAP8[($pixel_depth)]=$28;
      var $30=$row_info_addr;
      var $pixel_depth22=(($30+11)|0);
      var $31=HEAPU8[($pixel_depth22)];
      var $conv23=(($31)&255);
      var $cmp24=(($conv23)|0) >= 8;
      if ($cmp24) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $32=$row_width;
      var $33=$row_info_addr;
      var $pixel_depth26=(($33+11)|0);
      var $34=HEAPU8[($pixel_depth26)];
      var $conv27=(($34)&255);
      var $shr28=$conv27 >>> 3;
      var $mul=(($32*$shr28)|0);
      var $cond = $mul;__label__ = 11; break;
    case 10: 
      var $35=$row_width;
      var $36=$row_info_addr;
      var $pixel_depth29=(($36+11)|0);
      var $37=HEAPU8[($pixel_depth29)];
      var $conv30=(($37)&255);
      var $mul31=(($35*$conv30)|0);
      var $add=(($mul31+7)|0);
      var $shr32=$add >>> 3;
      var $cond = $shr32;__label__ = 11; break;
    case 11: 
      var $cond;
      var $38=$row_info_addr;
      var $rowbytes=(($38+4)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      __label__ = 31; break;
    case 12: 
      var $39=$row_info_addr;
      var $color_type33=(($39+8)|0);
      var $40=HEAPU8[($color_type33)];
      var $conv34=(($40)&255);
      var $cmp35=(($conv34)|0)==6;
      if ($cmp35) { __label__ = 13; break; } else { __label__ = 22; break; }
    case 13: 
      var $41=$palette_lookup_addr;
      var $cmp38=(($41)|0)!=0;
      if ($cmp38) { __label__ = 14; break; } else { __label__ = 22; break; }
    case 14: 
      var $42=$row_addr;
      $sp=$42;
      var $43=$row_addr;
      $dp=$43;
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $44=$i;
      var $45=$row_width;
      var $cmp46=(($44)>>>0) < (($45)>>>0);
      if ($cmp46) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $46=$sp;
      var $incdec_ptr49=(($46+1)|0);
      $sp=$incdec_ptr49;
      var $47=HEAPU8[($46)];
      var $conv50=(($47)&255);
      $r41=$conv50;
      var $48=$sp;
      var $incdec_ptr51=(($48+1)|0);
      $sp=$incdec_ptr51;
      var $49=HEAPU8[($48)];
      var $conv52=(($49)&255);
      $g42=$conv52;
      var $50=$sp;
      var $incdec_ptr53=(($50+1)|0);
      $sp=$incdec_ptr53;
      var $51=HEAPU8[($50)];
      var $conv54=(($51)&255);
      $b43=$conv54;
      var $52=$sp;
      var $incdec_ptr55=(($52+1)|0);
      $sp=$incdec_ptr55;
      var $53=$r41;
      var $shr56=$53 >> 3;
      var $and57=$shr56 & 31;
      var $shl58=$and57 << 10;
      var $54=$g42;
      var $shr59=$54 >> 3;
      var $and60=$shr59 & 31;
      var $shl61=$and60 << 5;
      var $or62=$shl58 | $shl61;
      var $55=$b43;
      var $shr63=$55 >> 3;
      var $and64=$shr63 & 31;
      var $or65=$or62 | $and64;
      $p44=$or65;
      var $56=$p44;
      var $57=$palette_lookup_addr;
      var $arrayidx66=(($57+$56)|0);
      var $58=HEAP8[($arrayidx66)];
      var $59=$dp;
      var $incdec_ptr67=(($59+1)|0);
      $dp=$incdec_ptr67;
      HEAP8[($59)]=$58;
      __label__ = 17; break;
    case 17: 
      var $60=$i;
      var $inc69=(($60+1)|0);
      $i=$inc69;
      __label__ = 15; break;
    case 18: 
      var $61=$row_info_addr;
      var $color_type71=(($61+8)|0);
      HEAP8[($color_type71)]=3;
      var $62=$row_info_addr;
      var $channels72=(($62+10)|0);
      HEAP8[($channels72)]=1;
      var $63=$row_info_addr;
      var $bit_depth73=(($63+9)|0);
      var $64=HEAP8[($bit_depth73)];
      var $65=$row_info_addr;
      var $pixel_depth74=(($65+11)|0);
      HEAP8[($pixel_depth74)]=$64;
      var $66=$row_info_addr;
      var $pixel_depth75=(($66+11)|0);
      var $67=HEAPU8[($pixel_depth75)];
      var $conv76=(($67)&255);
      var $cmp77=(($conv76)|0) >= 8;
      if ($cmp77) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $68=$row_width;
      var $69=$row_info_addr;
      var $pixel_depth80=(($69+11)|0);
      var $70=HEAPU8[($pixel_depth80)];
      var $conv81=(($70)&255);
      var $shr82=$conv81 >>> 3;
      var $mul83=(($68*$shr82)|0);
      var $cond91 = $mul83;__label__ = 21; break;
    case 20: 
      var $71=$row_width;
      var $72=$row_info_addr;
      var $pixel_depth85=(($72+11)|0);
      var $73=HEAPU8[($pixel_depth85)];
      var $conv86=(($73)&255);
      var $mul87=(($71*$conv86)|0);
      var $add88=(($mul87+7)|0);
      var $shr89=$add88 >>> 3;
      var $cond91 = $shr89;__label__ = 21; break;
    case 21: 
      var $cond91;
      var $74=$row_info_addr;
      var $rowbytes92=(($74+4)|0);
      HEAP32[(($rowbytes92)>>2)]=$cond91;
      __label__ = 30; break;
    case 22: 
      var $75=$row_info_addr;
      var $color_type94=(($75+8)|0);
      var $76=HEAPU8[($color_type94)];
      var $conv95=(($76)&255);
      var $cmp96=(($conv95)|0)==3;
      if ($cmp96) { __label__ = 23; break; } else { __label__ = 29; break; }
    case 23: 
      var $77=$quantize_lookup_addr;
      var $tobool99=(($77)|0)!=0;
      if ($tobool99) { __label__ = 24; break; } else { __label__ = 29; break; }
    case 24: 
      var $78=$row_addr;
      $sp=$78;
      $i=0;
      __label__ = 25; break;
    case 25: 
      var $79=$i;
      var $80=$row_width;
      var $cmp102=(($79)>>>0) < (($80)>>>0);
      if ($cmp102) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $81=$sp;
      var $82=HEAPU8[($81)];
      var $idxprom=(($82)&255);
      var $83=$quantize_lookup_addr;
      var $arrayidx105=(($83+$idxprom)|0);
      var $84=HEAP8[($arrayidx105)];
      var $85=$sp;
      HEAP8[($85)]=$84;
      __label__ = 27; break;
    case 27: 
      var $86=$i;
      var $inc107=(($86+1)|0);
      $i=$inc107;
      var $87=$sp;
      var $incdec_ptr108=(($87+1)|0);
      $sp=$incdec_ptr108;
      __label__ = 25; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_quantize["X"]=1;

function _png_do_expand_16($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $sp;
      var $dp;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $bit_depth=(($0+9)|0);
      var $1=HEAPU8[($bit_depth)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$row_info_addr;
      var $color_type=(($2+8)|0);
      var $3=HEAPU8[($color_type)];
      var $conv2=(($3)&255);
      var $cmp3=(($conv2)|0)!=3;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $4=$row_addr;
      var $5=$row_info_addr;
      var $rowbytes=(($5+4)|0);
      var $6=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($4+$6)|0);
      $sp=$add_ptr;
      var $7=$sp;
      var $8=$row_info_addr;
      var $rowbytes5=(($8+4)|0);
      var $9=HEAP32[(($rowbytes5)>>2)];
      var $add_ptr6=(($7+$9)|0);
      $dp=$add_ptr6;
      __label__ = 4; break;
    case 4: 
      var $10=$dp;
      var $11=$sp;
      var $cmp7=(($10)>>>0) > (($11)>>>0);
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=$sp;
      var $incdec_ptr=(($12-1)|0);
      $sp=$incdec_ptr;
      var $13=HEAPU8[($incdec_ptr)];
      var $14=$dp;
      var $arrayidx=(($14-1)|0);
      HEAP8[($arrayidx)]=$13;
      var $15=$dp;
      var $arrayidx9=(($15-2)|0);
      HEAP8[($arrayidx9)]=$13;
      var $16=$dp;
      var $add_ptr10=(($16-2)|0);
      $dp=$add_ptr10;
      __label__ = 4; break;
    case 6: 
      var $17=$row_info_addr;
      var $rowbytes11=(($17+4)|0);
      var $18=HEAP32[(($rowbytes11)>>2)];
      var $mul=((($18<<1))|0);
      HEAP32[(($rowbytes11)>>2)]=$mul;
      var $19=$row_info_addr;
      var $bit_depth12=(($19+9)|0);
      HEAP8[($bit_depth12)]=16;
      var $20=$row_info_addr;
      var $channels=(($20+10)|0);
      var $21=HEAPU8[($channels)];
      var $conv13=(($21)&255);
      var $mul14=((($conv13<<4))|0);
      var $conv15=(($mul14) & 255);
      var $22=$row_info_addr;
      var $pixel_depth=(($22+11)|0);
      HEAP8[($pixel_depth)]=$conv15;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_expand_16["X"]=1;

function _png_do_encode_alpha($row_info, $row, $png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $png_ptr_addr;
      var $row_width;
      var $table;
      var $step;
      var $table19;
      var $gamma_shift;
      var $step24;
      var $v;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $png_ptr_addr=$png_ptr;
      var $0=$row_info_addr;
      var $width=(($0)|0);
      var $1=HEAP32[(($width)>>2)];
      $row_width=$1;
      var $2=$row_info_addr;
      var $color_type=(($2+8)|0);
      var $3=HEAPU8[($color_type)];
      var $conv=(($3)&255);
      var $and=$conv & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 20; break; }
    case 2: 
      var $4=$row_info_addr;
      var $bit_depth=(($4+9)|0);
      var $5=HEAPU8[($bit_depth)];
      var $conv1=(($5)&255);
      var $cmp=(($conv1)|0)==8;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      var $6=$png_ptr_addr;
      var $gamma_from_1=(($6+368)|0);
      var $7=HEAP32[(($gamma_from_1)>>2)];
      $table=$7;
      var $8=$table;
      var $cmp4=(($8)|0)!=0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $9=$row_info_addr;
      var $color_type7=(($9+8)|0);
      var $10=HEAPU8[($color_type7)];
      var $conv8=(($10)&255);
      var $and9=$conv8 & 2;
      var $tobool10=(($and9)|0)!=0;
      var $cond=$tobool10 ? 4 : 2;
      $step=$cond;
      var $11=$step;
      var $sub=(($11-1)|0);
      var $12=$row_addr;
      var $add_ptr=(($12+$sub)|0);
      $row_addr=$add_ptr;
      __label__ = 5; break;
    case 5: 
      var $13=$row_width;
      var $cmp11=(($13)>>>0) > 0;
      if ($cmp11) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $14=$row_addr;
      var $15=HEAPU8[($14)];
      var $idxprom=(($15)&255);
      var $16=$table;
      var $arrayidx=(($16+$idxprom)|0);
      var $17=HEAP8[($arrayidx)];
      var $18=$row_addr;
      HEAP8[($18)]=$17;
      __label__ = 7; break;
    case 7: 
      var $19=$row_width;
      var $dec=(($19-1)|0);
      $row_width=$dec;
      var $20=$step;
      var $21=$row_addr;
      var $add_ptr13=(($21+$20)|0);
      $row_addr=$add_ptr13;
      __label__ = 5; break;
    case 8: 
      __label__ = 21; break;
    case 9: 
      __label__ = 19; break;
    case 10: 
      var $22=$row_info_addr;
      var $bit_depth14=(($22+9)|0);
      var $23=HEAPU8[($bit_depth14)];
      var $conv15=(($23)&255);
      var $cmp16=(($conv15)|0)==16;
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 18; break; }
    case 11: 
      var $24=$png_ptr_addr;
      var $gamma_16_from_1=(($24+376)|0);
      var $25=HEAP32[(($gamma_16_from_1)>>2)];
      $table19=$25;
      var $26=$png_ptr_addr;
      var $gamma_shift20=(($26+348)|0);
      var $27=HEAP32[(($gamma_shift20)>>2)];
      $gamma_shift=$27;
      var $28=$table19;
      var $cmp21=(($28)|0)!=0;
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 17; break; }
    case 12: 
      var $29=$row_info_addr;
      var $color_type25=(($29+8)|0);
      var $30=HEAPU8[($color_type25)];
      var $conv26=(($30)&255);
      var $and27=$conv26 & 2;
      var $tobool28=(($and27)|0)!=0;
      var $cond29=$tobool28 ? 8 : 4;
      $step24=$cond29;
      var $31=$step24;
      var $sub30=(($31-2)|0);
      var $32=$row_addr;
      var $add_ptr31=(($32+$sub30)|0);
      $row_addr=$add_ptr31;
      __label__ = 13; break;
    case 13: 
      var $33=$row_width;
      var $cmp33=(($33)>>>0) > 0;
      if ($cmp33) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $34=$row_addr;
      var $35=HEAPU8[($34)];
      var $idxprom36=(($35)&255);
      var $36=$row_addr;
      var $add_ptr37=(($36+1)|0);
      var $37=HEAPU8[($add_ptr37)];
      var $conv38=(($37)&255);
      var $38=$gamma_shift;
      var $shr=$conv38 >> (($38)|0);
      var $39=$table19;
      var $arrayidx39=(($39+($shr<<2))|0);
      var $40=HEAP32[(($arrayidx39)>>2)];
      var $arrayidx40=(($40+($idxprom36<<1))|0);
      var $41=HEAP16[(($arrayidx40)>>1)];
      $v=$41;
      var $42=$v;
      var $conv41=(($42)&65535);
      var $shr42=$conv41 >> 8;
      var $and43=$shr42 & 255;
      var $conv44=(($and43) & 255);
      var $43=$row_addr;
      HEAP8[($43)]=$conv44;
      var $44=$v;
      var $conv45=(($44)&65535);
      var $and46=$conv45 & 255;
      var $conv47=(($and46) & 255);
      var $45=$row_addr;
      var $add_ptr48=(($45+1)|0);
      HEAP8[($add_ptr48)]=$conv47;
      __label__ = 15; break;
    case 15: 
      var $46=$row_width;
      var $dec50=(($46-1)|0);
      $row_width=$dec50;
      var $47=$step24;
      var $48=$row_addr;
      var $add_ptr51=(($48+$47)|0);
      $row_addr=$add_ptr51;
      __label__ = 13; break;
    case 16: 
      __label__ = 21; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $49=$png_ptr_addr;
      _png_warning($49, ((STRING_TABLE.__str16725)|0));
      __label__ = 21; break;
    case 21: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_encode_alpha["X"]=1;

function _png_do_unshift($row_info, $row, $sig_bits) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $sig_bits_addr;
      var $color_type;
      var $shift=__stackBase__;
      var $channels;
      var $bit_depth;
      var $c;
      var $have_shift;
      var $bp;
      var $bp_end;
      var $b;
      var $bp49;
      var $bp_end50;
      var $gray_shift;
      var $mask;
      var $b59;
      var $bp67;
      var $bp_end68;
      var $channel;
      var $b75;
      var $bp88;
      var $bp_end89;
      var $channel92;
      var $value;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $sig_bits_addr=$sig_bits;
      var $0=$row_info_addr;
      var $color_type1=(($0+8)|0);
      var $1=HEAPU8[($color_type1)];
      var $conv=(($1)&255);
      $color_type=$conv;
      var $2=$color_type;
      var $cmp=(($2)|0)!=3;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 40; break; }
    case 2: 
      $channels=0;
      var $3=$row_info_addr;
      var $bit_depth3=(($3+9)|0);
      var $4=HEAPU8[($bit_depth3)];
      var $conv4=(($4)&255);
      $bit_depth=$conv4;
      var $5=$color_type;
      var $and=$5 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$bit_depth;
      var $7=$sig_bits_addr;
      var $red=(($7)|0);
      var $8=HEAPU8[($red)];
      var $conv6=(($8)&255);
      var $sub=(($6-$conv6)|0);
      var $9=$channels;
      var $inc=(($9+1)|0);
      $channels=$inc;
      var $arrayidx=(($shift+($9<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$sub;
      var $10=$bit_depth;
      var $11=$sig_bits_addr;
      var $green=(($11+1)|0);
      var $12=HEAPU8[($green)];
      var $conv7=(($12)&255);
      var $sub8=(($10-$conv7)|0);
      var $13=$channels;
      var $inc9=(($13+1)|0);
      $channels=$inc9;
      var $arrayidx10=(($shift+($13<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=$sub8;
      var $14=$bit_depth;
      var $15=$sig_bits_addr;
      var $blue=(($15+2)|0);
      var $16=HEAPU8[($blue)];
      var $conv11=(($16)&255);
      var $sub12=(($14-$conv11)|0);
      var $17=$channels;
      var $inc13=(($17+1)|0);
      $channels=$inc13;
      var $arrayidx14=(($shift+($17<<2))|0);
      HEAP32[(($arrayidx14)>>2)]=$sub12;
      __label__ = 5; break;
    case 4: 
      var $18=$bit_depth;
      var $19=$sig_bits_addr;
      var $gray=(($19+3)|0);
      var $20=HEAPU8[($gray)];
      var $conv15=(($20)&255);
      var $sub16=(($18-$conv15)|0);
      var $21=$channels;
      var $inc17=(($21+1)|0);
      $channels=$inc17;
      var $arrayidx18=(($shift+($21<<2))|0);
      HEAP32[(($arrayidx18)>>2)]=$sub16;
      __label__ = 5; break;
    case 5: 
      var $22=$color_type;
      var $and19=$22 & 4;
      var $tobool20=(($and19)|0)!=0;
      if ($tobool20) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $23=$bit_depth;
      var $24=$sig_bits_addr;
      var $alpha=(($24+4)|0);
      var $25=HEAPU8[($alpha)];
      var $conv22=(($25)&255);
      var $sub23=(($23-$conv22)|0);
      var $26=$channels;
      var $inc24=(($26+1)|0);
      $channels=$inc24;
      var $arrayidx25=(($shift+($26<<2))|0);
      HEAP32[(($arrayidx25)>>2)]=$sub23;
      __label__ = 7; break;
    case 7: 
      $have_shift=0;
      $c=0;
      __label__ = 8; break;
    case 8: 
      var $27=$c;
      var $28=$channels;
      var $cmp27=(($27)|0) < (($28)|0);
      if ($cmp27) { __label__ = 9; break; } else { __label__ = 15; break; }
    case 9: 
      var $29=$c;
      var $arrayidx29=(($shift+($29<<2))|0);
      var $30=HEAP32[(($arrayidx29)>>2)];
      var $cmp30=(($30)|0) <= 0;
      if ($cmp30) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $31=$c;
      var $arrayidx32=(($shift+($31<<2))|0);
      var $32=HEAP32[(($arrayidx32)>>2)];
      var $33=$bit_depth;
      var $cmp33=(($32)|0) >= (($33)|0);
      if ($cmp33) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $34=$c;
      var $arrayidx36=(($shift+($34<<2))|0);
      HEAP32[(($arrayidx36)>>2)]=0;
      __label__ = 13; break;
    case 12: 
      $have_shift=1;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $35=$c;
      var $inc39=(($35+1)|0);
      $c=$inc39;
      __label__ = 8; break;
    case 15: 
      var $36=$have_shift;
      var $tobool40=(($36)|0)!=0;
      if ($tobool40) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      __label__ = 40; break;
    case 17: 
      var $37=$bit_depth;
      if ((($37)|0) == 2) {
        __label__ = 19; break;
      }
      else if ((($37)|0) == 4) {
        __label__ = 23; break;
      }
      else if ((($37)|0) == 8) {
        __label__ = 27; break;
      }
      else if ((($37)|0) == 16) {
        __label__ = 33; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 18: 
      __label__ = 39; break;
    case 19: 
      var $38=$row_addr;
      $bp=$38;
      var $39=$bp;
      var $40=$row_info_addr;
      var $rowbytes=(($40+4)|0);
      var $41=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($39+$41)|0);
      $bp_end=$add_ptr;
      __label__ = 20; break;
    case 20: 
      var $42=$bp;
      var $43=$bp_end;
      var $cmp43=(($42)>>>0) < (($43)>>>0);
      if ($cmp43) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $44=$bp;
      var $45=HEAPU8[($44)];
      var $conv45=(($45)&255);
      var $shr=$conv45 >> 1;
      var $and46=$shr & 85;
      $b=$and46;
      var $46=$b;
      var $conv47=(($46) & 255);
      var $47=$bp;
      var $incdec_ptr=(($47+1)|0);
      $bp=$incdec_ptr;
      HEAP8[($47)]=$conv47;
      __label__ = 20; break;
    case 22: 
      __label__ = 39; break;
    case 23: 
      var $48=$row_addr;
      $bp49=$48;
      var $49=$bp49;
      var $50=$row_info_addr;
      var $rowbytes51=(($50+4)|0);
      var $51=HEAP32[(($rowbytes51)>>2)];
      var $add_ptr52=(($49+$51)|0);
      $bp_end50=$add_ptr52;
      var $arrayidx53=(($shift)|0);
      var $52=HEAP32[(($arrayidx53)>>2)];
      $gray_shift=$52;
      var $53=$gray_shift;
      var $shr54=15 >> (($53)|0);
      $mask=$shr54;
      var $54=$mask;
      var $shl=$54 << 4;
      var $55=$mask;
      var $or=$55 | $shl;
      $mask=$or;
      __label__ = 24; break;
    case 24: 
      var $56=$bp49;
      var $57=$bp_end50;
      var $cmp56=(($56)>>>0) < (($57)>>>0);
      if ($cmp56) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $58=$bp49;
      var $59=HEAPU8[($58)];
      var $conv60=(($59)&255);
      var $60=$gray_shift;
      var $shr61=$conv60 >> (($60)|0);
      var $61=$mask;
      var $and62=$shr61 & $61;
      $b59=$and62;
      var $62=$b59;
      var $conv63=(($62) & 255);
      var $63=$bp49;
      var $incdec_ptr64=(($63+1)|0);
      $bp49=$incdec_ptr64;
      HEAP8[($63)]=$conv63;
      __label__ = 24; break;
    case 26: 
      __label__ = 39; break;
    case 27: 
      var $64=$row_addr;
      $bp67=$64;
      var $65=$bp67;
      var $66=$row_info_addr;
      var $rowbytes69=(($66+4)|0);
      var $67=HEAP32[(($rowbytes69)>>2)];
      var $add_ptr70=(($65+$67)|0);
      $bp_end68=$add_ptr70;
      $channel=0;
      __label__ = 28; break;
    case 28: 
      var $68=$bp67;
      var $69=$bp_end68;
      var $cmp72=(($68)>>>0) < (($69)>>>0);
      if ($cmp72) { __label__ = 29; break; } else { __label__ = 32; break; }
    case 29: 
      var $70=$bp67;
      var $71=HEAPU8[($70)];
      var $conv76=(($71)&255);
      var $72=$channel;
      var $arrayidx77=(($shift+($72<<2))|0);
      var $73=HEAP32[(($arrayidx77)>>2)];
      var $shr78=$conv76 >> (($73)|0);
      $b75=$shr78;
      var $74=$channel;
      var $inc79=(($74+1)|0);
      $channel=$inc79;
      var $75=$channels;
      var $cmp80=(($inc79)|0) >= (($75)|0);
      if ($cmp80) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      $channel=0;
      __label__ = 31; break;
    case 31: 
      var $76=$b75;
      var $conv84=(($76) & 255);
      var $77=$bp67;
      var $incdec_ptr85=(($77+1)|0);
      $bp67=$incdec_ptr85;
      HEAP8[($77)]=$conv84;
      __label__ = 28; break;
    case 32: 
      __label__ = 39; break;
    case 33: 
      var $78=$row_addr;
      $bp88=$78;
      var $79=$bp88;
      var $80=$row_info_addr;
      var $rowbytes90=(($80+4)|0);
      var $81=HEAP32[(($rowbytes90)>>2)];
      var $add_ptr91=(($79+$81)|0);
      $bp_end89=$add_ptr91;
      $channel92=0;
      __label__ = 34; break;
    case 34: 
      var $82=$bp88;
      var $83=$bp_end89;
      var $cmp94=(($82)>>>0) < (($83)>>>0);
      if ($cmp94) { __label__ = 35; break; } else { __label__ = 38; break; }
    case 35: 
      var $84=$bp88;
      var $arrayidx97=(($84)|0);
      var $85=HEAPU8[($arrayidx97)];
      var $conv98=(($85)&255);
      var $shl99=$conv98 << 8;
      var $86=$bp88;
      var $arrayidx100=(($86+1)|0);
      var $87=HEAPU8[($arrayidx100)];
      var $conv101=(($87)&255);
      var $add=(($shl99+$conv101)|0);
      $value=$add;
      var $88=$channel92;
      var $arrayidx102=(($shift+($88<<2))|0);
      var $89=HEAP32[(($arrayidx102)>>2)];
      var $90=$value;
      var $shr103=$90 >> (($89)|0);
      $value=$shr103;
      var $91=$channel92;
      var $inc104=(($91+1)|0);
      $channel92=$inc104;
      var $92=$channels;
      var $cmp105=(($inc104)|0) >= (($92)|0);
      if ($cmp105) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      $channel92=0;
      __label__ = 37; break;
    case 37: 
      var $93=$value;
      var $shr109=$93 >> 8;
      var $conv110=(($shr109) & 255);
      var $94=$bp88;
      var $incdec_ptr111=(($94+1)|0);
      $bp88=$incdec_ptr111;
      HEAP8[($94)]=$conv110;
      var $95=$value;
      var $and112=$95 & 255;
      var $conv113=(($and112) & 255);
      var $96=$bp88;
      var $incdec_ptr114=(($96+1)|0);
      $bp88=$incdec_ptr114;
      HEAP8[($96)]=$conv113;
      __label__ = 34; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_unshift["X"]=1;

function _png_do_unpack($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $i;
      var $row_width;
      var $sp;
      var $dp;
      var $shift;
      var $sp19;
      var $dp23;
      var $shift26;
      var $sp50;
      var $dp54;
      var $shift57;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $bit_depth=(($0+9)|0);
      var $1=HEAPU8[($bit_depth)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0) < 8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 29; break; }
    case 2: 
      var $2=$row_info_addr;
      var $width=(($2)|0);
      var $3=HEAP32[(($width)>>2)];
      $row_width=$3;
      var $4=$row_info_addr;
      var $bit_depth2=(($4+9)|0);
      var $5=HEAPU8[($bit_depth2)];
      var $conv3=(($5)&255);
      if ((($conv3)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($conv3)|0) == 2) {
        __label__ = 11; break;
      }
      else if ((($conv3)|0) == 4) {
        __label__ = 19; break;
      }
      else {
      __label__ = 27; break;
      }
      
    case 3: 
      var $6=$row_addr;
      var $7=$row_width;
      var $sub=(($7-1)|0);
      var $shr=$sub >>> 3;
      var $add_ptr=(($6+$shr)|0);
      $sp=$add_ptr;
      var $8=$row_addr;
      var $9=$row_width;
      var $add_ptr4=(($8+$9)|0);
      var $add_ptr5=(($add_ptr4-1)|0);
      $dp=$add_ptr5;
      var $10=$row_width;
      var $add=(($10+7)|0);
      var $and=$add & 7;
      var $sub6=((7-$and)|0);
      $shift=$sub6;
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $11=$i;
      var $12=$row_width;
      var $cmp7=(($11)>>>0) < (($12)>>>0);
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $13=$sp;
      var $14=HEAPU8[($13)];
      var $conv9=(($14)&255);
      var $15=$shift;
      var $shr10=$conv9 >> (($15)|0);
      var $and11=$shr10 & 1;
      var $conv12=(($and11) & 255);
      var $16=$dp;
      HEAP8[($16)]=$conv12;
      var $17=$shift;
      var $cmp13=(($17)|0)==7;
      if ($cmp13) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $shift=0;
      var $18=$sp;
      var $incdec_ptr=(($18-1)|0);
      $sp=$incdec_ptr;
      __label__ = 8; break;
    case 7: 
      var $19=$shift;
      var $inc=(($19+1)|0);
      $shift=$inc;
      __label__ = 8; break;
    case 8: 
      var $20=$dp;
      var $incdec_ptr16=(($20-1)|0);
      $dp=$incdec_ptr16;
      __label__ = 9; break;
    case 9: 
      var $21=$i;
      var $inc17=(($21+1)|0);
      $i=$inc17;
      __label__ = 4; break;
    case 10: 
      __label__ = 28; break;
    case 11: 
      var $22=$row_addr;
      var $23=$row_width;
      var $sub20=(($23-1)|0);
      var $shr21=$sub20 >>> 2;
      var $add_ptr22=(($22+$shr21)|0);
      $sp19=$add_ptr22;
      var $24=$row_addr;
      var $25=$row_width;
      var $add_ptr24=(($24+$25)|0);
      var $add_ptr25=(($add_ptr24-1)|0);
      $dp23=$add_ptr25;
      var $26=$row_width;
      var $add27=(($26+3)|0);
      var $and28=$add27 & 3;
      var $sub29=((3-$and28)|0);
      var $shl=$sub29 << 1;
      $shift26=$shl;
      $i=0;
      __label__ = 12; break;
    case 12: 
      var $27=$i;
      var $28=$row_width;
      var $cmp31=(($27)>>>0) < (($28)>>>0);
      if ($cmp31) { __label__ = 13; break; } else { __label__ = 18; break; }
    case 13: 
      var $29=$sp19;
      var $30=HEAPU8[($29)];
      var $conv34=(($30)&255);
      var $31=$shift26;
      var $shr35=$conv34 >> (($31)|0);
      var $and36=$shr35 & 3;
      var $conv37=(($and36) & 255);
      var $32=$dp23;
      HEAP8[($32)]=$conv37;
      var $33=$shift26;
      var $cmp38=(($33)|0)==6;
      if ($cmp38) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $shift26=0;
      var $34=$sp19;
      var $incdec_ptr41=(($34-1)|0);
      $sp19=$incdec_ptr41;
      __label__ = 16; break;
    case 15: 
      var $35=$shift26;
      var $add43=(($35+2)|0);
      $shift26=$add43;
      __label__ = 16; break;
    case 16: 
      var $36=$dp23;
      var $incdec_ptr45=(($36-1)|0);
      $dp23=$incdec_ptr45;
      __label__ = 17; break;
    case 17: 
      var $37=$i;
      var $inc47=(($37+1)|0);
      $i=$inc47;
      __label__ = 12; break;
    case 18: 
      __label__ = 28; break;
    case 19: 
      var $38=$row_addr;
      var $39=$row_width;
      var $sub51=(($39-1)|0);
      var $shr52=$sub51 >>> 1;
      var $add_ptr53=(($38+$shr52)|0);
      $sp50=$add_ptr53;
      var $40=$row_addr;
      var $41=$row_width;
      var $add_ptr55=(($40+$41)|0);
      var $add_ptr56=(($add_ptr55-1)|0);
      $dp54=$add_ptr56;
      var $42=$row_width;
      var $add58=(($42+1)|0);
      var $and59=$add58 & 1;
      var $sub60=((1-$and59)|0);
      var $shl61=$sub60 << 2;
      $shift57=$shl61;
      $i=0;
      __label__ = 20; break;
    case 20: 
      var $43=$i;
      var $44=$row_width;
      var $cmp63=(($43)>>>0) < (($44)>>>0);
      if ($cmp63) { __label__ = 21; break; } else { __label__ = 26; break; }
    case 21: 
      var $45=$sp50;
      var $46=HEAPU8[($45)];
      var $conv66=(($46)&255);
      var $47=$shift57;
      var $shr67=$conv66 >> (($47)|0);
      var $and68=$shr67 & 15;
      var $conv69=(($and68) & 255);
      var $48=$dp54;
      HEAP8[($48)]=$conv69;
      var $49=$shift57;
      var $cmp70=(($49)|0)==4;
      if ($cmp70) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $shift57=0;
      var $50=$sp50;
      var $incdec_ptr73=(($50-1)|0);
      $sp50=$incdec_ptr73;
      __label__ = 24; break;
    case 23: 
      $shift57=4;
      __label__ = 24; break;
    case 24: 
      var $51=$dp54;
      var $incdec_ptr76=(($51-1)|0);
      $dp54=$incdec_ptr76;
      __label__ = 25; break;
    case 25: 
      var $52=$i;
      var $inc78=(($52+1)|0);
      $i=$inc78;
      __label__ = 20; break;
    case 26: 
      __label__ = 28; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $53=$row_info_addr;
      var $bit_depth80=(($53+9)|0);
      HEAP8[($bit_depth80)]=8;
      var $54=$row_info_addr;
      var $channels=(($54+10)|0);
      var $55=HEAPU8[($channels)];
      var $conv81=(($55)&255);
      var $mul=((($conv81<<3))|0);
      var $conv82=(($mul) & 255);
      var $56=$row_info_addr;
      var $pixel_depth=(($56+11)|0);
      HEAP8[($pixel_depth)]=$conv82;
      var $57=$row_width;
      var $58=$row_info_addr;
      var $channels83=(($58+10)|0);
      var $59=HEAPU8[($channels83)];
      var $conv84=(($59)&255);
      var $mul85=(($57*$conv84)|0);
      var $60=$row_info_addr;
      var $rowbytes=(($60+4)|0);
      HEAP32[(($rowbytes)>>2)]=$mul85;
      __label__ = 29; break;
    case 29: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_unpack["X"]=1;

function _png_do_read_filler($row_info, $row, $filler, $flags) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $filler_addr;
      var $flags_addr;
      var $i;
      var $row_width;
      var $hi_filler;
      var $lo_filler;
      var $sp;
      var $dp;
      var $sp17;
      var $dp19;
      var $sp44;
      var $dp47;
      var $sp70;
      var $dp73;
      var $sp110;
      var $dp113;
      var $sp135;
      var $dp138;
      var $sp168;
      var $dp171;
      var $sp202;
      var $dp205;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $filler_addr=$filler;
      $flags_addr=$flags;
      var $0=$row_info_addr;
      var $width=(($0)|0);
      var $1=HEAP32[(($width)>>2)];
      $row_width=$1;
      var $2=$filler_addr;
      var $shr=$2 >>> 8;
      var $and=$shr & 255;
      var $conv=(($and) & 255);
      $hi_filler=$conv;
      var $3=$filler_addr;
      var $and1=$3 & 255;
      var $conv2=(($and1) & 255);
      $lo_filler=$conv2;
      var $4=$row_info_addr;
      var $color_type=(($4+8)|0);
      var $5=HEAPU8[($color_type)];
      var $conv3=(($5)&255);
      var $cmp=(($conv3)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 30; break; }
    case 2: 
      var $6=$row_info_addr;
      var $bit_depth=(($6+9)|0);
      var $7=HEAPU8[($bit_depth)];
      var $conv5=(($7)&255);
      var $cmp6=(($conv5)|0)==8;
      if ($cmp6) { __label__ = 3; break; } else { __label__ = 15; break; }
    case 3: 
      var $8=$flags_addr;
      var $and9=$8 & 128;
      var $tobool=(($and9)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $9=$row_addr;
      var $10=$row_width;
      var $add_ptr=(($9+$10)|0);
      $sp=$add_ptr;
      var $11=$sp;
      var $12=$row_width;
      var $add_ptr11=(($11+$12)|0);
      $dp=$add_ptr11;
      $i=1;
      __label__ = 5; break;
    case 5: 
      var $13=$i;
      var $14=$row_width;
      var $cmp12=(($13)>>>0) < (($14)>>>0);
      if ($cmp12) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $15=$lo_filler;
      var $16=$dp;
      var $incdec_ptr=(($16-1)|0);
      $dp=$incdec_ptr;
      HEAP8[($incdec_ptr)]=$15;
      var $17=$sp;
      var $incdec_ptr14=(($17-1)|0);
      $sp=$incdec_ptr14;
      var $18=HEAP8[($incdec_ptr14)];
      var $19=$dp;
      var $incdec_ptr15=(($19-1)|0);
      $dp=$incdec_ptr15;
      HEAP8[($incdec_ptr15)]=$18;
      __label__ = 7; break;
    case 7: 
      var $20=$i;
      var $inc=(($20+1)|0);
      $i=$inc;
      __label__ = 5; break;
    case 8: 
      var $21=$lo_filler;
      var $22=$dp;
      var $incdec_ptr16=(($22-1)|0);
      $dp=$incdec_ptr16;
      HEAP8[($incdec_ptr16)]=$21;
      var $23=$row_info_addr;
      var $channels=(($23+10)|0);
      HEAP8[($channels)]=2;
      var $24=$row_info_addr;
      var $pixel_depth=(($24+11)|0);
      HEAP8[($pixel_depth)]=16;
      var $25=$row_width;
      var $mul=((($25<<1))|0);
      var $26=$row_info_addr;
      var $rowbytes=(($26+4)|0);
      HEAP32[(($rowbytes)>>2)]=$mul;
      __label__ = 14; break;
    case 9: 
      var $27=$row_addr;
      var $28=$row_width;
      var $add_ptr18=(($27+$28)|0);
      $sp17=$add_ptr18;
      var $29=$sp17;
      var $30=$row_width;
      var $add_ptr20=(($29+$30)|0);
      $dp19=$add_ptr20;
      $i=0;
      __label__ = 10; break;
    case 10: 
      var $31=$i;
      var $32=$row_width;
      var $cmp22=(($31)>>>0) < (($32)>>>0);
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $33=$sp17;
      var $incdec_ptr25=(($33-1)|0);
      $sp17=$incdec_ptr25;
      var $34=HEAP8[($incdec_ptr25)];
      var $35=$dp19;
      var $incdec_ptr26=(($35-1)|0);
      $dp19=$incdec_ptr26;
      HEAP8[($incdec_ptr26)]=$34;
      var $36=$lo_filler;
      var $37=$dp19;
      var $incdec_ptr27=(($37-1)|0);
      $dp19=$incdec_ptr27;
      HEAP8[($incdec_ptr27)]=$36;
      __label__ = 12; break;
    case 12: 
      var $38=$i;
      var $inc29=(($38+1)|0);
      $i=$inc29;
      __label__ = 10; break;
    case 13: 
      var $39=$row_info_addr;
      var $channels31=(($39+10)|0);
      HEAP8[($channels31)]=2;
      var $40=$row_info_addr;
      var $pixel_depth32=(($40+11)|0);
      HEAP8[($pixel_depth32)]=16;
      var $41=$row_width;
      var $mul33=((($41<<1))|0);
      var $42=$row_info_addr;
      var $rowbytes34=(($42+4)|0);
      HEAP32[(($rowbytes34)>>2)]=$mul33;
      __label__ = 14; break;
    case 14: 
      __label__ = 29; break;
    case 15: 
      var $43=$row_info_addr;
      var $bit_depth36=(($43+9)|0);
      var $44=HEAPU8[($bit_depth36)];
      var $conv37=(($44)&255);
      var $cmp38=(($conv37)|0)==16;
      if ($cmp38) { __label__ = 16; break; } else { __label__ = 28; break; }
    case 16: 
      var $45=$flags_addr;
      var $and41=$45 & 128;
      var $tobool42=(($and41)|0)!=0;
      if ($tobool42) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: 
      var $46=$row_addr;
      var $47=$row_width;
      var $mul45=((($47<<1))|0);
      var $add_ptr46=(($46+$mul45)|0);
      $sp44=$add_ptr46;
      var $48=$sp44;
      var $49=$row_width;
      var $mul48=((($49<<1))|0);
      var $add_ptr49=(($48+$mul48)|0);
      $dp47=$add_ptr49;
      $i=1;
      __label__ = 18; break;
    case 18: 
      var $50=$i;
      var $51=$row_width;
      var $cmp51=(($50)>>>0) < (($51)>>>0);
      if ($cmp51) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $52=$hi_filler;
      var $53=$dp47;
      var $incdec_ptr54=(($53-1)|0);
      $dp47=$incdec_ptr54;
      HEAP8[($incdec_ptr54)]=$52;
      var $54=$lo_filler;
      var $55=$dp47;
      var $incdec_ptr55=(($55-1)|0);
      $dp47=$incdec_ptr55;
      HEAP8[($incdec_ptr55)]=$54;
      var $56=$sp44;
      var $incdec_ptr56=(($56-1)|0);
      $sp44=$incdec_ptr56;
      var $57=HEAP8[($incdec_ptr56)];
      var $58=$dp47;
      var $incdec_ptr57=(($58-1)|0);
      $dp47=$incdec_ptr57;
      HEAP8[($incdec_ptr57)]=$57;
      var $59=$sp44;
      var $incdec_ptr58=(($59-1)|0);
      $sp44=$incdec_ptr58;
      var $60=HEAP8[($incdec_ptr58)];
      var $61=$dp47;
      var $incdec_ptr59=(($61-1)|0);
      $dp47=$incdec_ptr59;
      HEAP8[($incdec_ptr59)]=$60;
      __label__ = 20; break;
    case 20: 
      var $62=$i;
      var $inc61=(($62+1)|0);
      $i=$inc61;
      __label__ = 18; break;
    case 21: 
      var $63=$hi_filler;
      var $64=$dp47;
      var $incdec_ptr63=(($64-1)|0);
      $dp47=$incdec_ptr63;
      HEAP8[($incdec_ptr63)]=$63;
      var $65=$lo_filler;
      var $66=$dp47;
      var $incdec_ptr64=(($66-1)|0);
      $dp47=$incdec_ptr64;
      HEAP8[($incdec_ptr64)]=$65;
      var $67=$row_info_addr;
      var $channels65=(($67+10)|0);
      HEAP8[($channels65)]=2;
      var $68=$row_info_addr;
      var $pixel_depth66=(($68+11)|0);
      HEAP8[($pixel_depth66)]=32;
      var $69=$row_width;
      var $mul67=((($69<<2))|0);
      var $70=$row_info_addr;
      var $rowbytes68=(($70+4)|0);
      HEAP32[(($rowbytes68)>>2)]=$mul67;
      __label__ = 27; break;
    case 22: 
      var $71=$row_addr;
      var $72=$row_width;
      var $mul71=((($72<<1))|0);
      var $add_ptr72=(($71+$mul71)|0);
      $sp70=$add_ptr72;
      var $73=$sp70;
      var $74=$row_width;
      var $mul74=((($74<<1))|0);
      var $add_ptr75=(($73+$mul74)|0);
      $dp73=$add_ptr75;
      $i=0;
      __label__ = 23; break;
    case 23: 
      var $75=$i;
      var $76=$row_width;
      var $cmp77=(($75)>>>0) < (($76)>>>0);
      if ($cmp77) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $77=$sp70;
      var $incdec_ptr80=(($77-1)|0);
      $sp70=$incdec_ptr80;
      var $78=HEAP8[($incdec_ptr80)];
      var $79=$dp73;
      var $incdec_ptr81=(($79-1)|0);
      $dp73=$incdec_ptr81;
      HEAP8[($incdec_ptr81)]=$78;
      var $80=$sp70;
      var $incdec_ptr82=(($80-1)|0);
      $sp70=$incdec_ptr82;
      var $81=HEAP8[($incdec_ptr82)];
      var $82=$dp73;
      var $incdec_ptr83=(($82-1)|0);
      $dp73=$incdec_ptr83;
      HEAP8[($incdec_ptr83)]=$81;
      var $83=$hi_filler;
      var $84=$dp73;
      var $incdec_ptr84=(($84-1)|0);
      $dp73=$incdec_ptr84;
      HEAP8[($incdec_ptr84)]=$83;
      var $85=$lo_filler;
      var $86=$dp73;
      var $incdec_ptr85=(($86-1)|0);
      $dp73=$incdec_ptr85;
      HEAP8[($incdec_ptr85)]=$85;
      __label__ = 25; break;
    case 25: 
      var $87=$i;
      var $inc87=(($87+1)|0);
      $i=$inc87;
      __label__ = 23; break;
    case 26: 
      var $88=$row_info_addr;
      var $channels89=(($88+10)|0);
      HEAP8[($channels89)]=2;
      var $89=$row_info_addr;
      var $pixel_depth90=(($89+11)|0);
      HEAP8[($pixel_depth90)]=32;
      var $90=$row_width;
      var $mul91=((($90<<2))|0);
      var $91=$row_info_addr;
      var $rowbytes92=(($91+4)|0);
      HEAP32[(($rowbytes92)>>2)]=$mul91;
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 60; break;
    case 30: 
      var $92=$row_info_addr;
      var $color_type97=(($92+8)|0);
      var $93=HEAPU8[($color_type97)];
      var $conv98=(($93)&255);
      var $cmp99=(($conv98)|0)==2;
      if ($cmp99) { __label__ = 31; break; } else { __label__ = 59; break; }
    case 31: 
      var $94=$row_info_addr;
      var $bit_depth102=(($94+9)|0);
      var $95=HEAPU8[($bit_depth102)];
      var $conv103=(($95)&255);
      var $cmp104=(($conv103)|0)==8;
      if ($cmp104) { __label__ = 32; break; } else { __label__ = 44; break; }
    case 32: 
      var $96=$flags_addr;
      var $and107=$96 & 128;
      var $tobool108=(($and107)|0)!=0;
      if ($tobool108) { __label__ = 33; break; } else { __label__ = 38; break; }
    case 33: 
      var $97=$row_addr;
      var $98=$row_width;
      var $mul111=(($98*3)|0);
      var $add_ptr112=(($97+$mul111)|0);
      $sp110=$add_ptr112;
      var $99=$sp110;
      var $100=$row_width;
      var $add_ptr114=(($99+$100)|0);
      $dp113=$add_ptr114;
      $i=1;
      __label__ = 34; break;
    case 34: 
      var $101=$i;
      var $102=$row_width;
      var $cmp116=(($101)>>>0) < (($102)>>>0);
      if ($cmp116) { __label__ = 35; break; } else { __label__ = 37; break; }
    case 35: 
      var $103=$lo_filler;
      var $104=$dp113;
      var $incdec_ptr119=(($104-1)|0);
      $dp113=$incdec_ptr119;
      HEAP8[($incdec_ptr119)]=$103;
      var $105=$sp110;
      var $incdec_ptr120=(($105-1)|0);
      $sp110=$incdec_ptr120;
      var $106=HEAP8[($incdec_ptr120)];
      var $107=$dp113;
      var $incdec_ptr121=(($107-1)|0);
      $dp113=$incdec_ptr121;
      HEAP8[($incdec_ptr121)]=$106;
      var $108=$sp110;
      var $incdec_ptr122=(($108-1)|0);
      $sp110=$incdec_ptr122;
      var $109=HEAP8[($incdec_ptr122)];
      var $110=$dp113;
      var $incdec_ptr123=(($110-1)|0);
      $dp113=$incdec_ptr123;
      HEAP8[($incdec_ptr123)]=$109;
      var $111=$sp110;
      var $incdec_ptr124=(($111-1)|0);
      $sp110=$incdec_ptr124;
      var $112=HEAP8[($incdec_ptr124)];
      var $113=$dp113;
      var $incdec_ptr125=(($113-1)|0);
      $dp113=$incdec_ptr125;
      HEAP8[($incdec_ptr125)]=$112;
      __label__ = 36; break;
    case 36: 
      var $114=$i;
      var $inc127=(($114+1)|0);
      $i=$inc127;
      __label__ = 34; break;
    case 37: 
      var $115=$lo_filler;
      var $116=$dp113;
      var $incdec_ptr129=(($116-1)|0);
      $dp113=$incdec_ptr129;
      HEAP8[($incdec_ptr129)]=$115;
      var $117=$row_info_addr;
      var $channels130=(($117+10)|0);
      HEAP8[($channels130)]=4;
      var $118=$row_info_addr;
      var $pixel_depth131=(($118+11)|0);
      HEAP8[($pixel_depth131)]=32;
      var $119=$row_width;
      var $mul132=((($119<<2))|0);
      var $120=$row_info_addr;
      var $rowbytes133=(($120+4)|0);
      HEAP32[(($rowbytes133)>>2)]=$mul132;
      __label__ = 43; break;
    case 38: 
      var $121=$row_addr;
      var $122=$row_width;
      var $mul136=(($122*3)|0);
      var $add_ptr137=(($121+$mul136)|0);
      $sp135=$add_ptr137;
      var $123=$sp135;
      var $124=$row_width;
      var $add_ptr139=(($123+$124)|0);
      $dp138=$add_ptr139;
      $i=0;
      __label__ = 39; break;
    case 39: 
      var $125=$i;
      var $126=$row_width;
      var $cmp141=(($125)>>>0) < (($126)>>>0);
      if ($cmp141) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: 
      var $127=$sp135;
      var $incdec_ptr144=(($127-1)|0);
      $sp135=$incdec_ptr144;
      var $128=HEAP8[($incdec_ptr144)];
      var $129=$dp138;
      var $incdec_ptr145=(($129-1)|0);
      $dp138=$incdec_ptr145;
      HEAP8[($incdec_ptr145)]=$128;
      var $130=$sp135;
      var $incdec_ptr146=(($130-1)|0);
      $sp135=$incdec_ptr146;
      var $131=HEAP8[($incdec_ptr146)];
      var $132=$dp138;
      var $incdec_ptr147=(($132-1)|0);
      $dp138=$incdec_ptr147;
      HEAP8[($incdec_ptr147)]=$131;
      var $133=$sp135;
      var $incdec_ptr148=(($133-1)|0);
      $sp135=$incdec_ptr148;
      var $134=HEAP8[($incdec_ptr148)];
      var $135=$dp138;
      var $incdec_ptr149=(($135-1)|0);
      $dp138=$incdec_ptr149;
      HEAP8[($incdec_ptr149)]=$134;
      var $136=$lo_filler;
      var $137=$dp138;
      var $incdec_ptr150=(($137-1)|0);
      $dp138=$incdec_ptr150;
      HEAP8[($incdec_ptr150)]=$136;
      __label__ = 41; break;
    case 41: 
      var $138=$i;
      var $inc152=(($138+1)|0);
      $i=$inc152;
      __label__ = 39; break;
    case 42: 
      var $139=$row_info_addr;
      var $channels154=(($139+10)|0);
      HEAP8[($channels154)]=4;
      var $140=$row_info_addr;
      var $pixel_depth155=(($140+11)|0);
      HEAP8[($pixel_depth155)]=32;
      var $141=$row_width;
      var $mul156=((($141<<2))|0);
      var $142=$row_info_addr;
      var $rowbytes157=(($142+4)|0);
      HEAP32[(($rowbytes157)>>2)]=$mul156;
      __label__ = 43; break;
    case 43: 
      __label__ = 58; break;
    case 44: 
      var $143=$row_info_addr;
      var $bit_depth160=(($143+9)|0);
      var $144=HEAPU8[($bit_depth160)];
      var $conv161=(($144)&255);
      var $cmp162=(($conv161)|0)==16;
      if ($cmp162) { __label__ = 45; break; } else { __label__ = 57; break; }
    case 45: 
      var $145=$flags_addr;
      var $and165=$145 & 128;
      var $tobool166=(($and165)|0)!=0;
      if ($tobool166) { __label__ = 46; break; } else { __label__ = 51; break; }
    case 46: 
      var $146=$row_addr;
      var $147=$row_width;
      var $mul169=(($147*6)|0);
      var $add_ptr170=(($146+$mul169)|0);
      $sp168=$add_ptr170;
      var $148=$sp168;
      var $149=$row_width;
      var $mul172=((($149<<1))|0);
      var $add_ptr173=(($148+$mul172)|0);
      $dp171=$add_ptr173;
      $i=1;
      __label__ = 47; break;
    case 47: 
      var $150=$i;
      var $151=$row_width;
      var $cmp175=(($150)>>>0) < (($151)>>>0);
      if ($cmp175) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: 
      var $152=$hi_filler;
      var $153=$dp171;
      var $incdec_ptr178=(($153-1)|0);
      $dp171=$incdec_ptr178;
      HEAP8[($incdec_ptr178)]=$152;
      var $154=$lo_filler;
      var $155=$dp171;
      var $incdec_ptr179=(($155-1)|0);
      $dp171=$incdec_ptr179;
      HEAP8[($incdec_ptr179)]=$154;
      var $156=$sp168;
      var $incdec_ptr180=(($156-1)|0);
      $sp168=$incdec_ptr180;
      var $157=HEAP8[($incdec_ptr180)];
      var $158=$dp171;
      var $incdec_ptr181=(($158-1)|0);
      $dp171=$incdec_ptr181;
      HEAP8[($incdec_ptr181)]=$157;
      var $159=$sp168;
      var $incdec_ptr182=(($159-1)|0);
      $sp168=$incdec_ptr182;
      var $160=HEAP8[($incdec_ptr182)];
      var $161=$dp171;
      var $incdec_ptr183=(($161-1)|0);
      $dp171=$incdec_ptr183;
      HEAP8[($incdec_ptr183)]=$160;
      var $162=$sp168;
      var $incdec_ptr184=(($162-1)|0);
      $sp168=$incdec_ptr184;
      var $163=HEAP8[($incdec_ptr184)];
      var $164=$dp171;
      var $incdec_ptr185=(($164-1)|0);
      $dp171=$incdec_ptr185;
      HEAP8[($incdec_ptr185)]=$163;
      var $165=$sp168;
      var $incdec_ptr186=(($165-1)|0);
      $sp168=$incdec_ptr186;
      var $166=HEAP8[($incdec_ptr186)];
      var $167=$dp171;
      var $incdec_ptr187=(($167-1)|0);
      $dp171=$incdec_ptr187;
      HEAP8[($incdec_ptr187)]=$166;
      var $168=$sp168;
      var $incdec_ptr188=(($168-1)|0);
      $sp168=$incdec_ptr188;
      var $169=HEAP8[($incdec_ptr188)];
      var $170=$dp171;
      var $incdec_ptr189=(($170-1)|0);
      $dp171=$incdec_ptr189;
      HEAP8[($incdec_ptr189)]=$169;
      var $171=$sp168;
      var $incdec_ptr190=(($171-1)|0);
      $sp168=$incdec_ptr190;
      var $172=HEAP8[($incdec_ptr190)];
      var $173=$dp171;
      var $incdec_ptr191=(($173-1)|0);
      $dp171=$incdec_ptr191;
      HEAP8[($incdec_ptr191)]=$172;
      __label__ = 49; break;
    case 49: 
      var $174=$i;
      var $inc193=(($174+1)|0);
      $i=$inc193;
      __label__ = 47; break;
    case 50: 
      var $175=$hi_filler;
      var $176=$dp171;
      var $incdec_ptr195=(($176-1)|0);
      $dp171=$incdec_ptr195;
      HEAP8[($incdec_ptr195)]=$175;
      var $177=$lo_filler;
      var $178=$dp171;
      var $incdec_ptr196=(($178-1)|0);
      $dp171=$incdec_ptr196;
      HEAP8[($incdec_ptr196)]=$177;
      var $179=$row_info_addr;
      var $channels197=(($179+10)|0);
      HEAP8[($channels197)]=4;
      var $180=$row_info_addr;
      var $pixel_depth198=(($180+11)|0);
      HEAP8[($pixel_depth198)]=64;
      var $181=$row_width;
      var $mul199=((($181<<3))|0);
      var $182=$row_info_addr;
      var $rowbytes200=(($182+4)|0);
      HEAP32[(($rowbytes200)>>2)]=$mul199;
      __label__ = 56; break;
    case 51: 
      var $183=$row_addr;
      var $184=$row_width;
      var $mul203=(($184*6)|0);
      var $add_ptr204=(($183+$mul203)|0);
      $sp202=$add_ptr204;
      var $185=$sp202;
      var $186=$row_width;
      var $mul206=((($186<<1))|0);
      var $add_ptr207=(($185+$mul206)|0);
      $dp205=$add_ptr207;
      $i=0;
      __label__ = 52; break;
    case 52: 
      var $187=$i;
      var $188=$row_width;
      var $cmp209=(($187)>>>0) < (($188)>>>0);
      if ($cmp209) { __label__ = 53; break; } else { __label__ = 55; break; }
    case 53: 
      var $189=$sp202;
      var $incdec_ptr212=(($189-1)|0);
      $sp202=$incdec_ptr212;
      var $190=HEAP8[($incdec_ptr212)];
      var $191=$dp205;
      var $incdec_ptr213=(($191-1)|0);
      $dp205=$incdec_ptr213;
      HEAP8[($incdec_ptr213)]=$190;
      var $192=$sp202;
      var $incdec_ptr214=(($192-1)|0);
      $sp202=$incdec_ptr214;
      var $193=HEAP8[($incdec_ptr214)];
      var $194=$dp205;
      var $incdec_ptr215=(($194-1)|0);
      $dp205=$incdec_ptr215;
      HEAP8[($incdec_ptr215)]=$193;
      var $195=$sp202;
      var $incdec_ptr216=(($195-1)|0);
      $sp202=$incdec_ptr216;
      var $196=HEAP8[($incdec_ptr216)];
      var $197=$dp205;
      var $incdec_ptr217=(($197-1)|0);
      $dp205=$incdec_ptr217;
      HEAP8[($incdec_ptr217)]=$196;
      var $198=$sp202;
      var $incdec_ptr218=(($198-1)|0);
      $sp202=$incdec_ptr218;
      var $199=HEAP8[($incdec_ptr218)];
      var $200=$dp205;
      var $incdec_ptr219=(($200-1)|0);
      $dp205=$incdec_ptr219;
      HEAP8[($incdec_ptr219)]=$199;
      var $201=$sp202;
      var $incdec_ptr220=(($201-1)|0);
      $sp202=$incdec_ptr220;
      var $202=HEAP8[($incdec_ptr220)];
      var $203=$dp205;
      var $incdec_ptr221=(($203-1)|0);
      $dp205=$incdec_ptr221;
      HEAP8[($incdec_ptr221)]=$202;
      var $204=$sp202;
      var $incdec_ptr222=(($204-1)|0);
      $sp202=$incdec_ptr222;
      var $205=HEAP8[($incdec_ptr222)];
      var $206=$dp205;
      var $incdec_ptr223=(($206-1)|0);
      $dp205=$incdec_ptr223;
      HEAP8[($incdec_ptr223)]=$205;
      var $207=$hi_filler;
      var $208=$dp205;
      var $incdec_ptr224=(($208-1)|0);
      $dp205=$incdec_ptr224;
      HEAP8[($incdec_ptr224)]=$207;
      var $209=$lo_filler;
      var $210=$dp205;
      var $incdec_ptr225=(($210-1)|0);
      $dp205=$incdec_ptr225;
      HEAP8[($incdec_ptr225)]=$209;
      __label__ = 54; break;
    case 54: 
      var $211=$i;
      var $inc227=(($211+1)|0);
      $i=$inc227;
      __label__ = 52; break;
    case 55: 
      var $212=$row_info_addr;
      var $channels229=(($212+10)|0);
      HEAP8[($channels229)]=4;
      var $213=$row_info_addr;
      var $pixel_depth230=(($213+11)|0);
      HEAP8[($pixel_depth230)]=64;
      var $214=$row_width;
      var $mul231=((($214<<3))|0);
      var $215=$row_info_addr;
      var $rowbytes232=(($215+4)|0);
      HEAP32[(($rowbytes232)>>2)]=$mul231;
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_read_filler["X"]=1;

function _png_do_read_invert_alpha($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $row_width;
      var $sp;
      var $dp;
      var $i;
      var $sp12;
      var $dp15;
      var $i16;
      var $sp46;
      var $dp49;
      var $i50;
      var $sp66;
      var $dp69;
      var $i70;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $width=(($0)|0);
      var $1=HEAP32[(($width)>>2)];
      $row_width=$1;
      var $2=$row_info_addr;
      var $color_type=(($2+8)|0);
      var $3=HEAPU8[($color_type)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==6;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 14; break; }
    case 2: 
      var $4=$row_info_addr;
      var $bit_depth=(($4+9)|0);
      var $5=HEAPU8[($bit_depth)];
      var $conv2=(($5)&255);
      var $cmp3=(($conv2)|0)==8;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $6=$row_addr;
      var $7=$row_info_addr;
      var $rowbytes=(($7+4)|0);
      var $8=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($6+$8)|0);
      $sp=$add_ptr;
      var $9=$sp;
      $dp=$9;
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $10=$i;
      var $11=$row_width;
      var $cmp6=(($10)>>>0) < (($11)>>>0);
      if ($cmp6) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $12=$sp;
      var $incdec_ptr=(($12-1)|0);
      $sp=$incdec_ptr;
      var $13=HEAPU8[($incdec_ptr)];
      var $conv8=(($13)&255);
      var $sub=((255-$conv8)|0);
      var $conv9=(($sub) & 255);
      var $14=$dp;
      var $incdec_ptr10=(($14-1)|0);
      $dp=$incdec_ptr10;
      HEAP8[($incdec_ptr10)]=$conv9;
      var $15=$sp;
      var $add_ptr11=(($15-3)|0);
      $sp=$add_ptr11;
      var $16=$sp;
      $dp=$16;
      __label__ = 6; break;
    case 6: 
      var $17=$i;
      var $inc=(($17+1)|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      __label__ = 13; break;
    case 8: 
      var $18=$row_addr;
      var $19=$row_info_addr;
      var $rowbytes13=(($19+4)|0);
      var $20=HEAP32[(($rowbytes13)>>2)];
      var $add_ptr14=(($18+$20)|0);
      $sp12=$add_ptr14;
      var $21=$sp12;
      $dp15=$21;
      $i16=0;
      __label__ = 9; break;
    case 9: 
      var $22=$i16;
      var $23=$row_width;
      var $cmp18=(($22)>>>0) < (($23)>>>0);
      if ($cmp18) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $24=$sp12;
      var $incdec_ptr21=(($24-1)|0);
      $sp12=$incdec_ptr21;
      var $25=HEAPU8[($incdec_ptr21)];
      var $conv22=(($25)&255);
      var $sub23=((255-$conv22)|0);
      var $conv24=(($sub23) & 255);
      var $26=$dp15;
      var $incdec_ptr25=(($26-1)|0);
      $dp15=$incdec_ptr25;
      HEAP8[($incdec_ptr25)]=$conv24;
      var $27=$sp12;
      var $incdec_ptr26=(($27-1)|0);
      $sp12=$incdec_ptr26;
      var $28=HEAPU8[($incdec_ptr26)];
      var $conv27=(($28)&255);
      var $sub28=((255-$conv27)|0);
      var $conv29=(($sub28) & 255);
      var $29=$dp15;
      var $incdec_ptr30=(($29-1)|0);
      $dp15=$incdec_ptr30;
      HEAP8[($incdec_ptr30)]=$conv29;
      var $30=$sp12;
      var $add_ptr31=(($30-6)|0);
      $sp12=$add_ptr31;
      var $31=$sp12;
      $dp15=$31;
      __label__ = 11; break;
    case 11: 
      var $32=$i16;
      var $inc33=(($32+1)|0);
      $i16=$inc33;
      __label__ = 9; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 28; break;
    case 14: 
      var $33=$row_info_addr;
      var $color_type36=(($33+8)|0);
      var $34=HEAPU8[($color_type36)];
      var $conv37=(($34)&255);
      var $cmp38=(($conv37)|0)==4;
      if ($cmp38) { __label__ = 15; break; } else { __label__ = 27; break; }
    case 15: 
      var $35=$row_info_addr;
      var $bit_depth41=(($35+9)|0);
      var $36=HEAPU8[($bit_depth41)];
      var $conv42=(($36)&255);
      var $cmp43=(($conv42)|0)==8;
      if ($cmp43) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $37=$row_addr;
      var $38=$row_info_addr;
      var $rowbytes47=(($38+4)|0);
      var $39=HEAP32[(($rowbytes47)>>2)];
      var $add_ptr48=(($37+$39)|0);
      $sp46=$add_ptr48;
      var $40=$sp46;
      $dp49=$40;
      $i50=0;
      __label__ = 17; break;
    case 17: 
      var $41=$i50;
      var $42=$row_width;
      var $cmp52=(($41)>>>0) < (($42)>>>0);
      if ($cmp52) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $43=$sp46;
      var $incdec_ptr55=(($43-1)|0);
      $sp46=$incdec_ptr55;
      var $44=HEAPU8[($incdec_ptr55)];
      var $conv56=(($44)&255);
      var $sub57=((255-$conv56)|0);
      var $conv58=(($sub57) & 255);
      var $45=$dp49;
      var $incdec_ptr59=(($45-1)|0);
      $dp49=$incdec_ptr59;
      HEAP8[($incdec_ptr59)]=$conv58;
      var $46=$sp46;
      var $incdec_ptr60=(($46-1)|0);
      $sp46=$incdec_ptr60;
      var $47=HEAP8[($incdec_ptr60)];
      var $48=$dp49;
      var $incdec_ptr61=(($48-1)|0);
      $dp49=$incdec_ptr61;
      HEAP8[($incdec_ptr61)]=$47;
      __label__ = 19; break;
    case 19: 
      var $49=$i50;
      var $inc63=(($49+1)|0);
      $i50=$inc63;
      __label__ = 17; break;
    case 20: 
      __label__ = 26; break;
    case 21: 
      var $50=$row_addr;
      var $51=$row_info_addr;
      var $rowbytes67=(($51+4)|0);
      var $52=HEAP32[(($rowbytes67)>>2)];
      var $add_ptr68=(($50+$52)|0);
      $sp66=$add_ptr68;
      var $53=$sp66;
      $dp69=$53;
      $i70=0;
      __label__ = 22; break;
    case 22: 
      var $54=$i70;
      var $55=$row_width;
      var $cmp72=(($54)>>>0) < (($55)>>>0);
      if ($cmp72) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $56=$sp66;
      var $incdec_ptr75=(($56-1)|0);
      $sp66=$incdec_ptr75;
      var $57=HEAPU8[($incdec_ptr75)];
      var $conv76=(($57)&255);
      var $sub77=((255-$conv76)|0);
      var $conv78=(($sub77) & 255);
      var $58=$dp69;
      var $incdec_ptr79=(($58-1)|0);
      $dp69=$incdec_ptr79;
      HEAP8[($incdec_ptr79)]=$conv78;
      var $59=$sp66;
      var $incdec_ptr80=(($59-1)|0);
      $sp66=$incdec_ptr80;
      var $60=HEAPU8[($incdec_ptr80)];
      var $conv81=(($60)&255);
      var $sub82=((255-$conv81)|0);
      var $conv83=(($sub82) & 255);
      var $61=$dp69;
      var $incdec_ptr84=(($61-1)|0);
      $dp69=$incdec_ptr84;
      HEAP8[($incdec_ptr84)]=$conv83;
      var $62=$sp66;
      var $add_ptr85=(($62-2)|0);
      $sp66=$add_ptr85;
      var $63=$sp66;
      $dp69=$63;
      __label__ = 24; break;
    case 24: 
      var $64=$i70;
      var $inc87=(($64+1)|0);
      $i70=$inc87;
      __label__ = 22; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_read_invert_alpha["X"]=1;

function _png_do_read_swap_alpha($row_info, $row) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $row_width;
      var $sp;
      var $dp;
      var $save;
      var $i;
      var $sp15;
      var $dp18;
      var $save19=__stackBase__;
      var $i20;
      var $sp58;
      var $dp61;
      var $save62;
      var $i63;
      var $sp76;
      var $dp79;
      var $save80=__stackBase__+4;
      var $i81;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $width=(($0)|0);
      var $1=HEAP32[(($width)>>2)];
      $row_width=$1;
      var $2=$row_info_addr;
      var $color_type=(($2+8)|0);
      var $3=HEAPU8[($color_type)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==6;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 14; break; }
    case 2: 
      var $4=$row_info_addr;
      var $bit_depth=(($4+9)|0);
      var $5=HEAPU8[($bit_depth)];
      var $conv2=(($5)&255);
      var $cmp3=(($conv2)|0)==8;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $6=$row_addr;
      var $7=$row_info_addr;
      var $rowbytes=(($7+4)|0);
      var $8=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($6+$8)|0);
      $sp=$add_ptr;
      var $9=$sp;
      $dp=$9;
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $10=$i;
      var $11=$row_width;
      var $cmp6=(($10)>>>0) < (($11)>>>0);
      if ($cmp6) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $12=$sp;
      var $incdec_ptr=(($12-1)|0);
      $sp=$incdec_ptr;
      var $13=HEAP8[($incdec_ptr)];
      $save=$13;
      var $14=$sp;
      var $incdec_ptr8=(($14-1)|0);
      $sp=$incdec_ptr8;
      var $15=HEAP8[($incdec_ptr8)];
      var $16=$dp;
      var $incdec_ptr9=(($16-1)|0);
      $dp=$incdec_ptr9;
      HEAP8[($incdec_ptr9)]=$15;
      var $17=$sp;
      var $incdec_ptr10=(($17-1)|0);
      $sp=$incdec_ptr10;
      var $18=HEAP8[($incdec_ptr10)];
      var $19=$dp;
      var $incdec_ptr11=(($19-1)|0);
      $dp=$incdec_ptr11;
      HEAP8[($incdec_ptr11)]=$18;
      var $20=$sp;
      var $incdec_ptr12=(($20-1)|0);
      $sp=$incdec_ptr12;
      var $21=HEAP8[($incdec_ptr12)];
      var $22=$dp;
      var $incdec_ptr13=(($22-1)|0);
      $dp=$incdec_ptr13;
      HEAP8[($incdec_ptr13)]=$21;
      var $23=$save;
      var $24=$dp;
      var $incdec_ptr14=(($24-1)|0);
      $dp=$incdec_ptr14;
      HEAP8[($incdec_ptr14)]=$23;
      __label__ = 6; break;
    case 6: 
      var $25=$i;
      var $inc=(($25+1)|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      __label__ = 13; break;
    case 8: 
      var $26=$row_addr;
      var $27=$row_info_addr;
      var $rowbytes16=(($27+4)|0);
      var $28=HEAP32[(($rowbytes16)>>2)];
      var $add_ptr17=(($26+$28)|0);
      $sp15=$add_ptr17;
      var $29=$sp15;
      $dp18=$29;
      $i20=0;
      __label__ = 9; break;
    case 9: 
      var $30=$i20;
      var $31=$row_width;
      var $cmp22=(($30)>>>0) < (($31)>>>0);
      if ($cmp22) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $32=$sp15;
      var $incdec_ptr25=(($32-1)|0);
      $sp15=$incdec_ptr25;
      var $33=HEAP8[($incdec_ptr25)];
      var $arrayidx=(($save19)|0);
      HEAP8[($arrayidx)]=$33;
      var $34=$sp15;
      var $incdec_ptr26=(($34-1)|0);
      $sp15=$incdec_ptr26;
      var $35=HEAP8[($incdec_ptr26)];
      var $arrayidx27=(($save19+1)|0);
      HEAP8[($arrayidx27)]=$35;
      var $36=$sp15;
      var $incdec_ptr28=(($36-1)|0);
      $sp15=$incdec_ptr28;
      var $37=HEAP8[($incdec_ptr28)];
      var $38=$dp18;
      var $incdec_ptr29=(($38-1)|0);
      $dp18=$incdec_ptr29;
      HEAP8[($incdec_ptr29)]=$37;
      var $39=$sp15;
      var $incdec_ptr30=(($39-1)|0);
      $sp15=$incdec_ptr30;
      var $40=HEAP8[($incdec_ptr30)];
      var $41=$dp18;
      var $incdec_ptr31=(($41-1)|0);
      $dp18=$incdec_ptr31;
      HEAP8[($incdec_ptr31)]=$40;
      var $42=$sp15;
      var $incdec_ptr32=(($42-1)|0);
      $sp15=$incdec_ptr32;
      var $43=HEAP8[($incdec_ptr32)];
      var $44=$dp18;
      var $incdec_ptr33=(($44-1)|0);
      $dp18=$incdec_ptr33;
      HEAP8[($incdec_ptr33)]=$43;
      var $45=$sp15;
      var $incdec_ptr34=(($45-1)|0);
      $sp15=$incdec_ptr34;
      var $46=HEAP8[($incdec_ptr34)];
      var $47=$dp18;
      var $incdec_ptr35=(($47-1)|0);
      $dp18=$incdec_ptr35;
      HEAP8[($incdec_ptr35)]=$46;
      var $48=$sp15;
      var $incdec_ptr36=(($48-1)|0);
      $sp15=$incdec_ptr36;
      var $49=HEAP8[($incdec_ptr36)];
      var $50=$dp18;
      var $incdec_ptr37=(($50-1)|0);
      $dp18=$incdec_ptr37;
      HEAP8[($incdec_ptr37)]=$49;
      var $51=$sp15;
      var $incdec_ptr38=(($51-1)|0);
      $sp15=$incdec_ptr38;
      var $52=HEAP8[($incdec_ptr38)];
      var $53=$dp18;
      var $incdec_ptr39=(($53-1)|0);
      $dp18=$incdec_ptr39;
      HEAP8[($incdec_ptr39)]=$52;
      var $arrayidx40=(($save19)|0);
      var $54=HEAP8[($arrayidx40)];
      var $55=$dp18;
      var $incdec_ptr41=(($55-1)|0);
      $dp18=$incdec_ptr41;
      HEAP8[($incdec_ptr41)]=$54;
      var $arrayidx42=(($save19+1)|0);
      var $56=HEAP8[($arrayidx42)];
      var $57=$dp18;
      var $incdec_ptr43=(($57-1)|0);
      $dp18=$incdec_ptr43;
      HEAP8[($incdec_ptr43)]=$56;
      __label__ = 11; break;
    case 11: 
      var $58=$i20;
      var $inc45=(($58+1)|0);
      $i20=$inc45;
      __label__ = 9; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 28; break;
    case 14: 
      var $59=$row_info_addr;
      var $color_type48=(($59+8)|0);
      var $60=HEAPU8[($color_type48)];
      var $conv49=(($60)&255);
      var $cmp50=(($conv49)|0)==4;
      if ($cmp50) { __label__ = 15; break; } else { __label__ = 27; break; }
    case 15: 
      var $61=$row_info_addr;
      var $bit_depth53=(($61+9)|0);
      var $62=HEAPU8[($bit_depth53)];
      var $conv54=(($62)&255);
      var $cmp55=(($conv54)|0)==8;
      if ($cmp55) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $63=$row_addr;
      var $64=$row_info_addr;
      var $rowbytes59=(($64+4)|0);
      var $65=HEAP32[(($rowbytes59)>>2)];
      var $add_ptr60=(($63+$65)|0);
      $sp58=$add_ptr60;
      var $66=$sp58;
      $dp61=$66;
      $i63=0;
      __label__ = 17; break;
    case 17: 
      var $67=$i63;
      var $68=$row_width;
      var $cmp65=(($67)>>>0) < (($68)>>>0);
      if ($cmp65) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $69=$sp58;
      var $incdec_ptr68=(($69-1)|0);
      $sp58=$incdec_ptr68;
      var $70=HEAP8[($incdec_ptr68)];
      $save62=$70;
      var $71=$sp58;
      var $incdec_ptr69=(($71-1)|0);
      $sp58=$incdec_ptr69;
      var $72=HEAP8[($incdec_ptr69)];
      var $73=$dp61;
      var $incdec_ptr70=(($73-1)|0);
      $dp61=$incdec_ptr70;
      HEAP8[($incdec_ptr70)]=$72;
      var $74=$save62;
      var $75=$dp61;
      var $incdec_ptr71=(($75-1)|0);
      $dp61=$incdec_ptr71;
      HEAP8[($incdec_ptr71)]=$74;
      __label__ = 19; break;
    case 19: 
      var $76=$i63;
      var $inc73=(($76+1)|0);
      $i63=$inc73;
      __label__ = 17; break;
    case 20: 
      __label__ = 26; break;
    case 21: 
      var $77=$row_addr;
      var $78=$row_info_addr;
      var $rowbytes77=(($78+4)|0);
      var $79=HEAP32[(($rowbytes77)>>2)];
      var $add_ptr78=(($77+$79)|0);
      $sp76=$add_ptr78;
      var $80=$sp76;
      $dp79=$80;
      $i81=0;
      __label__ = 22; break;
    case 22: 
      var $81=$i81;
      var $82=$row_width;
      var $cmp83=(($81)>>>0) < (($82)>>>0);
      if ($cmp83) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $83=$sp76;
      var $incdec_ptr86=(($83-1)|0);
      $sp76=$incdec_ptr86;
      var $84=HEAP8[($incdec_ptr86)];
      var $arrayidx87=(($save80)|0);
      HEAP8[($arrayidx87)]=$84;
      var $85=$sp76;
      var $incdec_ptr88=(($85-1)|0);
      $sp76=$incdec_ptr88;
      var $86=HEAP8[($incdec_ptr88)];
      var $arrayidx89=(($save80+1)|0);
      HEAP8[($arrayidx89)]=$86;
      var $87=$sp76;
      var $incdec_ptr90=(($87-1)|0);
      $sp76=$incdec_ptr90;
      var $88=HEAP8[($incdec_ptr90)];
      var $89=$dp79;
      var $incdec_ptr91=(($89-1)|0);
      $dp79=$incdec_ptr91;
      HEAP8[($incdec_ptr91)]=$88;
      var $90=$sp76;
      var $incdec_ptr92=(($90-1)|0);
      $sp76=$incdec_ptr92;
      var $91=HEAP8[($incdec_ptr92)];
      var $92=$dp79;
      var $incdec_ptr93=(($92-1)|0);
      $dp79=$incdec_ptr93;
      HEAP8[($incdec_ptr93)]=$91;
      var $arrayidx94=(($save80)|0);
      var $93=HEAP8[($arrayidx94)];
      var $94=$dp79;
      var $incdec_ptr95=(($94-1)|0);
      $dp79=$incdec_ptr95;
      HEAP8[($incdec_ptr95)]=$93;
      var $arrayidx96=(($save80+1)|0);
      var $95=HEAP8[($arrayidx96)];
      var $96=$dp79;
      var $incdec_ptr97=(($96-1)|0);
      $dp79=$incdec_ptr97;
      HEAP8[($incdec_ptr97)]=$95;
      __label__ = 24; break;
    case 24: 
      var $97=$i81;
      var $inc99=(($97+1)|0);
      $i81=$inc99;
      __label__ = 22; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_read_swap_alpha["X"]=1;

function _png_do_read_intrapixel($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $bytes_per_pixel;
      var $row_width;
      var $rp;
      var $i;
      var $rp39;
      var $i40;
      var $s0;
      var $s1;
      var $s2;
      var $red;
      var $blue;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $color_type=(($0+8)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $and=$conv & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 28; break; }
    case 2: 
      var $2=$row_info_addr;
      var $width=(($2)|0);
      var $3=HEAP32[(($width)>>2)];
      $row_width=$3;
      var $4=$row_info_addr;
      var $bit_depth=(($4+9)|0);
      var $5=HEAPU8[($bit_depth)];
      var $conv1=(($5)&255);
      var $cmp=(($conv1)|0)==8;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 14; break; }
    case 3: 
      var $6=$row_info_addr;
      var $color_type4=(($6+8)|0);
      var $7=HEAPU8[($color_type4)];
      var $conv5=(($7)&255);
      var $cmp6=(($conv5)|0)==2;
      if ($cmp6) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $bytes_per_pixel=3;
      __label__ = 9; break;
    case 5: 
      var $8=$row_info_addr;
      var $color_type9=(($8+8)|0);
      var $9=HEAPU8[($color_type9)];
      var $conv10=(($9)&255);
      var $cmp11=(($conv10)|0)==6;
      if ($cmp11) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $bytes_per_pixel=4;
      __label__ = 8; break;
    case 7: 
      __label__ = 28; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      $i=0;
      var $10=$row_addr;
      $rp=$10;
      __label__ = 10; break;
    case 10: 
      var $11=$i;
      var $12=$row_width;
      var $cmp16=(($11)>>>0) < (($12)>>>0);
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $13=$rp;
      var $14=HEAPU8[($13)];
      var $conv18=(($14)&255);
      var $add=(($conv18+256)|0);
      var $15=$rp;
      var $add_ptr=(($15+1)|0);
      var $16=HEAPU8[($add_ptr)];
      var $conv19=(($16)&255);
      var $add20=(($add+$conv19)|0);
      var $and21=$add20 & 255;
      var $conv22=(($and21) & 255);
      var $17=$rp;
      HEAP8[($17)]=$conv22;
      var $18=$rp;
      var $add_ptr23=(($18+2)|0);
      var $19=HEAPU8[($add_ptr23)];
      var $conv24=(($19)&255);
      var $add25=(($conv24+256)|0);
      var $20=$rp;
      var $add_ptr26=(($20+1)|0);
      var $21=HEAPU8[($add_ptr26)];
      var $conv27=(($21)&255);
      var $add28=(($add25+$conv27)|0);
      var $and29=$add28 & 255;
      var $conv30=(($and29) & 255);
      var $22=$rp;
      var $add_ptr31=(($22+2)|0);
      HEAP8[($add_ptr31)]=$conv30;
      __label__ = 12; break;
    case 12: 
      var $23=$i;
      var $inc=(($23+1)|0);
      $i=$inc;
      var $24=$bytes_per_pixel;
      var $25=$rp;
      var $add_ptr32=(($25+$24)|0);
      $rp=$add_ptr32;
      __label__ = 10; break;
    case 13: 
      __label__ = 27; break;
    case 14: 
      var $26=$row_info_addr;
      var $bit_depth34=(($26+9)|0);
      var $27=HEAPU8[($bit_depth34)];
      var $conv35=(($27)&255);
      var $cmp36=(($conv35)|0)==16;
      if ($cmp36) { __label__ = 15; break; } else { __label__ = 26; break; }
    case 15: 
      var $28=$row_info_addr;
      var $color_type41=(($28+8)|0);
      var $29=HEAPU8[($color_type41)];
      var $conv42=(($29)&255);
      var $cmp43=(($conv42)|0)==2;
      if ($cmp43) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $bytes_per_pixel=6;
      __label__ = 21; break;
    case 17: 
      var $30=$row_info_addr;
      var $color_type47=(($30+8)|0);
      var $31=HEAPU8[($color_type47)];
      var $conv48=(($31)&255);
      var $cmp49=(($conv48)|0)==6;
      if ($cmp49) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $bytes_per_pixel=8;
      __label__ = 20; break;
    case 19: 
      __label__ = 28; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      $i40=0;
      var $32=$row_addr;
      $rp39=$32;
      __label__ = 22; break;
    case 22: 
      var $33=$i40;
      var $34=$row_width;
      var $cmp56=(($33)>>>0) < (($34)>>>0);
      if ($cmp56) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $35=$rp39;
      var $36=HEAPU8[($35)];
      var $conv59=(($36)&255);
      var $shl=$conv59 << 8;
      var $37=$rp39;
      var $add_ptr60=(($37+1)|0);
      var $38=HEAPU8[($add_ptr60)];
      var $conv61=(($38)&255);
      var $or=$shl | $conv61;
      $s0=$or;
      var $39=$rp39;
      var $add_ptr62=(($39+2)|0);
      var $40=HEAPU8[($add_ptr62)];
      var $conv63=(($40)&255);
      var $shl64=$conv63 << 8;
      var $41=$rp39;
      var $add_ptr65=(($41+3)|0);
      var $42=HEAPU8[($add_ptr65)];
      var $conv66=(($42)&255);
      var $or67=$shl64 | $conv66;
      $s1=$or67;
      var $43=$rp39;
      var $add_ptr68=(($43+4)|0);
      var $44=HEAPU8[($add_ptr68)];
      var $conv69=(($44)&255);
      var $shl70=$conv69 << 8;
      var $45=$rp39;
      var $add_ptr71=(($45+5)|0);
      var $46=HEAPU8[($add_ptr71)];
      var $conv72=(($46)&255);
      var $or73=$shl70 | $conv72;
      $s2=$or73;
      var $47=$s0;
      var $48=$s1;
      var $add74=(($47+$48)|0);
      var $add75=(($add74+65536)|0);
      var $and76=$add75 & 65535;
      $red=$and76;
      var $49=$s2;
      var $50=$s1;
      var $add77=(($49+$50)|0);
      var $add78=(($add77+65536)|0);
      var $and79=$add78 & 65535;
      $blue=$and79;
      var $51=$red;
      var $shr=$51 >>> 8;
      var $and80=$shr & 255;
      var $conv81=(($and80) & 255);
      var $52=$rp39;
      HEAP8[($52)]=$conv81;
      var $53=$red;
      var $and82=$53 & 255;
      var $conv83=(($and82) & 255);
      var $54=$rp39;
      var $add_ptr84=(($54+1)|0);
      HEAP8[($add_ptr84)]=$conv83;
      var $55=$blue;
      var $shr85=$55 >>> 8;
      var $and86=$shr85 & 255;
      var $conv87=(($and86) & 255);
      var $56=$rp39;
      var $add_ptr88=(($56+4)|0);
      HEAP8[($add_ptr88)]=$conv87;
      var $57=$blue;
      var $and89=$57 & 255;
      var $conv90=(($and89) & 255);
      var $58=$rp39;
      var $add_ptr91=(($58+5)|0);
      HEAP8[($add_ptr91)]=$conv90;
      __label__ = 24; break;
    case 24: 
      var $59=$i40;
      var $inc93=(($59+1)|0);
      $i40=$inc93;
      var $60=$bytes_per_pixel;
      var $61=$rp39;
      var $add_ptr94=(($61+$60)|0);
      $rp39=$add_ptr94;
      __label__ = 22; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_read_intrapixel["X"]=1;

function _png_get_uint_31($png_ptr, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $buf_addr;
      var $uval;
      $png_ptr_addr=$png_ptr;
      $buf_addr=$buf;
      var $0=$buf_addr;
      var $1=HEAPU8[($0)];
      var $conv=(($1)&255);
      var $shl=$conv << 24;
      var $2=$buf_addr;
      var $add_ptr=(($2+1)|0);
      var $3=HEAPU8[($add_ptr)];
      var $conv1=(($3)&255);
      var $shl2=$conv1 << 16;
      var $add=(($shl+$shl2)|0);
      var $4=$buf_addr;
      var $add_ptr3=(($4+2)|0);
      var $5=HEAPU8[($add_ptr3)];
      var $conv4=(($5)&255);
      var $shl5=$conv4 << 8;
      var $add6=(($add+$shl5)|0);
      var $6=$buf_addr;
      var $add_ptr7=(($6+3)|0);
      var $7=HEAPU8[($add_ptr7)];
      var $conv8=(($7)&255);
      var $add9=(($add6+$conv8)|0);
      $uval=$add9;
      var $8=$uval;
      var $cmp=(($8)>>>0) > 2147483647;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$png_ptr_addr;
      _png_error($9, ((STRING_TABLE.__str749)|0));
      __label__ = 3; break;
    case 3: 
      var $10=$uval;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_read_sig($png_ptr, $info_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $num_checked;
      var $num_to_check;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      var $0=$png_ptr_addr;
      var $sig_bytes=(($0+297)|0);
      var $1=HEAPU8[($sig_bytes)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0) >= 8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 11; break;
    case 3: 
      var $2=$png_ptr_addr;
      var $sig_bytes2=(($2+297)|0);
      var $3=HEAPU8[($sig_bytes2)];
      var $conv3=(($3)&255);
      $num_checked=$conv3;
      var $4=$num_checked;
      var $sub=((8-$4)|0);
      $num_to_check=$sub;
      var $5=$png_ptr_addr;
      var $io_state=(($5+660)|0);
      HEAP32[(($io_state)>>2)]=17;
      var $6=$png_ptr_addr;
      var $7=$num_checked;
      var $8=$info_ptr_addr;
      var $signature=(($8+32)|0);
      var $arrayidx=(($signature+$7)|0);
      var $9=$num_to_check;
      _png_read_data($6, $arrayidx, $9);
      var $10=$png_ptr_addr;
      var $sig_bytes4=(($10+297)|0);
      HEAP8[($sig_bytes4)]=8;
      var $11=$info_ptr_addr;
      var $signature5=(($11+32)|0);
      var $arraydecay=(($signature5)|0);
      var $12=$num_checked;
      var $13=$num_to_check;
      var $call=_png_sig_cmp($arraydecay, $12, $13);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $14=$num_checked;
      var $cmp7=(($14)>>>0) < 4;
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $15=$info_ptr_addr;
      var $signature9=(($15+32)|0);
      var $arraydecay10=(($signature9)|0);
      var $16=$num_checked;
      var $17=$num_to_check;
      var $sub11=(($17-4)|0);
      var $call12=_png_sig_cmp($arraydecay10, $16, $sub11);
      var $tobool13=(($call12)|0)!=0;
      if ($tobool13) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $18=$png_ptr_addr;
      _png_error($18, ((STRING_TABLE.__str1750)|0));
      __label__ = 8; break;
    case 7: 
      var $19=$png_ptr_addr;
      _png_error($19, ((STRING_TABLE.__str2751)|0));
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $20=$num_checked;
      var $cmp17=(($20)>>>0) < 3;
      if ($cmp17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $21=$png_ptr_addr;
      var $mode=(($21+84)|0);
      var $22=HEAP32[(($mode)>>2)];
      var $or=$22 | 4096;
      HEAP32[(($mode)>>2)]=$or;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_sig["X"]=1;

function _png_read_chunk_header($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $png_ptr_addr;
  var $buf=__stackBase__;
  var $length;
  $png_ptr_addr=$png_ptr;
  var $0=$png_ptr_addr;
  var $io_state=(($0+660)|0);
  HEAP32[(($io_state)>>2)]=33;
  var $1=$png_ptr_addr;
  var $arraydecay=(($buf)|0);
  _png_read_data($1, $arraydecay, 8);
  var $2=$png_ptr_addr;
  var $arraydecay1=(($buf)|0);
  var $call=_png_get_uint_31($2, $arraydecay1);
  $length=$call;
  var $arraydecay2=(($buf)|0);
  var $add_ptr=(($arraydecay2+4)|0);
  var $arrayidx=(($add_ptr)|0);
  var $3=HEAPU8[($arrayidx)];
  var $conv=(($3)&255);
  var $and=255 & $conv;
  var $shl=$and << 24;
  var $arraydecay3=(($buf)|0);
  var $add_ptr4=(($arraydecay3+4)|0);
  var $arrayidx5=(($add_ptr4+1)|0);
  var $4=HEAPU8[($arrayidx5)];
  var $conv6=(($4)&255);
  var $and7=255 & $conv6;
  var $shl8=$and7 << 16;
  var $or=$shl | $shl8;
  var $arraydecay9=(($buf)|0);
  var $add_ptr10=(($arraydecay9+4)|0);
  var $arrayidx11=(($add_ptr10+2)|0);
  var $5=HEAPU8[($arrayidx11)];
  var $conv12=(($5)&255);
  var $and13=255 & $conv12;
  var $shl14=$and13 << 8;
  var $or15=$or | $shl14;
  var $arraydecay16=(($buf)|0);
  var $add_ptr17=(($arraydecay16+4)|0);
  var $arrayidx18=(($add_ptr17+3)|0);
  var $6=HEAPU8[($arrayidx18)];
  var $conv19=(($6)&255);
  var $and20=255 & $conv19;
  var $shl21=$and20 << 0;
  var $or22=$or15 | $shl21;
  var $7=$png_ptr_addr;
  var $chunk_name=(($7+232)|0);
  HEAP32[(($chunk_name)>>2)]=$or22;
  var $8=$png_ptr_addr;
  _png_reset_crc($8);
  var $9=$png_ptr_addr;
  var $arraydecay23=(($buf)|0);
  var $add_ptr24=(($arraydecay23+4)|0);
  _png_calculate_crc($9, $add_ptr24, 4);
  var $10=$png_ptr_addr;
  var $11=$png_ptr_addr;
  var $chunk_name25=(($11+232)|0);
  var $12=HEAP32[(($chunk_name25)>>2)];
  _png_check_chunk_name($10, $12);
  var $13=$png_ptr_addr;
  var $io_state26=(($13+660)|0);
  HEAP32[(($io_state26)>>2)]=65;
  var $14=$length;
  STACKTOP = __stackBase__;
  return $14;
}
_png_read_chunk_header["X"]=1;

function _png_check_chunk_name($png_ptr, $chunk_name) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $chunk_name_addr;
      var $i;
      var $c;
      $png_ptr_addr=$png_ptr;
      $chunk_name_addr=$chunk_name;
      $i=1;
      __label__ = 2; break;
    case 2: 
      var $0=$i;
      var $cmp=(($0)|0) <= 4;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      var $1=$chunk_name_addr;
      var $and=$1 & 255;
      $c=$and;
      var $2=$c;
      var $cmp1=(($2)|0) < 65;
      if ($cmp1) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$c;
      var $cmp2=(($3)|0) > 122;
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $4=$c;
      var $cmp4=(($4)|0) > 90;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $5=$c;
      var $cmp5=(($5)|0) < 97;
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $6=$png_ptr_addr;
      _png_chunk_error($6, ((STRING_TABLE.__str133882)|0));
      __label__ = 8; break;
    case 8: 
      var $7=$chunk_name_addr;
      var $shr=$7 >>> 8;
      $chunk_name_addr=$shr;
      __label__ = 9; break;
    case 9: 
      var $8=$i;
      var $inc=(($8+1)|0);
      $i=$inc;
      __label__ = 2; break;
    case 10: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_crc_read($png_ptr, $buf, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $buf_addr;
      var $length_addr;
      $png_ptr_addr=$png_ptr;
      $buf_addr=$buf;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $2=$buf_addr;
      var $3=$length_addr;
      _png_read_data($1, $2, $3);
      var $4=$png_ptr_addr;
      var $5=$buf_addr;
      var $6=$length_addr;
      _png_calculate_crc($4, $5, $6);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_crc_finish($png_ptr, $skip) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $skip_addr;
      var $i;
      var $istop;
      $png_ptr_addr=$png_ptr;
      $skip_addr=$skip;
      var $0=$png_ptr_addr;
      var $zbuf_size=(($0+156)|0);
      var $1=HEAP32[(($zbuf_size)>>2)];
      $istop=$1;
      var $2=$skip_addr;
      $i=$2;
      __label__ = 2; break;
    case 2: 
      var $3=$i;
      var $4=$istop;
      var $cmp=(($3)>>>0) > (($4)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $5=$png_ptr_addr;
      var $6=$png_ptr_addr;
      var $zbuf=(($6+152)|0);
      var $7=HEAP32[(($zbuf)>>2)];
      var $8=$png_ptr_addr;
      var $zbuf_size1=(($8+156)|0);
      var $9=HEAP32[(($zbuf_size1)>>2)];
      _png_crc_read($5, $7, $9);
      __label__ = 4; break;
    case 4: 
      var $10=$istop;
      var $11=$i;
      var $sub=(($11-$10)|0);
      $i=$sub;
      __label__ = 2; break;
    case 5: 
      var $12=$i;
      var $tobool=(($12)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $13=$png_ptr_addr;
      var $14=$png_ptr_addr;
      var $zbuf2=(($14+152)|0);
      var $15=HEAP32[(($zbuf2)>>2)];
      var $16=$i;
      _png_crc_read($13, $15, $16);
      __label__ = 7; break;
    case 7: 
      var $17=$png_ptr_addr;
      var $call=_png_crc_error($17);
      var $tobool3=(($call)|0)!=0;
      if ($tobool3) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: 
      var $18=$png_ptr_addr;
      var $chunk_name=(($18+232)|0);
      var $19=HEAPU32[(($chunk_name)>>2)];
      var $shr=$19 >>> 29;
      var $and=1 & $shr;
      var $tobool5=(($and)|0)!=0;
      if ($tobool5) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $20=$png_ptr_addr;
      var $flags=(($20+88)|0);
      var $21=HEAP32[(($flags)>>2)];
      var $and6=$21 & 512;
      var $tobool7=(($and6)|0)!=0;
      var $lnot=$tobool7 ^ 1;
      if ($lnot) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 10: 
      var $22=$png_ptr_addr;
      var $flags8=(($22+88)|0);
      var $23=HEAP32[(($flags8)>>2)];
      var $and9=$23 & 1024;
      var $tobool10=(($and9)|0)!=0;
      if ($tobool10) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $24=$png_ptr_addr;
      _png_chunk_warning($24, ((STRING_TABLE.__str3752)|0));
      __label__ = 13; break;
    case 12: 
      var $25=$png_ptr_addr;
      _png_chunk_benign_error($25, ((STRING_TABLE.__str3752)|0));
      $retval=0;
      __label__ = 15; break;
    case 13: 
      $retval=1;
      __label__ = 15; break;
    case 14: 
      $retval=0;
      __label__ = 15; break;
    case 15: 
      var $26=$retval;
      ;
      return $26;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_crc_finish["X"]=1;

function _png_crc_error($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $crc_bytes=__stackBase__;
      var $crc;
      var $need_crc;
      $png_ptr_addr=$png_ptr;
      $need_crc=1;
      var $0=$png_ptr_addr;
      var $chunk_name=(($0+232)|0);
      var $1=HEAPU32[(($chunk_name)>>2)];
      var $shr=$1 >>> 29;
      var $and=1 & $shr;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $flags=(($2+88)|0);
      var $3=HEAP32[(($flags)>>2)];
      var $and1=$3 & 768;
      var $cmp=(($and1)|0)==768;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $need_crc=0;
      __label__ = 4; break;
    case 4: 
      __label__ = 8; break;
    case 5: 
      var $4=$png_ptr_addr;
      var $flags3=(($4+88)|0);
      var $5=HEAP32[(($flags3)>>2)];
      var $and4=$5 & 2048;
      var $tobool5=(($and4)|0)!=0;
      if ($tobool5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $need_crc=0;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $6=$png_ptr_addr;
      var $io_state=(($6+660)|0);
      HEAP32[(($io_state)>>2)]=129;
      var $7=$png_ptr_addr;
      var $arraydecay=(($crc_bytes)|0);
      _png_read_data($7, $arraydecay, 4);
      var $8=$need_crc;
      var $tobool9=(($8)|0)!=0;
      if ($tobool9) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $arraydecay11=(($crc_bytes)|0);
      var $9=HEAPU8[($arraydecay11)];
      var $conv=(($9)&255);
      var $shl=$conv << 24;
      var $arraydecay12=(($crc_bytes)|0);
      var $add_ptr=(($arraydecay12+1)|0);
      var $10=HEAPU8[($add_ptr)];
      var $conv13=(($10)&255);
      var $shl14=$conv13 << 16;
      var $add=(($shl+$shl14)|0);
      var $arraydecay15=(($crc_bytes)|0);
      var $add_ptr16=(($arraydecay15+2)|0);
      var $11=HEAPU8[($add_ptr16)];
      var $conv17=(($11)&255);
      var $shl18=$conv17 << 8;
      var $add19=(($add+$shl18)|0);
      var $arraydecay20=(($crc_bytes)|0);
      var $add_ptr21=(($arraydecay20+3)|0);
      var $12=HEAPU8[($add_ptr21)];
      var $conv22=(($12)&255);
      var $add23=(($add19+$conv22)|0);
      $crc=$add23;
      var $13=$crc;
      var $14=$png_ptr_addr;
      var $crc24=(($14+268)|0);
      var $15=HEAP32[(($crc24)>>2)];
      var $cmp25=(($13)|0)!=(($15)|0);
      var $conv26=(($cmp25)&1);
      $retval=$conv26;
      __label__ = 11; break;
    case 10: 
      $retval=0;
      __label__ = 11; break;
    case 11: 
      var $16=$retval;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_crc_error["X"]=1;

function _png_decompress_chunk($png_ptr, $comp_type, $chunklength, $prefix_size, $newlength) {
  var __stackBase__  = STACKTOP; STACKTOP += 256; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $comp_type_addr;
      var $chunklength_addr;
      var $prefix_size_addr;
      var $newlength_addr;
      var $expanded_size;
      var $new_size;
      var $text;
      var $p=__stackBase__;
      var $text39;
      $png_ptr_addr=$png_ptr;
      $comp_type_addr=$comp_type;
      $chunklength_addr=$chunklength;
      $prefix_size_addr=$prefix_size;
      $newlength_addr=$newlength;
      var $0=$prefix_size_addr;
      var $1=$chunklength_addr;
      var $cmp=(($0)>>>0) > (($1)>>>0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_warning($2, ((STRING_TABLE.__str4753)|0));
      $prefix_size_addr=0;
      __label__ = 20; break;
    case 3: 
      var $3=$comp_type_addr;
      var $cmp1=(($3)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 18; break; }
    case 4: 
      var $4=$png_ptr_addr;
      var $5=$png_ptr_addr;
      var $chunkdata=(($5+656)|0);
      var $6=HEAP32[(($chunkdata)>>2)];
      var $7=$prefix_size_addr;
      var $add_ptr=(($6+$7)|0);
      var $8=$chunklength_addr;
      var $9=$prefix_size_addr;
      var $sub=(($8-$9)|0);
      var $call=_png_inflate($4, $add_ptr, $sub, 0, 0);
      $expanded_size=$call;
      var $10=$prefix_size_addr;
      var $cmp3=(($10)>>>0) >= 4294967294;
      if ($cmp3) { __label__ = 8; break; } else { __label__ = 5; break; }
    case 5: 
      var $11=$expanded_size;
      var $12=$prefix_size_addr;
      var $sub4=((-2-$12)|0);
      var $cmp5=(($11)>>>0) >= (($sub4)>>>0);
      if ($cmp5) { __label__ = 8; break; } else { __label__ = 6; break; }
    case 6: 
      var $13=$png_ptr_addr;
      var $user_chunk_malloc_max=(($13+628)|0);
      var $14=HEAP32[(($user_chunk_malloc_max)>>2)];
      var $tobool=(($14)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $15=$prefix_size_addr;
      var $16=$expanded_size;
      var $add=(($15+$16)|0);
      var $17=$png_ptr_addr;
      var $user_chunk_malloc_max7=(($17+628)|0);
      var $18=HEAP32[(($user_chunk_malloc_max7)>>2)];
      var $sub8=(($18-1)|0);
      var $cmp9=(($add)>>>0) >= (($sub8)>>>0);
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $19=$png_ptr_addr;
      _png_warning($19, ((STRING_TABLE.__str5754)|0));
      __label__ = 17; break;
    case 9: 
      var $20=$expanded_size;
      var $cmp12=(($20)>>>0) > 0;
      if ($cmp12) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: 
      $new_size=0;
      var $21=$png_ptr_addr;
      var $22=$prefix_size_addr;
      var $23=$expanded_size;
      var $add14=(($22+$23)|0);
      var $add15=(($add14+1)|0);
      var $call16=_png_malloc_warn($21, $add15);
      $text=$call16;
      var $24=$text;
      var $cmp17=(($24)|0)!=0;
      if ($cmp17) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $25=$text;
      var $26=$png_ptr_addr;
      var $chunkdata19=(($26+656)|0);
      var $27=HEAP32[(($chunkdata19)>>2)];
      var $28=$prefix_size_addr;
      assert($28 % 1 === 0, 'memcpy given ' + $28 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($25, $27, $28, 1);
      var $29=$png_ptr_addr;
      var $30=$png_ptr_addr;
      var $chunkdata20=(($30+656)|0);
      var $31=HEAP32[(($chunkdata20)>>2)];
      var $32=$prefix_size_addr;
      var $add_ptr21=(($31+$32)|0);
      var $33=$chunklength_addr;
      var $34=$prefix_size_addr;
      var $sub22=(($33-$34)|0);
      var $35=$text;
      var $36=$prefix_size_addr;
      var $add_ptr23=(($35+$36)|0);
      var $37=$expanded_size;
      var $call24=_png_inflate($29, $add_ptr21, $sub22, $add_ptr23, $37);
      $new_size=$call24;
      var $38=$prefix_size_addr;
      var $39=$expanded_size;
      var $add25=(($38+$39)|0);
      var $40=$text;
      var $arrayidx=(($40+$add25)|0);
      HEAP8[($arrayidx)]=0;
      var $41=$new_size;
      var $42=$expanded_size;
      var $cmp26=(($41)|0)==(($42)|0);
      if ($cmp26) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $43=$png_ptr_addr;
      var $44=$png_ptr_addr;
      var $chunkdata28=(($44+656)|0);
      var $45=HEAP32[(($chunkdata28)>>2)];
      _png_free($43, $45);
      var $46=$text;
      var $47=$png_ptr_addr;
      var $chunkdata29=(($47+656)|0);
      HEAP32[(($chunkdata29)>>2)]=$46;
      var $48=$prefix_size_addr;
      var $49=$expanded_size;
      var $add30=(($48+$49)|0);
      var $50=$newlength_addr;
      HEAP32[(($50)>>2)]=$add30;
      __label__ = 25; break;
    case 13: 
      var $51=$png_ptr_addr;
      _png_warning($51, ((STRING_TABLE.__str6755)|0));
      var $52=$png_ptr_addr;
      var $53=$text;
      _png_free($52, $53);
      __label__ = 15; break;
    case 14: 
      var $54=$png_ptr_addr;
      _png_warning($54, ((STRING_TABLE.__str7756)|0));
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 19; break;
    case 18: 
      var $arraydecay=(($p)|0);
      var $55=$comp_type_addr;
      _png_warning_parameter_signed($arraydecay, 1, 1, $55);
      var $56=$png_ptr_addr;
      var $arraydecay36=(($p)|0);
      _png_formatted_warning($56, $arraydecay36, ((STRING_TABLE.__str8757)|0));
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $57=$png_ptr_addr;
      var $58=$prefix_size_addr;
      var $add40=(($58+1)|0);
      var $call41=_png_malloc_warn($57, $add40);
      $text39=$call41;
      var $59=$text39;
      var $cmp42=(($59)|0)!=0;
      if ($cmp42) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $60=$prefix_size_addr;
      var $cmp44=(($60)>>>0) > 0;
      if ($cmp44) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $61=$text39;
      var $62=$png_ptr_addr;
      var $chunkdata46=(($62+656)|0);
      var $63=HEAP32[(($chunkdata46)>>2)];
      var $64=$prefix_size_addr;
      assert($64 % 1 === 0, 'memcpy given ' + $64 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($61, $63, $64, 1);
      __label__ = 23; break;
    case 23: 
      var $65=$png_ptr_addr;
      var $66=$png_ptr_addr;
      var $chunkdata48=(($66+656)|0);
      var $67=HEAP32[(($chunkdata48)>>2)];
      _png_free($65, $67);
      var $68=$text39;
      var $69=$png_ptr_addr;
      var $chunkdata49=(($69+656)|0);
      HEAP32[(($chunkdata49)>>2)]=$68;
      var $70=$png_ptr_addr;
      var $chunkdata50=(($70+656)|0);
      var $71=HEAP32[(($chunkdata50)>>2)];
      var $72=$prefix_size_addr;
      var $add_ptr51=(($71+$72)|0);
      HEAP8[($add_ptr51)]=0;
      __label__ = 24; break;
    case 24: 
      var $73=$prefix_size_addr;
      var $74=$newlength_addr;
      HEAP32[(($74)>>2)]=$73;
      __label__ = 25; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_decompress_chunk["X"]=1;

function _png_inflate($png_ptr, $data, $size, $output, $output_size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $data_addr;
      var $size_addr;
      var $output_addr;
      var $output_size_addr;
      var $count;
      var $ret;
      var $avail;
      var $space;
      var $copy;
      var $msg;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $size_addr=$size;
      $output_addr=$output;
      $output_size_addr=$output_size;
      $count=0;
      var $0=$data_addr;
      var $1=$png_ptr_addr;
      var $zstream=(($1+96)|0);
      var $next_in=(($zstream)|0);
      HEAP32[(($next_in)>>2)]=$0;
      var $2=$png_ptr_addr;
      var $zstream1=(($2+96)|0);
      var $avail_in=(($zstream1+4)|0);
      HEAP32[(($avail_in)>>2)]=0;
      __label__ = 2; break;
    case 2: 
      var $3=$png_ptr_addr;
      var $zstream2=(($3+96)|0);
      var $avail_in3=(($zstream2+4)|0);
      var $4=HEAP32[(($avail_in3)>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $5=$size_addr;
      var $cmp4=(($5)>>>0) > 0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $6=$size_addr;
      var $cmp5=(($6)>>>0) <= 4294967295;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $7=$size_addr;
      var $8=$png_ptr_addr;
      var $zstream7=(($8+96)|0);
      var $avail_in8=(($zstream7+4)|0);
      HEAP32[(($avail_in8)>>2)]=$7;
      $size_addr=0;
      __label__ = 7; break;
    case 6: 
      var $9=$png_ptr_addr;
      var $zstream9=(($9+96)|0);
      var $avail_in10=(($zstream9+4)|0);
      HEAP32[(($avail_in10)>>2)]=-1;
      var $10=$size_addr;
      var $sub=(($10+1)|0);
      $size_addr=$sub;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $11=$png_ptr_addr;
      var $zbuf=(($11+152)|0);
      var $12=HEAP32[(($zbuf)>>2)];
      var $13=$png_ptr_addr;
      var $zstream12=(($13+96)|0);
      var $next_out=(($zstream12+12)|0);
      HEAP32[(($next_out)>>2)]=$12;
      var $14=$png_ptr_addr;
      var $zbuf_size=(($14+156)|0);
      var $15=HEAP32[(($zbuf_size)>>2)];
      var $16=$png_ptr_addr;
      var $zstream13=(($16+96)|0);
      var $avail_out=(($zstream13+16)|0);
      HEAP32[(($avail_out)>>2)]=$15;
      var $17=$png_ptr_addr;
      var $zstream14=(($17+96)|0);
      var $call=_inflate($zstream14, 0);
      $ret=$call;
      var $18=$png_ptr_addr;
      var $zbuf_size15=(($18+156)|0);
      var $19=HEAP32[(($zbuf_size15)>>2)];
      var $20=$png_ptr_addr;
      var $zstream16=(($20+96)|0);
      var $avail_out17=(($zstream16+16)|0);
      var $21=HEAP32[(($avail_out17)>>2)];
      var $sub18=(($19-$21)|0);
      $avail=$sub18;
      var $22=$ret;
      var $cmp19=(($22)|0)==0;
      if ($cmp19) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $23=$ret;
      var $cmp20=(($23)|0)==1;
      if ($cmp20) { __label__ = 10; break; } else { __label__ = 17; break; }
    case 10: 
      var $24=$avail;
      var $cmp22=(($24)|0) > 0;
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 17; break; }
    case 11: 
      var $25=$avail;
      $space=$25;
      var $26=$output_addr;
      var $cmp24=(($26)|0)!=0;
      if ($cmp24) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $27=$output_size_addr;
      var $28=$count;
      var $cmp26=(($27)>>>0) > (($28)>>>0);
      if ($cmp26) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $29=$output_size_addr;
      var $30=$count;
      var $sub28=(($29-$30)|0);
      $copy=$sub28;
      var $31=$space;
      var $32=$copy;
      var $cmp29=(($31)>>>0) < (($32)>>>0);
      if ($cmp29) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $33=$space;
      $copy=$33;
      __label__ = 15; break;
    case 15: 
      var $34=$output_addr;
      var $35=$count;
      var $add_ptr=(($34+$35)|0);
      var $36=$png_ptr_addr;
      var $zbuf32=(($36+152)|0);
      var $37=HEAP32[(($zbuf32)>>2)];
      var $38=$copy;
      assert($38 % 1 === 0, 'memcpy given ' + $38 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr, $37, $38, 1);
      __label__ = 16; break;
    case 16: 
      var $39=$space;
      var $40=$count;
      var $add=(($40+$39)|0);
      $count=$add;
      __label__ = 17; break;
    case 17: 
      var $41=$ret;
      var $cmp35=(($41)|0)==0;
      if ($cmp35) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 2; break;
    case 19: 
      var $42=$png_ptr_addr;
      var $zstream38=(($42+96)|0);
      var $avail_in39=(($zstream38+4)|0);
      HEAP32[(($avail_in39)>>2)]=0;
      var $43=$png_ptr_addr;
      var $zstream40=(($43+96)|0);
      var $call41=_inflateReset($zstream40);
      var $44=$ret;
      var $cmp42=(($44)|0)==1;
      if ($cmp42) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $45=$count;
      $retval=$45;
      __label__ = 29; break;
    case 21: 
      var $46=$png_ptr_addr;
      var $zstream45=(($46+96)|0);
      var $msg46=(($zstream45+24)|0);
      var $47=HEAP32[(($msg46)>>2)];
      var $cmp47=(($47)|0)!=0;
      if ($cmp47) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $48=$png_ptr_addr;
      var $zstream49=(($48+96)|0);
      var $msg50=(($zstream49+24)|0);
      var $49=HEAP32[(($msg50)>>2)];
      $msg=$49;
      __label__ = 28; break;
    case 23: 
      var $50=$ret;
      if ((($50)|0) == -5) {
        __label__ = 24; break;
      }
      else if ((($50)|0) == -3) {
        __label__ = 25; break;
      }
      else {
      __label__ = 26; break;
      }
      
    case 24: 
      $msg=((STRING_TABLE.__str144893)|0);
      __label__ = 27; break;
    case 25: 
      $msg=((STRING_TABLE.__str145894)|0);
      __label__ = 27; break;
    case 26: 
      $msg=((STRING_TABLE.__str146895)|0);
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $51=$png_ptr_addr;
      var $52=$msg;
      _png_chunk_warning($51, $52);
      $retval=0;
      __label__ = 29; break;
    case 29: 
      var $53=$retval;
      ;
      return $53;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_inflate["X"]=1;

function _png_handle_IHDR($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $buf=__stackBase__;
      var $width;
      var $height;
      var $bit_depth;
      var $color_type;
      var $compression_type;
      var $filter_type;
      var $interlace_type;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str9758)|0));
      __label__ = 3; break;
    case 3: 
      var $3=$length_addr;
      var $cmp=(($3)|0)!=13;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$png_ptr_addr;
      _png_error($4, ((STRING_TABLE.__str10759)|0));
      __label__ = 5; break;
    case 5: 
      var $5=$png_ptr_addr;
      var $mode3=(($5+84)|0);
      var $6=HEAP32[(($mode3)>>2)];
      var $or=$6 | 1;
      HEAP32[(($mode3)>>2)]=$or;
      var $7=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($7, $arraydecay, 13);
      var $8=$png_ptr_addr;
      var $call=_png_crc_finish($8, 0);
      var $9=$png_ptr_addr;
      var $arraydecay4=(($buf)|0);
      var $call5=_png_get_uint_31($9, $arraydecay4);
      $width=$call5;
      var $10=$png_ptr_addr;
      var $arraydecay6=(($buf)|0);
      var $add_ptr=(($arraydecay6+4)|0);
      var $call7=_png_get_uint_31($10, $add_ptr);
      $height=$call7;
      var $arrayidx=(($buf+8)|0);
      var $11=HEAPU8[($arrayidx)];
      var $conv=(($11)&255);
      $bit_depth=$conv;
      var $arrayidx8=(($buf+9)|0);
      var $12=HEAPU8[($arrayidx8)];
      var $conv9=(($12)&255);
      $color_type=$conv9;
      var $arrayidx10=(($buf+10)|0);
      var $13=HEAPU8[($arrayidx10)];
      var $conv11=(($13)&255);
      $compression_type=$conv11;
      var $arrayidx12=(($buf+11)|0);
      var $14=HEAPU8[($arrayidx12)];
      var $conv13=(($14)&255);
      $filter_type=$conv13;
      var $arrayidx14=(($buf+12)|0);
      var $15=HEAPU8[($arrayidx14)];
      var $conv15=(($15)&255);
      $interlace_type=$conv15;
      var $16=$width;
      var $17=$png_ptr_addr;
      var $width16=(($17+204)|0);
      HEAP32[(($width16)>>2)]=$16;
      var $18=$height;
      var $19=$png_ptr_addr;
      var $height17=(($19+208)|0);
      HEAP32[(($height17)>>2)]=$18;
      var $20=$bit_depth;
      var $conv18=(($20) & 255);
      var $21=$png_ptr_addr;
      var $bit_depth19=(($21+292)|0);
      HEAP8[($bit_depth19)]=$conv18;
      var $22=$interlace_type;
      var $conv20=(($22) & 255);
      var $23=$png_ptr_addr;
      var $interlaced=(($23+288)|0);
      HEAP8[($interlaced)]=$conv20;
      var $24=$color_type;
      var $conv21=(($24) & 255);
      var $25=$png_ptr_addr;
      var $color_type22=(($25+291)|0);
      HEAP8[($color_type22)]=$conv21;
      var $26=$filter_type;
      var $conv23=(($26) & 255);
      var $27=$png_ptr_addr;
      var $filter_type24=(($27+580)|0);
      HEAP8[($filter_type24)]=$conv23;
      var $28=$compression_type;
      var $conv25=(($28) & 255);
      var $29=$png_ptr_addr;
      var $compression_type26=(($29+612)|0);
      HEAP8[($compression_type26)]=$conv25;
      var $30=$png_ptr_addr;
      var $color_type27=(($30+291)|0);
      var $31=HEAPU8[($color_type27)];
      var $conv28=(($31)&255);
      if ((($conv28)|0) == 0 || (($conv28)|0) == 3) {
        __label__ = 7; break;
      }
      else if ((($conv28)|0) == 2) {
        __label__ = 8; break;
      }
      else if ((($conv28)|0) == 4) {
        __label__ = 9; break;
      }
      else if ((($conv28)|0) == 6) {
        __label__ = 10; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $32=$png_ptr_addr;
      var $channels=(($32+295)|0);
      HEAP8[($channels)]=1;
      __label__ = 11; break;
    case 8: 
      var $33=$png_ptr_addr;
      var $channels30=(($33+295)|0);
      HEAP8[($channels30)]=3;
      __label__ = 11; break;
    case 9: 
      var $34=$png_ptr_addr;
      var $channels32=(($34+295)|0);
      HEAP8[($channels32)]=2;
      __label__ = 11; break;
    case 10: 
      var $35=$png_ptr_addr;
      var $channels34=(($35+295)|0);
      HEAP8[($channels34)]=4;
      __label__ = 11; break;
    case 11: 
      var $36=$png_ptr_addr;
      var $bit_depth35=(($36+292)|0);
      var $37=HEAPU8[($bit_depth35)];
      var $conv36=(($37)&255);
      var $38=$png_ptr_addr;
      var $channels37=(($38+295)|0);
      var $39=HEAPU8[($channels37)];
      var $conv38=(($39)&255);
      var $mul=(($conv36*$conv38)|0);
      var $conv39=(($mul) & 255);
      var $40=$png_ptr_addr;
      var $pixel_depth=(($40+294)|0);
      HEAP8[($pixel_depth)]=$conv39;
      var $41=$png_ptr_addr;
      var $pixel_depth40=(($41+294)|0);
      var $42=HEAPU8[($pixel_depth40)];
      var $conv41=(($42)&255);
      var $cmp42=(($conv41)|0) >= 8;
      if ($cmp42) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $43=$png_ptr_addr;
      var $width44=(($43+204)|0);
      var $44=HEAP32[(($width44)>>2)];
      var $45=$png_ptr_addr;
      var $pixel_depth45=(($45+294)|0);
      var $46=HEAPU8[($pixel_depth45)];
      var $conv46=(($46)&255);
      var $shr=$conv46 >>> 3;
      var $mul47=(($44*$shr)|0);
      var $cond = $mul47;__label__ = 14; break;
    case 13: 
      var $47=$png_ptr_addr;
      var $width48=(($47+204)|0);
      var $48=HEAP32[(($width48)>>2)];
      var $49=$png_ptr_addr;
      var $pixel_depth49=(($49+294)|0);
      var $50=HEAPU8[($pixel_depth49)];
      var $conv50=(($50)&255);
      var $mul51=(($48*$conv50)|0);
      var $add=(($mul51+7)|0);
      var $shr52=$add >>> 3;
      var $cond = $shr52;__label__ = 14; break;
    case 14: 
      var $cond;
      var $51=$png_ptr_addr;
      var $rowbytes=(($51+220)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      var $52=$png_ptr_addr;
      var $53=$info_ptr_addr;
      var $54=$width;
      var $55=$height;
      var $56=$bit_depth;
      var $57=$color_type;
      var $58=$interlace_type;
      var $59=$compression_type;
      var $60=$filter_type;
      _png_set_IHDR($52, $53, $54, $55, $56, $57, $58, $59, $60);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_IHDR["X"]=1;

function _png_handle_PLTE($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 772; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $palette=__stackBase__;
      var $num;
      var $i;
      var $pal_ptr;
      var $buf=__stackBase__+768;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str11760)|0));
      __label__ = 9; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str12761)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 30; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $mode6=(($8+84)|0);
      var $9=HEAP32[(($mode6)>>2)];
      var $and7=$9 & 2;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$png_ptr_addr;
      _png_error($10, ((STRING_TABLE.__str13762)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $11=$png_ptr_addr;
      var $mode12=(($11+84)|0);
      var $12=HEAP32[(($mode12)>>2)];
      var $or=$12 | 2;
      HEAP32[(($mode12)>>2)]=$or;
      var $13=$png_ptr_addr;
      var $color_type=(($13+291)|0);
      var $14=HEAPU8[($color_type)];
      var $conv=(($14)&255);
      var $and13=$conv & 2;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $15=$png_ptr_addr;
      _png_warning($15, ((STRING_TABLE.__str14763)|0));
      var $16=$png_ptr_addr;
      var $17=$length_addr;
      var $call16=_png_crc_finish($16, $17);
      __label__ = 30; break;
    case 11: 
      var $18=$length_addr;
      var $cmp=(($18)>>>0) > 768;
      if ($cmp) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $19=$length_addr;
      var $rem=(($19)>>>0)%3;
      var $tobool19=(($rem)|0)!=0;
      if ($tobool19) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $20=$png_ptr_addr;
      var $color_type21=(($20+291)|0);
      var $21=HEAPU8[($color_type21)];
      var $conv22=(($21)&255);
      var $cmp23=(($conv22)|0)!=3;
      if ($cmp23) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $22=$png_ptr_addr;
      _png_warning($22, ((STRING_TABLE.__str15764)|0));
      var $23=$png_ptr_addr;
      var $24=$length_addr;
      var $call26=_png_crc_finish($23, $24);
      __label__ = 30; break;
    case 15: 
      var $25=$png_ptr_addr;
      _png_error($25, ((STRING_TABLE.__str15764)|0));
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $26=$length_addr;
      var $div=(((($26)|0)/3)&-1);
      $num=$div;
      $i=0;
      var $arraydecay=(($palette)|0);
      $pal_ptr=$arraydecay;
      __label__ = 18; break;
    case 18: 
      var $27=$i;
      var $28=$num;
      var $cmp30=(($27)|0) < (($28)|0);
      if ($cmp30) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $29=$png_ptr_addr;
      var $arraydecay32=(($buf)|0);
      _png_crc_read($29, $arraydecay32, 3);
      var $arrayidx=(($buf)|0);
      var $30=HEAP8[($arrayidx)];
      var $31=$pal_ptr;
      var $red=(($31)|0);
      HEAP8[($red)]=$30;
      var $arrayidx33=(($buf+1)|0);
      var $32=HEAP8[($arrayidx33)];
      var $33=$pal_ptr;
      var $green=(($33+1)|0);
      HEAP8[($green)]=$32;
      var $arrayidx34=(($buf+2)|0);
      var $34=HEAP8[($arrayidx34)];
      var $35=$pal_ptr;
      var $blue=(($35+2)|0);
      HEAP8[($blue)]=$34;
      __label__ = 20; break;
    case 20: 
      var $36=$i;
      var $inc=(($36+1)|0);
      $i=$inc;
      var $37=$pal_ptr;
      var $incdec_ptr=(($37+3)|0);
      $pal_ptr=$incdec_ptr;
      __label__ = 18; break;
    case 21: 
      var $38=$png_ptr_addr;
      var $call35=_png_crc_finish($38, 0);
      var $39=$png_ptr_addr;
      var $40=$info_ptr_addr;
      var $arraydecay36=(($palette)|0);
      var $41=$num;
      _png_set_PLTE($39, $40, $arraydecay36, $41);
      var $42=$png_ptr_addr;
      var $color_type37=(($42+291)|0);
      var $43=HEAPU8[($color_type37)];
      var $conv38=(($43)&255);
      var $cmp39=(($conv38)|0)==3;
      if ($cmp39) { __label__ = 22; break; } else { __label__ = 30; break; }
    case 22: 
      var $44=$info_ptr_addr;
      var $cmp42=(($44)|0)!=0;
      if ($cmp42) { __label__ = 23; break; } else { __label__ = 29; break; }
    case 23: 
      var $45=$info_ptr_addr;
      var $valid=(($45+8)|0);
      var $46=HEAP32[(($valid)>>2)];
      var $and44=$46 & 16;
      var $tobool45=(($and44)|0)!=0;
      if ($tobool45) { __label__ = 24; break; } else { __label__ = 29; break; }
    case 24: 
      var $47=$png_ptr_addr;
      var $num_trans=(($47+284)|0);
      var $48=HEAPU16[(($num_trans)>>1)];
      var $conv47=(($48)&65535);
      var $49=$num;
      var $conv48=(($49) & 65535);
      var $conv49=(($conv48)&65535);
      var $cmp50=(($conv47)|0) > (($conv49)|0);
      if ($cmp50) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $50=$png_ptr_addr;
      _png_warning($50, ((STRING_TABLE.__str16765)|0));
      var $51=$num;
      var $conv53=(($51) & 65535);
      var $52=$png_ptr_addr;
      var $num_trans54=(($52+284)|0);
      HEAP16[(($num_trans54)>>1)]=$conv53;
      __label__ = 26; break;
    case 26: 
      var $53=$info_ptr_addr;
      var $num_trans56=(($53+22)|0);
      var $54=HEAPU16[(($num_trans56)>>1)];
      var $conv57=(($54)&65535);
      var $55=$num;
      var $conv58=(($55) & 65535);
      var $conv59=(($conv58)&65535);
      var $cmp60=(($conv57)|0) > (($conv59)|0);
      if ($cmp60) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $56=$png_ptr_addr;
      _png_warning($56, ((STRING_TABLE.__str17766)|0));
      var $57=$num;
      var $conv63=(($57) & 65535);
      var $58=$info_ptr_addr;
      var $num_trans64=(($58+22)|0);
      HEAP16[(($num_trans64)>>1)]=$conv63;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_PLTE["X"]=1;

function _png_handle_IEND($png_ptr, $info_ptr, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $mode1=(($2+84)|0);
      var $3=HEAP32[(($mode1)>>2)];
      var $and2=$3 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$png_ptr_addr;
      _png_error($4, ((STRING_TABLE.__str18767)|0));
      __label__ = 4; break;
    case 4: 
      var $5=$png_ptr_addr;
      var $mode4=(($5+84)|0);
      var $6=HEAP32[(($mode4)>>2)];
      var $or=$6 | 24;
      HEAP32[(($mode4)>>2)]=$or;
      var $7=$length_addr;
      var $cmp=(($7)|0)!=0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$png_ptr_addr;
      _png_warning($8, ((STRING_TABLE.__str19768)|0));
      __label__ = 6; break;
    case 6: 
      var $9=$png_ptr_addr;
      var $10=$length_addr;
      var $call=_png_crc_finish($9, $10);
      var $11=$info_ptr_addr;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_handle_gAMA($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 260; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $igamma;
      var $buf=__stackBase__;
      var $p=__stackBase__+4;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str20769)|0));
      __label__ = 9; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str21770)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 26; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $mode6=(($8+84)|0);
      var $9=HEAP32[(($mode6)>>2)];
      var $and7=$9 & 2;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str22771)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $11=$info_ptr_addr;
      var $cmp=(($11)|0)!=0;
      if ($cmp) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $12=$info_ptr_addr;
      var $valid=(($12+8)|0);
      var $13=HEAP32[(($valid)>>2)];
      var $and12=$13 & 1;
      var $tobool13=(($and12)|0)!=0;
      if ($tobool13) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $14=$info_ptr_addr;
      var $valid15=(($14+8)|0);
      var $15=HEAP32[(($valid15)>>2)];
      var $and16=$15 & 2048;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $16=$png_ptr_addr;
      _png_warning($16, ((STRING_TABLE.__str23772)|0));
      var $17=$png_ptr_addr;
      var $18=$length_addr;
      var $call19=_png_crc_finish($17, $18);
      __label__ = 26; break;
    case 13: 
      var $19=$length_addr;
      var $cmp21=(($19)|0)!=4;
      if ($cmp21) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $20=$png_ptr_addr;
      _png_warning($20, ((STRING_TABLE.__str24773)|0));
      var $21=$png_ptr_addr;
      var $22=$length_addr;
      var $call23=_png_crc_finish($21, $22);
      __label__ = 26; break;
    case 15: 
      var $23=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($23, $arraydecay, 4);
      var $24=$png_ptr_addr;
      var $call25=_png_crc_finish($24, 0);
      var $tobool26=(($call25)|0)!=0;
      if ($tobool26) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 26; break;
    case 17: 
      var $arraydecay29=(($buf)|0);
      var $call30=_png_get_fixed_point(0, $arraydecay29);
      $igamma=$call30;
      var $25=$igamma;
      var $cmp31=(($25)|0) <= 0;
      if ($cmp31) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $26=$png_ptr_addr;
      _png_warning($26, ((STRING_TABLE.__str25774)|0));
      __label__ = 26; break;
    case 19: 
      var $27=$info_ptr_addr;
      var $cmp34=(($27)|0)!=0;
      if ($cmp34) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: 
      var $28=$info_ptr_addr;
      var $valid36=(($28+8)|0);
      var $29=HEAP32[(($valid36)>>2)];
      var $and37=$29 & 2048;
      var $tobool38=(($and37)|0)!=0;
      if ($tobool38) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $30=$igamma;
      var $cmp40=(($30)|0) < 45000;
      if ($cmp40) { __label__ = 23; break; } else { __label__ = 22; break; }
    case 22: 
      var $31=$igamma;
      var $cmp41=(($31)|0) > 46000;
      if ($cmp41) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $arraydecay43=(($p)|0);
      var $32=$igamma;
      _png_warning_parameter_signed($arraydecay43, 1, 5, $32);
      var $33=$png_ptr_addr;
      var $arraydecay44=(($p)|0);
      _png_formatted_warning($33, $arraydecay44, ((STRING_TABLE.__str26775)|0));
      __label__ = 26; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $34=$igamma;
      var $35=$png_ptr_addr;
      var $gamma=(($35+352)|0);
      HEAP32[(($gamma)>>2)]=$34;
      var $36=$png_ptr_addr;
      var $37=$info_ptr_addr;
      var $38=$igamma;
      _png_set_gAMA_fixed($36, $37, $38);
      __label__ = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_gAMA["X"]=1;

function _png_get_fixed_point($png_ptr, $buf) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $buf_addr;
      var $uval;
      $png_ptr_addr=$png_ptr;
      $buf_addr=$buf;
      var $0=$buf_addr;
      var $1=HEAPU8[($0)];
      var $conv=(($1)&255);
      var $shl=$conv << 24;
      var $2=$buf_addr;
      var $add_ptr=(($2+1)|0);
      var $3=HEAPU8[($add_ptr)];
      var $conv1=(($3)&255);
      var $shl2=$conv1 << 16;
      var $add=(($shl+$shl2)|0);
      var $4=$buf_addr;
      var $add_ptr3=(($4+2)|0);
      var $5=HEAPU8[($add_ptr3)];
      var $conv4=(($5)&255);
      var $shl5=$conv4 << 8;
      var $add6=(($add+$shl5)|0);
      var $6=$buf_addr;
      var $add_ptr7=(($6+3)|0);
      var $7=HEAPU8[($add_ptr7)];
      var $conv8=(($7)&255);
      var $add9=(($add6+$conv8)|0);
      $uval=$add9;
      var $8=$uval;
      var $cmp=(($8)>>>0) <= 2147483647;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$uval;
      $retval=$9;
      __label__ = 6; break;
    case 3: 
      var $10=$png_ptr_addr;
      var $cmp11=(($10)|0)!=0;
      if ($cmp11) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $11=$png_ptr_addr;
      _png_warning($11, ((STRING_TABLE.__str143892)|0));
      __label__ = 5; break;
    case 5: 
      $retval=-1;
      __label__ = 6; break;
    case 6: 
      var $12=$retval;
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_handle_sBIT($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $truelen;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $arrayidx=(($buf+3)|0);
      HEAP8[($arrayidx)]=0;
      var $arrayidx1=(($buf+2)|0);
      HEAP8[($arrayidx1)]=0;
      var $arrayidx2=(($buf+1)|0);
      HEAP8[($arrayidx2)]=0;
      var $arrayidx3=(($buf)|0);
      HEAP8[($arrayidx3)]=0;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str27776)|0));
      __label__ = 9; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode4=(($3+84)|0);
      var $4=HEAP32[(($mode4)>>2)];
      var $and5=$4 & 4;
      var $tobool6=(($and5)|0)!=0;
      if ($tobool6) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str28777)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 24; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $mode9=(($8+84)|0);
      var $9=HEAP32[(($mode9)>>2)];
      var $and10=$9 & 2;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str29778)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $11=$info_ptr_addr;
      var $cmp=(($11)|0)!=0;
      if ($cmp) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $12=$info_ptr_addr;
      var $valid=(($12+8)|0);
      var $13=HEAP32[(($valid)>>2)];
      var $and15=$13 & 2;
      var $tobool16=(($and15)|0)!=0;
      if ($tobool16) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $14=$png_ptr_addr;
      _png_warning($14, ((STRING_TABLE.__str30779)|0));
      var $15=$png_ptr_addr;
      var $16=$length_addr;
      var $call18=_png_crc_finish($15, $16);
      __label__ = 24; break;
    case 12: 
      var $17=$png_ptr_addr;
      var $color_type=(($17+291)|0);
      var $18=HEAPU8[($color_type)];
      var $conv=(($18)&255);
      var $cmp20=(($conv)|0)==3;
      if ($cmp20) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $truelen=3;
      __label__ = 15; break;
    case 14: 
      var $19=$png_ptr_addr;
      var $channels=(($19+295)|0);
      var $20=HEAPU8[($channels)];
      var $conv24=(($20)&255);
      $truelen=$conv24;
      __label__ = 15; break;
    case 15: 
      var $21=$length_addr;
      var $22=$truelen;
      var $cmp26=(($21)|0)!=(($22)|0);
      if ($cmp26) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $23=$length_addr;
      var $cmp28=(($23)>>>0) > 4;
      if ($cmp28) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $24=$png_ptr_addr;
      _png_warning($24, ((STRING_TABLE.__str31780)|0));
      var $25=$png_ptr_addr;
      var $26=$length_addr;
      var $call31=_png_crc_finish($25, $26);
      __label__ = 24; break;
    case 18: 
      var $27=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      var $28=$truelen;
      _png_crc_read($27, $arraydecay, $28);
      var $29=$png_ptr_addr;
      var $call33=_png_crc_finish($29, 0);
      var $tobool34=(($call33)|0)!=0;
      if ($tobool34) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 24; break;
    case 20: 
      var $30=$png_ptr_addr;
      var $color_type37=(($30+291)|0);
      var $31=HEAPU8[($color_type37)];
      var $conv38=(($31)&255);
      var $and39=$conv38 & 2;
      var $tobool40=(($and39)|0)!=0;
      if ($tobool40) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $arrayidx42=(($buf)|0);
      var $32=HEAP8[($arrayidx42)];
      var $33=$png_ptr_addr;
      var $sig_bit=(($33+384)|0);
      var $red=(($sig_bit)|0);
      HEAP8[($red)]=$32;
      var $arrayidx43=(($buf+1)|0);
      var $34=HEAP8[($arrayidx43)];
      var $35=$png_ptr_addr;
      var $sig_bit44=(($35+384)|0);
      var $green=(($sig_bit44+1)|0);
      HEAP8[($green)]=$34;
      var $arrayidx45=(($buf+2)|0);
      var $36=HEAP8[($arrayidx45)];
      var $37=$png_ptr_addr;
      var $sig_bit46=(($37+384)|0);
      var $blue=(($sig_bit46+2)|0);
      HEAP8[($blue)]=$36;
      var $arrayidx47=(($buf+3)|0);
      var $38=HEAP8[($arrayidx47)];
      var $39=$png_ptr_addr;
      var $sig_bit48=(($39+384)|0);
      var $alpha=(($sig_bit48+4)|0);
      HEAP8[($alpha)]=$38;
      __label__ = 23; break;
    case 22: 
      var $arrayidx50=(($buf)|0);
      var $40=HEAP8[($arrayidx50)];
      var $41=$png_ptr_addr;
      var $sig_bit51=(($41+384)|0);
      var $gray=(($sig_bit51+3)|0);
      HEAP8[($gray)]=$40;
      var $arrayidx52=(($buf)|0);
      var $42=HEAP8[($arrayidx52)];
      var $43=$png_ptr_addr;
      var $sig_bit53=(($43+384)|0);
      var $red54=(($sig_bit53)|0);
      HEAP8[($red54)]=$42;
      var $arrayidx55=(($buf)|0);
      var $44=HEAP8[($arrayidx55)];
      var $45=$png_ptr_addr;
      var $sig_bit56=(($45+384)|0);
      var $green57=(($sig_bit56+1)|0);
      HEAP8[($green57)]=$44;
      var $arrayidx58=(($buf)|0);
      var $46=HEAP8[($arrayidx58)];
      var $47=$png_ptr_addr;
      var $sig_bit59=(($47+384)|0);
      var $blue60=(($sig_bit59+2)|0);
      HEAP8[($blue60)]=$46;
      var $arrayidx61=(($buf+1)|0);
      var $48=HEAP8[($arrayidx61)];
      var $49=$png_ptr_addr;
      var $sig_bit62=(($49+384)|0);
      var $alpha63=(($sig_bit62+4)|0);
      HEAP8[($alpha63)]=$48;
      __label__ = 23; break;
    case 23: 
      var $50=$png_ptr_addr;
      var $51=$info_ptr_addr;
      var $52=$png_ptr_addr;
      var $sig_bit65=(($52+384)|0);
      _png_set_sBIT($50, $51, $sig_bit65);
      __label__ = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_sBIT["X"]=1;

function _png_handle_cHRM($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 368; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $buf=__stackBase__;
      var $x_white;
      var $y_white;
      var $x_red;
      var $y_red;
      var $x_green;
      var $y_green;
      var $x_blue;
      var $y_blue;
      var $p=__stackBase__+32;
      var $XYZ=__stackBase__+288;
      var $xy=__stackBase__+324;
      var $r=__stackBase__+356;
      var $g=__stackBase__+360;
      var $b=__stackBase__+364;
      var $add145;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str32781)|0));
      __label__ = 9; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str33782)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 80; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $mode6=(($8+84)|0);
      var $9=HEAP32[(($mode6)>>2)];
      var $and7=$9 & 2;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str34783)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $11=$info_ptr_addr;
      var $cmp=(($11)|0)!=0;
      if ($cmp) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $12=$info_ptr_addr;
      var $valid=(($12+8)|0);
      var $13=HEAP32[(($valid)>>2)];
      var $and12=$13 & 4;
      var $tobool13=(($and12)|0)!=0;
      if ($tobool13) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $14=$info_ptr_addr;
      var $valid15=(($14+8)|0);
      var $15=HEAP32[(($valid15)>>2)];
      var $and16=$15 & 2048;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $16=$png_ptr_addr;
      _png_warning($16, ((STRING_TABLE.__str35784)|0));
      var $17=$png_ptr_addr;
      var $18=$length_addr;
      var $call19=_png_crc_finish($17, $18);
      __label__ = 80; break;
    case 13: 
      var $19=$length_addr;
      var $cmp21=(($19)|0)!=32;
      if ($cmp21) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $20=$png_ptr_addr;
      _png_warning($20, ((STRING_TABLE.__str36785)|0));
      var $21=$png_ptr_addr;
      var $22=$length_addr;
      var $call23=_png_crc_finish($21, $22);
      __label__ = 80; break;
    case 15: 
      var $23=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($23, $arraydecay, 32);
      var $24=$png_ptr_addr;
      var $call25=_png_crc_finish($24, 0);
      var $tobool26=(($call25)|0)!=0;
      if ($tobool26) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      __label__ = 80; break;
    case 17: 
      var $arraydecay29=(($buf)|0);
      var $call30=_png_get_fixed_point(0, $arraydecay29);
      $x_white=$call30;
      var $arraydecay31=(($buf)|0);
      var $add_ptr=(($arraydecay31+4)|0);
      var $call32=_png_get_fixed_point(0, $add_ptr);
      $y_white=$call32;
      var $arraydecay33=(($buf)|0);
      var $add_ptr34=(($arraydecay33+8)|0);
      var $call35=_png_get_fixed_point(0, $add_ptr34);
      $x_red=$call35;
      var $arraydecay36=(($buf)|0);
      var $add_ptr37=(($arraydecay36+12)|0);
      var $call38=_png_get_fixed_point(0, $add_ptr37);
      $y_red=$call38;
      var $arraydecay39=(($buf)|0);
      var $add_ptr40=(($arraydecay39+16)|0);
      var $call41=_png_get_fixed_point(0, $add_ptr40);
      $x_green=$call41;
      var $arraydecay42=(($buf)|0);
      var $add_ptr43=(($arraydecay42+20)|0);
      var $call44=_png_get_fixed_point(0, $add_ptr43);
      $y_green=$call44;
      var $arraydecay45=(($buf)|0);
      var $add_ptr46=(($arraydecay45+24)|0);
      var $call47=_png_get_fixed_point(0, $add_ptr46);
      $x_blue=$call47;
      var $arraydecay48=(($buf)|0);
      var $add_ptr49=(($arraydecay48+28)|0);
      var $call50=_png_get_fixed_point(0, $add_ptr49);
      $y_blue=$call50;
      var $25=$x_white;
      var $cmp51=(($25)|0)==-1;
      if ($cmp51) { __label__ = 25; break; } else { __label__ = 18; break; }
    case 18: 
      var $26=$y_white;
      var $cmp52=(($26)|0)==-1;
      if ($cmp52) { __label__ = 25; break; } else { __label__ = 19; break; }
    case 19: 
      var $27=$x_red;
      var $cmp54=(($27)|0)==-1;
      if ($cmp54) { __label__ = 25; break; } else { __label__ = 20; break; }
    case 20: 
      var $28=$y_red;
      var $cmp56=(($28)|0)==-1;
      if ($cmp56) { __label__ = 25; break; } else { __label__ = 21; break; }
    case 21: 
      var $29=$x_green;
      var $cmp58=(($29)|0)==-1;
      if ($cmp58) { __label__ = 25; break; } else { __label__ = 22; break; }
    case 22: 
      var $30=$y_green;
      var $cmp60=(($30)|0)==-1;
      if ($cmp60) { __label__ = 25; break; } else { __label__ = 23; break; }
    case 23: 
      var $31=$x_blue;
      var $cmp62=(($31)|0)==-1;
      if ($cmp62) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $32=$y_blue;
      var $cmp64=(($32)|0)==-1;
      if ($cmp64) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $33=$png_ptr_addr;
      _png_warning($33, ((STRING_TABLE.__str37786)|0));
      __label__ = 80; break;
    case 26: 
      var $34=$info_ptr_addr;
      var $cmp67=(($34)|0)!=0;
      if ($cmp67) { __label__ = 27; break; } else { __label__ = 46; break; }
    case 27: 
      var $35=$info_ptr_addr;
      var $valid69=(($35+8)|0);
      var $36=HEAP32[(($valid69)>>2)];
      var $and70=$36 & 2048;
      var $tobool71=(($and70)|0)!=0;
      if ($tobool71) { __label__ = 28; break; } else { __label__ = 46; break; }
    case 28: 
      var $37=$x_white;
      var $cmp73=(($37)|0) < 30270;
      if ($cmp73) { __label__ = 44; break; } else { __label__ = 29; break; }
    case 29: 
      var $38=$x_white;
      var $cmp75=(($38)|0) > 32270;
      if ($cmp75) { __label__ = 44; break; } else { __label__ = 30; break; }
    case 30: 
      var $39=$y_white;
      var $cmp77=(($39)|0) < 31900;
      if ($cmp77) { __label__ = 44; break; } else { __label__ = 31; break; }
    case 31: 
      var $40=$y_white;
      var $cmp79=(($40)|0) > 33900;
      if ($cmp79) { __label__ = 44; break; } else { __label__ = 32; break; }
    case 32: 
      var $41=$x_red;
      var $cmp81=(($41)|0) < 63000;
      if ($cmp81) { __label__ = 44; break; } else { __label__ = 33; break; }
    case 33: 
      var $42=$x_red;
      var $cmp83=(($42)|0) > 65000;
      if ($cmp83) { __label__ = 44; break; } else { __label__ = 34; break; }
    case 34: 
      var $43=$y_red;
      var $cmp85=(($43)|0) < 32000;
      if ($cmp85) { __label__ = 44; break; } else { __label__ = 35; break; }
    case 35: 
      var $44=$y_red;
      var $cmp87=(($44)|0) > 34000;
      if ($cmp87) { __label__ = 44; break; } else { __label__ = 36; break; }
    case 36: 
      var $45=$x_green;
      var $cmp89=(($45)|0) < 29000;
      if ($cmp89) { __label__ = 44; break; } else { __label__ = 37; break; }
    case 37: 
      var $46=$x_green;
      var $cmp91=(($46)|0) > 31000;
      if ($cmp91) { __label__ = 44; break; } else { __label__ = 38; break; }
    case 38: 
      var $47=$y_green;
      var $cmp93=(($47)|0) < 59000;
      if ($cmp93) { __label__ = 44; break; } else { __label__ = 39; break; }
    case 39: 
      var $48=$y_green;
      var $cmp95=(($48)|0) > 61000;
      if ($cmp95) { __label__ = 44; break; } else { __label__ = 40; break; }
    case 40: 
      var $49=$x_blue;
      var $cmp97=(($49)|0) < 14000;
      if ($cmp97) { __label__ = 44; break; } else { __label__ = 41; break; }
    case 41: 
      var $50=$x_blue;
      var $cmp99=(($50)|0) > 16000;
      if ($cmp99) { __label__ = 44; break; } else { __label__ = 42; break; }
    case 42: 
      var $51=$y_blue;
      var $cmp101=(($51)|0) < 5000;
      if ($cmp101) { __label__ = 44; break; } else { __label__ = 43; break; }
    case 43: 
      var $52=$y_blue;
      var $cmp103=(($52)|0) > 7000;
      if ($cmp103) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $arraydecay105=(($p)|0);
      var $53=$x_white;
      _png_warning_parameter_signed($arraydecay105, 1, 5, $53);
      var $arraydecay106=(($p)|0);
      var $54=$y_white;
      _png_warning_parameter_signed($arraydecay106, 2, 5, $54);
      var $arraydecay107=(($p)|0);
      var $55=$x_red;
      _png_warning_parameter_signed($arraydecay107, 3, 5, $55);
      var $arraydecay108=(($p)|0);
      var $56=$y_red;
      _png_warning_parameter_signed($arraydecay108, 4, 5, $56);
      var $arraydecay109=(($p)|0);
      var $57=$x_green;
      _png_warning_parameter_signed($arraydecay109, 5, 5, $57);
      var $arraydecay110=(($p)|0);
      var $58=$y_green;
      _png_warning_parameter_signed($arraydecay110, 6, 5, $58);
      var $arraydecay111=(($p)|0);
      var $59=$x_blue;
      _png_warning_parameter_signed($arraydecay111, 7, 5, $59);
      var $arraydecay112=(($p)|0);
      var $60=$y_blue;
      _png_warning_parameter_signed($arraydecay112, 8, 5, $60);
      var $61=$png_ptr_addr;
      var $arraydecay113=(($p)|0);
      _png_formatted_warning($61, $arraydecay113, ((STRING_TABLE.__str38787)|0));
      __label__ = 45; break;
    case 45: 
      __label__ = 80; break;
    case 46: 
      var $62=$png_ptr_addr;
      var $rgb_to_gray_coefficients_set=(($62+570)|0);
      var $63=HEAP8[($rgb_to_gray_coefficients_set)];
      var $tobool116=(($63 << 24) >> 24)!=0;
      if ($tobool116) { __label__ = 79; break; } else { __label__ = 47; break; }
    case 47: 
      var $64=$x_red;
      var $redx=(($xy)|0);
      HEAP32[(($redx)>>2)]=$64;
      var $65=$y_red;
      var $redy=(($xy+4)|0);
      HEAP32[(($redy)>>2)]=$65;
      var $66=$x_green;
      var $greenx=(($xy+8)|0);
      HEAP32[(($greenx)>>2)]=$66;
      var $67=$y_green;
      var $greeny=(($xy+12)|0);
      HEAP32[(($greeny)>>2)]=$67;
      var $68=$x_blue;
      var $bluex=(($xy+16)|0);
      HEAP32[(($bluex)>>2)]=$68;
      var $69=$y_blue;
      var $bluey=(($xy+20)|0);
      HEAP32[(($bluey)>>2)]=$69;
      var $70=$x_white;
      var $whitex=(($xy+24)|0);
      HEAP32[(($whitex)>>2)]=$70;
      var $71=$y_white;
      var $whitey=(($xy+28)|0);
      HEAP32[(($whitey)>>2)]=$71;
      var $72=$png_ptr_addr;
      var $call118=_png_XYZ_from_xy_checked($72, $XYZ, $xy);
      var $tobool119=(($call118)|0)!=0;
      if ($tobool119) { __label__ = 48; break; } else { __label__ = 78; break; }
    case 48: 
      var $redY=(($XYZ+4)|0);
      var $73=HEAP32[(($redY)>>2)];
      var $call121=_png_muldiv($r, $73, 32768, 100000);
      var $tobool122=(($call121)|0)!=0;
      if ($tobool122) { __label__ = 49; break; } else { __label__ = 76; break; }
    case 49: 
      var $74=HEAP32[(($r)>>2)];
      var $cmp124=(($74)|0) >= 0;
      if ($cmp124) { __label__ = 50; break; } else { __label__ = 76; break; }
    case 50: 
      var $75=HEAP32[(($r)>>2)];
      var $cmp126=(($75)|0) <= 32768;
      if ($cmp126) { __label__ = 51; break; } else { __label__ = 76; break; }
    case 51: 
      var $greenY=(($XYZ+16)|0);
      var $76=HEAP32[(($greenY)>>2)];
      var $call128=_png_muldiv($g, $76, 32768, 100000);
      var $tobool129=(($call128)|0)!=0;
      if ($tobool129) { __label__ = 52; break; } else { __label__ = 76; break; }
    case 52: 
      var $77=HEAP32[(($g)>>2)];
      var $cmp131=(($77)|0) >= 0;
      if ($cmp131) { __label__ = 53; break; } else { __label__ = 76; break; }
    case 53: 
      var $78=HEAP32[(($g)>>2)];
      var $cmp133=(($78)|0) <= 32768;
      if ($cmp133) { __label__ = 54; break; } else { __label__ = 76; break; }
    case 54: 
      var $blueY=(($XYZ+28)|0);
      var $79=HEAP32[(($blueY)>>2)];
      var $call135=_png_muldiv($b, $79, 32768, 100000);
      var $tobool136=(($call135)|0)!=0;
      if ($tobool136) { __label__ = 55; break; } else { __label__ = 76; break; }
    case 55: 
      var $80=HEAP32[(($b)>>2)];
      var $cmp138=(($80)|0) >= 0;
      if ($cmp138) { __label__ = 56; break; } else { __label__ = 76; break; }
    case 56: 
      var $81=HEAP32[(($b)>>2)];
      var $cmp140=(($81)|0) <= 32768;
      if ($cmp140) { __label__ = 57; break; } else { __label__ = 76; break; }
    case 57: 
      var $82=HEAP32[(($r)>>2)];
      var $83=HEAP32[(($g)>>2)];
      var $add=(($82+$83)|0);
      var $84=HEAP32[(($b)>>2)];
      var $add142=(($add+$84)|0);
      var $cmp143=(($add142)|0) <= 32769;
      if ($cmp143) { __label__ = 58; break; } else { __label__ = 76; break; }
    case 58: 
      $add145=0;
      var $85=HEAP32[(($r)>>2)];
      var $86=HEAP32[(($g)>>2)];
      var $add146=(($85+$86)|0);
      var $87=HEAP32[(($b)>>2)];
      var $add147=(($add146+$87)|0);
      var $cmp148=(($add147)|0) > 32768;
      if ($cmp148) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      $add145=-1;
      __label__ = 63; break;
    case 60: 
      var $88=HEAP32[(($r)>>2)];
      var $89=HEAP32[(($g)>>2)];
      var $add151=(($88+$89)|0);
      var $90=HEAP32[(($b)>>2)];
      var $add152=(($add151+$90)|0);
      var $cmp153=(($add152)|0) < 32768;
      if ($cmp153) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      $add145=1;
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $91=$add145;
      var $cmp157=(($91)|0)!=0;
      if ($cmp157) { __label__ = 64; break; } else { __label__ = 73; break; }
    case 64: 
      var $92=HEAP32[(($g)>>2)];
      var $93=HEAP32[(($r)>>2)];
      var $cmp159=(($92)|0) >= (($93)|0);
      if ($cmp159) { __label__ = 65; break; } else { __label__ = 67; break; }
    case 65: 
      var $94=HEAP32[(($g)>>2)];
      var $95=HEAP32[(($b)>>2)];
      var $cmp161=(($94)|0) >= (($95)|0);
      if ($cmp161) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $96=$add145;
      var $97=HEAP32[(($g)>>2)];
      var $add163=(($97+$96)|0);
      HEAP32[(($g)>>2)]=$add163;
      __label__ = 72; break;
    case 67: 
      var $98=HEAP32[(($r)>>2)];
      var $99=HEAP32[(($g)>>2)];
      var $cmp165=(($98)|0) >= (($99)|0);
      if ($cmp165) { __label__ = 68; break; } else { __label__ = 70; break; }
    case 68: 
      var $100=HEAP32[(($r)>>2)];
      var $101=HEAP32[(($b)>>2)];
      var $cmp167=(($100)|0) >= (($101)|0);
      if ($cmp167) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $102=$add145;
      var $103=HEAP32[(($r)>>2)];
      var $add169=(($103+$102)|0);
      HEAP32[(($r)>>2)]=$add169;
      __label__ = 71; break;
    case 70: 
      var $104=$add145;
      var $105=HEAP32[(($b)>>2)];
      var $add171=(($105+$104)|0);
      HEAP32[(($b)>>2)]=$add171;
      __label__ = 71; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      var $106=HEAP32[(($r)>>2)];
      var $107=HEAP32[(($g)>>2)];
      var $add175=(($106+$107)|0);
      var $108=HEAP32[(($b)>>2)];
      var $add176=(($add175+$108)|0);
      var $cmp177=(($add176)|0)!=32768;
      if ($cmp177) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: 
      var $109=$png_ptr_addr;
      _png_error($109, ((STRING_TABLE.__str39788)|0));
      __label__ = 75; break;
    case 75: 
      var $110=HEAP32[(($r)>>2)];
      var $conv=(($110) & 65535);
      var $111=$png_ptr_addr;
      var $rgb_to_gray_red_coeff=(($111+572)|0);
      HEAP16[(($rgb_to_gray_red_coeff)>>1)]=$conv;
      var $112=HEAP32[(($g)>>2)];
      var $conv180=(($112) & 65535);
      var $113=$png_ptr_addr;
      var $rgb_to_gray_green_coeff=(($113+574)|0);
      HEAP16[(($rgb_to_gray_green_coeff)>>1)]=$conv180;
      __label__ = 77; break;
    case 76: 
      var $114=$png_ptr_addr;
      _png_error($114, ((STRING_TABLE.__str40789)|0));
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      var $115=$png_ptr_addr;
      var $116=$info_ptr_addr;
      var $117=$x_white;
      var $118=$y_white;
      var $119=$x_red;
      var $120=$y_red;
      var $121=$x_green;
      var $122=$y_green;
      var $123=$x_blue;
      var $124=$y_blue;
      _png_set_cHRM_fixed($115, $116, $117, $118, $119, $120, $121, $122, $123, $124);
      __label__ = 80; break;
    case 80: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_cHRM["X"]=1;

function _png_handle_sRGB($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 260; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $intent;
      var $buf=__stackBase__;
      var $p=__stackBase__+4;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str41790)|0));
      __label__ = 9; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str42791)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 47; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $mode6=(($8+84)|0);
      var $9=HEAP32[(($mode6)>>2)];
      var $and7=$9 & 2;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str43792)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $11=$info_ptr_addr;
      var $cmp=(($11)|0)!=0;
      if ($cmp) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $12=$info_ptr_addr;
      var $valid=(($12+8)|0);
      var $13=HEAP32[(($valid)>>2)];
      var $and12=$13 & 2048;
      var $tobool13=(($and12)|0)!=0;
      if ($tobool13) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $14=$png_ptr_addr;
      _png_warning($14, ((STRING_TABLE.__str44793)|0));
      var $15=$png_ptr_addr;
      var $16=$length_addr;
      var $call15=_png_crc_finish($15, $16);
      __label__ = 47; break;
    case 12: 
      var $17=$length_addr;
      var $cmp17=(($17)|0)!=1;
      if ($cmp17) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $18=$png_ptr_addr;
      _png_warning($18, ((STRING_TABLE.__str45794)|0));
      var $19=$png_ptr_addr;
      var $20=$length_addr;
      var $call19=_png_crc_finish($19, $20);
      __label__ = 47; break;
    case 14: 
      var $21=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($21, $arraydecay, 1);
      var $22=$png_ptr_addr;
      var $call21=_png_crc_finish($22, 0);
      var $tobool22=(($call21)|0)!=0;
      if ($tobool22) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 47; break;
    case 16: 
      var $arrayidx=(($buf)|0);
      var $23=HEAPU8[($arrayidx)];
      var $conv=(($23)&255);
      $intent=$conv;
      var $24=$intent;
      var $cmp25=(($24)|0) >= 4;
      if ($cmp25) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $25=$png_ptr_addr;
      _png_warning($25, ((STRING_TABLE.__str46795)|0));
      __label__ = 47; break;
    case 18: 
      var $26=$info_ptr_addr;
      var $cmp29=(($26)|0)!=0;
      if ($cmp29) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: 
      var $27=$info_ptr_addr;
      var $valid32=(($27+8)|0);
      var $28=HEAP32[(($valid32)>>2)];
      var $and33=$28 & 1;
      var $tobool34=(($and33)|0)!=0;
      if ($tobool34) { __label__ = 20; break; } else { __label__ = 24; break; }
    case 20: 
      var $29=$info_ptr_addr;
      var $gamma=(($29+40)|0);
      var $30=HEAP32[(($gamma)>>2)];
      var $cmp36=(($30)|0) < 45000;
      if ($cmp36) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $31=$info_ptr_addr;
      var $gamma38=(($31+40)|0);
      var $32=HEAP32[(($gamma38)>>2)];
      var $cmp39=(($32)|0) > 46000;
      if ($cmp39) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $arraydecay42=(($p)|0);
      var $33=$info_ptr_addr;
      var $gamma43=(($33+40)|0);
      var $34=HEAP32[(($gamma43)>>2)];
      _png_warning_parameter_signed($arraydecay42, 1, 5, $34);
      var $35=$png_ptr_addr;
      var $arraydecay44=(($p)|0);
      _png_formatted_warning($35, $arraydecay44, ((STRING_TABLE.__str26775)|0));
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $36=$info_ptr_addr;
      var $cmp47=(($36)|0)!=0;
      if ($cmp47) { __label__ = 25; break; } else { __label__ = 44; break; }
    case 25: 
      var $37=$info_ptr_addr;
      var $valid50=(($37+8)|0);
      var $38=HEAP32[(($valid50)>>2)];
      var $and51=$38 & 4;
      var $tobool52=(($and51)|0)!=0;
      if ($tobool52) { __label__ = 26; break; } else { __label__ = 44; break; }
    case 26: 
      var $39=$info_ptr_addr;
      var $x_white=(($39+128)|0);
      var $40=HEAP32[(($x_white)>>2)];
      var $cmp54=(($40)|0) < 30270;
      if ($cmp54) { __label__ = 42; break; } else { __label__ = 27; break; }
    case 27: 
      var $41=$info_ptr_addr;
      var $x_white57=(($41+128)|0);
      var $42=HEAP32[(($x_white57)>>2)];
      var $cmp58=(($42)|0) > 32270;
      if ($cmp58) { __label__ = 42; break; } else { __label__ = 28; break; }
    case 28: 
      var $43=$info_ptr_addr;
      var $y_white=(($43+132)|0);
      var $44=HEAP32[(($y_white)>>2)];
      var $cmp61=(($44)|0) < 31900;
      if ($cmp61) { __label__ = 42; break; } else { __label__ = 29; break; }
    case 29: 
      var $45=$info_ptr_addr;
      var $y_white64=(($45+132)|0);
      var $46=HEAP32[(($y_white64)>>2)];
      var $cmp65=(($46)|0) > 33900;
      if ($cmp65) { __label__ = 42; break; } else { __label__ = 30; break; }
    case 30: 
      var $47=$info_ptr_addr;
      var $x_red=(($47+136)|0);
      var $48=HEAP32[(($x_red)>>2)];
      var $cmp68=(($48)|0) < 63000;
      if ($cmp68) { __label__ = 42; break; } else { __label__ = 31; break; }
    case 31: 
      var $49=$info_ptr_addr;
      var $x_red71=(($49+136)|0);
      var $50=HEAP32[(($x_red71)>>2)];
      var $cmp72=(($50)|0) > 65000;
      if ($cmp72) { __label__ = 42; break; } else { __label__ = 32; break; }
    case 32: 
      var $51=$info_ptr_addr;
      var $y_red=(($51+140)|0);
      var $52=HEAP32[(($y_red)>>2)];
      var $cmp75=(($52)|0) < 32000;
      if ($cmp75) { __label__ = 42; break; } else { __label__ = 33; break; }
    case 33: 
      var $53=$info_ptr_addr;
      var $y_red78=(($53+140)|0);
      var $54=HEAP32[(($y_red78)>>2)];
      var $cmp79=(($54)|0) > 34000;
      if ($cmp79) { __label__ = 42; break; } else { __label__ = 34; break; }
    case 34: 
      var $55=$info_ptr_addr;
      var $x_green=(($55+144)|0);
      var $56=HEAP32[(($x_green)>>2)];
      var $cmp82=(($56)|0) < 29000;
      if ($cmp82) { __label__ = 42; break; } else { __label__ = 35; break; }
    case 35: 
      var $57=$info_ptr_addr;
      var $x_green85=(($57+144)|0);
      var $58=HEAP32[(($x_green85)>>2)];
      var $cmp86=(($58)|0) > 31000;
      if ($cmp86) { __label__ = 42; break; } else { __label__ = 36; break; }
    case 36: 
      var $59=$info_ptr_addr;
      var $y_green=(($59+148)|0);
      var $60=HEAP32[(($y_green)>>2)];
      var $cmp89=(($60)|0) < 59000;
      if ($cmp89) { __label__ = 42; break; } else { __label__ = 37; break; }
    case 37: 
      var $61=$info_ptr_addr;
      var $y_green92=(($61+148)|0);
      var $62=HEAP32[(($y_green92)>>2)];
      var $cmp93=(($62)|0) > 61000;
      if ($cmp93) { __label__ = 42; break; } else { __label__ = 38; break; }
    case 38: 
      var $63=$info_ptr_addr;
      var $x_blue=(($63+152)|0);
      var $64=HEAP32[(($x_blue)>>2)];
      var $cmp96=(($64)|0) < 14000;
      if ($cmp96) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $65=$info_ptr_addr;
      var $x_blue99=(($65+152)|0);
      var $66=HEAP32[(($x_blue99)>>2)];
      var $cmp100=(($66)|0) > 16000;
      if ($cmp100) { __label__ = 42; break; } else { __label__ = 40; break; }
    case 40: 
      var $67=$info_ptr_addr;
      var $y_blue=(($67+156)|0);
      var $68=HEAP32[(($y_blue)>>2)];
      var $cmp103=(($68)|0) < 5000;
      if ($cmp103) { __label__ = 42; break; } else { __label__ = 41; break; }
    case 41: 
      var $69=$info_ptr_addr;
      var $y_blue106=(($69+156)|0);
      var $70=HEAP32[(($y_blue106)>>2)];
      var $cmp107=(($70)|0) > 7000;
      if ($cmp107) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $71=$png_ptr_addr;
      _png_warning($71, ((STRING_TABLE.__str47796)|0));
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $72=$png_ptr_addr;
      var $is_sRGB=(($72+568)|0);
      HEAP8[($is_sRGB)]=1;
      var $73=$png_ptr_addr;
      var $rgb_to_gray_coefficients_set=(($73+570)|0);
      var $74=HEAP8[($rgb_to_gray_coefficients_set)];
      var $tobool112=(($74 << 24) >> 24)!=0;
      if ($tobool112) { __label__ = 46; break; } else { __label__ = 45; break; }
    case 45: 
      var $75=$png_ptr_addr;
      var $rgb_to_gray_red_coeff=(($75+572)|0);
      HEAP16[(($rgb_to_gray_red_coeff)>>1)]=6968;
      var $76=$png_ptr_addr;
      var $rgb_to_gray_green_coeff=(($76+574)|0);
      HEAP16[(($rgb_to_gray_green_coeff)>>1)]=23434;
      var $77=$png_ptr_addr;
      var $rgb_to_gray_coefficients_set114=(($77+570)|0);
      HEAP8[($rgb_to_gray_coefficients_set114)]=1;
      __label__ = 46; break;
    case 46: 
      var $78=$png_ptr_addr;
      var $79=$info_ptr_addr;
      var $80=$intent;
      _png_set_sRGB_gAMA_and_cHRM($78, $79, $80);
      __label__ = 47; break;
    case 47: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_sRGB["X"]=1;

function _png_handle_iCCP($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 260; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $compression_type;
      var $pC;
      var $profile;
      var $skip;
      var $profile_size;
      var $profile_length;
      var $slength;
      var $prefix_length;
      var $data_length=__stackBase__;
      var $p=__stackBase__+4;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      $skip=0;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str48797)|0));
      __label__ = 9; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str49798)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 31; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $mode6=(($8+84)|0);
      var $9=HEAP32[(($mode6)>>2)];
      var $and7=$9 & 2;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str50799)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $11=$png_ptr_addr;
      var $mode12=(($11+84)|0);
      var $12=HEAP32[(($mode12)>>2)];
      var $and13=$12 & 16384;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 12; break; } else { __label__ = 10; break; }
    case 10: 
      var $13=$info_ptr_addr;
      var $cmp=(($13)|0)!=0;
      if ($cmp) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $14=$info_ptr_addr;
      var $valid=(($14+8)|0);
      var $15=HEAP32[(($valid)>>2)];
      var $and15=$15 & 6144;
      var $tobool16=(($and15)|0)!=0;
      if ($tobool16) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $16=$png_ptr_addr;
      _png_warning($16, ((STRING_TABLE.__str51800)|0));
      var $17=$png_ptr_addr;
      var $18=$length_addr;
      var $call18=_png_crc_finish($17, $18);
      __label__ = 31; break;
    case 13: 
      var $19=$png_ptr_addr;
      var $mode20=(($19+84)|0);
      var $20=HEAP32[(($mode20)>>2)];
      var $or=$20 | 16384;
      HEAP32[(($mode20)>>2)]=$or;
      var $21=$png_ptr_addr;
      var $22=$png_ptr_addr;
      var $chunkdata=(($22+656)|0);
      var $23=HEAP32[(($chunkdata)>>2)];
      _png_free($21, $23);
      var $24=$png_ptr_addr;
      var $25=$length_addr;
      var $add=(($25+1)|0);
      var $call21=_png_malloc($24, $add);
      var $26=$png_ptr_addr;
      var $chunkdata22=(($26+656)|0);
      HEAP32[(($chunkdata22)>>2)]=$call21;
      var $27=$length_addr;
      $slength=$27;
      var $28=$png_ptr_addr;
      var $29=$png_ptr_addr;
      var $chunkdata23=(($29+656)|0);
      var $30=HEAP32[(($chunkdata23)>>2)];
      var $31=$slength;
      _png_crc_read($28, $30, $31);
      var $32=$png_ptr_addr;
      var $33=$skip;
      var $call24=_png_crc_finish($32, $33);
      var $tobool25=(($call24)|0)!=0;
      if ($tobool25) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $34=$png_ptr_addr;
      var $35=$png_ptr_addr;
      var $chunkdata27=(($35+656)|0);
      var $36=HEAP32[(($chunkdata27)>>2)];
      _png_free($34, $36);
      var $37=$png_ptr_addr;
      var $chunkdata28=(($37+656)|0);
      HEAP32[(($chunkdata28)>>2)]=0;
      __label__ = 31; break;
    case 15: 
      var $38=$slength;
      var $39=$png_ptr_addr;
      var $chunkdata30=(($39+656)|0);
      var $40=HEAP32[(($chunkdata30)>>2)];
      var $arrayidx=(($40+$38)|0);
      HEAP8[($arrayidx)]=0;
      var $41=$png_ptr_addr;
      var $chunkdata31=(($41+656)|0);
      var $42=HEAP32[(($chunkdata31)>>2)];
      $profile=$42;
      __label__ = 16; break;
    case 16: 
      var $43=$profile;
      var $44=HEAP8[($43)];
      var $tobool32=(($44 << 24) >> 24)!=0;
      if ($tobool32) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $45=$profile;
      var $incdec_ptr=(($45+1)|0);
      $profile=$incdec_ptr;
      __label__ = 16; break;
    case 19: 
      var $46=$profile;
      var $incdec_ptr33=(($46+1)|0);
      $profile=$incdec_ptr33;
      var $47=$profile;
      var $48=$png_ptr_addr;
      var $chunkdata34=(($48+656)|0);
      var $49=HEAP32[(($chunkdata34)>>2)];
      var $50=$slength;
      var $add_ptr=(($49+$50)|0);
      var $add_ptr35=(($add_ptr-1)|0);
      var $cmp36=(($47)>>>0) >= (($add_ptr35)>>>0);
      if ($cmp36) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $51=$png_ptr_addr;
      var $52=$png_ptr_addr;
      var $chunkdata38=(($52+656)|0);
      var $53=HEAP32[(($chunkdata38)>>2)];
      _png_free($51, $53);
      var $54=$png_ptr_addr;
      var $chunkdata39=(($54+656)|0);
      HEAP32[(($chunkdata39)>>2)]=0;
      var $55=$png_ptr_addr;
      _png_warning($55, ((STRING_TABLE.__str52801)|0));
      __label__ = 31; break;
    case 21: 
      var $56=$profile;
      var $incdec_ptr41=(($56+1)|0);
      $profile=$incdec_ptr41;
      var $57=HEAP8[($56)];
      $compression_type=$57;
      var $58=$compression_type;
      var $tobool42=(($58 << 24) >> 24)!=0;
      if ($tobool42) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $59=$png_ptr_addr;
      _png_warning($59, ((STRING_TABLE.__str53802)|0));
      $compression_type=0;
      __label__ = 23; break;
    case 23: 
      var $60=$profile;
      var $61=$png_ptr_addr;
      var $chunkdata45=(($61+656)|0);
      var $62=HEAP32[(($chunkdata45)>>2)];
      var $sub_ptr_lhs_cast=$60;
      var $sub_ptr_rhs_cast=$62;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      $prefix_length=$sub_ptr_sub;
      var $63=$png_ptr_addr;
      var $64=$compression_type;
      var $conv=(($64)&255);
      var $65=$slength;
      var $66=$prefix_length;
      _png_decompress_chunk($63, $conv, $65, $66, $data_length);
      var $67=HEAP32[(($data_length)>>2)];
      var $68=$prefix_length;
      var $sub=(($67-$68)|0);
      $profile_length=$sub;
      var $69=$prefix_length;
      var $70=HEAPU32[(($data_length)>>2)];
      var $cmp46=(($69)>>>0) > (($70)>>>0);
      if ($cmp46) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $71=$profile_length;
      var $cmp49=(($71)>>>0) < 4;
      if ($cmp49) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $72=$png_ptr_addr;
      var $73=$png_ptr_addr;
      var $chunkdata52=(($73+656)|0);
      var $74=HEAP32[(($chunkdata52)>>2)];
      _png_free($72, $74);
      var $75=$png_ptr_addr;
      var $chunkdata53=(($75+656)|0);
      HEAP32[(($chunkdata53)>>2)]=0;
      var $76=$png_ptr_addr;
      _png_warning($76, ((STRING_TABLE.__str54803)|0));
      __label__ = 31; break;
    case 26: 
      var $77=$png_ptr_addr;
      var $chunkdata55=(($77+656)|0);
      var $78=HEAP32[(($chunkdata55)>>2)];
      var $79=$prefix_length;
      var $add_ptr56=(($78+$79)|0);
      $pC=$add_ptr56;
      var $80=$pC;
      var $81=HEAPU8[($80)];
      var $conv57=(($81)&255);
      var $shl=$conv57 << 24;
      var $82=$pC;
      var $add_ptr58=(($82+1)|0);
      var $83=HEAPU8[($add_ptr58)];
      var $conv59=(($83)&255);
      var $shl60=$conv59 << 16;
      var $or61=$shl | $shl60;
      var $84=$pC;
      var $add_ptr62=(($84+2)|0);
      var $85=HEAPU8[($add_ptr62)];
      var $conv63=(($85)&255);
      var $shl64=$conv63 << 8;
      var $or65=$or61 | $shl64;
      var $86=$pC;
      var $add_ptr66=(($86+3)|0);
      var $87=HEAPU8[($add_ptr66)];
      var $conv67=(($87)&255);
      var $or68=$or65 | $conv67;
      $profile_size=$or68;
      var $88=$profile_size;
      var $89=$profile_length;
      var $cmp69=(($88)>>>0) < (($89)>>>0);
      if ($cmp69) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $90=$profile_size;
      $profile_length=$90;
      __label__ = 28; break;
    case 28: 
      var $91=$profile_size;
      var $92=$profile_length;
      var $cmp73=(($91)>>>0) > (($92)>>>0);
      if ($cmp73) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $93=$png_ptr_addr;
      var $94=$png_ptr_addr;
      var $chunkdata76=(($94+656)|0);
      var $95=HEAP32[(($chunkdata76)>>2)];
      _png_free($93, $95);
      var $96=$png_ptr_addr;
      var $chunkdata77=(($96+656)|0);
      HEAP32[(($chunkdata77)>>2)]=0;
      var $arraydecay=(($p)|0);
      var $97=$profile_size;
      _png_warning_parameter_unsigned($arraydecay, 1, 1, $97);
      var $arraydecay78=(($p)|0);
      var $98=$profile_length;
      _png_warning_parameter_unsigned($arraydecay78, 2, 1, $98);
      var $99=$png_ptr_addr;
      var $arraydecay79=(($p)|0);
      _png_formatted_warning($99, $arraydecay79, ((STRING_TABLE.__str55804)|0));
      __label__ = 31; break;
    case 30: 
      var $100=$png_ptr_addr;
      var $101=$info_ptr_addr;
      var $102=$png_ptr_addr;
      var $chunkdata81=(($102+656)|0);
      var $103=HEAP32[(($chunkdata81)>>2)];
      var $104=$compression_type;
      var $conv82=(($104)&255);
      var $105=$png_ptr_addr;
      var $chunkdata83=(($105+656)|0);
      var $106=HEAP32[(($chunkdata83)>>2)];
      var $107=$prefix_length;
      var $add_ptr84=(($106+$107)|0);
      var $108=$profile_size;
      _png_set_iCCP($100, $101, $103, $conv82, $add_ptr84, $108);
      var $109=$png_ptr_addr;
      var $110=$png_ptr_addr;
      var $chunkdata85=(($110+656)|0);
      var $111=HEAP32[(($chunkdata85)>>2)];
      _png_free($109, $111);
      var $112=$png_ptr_addr;
      var $chunkdata86=(($112+656)|0);
      HEAP32[(($chunkdata86)>>2)]=0;
      __label__ = 31; break;
    case 31: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_iCCP["X"]=1;

function _png_handle_sPLT($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $entry_start;
      var $new_palette=__stackBase__;
      var $pp;
      var $data_length;
      var $entry_size;
      var $i;
      var $skip;
      var $slength;
      var $dl;
      var $max_dl;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      $skip=0;
      var $0=$png_ptr_addr;
      var $user_chunk_cache_max=(($0+624)|0);
      var $1=HEAP32[(($user_chunk_cache_max)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $user_chunk_cache_max1=(($2+624)|0);
      var $3=HEAP32[(($user_chunk_cache_max1)>>2)];
      var $cmp2=(($3)|0)==1;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$png_ptr_addr;
      var $5=$length_addr;
      var $call=_png_crc_finish($4, $5);
      __label__ = 34; break;
    case 4: 
      var $6=$png_ptr_addr;
      var $user_chunk_cache_max4=(($6+624)|0);
      var $7=HEAP32[(($user_chunk_cache_max4)>>2)];
      var $dec=(($7-1)|0);
      HEAP32[(($user_chunk_cache_max4)>>2)]=$dec;
      var $cmp5=(($dec)|0)==1;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$png_ptr_addr;
      _png_warning($8, ((STRING_TABLE.__str56805)|0));
      var $9=$png_ptr_addr;
      var $10=$length_addr;
      var $call7=_png_crc_finish($9, $10);
      __label__ = 34; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $11=$png_ptr_addr;
      var $mode=(($11+84)|0);
      var $12=HEAP32[(($mode)>>2)];
      var $and=$12 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $13=$png_ptr_addr;
      _png_error($13, ((STRING_TABLE.__str57806)|0));
      __label__ = 12; break;
    case 9: 
      var $14=$png_ptr_addr;
      var $mode11=(($14+84)|0);
      var $15=HEAP32[(($mode11)>>2)];
      var $and12=$15 & 4;
      var $tobool13=(($and12)|0)!=0;
      if ($tobool13) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $16=$png_ptr_addr;
      _png_warning($16, ((STRING_TABLE.__str58807)|0));
      var $17=$png_ptr_addr;
      var $18=$length_addr;
      var $call15=_png_crc_finish($17, $18);
      __label__ = 34; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $19=$png_ptr_addr;
      var $20=$png_ptr_addr;
      var $chunkdata=(($20+656)|0);
      var $21=HEAP32[(($chunkdata)>>2)];
      _png_free($19, $21);
      var $22=$png_ptr_addr;
      var $23=$length_addr;
      var $add=(($23+1)|0);
      var $call18=_png_malloc($22, $add);
      var $24=$png_ptr_addr;
      var $chunkdata19=(($24+656)|0);
      HEAP32[(($chunkdata19)>>2)]=$call18;
      var $25=$length_addr;
      $slength=$25;
      var $26=$png_ptr_addr;
      var $27=$png_ptr_addr;
      var $chunkdata20=(($27+656)|0);
      var $28=HEAP32[(($chunkdata20)>>2)];
      var $29=$slength;
      _png_crc_read($26, $28, $29);
      var $30=$png_ptr_addr;
      var $31=$skip;
      var $call21=_png_crc_finish($30, $31);
      var $tobool22=(($call21)|0)!=0;
      if ($tobool22) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $32=$png_ptr_addr;
      var $33=$png_ptr_addr;
      var $chunkdata24=(($33+656)|0);
      var $34=HEAP32[(($chunkdata24)>>2)];
      _png_free($32, $34);
      var $35=$png_ptr_addr;
      var $chunkdata25=(($35+656)|0);
      HEAP32[(($chunkdata25)>>2)]=0;
      __label__ = 34; break;
    case 14: 
      var $36=$slength;
      var $37=$png_ptr_addr;
      var $chunkdata27=(($37+656)|0);
      var $38=HEAP32[(($chunkdata27)>>2)];
      var $arrayidx=(($38+$36)|0);
      HEAP8[($arrayidx)]=0;
      var $39=$png_ptr_addr;
      var $chunkdata28=(($39+656)|0);
      var $40=HEAP32[(($chunkdata28)>>2)];
      $entry_start=$40;
      __label__ = 15; break;
    case 15: 
      var $41=$entry_start;
      var $42=HEAP8[($41)];
      var $tobool29=(($42 << 24) >> 24)!=0;
      if ($tobool29) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $43=$entry_start;
      var $incdec_ptr=(($43+1)|0);
      $entry_start=$incdec_ptr;
      __label__ = 15; break;
    case 18: 
      var $44=$entry_start;
      var $incdec_ptr30=(($44+1)|0);
      $entry_start=$incdec_ptr30;
      var $45=$entry_start;
      var $46=$png_ptr_addr;
      var $chunkdata31=(($46+656)|0);
      var $47=HEAP32[(($chunkdata31)>>2)];
      var $48=$slength;
      var $add_ptr=(($47+$48)|0);
      var $add_ptr32=(($add_ptr-2)|0);
      var $cmp33=(($45)>>>0) > (($add_ptr32)>>>0);
      if ($cmp33) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $49=$png_ptr_addr;
      var $50=$png_ptr_addr;
      var $chunkdata35=(($50+656)|0);
      var $51=HEAP32[(($chunkdata35)>>2)];
      _png_free($49, $51);
      var $52=$png_ptr_addr;
      var $chunkdata36=(($52+656)|0);
      HEAP32[(($chunkdata36)>>2)]=0;
      var $53=$png_ptr_addr;
      _png_warning($53, ((STRING_TABLE.__str59808)|0));
      __label__ = 34; break;
    case 20: 
      var $54=$entry_start;
      var $incdec_ptr38=(($54+1)|0);
      $entry_start=$incdec_ptr38;
      var $55=HEAP8[($54)];
      var $depth=(($new_palette+4)|0);
      HEAP8[($depth)]=$55;
      var $depth39=(($new_palette+4)|0);
      var $56=HEAPU8[($depth39)];
      var $conv=(($56)&255);
      var $cmp40=(($conv)|0)==8;
      var $cond=$cmp40 ? 6 : 10;
      $entry_size=$cond;
      var $57=$length_addr;
      var $58=$entry_start;
      var $59=$png_ptr_addr;
      var $chunkdata42=(($59+656)|0);
      var $60=HEAP32[(($chunkdata42)>>2)];
      var $sub_ptr_lhs_cast=$58;
      var $sub_ptr_rhs_cast=$60;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      var $sub=(($57-$sub_ptr_sub)|0);
      $data_length=$sub;
      var $61=$data_length;
      var $62=$entry_size;
      var $rem=(($61)>>>0)%(($62)>>>0);
      var $tobool43=(($rem)|0)!=0;
      if ($tobool43) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $63=$png_ptr_addr;
      var $64=$png_ptr_addr;
      var $chunkdata45=(($64+656)|0);
      var $65=HEAP32[(($chunkdata45)>>2)];
      _png_free($63, $65);
      var $66=$png_ptr_addr;
      var $chunkdata46=(($66+656)|0);
      HEAP32[(($chunkdata46)>>2)]=0;
      var $67=$png_ptr_addr;
      _png_warning($67, ((STRING_TABLE.__str60809)|0));
      __label__ = 34; break;
    case 22: 
      var $68=$data_length;
      var $69=$entry_size;
      var $div=Math.floor((($68)>>>0)/(($69)>>>0));
      $dl=$div;
      $max_dl=429496729;
      var $70=$dl;
      var $71=$max_dl;
      var $cmp48=(($70)>>>0) > (($71)>>>0);
      if ($cmp48) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $72=$png_ptr_addr;
      _png_warning($72, ((STRING_TABLE.__str61810)|0));
      __label__ = 34; break;
    case 24: 
      var $73=$data_length;
      var $74=$entry_size;
      var $div52=Math.floor((($73)>>>0)/(($74)>>>0));
      var $nentries=(($new_palette+12)|0);
      HEAP32[(($nentries)>>2)]=$div52;
      var $75=$png_ptr_addr;
      var $nentries53=(($new_palette+12)|0);
      var $76=HEAP32[(($nentries53)>>2)];
      var $mul=(($76*10)|0);
      var $call54=_png_malloc_warn($75, $mul);
      var $77=$call54;
      var $entries=(($new_palette+8)|0);
      HEAP32[(($entries)>>2)]=$77;
      var $entries55=(($new_palette+8)|0);
      var $78=HEAP32[(($entries55)>>2)];
      var $cmp56=(($78)|0)==0;
      if ($cmp56) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $79=$png_ptr_addr;
      _png_warning($79, ((STRING_TABLE.__str62811)|0));
      __label__ = 34; break;
    case 26: 
      $i=0;
      __label__ = 27; break;
    case 27: 
      var $80=$i;
      var $nentries61=(($new_palette+12)|0);
      var $81=HEAP32[(($nentries61)>>2)];
      var $cmp62=(($80)|0) < (($81)|0);
      if ($cmp62) { __label__ = 28; break; } else { __label__ = 33; break; }
    case 28: 
      var $entries65=(($new_palette+8)|0);
      var $82=HEAP32[(($entries65)>>2)];
      var $83=$i;
      var $add_ptr66=(($82+$83*10)|0);
      $pp=$add_ptr66;
      var $depth67=(($new_palette+4)|0);
      var $84=HEAPU8[($depth67)];
      var $conv68=(($84)&255);
      var $cmp69=(($conv68)|0)==8;
      if ($cmp69) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $85=$entry_start;
      var $incdec_ptr72=(($85+1)|0);
      $entry_start=$incdec_ptr72;
      var $86=HEAPU8[($85)];
      var $conv73=(($86)&255);
      var $87=$pp;
      var $red=(($87)|0);
      HEAP16[(($red)>>1)]=$conv73;
      var $88=$entry_start;
      var $incdec_ptr74=(($88+1)|0);
      $entry_start=$incdec_ptr74;
      var $89=HEAPU8[($88)];
      var $conv75=(($89)&255);
      var $90=$pp;
      var $green=(($90+2)|0);
      HEAP16[(($green)>>1)]=$conv75;
      var $91=$entry_start;
      var $incdec_ptr76=(($91+1)|0);
      $entry_start=$incdec_ptr76;
      var $92=HEAPU8[($91)];
      var $conv77=(($92)&255);
      var $93=$pp;
      var $blue=(($93+4)|0);
      HEAP16[(($blue)>>1)]=$conv77;
      var $94=$entry_start;
      var $incdec_ptr78=(($94+1)|0);
      $entry_start=$incdec_ptr78;
      var $95=HEAPU8[($94)];
      var $conv79=(($95)&255);
      var $96=$pp;
      var $alpha=(($96+6)|0);
      HEAP16[(($alpha)>>1)]=$conv79;
      __label__ = 31; break;
    case 30: 
      var $97=$entry_start;
      var $98=HEAPU8[($97)];
      var $conv81=(($98)&255);
      var $shl=$conv81 << 8;
      var $99=$entry_start;
      var $add_ptr82=(($99+1)|0);
      var $100=HEAPU8[($add_ptr82)];
      var $conv83=(($100)&255);
      var $add84=(($shl+$conv83)|0);
      var $conv85=(($add84) & 65535);
      var $101=$pp;
      var $red86=(($101)|0);
      HEAP16[(($red86)>>1)]=$conv85;
      var $102=$entry_start;
      var $add_ptr87=(($102+2)|0);
      $entry_start=$add_ptr87;
      var $103=$entry_start;
      var $104=HEAPU8[($103)];
      var $conv88=(($104)&255);
      var $shl89=$conv88 << 8;
      var $105=$entry_start;
      var $add_ptr90=(($105+1)|0);
      var $106=HEAPU8[($add_ptr90)];
      var $conv91=(($106)&255);
      var $add92=(($shl89+$conv91)|0);
      var $conv93=(($add92) & 65535);
      var $107=$pp;
      var $green94=(($107+2)|0);
      HEAP16[(($green94)>>1)]=$conv93;
      var $108=$entry_start;
      var $add_ptr95=(($108+2)|0);
      $entry_start=$add_ptr95;
      var $109=$entry_start;
      var $110=HEAPU8[($109)];
      var $conv96=(($110)&255);
      var $shl97=$conv96 << 8;
      var $111=$entry_start;
      var $add_ptr98=(($111+1)|0);
      var $112=HEAPU8[($add_ptr98)];
      var $conv99=(($112)&255);
      var $add100=(($shl97+$conv99)|0);
      var $conv101=(($add100) & 65535);
      var $113=$pp;
      var $blue102=(($113+4)|0);
      HEAP16[(($blue102)>>1)]=$conv101;
      var $114=$entry_start;
      var $add_ptr103=(($114+2)|0);
      $entry_start=$add_ptr103;
      var $115=$entry_start;
      var $116=HEAPU8[($115)];
      var $conv104=(($116)&255);
      var $shl105=$conv104 << 8;
      var $117=$entry_start;
      var $add_ptr106=(($117+1)|0);
      var $118=HEAPU8[($add_ptr106)];
      var $conv107=(($118)&255);
      var $add108=(($shl105+$conv107)|0);
      var $conv109=(($add108) & 65535);
      var $119=$pp;
      var $alpha110=(($119+6)|0);
      HEAP16[(($alpha110)>>1)]=$conv109;
      var $120=$entry_start;
      var $add_ptr111=(($120+2)|0);
      $entry_start=$add_ptr111;
      __label__ = 31; break;
    case 31: 
      var $121=$entry_start;
      var $122=HEAPU8[($121)];
      var $conv113=(($122)&255);
      var $shl114=$conv113 << 8;
      var $123=$entry_start;
      var $add_ptr115=(($123+1)|0);
      var $124=HEAPU8[($add_ptr115)];
      var $conv116=(($124)&255);
      var $add117=(($shl114+$conv116)|0);
      var $conv118=(($add117) & 65535);
      var $125=$pp;
      var $frequency=(($125+8)|0);
      HEAP16[(($frequency)>>1)]=$conv118;
      var $126=$entry_start;
      var $add_ptr119=(($126+2)|0);
      $entry_start=$add_ptr119;
      __label__ = 32; break;
    case 32: 
      var $127=$i;
      var $inc=(($127+1)|0);
      $i=$inc;
      __label__ = 27; break;
    case 33: 
      var $128=$png_ptr_addr;
      var $chunkdata122=(($128+656)|0);
      var $129=HEAP32[(($chunkdata122)>>2)];
      var $name=(($new_palette)|0);
      HEAP32[(($name)>>2)]=$129;
      var $130=$png_ptr_addr;
      var $131=$info_ptr_addr;
      _png_set_sPLT($130, $131, $new_palette, 1);
      var $132=$png_ptr_addr;
      var $133=$png_ptr_addr;
      var $chunkdata123=(($133+656)|0);
      var $134=HEAP32[(($chunkdata123)>>2)];
      _png_free($132, $134);
      var $135=$png_ptr_addr;
      var $chunkdata124=(($135+656)|0);
      HEAP32[(($chunkdata124)>>2)]=0;
      var $136=$png_ptr_addr;
      var $entries125=(($new_palette+8)|0);
      var $137=HEAP32[(($entries125)>>2)];
      var $138=$137;
      _png_free($136, $138);
      __label__ = 34; break;
    case 34: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_sPLT["X"]=1;

function _png_handle_tRNS($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 268; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $readbuf=__stackBase__;
      var $buf=__stackBase__+256;
      var $buf31=__stackBase__+260;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str63812)|0));
      __label__ = 10; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str64813)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 33; break;
    case 5: 
      var $8=$info_ptr_addr;
      var $cmp=(($8)|0)!=0;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $9=$info_ptr_addr;
      var $valid=(($9+8)|0);
      var $10=HEAP32[(($valid)>>2)];
      var $and6=$10 & 16;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$png_ptr_addr;
      _png_warning($11, ((STRING_TABLE.__str65814)|0));
      var $12=$png_ptr_addr;
      var $13=$length_addr;
      var $call9=_png_crc_finish($12, $13);
      __label__ = 33; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $14=$png_ptr_addr;
      var $color_type=(($14+291)|0);
      var $15=HEAPU8[($color_type)];
      var $conv=(($15)&255);
      var $cmp12=(($conv)|0)==0;
      if ($cmp12) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $16=$length_addr;
      var $cmp15=(($16)|0)!=2;
      if ($cmp15) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $17=$png_ptr_addr;
      _png_warning($17, ((STRING_TABLE.__str66815)|0));
      var $18=$png_ptr_addr;
      var $19=$length_addr;
      var $call18=_png_crc_finish($18, $19);
      __label__ = 33; break;
    case 13: 
      var $20=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($20, $arraydecay, 2);
      var $21=$png_ptr_addr;
      var $num_trans=(($21+284)|0);
      HEAP16[(($num_trans)>>1)]=1;
      var $arraydecay20=(($buf)|0);
      var $22=HEAPU8[($arraydecay20)];
      var $conv21=(($22)&255);
      var $shl=$conv21 << 8;
      var $arraydecay22=(($buf)|0);
      var $add_ptr=(($arraydecay22+1)|0);
      var $23=HEAPU8[($add_ptr)];
      var $conv23=(($23)&255);
      var $add=(($shl+$conv23)|0);
      var $conv24=(($add) & 65535);
      var $24=$png_ptr_addr;
      var $trans_color=(($24+400)|0);
      var $gray=(($trans_color+8)|0);
      HEAP16[(($gray)>>1)]=$conv24;
      __label__ = 30; break;
    case 14: 
      var $25=$png_ptr_addr;
      var $color_type26=(($25+291)|0);
      var $26=HEAPU8[($color_type26)];
      var $conv27=(($26)&255);
      var $cmp28=(($conv27)|0)==2;
      if ($cmp28) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $27=$length_addr;
      var $cmp32=(($27)|0)!=6;
      if ($cmp32) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $28=$png_ptr_addr;
      _png_warning($28, ((STRING_TABLE.__str66815)|0));
      var $29=$png_ptr_addr;
      var $30=$length_addr;
      var $call35=_png_crc_finish($29, $30);
      __label__ = 33; break;
    case 17: 
      var $31=$png_ptr_addr;
      var $arraydecay37=(($buf31)|0);
      var $32=$length_addr;
      _png_crc_read($31, $arraydecay37, $32);
      var $33=$png_ptr_addr;
      var $num_trans38=(($33+284)|0);
      HEAP16[(($num_trans38)>>1)]=1;
      var $arraydecay39=(($buf31)|0);
      var $34=HEAPU8[($arraydecay39)];
      var $conv40=(($34)&255);
      var $shl41=$conv40 << 8;
      var $arraydecay42=(($buf31)|0);
      var $add_ptr43=(($arraydecay42+1)|0);
      var $35=HEAPU8[($add_ptr43)];
      var $conv44=(($35)&255);
      var $add45=(($shl41+$conv44)|0);
      var $conv46=(($add45) & 65535);
      var $36=$png_ptr_addr;
      var $trans_color47=(($36+400)|0);
      var $red=(($trans_color47+2)|0);
      HEAP16[(($red)>>1)]=$conv46;
      var $arraydecay48=(($buf31)|0);
      var $add_ptr49=(($arraydecay48+2)|0);
      var $37=HEAPU8[($add_ptr49)];
      var $conv50=(($37)&255);
      var $shl51=$conv50 << 8;
      var $arraydecay52=(($buf31)|0);
      var $add_ptr53=(($arraydecay52+2)|0);
      var $add_ptr54=(($add_ptr53+1)|0);
      var $38=HEAPU8[($add_ptr54)];
      var $conv55=(($38)&255);
      var $add56=(($shl51+$conv55)|0);
      var $conv57=(($add56) & 65535);
      var $39=$png_ptr_addr;
      var $trans_color58=(($39+400)|0);
      var $green=(($trans_color58+4)|0);
      HEAP16[(($green)>>1)]=$conv57;
      var $arraydecay59=(($buf31)|0);
      var $add_ptr60=(($arraydecay59+4)|0);
      var $40=HEAPU8[($add_ptr60)];
      var $conv61=(($40)&255);
      var $shl62=$conv61 << 8;
      var $arraydecay63=(($buf31)|0);
      var $add_ptr64=(($arraydecay63+4)|0);
      var $add_ptr65=(($add_ptr64+1)|0);
      var $41=HEAPU8[($add_ptr65)];
      var $conv66=(($41)&255);
      var $add67=(($shl62+$conv66)|0);
      var $conv68=(($add67) & 65535);
      var $42=$png_ptr_addr;
      var $trans_color69=(($42+400)|0);
      var $blue=(($trans_color69+6)|0);
      HEAP16[(($blue)>>1)]=$conv68;
      __label__ = 29; break;
    case 18: 
      var $43=$png_ptr_addr;
      var $color_type71=(($43+291)|0);
      var $44=HEAPU8[($color_type71)];
      var $conv72=(($44)&255);
      var $cmp73=(($conv72)|0)==3;
      if ($cmp73) { __label__ = 19; break; } else { __label__ = 27; break; }
    case 19: 
      var $45=$png_ptr_addr;
      var $mode76=(($45+84)|0);
      var $46=HEAP32[(($mode76)>>2)];
      var $and77=$46 & 2;
      var $tobool78=(($and77)|0)!=0;
      if ($tobool78) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $47=$png_ptr_addr;
      _png_warning($47, ((STRING_TABLE.__str67816)|0));
      __label__ = 21; break;
    case 21: 
      var $48=$length_addr;
      var $49=$png_ptr_addr;
      var $num_palette=(($49+276)|0);
      var $50=HEAPU16[(($num_palette)>>1)];
      var $conv81=(($50)&65535);
      var $cmp82=(($48)>>>0) > (($conv81)>>>0);
      if ($cmp82) { __label__ = 23; break; } else { __label__ = 22; break; }
    case 22: 
      var $51=$length_addr;
      var $cmp84=(($51)>>>0) > 256;
      if ($cmp84) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $52=$png_ptr_addr;
      _png_warning($52, ((STRING_TABLE.__str66815)|0));
      var $53=$png_ptr_addr;
      var $54=$length_addr;
      var $call87=_png_crc_finish($53, $54);
      __label__ = 33; break;
    case 24: 
      var $55=$length_addr;
      var $cmp89=(($55)|0)==0;
      if ($cmp89) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $56=$png_ptr_addr;
      _png_warning($56, ((STRING_TABLE.__str68817)|0));
      var $57=$png_ptr_addr;
      var $58=$length_addr;
      var $call92=_png_crc_finish($57, $58);
      __label__ = 33; break;
    case 26: 
      var $59=$png_ptr_addr;
      var $arraydecay94=(($readbuf)|0);
      var $60=$length_addr;
      _png_crc_read($59, $arraydecay94, $60);
      var $61=$length_addr;
      var $conv95=(($61) & 65535);
      var $62=$png_ptr_addr;
      var $num_trans96=(($62+284)|0);
      HEAP16[(($num_trans96)>>1)]=$conv95;
      __label__ = 28; break;
    case 27: 
      var $63=$png_ptr_addr;
      _png_warning($63, ((STRING_TABLE.__str69818)|0));
      var $64=$png_ptr_addr;
      var $65=$length_addr;
      var $call98=_png_crc_finish($64, $65);
      __label__ = 33; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $66=$png_ptr_addr;
      var $call102=_png_crc_finish($66, 0);
      var $tobool103=(($call102)|0)!=0;
      if ($tobool103) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $67=$png_ptr_addr;
      var $num_trans105=(($67+284)|0);
      HEAP16[(($num_trans105)>>1)]=0;
      __label__ = 33; break;
    case 32: 
      var $68=$png_ptr_addr;
      var $69=$info_ptr_addr;
      var $arraydecay107=(($readbuf)|0);
      var $70=$png_ptr_addr;
      var $num_trans108=(($70+284)|0);
      var $71=HEAPU16[(($num_trans108)>>1)];
      var $conv109=(($71)&65535);
      var $72=$png_ptr_addr;
      var $trans_color110=(($72+400)|0);
      _png_set_tRNS($68, $69, $arraydecay107, $conv109, $trans_color110);
      __label__ = 33; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_tRNS["X"]=1;

function _png_handle_bKGD($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $truelen;
      var $buf=__stackBase__;
      var $background=__stackBase__+8;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str70819)|0));
      __label__ = 14; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str71820)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 37; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $color_type=(($8+291)|0);
      var $9=HEAPU8[($color_type)];
      var $conv=(($9)&255);
      var $cmp=(($conv)|0)==3;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $10=$png_ptr_addr;
      var $mode7=(($10+84)|0);
      var $11=HEAP32[(($mode7)>>2)];
      var $and8=$11 & 2;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $12=$png_ptr_addr;
      _png_warning($12, ((STRING_TABLE.__str72821)|0));
      var $13=$png_ptr_addr;
      var $14=$length_addr;
      var $call11=_png_crc_finish($13, $14);
      __label__ = 37; break;
    case 8: 
      var $15=$info_ptr_addr;
      var $cmp13=(($15)|0)!=0;
      if ($cmp13) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $16=$info_ptr_addr;
      var $valid=(($16+8)|0);
      var $17=HEAP32[(($valid)>>2)];
      var $and16=$17 & 32;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $18=$png_ptr_addr;
      _png_warning($18, ((STRING_TABLE.__str73822)|0));
      var $19=$png_ptr_addr;
      var $20=$length_addr;
      var $call19=_png_crc_finish($19, $20);
      __label__ = 37; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $21=$png_ptr_addr;
      var $color_type23=(($21+291)|0);
      var $22=HEAPU8[($color_type23)];
      var $conv24=(($22)&255);
      var $cmp25=(($conv24)|0)==3;
      if ($cmp25) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $truelen=1;
      __label__ = 20; break;
    case 16: 
      var $23=$png_ptr_addr;
      var $color_type29=(($23+291)|0);
      var $24=HEAPU8[($color_type29)];
      var $conv30=(($24)&255);
      var $and31=$conv30 & 2;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      $truelen=6;
      __label__ = 19; break;
    case 18: 
      $truelen=2;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $25=$length_addr;
      var $26=$truelen;
      var $cmp37=(($25)|0)!=(($26)|0);
      if ($cmp37) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $27=$png_ptr_addr;
      _png_warning($27, ((STRING_TABLE.__str74823)|0));
      var $28=$png_ptr_addr;
      var $29=$length_addr;
      var $call40=_png_crc_finish($28, $29);
      __label__ = 37; break;
    case 22: 
      var $30=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      var $31=$truelen;
      _png_crc_read($30, $arraydecay, $31);
      var $32=$png_ptr_addr;
      var $call42=_png_crc_finish($32, 0);
      var $tobool43=(($call42)|0)!=0;
      if ($tobool43) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 37; break;
    case 24: 
      var $33=$png_ptr_addr;
      var $color_type46=(($33+291)|0);
      var $34=HEAPU8[($color_type46)];
      var $conv47=(($34)&255);
      var $cmp48=(($conv47)|0)==3;
      if ($cmp48) { __label__ = 25; break; } else { __label__ = 32; break; }
    case 25: 
      var $arrayidx=(($buf)|0);
      var $35=HEAP8[($arrayidx)];
      var $index=(($background)|0);
      HEAP8[($index)]=$35;
      var $36=$info_ptr_addr;
      var $tobool51=(($36)|0)!=0;
      if ($tobool51) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 26: 
      var $37=$info_ptr_addr;
      var $num_palette=(($37+20)|0);
      var $38=HEAPU16[(($num_palette)>>1)];
      var $conv53=(($38)&65535);
      var $tobool54=(($conv53)|0)!=0;
      if ($tobool54) { __label__ = 27; break; } else { __label__ = 30; break; }
    case 27: 
      var $arrayidx56=(($buf)|0);
      var $39=HEAPU8[($arrayidx56)];
      var $conv57=(($39)&255);
      var $40=$info_ptr_addr;
      var $num_palette58=(($40+20)|0);
      var $41=HEAPU16[(($num_palette58)>>1)];
      var $conv59=(($41)&65535);
      var $cmp60=(($conv57)|0) >= (($conv59)|0);
      if ($cmp60) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $42=$png_ptr_addr;
      _png_warning($42, ((STRING_TABLE.__str75824)|0));
      __label__ = 37; break;
    case 29: 
      var $arrayidx64=(($buf)|0);
      var $43=HEAPU8[($arrayidx64)];
      var $idxprom=(($43)&255);
      var $44=$png_ptr_addr;
      var $palette=(($44+272)|0);
      var $45=HEAP32[(($palette)>>2)];
      var $arrayidx65=(($45+$idxprom*3)|0);
      var $red=(($arrayidx65)|0);
      var $46=HEAPU8[($red)];
      var $conv66=(($46)&255);
      var $red67=(($background+2)|0);
      HEAP16[(($red67)>>1)]=$conv66;
      var $arrayidx68=(($buf)|0);
      var $47=HEAPU8[($arrayidx68)];
      var $idxprom69=(($47)&255);
      var $48=$png_ptr_addr;
      var $palette70=(($48+272)|0);
      var $49=HEAP32[(($palette70)>>2)];
      var $arrayidx71=(($49+$idxprom69*3)|0);
      var $green=(($arrayidx71+1)|0);
      var $50=HEAPU8[($green)];
      var $conv72=(($50)&255);
      var $green73=(($background+4)|0);
      HEAP16[(($green73)>>1)]=$conv72;
      var $arrayidx74=(($buf)|0);
      var $51=HEAPU8[($arrayidx74)];
      var $idxprom75=(($51)&255);
      var $52=$png_ptr_addr;
      var $palette76=(($52+272)|0);
      var $53=HEAP32[(($palette76)>>2)];
      var $arrayidx77=(($53+$idxprom75*3)|0);
      var $blue=(($arrayidx77+2)|0);
      var $54=HEAPU8[($blue)];
      var $conv78=(($54)&255);
      var $blue79=(($background+6)|0);
      HEAP16[(($blue79)>>1)]=$conv78;
      __label__ = 31; break;
    case 30: 
      var $blue81=(($background+6)|0);
      HEAP16[(($blue81)>>1)]=0;
      var $green82=(($background+4)|0);
      HEAP16[(($green82)>>1)]=0;
      var $red83=(($background+2)|0);
      HEAP16[(($red83)>>1)]=0;
      __label__ = 31; break;
    case 31: 
      var $gray=(($background+8)|0);
      HEAP16[(($gray)>>1)]=0;
      __label__ = 36; break;
    case 32: 
      var $55=$png_ptr_addr;
      var $color_type86=(($55+291)|0);
      var $56=HEAPU8[($color_type86)];
      var $conv87=(($56)&255);
      var $and88=$conv87 & 2;
      var $tobool89=(($and88)|0)!=0;
      if ($tobool89) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $index91=(($background)|0);
      HEAP8[($index91)]=0;
      var $arraydecay92=(($buf)|0);
      var $57=HEAPU8[($arraydecay92)];
      var $conv93=(($57)&255);
      var $shl=$conv93 << 8;
      var $arraydecay94=(($buf)|0);
      var $add_ptr=(($arraydecay94+1)|0);
      var $58=HEAPU8[($add_ptr)];
      var $conv95=(($58)&255);
      var $add=(($shl+$conv95)|0);
      var $conv96=(($add) & 65535);
      var $gray97=(($background+8)|0);
      HEAP16[(($gray97)>>1)]=$conv96;
      var $blue98=(($background+6)|0);
      HEAP16[(($blue98)>>1)]=$conv96;
      var $green99=(($background+4)|0);
      HEAP16[(($green99)>>1)]=$conv96;
      var $red100=(($background+2)|0);
      HEAP16[(($red100)>>1)]=$conv96;
      __label__ = 35; break;
    case 34: 
      var $index102=(($background)|0);
      HEAP8[($index102)]=0;
      var $arraydecay103=(($buf)|0);
      var $59=HEAPU8[($arraydecay103)];
      var $conv104=(($59)&255);
      var $shl105=$conv104 << 8;
      var $arraydecay106=(($buf)|0);
      var $add_ptr107=(($arraydecay106+1)|0);
      var $60=HEAPU8[($add_ptr107)];
      var $conv108=(($60)&255);
      var $add109=(($shl105+$conv108)|0);
      var $conv110=(($add109) & 65535);
      var $red111=(($background+2)|0);
      HEAP16[(($red111)>>1)]=$conv110;
      var $arraydecay112=(($buf)|0);
      var $add_ptr113=(($arraydecay112+2)|0);
      var $61=HEAPU8[($add_ptr113)];
      var $conv114=(($61)&255);
      var $shl115=$conv114 << 8;
      var $arraydecay116=(($buf)|0);
      var $add_ptr117=(($arraydecay116+2)|0);
      var $add_ptr118=(($add_ptr117+1)|0);
      var $62=HEAPU8[($add_ptr118)];
      var $conv119=(($62)&255);
      var $add120=(($shl115+$conv119)|0);
      var $conv121=(($add120) & 65535);
      var $green122=(($background+4)|0);
      HEAP16[(($green122)>>1)]=$conv121;
      var $arraydecay123=(($buf)|0);
      var $add_ptr124=(($arraydecay123+4)|0);
      var $63=HEAPU8[($add_ptr124)];
      var $conv125=(($63)&255);
      var $shl126=$conv125 << 8;
      var $arraydecay127=(($buf)|0);
      var $add_ptr128=(($arraydecay127+4)|0);
      var $add_ptr129=(($add_ptr128+1)|0);
      var $64=HEAPU8[($add_ptr129)];
      var $conv130=(($64)&255);
      var $add131=(($shl126+$conv130)|0);
      var $conv132=(($add131) & 65535);
      var $blue133=(($background+6)|0);
      HEAP16[(($blue133)>>1)]=$conv132;
      var $gray134=(($background+8)|0);
      HEAP16[(($gray134)>>1)]=0;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $65=$png_ptr_addr;
      var $66=$info_ptr_addr;
      _png_set_bKGD($65, $66, $background);
      __label__ = 37; break;
    case 37: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_bKGD["X"]=1;

function _png_handle_hIST($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 516; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $num;
      var $i;
      var $readbuf=__stackBase__;
      var $buf=__stackBase__+512;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str76825)|0));
      __label__ = 13; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str77826)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 23; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $mode6=(($8+84)|0);
      var $9=HEAP32[(($mode6)>>2)];
      var $and7=$9 & 2;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str78827)|0));
      var $11=$png_ptr_addr;
      var $12=$length_addr;
      var $call10=_png_crc_finish($11, $12);
      __label__ = 23; break;
    case 7: 
      var $13=$info_ptr_addr;
      var $cmp=(($13)|0)!=0;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $14=$info_ptr_addr;
      var $valid=(($14+8)|0);
      var $15=HEAP32[(($valid)>>2)];
      var $and12=$15 & 64;
      var $tobool13=(($and12)|0)!=0;
      if ($tobool13) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $16=$png_ptr_addr;
      _png_warning($16, ((STRING_TABLE.__str79828)|0));
      var $17=$png_ptr_addr;
      var $18=$length_addr;
      var $call15=_png_crc_finish($17, $18);
      __label__ = 23; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $19=$length_addr;
      var $cmp19=(($19)>>>0) > 512;
      if ($cmp19) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $20=$length_addr;
      var $21=$png_ptr_addr;
      var $num_palette=(($21+276)|0);
      var $22=HEAPU16[(($num_palette)>>1)];
      var $conv=(($22)&65535);
      var $mul=((($conv<<1))|0);
      var $cmp20=(($20)|0)!=(($mul)|0);
      if ($cmp20) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $23=$png_ptr_addr;
      _png_warning($23, ((STRING_TABLE.__str80829)|0));
      var $24=$png_ptr_addr;
      var $25=$length_addr;
      var $call23=_png_crc_finish($24, $25);
      __label__ = 23; break;
    case 16: 
      var $26=$length_addr;
      var $div=Math.floor((($26)>>>0)/2);
      $num=$div;
      $i=0;
      __label__ = 17; break;
    case 17: 
      var $27=$i;
      var $28=$num;
      var $cmp25=(($27)>>>0) < (($28)>>>0);
      if ($cmp25) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $29=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($29, $arraydecay, 2);
      var $arraydecay27=(($buf)|0);
      var $30=HEAPU8[($arraydecay27)];
      var $conv28=(($30)&255);
      var $shl=$conv28 << 8;
      var $arraydecay29=(($buf)|0);
      var $add_ptr=(($arraydecay29+1)|0);
      var $31=HEAPU8[($add_ptr)];
      var $conv30=(($31)&255);
      var $add=(($shl+$conv30)|0);
      var $conv31=(($add) & 65535);
      var $32=$i;
      var $arrayidx=(($readbuf+($32<<1))|0);
      HEAP16[(($arrayidx)>>1)]=$conv31;
      __label__ = 19; break;
    case 19: 
      var $33=$i;
      var $inc=(($33+1)|0);
      $i=$inc;
      __label__ = 17; break;
    case 20: 
      var $34=$png_ptr_addr;
      var $call32=_png_crc_finish($34, 0);
      var $tobool33=(($call32)|0)!=0;
      if ($tobool33) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      __label__ = 23; break;
    case 22: 
      var $35=$png_ptr_addr;
      var $36=$info_ptr_addr;
      var $arraydecay36=(($readbuf)|0);
      _png_set_hIST($35, $36, $arraydecay36);
      __label__ = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_hIST["X"]=1;

function _png_handle_pHYs($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $buf=__stackBase__;
      var $res_x;
      var $res_y;
      var $unit_type;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str81830)|0));
      __label__ = 10; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str82831)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 15; break;
    case 5: 
      var $8=$info_ptr_addr;
      var $cmp=(($8)|0)!=0;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $9=$info_ptr_addr;
      var $valid=(($9+8)|0);
      var $10=HEAP32[(($valid)>>2)];
      var $and6=$10 & 128;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$png_ptr_addr;
      _png_warning($11, ((STRING_TABLE.__str83832)|0));
      var $12=$png_ptr_addr;
      var $13=$length_addr;
      var $call9=_png_crc_finish($12, $13);
      __label__ = 15; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $14=$length_addr;
      var $cmp12=(($14)|0)!=9;
      if ($cmp12) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $15=$png_ptr_addr;
      _png_warning($15, ((STRING_TABLE.__str84833)|0));
      var $16=$png_ptr_addr;
      var $17=$length_addr;
      var $call14=_png_crc_finish($16, $17);
      __label__ = 15; break;
    case 12: 
      var $18=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($18, $arraydecay, 9);
      var $19=$png_ptr_addr;
      var $call16=_png_crc_finish($19, 0);
      var $tobool17=(($call16)|0)!=0;
      if ($tobool17) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 15; break;
    case 14: 
      var $arraydecay20=(($buf)|0);
      var $20=HEAPU8[($arraydecay20)];
      var $conv=(($20)&255);
      var $shl=$conv << 24;
      var $arraydecay21=(($buf)|0);
      var $add_ptr=(($arraydecay21+1)|0);
      var $21=HEAPU8[($add_ptr)];
      var $conv22=(($21)&255);
      var $shl23=$conv22 << 16;
      var $add=(($shl+$shl23)|0);
      var $arraydecay24=(($buf)|0);
      var $add_ptr25=(($arraydecay24+2)|0);
      var $22=HEAPU8[($add_ptr25)];
      var $conv26=(($22)&255);
      var $shl27=$conv26 << 8;
      var $add28=(($add+$shl27)|0);
      var $arraydecay29=(($buf)|0);
      var $add_ptr30=(($arraydecay29+3)|0);
      var $23=HEAPU8[($add_ptr30)];
      var $conv31=(($23)&255);
      var $add32=(($add28+$conv31)|0);
      $res_x=$add32;
      var $arraydecay33=(($buf)|0);
      var $add_ptr34=(($arraydecay33+4)|0);
      var $24=HEAPU8[($add_ptr34)];
      var $conv35=(($24)&255);
      var $shl36=$conv35 << 24;
      var $arraydecay37=(($buf)|0);
      var $add_ptr38=(($arraydecay37+4)|0);
      var $add_ptr39=(($add_ptr38+1)|0);
      var $25=HEAPU8[($add_ptr39)];
      var $conv40=(($25)&255);
      var $shl41=$conv40 << 16;
      var $add42=(($shl36+$shl41)|0);
      var $arraydecay43=(($buf)|0);
      var $add_ptr44=(($arraydecay43+4)|0);
      var $add_ptr45=(($add_ptr44+2)|0);
      var $26=HEAPU8[($add_ptr45)];
      var $conv46=(($26)&255);
      var $shl47=$conv46 << 8;
      var $add48=(($add42+$shl47)|0);
      var $arraydecay49=(($buf)|0);
      var $add_ptr50=(($arraydecay49+4)|0);
      var $add_ptr51=(($add_ptr50+3)|0);
      var $27=HEAPU8[($add_ptr51)];
      var $conv52=(($27)&255);
      var $add53=(($add48+$conv52)|0);
      $res_y=$add53;
      var $arrayidx=(($buf+8)|0);
      var $28=HEAPU8[($arrayidx)];
      var $conv54=(($28)&255);
      $unit_type=$conv54;
      var $29=$png_ptr_addr;
      var $30=$info_ptr_addr;
      var $31=$res_x;
      var $32=$res_y;
      var $33=$unit_type;
      _png_set_pHYs($29, $30, $31, $32, $33);
      __label__ = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_pHYs["X"]=1;

function _png_handle_oFFs($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $buf=__stackBase__;
      var $offset_x;
      var $offset_y;
      var $unit_type;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str85834)|0));
      __label__ = 10; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str86835)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 21; break;
    case 5: 
      var $8=$info_ptr_addr;
      var $cmp=(($8)|0)!=0;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $9=$info_ptr_addr;
      var $valid=(($9+8)|0);
      var $10=HEAP32[(($valid)>>2)];
      var $and6=$10 & 256;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$png_ptr_addr;
      _png_warning($11, ((STRING_TABLE.__str87836)|0));
      var $12=$png_ptr_addr;
      var $13=$length_addr;
      var $call9=_png_crc_finish($12, $13);
      __label__ = 21; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $14=$length_addr;
      var $cmp12=(($14)|0)!=9;
      if ($cmp12) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $15=$png_ptr_addr;
      _png_warning($15, ((STRING_TABLE.__str88837)|0));
      var $16=$png_ptr_addr;
      var $17=$length_addr;
      var $call14=_png_crc_finish($16, $17);
      __label__ = 21; break;
    case 12: 
      var $18=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($18, $arraydecay, 9);
      var $19=$png_ptr_addr;
      var $call16=_png_crc_finish($19, 0);
      var $tobool17=(($call16)|0)!=0;
      if ($tobool17) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 21; break;
    case 14: 
      var $arraydecay20=(($buf)|0);
      var $20=HEAPU8[($arraydecay20)];
      var $conv=(($20)&255);
      var $and21=$conv & 128;
      var $tobool22=(($and21)|0)!=0;
      if ($tobool22) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $arraydecay23=(($buf)|0);
      var $21=HEAPU8[($arraydecay23)];
      var $conv24=(($21)&255);
      var $shl=$conv24 << 24;
      var $arraydecay25=(($buf)|0);
      var $add_ptr=(($arraydecay25+1)|0);
      var $22=HEAPU8[($add_ptr)];
      var $conv26=(($22)&255);
      var $shl27=$conv26 << 16;
      var $add=(($shl+$shl27)|0);
      var $arraydecay28=(($buf)|0);
      var $add_ptr29=(($arraydecay28+2)|0);
      var $23=HEAPU8[($add_ptr29)];
      var $conv30=(($23)&255);
      var $shl31=$conv30 << 8;
      var $add32=(($add+$shl31)|0);
      var $arraydecay33=(($buf)|0);
      var $add_ptr34=(($arraydecay33+3)|0);
      var $24=HEAPU8[($add_ptr34)];
      var $conv35=(($24)&255);
      var $add36=(($add32+$conv35)|0);
      var $xor=$add36 ^ -1;
      var $add37=(($xor+1)|0);
      var $sub=(((-$add37))|0);
      var $cond = $sub;__label__ = 17; break;
    case 16: 
      var $arraydecay38=(($buf)|0);
      var $25=HEAPU8[($arraydecay38)];
      var $conv39=(($25)&255);
      var $shl40=$conv39 << 24;
      var $arraydecay41=(($buf)|0);
      var $add_ptr42=(($arraydecay41+1)|0);
      var $26=HEAPU8[($add_ptr42)];
      var $conv43=(($26)&255);
      var $shl44=$conv43 << 16;
      var $add45=(($shl40+$shl44)|0);
      var $arraydecay46=(($buf)|0);
      var $add_ptr47=(($arraydecay46+2)|0);
      var $27=HEAPU8[($add_ptr47)];
      var $conv48=(($27)&255);
      var $shl49=$conv48 << 8;
      var $add50=(($add45+$shl49)|0);
      var $arraydecay51=(($buf)|0);
      var $add_ptr52=(($arraydecay51+3)|0);
      var $28=HEAPU8[($add_ptr52)];
      var $conv53=(($28)&255);
      var $add54=(($add50+$conv53)|0);
      var $cond = $add54;__label__ = 17; break;
    case 17: 
      var $cond;
      $offset_x=$cond;
      var $arraydecay55=(($buf)|0);
      var $add_ptr56=(($arraydecay55+4)|0);
      var $29=HEAPU8[($add_ptr56)];
      var $conv57=(($29)&255);
      var $and58=$conv57 & 128;
      var $tobool59=(($and58)|0)!=0;
      if ($tobool59) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $arraydecay61=(($buf)|0);
      var $add_ptr62=(($arraydecay61+4)|0);
      var $30=HEAPU8[($add_ptr62)];
      var $conv63=(($30)&255);
      var $shl64=$conv63 << 24;
      var $arraydecay65=(($buf)|0);
      var $add_ptr66=(($arraydecay65+4)|0);
      var $add_ptr67=(($add_ptr66+1)|0);
      var $31=HEAPU8[($add_ptr67)];
      var $conv68=(($31)&255);
      var $shl69=$conv68 << 16;
      var $add70=(($shl64+$shl69)|0);
      var $arraydecay71=(($buf)|0);
      var $add_ptr72=(($arraydecay71+4)|0);
      var $add_ptr73=(($add_ptr72+2)|0);
      var $32=HEAPU8[($add_ptr73)];
      var $conv74=(($32)&255);
      var $shl75=$conv74 << 8;
      var $add76=(($add70+$shl75)|0);
      var $arraydecay77=(($buf)|0);
      var $add_ptr78=(($arraydecay77+4)|0);
      var $add_ptr79=(($add_ptr78+3)|0);
      var $33=HEAPU8[($add_ptr79)];
      var $conv80=(($33)&255);
      var $add81=(($add76+$conv80)|0);
      var $xor82=$add81 ^ -1;
      var $add83=(($xor82+1)|0);
      var $sub84=(((-$add83))|0);
      var $cond108 = $sub84;__label__ = 20; break;
    case 19: 
      var $arraydecay86=(($buf)|0);
      var $add_ptr87=(($arraydecay86+4)|0);
      var $34=HEAPU8[($add_ptr87)];
      var $conv88=(($34)&255);
      var $shl89=$conv88 << 24;
      var $arraydecay90=(($buf)|0);
      var $add_ptr91=(($arraydecay90+4)|0);
      var $add_ptr92=(($add_ptr91+1)|0);
      var $35=HEAPU8[($add_ptr92)];
      var $conv93=(($35)&255);
      var $shl94=$conv93 << 16;
      var $add95=(($shl89+$shl94)|0);
      var $arraydecay96=(($buf)|0);
      var $add_ptr97=(($arraydecay96+4)|0);
      var $add_ptr98=(($add_ptr97+2)|0);
      var $36=HEAPU8[($add_ptr98)];
      var $conv99=(($36)&255);
      var $shl100=$conv99 << 8;
      var $add101=(($add95+$shl100)|0);
      var $arraydecay102=(($buf)|0);
      var $add_ptr103=(($arraydecay102+4)|0);
      var $add_ptr104=(($add_ptr103+3)|0);
      var $37=HEAPU8[($add_ptr104)];
      var $conv105=(($37)&255);
      var $add106=(($add101+$conv105)|0);
      var $cond108 = $add106;__label__ = 20; break;
    case 20: 
      var $cond108;
      $offset_y=$cond108;
      var $arrayidx=(($buf+8)|0);
      var $38=HEAPU8[($arrayidx)];
      var $conv109=(($38)&255);
      $unit_type=$conv109;
      var $39=$png_ptr_addr;
      var $40=$info_ptr_addr;
      var $41=$offset_x;
      var $42=$offset_y;
      var $43=$unit_type;
      _png_set_oFFs($39, $40, $41, $42, $43);
      __label__ = 21; break;
    case 21: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_oFFs["X"]=1;

function _png_handle_pCAL($png_ptr, $info_ptr, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $X0;
      var $X1;
      var $type;
      var $nparams;
      var $buf;
      var $units;
      var $endptr;
      var $params;
      var $slength;
      var $i;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str89838)|0));
      __label__ = 10; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str90839)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 57; break;
    case 5: 
      var $8=$info_ptr_addr;
      var $cmp=(($8)|0)!=0;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $9=$info_ptr_addr;
      var $valid=(($9+8)|0);
      var $10=HEAP32[(($valid)>>2)];
      var $and6=$10 & 1024;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$png_ptr_addr;
      _png_warning($11, ((STRING_TABLE.__str91840)|0));
      var $12=$png_ptr_addr;
      var $13=$length_addr;
      var $call9=_png_crc_finish($12, $13);
      __label__ = 57; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $14=$png_ptr_addr;
      var $15=$png_ptr_addr;
      var $chunkdata=(($15+656)|0);
      var $16=HEAP32[(($chunkdata)>>2)];
      _png_free($14, $16);
      var $17=$png_ptr_addr;
      var $18=$length_addr;
      var $add=(($18+1)|0);
      var $call12=_png_malloc_warn($17, $add);
      var $19=$png_ptr_addr;
      var $chunkdata13=(($19+656)|0);
      HEAP32[(($chunkdata13)>>2)]=$call12;
      var $20=$png_ptr_addr;
      var $chunkdata14=(($20+656)|0);
      var $21=HEAP32[(($chunkdata14)>>2)];
      var $cmp15=(($21)|0)==0;
      if ($cmp15) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $22=$png_ptr_addr;
      _png_warning($22, ((STRING_TABLE.__str92841)|0));
      __label__ = 57; break;
    case 12: 
      var $23=$length_addr;
      $slength=$23;
      var $24=$png_ptr_addr;
      var $25=$png_ptr_addr;
      var $chunkdata18=(($25+656)|0);
      var $26=HEAP32[(($chunkdata18)>>2)];
      var $27=$slength;
      _png_crc_read($24, $26, $27);
      var $28=$png_ptr_addr;
      var $call19=_png_crc_finish($28, 0);
      var $tobool20=(($call19)|0)!=0;
      if ($tobool20) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $29=$png_ptr_addr;
      var $30=$png_ptr_addr;
      var $chunkdata22=(($30+656)|0);
      var $31=HEAP32[(($chunkdata22)>>2)];
      _png_free($29, $31);
      var $32=$png_ptr_addr;
      var $chunkdata23=(($32+656)|0);
      HEAP32[(($chunkdata23)>>2)]=0;
      __label__ = 57; break;
    case 14: 
      var $33=$slength;
      var $34=$png_ptr_addr;
      var $chunkdata25=(($34+656)|0);
      var $35=HEAP32[(($chunkdata25)>>2)];
      var $arrayidx=(($35+$33)|0);
      HEAP8[($arrayidx)]=0;
      var $36=$png_ptr_addr;
      var $chunkdata26=(($36+656)|0);
      var $37=HEAP32[(($chunkdata26)>>2)];
      $buf=$37;
      __label__ = 15; break;
    case 15: 
      var $38=$buf;
      var $39=HEAP8[($38)];
      var $tobool27=(($39 << 24) >> 24)!=0;
      if ($tobool27) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $40=$buf;
      var $incdec_ptr=(($40+1)|0);
      $buf=$incdec_ptr;
      __label__ = 15; break;
    case 18: 
      var $41=$png_ptr_addr;
      var $chunkdata28=(($41+656)|0);
      var $42=HEAP32[(($chunkdata28)>>2)];
      var $43=$slength;
      var $add_ptr=(($42+$43)|0);
      $endptr=$add_ptr;
      var $44=$endptr;
      var $45=$buf;
      var $add_ptr29=(($45+12)|0);
      var $cmp30=(($44)>>>0) <= (($add_ptr29)>>>0);
      if ($cmp30) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $46=$png_ptr_addr;
      _png_warning($46, ((STRING_TABLE.__str93842)|0));
      var $47=$png_ptr_addr;
      var $48=$png_ptr_addr;
      var $chunkdata32=(($48+656)|0);
      var $49=HEAP32[(($chunkdata32)>>2)];
      _png_free($47, $49);
      var $50=$png_ptr_addr;
      var $chunkdata33=(($50+656)|0);
      HEAP32[(($chunkdata33)>>2)]=0;
      __label__ = 57; break;
    case 20: 
      var $51=$buf;
      var $add_ptr35=(($51+1)|0);
      var $52=HEAPU8[($add_ptr35)];
      var $conv=(($52)&255);
      var $and36=$conv & 128;
      var $tobool37=(($and36)|0)!=0;
      if ($tobool37) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $53=$buf;
      var $add_ptr38=(($53+1)|0);
      var $54=HEAPU8[($add_ptr38)];
      var $conv39=(($54)&255);
      var $shl=$conv39 << 24;
      var $55=$buf;
      var $add_ptr40=(($55+1)|0);
      var $add_ptr41=(($add_ptr40+1)|0);
      var $56=HEAPU8[($add_ptr41)];
      var $conv42=(($56)&255);
      var $shl43=$conv42 << 16;
      var $add44=(($shl+$shl43)|0);
      var $57=$buf;
      var $add_ptr45=(($57+1)|0);
      var $add_ptr46=(($add_ptr45+2)|0);
      var $58=HEAPU8[($add_ptr46)];
      var $conv47=(($58)&255);
      var $shl48=$conv47 << 8;
      var $add49=(($add44+$shl48)|0);
      var $59=$buf;
      var $add_ptr50=(($59+1)|0);
      var $add_ptr51=(($add_ptr50+3)|0);
      var $60=HEAPU8[($add_ptr51)];
      var $conv52=(($60)&255);
      var $add53=(($add49+$conv52)|0);
      var $xor=$add53 ^ -1;
      var $add54=(($xor+1)|0);
      var $sub=(((-$add54))|0);
      var $cond = $sub;__label__ = 23; break;
    case 22: 
      var $61=$buf;
      var $add_ptr55=(($61+1)|0);
      var $62=HEAPU8[($add_ptr55)];
      var $conv56=(($62)&255);
      var $shl57=$conv56 << 24;
      var $63=$buf;
      var $add_ptr58=(($63+1)|0);
      var $add_ptr59=(($add_ptr58+1)|0);
      var $64=HEAPU8[($add_ptr59)];
      var $conv60=(($64)&255);
      var $shl61=$conv60 << 16;
      var $add62=(($shl57+$shl61)|0);
      var $65=$buf;
      var $add_ptr63=(($65+1)|0);
      var $add_ptr64=(($add_ptr63+2)|0);
      var $66=HEAPU8[($add_ptr64)];
      var $conv65=(($66)&255);
      var $shl66=$conv65 << 8;
      var $add67=(($add62+$shl66)|0);
      var $67=$buf;
      var $add_ptr68=(($67+1)|0);
      var $add_ptr69=(($add_ptr68+3)|0);
      var $68=HEAPU8[($add_ptr69)];
      var $conv70=(($68)&255);
      var $add71=(($add67+$conv70)|0);
      var $cond = $add71;__label__ = 23; break;
    case 23: 
      var $cond;
      $X0=$cond;
      var $69=$buf;
      var $add_ptr72=(($69+5)|0);
      var $70=HEAPU8[($add_ptr72)];
      var $conv73=(($70)&255);
      var $and74=$conv73 & 128;
      var $tobool75=(($and74)|0)!=0;
      if ($tobool75) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $71=$buf;
      var $add_ptr77=(($71+5)|0);
      var $72=HEAPU8[($add_ptr77)];
      var $conv78=(($72)&255);
      var $shl79=$conv78 << 24;
      var $73=$buf;
      var $add_ptr80=(($73+5)|0);
      var $add_ptr81=(($add_ptr80+1)|0);
      var $74=HEAPU8[($add_ptr81)];
      var $conv82=(($74)&255);
      var $shl83=$conv82 << 16;
      var $add84=(($shl79+$shl83)|0);
      var $75=$buf;
      var $add_ptr85=(($75+5)|0);
      var $add_ptr86=(($add_ptr85+2)|0);
      var $76=HEAPU8[($add_ptr86)];
      var $conv87=(($76)&255);
      var $shl88=$conv87 << 8;
      var $add89=(($add84+$shl88)|0);
      var $77=$buf;
      var $add_ptr90=(($77+5)|0);
      var $add_ptr91=(($add_ptr90+3)|0);
      var $78=HEAPU8[($add_ptr91)];
      var $conv92=(($78)&255);
      var $add93=(($add89+$conv92)|0);
      var $xor94=$add93 ^ -1;
      var $add95=(($xor94+1)|0);
      var $sub96=(((-$add95))|0);
      var $cond116 = $sub96;__label__ = 26; break;
    case 25: 
      var $79=$buf;
      var $add_ptr98=(($79+5)|0);
      var $80=HEAPU8[($add_ptr98)];
      var $conv99=(($80)&255);
      var $shl100=$conv99 << 24;
      var $81=$buf;
      var $add_ptr101=(($81+5)|0);
      var $add_ptr102=(($add_ptr101+1)|0);
      var $82=HEAPU8[($add_ptr102)];
      var $conv103=(($82)&255);
      var $shl104=$conv103 << 16;
      var $add105=(($shl100+$shl104)|0);
      var $83=$buf;
      var $add_ptr106=(($83+5)|0);
      var $add_ptr107=(($add_ptr106+2)|0);
      var $84=HEAPU8[($add_ptr107)];
      var $conv108=(($84)&255);
      var $shl109=$conv108 << 8;
      var $add110=(($add105+$shl109)|0);
      var $85=$buf;
      var $add_ptr111=(($85+5)|0);
      var $add_ptr112=(($add_ptr111+3)|0);
      var $86=HEAPU8[($add_ptr112)];
      var $conv113=(($86)&255);
      var $add114=(($add110+$conv113)|0);
      var $cond116 = $add114;__label__ = 26; break;
    case 26: 
      var $cond116;
      $X1=$cond116;
      var $87=$buf;
      var $arrayidx117=(($87+9)|0);
      var $88=HEAP8[($arrayidx117)];
      $type=$88;
      var $89=$buf;
      var $arrayidx118=(($89+10)|0);
      var $90=HEAP8[($arrayidx118)];
      $nparams=$90;
      var $91=$buf;
      var $add_ptr119=(($91+11)|0);
      $units=$add_ptr119;
      var $92=$type;
      var $conv120=(($92)&255);
      var $cmp121=(($conv120)|0)==0;
      if ($cmp121) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $93=$nparams;
      var $conv124=(($93)&255);
      var $cmp125=(($conv124)|0)!=2;
      if ($cmp125) { __label__ = 34; break; } else { __label__ = 28; break; }
    case 28: 
      var $94=$type;
      var $conv127=(($94)&255);
      var $cmp128=(($conv127)|0)==1;
      if ($cmp128) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $95=$nparams;
      var $conv131=(($95)&255);
      var $cmp132=(($conv131)|0)!=3;
      if ($cmp132) { __label__ = 34; break; } else { __label__ = 30; break; }
    case 30: 
      var $96=$type;
      var $conv135=(($96)&255);
      var $cmp136=(($conv135)|0)==2;
      if ($cmp136) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $97=$nparams;
      var $conv139=(($97)&255);
      var $cmp140=(($conv139)|0)!=3;
      if ($cmp140) { __label__ = 34; break; } else { __label__ = 32; break; }
    case 32: 
      var $98=$type;
      var $conv143=(($98)&255);
      var $cmp144=(($conv143)|0)==3;
      if ($cmp144) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: 
      var $99=$nparams;
      var $conv147=(($99)&255);
      var $cmp148=(($conv147)|0)!=4;
      if ($cmp148) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $100=$png_ptr_addr;
      _png_warning($100, ((STRING_TABLE.__str94843)|0));
      var $101=$png_ptr_addr;
      var $102=$png_ptr_addr;
      var $chunkdata151=(($102+656)|0);
      var $103=HEAP32[(($chunkdata151)>>2)];
      _png_free($101, $103);
      var $104=$png_ptr_addr;
      var $chunkdata152=(($104+656)|0);
      HEAP32[(($chunkdata152)>>2)]=0;
      __label__ = 57; break;
    case 35: 
      var $105=$type;
      var $conv154=(($105)&255);
      var $cmp155=(($conv154)|0) >= 4;
      if ($cmp155) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $106=$png_ptr_addr;
      _png_warning($106, ((STRING_TABLE.__str95844)|0));
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      var $107=$units;
      $buf=$107;
      __label__ = 39; break;
    case 39: 
      var $108=$buf;
      var $109=HEAP8[($108)];
      var $tobool161=(($109 << 24) >> 24)!=0;
      if ($tobool161) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $110=$buf;
      var $incdec_ptr164=(($110+1)|0);
      $buf=$incdec_ptr164;
      __label__ = 39; break;
    case 42: 
      var $111=$png_ptr_addr;
      var $112=$nparams;
      var $conv166=(($112)&255);
      var $mul=((($conv166<<2))|0);
      var $call167=_png_malloc_warn($111, $mul);
      var $113=$call167;
      $params=$113;
      var $114=$params;
      var $cmp168=(($114)|0)==0;
      if ($cmp168) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $115=$png_ptr_addr;
      var $116=$png_ptr_addr;
      var $chunkdata171=(($116+656)|0);
      var $117=HEAP32[(($chunkdata171)>>2)];
      _png_free($115, $117);
      var $118=$png_ptr_addr;
      var $chunkdata172=(($118+656)|0);
      HEAP32[(($chunkdata172)>>2)]=0;
      var $119=$png_ptr_addr;
      _png_warning($119, ((STRING_TABLE.__str96845)|0));
      __label__ = 57; break;
    case 44: 
      $i=0;
      __label__ = 45; break;
    case 45: 
      var $120=$i;
      var $121=$nparams;
      var $conv175=(($121)&255);
      var $cmp176=(($120)|0) < (($conv175)|0);
      if ($cmp176) { __label__ = 46; break; } else { __label__ = 56; break; }
    case 46: 
      var $122=$buf;
      var $incdec_ptr179=(($122+1)|0);
      $buf=$incdec_ptr179;
      var $123=$buf;
      var $124=$i;
      var $125=$params;
      var $arrayidx180=(($125+($124<<2))|0);
      HEAP32[(($arrayidx180)>>2)]=$123;
      __label__ = 47; break;
    case 47: 
      var $126=$buf;
      var $127=$endptr;
      var $cmp182=(($126)>>>0) <= (($127)>>>0);
      if ($cmp182) { __label__ = 48; break; } else { var $130 = 0;__label__ = 49; break; }
    case 48: 
      var $128=$buf;
      var $129=HEAP8[($128)];
      var $conv184=(($129 << 24) >> 24);
      var $cmp185=(($conv184)|0)!=0;
      var $130 = $cmp185;__label__ = 49; break;
    case 49: 
      var $130;
      if ($130) { __label__ = 50; break; } else { __label__ = 52; break; }
    case 50: 
      __label__ = 51; break;
    case 51: 
      var $131=$buf;
      var $incdec_ptr189=(($131+1)|0);
      $buf=$incdec_ptr189;
      __label__ = 47; break;
    case 52: 
      var $132=$buf;
      var $133=$endptr;
      var $cmp191=(($132)>>>0) > (($133)>>>0);
      if ($cmp191) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $134=$png_ptr_addr;
      _png_warning($134, ((STRING_TABLE.__str93842)|0));
      var $135=$png_ptr_addr;
      var $136=$png_ptr_addr;
      var $chunkdata194=(($136+656)|0);
      var $137=HEAP32[(($chunkdata194)>>2)];
      _png_free($135, $137);
      var $138=$png_ptr_addr;
      var $chunkdata195=(($138+656)|0);
      HEAP32[(($chunkdata195)>>2)]=0;
      var $139=$png_ptr_addr;
      var $140=$params;
      var $141=$140;
      _png_free($139, $141);
      __label__ = 57; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $142=$i;
      var $inc=(($142+1)|0);
      $i=$inc;
      __label__ = 45; break;
    case 56: 
      var $143=$png_ptr_addr;
      var $144=$info_ptr_addr;
      var $145=$png_ptr_addr;
      var $chunkdata199=(($145+656)|0);
      var $146=HEAP32[(($chunkdata199)>>2)];
      var $147=$X0;
      var $148=$X1;
      var $149=$type;
      var $conv200=(($149)&255);
      var $150=$nparams;
      var $conv201=(($150)&255);
      var $151=$units;
      var $152=$params;
      _png_set_pCAL($143, $144, $146, $147, $148, $conv200, $conv201, $151, $152);
      var $153=$png_ptr_addr;
      var $154=$png_ptr_addr;
      var $chunkdata202=(($154+656)|0);
      var $155=HEAP32[(($chunkdata202)>>2)];
      _png_free($153, $155);
      var $156=$png_ptr_addr;
      var $chunkdata203=(($156+656)|0);
      HEAP32[(($chunkdata203)>>2)]=0;
      var $157=$png_ptr_addr;
      var $158=$params;
      var $159=$158;
      _png_free($157, $159);
      __label__ = 57; break;
    case 57: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_pCAL["X"]=1;

function _png_handle_sCAL($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $slength;
      var $i=__stackBase__;
      var $state=__stackBase__+4;
      var $heighti;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str97846)|0));
      __label__ = 13; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $mode1=(($3+84)|0);
      var $4=HEAP32[(($mode1)>>2)];
      var $and2=$4 & 4;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str98847)|0));
      var $6=$png_ptr_addr;
      var $7=$length_addr;
      var $call=_png_crc_finish($6, $7);
      __label__ = 36; break;
    case 5: 
      var $8=$info_ptr_addr;
      var $cmp=(($8)|0)!=0;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $9=$info_ptr_addr;
      var $valid=(($9+8)|0);
      var $10=HEAP32[(($valid)>>2)];
      var $and6=$10 & 16384;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$png_ptr_addr;
      _png_warning($11, ((STRING_TABLE.__str99848)|0));
      var $12=$png_ptr_addr;
      var $13=$length_addr;
      var $call9=_png_crc_finish($12, $13);
      __label__ = 36; break;
    case 8: 
      var $14=$length_addr;
      var $cmp11=(($14)>>>0) < 4;
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$png_ptr_addr;
      _png_warning($15, ((STRING_TABLE.__str100849)|0));
      var $16=$png_ptr_addr;
      var $17=$length_addr;
      var $call13=_png_crc_finish($16, $17);
      __label__ = 36; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $18=$png_ptr_addr;
      var $19=$length_addr;
      var $add=(($19+1)|0);
      var $call17=_png_malloc_warn($18, $add);
      var $20=$png_ptr_addr;
      var $chunkdata=(($20+656)|0);
      HEAP32[(($chunkdata)>>2)]=$call17;
      var $21=$png_ptr_addr;
      var $chunkdata18=(($21+656)|0);
      var $22=HEAP32[(($chunkdata18)>>2)];
      var $cmp19=(($22)|0)==0;
      if ($cmp19) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $23=$png_ptr_addr;
      _png_warning($23, ((STRING_TABLE.__str101850)|0));
      var $24=$png_ptr_addr;
      var $25=$length_addr;
      var $call21=_png_crc_finish($24, $25);
      __label__ = 36; break;
    case 15: 
      var $26=$length_addr;
      $slength=$26;
      var $27=$png_ptr_addr;
      var $28=$png_ptr_addr;
      var $chunkdata23=(($28+656)|0);
      var $29=HEAP32[(($chunkdata23)>>2)];
      var $30=$slength;
      _png_crc_read($27, $29, $30);
      var $31=$slength;
      var $32=$png_ptr_addr;
      var $chunkdata24=(($32+656)|0);
      var $33=HEAP32[(($chunkdata24)>>2)];
      var $arrayidx=(($33+$31)|0);
      HEAP8[($arrayidx)]=0;
      var $34=$png_ptr_addr;
      var $call25=_png_crc_finish($34, 0);
      var $tobool26=(($call25)|0)!=0;
      if ($tobool26) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $35=$png_ptr_addr;
      var $36=$png_ptr_addr;
      var $chunkdata28=(($36+656)|0);
      var $37=HEAP32[(($chunkdata28)>>2)];
      _png_free($35, $37);
      var $38=$png_ptr_addr;
      var $chunkdata29=(($38+656)|0);
      HEAP32[(($chunkdata29)>>2)]=0;
      __label__ = 36; break;
    case 17: 
      var $39=$png_ptr_addr;
      var $chunkdata31=(($39+656)|0);
      var $40=HEAP32[(($chunkdata31)>>2)];
      var $arrayidx32=(($40)|0);
      var $41=HEAP8[($arrayidx32)];
      var $conv=(($41 << 24) >> 24);
      var $cmp33=(($conv)|0)!=1;
      if ($cmp33) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $42=$png_ptr_addr;
      var $chunkdata36=(($42+656)|0);
      var $43=HEAP32[(($chunkdata36)>>2)];
      var $arrayidx37=(($43)|0);
      var $44=HEAP8[($arrayidx37)];
      var $conv38=(($44 << 24) >> 24);
      var $cmp39=(($conv38)|0)!=2;
      if ($cmp39) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $45=$png_ptr_addr;
      _png_warning($45, ((STRING_TABLE.__str102851)|0));
      var $46=$png_ptr_addr;
      var $47=$png_ptr_addr;
      var $chunkdata42=(($47+656)|0);
      var $48=HEAP32[(($chunkdata42)>>2)];
      _png_free($46, $48);
      var $49=$png_ptr_addr;
      var $chunkdata43=(($49+656)|0);
      HEAP32[(($chunkdata43)>>2)]=0;
      __label__ = 36; break;
    case 20: 
      HEAP32[(($i)>>2)]=1;
      HEAP32[(($state)>>2)]=0;
      var $50=$png_ptr_addr;
      var $chunkdata45=(($50+656)|0);
      var $51=HEAP32[(($chunkdata45)>>2)];
      var $52=$slength;
      var $call46=_png_check_fp_number($51, $52, $state, $i);
      var $tobool47=(($call46)|0)!=0;
      if ($tobool47) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $53=HEAPU32[(($i)>>2)];
      var $54=$slength;
      var $cmp48=(($53)>>>0) >= (($54)>>>0);
      if ($cmp48) { __label__ = 23; break; } else { __label__ = 22; break; }
    case 22: 
      var $55=HEAPU32[(($i)>>2)];
      var $inc=(($55+1)|0);
      HEAP32[(($i)>>2)]=$inc;
      var $56=$png_ptr_addr;
      var $chunkdata51=(($56+656)|0);
      var $57=HEAP32[(($chunkdata51)>>2)];
      var $arrayidx52=(($57+$55)|0);
      var $58=HEAP8[($arrayidx52)];
      var $conv53=(($58 << 24) >> 24);
      var $cmp54=(($conv53)|0)!=0;
      if ($cmp54) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $59=$png_ptr_addr;
      _png_warning($59, ((STRING_TABLE.__str103852)|0));
      __label__ = 35; break;
    case 24: 
      var $60=HEAP32[(($state)>>2)];
      var $and58=$60 & 392;
      var $cmp59=(($and58)|0)==264;
      if ($cmp59) { __label__ = 26; break; } else { __label__ = 25; break; }
    case 25: 
      var $61=$png_ptr_addr;
      _png_warning($61, ((STRING_TABLE.__str104853)|0));
      __label__ = 34; break;
    case 26: 
      var $62=HEAP32[(($i)>>2)];
      $heighti=$62;
      HEAP32[(($state)>>2)]=0;
      var $63=$png_ptr_addr;
      var $chunkdata63=(($63+656)|0);
      var $64=HEAP32[(($chunkdata63)>>2)];
      var $65=$slength;
      var $call64=_png_check_fp_number($64, $65, $state, $i);
      var $tobool65=(($call64)|0)!=0;
      if ($tobool65) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $66=HEAP32[(($i)>>2)];
      var $67=$slength;
      var $cmp67=(($66)|0)!=(($67)|0);
      if ($cmp67) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $68=$png_ptr_addr;
      _png_warning($68, ((STRING_TABLE.__str105854)|0));
      __label__ = 33; break;
    case 29: 
      var $69=HEAP32[(($state)>>2)];
      var $and71=$69 & 392;
      var $cmp72=(($and71)|0)==264;
      if ($cmp72) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $70=$png_ptr_addr;
      _png_warning($70, ((STRING_TABLE.__str106855)|0));
      __label__ = 32; break;
    case 31: 
      var $71=$png_ptr_addr;
      var $72=$info_ptr_addr;
      var $73=$png_ptr_addr;
      var $chunkdata76=(($73+656)|0);
      var $74=HEAP32[(($chunkdata76)>>2)];
      var $arrayidx77=(($74)|0);
      var $75=HEAP8[($arrayidx77)];
      var $conv78=(($75 << 24) >> 24);
      var $76=$png_ptr_addr;
      var $chunkdata79=(($76+656)|0);
      var $77=HEAP32[(($chunkdata79)>>2)];
      var $add_ptr=(($77+1)|0);
      var $78=$png_ptr_addr;
      var $chunkdata80=(($78+656)|0);
      var $79=HEAP32[(($chunkdata80)>>2)];
      var $80=$heighti;
      var $add_ptr81=(($79+$80)|0);
      _png_set_sCAL_s($71, $72, $conv78, $add_ptr, $add_ptr81);
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $81=$png_ptr_addr;
      var $82=$png_ptr_addr;
      var $chunkdata86=(($82+656)|0);
      var $83=HEAP32[(($chunkdata86)>>2)];
      _png_free($81, $83);
      var $84=$png_ptr_addr;
      var $chunkdata87=(($84+656)|0);
      HEAP32[(($chunkdata87)>>2)]=0;
      __label__ = 36; break;
    case 36: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_sCAL["X"]=1;

function _png_handle_tIME($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $buf=__stackBase__;
      var $mod_time=__stackBase__+8;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str107856)|0));
      __label__ = 7; break;
    case 3: 
      var $3=$info_ptr_addr;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$info_ptr_addr;
      var $valid=(($4+8)|0);
      var $5=HEAP32[(($valid)>>2)];
      var $and1=$5 & 512;
      var $tobool2=(($and1)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$png_ptr_addr;
      _png_warning($6, ((STRING_TABLE.__str108857)|0));
      var $7=$png_ptr_addr;
      var $8=$length_addr;
      var $call=_png_crc_finish($7, $8);
      __label__ = 14; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $9=$png_ptr_addr;
      var $mode5=(($9+84)|0);
      var $10=HEAP32[(($mode5)>>2)];
      var $and6=$10 & 4;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$png_ptr_addr;
      var $mode9=(($11+84)|0);
      var $12=HEAP32[(($mode9)>>2)];
      var $or=$12 | 8;
      HEAP32[(($mode9)>>2)]=$or;
      __label__ = 9; break;
    case 9: 
      var $13=$length_addr;
      var $cmp11=(($13)|0)!=7;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $14=$png_ptr_addr;
      _png_warning($14, ((STRING_TABLE.__str109858)|0));
      var $15=$png_ptr_addr;
      var $16=$length_addr;
      var $call13=_png_crc_finish($15, $16);
      __label__ = 14; break;
    case 11: 
      var $17=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_crc_read($17, $arraydecay, 7);
      var $18=$png_ptr_addr;
      var $call15=_png_crc_finish($18, 0);
      var $tobool16=(($call15)|0)!=0;
      if ($tobool16) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 14; break;
    case 13: 
      var $arrayidx=(($buf+6)|0);
      var $19=HEAP8[($arrayidx)];
      var $second=(($mod_time+6)|0);
      HEAP8[($second)]=$19;
      var $arrayidx19=(($buf+5)|0);
      var $20=HEAP8[($arrayidx19)];
      var $minute=(($mod_time+5)|0);
      HEAP8[($minute)]=$20;
      var $arrayidx20=(($buf+4)|0);
      var $21=HEAP8[($arrayidx20)];
      var $hour=(($mod_time+4)|0);
      HEAP8[($hour)]=$21;
      var $arrayidx21=(($buf+3)|0);
      var $22=HEAP8[($arrayidx21)];
      var $day=(($mod_time+3)|0);
      HEAP8[($day)]=$22;
      var $arrayidx22=(($buf+2)|0);
      var $23=HEAP8[($arrayidx22)];
      var $month=(($mod_time+2)|0);
      HEAP8[($month)]=$23;
      var $arraydecay23=(($buf)|0);
      var $24=HEAPU8[($arraydecay23)];
      var $conv=(($24)&255);
      var $shl=$conv << 8;
      var $arraydecay24=(($buf)|0);
      var $add_ptr=(($arraydecay24+1)|0);
      var $25=HEAPU8[($add_ptr)];
      var $conv25=(($25)&255);
      var $add=(($shl+$conv25)|0);
      var $conv26=(($add) & 65535);
      var $year=(($mod_time)|0);
      HEAP16[(($year)>>1)]=$conv26;
      var $26=$png_ptr_addr;
      var $27=$info_ptr_addr;
      _png_set_tIME($26, $27, $mod_time);
      __label__ = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_tIME["X"]=1;

function _png_handle_tEXt($png_ptr, $info_ptr, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $text_ptr;
      var $key;
      var $text;
      var $skip;
      var $slength;
      var $ret;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      $skip=0;
      var $0=$png_ptr_addr;
      var $user_chunk_cache_max=(($0+624)|0);
      var $1=HEAP32[(($user_chunk_cache_max)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $user_chunk_cache_max1=(($2+624)|0);
      var $3=HEAP32[(($user_chunk_cache_max1)>>2)];
      var $cmp2=(($3)|0)==1;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$png_ptr_addr;
      var $5=$length_addr;
      var $call=_png_crc_finish($4, $5);
      __label__ = 25; break;
    case 4: 
      var $6=$png_ptr_addr;
      var $user_chunk_cache_max4=(($6+624)|0);
      var $7=HEAP32[(($user_chunk_cache_max4)>>2)];
      var $dec=(($7-1)|0);
      HEAP32[(($user_chunk_cache_max4)>>2)]=$dec;
      var $cmp5=(($dec)|0)==1;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$png_ptr_addr;
      _png_warning($8, ((STRING_TABLE.__str110859)|0));
      var $9=$png_ptr_addr;
      var $10=$length_addr;
      var $call7=_png_crc_finish($9, $10);
      __label__ = 25; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $11=$png_ptr_addr;
      var $mode=(($11+84)|0);
      var $12=HEAP32[(($mode)>>2)];
      var $and=$12 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $13=$png_ptr_addr;
      _png_error($13, ((STRING_TABLE.__str111860)|0));
      __label__ = 9; break;
    case 9: 
      var $14=$png_ptr_addr;
      var $mode12=(($14+84)|0);
      var $15=HEAP32[(($mode12)>>2)];
      var $and13=$15 & 4;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $16=$png_ptr_addr;
      var $mode16=(($16+84)|0);
      var $17=HEAP32[(($mode16)>>2)];
      var $or=$17 | 8;
      HEAP32[(($mode16)>>2)]=$or;
      __label__ = 11; break;
    case 11: 
      var $18=$png_ptr_addr;
      var $19=$png_ptr_addr;
      var $chunkdata=(($19+656)|0);
      var $20=HEAP32[(($chunkdata)>>2)];
      _png_free($18, $20);
      var $21=$png_ptr_addr;
      var $22=$length_addr;
      var $add=(($22+1)|0);
      var $call18=_png_malloc_warn($21, $add);
      var $23=$png_ptr_addr;
      var $chunkdata19=(($23+656)|0);
      HEAP32[(($chunkdata19)>>2)]=$call18;
      var $24=$png_ptr_addr;
      var $chunkdata20=(($24+656)|0);
      var $25=HEAP32[(($chunkdata20)>>2)];
      var $cmp21=(($25)|0)==0;
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $26=$png_ptr_addr;
      _png_warning($26, ((STRING_TABLE.__str112861)|0));
      __label__ = 25; break;
    case 13: 
      var $27=$length_addr;
      $slength=$27;
      var $28=$png_ptr_addr;
      var $29=$png_ptr_addr;
      var $chunkdata24=(($29+656)|0);
      var $30=HEAP32[(($chunkdata24)>>2)];
      var $31=$slength;
      _png_crc_read($28, $30, $31);
      var $32=$png_ptr_addr;
      var $33=$skip;
      var $call25=_png_crc_finish($32, $33);
      var $tobool26=(($call25)|0)!=0;
      if ($tobool26) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $34=$png_ptr_addr;
      var $35=$png_ptr_addr;
      var $chunkdata28=(($35+656)|0);
      var $36=HEAP32[(($chunkdata28)>>2)];
      _png_free($34, $36);
      var $37=$png_ptr_addr;
      var $chunkdata29=(($37+656)|0);
      HEAP32[(($chunkdata29)>>2)]=0;
      __label__ = 25; break;
    case 15: 
      var $38=$png_ptr_addr;
      var $chunkdata31=(($38+656)|0);
      var $39=HEAP32[(($chunkdata31)>>2)];
      $key=$39;
      var $40=$slength;
      var $41=$key;
      var $arrayidx=(($41+$40)|0);
      HEAP8[($arrayidx)]=0;
      var $42=$key;
      $text=$42;
      __label__ = 16; break;
    case 16: 
      var $43=$text;
      var $44=HEAP8[($43)];
      var $tobool32=(($44 << 24) >> 24)!=0;
      if ($tobool32) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $45=$text;
      var $incdec_ptr=(($45+1)|0);
      $text=$incdec_ptr;
      __label__ = 16; break;
    case 19: 
      var $46=$text;
      var $47=$key;
      var $48=$slength;
      var $add_ptr=(($47+$48)|0);
      var $cmp33=(($46)|0)!=(($add_ptr)|0);
      if ($cmp33) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $49=$text;
      var $incdec_ptr35=(($49+1)|0);
      $text=$incdec_ptr35;
      __label__ = 21; break;
    case 21: 
      var $50=$png_ptr_addr;
      var $call37=_png_malloc_warn($50, 28);
      var $51=$call37;
      $text_ptr=$51;
      var $52=$text_ptr;
      var $cmp38=(($52)|0)==0;
      if ($cmp38) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $53=$png_ptr_addr;
      _png_warning($53, ((STRING_TABLE.__str113862)|0));
      var $54=$png_ptr_addr;
      var $55=$png_ptr_addr;
      var $chunkdata40=(($55+656)|0);
      var $56=HEAP32[(($chunkdata40)>>2)];
      _png_free($54, $56);
      var $57=$png_ptr_addr;
      var $chunkdata41=(($57+656)|0);
      HEAP32[(($chunkdata41)>>2)]=0;
      __label__ = 25; break;
    case 23: 
      var $58=$text_ptr;
      var $compression=(($58)|0);
      HEAP32[(($compression)>>2)]=-1;
      var $59=$key;
      var $60=$text_ptr;
      var $key43=(($60+4)|0);
      HEAP32[(($key43)>>2)]=$59;
      var $61=$text_ptr;
      var $lang=(($61+20)|0);
      HEAP32[(($lang)>>2)]=0;
      var $62=$text_ptr;
      var $lang_key=(($62+24)|0);
      HEAP32[(($lang_key)>>2)]=0;
      var $63=$text_ptr;
      var $itxt_length=(($63+16)|0);
      HEAP32[(($itxt_length)>>2)]=0;
      var $64=$text;
      var $65=$text_ptr;
      var $text44=(($65+8)|0);
      HEAP32[(($text44)>>2)]=$64;
      var $66=$text;
      var $call45=_strlen($66);
      var $67=$text_ptr;
      var $text_length=(($67+12)|0);
      HEAP32[(($text_length)>>2)]=$call45;
      var $68=$png_ptr_addr;
      var $69=$info_ptr_addr;
      var $70=$text_ptr;
      var $call46=_png_set_text_2($68, $69, $70, 1);
      $ret=$call46;
      var $71=$png_ptr_addr;
      var $72=$png_ptr_addr;
      var $chunkdata47=(($72+656)|0);
      var $73=HEAP32[(($chunkdata47)>>2)];
      _png_free($71, $73);
      var $74=$png_ptr_addr;
      var $chunkdata48=(($74+656)|0);
      HEAP32[(($chunkdata48)>>2)]=0;
      var $75=$png_ptr_addr;
      var $76=$text_ptr;
      var $77=$76;
      _png_free($75, $77);
      var $78=$ret;
      var $tobool49=(($78)|0)!=0;
      if ($tobool49) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $79=$png_ptr_addr;
      _png_warning($79, ((STRING_TABLE.__str114863)|0));
      __label__ = 25; break;
    case 25: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_tEXt["X"]=1;

function _png_handle_zTXt($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $text_ptr;
      var $text;
      var $comp_type;
      var $ret;
      var $slength;
      var $prefix_len;
      var $data_len=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $user_chunk_cache_max=(($0+624)|0);
      var $1=HEAP32[(($user_chunk_cache_max)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $user_chunk_cache_max1=(($2+624)|0);
      var $3=HEAP32[(($user_chunk_cache_max1)>>2)];
      var $cmp2=(($3)|0)==1;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$png_ptr_addr;
      var $5=$length_addr;
      var $call=_png_crc_finish($4, $5);
      __label__ = 28; break;
    case 4: 
      var $6=$png_ptr_addr;
      var $user_chunk_cache_max4=(($6+624)|0);
      var $7=HEAP32[(($user_chunk_cache_max4)>>2)];
      var $dec=(($7-1)|0);
      HEAP32[(($user_chunk_cache_max4)>>2)]=$dec;
      var $cmp5=(($dec)|0)==1;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$png_ptr_addr;
      _png_warning($8, ((STRING_TABLE.__str115864)|0));
      var $9=$png_ptr_addr;
      var $10=$length_addr;
      var $call7=_png_crc_finish($9, $10);
      __label__ = 28; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $11=$png_ptr_addr;
      var $mode=(($11+84)|0);
      var $12=HEAP32[(($mode)>>2)];
      var $and=$12 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $13=$png_ptr_addr;
      _png_error($13, ((STRING_TABLE.__str116865)|0));
      __label__ = 9; break;
    case 9: 
      var $14=$png_ptr_addr;
      var $mode12=(($14+84)|0);
      var $15=HEAP32[(($mode12)>>2)];
      var $and13=$15 & 4;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $16=$png_ptr_addr;
      var $mode16=(($16+84)|0);
      var $17=HEAP32[(($mode16)>>2)];
      var $or=$17 | 8;
      HEAP32[(($mode16)>>2)]=$or;
      __label__ = 11; break;
    case 11: 
      var $18=$png_ptr_addr;
      var $19=$png_ptr_addr;
      var $chunkdata=(($19+656)|0);
      var $20=HEAP32[(($chunkdata)>>2)];
      _png_free($18, $20);
      var $21=$png_ptr_addr;
      var $22=$length_addr;
      var $add=(($22+1)|0);
      var $call18=_png_malloc_warn($21, $add);
      var $23=$png_ptr_addr;
      var $chunkdata19=(($23+656)|0);
      HEAP32[(($chunkdata19)>>2)]=$call18;
      var $24=$png_ptr_addr;
      var $chunkdata20=(($24+656)|0);
      var $25=HEAP32[(($chunkdata20)>>2)];
      var $cmp21=(($25)|0)==0;
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $26=$png_ptr_addr;
      _png_warning($26, ((STRING_TABLE.__str117866)|0));
      __label__ = 28; break;
    case 13: 
      var $27=$length_addr;
      $slength=$27;
      var $28=$png_ptr_addr;
      var $29=$png_ptr_addr;
      var $chunkdata24=(($29+656)|0);
      var $30=HEAP32[(($chunkdata24)>>2)];
      var $31=$slength;
      _png_crc_read($28, $30, $31);
      var $32=$png_ptr_addr;
      var $call25=_png_crc_finish($32, 0);
      var $tobool26=(($call25)|0)!=0;
      if ($tobool26) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $33=$png_ptr_addr;
      var $34=$png_ptr_addr;
      var $chunkdata28=(($34+656)|0);
      var $35=HEAP32[(($chunkdata28)>>2)];
      _png_free($33, $35);
      var $36=$png_ptr_addr;
      var $chunkdata29=(($36+656)|0);
      HEAP32[(($chunkdata29)>>2)]=0;
      __label__ = 28; break;
    case 15: 
      var $37=$slength;
      var $38=$png_ptr_addr;
      var $chunkdata31=(($38+656)|0);
      var $39=HEAP32[(($chunkdata31)>>2)];
      var $arrayidx=(($39+$37)|0);
      HEAP8[($arrayidx)]=0;
      var $40=$png_ptr_addr;
      var $chunkdata32=(($40+656)|0);
      var $41=HEAP32[(($chunkdata32)>>2)];
      $text=$41;
      __label__ = 16; break;
    case 16: 
      var $42=$text;
      var $43=HEAP8[($42)];
      var $tobool33=(($43 << 24) >> 24)!=0;
      if ($tobool33) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $44=$text;
      var $incdec_ptr=(($44+1)|0);
      $text=$incdec_ptr;
      __label__ = 16; break;
    case 19: 
      var $45=$text;
      var $46=$png_ptr_addr;
      var $chunkdata34=(($46+656)|0);
      var $47=HEAP32[(($chunkdata34)>>2)];
      var $48=$slength;
      var $add_ptr=(($47+$48)|0);
      var $add_ptr35=(($add_ptr-2)|0);
      var $cmp36=(($45)>>>0) >= (($add_ptr35)>>>0);
      if ($cmp36) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $49=$png_ptr_addr;
      _png_warning($49, ((STRING_TABLE.__str118867)|0));
      var $50=$png_ptr_addr;
      var $51=$png_ptr_addr;
      var $chunkdata38=(($51+656)|0);
      var $52=HEAP32[(($chunkdata38)>>2)];
      _png_free($50, $52);
      var $53=$png_ptr_addr;
      var $chunkdata39=(($53+656)|0);
      HEAP32[(($chunkdata39)>>2)]=0;
      __label__ = 28; break;
    case 21: 
      var $54=$text;
      var $incdec_ptr40=(($54+1)|0);
      $text=$incdec_ptr40;
      var $55=HEAP8[($incdec_ptr40)];
      var $conv=(($55 << 24) >> 24);
      $comp_type=$conv;
      var $56=$comp_type;
      var $cmp41=(($56)|0)!=0;
      if ($cmp41) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $57=$png_ptr_addr;
      _png_warning($57, ((STRING_TABLE.__str119868)|0));
      $comp_type=0;
      __label__ = 23; break;
    case 23: 
      var $58=$text;
      var $incdec_ptr45=(($58+1)|0);
      $text=$incdec_ptr45;
      __label__ = 24; break;
    case 24: 
      var $59=$text;
      var $60=$png_ptr_addr;
      var $chunkdata47=(($60+656)|0);
      var $61=HEAP32[(($chunkdata47)>>2)];
      var $sub_ptr_lhs_cast=$59;
      var $sub_ptr_rhs_cast=$61;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      $prefix_len=$sub_ptr_sub;
      var $62=$png_ptr_addr;
      var $63=$comp_type;
      var $64=$length_addr;
      var $65=$prefix_len;
      _png_decompress_chunk($62, $63, $64, $65, $data_len);
      var $66=$png_ptr_addr;
      var $call48=_png_malloc_warn($66, 28);
      var $67=$call48;
      $text_ptr=$67;
      var $68=$text_ptr;
      var $cmp49=(($68)|0)==0;
      if ($cmp49) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $69=$png_ptr_addr;
      _png_warning($69, ((STRING_TABLE.__str120869)|0));
      var $70=$png_ptr_addr;
      var $71=$png_ptr_addr;
      var $chunkdata52=(($71+656)|0);
      var $72=HEAP32[(($chunkdata52)>>2)];
      _png_free($70, $72);
      var $73=$png_ptr_addr;
      var $chunkdata53=(($73+656)|0);
      HEAP32[(($chunkdata53)>>2)]=0;
      __label__ = 28; break;
    case 26: 
      var $74=$comp_type;
      var $75=$text_ptr;
      var $compression=(($75)|0);
      HEAP32[(($compression)>>2)]=$74;
      var $76=$png_ptr_addr;
      var $chunkdata55=(($76+656)|0);
      var $77=HEAP32[(($chunkdata55)>>2)];
      var $78=$text_ptr;
      var $key=(($78+4)|0);
      HEAP32[(($key)>>2)]=$77;
      var $79=$text_ptr;
      var $lang=(($79+20)|0);
      HEAP32[(($lang)>>2)]=0;
      var $80=$text_ptr;
      var $lang_key=(($80+24)|0);
      HEAP32[(($lang_key)>>2)]=0;
      var $81=$text_ptr;
      var $itxt_length=(($81+16)|0);
      HEAP32[(($itxt_length)>>2)]=0;
      var $82=$png_ptr_addr;
      var $chunkdata56=(($82+656)|0);
      var $83=HEAP32[(($chunkdata56)>>2)];
      var $84=$prefix_len;
      var $add_ptr57=(($83+$84)|0);
      var $85=$text_ptr;
      var $text58=(($85+8)|0);
      HEAP32[(($text58)>>2)]=$add_ptr57;
      var $86=HEAP32[(($data_len)>>2)];
      var $87=$text_ptr;
      var $text_length=(($87+12)|0);
      HEAP32[(($text_length)>>2)]=$86;
      var $88=$png_ptr_addr;
      var $89=$info_ptr_addr;
      var $90=$text_ptr;
      var $call59=_png_set_text_2($88, $89, $90, 1);
      $ret=$call59;
      var $91=$png_ptr_addr;
      var $92=$text_ptr;
      var $93=$92;
      _png_free($91, $93);
      var $94=$png_ptr_addr;
      var $95=$png_ptr_addr;
      var $chunkdata60=(($95+656)|0);
      var $96=HEAP32[(($chunkdata60)>>2)];
      _png_free($94, $96);
      var $97=$png_ptr_addr;
      var $chunkdata61=(($97+656)|0);
      HEAP32[(($chunkdata61)>>2)]=0;
      var $98=$ret;
      var $tobool62=(($98)|0)!=0;
      if ($tobool62) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $99=$png_ptr_addr;
      _png_error($99, ((STRING_TABLE.__str121870)|0));
      __label__ = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_zTXt["X"]=1;

function _png_handle_iTXt($png_ptr, $info_ptr, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $text_ptr;
      var $key;
      var $lang;
      var $text;
      var $lang_key;
      var $comp_flag;
      var $comp_type;
      var $ret;
      var $slength;
      var $prefix_len;
      var $data_len=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      $comp_type=0;
      var $0=$png_ptr_addr;
      var $user_chunk_cache_max=(($0+624)|0);
      var $1=HEAP32[(($user_chunk_cache_max)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $user_chunk_cache_max1=(($2+624)|0);
      var $3=HEAP32[(($user_chunk_cache_max1)>>2)];
      var $cmp2=(($3)|0)==1;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$png_ptr_addr;
      var $5=$length_addr;
      var $call=_png_crc_finish($4, $5);
      __label__ = 45; break;
    case 4: 
      var $6=$png_ptr_addr;
      var $user_chunk_cache_max4=(($6+624)|0);
      var $7=HEAP32[(($user_chunk_cache_max4)>>2)];
      var $dec=(($7-1)|0);
      HEAP32[(($user_chunk_cache_max4)>>2)]=$dec;
      var $cmp5=(($dec)|0)==1;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$png_ptr_addr;
      _png_warning($8, ((STRING_TABLE.__str122871)|0));
      var $9=$png_ptr_addr;
      var $10=$length_addr;
      var $call7=_png_crc_finish($9, $10);
      __label__ = 45; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $11=$png_ptr_addr;
      var $mode=(($11+84)|0);
      var $12=HEAP32[(($mode)>>2)];
      var $and=$12 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $13=$png_ptr_addr;
      _png_error($13, ((STRING_TABLE.__str123872)|0));
      __label__ = 9; break;
    case 9: 
      var $14=$png_ptr_addr;
      var $mode12=(($14+84)|0);
      var $15=HEAP32[(($mode12)>>2)];
      var $and13=$15 & 4;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $16=$png_ptr_addr;
      var $mode16=(($16+84)|0);
      var $17=HEAP32[(($mode16)>>2)];
      var $or=$17 | 8;
      HEAP32[(($mode16)>>2)]=$or;
      __label__ = 11; break;
    case 11: 
      var $18=$png_ptr_addr;
      var $19=$png_ptr_addr;
      var $chunkdata=(($19+656)|0);
      var $20=HEAP32[(($chunkdata)>>2)];
      _png_free($18, $20);
      var $21=$png_ptr_addr;
      var $22=$length_addr;
      var $add=(($22+1)|0);
      var $call18=_png_malloc_warn($21, $add);
      var $23=$png_ptr_addr;
      var $chunkdata19=(($23+656)|0);
      HEAP32[(($chunkdata19)>>2)]=$call18;
      var $24=$png_ptr_addr;
      var $chunkdata20=(($24+656)|0);
      var $25=HEAP32[(($chunkdata20)>>2)];
      var $cmp21=(($25)|0)==0;
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $26=$png_ptr_addr;
      _png_warning($26, ((STRING_TABLE.__str124873)|0));
      __label__ = 45; break;
    case 13: 
      var $27=$length_addr;
      $slength=$27;
      var $28=$png_ptr_addr;
      var $29=$png_ptr_addr;
      var $chunkdata24=(($29+656)|0);
      var $30=HEAP32[(($chunkdata24)>>2)];
      var $31=$slength;
      _png_crc_read($28, $30, $31);
      var $32=$png_ptr_addr;
      var $call25=_png_crc_finish($32, 0);
      var $tobool26=(($call25)|0)!=0;
      if ($tobool26) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $33=$png_ptr_addr;
      var $34=$png_ptr_addr;
      var $chunkdata28=(($34+656)|0);
      var $35=HEAP32[(($chunkdata28)>>2)];
      _png_free($33, $35);
      var $36=$png_ptr_addr;
      var $chunkdata29=(($36+656)|0);
      HEAP32[(($chunkdata29)>>2)]=0;
      __label__ = 45; break;
    case 15: 
      var $37=$slength;
      var $38=$png_ptr_addr;
      var $chunkdata31=(($38+656)|0);
      var $39=HEAP32[(($chunkdata31)>>2)];
      var $arrayidx=(($39+$37)|0);
      HEAP8[($arrayidx)]=0;
      var $40=$png_ptr_addr;
      var $chunkdata32=(($40+656)|0);
      var $41=HEAP32[(($chunkdata32)>>2)];
      $lang=$41;
      __label__ = 16; break;
    case 16: 
      var $42=$lang;
      var $43=HEAP8[($42)];
      var $tobool33=(($43 << 24) >> 24)!=0;
      if ($tobool33) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $44=$lang;
      var $incdec_ptr=(($44+1)|0);
      $lang=$incdec_ptr;
      __label__ = 16; break;
    case 19: 
      var $45=$lang;
      var $incdec_ptr34=(($45+1)|0);
      $lang=$incdec_ptr34;
      var $46=$lang;
      var $47=$png_ptr_addr;
      var $chunkdata35=(($47+656)|0);
      var $48=HEAP32[(($chunkdata35)>>2)];
      var $49=$slength;
      var $add_ptr=(($48+$49)|0);
      var $add_ptr36=(($add_ptr-3)|0);
      var $cmp37=(($46)>>>0) >= (($add_ptr36)>>>0);
      if ($cmp37) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $50=$png_ptr_addr;
      _png_warning($50, ((STRING_TABLE.__str125874)|0));
      var $51=$png_ptr_addr;
      var $52=$png_ptr_addr;
      var $chunkdata39=(($52+656)|0);
      var $53=HEAP32[(($chunkdata39)>>2)];
      _png_free($51, $53);
      var $54=$png_ptr_addr;
      var $chunkdata40=(($54+656)|0);
      HEAP32[(($chunkdata40)>>2)]=0;
      __label__ = 45; break;
    case 21: 
      var $55=$lang;
      var $incdec_ptr41=(($55+1)|0);
      $lang=$incdec_ptr41;
      var $56=HEAP8[($55)];
      var $conv=(($56 << 24) >> 24);
      $comp_flag=$conv;
      var $57=$lang;
      var $incdec_ptr42=(($57+1)|0);
      $lang=$incdec_ptr42;
      var $58=HEAP8[($57)];
      var $conv43=(($58 << 24) >> 24);
      $comp_type=$conv43;
      __label__ = 22; break;
    case 22: 
      var $59=$comp_type;
      var $tobool45=(($59)|0)!=0;
      if ($tobool45) { __label__ = 25; break; } else { __label__ = 23; break; }
    case 23: 
      var $60=$comp_flag;
      var $tobool46=(($60)|0)!=0;
      if ($tobool46) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $61=$comp_flag;
      var $cmp47=(($61)|0)!=0;
      if ($cmp47) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $62=$png_ptr_addr;
      _png_warning($62, ((STRING_TABLE.__str126875)|0));
      var $63=$png_ptr_addr;
      var $64=$png_ptr_addr;
      var $chunkdata50=(($64+656)|0);
      var $65=HEAP32[(($chunkdata50)>>2)];
      _png_free($63, $65);
      var $66=$png_ptr_addr;
      var $chunkdata51=(($66+656)|0);
      HEAP32[(($chunkdata51)>>2)]=0;
      __label__ = 45; break;
    case 26: 
      var $67=$lang;
      $lang_key=$67;
      __label__ = 27; break;
    case 27: 
      var $68=$lang_key;
      var $69=HEAP8[($68)];
      var $tobool54=(($69 << 24) >> 24)!=0;
      if ($tobool54) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $70=$lang_key;
      var $incdec_ptr57=(($70+1)|0);
      $lang_key=$incdec_ptr57;
      __label__ = 27; break;
    case 30: 
      var $71=$lang_key;
      var $incdec_ptr59=(($71+1)|0);
      $lang_key=$incdec_ptr59;
      var $72=$lang_key;
      var $73=$png_ptr_addr;
      var $chunkdata60=(($73+656)|0);
      var $74=HEAP32[(($chunkdata60)>>2)];
      var $75=$slength;
      var $add_ptr61=(($74+$75)|0);
      var $cmp62=(($72)>>>0) >= (($add_ptr61)>>>0);
      if ($cmp62) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $76=$png_ptr_addr;
      _png_warning($76, ((STRING_TABLE.__str125874)|0));
      var $77=$png_ptr_addr;
      var $78=$png_ptr_addr;
      var $chunkdata65=(($78+656)|0);
      var $79=HEAP32[(($chunkdata65)>>2)];
      _png_free($77, $79);
      var $80=$png_ptr_addr;
      var $chunkdata66=(($80+656)|0);
      HEAP32[(($chunkdata66)>>2)]=0;
      __label__ = 45; break;
    case 32: 
      var $81=$lang_key;
      $text=$81;
      __label__ = 33; break;
    case 33: 
      var $82=$text;
      var $83=HEAP8[($82)];
      var $tobool69=(($83 << 24) >> 24)!=0;
      if ($tobool69) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $84=$text;
      var $incdec_ptr72=(($84+1)|0);
      $text=$incdec_ptr72;
      __label__ = 33; break;
    case 36: 
      var $85=$text;
      var $incdec_ptr74=(($85+1)|0);
      $text=$incdec_ptr74;
      var $86=$text;
      var $87=$png_ptr_addr;
      var $chunkdata75=(($87+656)|0);
      var $88=HEAP32[(($chunkdata75)>>2)];
      var $89=$slength;
      var $add_ptr76=(($88+$89)|0);
      var $cmp77=(($86)>>>0) >= (($add_ptr76)>>>0);
      if ($cmp77) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $90=$png_ptr_addr;
      _png_warning($90, ((STRING_TABLE.__str127876)|0));
      var $91=$png_ptr_addr;
      var $92=$png_ptr_addr;
      var $chunkdata80=(($92+656)|0);
      var $93=HEAP32[(($chunkdata80)>>2)];
      _png_free($91, $93);
      var $94=$png_ptr_addr;
      var $chunkdata81=(($94+656)|0);
      HEAP32[(($chunkdata81)>>2)]=0;
      __label__ = 45; break;
    case 38: 
      var $95=$text;
      var $96=$png_ptr_addr;
      var $chunkdata83=(($96+656)|0);
      var $97=HEAP32[(($chunkdata83)>>2)];
      var $sub_ptr_lhs_cast=$95;
      var $sub_ptr_rhs_cast=$97;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      $prefix_len=$sub_ptr_sub;
      var $98=$png_ptr_addr;
      var $chunkdata84=(($98+656)|0);
      var $99=HEAP32[(($chunkdata84)>>2)];
      $key=$99;
      var $100=$comp_flag;
      var $tobool85=(($100)|0)!=0;
      if ($tobool85) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $101=$png_ptr_addr;
      var $102=$comp_type;
      var $103=$length_addr;
      var $104=$prefix_len;
      _png_decompress_chunk($101, $102, $103, $104, $data_len);
      __label__ = 41; break;
    case 40: 
      var $105=$png_ptr_addr;
      var $chunkdata88=(($105+656)|0);
      var $106=HEAP32[(($chunkdata88)>>2)];
      var $107=$prefix_len;
      var $add_ptr89=(($106+$107)|0);
      var $call90=_strlen($add_ptr89);
      HEAP32[(($data_len)>>2)]=$call90;
      __label__ = 41; break;
    case 41: 
      var $108=$png_ptr_addr;
      var $call92=_png_malloc_warn($108, 28);
      var $109=$call92;
      $text_ptr=$109;
      var $110=$text_ptr;
      var $cmp93=(($110)|0)==0;
      if ($cmp93) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $111=$png_ptr_addr;
      _png_warning($111, ((STRING_TABLE.__str128877)|0));
      var $112=$png_ptr_addr;
      var $113=$png_ptr_addr;
      var $chunkdata96=(($113+656)|0);
      var $114=HEAP32[(($chunkdata96)>>2)];
      _png_free($112, $114);
      var $115=$png_ptr_addr;
      var $chunkdata97=(($115+656)|0);
      HEAP32[(($chunkdata97)>>2)]=0;
      __label__ = 45; break;
    case 43: 
      var $116=$comp_flag;
      var $add99=(($116+1)|0);
      var $117=$text_ptr;
      var $compression=(($117)|0);
      HEAP32[(($compression)>>2)]=$add99;
      var $118=$png_ptr_addr;
      var $chunkdata100=(($118+656)|0);
      var $119=HEAP32[(($chunkdata100)>>2)];
      var $120=$lang_key;
      var $121=$key;
      var $sub_ptr_lhs_cast101=$120;
      var $sub_ptr_rhs_cast102=$121;
      var $sub_ptr_sub103=(($sub_ptr_lhs_cast101-$sub_ptr_rhs_cast102)|0);
      var $add_ptr104=(($119+$sub_ptr_sub103)|0);
      var $122=$text_ptr;
      var $lang_key105=(($122+24)|0);
      HEAP32[(($lang_key105)>>2)]=$add_ptr104;
      var $123=$png_ptr_addr;
      var $chunkdata106=(($123+656)|0);
      var $124=HEAP32[(($chunkdata106)>>2)];
      var $125=$lang;
      var $126=$key;
      var $sub_ptr_lhs_cast107=$125;
      var $sub_ptr_rhs_cast108=$126;
      var $sub_ptr_sub109=(($sub_ptr_lhs_cast107-$sub_ptr_rhs_cast108)|0);
      var $add_ptr110=(($124+$sub_ptr_sub109)|0);
      var $127=$text_ptr;
      var $lang111=(($127+20)|0);
      HEAP32[(($lang111)>>2)]=$add_ptr110;
      var $128=HEAP32[(($data_len)>>2)];
      var $129=$text_ptr;
      var $itxt_length=(($129+16)|0);
      HEAP32[(($itxt_length)>>2)]=$128;
      var $130=$text_ptr;
      var $text_length=(($130+12)|0);
      HEAP32[(($text_length)>>2)]=0;
      var $131=$png_ptr_addr;
      var $chunkdata112=(($131+656)|0);
      var $132=HEAP32[(($chunkdata112)>>2)];
      var $133=$text_ptr;
      var $key113=(($133+4)|0);
      HEAP32[(($key113)>>2)]=$132;
      var $134=$png_ptr_addr;
      var $chunkdata114=(($134+656)|0);
      var $135=HEAP32[(($chunkdata114)>>2)];
      var $136=$prefix_len;
      var $add_ptr115=(($135+$136)|0);
      var $137=$text_ptr;
      var $text116=(($137+8)|0);
      HEAP32[(($text116)>>2)]=$add_ptr115;
      var $138=$png_ptr_addr;
      var $139=$info_ptr_addr;
      var $140=$text_ptr;
      var $call117=_png_set_text_2($138, $139, $140, 1);
      $ret=$call117;
      var $141=$png_ptr_addr;
      var $142=$text_ptr;
      var $143=$142;
      _png_free($141, $143);
      var $144=$png_ptr_addr;
      var $145=$png_ptr_addr;
      var $chunkdata118=(($145+656)|0);
      var $146=HEAP32[(($chunkdata118)>>2)];
      _png_free($144, $146);
      var $147=$png_ptr_addr;
      var $chunkdata119=(($147+656)|0);
      HEAP32[(($chunkdata119)>>2)]=0;
      var $148=$ret;
      var $tobool120=(($148)|0)!=0;
      if ($tobool120) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $149=$png_ptr_addr;
      _png_error($149, ((STRING_TABLE.__str129878)|0));
      __label__ = 45; break;
    case 45: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_iTXt["X"]=1;

function _png_handle_unknown($png_ptr, $info_ptr, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $length_addr;
      var $skip;
      var $ret;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $length_addr=$length;
      $skip=0;
      var $0=$png_ptr_addr;
      var $user_chunk_cache_max=(($0+624)|0);
      var $1=HEAP32[(($user_chunk_cache_max)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $user_chunk_cache_max1=(($2+624)|0);
      var $3=HEAP32[(($user_chunk_cache_max1)>>2)];
      var $cmp2=(($3)|0)==1;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$png_ptr_addr;
      var $5=$length_addr;
      var $call=_png_crc_finish($4, $5);
      __label__ = 35; break;
    case 4: 
      var $6=$png_ptr_addr;
      var $user_chunk_cache_max4=(($6+624)|0);
      var $7=HEAP32[(($user_chunk_cache_max4)>>2)];
      var $dec=(($7-1)|0);
      HEAP32[(($user_chunk_cache_max4)>>2)]=$dec;
      var $cmp5=(($dec)|0)==1;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$png_ptr_addr;
      _png_warning($8, ((STRING_TABLE.__str130879)|0));
      var $9=$png_ptr_addr;
      var $10=$length_addr;
      var $call7=_png_crc_finish($9, $10);
      __label__ = 35; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $11=$png_ptr_addr;
      var $mode=(($11+84)|0);
      var $12=HEAP32[(($mode)>>2)];
      var $and=$12 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $13=$png_ptr_addr;
      var $chunk_name=(($13+232)|0);
      var $14=HEAP32[(($chunk_name)>>2)];
      var $cmp11=(($14)|0)!=1229209940;
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$png_ptr_addr;
      var $mode13=(($15+84)|0);
      var $16=HEAP32[(($mode13)>>2)];
      var $or=$16 | 8;
      HEAP32[(($mode13)>>2)]=$or;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $17=$png_ptr_addr;
      var $chunk_name16=(($17+232)|0);
      var $18=HEAPU32[(($chunk_name16)>>2)];
      var $shr=$18 >>> 29;
      var $and17=1 & $shr;
      var $tobool18=(($and17)|0)!=0;
      if ($tobool18) { __label__ = 16; break; } else { __label__ = 12; break; }
    case 12: 
      var $19=$png_ptr_addr;
      var $20=$png_ptr_addr;
      var $chunk_name20=(($20+232)|0);
      var $21=HEAP32[(($chunk_name20)>>2)];
      var $call21=_png_chunk_unknown_handling($19, $21);
      var $cmp22=(($call21)|0)!=3;
      if ($cmp22) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $22=$png_ptr_addr;
      var $read_user_chunk_fn=(($22+556)|0);
      var $23=HEAP32[(($read_user_chunk_fn)>>2)];
      var $cmp23=(($23)|0)==0;
      if ($cmp23) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $24=$png_ptr_addr;
      _png_chunk_error($24, ((STRING_TABLE.__str131880)|0));
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $25=$png_ptr_addr;
      var $flags=(($25+88)|0);
      var $26=HEAP32[(($flags)>>2)];
      var $and27=$26 & 32768;
      var $tobool28=(($and27)|0)!=0;
      if ($tobool28) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $27=$png_ptr_addr;
      var $read_user_chunk_fn29=(($27+556)|0);
      var $28=HEAP32[(($read_user_chunk_fn29)>>2)];
      var $cmp30=(($28)|0)!=0;
      if ($cmp30) { __label__ = 18; break; } else { __label__ = 33; break; }
    case 18: 
      var $29=$png_ptr_addr;
      var $chunk_name32=(($29+232)|0);
      var $30=HEAPU32[(($chunk_name32)>>2)];
      var $shr33=$30 >>> 24;
      var $conv=(($shr33) & 255);
      var $31=$png_ptr_addr;
      var $unknown_chunk=(($31+632)|0);
      var $name=(($unknown_chunk)|0);
      var $arraydecay=(($name)|0);
      var $arrayidx=(($arraydecay)|0);
      HEAP8[($arrayidx)]=$conv;
      var $32=$png_ptr_addr;
      var $chunk_name34=(($32+232)|0);
      var $33=HEAPU32[(($chunk_name34)>>2)];
      var $shr35=$33 >>> 16;
      var $conv36=(($shr35) & 255);
      var $34=$png_ptr_addr;
      var $unknown_chunk37=(($34+632)|0);
      var $name38=(($unknown_chunk37)|0);
      var $arraydecay39=(($name38)|0);
      var $arrayidx40=(($arraydecay39+1)|0);
      HEAP8[($arrayidx40)]=$conv36;
      var $35=$png_ptr_addr;
      var $chunk_name41=(($35+232)|0);
      var $36=HEAPU32[(($chunk_name41)>>2)];
      var $shr42=$36 >>> 8;
      var $conv43=(($shr42) & 255);
      var $37=$png_ptr_addr;
      var $unknown_chunk44=(($37+632)|0);
      var $name45=(($unknown_chunk44)|0);
      var $arraydecay46=(($name45)|0);
      var $arrayidx47=(($arraydecay46+2)|0);
      HEAP8[($arrayidx47)]=$conv43;
      var $38=$png_ptr_addr;
      var $chunk_name48=(($38+232)|0);
      var $39=HEAP32[(($chunk_name48)>>2)];
      var $conv49=(($39) & 255);
      var $40=$png_ptr_addr;
      var $unknown_chunk50=(($40+632)|0);
      var $name51=(($unknown_chunk50)|0);
      var $arraydecay52=(($name51)|0);
      var $arrayidx53=(($arraydecay52+3)|0);
      HEAP8[($arrayidx53)]=$conv49;
      var $41=$png_ptr_addr;
      var $unknown_chunk54=(($41+632)|0);
      var $name55=(($unknown_chunk54)|0);
      var $arraydecay56=(($name55)|0);
      var $arrayidx57=(($arraydecay56+4)|0);
      HEAP8[($arrayidx57)]=0;
      var $42=$length_addr;
      var $43=$png_ptr_addr;
      var $unknown_chunk58=(($43+632)|0);
      var $size=(($unknown_chunk58+12)|0);
      HEAP32[(($size)>>2)]=$42;
      var $44=$length_addr;
      var $cmp59=(($44)|0)==0;
      if ($cmp59) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $45=$png_ptr_addr;
      var $unknown_chunk62=(($45+632)|0);
      var $data=(($unknown_chunk62+8)|0);
      HEAP32[(($data)>>2)]=0;
      __label__ = 21; break;
    case 20: 
      var $46=$png_ptr_addr;
      var $47=$length_addr;
      var $call63=_png_malloc($46, $47);
      var $48=$png_ptr_addr;
      var $unknown_chunk64=(($48+632)|0);
      var $data65=(($unknown_chunk64+8)|0);
      HEAP32[(($data65)>>2)]=$call63;
      var $49=$png_ptr_addr;
      var $50=$png_ptr_addr;
      var $unknown_chunk66=(($50+632)|0);
      var $data67=(($unknown_chunk66+8)|0);
      var $51=HEAP32[(($data67)>>2)];
      var $52=$length_addr;
      _png_crc_read($49, $51, $52);
      __label__ = 21; break;
    case 21: 
      var $53=$png_ptr_addr;
      var $read_user_chunk_fn69=(($53+556)|0);
      var $54=HEAP32[(($read_user_chunk_fn69)>>2)];
      var $cmp70=(($54)|0)!=0;
      if ($cmp70) { __label__ = 22; break; } else { __label__ = 31; break; }
    case 22: 
      var $55=$png_ptr_addr;
      var $read_user_chunk_fn73=(($55+556)|0);
      var $56=HEAP32[(($read_user_chunk_fn73)>>2)];
      var $57=$png_ptr_addr;
      var $58=$png_ptr_addr;
      var $unknown_chunk74=(($58+632)|0);
      var $call75=FUNCTION_TABLE[$56]($57, $unknown_chunk74);
      $ret=$call75;
      var $59=$ret;
      var $cmp76=(($59)|0) < 0;
      if ($cmp76) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $60=$png_ptr_addr;
      _png_chunk_error($60, ((STRING_TABLE.__str132881)|0));
      __label__ = 24; break;
    case 24: 
      var $61=$ret;
      var $cmp80=(($61)|0)==0;
      if ($cmp80) { __label__ = 25; break; } else { __label__ = 30; break; }
    case 25: 
      var $62=$png_ptr_addr;
      var $chunk_name83=(($62+232)|0);
      var $63=HEAPU32[(($chunk_name83)>>2)];
      var $shr84=$63 >>> 29;
      var $and85=1 & $shr84;
      var $tobool86=(($and85)|0)!=0;
      if ($tobool86) { __label__ = 29; break; } else { __label__ = 26; break; }
    case 26: 
      var $64=$png_ptr_addr;
      var $65=$png_ptr_addr;
      var $chunk_name88=(($65+232)|0);
      var $66=HEAP32[(($chunk_name88)>>2)];
      var $call89=_png_chunk_unknown_handling($64, $66);
      var $cmp90=(($call89)|0)!=3;
      if ($cmp90) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $67=$png_ptr_addr;
      _png_chunk_error($67, ((STRING_TABLE.__str131880)|0));
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $68=$png_ptr_addr;
      var $69=$info_ptr_addr;
      var $70=$png_ptr_addr;
      var $unknown_chunk95=(($70+632)|0);
      _png_set_unknown_chunks($68, $69, $unknown_chunk95, 1);
      __label__ = 30; break;
    case 30: 
      __label__ = 32; break;
    case 31: 
      var $71=$png_ptr_addr;
      var $72=$info_ptr_addr;
      var $73=$png_ptr_addr;
      var $unknown_chunk98=(($73+632)|0);
      _png_set_unknown_chunks($71, $72, $unknown_chunk98, 1);
      __label__ = 32; break;
    case 32: 
      var $74=$png_ptr_addr;
      var $75=$png_ptr_addr;
      var $unknown_chunk100=(($75+632)|0);
      var $data101=(($unknown_chunk100+8)|0);
      var $76=HEAP32[(($data101)>>2)];
      _png_free($74, $76);
      var $77=$png_ptr_addr;
      var $unknown_chunk102=(($77+632)|0);
      var $data103=(($unknown_chunk102+8)|0);
      HEAP32[(($data103)>>2)]=0;
      __label__ = 34; break;
    case 33: 
      var $78=$length_addr;
      $skip=$78;
      __label__ = 34; break;
    case 34: 
      var $79=$png_ptr_addr;
      var $80=$skip;
      var $call106=_png_crc_finish($79, $80);
      __label__ = 35; break;
    case 35: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_handle_unknown["X"]=1;

function _png_combine_row($png_ptr, $dp, $display) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $dp_addr;
      var $display_addr;
      var $pixel_depth;
      var $sp;
      var $row_width;
      var $pass;
      var $end_ptr;
      var $end_byte;
      var $end_mask;
      var $pixels_per_byte;
      var $mask;
      var $m;
      var $bytes_to_copy;
      var $bytes_to_jump;
      var $offset;
      var $dp32;
      var $sp32;
      var $skip;
      var $c;
      var $dp16;
      var $sp16;
      var $skip297;
      var $c301;
      $png_ptr_addr=$png_ptr;
      $dp_addr=$dp;
      $display_addr=$display;
      var $0=$png_ptr_addr;
      var $transformed_pixel_depth=(($0+299)|0);
      var $1=HEAPU8[($transformed_pixel_depth)];
      var $conv=(($1)&255);
      $pixel_depth=$conv;
      var $2=$png_ptr_addr;
      var $row_buf=(($2+240)|0);
      var $3=HEAP32[(($row_buf)>>2)];
      var $add_ptr=(($3+1)|0);
      $sp=$add_ptr;
      var $4=$png_ptr_addr;
      var $width=(($4+204)|0);
      var $5=HEAP32[(($width)>>2)];
      $row_width=$5;
      var $6=$png_ptr_addr;
      var $pass1=(($6+289)|0);
      var $7=HEAPU8[($pass1)];
      var $conv2=(($7)&255);
      $pass=$conv2;
      $end_ptr=0;
      $end_byte=0;
      var $8=$pixel_depth;
      var $cmp=(($8)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$png_ptr_addr;
      _png_error($9, ((STRING_TABLE.__str134883)|0));
      __label__ = 3; break;
    case 3: 
      var $10=$png_ptr_addr;
      var $info_rowbytes=(($10+260)|0);
      var $11=HEAP32[(($info_rowbytes)>>2)];
      var $cmp4=(($11)|0)!=0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $12=$png_ptr_addr;
      var $info_rowbytes6=(($12+260)|0);
      var $13=HEAP32[(($info_rowbytes6)>>2)];
      var $14=$pixel_depth;
      var $cmp7=(($14)>>>0) >= 8;
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=$row_width;
      var $16=$pixel_depth;
      var $shr=$16 >>> 3;
      var $mul=(($15*$shr)|0);
      var $cond = $mul;__label__ = 7; break;
    case 6: 
      var $17=$row_width;
      var $18=$pixel_depth;
      var $mul9=(($17*$18)|0);
      var $add=(($mul9+7)|0);
      var $shr10=$add >>> 3;
      var $cond = $shr10;__label__ = 7; break;
    case 7: 
      var $cond;
      var $cmp11=(($13)|0)!=(($cond)|0);
      if ($cmp11) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $19=$png_ptr_addr;
      _png_error($19, ((STRING_TABLE.__str135884)|0));
      __label__ = 9; break;
    case 9: 
      var $20=$row_width;
      var $cmp15=(($20)|0)==0;
      if ($cmp15) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $21=$png_ptr_addr;
      _png_error($21, ((STRING_TABLE.__str136885)|0));
      __label__ = 11; break;
    case 11: 
      var $22=$pixel_depth;
      var $23=$row_width;
      var $mul19=(($22*$23)|0);
      var $and=$mul19 & 7;
      $end_mask=$and;
      var $24=$end_mask;
      var $cmp20=(($24)|0)!=0;
      if ($cmp20) { __label__ = 12; break; } else { __label__ = 19; break; }
    case 12: 
      var $25=$dp_addr;
      var $26=$pixel_depth;
      var $cmp23=(($26)>>>0) >= 8;
      if ($cmp23) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $27=$row_width;
      var $28=$pixel_depth;
      var $shr26=$28 >>> 3;
      var $mul27=(($27*$shr26)|0);
      var $cond33 = $mul27;__label__ = 15; break;
    case 14: 
      var $29=$row_width;
      var $30=$pixel_depth;
      var $mul29=(($29*$30)|0);
      var $add30=(($mul29+7)|0);
      var $shr31=$add30 >>> 3;
      var $cond33 = $shr31;__label__ = 15; break;
    case 15: 
      var $cond33;
      var $add_ptr34=(($25+$cond33)|0);
      var $add_ptr35=(($add_ptr34-1)|0);
      $end_ptr=$add_ptr35;
      var $31=$end_ptr;
      var $32=HEAP8[($31)];
      $end_byte=$32;
      var $33=$png_ptr_addr;
      var $transformations=(($33+92)|0);
      var $34=HEAP32[(($transformations)>>2)];
      var $and36=$34 & 65536;
      var $tobool=(($and36)|0)!=0;
      if ($tobool) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $35=$end_mask;
      var $shl=255 << $35;
      $end_mask=$shl;
      __label__ = 18; break;
    case 17: 
      var $36=$end_mask;
      var $shr38=255 >> (($36)|0);
      $end_mask=$shr38;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $37=$png_ptr_addr;
      var $interlaced=(($37+288)|0);
      var $38=HEAPU8[($interlaced)];
      var $conv41=(($38)&255);
      var $tobool42=(($conv41)|0)!=0;
      if ($tobool42) { __label__ = 20; break; } else { __label__ = 121; break; }
    case 20: 
      var $39=$png_ptr_addr;
      var $transformations44=(($39+92)|0);
      var $40=HEAP32[(($transformations44)>>2)];
      var $and45=$40 & 2;
      var $tobool46=(($and45)|0)!=0;
      if ($tobool46) { __label__ = 21; break; } else { __label__ = 121; break; }
    case 21: 
      var $41=$pass;
      var $cmp48=(($41)>>>0) < 6;
      if ($cmp48) { __label__ = 22; break; } else { __label__ = 121; break; }
    case 22: 
      var $42=$display_addr;
      var $cmp51=(($42)|0)==0;
      if ($cmp51) { __label__ = 25; break; } else { __label__ = 23; break; }
    case 23: 
      var $43=$display_addr;
      var $cmp53=(($43)|0)==1;
      if ($cmp53) { __label__ = 24; break; } else { __label__ = 121; break; }
    case 24: 
      var $44=$pass;
      var $and56=$44 & 1;
      var $cmp57=(($and56)|0)!=0;
      if ($cmp57) { __label__ = 25; break; } else { __label__ = 121; break; }
    case 25: 
      var $45=$row_width;
      var $46=$pass;
      var $and60=1 & $46;
      var $47=$pass;
      var $add61=(($47+1)|0);
      var $shr62=$add61 >>> 1;
      var $sub=((3-$shr62)|0);
      var $shl63=$and60 << $sub;
      var $and64=$shl63 & 7;
      var $cmp65=(($45)>>>0) <= (($and64)>>>0);
      if ($cmp65) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 127; break;
    case 27: 
      var $48=$pixel_depth;
      var $cmp69=(($48)>>>0) < 8;
      if ($cmp69) { __label__ = 28; break; } else { __label__ = 59; break; }
    case 28: 
      var $49=$pixel_depth;
      var $div=Math.floor(8/(($49)>>>0));
      $pixels_per_byte=$div;
      var $50=$png_ptr_addr;
      var $transformations72=(($50+92)|0);
      var $51=HEAP32[(($transformations72)>>2)];
      var $and73=$51 & 65536;
      var $tobool74=(($and73)|0)!=0;
      if ($tobool74) { __label__ = 29; break; } else { __label__ = 39; break; }
    case 29: 
      var $52=$display_addr;
      var $tobool76=(($52)|0)!=0;
      if ($tobool76) { __label__ = 30; break; } else { __label__ = 34; break; }
    case 30: 
      var $53=$pass;
      var $shr78=$53 >>> 1;
      var $54=$pixel_depth;
      var $cmp79=(($54)|0)==1;
      if ($cmp79) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $cond87 = 0;__label__ = 33; break;
    case 32: 
      var $55=$pixel_depth;
      var $cmp83=(($55)|0)==2;
      var $cond85=$cmp83 ? 1 : 2;
      var $cond87 = $cond85;__label__ = 33; break;
    case 33: 
      var $cond87;
      var $arrayidx=((((_png_combine_row_display_mask)|0)+$cond87*12)|0);
      var $arrayidx88=(($arrayidx+($shr78<<2))|0);
      var $56=HEAP32[(($arrayidx88)>>2)];
      var $cond102 = $56;__label__ = 38; break;
    case 34: 
      var $57=$pass;
      var $58=$pixel_depth;
      var $cmp90=(($58)|0)==1;
      if ($cmp90) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $cond98 = 0;__label__ = 37; break;
    case 36: 
      var $59=$pixel_depth;
      var $cmp94=(($59)|0)==2;
      var $cond96=$cmp94 ? 1 : 2;
      var $cond98 = $cond96;__label__ = 37; break;
    case 37: 
      var $cond98;
      var $arrayidx99=((((_png_combine_row_row_mask)|0)+$cond98*24)|0);
      var $arrayidx100=(($arrayidx99+($57<<2))|0);
      var $60=HEAP32[(($arrayidx100)>>2)];
      var $cond102 = $60;__label__ = 38; break;
    case 38: 
      var $cond102;
      $mask=$cond102;
      __label__ = 49; break;
    case 39: 
      var $61=$display_addr;
      var $tobool104=(($61)|0)!=0;
      if ($tobool104) { __label__ = 40; break; } else { __label__ = 44; break; }
    case 40: 
      var $62=$pass;
      var $shr106=$62 >>> 1;
      var $63=$pixel_depth;
      var $cmp107=(($63)|0)==1;
      if ($cmp107) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $cond115 = 0;__label__ = 43; break;
    case 42: 
      var $64=$pixel_depth;
      var $cmp111=(($64)|0)==2;
      var $cond113=$cmp111 ? 1 : 2;
      var $cond115 = $cond113;__label__ = 43; break;
    case 43: 
      var $cond115;
      var $arrayidx116=((((_png_combine_row_display_mask+36)|0)+$cond115*12)|0);
      var $arrayidx117=(($arrayidx116+($shr106<<2))|0);
      var $65=HEAP32[(($arrayidx117)>>2)];
      var $cond131 = $65;__label__ = 48; break;
    case 44: 
      var $66=$pass;
      var $67=$pixel_depth;
      var $cmp119=(($67)|0)==1;
      if ($cmp119) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $cond127 = 0;__label__ = 47; break;
    case 46: 
      var $68=$pixel_depth;
      var $cmp123=(($68)|0)==2;
      var $cond125=$cmp123 ? 1 : 2;
      var $cond127 = $cond125;__label__ = 47; break;
    case 47: 
      var $cond127;
      var $arrayidx128=((((_png_combine_row_row_mask+72)|0)+$cond127*24)|0);
      var $arrayidx129=(($arrayidx128+($66<<2))|0);
      var $69=HEAP32[(($arrayidx129)>>2)];
      var $cond131 = $69;__label__ = 48; break;
    case 48: 
      var $cond131;
      $mask=$cond131;
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $70=$mask;
      $m=$70;
      var $71=$m;
      var $shr133=$71 >>> 8;
      var $72=$m;
      var $shl134=$72 << 24;
      var $or=$shr133 | $shl134;
      $mask=$or;
      var $73=$m;
      var $and135=$73 & 255;
      $m=$and135;
      var $74=$m;
      var $cmp136=(($74)|0)!=0;
      if ($cmp136) { __label__ = 51; break; } else { __label__ = 55; break; }
    case 51: 
      var $75=$m;
      var $cmp139=(($75)|0)!=255;
      if ($cmp139) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $76=$dp_addr;
      var $77=HEAPU8[($76)];
      var $conv142=(($77)&255);
      var $78=$m;
      var $neg=$78 ^ -1;
      var $and143=$conv142 & $neg;
      var $79=$sp;
      var $80=HEAPU8[($79)];
      var $conv144=(($80)&255);
      var $81=$m;
      var $and145=$conv144 & $81;
      var $or146=$and143 | $and145;
      var $conv147=(($or146) & 255);
      var $82=$dp_addr;
      HEAP8[($82)]=$conv147;
      __label__ = 54; break;
    case 53: 
      var $83=$sp;
      var $84=HEAP8[($83)];
      var $85=$dp_addr;
      HEAP8[($85)]=$84;
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $86=$row_width;
      var $87=$pixels_per_byte;
      var $cmp151=(($86)>>>0) <= (($87)>>>0);
      if ($cmp151) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      __label__ = 58; break;
    case 57: 
      var $88=$pixels_per_byte;
      var $89=$row_width;
      var $sub155=(($89-$88)|0);
      $row_width=$sub155;
      var $90=$dp_addr;
      var $incdec_ptr=(($90+1)|0);
      $dp_addr=$incdec_ptr;
      var $91=$sp;
      var $incdec_ptr156=(($91+1)|0);
      $sp=$incdec_ptr156;
      __label__ = 50; break;
    case 58: 
      __label__ = 120; break;
    case 59: 
      var $92=$pixel_depth;
      var $and158=$92 & 7;
      var $tobool159=(($and158)|0)!=0;
      if ($tobool159) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $93=$png_ptr_addr;
      _png_error($93, ((STRING_TABLE.__str137886)|0));
      __label__ = 61; break;
    case 61: 
      var $94=$pixel_depth;
      var $shr162=$94 >>> 3;
      $pixel_depth=$shr162;
      var $95=$pixel_depth;
      var $96=$row_width;
      var $mul163=(($96*$95)|0);
      $row_width=$mul163;
      var $97=$pass;
      var $and164=1 & $97;
      var $98=$pass;
      var $add165=(($98+1)|0);
      var $shr166=$add165 >>> 1;
      var $sub167=((3-$shr166)|0);
      var $shl168=$and164 << $sub167;
      var $and169=$shl168 & 7;
      var $99=$pixel_depth;
      var $mul170=(($and169*$99)|0);
      $offset=$mul170;
      var $100=$offset;
      var $101=$row_width;
      var $sub171=(($101-$100)|0);
      $row_width=$sub171;
      var $102=$offset;
      var $103=$dp_addr;
      var $add_ptr172=(($103+$102)|0);
      $dp_addr=$add_ptr172;
      var $104=$offset;
      var $105=$sp;
      var $add_ptr173=(($105+$104)|0);
      $sp=$add_ptr173;
      var $106=$display_addr;
      var $tobool174=(($106)|0)!=0;
      if ($tobool174) { __label__ = 62; break; } else { __label__ = 65; break; }
    case 62: 
      var $107=$pass;
      var $sub176=((6-$107)|0);
      var $shr177=$sub176 >>> 1;
      var $shl178=1 << $shr177;
      var $108=$pixel_depth;
      var $mul179=(($shl178*$108)|0);
      $bytes_to_copy=$mul179;
      var $109=$bytes_to_copy;
      var $110=$row_width;
      var $cmp180=(($109)>>>0) > (($110)>>>0);
      if ($cmp180) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $111=$row_width;
      $bytes_to_copy=$111;
      __label__ = 64; break;
    case 64: 
      __label__ = 66; break;
    case 65: 
      var $112=$pixel_depth;
      $bytes_to_copy=$112;
      __label__ = 66; break;
    case 66: 
      var $113=$pass;
      var $sub186=((7-$113)|0);
      var $shr187=$sub186 >>> 1;
      var $shl188=1 << $shr187;
      var $114=$pixel_depth;
      var $mul189=(($shl188*$114)|0);
      $bytes_to_jump=$mul189;
      var $115=$bytes_to_copy;
      if ((($115)|0) == 1) {
        __label__ = 67; break;
      }
      else if ((($115)|0) == 2) {
        __label__ = 71; break;
      }
      else if ((($115)|0) == 3) {
        __label__ = 77; break;
      }
      else {
      __label__ = 81; break;
      }
      
    case 67: 
      __label__ = 68; break;
    case 68: 
      var $116=$sp;
      var $117=HEAP8[($116)];
      var $118=$dp_addr;
      HEAP8[($118)]=$117;
      var $119=$row_width;
      var $120=$bytes_to_jump;
      var $cmp191=(($119)>>>0) <= (($120)>>>0);
      if ($cmp191) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      __label__ = 127; break;
    case 70: 
      var $121=$bytes_to_jump;
      var $122=$dp_addr;
      var $add_ptr195=(($122+$121)|0);
      $dp_addr=$add_ptr195;
      var $123=$bytes_to_jump;
      var $124=$sp;
      var $add_ptr196=(($124+$123)|0);
      $sp=$add_ptr196;
      var $125=$bytes_to_jump;
      var $126=$row_width;
      var $sub197=(($126-$125)|0);
      $row_width=$sub197;
      __label__ = 68; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $127=$sp;
      var $arrayidx199=(($127)|0);
      var $128=HEAP8[($arrayidx199)];
      var $129=$dp_addr;
      var $arrayidx200=(($129)|0);
      HEAP8[($arrayidx200)]=$128;
      var $130=$sp;
      var $arrayidx201=(($130+1)|0);
      var $131=HEAP8[($arrayidx201)];
      var $132=$dp_addr;
      var $arrayidx202=(($132+1)|0);
      HEAP8[($arrayidx202)]=$131;
      var $133=$row_width;
      var $134=$bytes_to_jump;
      var $cmp203=(($133)>>>0) <= (($134)>>>0);
      if ($cmp203) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      __label__ = 127; break;
    case 74: 
      var $135=$bytes_to_jump;
      var $136=$sp;
      var $add_ptr207=(($136+$135)|0);
      $sp=$add_ptr207;
      var $137=$bytes_to_jump;
      var $138=$dp_addr;
      var $add_ptr208=(($138+$137)|0);
      $dp_addr=$add_ptr208;
      var $139=$bytes_to_jump;
      var $140=$row_width;
      var $sub209=(($140-$139)|0);
      $row_width=$sub209;
      __label__ = 75; break;
    case 75: 
      var $141=$row_width;
      var $cmp210=(($141)>>>0) > 1;
      if ($cmp210) { __label__ = 72; break; } else { __label__ = 76; break; }
    case 76: 
      var $142=$sp;
      var $143=HEAP8[($142)];
      var $144=$dp_addr;
      HEAP8[($144)]=$143;
      __label__ = 127; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      var $145=$sp;
      var $arrayidx214=(($145)|0);
      var $146=HEAP8[($arrayidx214)];
      var $147=$dp_addr;
      var $arrayidx215=(($147)|0);
      HEAP8[($arrayidx215)]=$146;
      var $148=$sp;
      var $arrayidx216=(($148+1)|0);
      var $149=HEAP8[($arrayidx216)];
      var $150=$dp_addr;
      var $arrayidx217=(($150+1)|0);
      HEAP8[($arrayidx217)]=$149;
      var $151=$sp;
      var $arrayidx218=(($151+2)|0);
      var $152=HEAP8[($arrayidx218)];
      var $153=$dp_addr;
      var $arrayidx219=(($153+2)|0);
      HEAP8[($arrayidx219)]=$152;
      var $154=$row_width;
      var $155=$bytes_to_jump;
      var $cmp220=(($154)>>>0) <= (($155)>>>0);
      if ($cmp220) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      __label__ = 127; break;
    case 80: 
      var $156=$bytes_to_jump;
      var $157=$sp;
      var $add_ptr224=(($157+$156)|0);
      $sp=$add_ptr224;
      var $158=$bytes_to_jump;
      var $159=$dp_addr;
      var $add_ptr225=(($159+$158)|0);
      $dp_addr=$add_ptr225;
      var $160=$bytes_to_jump;
      var $161=$row_width;
      var $sub226=(($161-$160)|0);
      $row_width=$sub226;
      __label__ = 78; break;
    case 81: 
      var $162=$bytes_to_copy;
      var $cmp227=(($162)>>>0) < 16;
      if ($cmp227) { __label__ = 82; break; } else { __label__ = 114; break; }
    case 82: 
      var $163=$dp_addr;
      var $sub_ptr_lhs_cast=$163;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast)|0);
      var $and230=$sub_ptr_sub & 1;
      var $cmp231=(($and230)|0)==0;
      if ($cmp231) { __label__ = 83; break; } else { __label__ = 114; break; }
    case 83: 
      var $164=$sp;
      var $sub_ptr_lhs_cast234=$164;
      var $sub_ptr_sub235=(($sub_ptr_lhs_cast234)|0);
      var $and236=$sub_ptr_sub235 & 1;
      var $cmp237=(($and236)|0)==0;
      if ($cmp237) { __label__ = 84; break; } else { __label__ = 114; break; }
    case 84: 
      var $165=$bytes_to_copy;
      var $rem=(($165)>>>0)%2;
      var $cmp240=(($rem)|0)==0;
      if ($cmp240) { __label__ = 85; break; } else { __label__ = 114; break; }
    case 85: 
      var $166=$bytes_to_jump;
      var $rem243=(($166)>>>0)%2;
      var $cmp244=(($rem243)|0)==0;
      if ($cmp244) { __label__ = 86; break; } else { __label__ = 114; break; }
    case 86: 
      var $167=$dp_addr;
      var $sub_ptr_lhs_cast247=$167;
      var $sub_ptr_sub248=(($sub_ptr_lhs_cast247)|0);
      var $and249=$sub_ptr_sub248 & 3;
      var $cmp250=(($and249)|0)==0;
      if ($cmp250) { __label__ = 87; break; } else { __label__ = 102; break; }
    case 87: 
      var $168=$sp;
      var $sub_ptr_lhs_cast253=$168;
      var $sub_ptr_sub254=(($sub_ptr_lhs_cast253)|0);
      var $and255=$sub_ptr_sub254 & 3;
      var $cmp256=(($and255)|0)==0;
      if ($cmp256) { __label__ = 88; break; } else { __label__ = 102; break; }
    case 88: 
      var $169=$bytes_to_copy;
      var $rem259=(($169)>>>0)%4;
      var $cmp260=(($rem259)|0)==0;
      if ($cmp260) { __label__ = 89; break; } else { __label__ = 102; break; }
    case 89: 
      var $170=$bytes_to_jump;
      var $rem263=(($170)>>>0)%4;
      var $cmp264=(($rem263)|0)==0;
      if ($cmp264) { __label__ = 90; break; } else { __label__ = 102; break; }
    case 90: 
      var $171=$dp_addr;
      var $172=$171;
      $dp32=$172;
      var $173=$sp;
      var $174=$173;
      $sp32=$174;
      var $175=$bytes_to_jump;
      var $176=$bytes_to_copy;
      var $sub267=(($175-$176)|0);
      var $div268=Math.floor((($sub267)>>>0)/4);
      $skip=$div268;
      __label__ = 91; break;
    case 91: 
      var $177=$bytes_to_copy;
      $c=$177;
      __label__ = 92; break;
    case 92: 
      var $178=$sp32;
      var $incdec_ptr271=(($178+4)|0);
      $sp32=$incdec_ptr271;
      var $179=HEAP32[(($178)>>2)];
      var $180=$dp32;
      var $incdec_ptr272=(($180+4)|0);
      $dp32=$incdec_ptr272;
      HEAP32[(($180)>>2)]=$179;
      var $181=$c;
      var $sub273=(($181-4)|0);
      $c=$sub273;
      __label__ = 93; break;
    case 93: 
      var $182=$c;
      var $cmp275=(($182)>>>0) > 0;
      if ($cmp275) { __label__ = 92; break; } else { __label__ = 94; break; }
    case 94: 
      var $183=$row_width;
      var $184=$bytes_to_jump;
      var $cmp278=(($183)>>>0) <= (($184)>>>0);
      if ($cmp278) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      __label__ = 127; break;
    case 96: 
      var $185=$skip;
      var $186=$dp32;
      var $add_ptr282=(($186+($185<<2))|0);
      $dp32=$add_ptr282;
      var $187=$skip;
      var $188=$sp32;
      var $add_ptr283=(($188+($187<<2))|0);
      $sp32=$add_ptr283;
      var $189=$bytes_to_jump;
      var $190=$row_width;
      var $sub284=(($190-$189)|0);
      $row_width=$sub284;
      __label__ = 97; break;
    case 97: 
      var $191=$bytes_to_copy;
      var $192=$row_width;
      var $cmp286=(($191)>>>0) <= (($192)>>>0);
      if ($cmp286) { __label__ = 91; break; } else { __label__ = 98; break; }
    case 98: 
      var $193=$dp32;
      var $194=$193;
      $dp_addr=$194;
      var $195=$sp32;
      var $196=$195;
      $sp=$196;
      __label__ = 99; break;
    case 99: 
      var $197=$sp;
      var $incdec_ptr290=(($197+1)|0);
      $sp=$incdec_ptr290;
      var $198=HEAP8[($197)];
      var $199=$dp_addr;
      var $incdec_ptr291=(($199+1)|0);
      $dp_addr=$incdec_ptr291;
      HEAP8[($199)]=$198;
      __label__ = 100; break;
    case 100: 
      var $200=$row_width;
      var $dec=(($200-1)|0);
      $row_width=$dec;
      var $cmp293=(($dec)>>>0) > 0;
      if ($cmp293) { __label__ = 99; break; } else { __label__ = 101; break; }
    case 101: 
      __label__ = 127; break;
    case 102: 
      var $201=$dp_addr;
      var $202=$201;
      $dp16=$202;
      var $203=$sp;
      var $204=$203;
      $sp16=$204;
      var $205=$bytes_to_jump;
      var $206=$bytes_to_copy;
      var $sub298=(($205-$206)|0);
      var $div299=Math.floor((($sub298)>>>0)/2);
      $skip297=$div299;
      __label__ = 103; break;
    case 103: 
      var $207=$bytes_to_copy;
      $c301=$207;
      __label__ = 104; break;
    case 104: 
      var $208=$sp16;
      var $incdec_ptr303=(($208+2)|0);
      $sp16=$incdec_ptr303;
      var $209=HEAP16[(($208)>>1)];
      var $210=$dp16;
      var $incdec_ptr304=(($210+2)|0);
      $dp16=$incdec_ptr304;
      HEAP16[(($210)>>1)]=$209;
      var $211=$c301;
      var $sub305=(($211-2)|0);
      $c301=$sub305;
      __label__ = 105; break;
    case 105: 
      var $212=$c301;
      var $cmp307=(($212)>>>0) > 0;
      if ($cmp307) { __label__ = 104; break; } else { __label__ = 106; break; }
    case 106: 
      var $213=$row_width;
      var $214=$bytes_to_jump;
      var $cmp310=(($213)>>>0) <= (($214)>>>0);
      if ($cmp310) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      __label__ = 127; break;
    case 108: 
      var $215=$skip297;
      var $216=$dp16;
      var $add_ptr314=(($216+($215<<1))|0);
      $dp16=$add_ptr314;
      var $217=$skip297;
      var $218=$sp16;
      var $add_ptr315=(($218+($217<<1))|0);
      $sp16=$add_ptr315;
      var $219=$bytes_to_jump;
      var $220=$row_width;
      var $sub316=(($220-$219)|0);
      $row_width=$sub316;
      __label__ = 109; break;
    case 109: 
      var $221=$bytes_to_copy;
      var $222=$row_width;
      var $cmp318=(($221)>>>0) <= (($222)>>>0);
      if ($cmp318) { __label__ = 103; break; } else { __label__ = 110; break; }
    case 110: 
      var $223=$dp16;
      var $224=$223;
      $dp_addr=$224;
      var $225=$sp16;
      var $226=$225;
      $sp=$226;
      __label__ = 111; break;
    case 111: 
      var $227=$sp;
      var $incdec_ptr322=(($227+1)|0);
      $sp=$incdec_ptr322;
      var $228=HEAP8[($227)];
      var $229=$dp_addr;
      var $incdec_ptr323=(($229+1)|0);
      $dp_addr=$incdec_ptr323;
      HEAP8[($229)]=$228;
      __label__ = 112; break;
    case 112: 
      var $230=$row_width;
      var $dec325=(($230-1)|0);
      $row_width=$dec325;
      var $cmp326=(($dec325)>>>0) > 0;
      if ($cmp326) { __label__ = 111; break; } else { __label__ = 113; break; }
    case 113: 
      __label__ = 127; break;
    case 114: 
      __label__ = 115; break;
    case 115: 
      var $231=$dp_addr;
      var $232=$sp;
      var $233=$bytes_to_copy;
      assert($233 % 1 === 0, 'memcpy given ' + $233 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($231, $232, $233, 1);
      var $234=$row_width;
      var $235=$bytes_to_jump;
      var $cmp331=(($234)>>>0) <= (($235)>>>0);
      if ($cmp331) { __label__ = 116; break; } else { __label__ = 117; break; }
    case 116: 
      __label__ = 127; break;
    case 117: 
      var $236=$bytes_to_jump;
      var $237=$sp;
      var $add_ptr335=(($237+$236)|0);
      $sp=$add_ptr335;
      var $238=$bytes_to_jump;
      var $239=$dp_addr;
      var $add_ptr336=(($239+$238)|0);
      $dp_addr=$add_ptr336;
      var $240=$bytes_to_jump;
      var $241=$row_width;
      var $sub337=(($241-$240)|0);
      $row_width=$sub337;
      var $242=$bytes_to_copy;
      var $243=$row_width;
      var $cmp338=(($242)>>>0) > (($243)>>>0);
      if ($cmp338) { __label__ = 118; break; } else { __label__ = 119; break; }
    case 118: 
      var $244=$row_width;
      $bytes_to_copy=$244;
      __label__ = 119; break;
    case 119: 
      __label__ = 115; break;
    case 120: 
      __label__ = 125; break;
    case 121: 
      var $245=$dp_addr;
      var $246=$sp;
      var $247=$pixel_depth;
      var $cmp344=(($247)>>>0) >= 8;
      if ($cmp344) { __label__ = 122; break; } else { __label__ = 123; break; }
    case 122: 
      var $248=$row_width;
      var $249=$pixel_depth;
      var $shr347=$249 >>> 3;
      var $mul348=(($248*$shr347)|0);
      var $cond354 = $mul348;__label__ = 124; break;
    case 123: 
      var $250=$row_width;
      var $251=$pixel_depth;
      var $mul350=(($250*$251)|0);
      var $add351=(($mul350+7)|0);
      var $shr352=$add351 >>> 3;
      var $cond354 = $shr352;__label__ = 124; break;
    case 124: 
      var $cond354;
      assert($cond354 % 1 === 0, 'memcpy given ' + $cond354 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($245, $246, $cond354, 1);
      __label__ = 125; break;
    case 125: 
      var $252=$end_ptr;
      var $cmp356=(($252)|0)!=0;
      if ($cmp356) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      var $253=$end_byte;
      var $conv359=(($253)&255);
      var $254=$end_mask;
      var $and360=$conv359 & $254;
      var $255=$end_ptr;
      var $256=HEAPU8[($255)];
      var $conv361=(($256)&255);
      var $257=$end_mask;
      var $neg362=$257 ^ -1;
      var $and363=$conv361 & $neg362;
      var $or364=$and360 | $and363;
      var $conv365=(($or364) & 255);
      var $258=$end_ptr;
      HEAP8[($258)]=$conv365;
      __label__ = 127; break;
    case 127: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_combine_row["X"]=1;

function _png_init_filter_functions($pp) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $pp_addr;
      var $bpp;
      $pp_addr=$pp;
      var $0=$pp_addr;
      var $pixel_depth=(($0+294)|0);
      var $1=HEAPU8[($pixel_depth)];
      var $conv=(($1)&255);
      var $add=(($conv+7)|0);
      var $shr=$add >> 3;
      $bpp=$shr;
      var $2=$pp_addr;
      var $read_filter=(($2+668)|0);
      var $arrayidx=(($read_filter)|0);
      HEAP32[(($arrayidx)>>2)]=16;
      var $3=$pp_addr;
      var $read_filter1=(($3+668)|0);
      var $arrayidx2=(($read_filter1+4)|0);
      HEAP32[(($arrayidx2)>>2)]=18;
      var $4=$pp_addr;
      var $read_filter3=(($4+668)|0);
      var $arrayidx4=(($read_filter3+8)|0);
      HEAP32[(($arrayidx4)>>2)]=20;
      var $5=$bpp;
      var $cmp=(($5)|0)==1;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $6=$pp_addr;
      var $read_filter6=(($6+668)|0);
      var $arrayidx7=(($read_filter6+12)|0);
      HEAP32[(($arrayidx7)>>2)]=22;
      __label__ = 4; break;
    case 3: 
      var $7=$pp_addr;
      var $read_filter8=(($7+668)|0);
      var $arrayidx9=(($read_filter8+12)|0);
      HEAP32[(($arrayidx9)>>2)]=24;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_do_read_interlace($row_info, $row, $pass, $transformations) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $pass_addr;
      var $transformations_addr;
      var $final_width;
      var $sp;
      var $dp;
      var $sshift;
      var $dshift;
      var $s_start;
      var $s_end;
      var $s_inc;
      var $jstop;
      var $v;
      var $i;
      var $j;
      var $sp60;
      var $dp65;
      var $sshift69;
      var $dshift70;
      var $s_start71;
      var $s_end72;
      var $s_inc73;
      var $jstop74;
      var $i76;
      var $v103;
      var $j104;
      var $sp149;
      var $dp154;
      var $sshift158;
      var $dshift159;
      var $s_start160;
      var $s_end161;
      var $s_inc162;
      var $i163;
      var $jstop164;
      var $v192;
      var $j197;
      var $pixel_bytes;
      var $sp240;
      var $dp245;
      var $jstop249;
      var $i251;
      var $v257=__stackBase__;
      var $j258;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $pass_addr=$pass;
      $transformations_addr=$transformations;
      var $0=$row_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 71; break; }
    case 2: 
      var $1=$row_info_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 71; break; }
    case 3: 
      var $2=$row_info_addr;
      var $width=(($2)|0);
      var $3=HEAP32[(($width)>>2)];
      var $4=$pass_addr;
      var $arrayidx=((_png_do_read_interlace_png_pass_inc+($4<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $mul=(($3*$5)|0);
      $final_width=$mul;
      var $6=$row_info_addr;
      var $pixel_depth=(($6+11)|0);
      var $7=HEAPU8[($pixel_depth)];
      var $conv=(($7)&255);
      if ((($conv)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($conv)|0) == 2) {
        __label__ = 22; break;
      }
      else if ((($conv)|0) == 4) {
        __label__ = 40; break;
      }
      else {
      __label__ = 58; break;
      }
      
    case 4: 
      var $8=$row_addr;
      var $9=$row_info_addr;
      var $width2=(($9)|0);
      var $10=HEAP32[(($width2)>>2)];
      var $sub=(($10-1)|0);
      var $shr=$sub >>> 3;
      var $add_ptr=(($8+$shr)|0);
      $sp=$add_ptr;
      var $11=$row_addr;
      var $12=$final_width;
      var $sub3=(($12-1)|0);
      var $shr4=$sub3 >>> 3;
      var $add_ptr5=(($11+$shr4)|0);
      $dp=$add_ptr5;
      var $13=$pass_addr;
      var $arrayidx6=((_png_do_read_interlace_png_pass_inc+($13<<2))|0);
      var $14=HEAP32[(($arrayidx6)>>2)];
      $jstop=$14;
      var $15=$transformations_addr;
      var $and=$15 & 65536;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$row_info_addr;
      var $width8=(($16)|0);
      var $17=HEAP32[(($width8)>>2)];
      var $add=(($17+7)|0);
      var $and9=$add & 7;
      $sshift=$and9;
      var $18=$final_width;
      var $add10=(($18+7)|0);
      var $and11=$add10 & 7;
      $dshift=$and11;
      $s_start=7;
      $s_end=0;
      $s_inc=-1;
      __label__ = 7; break;
    case 6: 
      var $19=$row_info_addr;
      var $width12=(($19)|0);
      var $20=HEAP32[(($width12)>>2)];
      var $add13=(($20+7)|0);
      var $and14=$add13 & 7;
      var $sub15=((7-$and14)|0);
      $sshift=$sub15;
      var $21=$final_width;
      var $add16=(($21+7)|0);
      var $and17=$add16 & 7;
      var $sub18=((7-$and17)|0);
      $dshift=$sub18;
      $s_start=0;
      $s_end=7;
      $s_inc=1;
      __label__ = 7; break;
    case 7: 
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $22=$i;
      var $23=$row_info_addr;
      var $width19=(($23)|0);
      var $24=HEAPU32[(($width19)>>2)];
      var $cmp20=(($22)>>>0) < (($24)>>>0);
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 21; break; }
    case 9: 
      var $25=$sp;
      var $26=HEAPU8[($25)];
      var $conv22=(($26)&255);
      var $27=$sshift;
      var $shr23=$conv22 >> (($27)|0);
      var $and24=$shr23 & 1;
      var $conv25=(($and24) & 255);
      $v=$conv25;
      $j=0;
      __label__ = 10; break;
    case 10: 
      var $28=$j;
      var $29=$jstop;
      var $cmp27=(($28)|0) < (($29)|0);
      if ($cmp27) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: 
      var $30=$dshift;
      var $sub30=((7-$30)|0);
      var $shr31=32639 >> (($sub30)|0);
      var $and32=$shr31 & 255;
      var $conv33=(($and32) & 255);
      var $conv34=(($conv33)&255);
      var $31=$dp;
      var $32=HEAPU8[($31)];
      var $conv35=(($32)&255);
      var $and36=$conv35 & $conv34;
      var $conv37=(($and36) & 255);
      HEAP8[($31)]=$conv37;
      var $33=$v;
      var $conv38=(($33)&255);
      var $34=$dshift;
      var $shl=$conv38 << $34;
      var $conv39=(($shl) & 255);
      var $conv40=(($conv39)&255);
      var $35=$dp;
      var $36=HEAPU8[($35)];
      var $conv41=(($36)&255);
      var $or=$conv41 | $conv40;
      var $conv42=(($or) & 255);
      HEAP8[($35)]=$conv42;
      var $37=$dshift;
      var $38=$s_end;
      var $cmp43=(($37)|0)==(($38)|0);
      if ($cmp43) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $39=$s_start;
      $dshift=$39;
      var $40=$dp;
      var $incdec_ptr=(($40-1)|0);
      $dp=$incdec_ptr;
      __label__ = 14; break;
    case 13: 
      var $41=$s_inc;
      var $42=$dshift;
      var $add47=(($42+$41)|0);
      $dshift=$add47;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $43=$j;
      var $inc=(($43+1)|0);
      $j=$inc;
      __label__ = 10; break;
    case 16: 
      var $44=$sshift;
      var $45=$s_end;
      var $cmp49=(($44)|0)==(($45)|0);
      if ($cmp49) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $46=$s_start;
      $sshift=$46;
      var $47=$sp;
      var $incdec_ptr52=(($47-1)|0);
      $sp=$incdec_ptr52;
      __label__ = 19; break;
    case 18: 
      var $48=$s_inc;
      var $49=$sshift;
      var $add54=(($49+$48)|0);
      $sshift=$add54;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $50=$i;
      var $inc57=(($50+1)|0);
      $i=$inc57;
      __label__ = 8; break;
    case 21: 
      __label__ = 67; break;
    case 22: 
      var $51=$row_addr;
      var $52=$row_info_addr;
      var $width61=(($52)|0);
      var $53=HEAP32[(($width61)>>2)];
      var $sub62=(($53-1)|0);
      var $shr63=$sub62 >>> 2;
      var $add_ptr64=(($51+$shr63)|0);
      $sp60=$add_ptr64;
      var $54=$row_addr;
      var $55=$final_width;
      var $sub66=(($55-1)|0);
      var $shr67=$sub66 >>> 2;
      var $add_ptr68=(($54+$shr67)|0);
      $dp65=$add_ptr68;
      var $56=$pass_addr;
      var $arrayidx75=((_png_do_read_interlace_png_pass_inc+($56<<2))|0);
      var $57=HEAP32[(($arrayidx75)>>2)];
      $jstop74=$57;
      var $58=$transformations_addr;
      var $and77=$58 & 65536;
      var $tobool78=(($and77)|0)!=0;
      if ($tobool78) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $59=$row_info_addr;
      var $width80=(($59)|0);
      var $60=HEAP32[(($width80)>>2)];
      var $add81=(($60+3)|0);
      var $and82=$add81 & 3;
      var $shl83=$and82 << 1;
      $sshift69=$shl83;
      var $61=$final_width;
      var $add84=(($61+3)|0);
      var $and85=$add84 & 3;
      var $shl86=$and85 << 1;
      $dshift70=$shl86;
      $s_start71=6;
      $s_end72=0;
      $s_inc73=-2;
      __label__ = 25; break;
    case 24: 
      var $62=$row_info_addr;
      var $width88=(($62)|0);
      var $63=HEAP32[(($width88)>>2)];
      var $add89=(($63+3)|0);
      var $and90=$add89 & 3;
      var $sub91=((3-$and90)|0);
      var $shl92=$sub91 << 1;
      $sshift69=$shl92;
      var $64=$final_width;
      var $add93=(($64+3)|0);
      var $and94=$add93 & 3;
      var $sub95=((3-$and94)|0);
      var $shl96=$sub95 << 1;
      $dshift70=$shl96;
      $s_start71=0;
      $s_end72=6;
      $s_inc73=2;
      __label__ = 25; break;
    case 25: 
      $i76=0;
      __label__ = 26; break;
    case 26: 
      var $65=$i76;
      var $66=$row_info_addr;
      var $width99=(($66)|0);
      var $67=HEAPU32[(($width99)>>2)];
      var $cmp100=(($65)>>>0) < (($67)>>>0);
      if ($cmp100) { __label__ = 27; break; } else { __label__ = 39; break; }
    case 27: 
      var $68=$sp60;
      var $69=HEAPU8[($68)];
      var $conv105=(($69)&255);
      var $70=$sshift69;
      var $shr106=$conv105 >> (($70)|0);
      var $and107=$shr106 & 3;
      var $conv108=(($and107) & 255);
      $v103=$conv108;
      $j104=0;
      __label__ = 28; break;
    case 28: 
      var $71=$j104;
      var $72=$jstop74;
      var $cmp110=(($71)|0) < (($72)|0);
      if ($cmp110) { __label__ = 29; break; } else { __label__ = 34; break; }
    case 29: 
      var $73=$dshift70;
      var $sub113=((6-$73)|0);
      var $shr114=16191 >> (($sub113)|0);
      var $and115=$shr114 & 255;
      var $conv116=(($and115) & 255);
      var $conv117=(($conv116)&255);
      var $74=$dp65;
      var $75=HEAPU8[($74)];
      var $conv118=(($75)&255);
      var $and119=$conv118 & $conv117;
      var $conv120=(($and119) & 255);
      HEAP8[($74)]=$conv120;
      var $76=$v103;
      var $conv121=(($76)&255);
      var $77=$dshift70;
      var $shl122=$conv121 << $77;
      var $conv123=(($shl122) & 255);
      var $conv124=(($conv123)&255);
      var $78=$dp65;
      var $79=HEAPU8[($78)];
      var $conv125=(($79)&255);
      var $or126=$conv125 | $conv124;
      var $conv127=(($or126) & 255);
      HEAP8[($78)]=$conv127;
      var $80=$dshift70;
      var $81=$s_end72;
      var $cmp128=(($80)|0)==(($81)|0);
      if ($cmp128) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $82=$s_start71;
      $dshift70=$82;
      var $83=$dp65;
      var $incdec_ptr131=(($83-1)|0);
      $dp65=$incdec_ptr131;
      __label__ = 32; break;
    case 31: 
      var $84=$s_inc73;
      var $85=$dshift70;
      var $add133=(($85+$84)|0);
      $dshift70=$add133;
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      var $86=$j104;
      var $inc136=(($86+1)|0);
      $j104=$inc136;
      __label__ = 28; break;
    case 34: 
      var $87=$sshift69;
      var $88=$s_end72;
      var $cmp138=(($87)|0)==(($88)|0);
      if ($cmp138) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $89=$s_start71;
      $sshift69=$89;
      var $90=$sp60;
      var $incdec_ptr141=(($90-1)|0);
      $sp60=$incdec_ptr141;
      __label__ = 37; break;
    case 36: 
      var $91=$s_inc73;
      var $92=$sshift69;
      var $add143=(($92+$91)|0);
      $sshift69=$add143;
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      var $93=$i76;
      var $inc146=(($93+1)|0);
      $i76=$inc146;
      __label__ = 26; break;
    case 39: 
      __label__ = 67; break;
    case 40: 
      var $94=$row_addr;
      var $95=$row_info_addr;
      var $width150=(($95)|0);
      var $96=HEAP32[(($width150)>>2)];
      var $sub151=(($96-1)|0);
      var $shr152=$sub151 >>> 1;
      var $add_ptr153=(($94+$shr152)|0);
      $sp149=$add_ptr153;
      var $97=$row_addr;
      var $98=$final_width;
      var $sub155=(($98-1)|0);
      var $shr156=$sub155 >>> 1;
      var $add_ptr157=(($97+$shr156)|0);
      $dp154=$add_ptr157;
      var $99=$pass_addr;
      var $arrayidx165=((_png_do_read_interlace_png_pass_inc+($99<<2))|0);
      var $100=HEAP32[(($arrayidx165)>>2)];
      $jstop164=$100;
      var $101=$transformations_addr;
      var $and166=$101 & 65536;
      var $tobool167=(($and166)|0)!=0;
      if ($tobool167) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $102=$row_info_addr;
      var $width169=(($102)|0);
      var $103=HEAP32[(($width169)>>2)];
      var $add170=(($103+1)|0);
      var $and171=$add170 & 1;
      var $shl172=$and171 << 2;
      $sshift158=$shl172;
      var $104=$final_width;
      var $add173=(($104+1)|0);
      var $and174=$add173 & 1;
      var $shl175=$and174 << 2;
      $dshift159=$shl175;
      $s_start160=4;
      $s_end161=0;
      $s_inc162=-4;
      __label__ = 43; break;
    case 42: 
      var $105=$row_info_addr;
      var $width177=(($105)|0);
      var $106=HEAP32[(($width177)>>2)];
      var $add178=(($106+1)|0);
      var $and179=$add178 & 1;
      var $sub180=((1-$and179)|0);
      var $shl181=$sub180 << 2;
      $sshift158=$shl181;
      var $107=$final_width;
      var $add182=(($107+1)|0);
      var $and183=$add182 & 1;
      var $sub184=((1-$and183)|0);
      var $shl185=$sub184 << 2;
      $dshift159=$shl185;
      $s_start160=0;
      $s_end161=4;
      $s_inc162=4;
      __label__ = 43; break;
    case 43: 
      $i163=0;
      __label__ = 44; break;
    case 44: 
      var $108=$i163;
      var $109=$row_info_addr;
      var $width188=(($109)|0);
      var $110=HEAPU32[(($width188)>>2)];
      var $cmp189=(($108)>>>0) < (($110)>>>0);
      if ($cmp189) { __label__ = 45; break; } else { __label__ = 57; break; }
    case 45: 
      var $111=$sp149;
      var $112=HEAPU8[($111)];
      var $conv193=(($112)&255);
      var $113=$sshift158;
      var $shr194=$conv193 >> (($113)|0);
      var $and195=$shr194 & 15;
      var $conv196=(($and195) & 255);
      $v192=$conv196;
      $j197=0;
      __label__ = 46; break;
    case 46: 
      var $114=$j197;
      var $115=$jstop164;
      var $cmp199=(($114)|0) < (($115)|0);
      if ($cmp199) { __label__ = 47; break; } else { __label__ = 52; break; }
    case 47: 
      var $116=$dshift159;
      var $sub202=((4-$116)|0);
      var $shr203=3855 >> (($sub202)|0);
      var $and204=$shr203 & 255;
      var $conv205=(($and204) & 255);
      var $conv206=(($conv205)&255);
      var $117=$dp154;
      var $118=HEAPU8[($117)];
      var $conv207=(($118)&255);
      var $and208=$conv207 & $conv206;
      var $conv209=(($and208) & 255);
      HEAP8[($117)]=$conv209;
      var $119=$v192;
      var $conv210=(($119)&255);
      var $120=$dshift159;
      var $shl211=$conv210 << $120;
      var $conv212=(($shl211) & 255);
      var $conv213=(($conv212)&255);
      var $121=$dp154;
      var $122=HEAPU8[($121)];
      var $conv214=(($122)&255);
      var $or215=$conv214 | $conv213;
      var $conv216=(($or215) & 255);
      HEAP8[($121)]=$conv216;
      var $123=$dshift159;
      var $124=$s_end161;
      var $cmp217=(($123)|0)==(($124)|0);
      if ($cmp217) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $125=$s_start160;
      $dshift159=$125;
      var $126=$dp154;
      var $incdec_ptr220=(($126-1)|0);
      $dp154=$incdec_ptr220;
      __label__ = 50; break;
    case 49: 
      var $127=$s_inc162;
      var $128=$dshift159;
      var $add222=(($128+$127)|0);
      $dshift159=$add222;
      __label__ = 50; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      var $129=$j197;
      var $inc225=(($129+1)|0);
      $j197=$inc225;
      __label__ = 46; break;
    case 52: 
      var $130=$sshift158;
      var $131=$s_end161;
      var $cmp227=(($130)|0)==(($131)|0);
      if ($cmp227) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $132=$s_start160;
      $sshift158=$132;
      var $133=$sp149;
      var $incdec_ptr230=(($133-1)|0);
      $sp149=$incdec_ptr230;
      __label__ = 55; break;
    case 54: 
      var $134=$s_inc162;
      var $135=$sshift158;
      var $add232=(($135+$134)|0);
      $sshift158=$add232;
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      var $136=$i163;
      var $inc235=(($136+1)|0);
      $i163=$inc235;
      __label__ = 44; break;
    case 57: 
      __label__ = 67; break;
    case 58: 
      var $137=$row_info_addr;
      var $pixel_depth237=(($137+11)|0);
      var $138=HEAPU8[($pixel_depth237)];
      var $conv238=(($138)&255);
      var $shr239=$conv238 >> 3;
      $pixel_bytes=$shr239;
      var $139=$row_addr;
      var $140=$row_info_addr;
      var $width241=(($140)|0);
      var $141=HEAP32[(($width241)>>2)];
      var $sub242=(($141-1)|0);
      var $142=$pixel_bytes;
      var $mul243=(($sub242*$142)|0);
      var $add_ptr244=(($139+$mul243)|0);
      $sp240=$add_ptr244;
      var $143=$row_addr;
      var $144=$final_width;
      var $sub246=(($144-1)|0);
      var $145=$pixel_bytes;
      var $mul247=(($sub246*$145)|0);
      var $add_ptr248=(($143+$mul247)|0);
      $dp245=$add_ptr248;
      var $146=$pass_addr;
      var $arrayidx250=((_png_do_read_interlace_png_pass_inc+($146<<2))|0);
      var $147=HEAP32[(($arrayidx250)>>2)];
      $jstop249=$147;
      $i251=0;
      __label__ = 59; break;
    case 59: 
      var $148=$i251;
      var $149=$row_info_addr;
      var $width253=(($149)|0);
      var $150=HEAPU32[(($width253)>>2)];
      var $cmp254=(($148)>>>0) < (($150)>>>0);
      if ($cmp254) { __label__ = 60; break; } else { __label__ = 66; break; }
    case 60: 
      var $arraydecay=(($v257)|0);
      var $151=$sp240;
      var $152=$pixel_bytes;
      assert($152 % 1 === 0, 'memcpy given ' + $152 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($arraydecay, $151, $152, 1);
      $j258=0;
      __label__ = 61; break;
    case 61: 
      var $153=$j258;
      var $154=$jstop249;
      var $cmp260=(($153)|0) < (($154)|0);
      if ($cmp260) { __label__ = 62; break; } else { __label__ = 64; break; }
    case 62: 
      var $155=$dp245;
      var $arraydecay263=(($v257)|0);
      var $156=$pixel_bytes;
      assert($156 % 1 === 0, 'memcpy given ' + $156 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($155, $arraydecay263, $156, 1);
      var $157=$pixel_bytes;
      var $158=$dp245;
      var $idx_neg=(((-$157))|0);
      var $add_ptr264=(($158+$idx_neg)|0);
      $dp245=$add_ptr264;
      __label__ = 63; break;
    case 63: 
      var $159=$j258;
      var $inc266=(($159+1)|0);
      $j258=$inc266;
      __label__ = 61; break;
    case 64: 
      var $160=$pixel_bytes;
      var $161=$sp240;
      var $idx_neg268=(((-$160))|0);
      var $add_ptr269=(($161+$idx_neg268)|0);
      $sp240=$add_ptr269;
      __label__ = 65; break;
    case 65: 
      var $162=$i251;
      var $inc271=(($162+1)|0);
      $i251=$inc271;
      __label__ = 59; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      var $163=$final_width;
      var $164=$row_info_addr;
      var $width273=(($164)|0);
      HEAP32[(($width273)>>2)]=$163;
      var $165=$row_info_addr;
      var $pixel_depth274=(($165+11)|0);
      var $166=HEAPU8[($pixel_depth274)];
      var $conv275=(($166)&255);
      var $cmp276=(($conv275)|0) >= 8;
      if ($cmp276) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $167=$final_width;
      var $168=$row_info_addr;
      var $pixel_depth278=(($168+11)|0);
      var $169=HEAPU8[($pixel_depth278)];
      var $conv279=(($169)&255);
      var $shr280=$conv279 >>> 3;
      var $mul281=(($167*$shr280)|0);
      var $cond = $mul281;__label__ = 70; break;
    case 69: 
      var $170=$final_width;
      var $171=$row_info_addr;
      var $pixel_depth282=(($171+11)|0);
      var $172=HEAPU8[($pixel_depth282)];
      var $conv283=(($172)&255);
      var $mul284=(($170*$conv283)|0);
      var $add285=(($mul284+7)|0);
      var $shr286=$add285 >>> 3;
      var $cond = $shr286;__label__ = 70; break;
    case 70: 
      var $cond;
      var $173=$row_info_addr;
      var $rowbytes=(($173+4)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      __label__ = 71; break;
    case 71: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_read_interlace["X"]=1;

function _png_read_filter_row($pp, $row_info, $row, $prev_row, $filter) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $pp_addr;
      var $row_info_addr;
      var $row_addr;
      var $prev_row_addr;
      var $filter_addr;
      $pp_addr=$pp;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $prev_row_addr=$prev_row;
      $filter_addr=$filter;
      var $0=$pp_addr;
      var $read_filter=(($0+668)|0);
      var $arrayidx=(($read_filter)|0);
      var $1=HEAP32[(($arrayidx)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$pp_addr;
      _png_init_filter_functions($2);
      __label__ = 3; break;
    case 3: 
      var $3=$filter_addr;
      var $cmp1=(($3)|0) > 0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $4=$filter_addr;
      var $cmp2=(($4)|0) < 5;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$filter_addr;
      var $sub=(($5-1)|0);
      var $6=$pp_addr;
      var $read_filter4=(($6+668)|0);
      var $arrayidx5=(($read_filter4+($sub<<2))|0);
      var $7=HEAP32[(($arrayidx5)>>2)];
      var $8=$row_info_addr;
      var $9=$row_addr;
      var $10=$prev_row_addr;
      FUNCTION_TABLE[$7]($8, $9, $10);
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_read_finish_row($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $extra=__stackBase__;
      var $ret;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $row_number=(($0+228)|0);
      var $1=HEAP32[(($row_number)>>2)];
      var $inc=(($1+1)|0);
      HEAP32[(($row_number)>>2)]=$inc;
      var $2=$png_ptr_addr;
      var $row_number1=(($2+228)|0);
      var $3=HEAPU32[(($row_number1)>>2)];
      var $4=$png_ptr_addr;
      var $num_rows=(($4+212)|0);
      var $5=HEAPU32[(($num_rows)>>2)];
      var $cmp=(($3)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 47; break;
    case 3: 
      var $6=$png_ptr_addr;
      var $interlaced=(($6+288)|0);
      var $7=HEAP8[($interlaced)];
      var $tobool=(($7 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 17; break; }
    case 4: 
      var $8=$png_ptr_addr;
      var $row_number3=(($8+228)|0);
      HEAP32[(($row_number3)>>2)]=0;
      var $9=$png_ptr_addr;
      var $prev_row=(($9+236)|0);
      var $10=HEAP32[(($prev_row)>>2)];
      var $11=$png_ptr_addr;
      var $rowbytes=(($11+220)|0);
      var $12=HEAP32[(($rowbytes)>>2)];
      var $add=(($12+1)|0);
      _memset($10, 0, $add, 1);
      __label__ = 5; break;
    case 5: 
      var $13=$png_ptr_addr;
      var $pass=(($13+289)|0);
      var $14=HEAP8[($pass)];
      var $inc4=(($14+1)&255);
      HEAP8[($pass)]=$inc4;
      var $15=$png_ptr_addr;
      var $pass5=(($15+289)|0);
      var $16=HEAPU8[($pass5)];
      var $conv=(($16)&255);
      var $cmp6=(($conv)|0) >= 7;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 14; break;
    case 7: 
      var $17=$png_ptr_addr;
      var $width=(($17+204)|0);
      var $18=HEAP32[(($width)>>2)];
      var $19=$png_ptr_addr;
      var $pass10=(($19+289)|0);
      var $20=HEAPU8[($pass10)];
      var $idxprom=(($20)&255);
      var $arrayidx=((STRING_TABLE._png_read_finish_row_png_pass_inc+$idxprom)|0);
      var $21=HEAPU8[($arrayidx)];
      var $conv11=(($21)&255);
      var $add12=(($18+$conv11)|0);
      var $sub=(($add12-1)|0);
      var $22=$png_ptr_addr;
      var $pass13=(($22+289)|0);
      var $23=HEAPU8[($pass13)];
      var $idxprom14=(($23)&255);
      var $arrayidx15=((STRING_TABLE._png_read_finish_row_png_pass_start+$idxprom14)|0);
      var $24=HEAPU8[($arrayidx15)];
      var $conv16=(($24)&255);
      var $sub17=(($sub-$conv16)|0);
      var $25=$png_ptr_addr;
      var $pass18=(($25+289)|0);
      var $26=HEAPU8[($pass18)];
      var $idxprom19=(($26)&255);
      var $arrayidx20=((STRING_TABLE._png_read_finish_row_png_pass_inc+$idxprom19)|0);
      var $27=HEAPU8[($arrayidx20)];
      var $conv21=(($27)&255);
      var $div=Math.floor((($sub17)>>>0)/(($conv21)>>>0));
      var $28=$png_ptr_addr;
      var $iwidth=(($28+224)|0);
      HEAP32[(($iwidth)>>2)]=$div;
      var $29=$png_ptr_addr;
      var $transformations=(($29+92)|0);
      var $30=HEAP32[(($transformations)>>2)];
      var $and=$30 & 2;
      var $tobool22=(($and)|0)!=0;
      if ($tobool22) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $31=$png_ptr_addr;
      var $height=(($31+208)|0);
      var $32=HEAP32[(($height)>>2)];
      var $33=$png_ptr_addr;
      var $pass24=(($33+289)|0);
      var $34=HEAPU8[($pass24)];
      var $idxprom25=(($34)&255);
      var $arrayidx26=((STRING_TABLE._png_read_finish_row_png_pass_yinc+$idxprom25)|0);
      var $35=HEAPU8[($arrayidx26)];
      var $conv27=(($35)&255);
      var $add28=(($32+$conv27)|0);
      var $sub29=(($add28-1)|0);
      var $36=$png_ptr_addr;
      var $pass30=(($36+289)|0);
      var $37=HEAPU8[($pass30)];
      var $idxprom31=(($37)&255);
      var $arrayidx32=((STRING_TABLE._png_read_finish_row_png_pass_ystart+$idxprom31)|0);
      var $38=HEAPU8[($arrayidx32)];
      var $conv33=(($38)&255);
      var $sub34=(($sub29-$conv33)|0);
      var $39=$png_ptr_addr;
      var $pass35=(($39+289)|0);
      var $40=HEAPU8[($pass35)];
      var $idxprom36=(($40)&255);
      var $arrayidx37=((STRING_TABLE._png_read_finish_row_png_pass_yinc+$idxprom36)|0);
      var $41=HEAPU8[($arrayidx37)];
      var $conv38=(($41)&255);
      var $div39=Math.floor((($sub34)>>>0)/(($conv38)>>>0));
      var $42=$png_ptr_addr;
      var $num_rows40=(($42+212)|0);
      HEAP32[(($num_rows40)>>2)]=$div39;
      __label__ = 10; break;
    case 9: 
      __label__ = 14; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $43=$png_ptr_addr;
      var $num_rows42=(($43+212)|0);
      var $44=HEAP32[(($num_rows42)>>2)];
      var $cmp43=(($44)|0)==0;
      if ($cmp43) { var $47 = 1;__label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $45=$png_ptr_addr;
      var $iwidth45=(($45+224)|0);
      var $46=HEAP32[(($iwidth45)>>2)];
      var $cmp46=(($46)|0)==0;
      var $47 = $cmp46;__label__ = 13; break;
    case 13: 
      var $47;
      if ($47) { __label__ = 5; break; } else { __label__ = 14; break; }
    case 14: 
      var $48=$png_ptr_addr;
      var $pass48=(($48+289)|0);
      var $49=HEAPU8[($pass48)];
      var $conv49=(($49)&255);
      var $cmp50=(($conv49)|0) < 7;
      if ($cmp50) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      __label__ = 47; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $50=$png_ptr_addr;
      var $flags=(($50+88)|0);
      var $51=HEAP32[(($flags)>>2)];
      var $and55=$51 & 32;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { __label__ = 43; break; } else { __label__ = 18; break; }
    case 18: 
      var $52=$png_ptr_addr;
      var $zstream=(($52+96)|0);
      var $next_out=(($zstream+12)|0);
      HEAP32[(($next_out)>>2)]=$extra;
      var $53=$png_ptr_addr;
      var $zstream58=(($53+96)|0);
      var $avail_out=(($zstream58+16)|0);
      HEAP32[(($avail_out)>>2)]=1;
      __label__ = 19; break;
    case 19: 
      var $54=$png_ptr_addr;
      var $zstream59=(($54+96)|0);
      var $avail_in=(($zstream59+4)|0);
      var $55=HEAP32[(($avail_in)>>2)];
      var $tobool60=(($55)|0)!=0;
      if ($tobool60) { __label__ = 28; break; } else { __label__ = 20; break; }
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $56=$png_ptr_addr;
      var $idat_size=(($56+264)|0);
      var $57=HEAP32[(($idat_size)>>2)];
      var $tobool62=(($57)|0)!=0;
      var $lnot=$tobool62 ^ 1;
      if ($lnot) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      var $58=$png_ptr_addr;
      var $call=_png_crc_finish($58, 0);
      var $59=$png_ptr_addr;
      var $call63=_png_read_chunk_header($59);
      var $60=$png_ptr_addr;
      var $idat_size64=(($60+264)|0);
      HEAP32[(($idat_size64)>>2)]=$call63;
      var $61=$png_ptr_addr;
      var $chunk_name=(($61+232)|0);
      var $62=HEAP32[(($chunk_name)>>2)];
      var $cmp65=(($62)|0)!=1229209940;
      if ($cmp65) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $63=$png_ptr_addr;
      _png_error($63, ((STRING_TABLE.__str138887)|0));
      __label__ = 24; break;
    case 24: 
      __label__ = 21; break;
    case 25: 
      var $64=$png_ptr_addr;
      var $zbuf_size=(($64+156)|0);
      var $65=HEAP32[(($zbuf_size)>>2)];
      var $66=$png_ptr_addr;
      var $zstream69=(($66+96)|0);
      var $avail_in70=(($zstream69+4)|0);
      HEAP32[(($avail_in70)>>2)]=$65;
      var $67=$png_ptr_addr;
      var $zbuf=(($67+152)|0);
      var $68=HEAP32[(($zbuf)>>2)];
      var $69=$png_ptr_addr;
      var $zstream71=(($69+96)|0);
      var $next_in=(($zstream71)|0);
      HEAP32[(($next_in)>>2)]=$68;
      var $70=$png_ptr_addr;
      var $zbuf_size72=(($70+156)|0);
      var $71=HEAPU32[(($zbuf_size72)>>2)];
      var $72=$png_ptr_addr;
      var $idat_size73=(($72+264)|0);
      var $73=HEAPU32[(($idat_size73)>>2)];
      var $cmp74=(($71)>>>0) > (($73)>>>0);
      if ($cmp74) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $74=$png_ptr_addr;
      var $idat_size77=(($74+264)|0);
      var $75=HEAP32[(($idat_size77)>>2)];
      var $76=$png_ptr_addr;
      var $zstream78=(($76+96)|0);
      var $avail_in79=(($zstream78+4)|0);
      HEAP32[(($avail_in79)>>2)]=$75;
      __label__ = 27; break;
    case 27: 
      var $77=$png_ptr_addr;
      var $78=$png_ptr_addr;
      var $zbuf81=(($78+152)|0);
      var $79=HEAP32[(($zbuf81)>>2)];
      var $80=$png_ptr_addr;
      var $zstream82=(($80+96)|0);
      var $avail_in83=(($zstream82+4)|0);
      var $81=HEAP32[(($avail_in83)>>2)];
      _png_crc_read($77, $79, $81);
      var $82=$png_ptr_addr;
      var $zstream84=(($82+96)|0);
      var $avail_in85=(($zstream84+4)|0);
      var $83=HEAP32[(($avail_in85)>>2)];
      var $84=$png_ptr_addr;
      var $idat_size86=(($84+264)|0);
      var $85=HEAP32[(($idat_size86)>>2)];
      var $sub87=(($85-$83)|0);
      HEAP32[(($idat_size86)>>2)]=$sub87;
      __label__ = 28; break;
    case 28: 
      var $86=$png_ptr_addr;
      var $zstream89=(($86+96)|0);
      var $call90=_inflate($zstream89, 1);
      $ret=$call90;
      var $87=$ret;
      var $cmp91=(($87)|0)==1;
      if ($cmp91) { __label__ = 29; break; } else { __label__ = 34; break; }
    case 29: 
      var $88=$png_ptr_addr;
      var $zstream94=(($88+96)|0);
      var $avail_out95=(($zstream94+16)|0);
      var $89=HEAP32[(($avail_out95)>>2)];
      var $tobool96=(($89)|0)!=0;
      if ($tobool96) { __label__ = 30; break; } else { __label__ = 32; break; }
    case 30: 
      var $90=$png_ptr_addr;
      var $zstream97=(($90+96)|0);
      var $avail_in98=(($zstream97+4)|0);
      var $91=HEAP32[(($avail_in98)>>2)];
      var $tobool99=(($91)|0)!=0;
      if ($tobool99) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $92=$png_ptr_addr;
      var $idat_size101=(($92+264)|0);
      var $93=HEAP32[(($idat_size101)>>2)];
      var $tobool102=(($93)|0)!=0;
      if ($tobool102) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $94=$png_ptr_addr;
      _png_warning($94, ((STRING_TABLE.__str139888)|0));
      __label__ = 33; break;
    case 33: 
      var $95=$png_ptr_addr;
      var $mode=(($95+84)|0);
      var $96=HEAP32[(($mode)>>2)];
      var $or=$96 | 8;
      HEAP32[(($mode)>>2)]=$or;
      var $97=$png_ptr_addr;
      var $flags105=(($97+88)|0);
      var $98=HEAP32[(($flags105)>>2)];
      var $or106=$98 | 32;
      HEAP32[(($flags105)>>2)]=$or106;
      __label__ = 42; break;
    case 34: 
      var $99=$ret;
      var $cmp108=(($99)|0)!=0;
      if ($cmp108) { __label__ = 35; break; } else { __label__ = 39; break; }
    case 35: 
      var $100=$png_ptr_addr;
      var $101=$png_ptr_addr;
      var $zstream111=(($101+96)|0);
      var $msg=(($zstream111+24)|0);
      var $102=HEAP32[(($msg)>>2)];
      var $tobool112=(($102)|0)!=0;
      if ($tobool112) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $103=$png_ptr_addr;
      var $zstream113=(($103+96)|0);
      var $msg114=(($zstream113+24)|0);
      var $104=HEAP32[(($msg114)>>2)];
      var $cond = $104;__label__ = 38; break;
    case 37: 
      var $cond = ((STRING_TABLE.__str140889)|0);__label__ = 38; break;
    case 38: 
      var $cond;
      _png_error($100, $cond);
      __label__ = 39; break;
    case 39: 
      var $105=$png_ptr_addr;
      var $zstream116=(($105+96)|0);
      var $avail_out117=(($zstream116+16)|0);
      var $106=HEAP32[(($avail_out117)>>2)];
      var $tobool118=(($106)|0)!=0;
      if ($tobool118) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: 
      var $107=$png_ptr_addr;
      _png_warning($107, ((STRING_TABLE.__str139888)|0));
      var $108=$png_ptr_addr;
      var $mode120=(($108+84)|0);
      var $109=HEAP32[(($mode120)>>2)];
      var $or121=$109 | 8;
      HEAP32[(($mode120)>>2)]=$or121;
      var $110=$png_ptr_addr;
      var $flags122=(($110+88)|0);
      var $111=HEAP32[(($flags122)>>2)];
      var $or123=$111 | 32;
      HEAP32[(($flags122)>>2)]=$or123;
      __label__ = 42; break;
    case 41: 
      __label__ = 19; break;
    case 42: 
      var $112=$png_ptr_addr;
      var $zstream125=(($112+96)|0);
      var $avail_out126=(($zstream125+16)|0);
      HEAP32[(($avail_out126)>>2)]=0;
      __label__ = 43; break;
    case 43: 
      var $113=$png_ptr_addr;
      var $idat_size128=(($113+264)|0);
      var $114=HEAP32[(($idat_size128)>>2)];
      var $tobool129=(($114)|0)!=0;
      if ($tobool129) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $115=$png_ptr_addr;
      var $zstream131=(($115+96)|0);
      var $avail_in132=(($zstream131+4)|0);
      var $116=HEAP32[(($avail_in132)>>2)];
      var $tobool133=(($116)|0)!=0;
      if ($tobool133) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $117=$png_ptr_addr;
      _png_warning($117, ((STRING_TABLE.__str141890)|0));
      __label__ = 46; break;
    case 46: 
      var $118=$png_ptr_addr;
      var $zstream136=(($118+96)|0);
      var $call137=_inflateReset($zstream136);
      var $119=$png_ptr_addr;
      var $mode138=(($119+84)|0);
      var $120=HEAP32[(($mode138)>>2)];
      var $or139=$120 | 8;
      HEAP32[(($mode138)>>2)]=$or139;
      __label__ = 47; break;
    case 47: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_finish_row["X"]=1;

function _png_read_filter_row_sub($row_info, $row, $prev_row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $prev_row_addr;
      var $i;
      var $istop;
      var $bpp;
      var $rp;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $prev_row_addr=$prev_row;
      var $0=$row_info_addr;
      var $rowbytes=(($0+4)|0);
      var $1=HEAP32[(($rowbytes)>>2)];
      $istop=$1;
      var $2=$row_info_addr;
      var $pixel_depth=(($2+11)|0);
      var $3=HEAPU8[($pixel_depth)];
      var $conv=(($3)&255);
      var $add=(($conv+7)|0);
      var $shr=$add >> 3;
      $bpp=$shr;
      var $4=$row_addr;
      var $5=$bpp;
      var $add_ptr=(($4+$5)|0);
      $rp=$add_ptr;
      var $6=$prev_row_addr;
      var $7=$bpp;
      $i=$7;
      __label__ = 2; break;
    case 2: 
      var $8=$i;
      var $9=$istop;
      var $cmp=(($8)>>>0) < (($9)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $10=$rp;
      var $11=HEAPU8[($10)];
      var $conv2=(($11)&255);
      var $12=$rp;
      var $13=$bpp;
      var $idx_neg=(((-$13))|0);
      var $add_ptr3=(($12+$idx_neg)|0);
      var $14=HEAPU8[($add_ptr3)];
      var $conv4=(($14)&255);
      var $add5=(($conv2+$conv4)|0);
      var $and=$add5 & 255;
      var $conv6=(($and) & 255);
      var $15=$rp;
      HEAP8[($15)]=$conv6;
      var $16=$rp;
      var $incdec_ptr=(($16+1)|0);
      $rp=$incdec_ptr;
      __label__ = 4; break;
    case 4: 
      var $17=$i;
      var $inc=(($17+1)|0);
      $i=$inc;
      __label__ = 2; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_filter_row_sub["X"]=1;

function _png_read_filter_row_up($row_info, $row, $prev_row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $prev_row_addr;
      var $i;
      var $istop;
      var $rp;
      var $pp;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $prev_row_addr=$prev_row;
      var $0=$row_info_addr;
      var $rowbytes=(($0+4)|0);
      var $1=HEAP32[(($rowbytes)>>2)];
      $istop=$1;
      var $2=$row_addr;
      $rp=$2;
      var $3=$prev_row_addr;
      $pp=$3;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $4=$i;
      var $5=$istop;
      var $cmp=(($4)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $6=$rp;
      var $7=HEAPU8[($6)];
      var $conv=(($7)&255);
      var $8=$pp;
      var $incdec_ptr=(($8+1)|0);
      $pp=$incdec_ptr;
      var $9=HEAPU8[($8)];
      var $conv1=(($9)&255);
      var $add=(($conv+$conv1)|0);
      var $and=$add & 255;
      var $conv2=(($and) & 255);
      var $10=$rp;
      HEAP8[($10)]=$conv2;
      var $11=$rp;
      var $incdec_ptr3=(($11+1)|0);
      $rp=$incdec_ptr3;
      __label__ = 4; break;
    case 4: 
      var $12=$i;
      var $inc=(($12+1)|0);
      $i=$inc;
      __label__ = 2; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_read_filter_row_avg($row_info, $row, $prev_row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $prev_row_addr;
      var $i;
      var $rp;
      var $pp;
      var $bpp;
      var $istop;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $prev_row_addr=$prev_row;
      var $0=$row_addr;
      $rp=$0;
      var $1=$prev_row_addr;
      $pp=$1;
      var $2=$row_info_addr;
      var $pixel_depth=(($2+11)|0);
      var $3=HEAPU8[($pixel_depth)];
      var $conv=(($3)&255);
      var $add=(($conv+7)|0);
      var $shr=$add >> 3;
      $bpp=$shr;
      var $4=$row_info_addr;
      var $rowbytes=(($4+4)|0);
      var $5=HEAP32[(($rowbytes)>>2)];
      var $6=$bpp;
      var $sub=(($5-$6)|0);
      $istop=$sub;
      $i=0;
      __label__ = 2; break;
    case 2: 
      var $7=$i;
      var $8=$bpp;
      var $cmp=(($7)>>>0) < (($8)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $9=$rp;
      var $10=HEAPU8[($9)];
      var $conv2=(($10)&255);
      var $11=$pp;
      var $incdec_ptr=(($11+1)|0);
      $pp=$incdec_ptr;
      var $12=HEAPU8[($11)];
      var $conv3=(($12)&255);
      var $div=(((($conv3)|0)/2)&-1);
      var $add4=(($conv2+$div)|0);
      var $and=$add4 & 255;
      var $conv5=(($and) & 255);
      var $13=$rp;
      HEAP8[($13)]=$conv5;
      var $14=$rp;
      var $incdec_ptr6=(($14+1)|0);
      $rp=$incdec_ptr6;
      __label__ = 4; break;
    case 4: 
      var $15=$i;
      var $inc=(($15+1)|0);
      $i=$inc;
      __label__ = 2; break;
    case 5: 
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $16=$i;
      var $17=$istop;
      var $cmp8=(($16)>>>0) < (($17)>>>0);
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $18=$rp;
      var $19=HEAPU8[($18)];
      var $conv11=(($19)&255);
      var $20=$pp;
      var $incdec_ptr12=(($20+1)|0);
      $pp=$incdec_ptr12;
      var $21=HEAPU8[($20)];
      var $conv13=(($21)&255);
      var $22=$rp;
      var $23=$bpp;
      var $idx_neg=(((-$23))|0);
      var $add_ptr=(($22+$idx_neg)|0);
      var $24=HEAPU8[($add_ptr)];
      var $conv14=(($24)&255);
      var $add15=(($conv13+$conv14)|0);
      var $div16=(((($add15)|0)/2)&-1);
      var $add17=(($conv11+$div16)|0);
      var $and18=$add17 & 255;
      var $conv19=(($and18) & 255);
      var $25=$rp;
      HEAP8[($25)]=$conv19;
      var $26=$rp;
      var $incdec_ptr20=(($26+1)|0);
      $rp=$incdec_ptr20;
      __label__ = 8; break;
    case 8: 
      var $27=$i;
      var $inc22=(($27+1)|0);
      $i=$inc22;
      __label__ = 6; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_filter_row_avg["X"]=1;

function _png_read_start_row($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $max_pixel_depth;
      var $row_bytes;
      var $user_pixel_depth;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $zstream=(($0+96)|0);
      var $avail_in=(($zstream+4)|0);
      HEAP32[(($avail_in)>>2)]=0;
      var $1=$png_ptr_addr;
      _png_init_read_transformations($1);
      var $2=$png_ptr_addr;
      var $interlaced=(($2+288)|0);
      var $3=HEAP8[($interlaced)];
      var $tobool=(($3 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $4=$png_ptr_addr;
      var $transformations=(($4+92)|0);
      var $5=HEAP32[(($transformations)>>2)];
      var $and=$5 & 2;
      var $tobool1=(($and)|0)!=0;
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $6=$png_ptr_addr;
      var $height=(($6+208)|0);
      var $7=HEAP32[(($height)>>2)];
      var $8=HEAPU8[(((STRING_TABLE._png_read_start_row_png_pass_yinc)|0))];
      var $conv=(($8)&255);
      var $add=(($7+$conv)|0);
      var $sub=(($add-1)|0);
      var $9=HEAPU8[(((STRING_TABLE._png_read_start_row_png_pass_ystart)|0))];
      var $conv3=(($9)&255);
      var $sub4=(($sub-$conv3)|0);
      var $10=HEAPU8[(((STRING_TABLE._png_read_start_row_png_pass_yinc)|0))];
      var $conv5=(($10)&255);
      var $div=Math.floor((($sub4)>>>0)/(($conv5)>>>0));
      var $11=$png_ptr_addr;
      var $num_rows=(($11+212)|0);
      HEAP32[(($num_rows)>>2)]=$div;
      __label__ = 5; break;
    case 4: 
      var $12=$png_ptr_addr;
      var $height6=(($12+208)|0);
      var $13=HEAP32[(($height6)>>2)];
      var $14=$png_ptr_addr;
      var $num_rows7=(($14+212)|0);
      HEAP32[(($num_rows7)>>2)]=$13;
      __label__ = 5; break;
    case 5: 
      var $15=$png_ptr_addr;
      var $width=(($15+204)|0);
      var $16=HEAP32[(($width)>>2)];
      var $17=$png_ptr_addr;
      var $pass=(($17+289)|0);
      var $18=HEAPU8[($pass)];
      var $idxprom=(($18)&255);
      var $arrayidx=((STRING_TABLE._png_read_start_row_png_pass_inc+$idxprom)|0);
      var $19=HEAPU8[($arrayidx)];
      var $conv8=(($19)&255);
      var $add9=(($16+$conv8)|0);
      var $sub10=(($add9-1)|0);
      var $20=$png_ptr_addr;
      var $pass11=(($20+289)|0);
      var $21=HEAPU8[($pass11)];
      var $idxprom12=(($21)&255);
      var $arrayidx13=((STRING_TABLE._png_read_start_row_png_pass_start+$idxprom12)|0);
      var $22=HEAPU8[($arrayidx13)];
      var $conv14=(($22)&255);
      var $sub15=(($sub10-$conv14)|0);
      var $23=$png_ptr_addr;
      var $pass16=(($23+289)|0);
      var $24=HEAPU8[($pass16)];
      var $idxprom17=(($24)&255);
      var $arrayidx18=((STRING_TABLE._png_read_start_row_png_pass_inc+$idxprom17)|0);
      var $25=HEAPU8[($arrayidx18)];
      var $conv19=(($25)&255);
      var $div20=Math.floor((($sub15)>>>0)/(($conv19)>>>0));
      var $26=$png_ptr_addr;
      var $iwidth=(($26+224)|0);
      HEAP32[(($iwidth)>>2)]=$div20;
      __label__ = 7; break;
    case 6: 
      var $27=$png_ptr_addr;
      var $height22=(($27+208)|0);
      var $28=HEAP32[(($height22)>>2)];
      var $29=$png_ptr_addr;
      var $num_rows23=(($29+212)|0);
      HEAP32[(($num_rows23)>>2)]=$28;
      var $30=$png_ptr_addr;
      var $width24=(($30+204)|0);
      var $31=HEAP32[(($width24)>>2)];
      var $32=$png_ptr_addr;
      var $iwidth25=(($32+224)|0);
      HEAP32[(($iwidth25)>>2)]=$31;
      __label__ = 7; break;
    case 7: 
      var $33=$png_ptr_addr;
      var $pixel_depth=(($33+294)|0);
      var $34=HEAPU8[($pixel_depth)];
      var $conv27=(($34)&255);
      $max_pixel_depth=$conv27;
      var $35=$png_ptr_addr;
      var $transformations28=(($35+92)|0);
      var $36=HEAP32[(($transformations28)>>2)];
      var $and29=$36 & 4;
      var $tobool30=(($and29)|0)!=0;
      if ($tobool30) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $37=$png_ptr_addr;
      var $bit_depth=(($37+292)|0);
      var $38=HEAPU8[($bit_depth)];
      var $conv31=(($38)&255);
      var $cmp=(($conv31)|0) < 8;
      if ($cmp) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $max_pixel_depth=8;
      __label__ = 10; break;
    case 10: 
      var $39=$png_ptr_addr;
      var $transformations35=(($39+92)|0);
      var $40=HEAP32[(($transformations35)>>2)];
      var $and36=$40 & 4096;
      var $tobool37=(($and36)|0)!=0;
      if ($tobool37) { __label__ = 11; break; } else { __label__ = 29; break; }
    case 11: 
      var $41=$png_ptr_addr;
      var $color_type=(($41+291)|0);
      var $42=HEAPU8[($color_type)];
      var $conv39=(($42)&255);
      var $cmp40=(($conv39)|0)==3;
      if ($cmp40) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $43=$png_ptr_addr;
      var $num_trans=(($43+284)|0);
      var $44=HEAP16[(($num_trans)>>1)];
      var $tobool43=(($44 << 16) >> 16)!=0;
      if ($tobool43) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $max_pixel_depth=32;
      __label__ = 15; break;
    case 14: 
      $max_pixel_depth=24;
      __label__ = 15; break;
    case 15: 
      __label__ = 28; break;
    case 16: 
      var $45=$png_ptr_addr;
      var $color_type48=(($45+291)|0);
      var $46=HEAPU8[($color_type48)];
      var $conv49=(($46)&255);
      var $cmp50=(($conv49)|0)==0;
      if ($cmp50) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: 
      var $47=$max_pixel_depth;
      var $cmp53=(($47)|0) < 8;
      if ($cmp53) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $max_pixel_depth=8;
      __label__ = 19; break;
    case 19: 
      var $48=$png_ptr_addr;
      var $num_trans57=(($48+284)|0);
      var $49=HEAP16[(($num_trans57)>>1)];
      var $tobool58=(($49 << 16) >> 16)!=0;
      if ($tobool58) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $50=$max_pixel_depth;
      var $mul=((($50<<1))|0);
      $max_pixel_depth=$mul;
      __label__ = 21; break;
    case 21: 
      __label__ = 27; break;
    case 22: 
      var $51=$png_ptr_addr;
      var $color_type62=(($51+291)|0);
      var $52=HEAPU8[($color_type62)];
      var $conv63=(($52)&255);
      var $cmp64=(($conv63)|0)==2;
      if ($cmp64) { __label__ = 23; break; } else { __label__ = 26; break; }
    case 23: 
      var $53=$png_ptr_addr;
      var $num_trans67=(($53+284)|0);
      var $54=HEAP16[(($num_trans67)>>1)];
      var $tobool68=(($54 << 16) >> 16)!=0;
      if ($tobool68) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $55=$max_pixel_depth;
      var $mul70=((($55<<2))|0);
      $max_pixel_depth=$mul70;
      var $56=$max_pixel_depth;
      var $div71=(((($56)|0)/3)&-1);
      $max_pixel_depth=$div71;
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $57=$png_ptr_addr;
      var $transformations77=(($57+92)|0);
      var $58=HEAP32[(($transformations77)>>2)];
      var $and78=$58 & 512;
      var $tobool79=(($and78)|0)!=0;
      if ($tobool79) { __label__ = 30; break; } else { __label__ = 36; break; }
    case 30: 
      var $59=$png_ptr_addr;
      var $transformations81=(($59+92)|0);
      var $60=HEAP32[(($transformations81)>>2)];
      var $and82=$60 & 4096;
      var $tobool83=(($and82)|0)!=0;
      if ($tobool83) { __label__ = 31; break; } else { __label__ = 34; break; }
    case 31: 
      var $61=$png_ptr_addr;
      var $bit_depth85=(($61+292)|0);
      var $62=HEAPU8[($bit_depth85)];
      var $conv86=(($62)&255);
      var $cmp87=(($conv86)|0) < 16;
      if ($cmp87) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $63=$max_pixel_depth;
      var $mul90=((($63<<1))|0);
      $max_pixel_depth=$mul90;
      __label__ = 33; break;
    case 33: 
      __label__ = 35; break;
    case 34: 
      var $64=$png_ptr_addr;
      var $transformations93=(($64+92)|0);
      var $65=HEAP32[(($transformations93)>>2)];
      var $and94=$65 & -513;
      HEAP32[(($transformations93)>>2)]=$and94;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $66=$png_ptr_addr;
      var $transformations97=(($66+92)|0);
      var $67=HEAP32[(($transformations97)>>2)];
      var $and98=$67 & 32768;
      var $tobool99=(($and98)|0)!=0;
      if ($tobool99) { __label__ = 37; break; } else { __label__ = 50; break; }
    case 37: 
      var $68=$png_ptr_addr;
      var $color_type101=(($68+291)|0);
      var $69=HEAPU8[($color_type101)];
      var $conv102=(($69)&255);
      var $cmp103=(($conv102)|0)==0;
      if ($cmp103) { __label__ = 38; break; } else { __label__ = 42; break; }
    case 38: 
      var $70=$max_pixel_depth;
      var $cmp106=(($70)|0) <= 8;
      if ($cmp106) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      $max_pixel_depth=16;
      __label__ = 41; break;
    case 40: 
      $max_pixel_depth=32;
      __label__ = 41; break;
    case 41: 
      __label__ = 49; break;
    case 42: 
      var $71=$png_ptr_addr;
      var $color_type112=(($71+291)|0);
      var $72=HEAPU8[($color_type112)];
      var $conv113=(($72)&255);
      var $cmp114=(($conv113)|0)==2;
      if ($cmp114) { __label__ = 44; break; } else { __label__ = 43; break; }
    case 43: 
      var $73=$png_ptr_addr;
      var $color_type116=(($73+291)|0);
      var $74=HEAPU8[($color_type116)];
      var $conv117=(($74)&255);
      var $cmp118=(($conv117)|0)==3;
      if ($cmp118) { __label__ = 44; break; } else { __label__ = 48; break; }
    case 44: 
      var $75=$max_pixel_depth;
      var $cmp121=(($75)|0) <= 32;
      if ($cmp121) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      $max_pixel_depth=32;
      __label__ = 47; break;
    case 46: 
      $max_pixel_depth=64;
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $76=$png_ptr_addr;
      var $transformations129=(($76+92)|0);
      var $77=HEAP32[(($transformations129)>>2)];
      var $and130=$77 & 16384;
      var $tobool131=(($and130)|0)!=0;
      if ($tobool131) { __label__ = 51; break; } else { __label__ = 70; break; }
    case 51: 
      var $78=$png_ptr_addr;
      var $num_trans133=(($78+284)|0);
      var $79=HEAPU16[(($num_trans133)>>1)];
      var $conv134=(($79)&65535);
      var $tobool135=(($conv134)|0)!=0;
      if ($tobool135) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $80=$png_ptr_addr;
      var $transformations137=(($80+92)|0);
      var $81=HEAP32[(($transformations137)>>2)];
      var $and138=$81 & 4096;
      var $tobool139=(($and138)|0)!=0;
      if ($tobool139) { __label__ = 55; break; } else { __label__ = 53; break; }
    case 53: 
      var $82=$png_ptr_addr;
      var $transformations141=(($82+92)|0);
      var $83=HEAP32[(($transformations141)>>2)];
      var $and142=$83 & 32768;
      var $tobool143=(($and142)|0)!=0;
      if ($tobool143) { __label__ = 55; break; } else { __label__ = 54; break; }
    case 54: 
      var $84=$png_ptr_addr;
      var $color_type145=(($84+291)|0);
      var $85=HEAPU8[($color_type145)];
      var $conv146=(($85)&255);
      var $cmp147=(($conv146)|0)==4;
      if ($cmp147) { __label__ = 55; break; } else { __label__ = 59; break; }
    case 55: 
      var $86=$max_pixel_depth;
      var $cmp150=(($86)|0) <= 16;
      if ($cmp150) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      $max_pixel_depth=32;
      __label__ = 58; break;
    case 57: 
      $max_pixel_depth=64;
      __label__ = 58; break;
    case 58: 
      __label__ = 69; break;
    case 59: 
      var $87=$max_pixel_depth;
      var $cmp156=(($87)|0) <= 8;
      if ($cmp156) { __label__ = 60; break; } else { __label__ = 64; break; }
    case 60: 
      var $88=$png_ptr_addr;
      var $color_type159=(($88+291)|0);
      var $89=HEAPU8[($color_type159)];
      var $conv160=(($89)&255);
      var $cmp161=(($conv160)|0)==6;
      if ($cmp161) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      $max_pixel_depth=32;
      __label__ = 63; break;
    case 62: 
      $max_pixel_depth=24;
      __label__ = 63; break;
    case 63: 
      __label__ = 68; break;
    case 64: 
      var $90=$png_ptr_addr;
      var $color_type167=(($90+291)|0);
      var $91=HEAPU8[($color_type167)];
      var $conv168=(($91)&255);
      var $cmp169=(($conv168)|0)==6;
      if ($cmp169) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      $max_pixel_depth=64;
      __label__ = 67; break;
    case 66: 
      $max_pixel_depth=48;
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $92=$png_ptr_addr;
      var $transformations177=(($92+92)|0);
      var $93=HEAP32[(($transformations177)>>2)];
      var $and178=$93 & 1048576;
      var $tobool179=(($and178)|0)!=0;
      if ($tobool179) { __label__ = 71; break; } else { __label__ = 74; break; }
    case 71: 
      var $94=$png_ptr_addr;
      var $user_transform_depth=(($94+80)|0);
      var $95=HEAPU8[($user_transform_depth)];
      var $conv181=(($95)&255);
      var $96=$png_ptr_addr;
      var $user_transform_channels=(($96+81)|0);
      var $97=HEAPU8[($user_transform_channels)];
      var $conv182=(($97)&255);
      var $mul183=(($conv181*$conv182)|0);
      $user_pixel_depth=$mul183;
      var $98=$user_pixel_depth;
      var $99=$max_pixel_depth;
      var $cmp184=(($98)|0) > (($99)|0);
      if ($cmp184) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $100=$user_pixel_depth;
      $max_pixel_depth=$100;
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      var $101=$max_pixel_depth;
      var $conv189=(($101) & 255);
      var $102=$png_ptr_addr;
      var $maximum_pixel_depth=(($102+298)|0);
      HEAP8[($maximum_pixel_depth)]=$conv189;
      var $103=$png_ptr_addr;
      var $transformed_pixel_depth=(($103+299)|0);
      HEAP8[($transformed_pixel_depth)]=0;
      var $104=$png_ptr_addr;
      var $width190=(($104+204)|0);
      var $105=HEAP32[(($width190)>>2)];
      var $add191=(($105+7)|0);
      var $and192=$add191 & -8;
      $row_bytes=$and192;
      var $106=$max_pixel_depth;
      var $cmp193=(($106)|0) >= 8;
      if ($cmp193) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      var $107=$row_bytes;
      var $108=$max_pixel_depth;
      var $shr=$108 >>> 3;
      var $mul195=(($107*$shr)|0);
      var $cond = $mul195;__label__ = 77; break;
    case 76: 
      var $109=$row_bytes;
      var $110=$max_pixel_depth;
      var $mul196=(($109*$110)|0);
      var $add197=(($mul196+7)|0);
      var $shr198=$add197 >>> 3;
      var $cond = $shr198;__label__ = 77; break;
    case 77: 
      var $cond;
      var $add199=(($cond+1)|0);
      var $111=$max_pixel_depth;
      var $add200=(($111+7)|0);
      var $shr201=$add200 >> 3;
      var $add202=(($add199+$shr201)|0);
      $row_bytes=$add202;
      var $112=$row_bytes;
      var $add203=(($112+48)|0);
      var $113=$png_ptr_addr;
      var $old_big_row_buf_size=(($113+652)|0);
      var $114=HEAPU32[(($old_big_row_buf_size)>>2)];
      var $cmp204=(($add203)>>>0) > (($114)>>>0);
      if ($cmp204) { __label__ = 78; break; } else { __label__ = 82; break; }
    case 78: 
      var $115=$png_ptr_addr;
      var $116=$png_ptr_addr;
      var $big_row_buf=(($116+596)|0);
      var $117=HEAP32[(($big_row_buf)>>2)];
      _png_free($115, $117);
      var $118=$png_ptr_addr;
      var $119=$png_ptr_addr;
      var $big_prev_row=(($119+664)|0);
      var $120=HEAP32[(($big_prev_row)>>2)];
      _png_free($118, $120);
      var $121=$png_ptr_addr;
      var $interlaced207=(($121+288)|0);
      var $122=HEAP8[($interlaced207)];
      var $tobool208=(($122 << 24) >> 24)!=0;
      if ($tobool208) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $123=$png_ptr_addr;
      var $124=$row_bytes;
      var $add210=(($124+48)|0);
      var $call=_png_calloc($123, $add210);
      var $125=$png_ptr_addr;
      var $big_row_buf211=(($125+596)|0);
      HEAP32[(($big_row_buf211)>>2)]=$call;
      __label__ = 81; break;
    case 80: 
      var $126=$png_ptr_addr;
      var $127=$row_bytes;
      var $add213=(($127+48)|0);
      var $call214=_png_malloc($126, $add213);
      var $128=$png_ptr_addr;
      var $big_row_buf215=(($128+596)|0);
      HEAP32[(($big_row_buf215)>>2)]=$call214;
      __label__ = 81; break;
    case 81: 
      var $129=$png_ptr_addr;
      var $130=$row_bytes;
      var $add217=(($130+48)|0);
      var $call218=_png_malloc($129, $add217);
      var $131=$png_ptr_addr;
      var $big_prev_row219=(($131+664)|0);
      HEAP32[(($big_prev_row219)>>2)]=$call218;
      var $132=$png_ptr_addr;
      var $big_row_buf220=(($132+596)|0);
      var $133=HEAP32[(($big_row_buf220)>>2)];
      var $add_ptr=(($133+31)|0);
      var $134=$png_ptr_addr;
      var $row_buf=(($134+240)|0);
      HEAP32[(($row_buf)>>2)]=$add_ptr;
      var $135=$png_ptr_addr;
      var $big_prev_row221=(($135+664)|0);
      var $136=HEAP32[(($big_prev_row221)>>2)];
      var $add_ptr222=(($136+31)|0);
      var $137=$png_ptr_addr;
      var $prev_row=(($137+236)|0);
      HEAP32[(($prev_row)>>2)]=$add_ptr222;
      var $138=$row_bytes;
      var $add223=(($138+48)|0);
      var $139=$png_ptr_addr;
      var $old_big_row_buf_size224=(($139+652)|0);
      HEAP32[(($old_big_row_buf_size224)>>2)]=$add223;
      __label__ = 82; break;
    case 82: 
      var $140=$png_ptr_addr;
      var $rowbytes=(($140+220)|0);
      var $141=HEAPU32[(($rowbytes)>>2)];
      var $cmp226=(($141)>>>0) > 4294967294;
      if ($cmp226) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $142=$png_ptr_addr;
      _png_error($142, ((STRING_TABLE.__str142891)|0));
      __label__ = 84; break;
    case 84: 
      var $143=$png_ptr_addr;
      var $prev_row230=(($143+236)|0);
      var $144=HEAP32[(($prev_row230)>>2)];
      var $145=$png_ptr_addr;
      var $rowbytes231=(($145+220)|0);
      var $146=HEAP32[(($rowbytes231)>>2)];
      var $add232=(($146+1)|0);
      _memset($144, 0, $add232, 1);
      var $147=$png_ptr_addr;
      var $flags=(($147+88)|0);
      var $148=HEAP32[(($flags)>>2)];
      var $or=$148 | 64;
      HEAP32[(($flags)>>2)]=$or;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_start_row["X"]=1;

function _png_read_filter_row_paeth_1byte_pixel($row_info, $row, $prev_row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $prev_row_addr;
      var $rp_end;
      var $a;
      var $c;
      var $b;
      var $pa;
      var $pb;
      var $pc;
      var $p;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $prev_row_addr=$prev_row;
      var $0=$row_addr;
      var $1=$row_info_addr;
      var $rowbytes=(($1+4)|0);
      var $2=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($0+$2)|0);
      $rp_end=$add_ptr;
      var $3=$prev_row_addr;
      var $incdec_ptr=(($3+1)|0);
      $prev_row_addr=$incdec_ptr;
      var $4=HEAPU8[($3)];
      var $conv=(($4)&255);
      $c=$conv;
      var $5=$row_addr;
      var $6=HEAPU8[($5)];
      var $conv1=(($6)&255);
      var $7=$c;
      var $add=(($conv1+$7)|0);
      $a=$add;
      var $8=$a;
      var $conv2=(($8) & 255);
      var $9=$row_addr;
      var $incdec_ptr3=(($9+1)|0);
      $row_addr=$incdec_ptr3;
      HEAP8[($9)]=$conv2;
      __label__ = 2; break;
    case 2: 
      var $10=$row_addr;
      var $11=$rp_end;
      var $cmp=(($10)>>>0) < (($11)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 17; break; }
    case 3: 
      var $12=$a;
      var $and=$12 & 255;
      $a=$and;
      var $13=$prev_row_addr;
      var $incdec_ptr5=(($13+1)|0);
      $prev_row_addr=$incdec_ptr5;
      var $14=HEAPU8[($13)];
      var $conv6=(($14)&255);
      $b=$conv6;
      var $15=$b;
      var $16=$c;
      var $sub=(($15-$16)|0);
      $p=$sub;
      var $17=$a;
      var $18=$c;
      var $sub7=(($17-$18)|0);
      $pc=$sub7;
      var $19=$p;
      var $cmp8=(($19)|0) < 0;
      if ($cmp8) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $20=$p;
      var $sub10=(((-$20))|0);
      var $cond = $sub10;__label__ = 6; break;
    case 5: 
      var $21=$p;
      var $cond = $21;__label__ = 6; break;
    case 6: 
      var $cond;
      $pa=$cond;
      var $22=$pc;
      var $cmp11=(($22)|0) < 0;
      if ($cmp11) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $23=$pc;
      var $sub14=(((-$23))|0);
      var $cond17 = $sub14;__label__ = 9; break;
    case 8: 
      var $24=$pc;
      var $cond17 = $24;__label__ = 9; break;
    case 9: 
      var $cond17;
      $pb=$cond17;
      var $25=$p;
      var $26=$pc;
      var $add18=(($25+$26)|0);
      var $cmp19=(($add18)|0) < 0;
      if ($cmp19) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $27=$p;
      var $28=$pc;
      var $add22=(($27+$28)|0);
      var $sub23=(((-$add22))|0);
      var $cond27 = $sub23;__label__ = 12; break;
    case 11: 
      var $29=$p;
      var $30=$pc;
      var $add25=(($29+$30)|0);
      var $cond27 = $add25;__label__ = 12; break;
    case 12: 
      var $cond27;
      $pc=$cond27;
      var $31=$pb;
      var $32=$pa;
      var $cmp28=(($31)|0) < (($32)|0);
      if ($cmp28) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $33=$pb;
      $pa=$33;
      var $34=$b;
      $a=$34;
      __label__ = 14; break;
    case 14: 
      var $35=$pc;
      var $36=$pa;
      var $cmp30=(($35)|0) < (($36)|0);
      if ($cmp30) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $37=$c;
      $a=$37;
      __label__ = 16; break;
    case 16: 
      var $38=$b;
      $c=$38;
      var $39=$row_addr;
      var $40=HEAPU8[($39)];
      var $conv34=(($40)&255);
      var $41=$a;
      var $add35=(($41+$conv34)|0);
      $a=$add35;
      var $42=$a;
      var $conv36=(($42) & 255);
      var $43=$row_addr;
      var $incdec_ptr37=(($43+1)|0);
      $row_addr=$incdec_ptr37;
      HEAP8[($43)]=$conv36;
      __label__ = 2; break;
    case 17: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_filter_row_paeth_1byte_pixel["X"]=1;

function _png_read_filter_row_paeth_multibyte_pixel($row_info, $row, $prev_row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $prev_row_addr;
      var $bpp;
      var $rp_end;
      var $a;
      var $a12;
      var $b;
      var $c;
      var $pa;
      var $pb;
      var $pc;
      var $p;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $prev_row_addr=$prev_row;
      var $0=$row_info_addr;
      var $pixel_depth=(($0+11)|0);
      var $1=HEAPU8[($pixel_depth)];
      var $conv=(($1)&255);
      var $add=(($conv+7)|0);
      var $shr=$add >> 3;
      $bpp=$shr;
      var $2=$row_addr;
      var $3=$bpp;
      var $add_ptr=(($2+$3)|0);
      $rp_end=$add_ptr;
      __label__ = 2; break;
    case 2: 
      var $4=$row_addr;
      var $5=$rp_end;
      var $cmp=(($4)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$row_addr;
      var $7=HEAPU8[($6)];
      var $conv2=(($7)&255);
      var $8=$prev_row_addr;
      var $incdec_ptr=(($8+1)|0);
      $prev_row_addr=$incdec_ptr;
      var $9=HEAPU8[($8)];
      var $conv3=(($9)&255);
      var $add4=(($conv2+$conv3)|0);
      $a=$add4;
      var $10=$a;
      var $conv5=(($10) & 255);
      var $11=$row_addr;
      var $incdec_ptr6=(($11+1)|0);
      $row_addr=$incdec_ptr6;
      HEAP8[($11)]=$conv5;
      __label__ = 2; break;
    case 4: 
      var $12=$row_info_addr;
      var $rowbytes=(($12+4)|0);
      var $13=HEAP32[(($rowbytes)>>2)];
      var $14=$bpp;
      var $sub=(($13-$14)|0);
      var $15=$rp_end;
      var $add_ptr7=(($15+$sub)|0);
      $rp_end=$add_ptr7;
      __label__ = 5; break;
    case 5: 
      var $16=$row_addr;
      var $17=$rp_end;
      var $cmp9=(($16)>>>0) < (($17)>>>0);
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 20; break; }
    case 6: 
      var $18=$prev_row_addr;
      var $19=$bpp;
      var $idx_neg=(((-$19))|0);
      var $add_ptr13=(($18+$idx_neg)|0);
      var $20=HEAPU8[($add_ptr13)];
      var $conv14=(($20)&255);
      $c=$conv14;
      var $21=$row_addr;
      var $22=$bpp;
      var $idx_neg15=(((-$22))|0);
      var $add_ptr16=(($21+$idx_neg15)|0);
      var $23=HEAPU8[($add_ptr16)];
      var $conv17=(($23)&255);
      $a12=$conv17;
      var $24=$prev_row_addr;
      var $incdec_ptr18=(($24+1)|0);
      $prev_row_addr=$incdec_ptr18;
      var $25=HEAPU8[($24)];
      var $conv19=(($25)&255);
      $b=$conv19;
      var $26=$b;
      var $27=$c;
      var $sub20=(($26-$27)|0);
      $p=$sub20;
      var $28=$a12;
      var $29=$c;
      var $sub21=(($28-$29)|0);
      $pc=$sub21;
      var $30=$p;
      var $cmp22=(($30)|0) < 0;
      if ($cmp22) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $31=$p;
      var $sub24=(((-$31))|0);
      var $cond = $sub24;__label__ = 9; break;
    case 8: 
      var $32=$p;
      var $cond = $32;__label__ = 9; break;
    case 9: 
      var $cond;
      $pa=$cond;
      var $33=$pc;
      var $cmp25=(($33)|0) < 0;
      if ($cmp25) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $34=$pc;
      var $sub28=(((-$34))|0);
      var $cond31 = $sub28;__label__ = 12; break;
    case 11: 
      var $35=$pc;
      var $cond31 = $35;__label__ = 12; break;
    case 12: 
      var $cond31;
      $pb=$cond31;
      var $36=$p;
      var $37=$pc;
      var $add32=(($36+$37)|0);
      var $cmp33=(($add32)|0) < 0;
      if ($cmp33) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $38=$p;
      var $39=$pc;
      var $add36=(($38+$39)|0);
      var $sub37=(((-$add36))|0);
      var $cond41 = $sub37;__label__ = 15; break;
    case 14: 
      var $40=$p;
      var $41=$pc;
      var $add39=(($40+$41)|0);
      var $cond41 = $add39;__label__ = 15; break;
    case 15: 
      var $cond41;
      $pc=$cond41;
      var $42=$pb;
      var $43=$pa;
      var $cmp42=(($42)|0) < (($43)|0);
      if ($cmp42) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $44=$pb;
      $pa=$44;
      var $45=$b;
      $a12=$45;
      __label__ = 17; break;
    case 17: 
      var $46=$pc;
      var $47=$pa;
      var $cmp44=(($46)|0) < (($47)|0);
      if ($cmp44) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $48=$c;
      $a12=$48;
      __label__ = 19; break;
    case 19: 
      var $49=$b;
      $c=$49;
      var $50=$row_addr;
      var $51=HEAPU8[($50)];
      var $conv48=(($51)&255);
      var $52=$a12;
      var $add49=(($52+$conv48)|0);
      $a12=$add49;
      var $53=$a12;
      var $conv50=(($53) & 255);
      var $54=$row_addr;
      var $incdec_ptr51=(($54+1)|0);
      $row_addr=$incdec_ptr51;
      HEAP8[($54)]=$conv50;
      __label__ = 5; break;
    case 20: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_read_filter_row_paeth_multibyte_pixel["X"]=1;

function _png_set_oFFs($png_ptr, $info_ptr, $offset_x, $offset_y, $unit_type) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $offset_x_addr;
      var $offset_y_addr;
      var $unit_type_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $offset_x_addr=$offset_x;
      $offset_y_addr=$offset_y;
      $unit_type_addr=$unit_type;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$offset_x_addr;
      var $3=$info_ptr_addr;
      var $x_offset=(($3+100)|0);
      HEAP32[(($x_offset)>>2)]=$2;
      var $4=$offset_y_addr;
      var $5=$info_ptr_addr;
      var $y_offset=(($5+104)|0);
      HEAP32[(($y_offset)>>2)]=$4;
      var $6=$unit_type_addr;
      var $conv=(($6) & 255);
      var $7=$info_ptr_addr;
      var $offset_unit_type=(($7+108)|0);
      HEAP8[($offset_unit_type)]=$conv;
      var $8=$info_ptr_addr;
      var $valid=(($8+8)|0);
      var $9=HEAP32[(($valid)>>2)];
      var $or=$9 | 256;
      HEAP32[(($valid)>>2)]=$or;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_bKGD($png_ptr, $info_ptr, $background) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $background_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $background_addr=$background;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$info_ptr_addr;
      var $background2=(($2+90)|0);
      var $3=$background2;
      var $4=$background_addr;
      var $5=$4;
      assert(10 % 1 === 0, 'memcpy given ' + 10 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $5, $$dest = $3, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $6=$info_ptr_addr;
      var $valid=(($6+8)|0);
      var $7=HEAP32[(($valid)>>2)];
      var $or=$7 | 32;
      HEAP32[(($valid)>>2)]=$or;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_cHRM_fixed($png_ptr, $info_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $white_x_addr;
      var $white_y_addr;
      var $red_x_addr;
      var $red_y_addr;
      var $green_x_addr;
      var $green_y_addr;
      var $blue_x_addr;
      var $blue_y_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $white_x_addr=$white_x;
      $white_y_addr=$white_y;
      $red_x_addr=$red_x;
      $red_y_addr=$red_y;
      $green_x_addr=$green_x;
      $green_y_addr=$green_y;
      $blue_x_addr=$blue_x;
      $blue_y_addr=$blue_y;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 6; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $3=$white_x_addr;
      var $4=$white_y_addr;
      var $5=$red_x_addr;
      var $6=$red_y_addr;
      var $7=$green_x_addr;
      var $8=$green_y_addr;
      var $9=$blue_x_addr;
      var $10=$blue_y_addr;
      var $call=_png_check_cHRM_fixed($2, $3, $4, $5, $6, $7, $8, $9, $10);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $11=$white_x_addr;
      var $12=$info_ptr_addr;
      var $x_white=(($12+128)|0);
      HEAP32[(($x_white)>>2)]=$11;
      var $13=$white_y_addr;
      var $14=$info_ptr_addr;
      var $y_white=(($14+132)|0);
      HEAP32[(($y_white)>>2)]=$13;
      var $15=$red_x_addr;
      var $16=$info_ptr_addr;
      var $x_red=(($16+136)|0);
      HEAP32[(($x_red)>>2)]=$15;
      var $17=$red_y_addr;
      var $18=$info_ptr_addr;
      var $y_red=(($18+140)|0);
      HEAP32[(($y_red)>>2)]=$17;
      var $19=$green_x_addr;
      var $20=$info_ptr_addr;
      var $x_green=(($20+144)|0);
      HEAP32[(($x_green)>>2)]=$19;
      var $21=$green_y_addr;
      var $22=$info_ptr_addr;
      var $y_green=(($22+148)|0);
      HEAP32[(($y_green)>>2)]=$21;
      var $23=$blue_x_addr;
      var $24=$info_ptr_addr;
      var $x_blue=(($24+152)|0);
      HEAP32[(($x_blue)>>2)]=$23;
      var $25=$blue_y_addr;
      var $26=$info_ptr_addr;
      var $y_blue=(($26+156)|0);
      HEAP32[(($y_blue)>>2)]=$25;
      var $27=$info_ptr_addr;
      var $valid=(($27+8)|0);
      var $28=HEAP32[(($valid)>>2)];
      var $or=$28 | 4;
      HEAP32[(($valid)>>2)]=$or;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_cHRM_fixed["X"]=1;

function _png_set_gAMA_fixed($png_ptr, $info_ptr, $file_gamma) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $file_gamma_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $file_gamma_addr=$file_gamma;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 8; break;
    case 4: 
      var $2=$file_gamma_addr;
      var $cmp2=(($2)|0) < 16;
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $3=$file_gamma_addr;
      var $cmp4=(($3)|0) > 625000000;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $4=$png_ptr_addr;
      _png_warning($4, ((STRING_TABLE.__str10970)|0));
      __label__ = 8; break;
    case 7: 
      var $5=$file_gamma_addr;
      var $6=$info_ptr_addr;
      var $gamma=(($6+40)|0);
      HEAP32[(($gamma)>>2)]=$5;
      var $7=$info_ptr_addr;
      var $valid=(($7+8)|0);
      var $8=HEAP32[(($valid)>>2)];
      var $or=$8 | 1;
      HEAP32[(($valid)>>2)]=$or;
      __label__ = 8; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_hIST($png_ptr, $info_ptr, $hist) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $hist_addr;
      var $i;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $hist_addr=$hist;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 14; break;
    case 4: 
      var $2=$info_ptr_addr;
      var $num_palette=(($2+20)|0);
      var $3=HEAPU16[(($num_palette)>>1)];
      var $conv=(($3)&65535);
      var $cmp2=(($conv)|0)==0;
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $4=$info_ptr_addr;
      var $num_palette5=(($4+20)|0);
      var $5=HEAPU16[(($num_palette5)>>1)];
      var $conv6=(($5)&65535);
      var $cmp7=(($conv6)|0) > 256;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $6=$png_ptr_addr;
      _png_warning($6, ((STRING_TABLE.__str12972)|0));
      __label__ = 14; break;
    case 7: 
      var $7=$png_ptr_addr;
      var $8=$info_ptr_addr;
      _png_free_data($7, $8, 8, 0);
      var $9=$png_ptr_addr;
      var $call=_png_malloc_warn($9, 512);
      var $10=$call;
      var $11=$png_ptr_addr;
      var $hist11=(($11+488)|0);
      HEAP32[(($hist11)>>2)]=$10;
      var $12=$png_ptr_addr;
      var $hist12=(($12+488)|0);
      var $13=HEAP32[(($hist12)>>2)];
      var $cmp13=(($13)|0)==0;
      if ($cmp13) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $14=$png_ptr_addr;
      _png_warning($14, ((STRING_TABLE.__str13973)|0));
      __label__ = 14; break;
    case 9: 
      $i=0;
      __label__ = 10; break;
    case 10: 
      var $15=$i;
      var $16=$info_ptr_addr;
      var $num_palette17=(($16+20)|0);
      var $17=HEAPU16[(($num_palette17)>>1)];
      var $conv18=(($17)&65535);
      var $cmp19=(($15)|0) < (($conv18)|0);
      if ($cmp19) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $18=$i;
      var $19=$hist_addr;
      var $arrayidx=(($19+($18<<1))|0);
      var $20=HEAP16[(($arrayidx)>>1)];
      var $21=$i;
      var $22=$png_ptr_addr;
      var $hist21=(($22+488)|0);
      var $23=HEAP32[(($hist21)>>2)];
      var $arrayidx22=(($23+($21<<1))|0);
      HEAP16[(($arrayidx22)>>1)]=$20;
      __label__ = 12; break;
    case 12: 
      var $24=$i;
      var $inc=(($24+1)|0);
      $i=$inc;
      __label__ = 10; break;
    case 13: 
      var $25=$png_ptr_addr;
      var $hist23=(($25+488)|0);
      var $26=HEAP32[(($hist23)>>2)];
      var $27=$info_ptr_addr;
      var $hist24=(($27+124)|0);
      HEAP32[(($hist24)>>2)]=$26;
      var $28=$info_ptr_addr;
      var $valid=(($28+8)|0);
      var $29=HEAP32[(($valid)>>2)];
      var $or=$29 | 64;
      HEAP32[(($valid)>>2)]=$or;
      var $30=$info_ptr_addr;
      var $free_me=(($30+184)|0);
      var $31=HEAP32[(($free_me)>>2)];
      var $or25=$31 | 8;
      HEAP32[(($free_me)>>2)]=$or25;
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_hIST["X"]=1;

function _png_set_IHDR($png_ptr, $info_ptr, $width, $height, $bit_depth, $color_type, $interlace_type, $compression_type, $filter_type) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $width_addr;
      var $height_addr;
      var $bit_depth_addr;
      var $color_type_addr;
      var $interlace_type_addr;
      var $compression_type_addr;
      var $filter_type_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $width_addr=$width;
      $height_addr=$height;
      $bit_depth_addr=$bit_depth;
      $color_type_addr=$color_type;
      $interlace_type_addr=$interlace_type;
      $compression_type_addr=$compression_type;
      $filter_type_addr=$filter_type;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 18; break;
    case 4: 
      var $2=$width_addr;
      var $3=$info_ptr_addr;
      var $width2=(($3)|0);
      HEAP32[(($width2)>>2)]=$2;
      var $4=$height_addr;
      var $5=$info_ptr_addr;
      var $height3=(($5+4)|0);
      HEAP32[(($height3)>>2)]=$4;
      var $6=$bit_depth_addr;
      var $conv=(($6) & 255);
      var $7=$info_ptr_addr;
      var $bit_depth4=(($7+24)|0);
      HEAP8[($bit_depth4)]=$conv;
      var $8=$color_type_addr;
      var $conv5=(($8) & 255);
      var $9=$info_ptr_addr;
      var $color_type6=(($9+25)|0);
      HEAP8[($color_type6)]=$conv5;
      var $10=$compression_type_addr;
      var $conv7=(($10) & 255);
      var $11=$info_ptr_addr;
      var $compression_type8=(($11+26)|0);
      HEAP8[($compression_type8)]=$conv7;
      var $12=$filter_type_addr;
      var $conv9=(($12) & 255);
      var $13=$info_ptr_addr;
      var $filter_type10=(($13+27)|0);
      HEAP8[($filter_type10)]=$conv9;
      var $14=$interlace_type_addr;
      var $conv11=(($14) & 255);
      var $15=$info_ptr_addr;
      var $interlace_type12=(($15+28)|0);
      HEAP8[($interlace_type12)]=$conv11;
      var $16=$png_ptr_addr;
      var $17=$info_ptr_addr;
      var $width13=(($17)|0);
      var $18=HEAP32[(($width13)>>2)];
      var $19=$info_ptr_addr;
      var $height14=(($19+4)|0);
      var $20=HEAP32[(($height14)>>2)];
      var $21=$info_ptr_addr;
      var $bit_depth15=(($21+24)|0);
      var $22=HEAPU8[($bit_depth15)];
      var $conv16=(($22)&255);
      var $23=$info_ptr_addr;
      var $color_type17=(($23+25)|0);
      var $24=HEAPU8[($color_type17)];
      var $conv18=(($24)&255);
      var $25=$info_ptr_addr;
      var $interlace_type19=(($25+28)|0);
      var $26=HEAPU8[($interlace_type19)];
      var $conv20=(($26)&255);
      var $27=$info_ptr_addr;
      var $compression_type21=(($27+26)|0);
      var $28=HEAPU8[($compression_type21)];
      var $conv22=(($28)&255);
      var $29=$info_ptr_addr;
      var $filter_type23=(($29+27)|0);
      var $30=HEAPU8[($filter_type23)];
      var $conv24=(($30)&255);
      _png_check_IHDR($16, $18, $20, $conv16, $conv18, $conv20, $conv22, $conv24);
      var $31=$info_ptr_addr;
      var $color_type25=(($31+25)|0);
      var $32=HEAPU8[($color_type25)];
      var $conv26=(($32)&255);
      var $cmp27=(($conv26)|0)==3;
      if ($cmp27) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $33=$info_ptr_addr;
      var $channels=(($33+29)|0);
      HEAP8[($channels)]=1;
      __label__ = 10; break;
    case 6: 
      var $34=$info_ptr_addr;
      var $color_type30=(($34+25)|0);
      var $35=HEAPU8[($color_type30)];
      var $conv31=(($35)&255);
      var $and=$conv31 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $36=$info_ptr_addr;
      var $channels33=(($36+29)|0);
      HEAP8[($channels33)]=3;
      __label__ = 9; break;
    case 8: 
      var $37=$info_ptr_addr;
      var $channels35=(($37+29)|0);
      HEAP8[($channels35)]=1;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $38=$info_ptr_addr;
      var $color_type38=(($38+25)|0);
      var $39=HEAPU8[($color_type38)];
      var $conv39=(($39)&255);
      var $and40=$conv39 & 4;
      var $tobool41=(($and40)|0)!=0;
      if ($tobool41) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $40=$info_ptr_addr;
      var $channels43=(($40+29)|0);
      var $41=HEAP8[($channels43)];
      var $inc=(($41+1)&255);
      HEAP8[($channels43)]=$inc;
      __label__ = 12; break;
    case 12: 
      var $42=$info_ptr_addr;
      var $channels45=(($42+29)|0);
      var $43=HEAPU8[($channels45)];
      var $conv46=(($43)&255);
      var $44=$info_ptr_addr;
      var $bit_depth47=(($44+24)|0);
      var $45=HEAPU8[($bit_depth47)];
      var $conv48=(($45)&255);
      var $mul=(($conv46*$conv48)|0);
      var $conv49=(($mul) & 255);
      var $46=$info_ptr_addr;
      var $pixel_depth=(($46+30)|0);
      HEAP8[($pixel_depth)]=$conv49;
      var $47=$width_addr;
      var $cmp50=(($47)>>>0) > 536870798;
      if ($cmp50) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $48=$info_ptr_addr;
      var $rowbytes=(($48+12)|0);
      HEAP32[(($rowbytes)>>2)]=0;
      __label__ = 18; break;
    case 14: 
      var $49=$info_ptr_addr;
      var $pixel_depth54=(($49+30)|0);
      var $50=HEAPU8[($pixel_depth54)];
      var $conv55=(($50)&255);
      var $cmp56=(($conv55)|0) >= 8;
      if ($cmp56) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $51=$width_addr;
      var $52=$info_ptr_addr;
      var $pixel_depth58=(($52+30)|0);
      var $53=HEAPU8[($pixel_depth58)];
      var $conv59=(($53)&255);
      var $shr=$conv59 >>> 3;
      var $mul60=(($51*$shr)|0);
      var $cond = $mul60;__label__ = 17; break;
    case 16: 
      var $54=$width_addr;
      var $55=$info_ptr_addr;
      var $pixel_depth61=(($55+30)|0);
      var $56=HEAPU8[($pixel_depth61)];
      var $conv62=(($56)&255);
      var $mul63=(($54*$conv62)|0);
      var $add=(($mul63+7)|0);
      var $shr64=$add >>> 3;
      var $cond = $shr64;__label__ = 17; break;
    case 17: 
      var $cond;
      var $57=$info_ptr_addr;
      var $rowbytes65=(($57+12)|0);
      HEAP32[(($rowbytes65)>>2)]=$cond;
      __label__ = 18; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_IHDR["X"]=1;

function _png_set_pHYs($png_ptr, $info_ptr, $res_x, $res_y, $unit_type) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $res_x_addr;
      var $res_y_addr;
      var $unit_type_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $res_x_addr=$res_x;
      $res_y_addr=$res_y;
      $unit_type_addr=$unit_type;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$res_x_addr;
      var $3=$info_ptr_addr;
      var $x_pixels_per_unit=(($3+112)|0);
      HEAP32[(($x_pixels_per_unit)>>2)]=$2;
      var $4=$res_y_addr;
      var $5=$info_ptr_addr;
      var $y_pixels_per_unit=(($5+116)|0);
      HEAP32[(($y_pixels_per_unit)>>2)]=$4;
      var $6=$unit_type_addr;
      var $conv=(($6) & 255);
      var $7=$info_ptr_addr;
      var $phys_unit_type=(($7+120)|0);
      HEAP8[($phys_unit_type)]=$conv;
      var $8=$info_ptr_addr;
      var $valid=(($8+8)|0);
      var $9=HEAP32[(($valid)>>2)];
      var $or=$9 | 128;
      HEAP32[(($valid)>>2)]=$or;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_sRGB($png_ptr, $info_ptr, $srgb_intent) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $srgb_intent_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $srgb_intent_addr=$srgb_intent;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$srgb_intent_addr;
      var $conv=(($2) & 255);
      var $3=$info_ptr_addr;
      var $srgb_intent2=(($3+44)|0);
      HEAP8[($srgb_intent2)]=$conv;
      var $4=$info_ptr_addr;
      var $valid=(($4+8)|0);
      var $5=HEAP32[(($valid)>>2)];
      var $or=$5 | 2048;
      HEAP32[(($valid)>>2)]=$or;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_pCAL($png_ptr, $info_ptr, $purpose, $X0, $X1, $type, $nparams, $units, $params) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $purpose_addr;
      var $X0_addr;
      var $X1_addr;
      var $type_addr;
      var $nparams_addr;
      var $units_addr;
      var $params_addr;
      var $length;
      var $i;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $purpose_addr=$purpose;
      $X0_addr=$X0;
      $X1_addr=$X1;
      $type_addr=$type;
      $nparams_addr=$nparams;
      $units_addr=$units;
      $params_addr=$params;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 26; break;
    case 4: 
      var $2=$purpose_addr;
      var $call=_strlen($2);
      var $add=(($call+1)|0);
      $length=$add;
      var $3=$type_addr;
      var $cmp2=(($3)|0) < 0;
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $4=$type_addr;
      var $cmp4=(($4)|0) > 3;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $5=$png_ptr_addr;
      _png_error($5, ((STRING_TABLE.__str14974)|0));
      __label__ = 7; break;
    case 7: 
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $6=$i;
      var $7=$nparams_addr;
      var $cmp7=(($6)|0) < (($7)|0);
      if ($cmp7) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $8=$i;
      var $9=$params_addr;
      var $arrayidx=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $11=$i;
      var $12=$params_addr;
      var $arrayidx8=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx8)>>2)];
      var $call9=_strlen($13);
      var $call10=_png_check_fp_string($10, $call9);
      var $tobool=(($call10)|0)!=0;
      if ($tobool) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $14=$png_ptr_addr;
      _png_error($14, ((STRING_TABLE.__str15975)|0));
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $15=$i;
      var $inc=(($15+1)|0);
      $i=$inc;
      __label__ = 8; break;
    case 13: 
      var $16=$png_ptr_addr;
      var $17=$length;
      var $call13=_png_malloc_warn($16, $17);
      var $18=$info_ptr_addr;
      var $pcal_purpose=(($18+160)|0);
      HEAP32[(($pcal_purpose)>>2)]=$call13;
      var $19=$info_ptr_addr;
      var $pcal_purpose14=(($19+160)|0);
      var $20=HEAP32[(($pcal_purpose14)>>2)];
      var $cmp15=(($20)|0)==0;
      if ($cmp15) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $21=$png_ptr_addr;
      _png_warning($21, ((STRING_TABLE.__str16976)|0));
      __label__ = 26; break;
    case 15: 
      var $22=$info_ptr_addr;
      var $pcal_purpose18=(($22+160)|0);
      var $23=HEAP32[(($pcal_purpose18)>>2)];
      var $24=$purpose_addr;
      var $25=$length;
      assert($25 % 1 === 0, 'memcpy given ' + $25 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($23, $24, $25, 1);
      var $26=$X0_addr;
      var $27=$info_ptr_addr;
      var $pcal_X0=(($27+164)|0);
      HEAP32[(($pcal_X0)>>2)]=$26;
      var $28=$X1_addr;
      var $29=$info_ptr_addr;
      var $pcal_X1=(($29+168)|0);
      HEAP32[(($pcal_X1)>>2)]=$28;
      var $30=$type_addr;
      var $conv=(($30) & 255);
      var $31=$info_ptr_addr;
      var $pcal_type=(($31+180)|0);
      HEAP8[($pcal_type)]=$conv;
      var $32=$nparams_addr;
      var $conv19=(($32) & 255);
      var $33=$info_ptr_addr;
      var $pcal_nparams=(($33+181)|0);
      HEAP8[($pcal_nparams)]=$conv19;
      var $34=$units_addr;
      var $call20=_strlen($34);
      var $add21=(($call20+1)|0);
      $length=$add21;
      var $35=$png_ptr_addr;
      var $36=$length;
      var $call22=_png_malloc_warn($35, $36);
      var $37=$info_ptr_addr;
      var $pcal_units=(($37+172)|0);
      HEAP32[(($pcal_units)>>2)]=$call22;
      var $38=$info_ptr_addr;
      var $pcal_units23=(($38+172)|0);
      var $39=HEAP32[(($pcal_units23)>>2)];
      var $cmp24=(($39)|0)==0;
      if ($cmp24) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $40=$png_ptr_addr;
      _png_warning($40, ((STRING_TABLE.__str17977)|0));
      __label__ = 26; break;
    case 17: 
      var $41=$info_ptr_addr;
      var $pcal_units28=(($41+172)|0);
      var $42=HEAP32[(($pcal_units28)>>2)];
      var $43=$units_addr;
      var $44=$length;
      assert($44 % 1 === 0, 'memcpy given ' + $44 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($42, $43, $44, 1);
      var $45=$png_ptr_addr;
      var $46=$nparams_addr;
      var $add29=(($46+1)|0);
      var $mul=((($add29<<2))|0);
      var $call30=_png_malloc_warn($45, $mul);
      var $47=$call30;
      var $48=$info_ptr_addr;
      var $pcal_params=(($48+176)|0);
      HEAP32[(($pcal_params)>>2)]=$47;
      var $49=$info_ptr_addr;
      var $pcal_params31=(($49+176)|0);
      var $50=HEAP32[(($pcal_params31)>>2)];
      var $cmp32=(($50)|0)==0;
      if ($cmp32) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $51=$png_ptr_addr;
      _png_warning($51, ((STRING_TABLE.__str18978)|0));
      __label__ = 26; break;
    case 19: 
      var $52=$info_ptr_addr;
      var $pcal_params36=(($52+176)|0);
      var $53=HEAP32[(($pcal_params36)>>2)];
      var $54=$53;
      var $55=$nparams_addr;
      var $add37=(($55+1)|0);
      var $mul38=((($add37<<2))|0);
      _memset($54, 0, $mul38, 1);
      $i=0;
      __label__ = 20; break;
    case 20: 
      var $56=$i;
      var $57=$nparams_addr;
      var $cmp40=(($56)|0) < (($57)|0);
      if ($cmp40) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $58=$i;
      var $59=$params_addr;
      var $arrayidx43=(($59+($58<<2))|0);
      var $60=HEAP32[(($arrayidx43)>>2)];
      var $call44=_strlen($60);
      var $add45=(($call44+1)|0);
      $length=$add45;
      var $61=$png_ptr_addr;
      var $62=$length;
      var $call46=_png_malloc_warn($61, $62);
      var $63=$i;
      var $64=$info_ptr_addr;
      var $pcal_params47=(($64+176)|0);
      var $65=HEAP32[(($pcal_params47)>>2)];
      var $arrayidx48=(($65+($63<<2))|0);
      HEAP32[(($arrayidx48)>>2)]=$call46;
      var $66=$i;
      var $67=$info_ptr_addr;
      var $pcal_params49=(($67+176)|0);
      var $68=HEAP32[(($pcal_params49)>>2)];
      var $arrayidx50=(($68+($66<<2))|0);
      var $69=HEAP32[(($arrayidx50)>>2)];
      var $cmp51=(($69)|0)==0;
      if ($cmp51) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $70=$png_ptr_addr;
      _png_warning($70, ((STRING_TABLE.__str19979)|0));
      __label__ = 26; break;
    case 23: 
      var $71=$i;
      var $72=$info_ptr_addr;
      var $pcal_params55=(($72+176)|0);
      var $73=HEAP32[(($pcal_params55)>>2)];
      var $arrayidx56=(($73+($71<<2))|0);
      var $74=HEAP32[(($arrayidx56)>>2)];
      var $75=$i;
      var $76=$params_addr;
      var $arrayidx57=(($76+($75<<2))|0);
      var $77=HEAP32[(($arrayidx57)>>2)];
      var $78=$length;
      assert($78 % 1 === 0, 'memcpy given ' + $78 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($74, $77, $78, 1);
      __label__ = 24; break;
    case 24: 
      var $79=$i;
      var $inc59=(($79+1)|0);
      $i=$inc59;
      __label__ = 20; break;
    case 25: 
      var $80=$info_ptr_addr;
      var $valid=(($80+8)|0);
      var $81=HEAP32[(($valid)>>2)];
      var $or=$81 | 1024;
      HEAP32[(($valid)>>2)]=$or;
      var $82=$info_ptr_addr;
      var $free_me=(($82+184)|0);
      var $83=HEAP32[(($free_me)>>2)];
      var $or61=$83 | 128;
      HEAP32[(($free_me)>>2)]=$or61;
      __label__ = 26; break;
    case 26: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_pCAL["X"]=1;

function _png_set_sCAL_s($png_ptr, $info_ptr, $unit, $swidth, $sheight) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $unit_addr;
      var $swidth_addr;
      var $sheight_addr;
      var $lengthw;
      var $lengthh;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $unit_addr=$unit;
      $swidth_addr=$swidth;
      $sheight_addr=$sheight;
      $lengthw=0;
      $lengthh=0;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 22; break;
    case 4: 
      var $2=$unit_addr;
      var $cmp2=(($2)|0)!=1;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $3=$unit_addr;
      var $cmp3=(($3)|0)!=2;
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $4=$png_ptr_addr;
      _png_error($4, ((STRING_TABLE.__str20980)|0));
      __label__ = 7; break;
    case 7: 
      var $5=$swidth_addr;
      var $cmp6=(($5)|0)==0;
      if ($cmp6) { __label__ = 11; break; } else { __label__ = 8; break; }
    case 8: 
      var $6=$swidth_addr;
      var $call=_strlen($6);
      $lengthw=$call;
      var $cmp8=(($call)|0)==0;
      if ($cmp8) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $7=$swidth_addr;
      var $arrayidx=(($7)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv=(($8 << 24) >> 24);
      var $cmp10=(($conv)|0)==45;
      if ($cmp10) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $9=$swidth_addr;
      var $10=$lengthw;
      var $call13=_png_check_fp_string($9, $10);
      var $tobool=(($call13)|0)!=0;
      if ($tobool) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $11=$png_ptr_addr;
      _png_error($11, ((STRING_TABLE.__str21981)|0));
      __label__ = 12; break;
    case 12: 
      var $12=$sheight_addr;
      var $cmp16=(($12)|0)==0;
      if ($cmp16) { __label__ = 16; break; } else { __label__ = 13; break; }
    case 13: 
      var $13=$sheight_addr;
      var $call19=_strlen($13);
      $lengthh=$call19;
      var $cmp20=(($call19)|0)==0;
      if ($cmp20) { __label__ = 16; break; } else { __label__ = 14; break; }
    case 14: 
      var $14=$sheight_addr;
      var $arrayidx23=(($14)|0);
      var $15=HEAP8[($arrayidx23)];
      var $conv24=(($15 << 24) >> 24);
      var $cmp25=(($conv24)|0)==45;
      if ($cmp25) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $16=$sheight_addr;
      var $17=$lengthh;
      var $call28=_png_check_fp_string($16, $17);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $18=$png_ptr_addr;
      _png_error($18, ((STRING_TABLE.__str22982)|0));
      __label__ = 17; break;
    case 17: 
      var $19=$unit_addr;
      var $conv32=(($19) & 255);
      var $20=$info_ptr_addr;
      var $scal_unit=(($20+220)|0);
      HEAP8[($scal_unit)]=$conv32;
      var $21=$lengthw;
      var $inc=(($21+1)|0);
      $lengthw=$inc;
      var $22=$png_ptr_addr;
      var $23=$lengthw;
      var $call33=_png_malloc_warn($22, $23);
      var $24=$info_ptr_addr;
      var $scal_s_width=(($24+224)|0);
      HEAP32[(($scal_s_width)>>2)]=$call33;
      var $25=$info_ptr_addr;
      var $scal_s_width34=(($25+224)|0);
      var $26=HEAP32[(($scal_s_width34)>>2)];
      var $cmp35=(($26)|0)==0;
      if ($cmp35) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $27=$png_ptr_addr;
      _png_warning($27, ((STRING_TABLE.__str23983)|0));
      __label__ = 22; break;
    case 19: 
      var $28=$info_ptr_addr;
      var $scal_s_width39=(($28+224)|0);
      var $29=HEAP32[(($scal_s_width39)>>2)];
      var $30=$swidth_addr;
      var $31=$lengthw;
      assert($31 % 1 === 0, 'memcpy given ' + $31 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($29, $30, $31, 1);
      var $32=$lengthh;
      var $inc40=(($32+1)|0);
      $lengthh=$inc40;
      var $33=$png_ptr_addr;
      var $34=$lengthh;
      var $call41=_png_malloc_warn($33, $34);
      var $35=$info_ptr_addr;
      var $scal_s_height=(($35+228)|0);
      HEAP32[(($scal_s_height)>>2)]=$call41;
      var $36=$info_ptr_addr;
      var $scal_s_height42=(($36+228)|0);
      var $37=HEAP32[(($scal_s_height42)>>2)];
      var $cmp43=(($37)|0)==0;
      if ($cmp43) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $38=$png_ptr_addr;
      var $39=$info_ptr_addr;
      var $scal_s_width46=(($39+224)|0);
      var $40=HEAP32[(($scal_s_width46)>>2)];
      _png_free($38, $40);
      var $41=$info_ptr_addr;
      var $scal_s_width47=(($41+224)|0);
      HEAP32[(($scal_s_width47)>>2)]=0;
      var $42=$png_ptr_addr;
      _png_warning($42, ((STRING_TABLE.__str23983)|0));
      __label__ = 22; break;
    case 21: 
      var $43=$info_ptr_addr;
      var $scal_s_height49=(($43+228)|0);
      var $44=HEAP32[(($scal_s_height49)>>2)];
      var $45=$sheight_addr;
      var $46=$lengthh;
      assert($46 % 1 === 0, 'memcpy given ' + $46 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($44, $45, $46, 1);
      var $47=$info_ptr_addr;
      var $valid=(($47+8)|0);
      var $48=HEAP32[(($valid)>>2)];
      var $or=$48 | 16384;
      HEAP32[(($valid)>>2)]=$or;
      var $49=$info_ptr_addr;
      var $free_me=(($49+184)|0);
      var $50=HEAP32[(($free_me)>>2)];
      var $or50=$50 | 256;
      HEAP32[(($free_me)>>2)]=$or50;
      __label__ = 22; break;
    case 22: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_sCAL_s["X"]=1;

function _png_set_sCAL($png_ptr, $info_ptr, $unit, $width, $height) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $unit_addr;
      var $width_addr;
      var $height_addr;
      var $swidth=__stackBase__;
      var $sheight=__stackBase__+20;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $unit_addr=$unit;
      $width_addr=$width;
      $height_addr=$height;
      var $0=$width_addr;
      var $cmp=$0 <= 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      _png_warning($1, ((STRING_TABLE.__str24984)|0));
      __label__ = 7; break;
    case 3: 
      var $2=$height_addr;
      var $cmp1=$2 <= 0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$png_ptr_addr;
      _png_warning($3, ((STRING_TABLE.__str25985)|0));
      __label__ = 6; break;
    case 5: 
      var $4=$png_ptr_addr;
      var $arraydecay=(($swidth)|0);
      var $5=$width_addr;
      _png_ascii_from_fp($4, $arraydecay, 18, $5, 5);
      var $6=$png_ptr_addr;
      var $arraydecay4=(($sheight)|0);
      var $7=$height_addr;
      _png_ascii_from_fp($6, $arraydecay4, 18, $7, 5);
      var $8=$png_ptr_addr;
      var $9=$info_ptr_addr;
      var $10=$unit_addr;
      var $arraydecay5=(($swidth)|0);
      var $arraydecay6=(($sheight)|0);
      _png_set_sCAL_s($8, $9, $10, $arraydecay5, $arraydecay6);
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_PLTE($png_ptr, $info_ptr, $palette, $num_palette) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $palette_addr;
      var $num_palette_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $palette_addr=$palette;
      $num_palette_addr=$num_palette;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 11; break;
    case 4: 
      var $2=$num_palette_addr;
      var $cmp2=(($2)|0) < 0;
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $3=$num_palette_addr;
      var $cmp4=(($3)|0) > 256;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $4=$info_ptr_addr;
      var $color_type=(($4+25)|0);
      var $5=HEAPU8[($color_type)];
      var $conv=(($5)&255);
      var $cmp6=(($conv)|0)==3;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $6=$png_ptr_addr;
      _png_error($6, ((STRING_TABLE.__str26986)|0));
      __label__ = 9; break;
    case 8: 
      var $7=$png_ptr_addr;
      _png_warning($7, ((STRING_TABLE.__str26986)|0));
      __label__ = 11; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $8=$png_ptr_addr;
      var $9=$info_ptr_addr;
      _png_free_data($8, $9, 4096, 0);
      var $10=$png_ptr_addr;
      var $call=_png_calloc($10, 768);
      var $11=$call;
      var $12=$png_ptr_addr;
      var $palette11=(($12+272)|0);
      HEAP32[(($palette11)>>2)]=$11;
      var $13=$png_ptr_addr;
      var $palette12=(($13+272)|0);
      var $14=HEAP32[(($palette12)>>2)];
      var $15=$14;
      var $16=$palette_addr;
      var $17=$16;
      var $18=$num_palette_addr;
      var $mul=(($18*3)|0);
      assert($mul % 1 === 0, 'memcpy given ' + $mul + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($15, $17, $mul, 1);
      var $19=$png_ptr_addr;
      var $palette13=(($19+272)|0);
      var $20=HEAP32[(($palette13)>>2)];
      var $21=$info_ptr_addr;
      var $palette14=(($21+16)|0);
      HEAP32[(($palette14)>>2)]=$20;
      var $22=$num_palette_addr;
      var $conv15=(($22) & 65535);
      var $23=$png_ptr_addr;
      var $num_palette16=(($23+276)|0);
      HEAP16[(($num_palette16)>>1)]=$conv15;
      var $24=$info_ptr_addr;
      var $num_palette17=(($24+20)|0);
      HEAP16[(($num_palette17)>>1)]=$conv15;
      var $25=$info_ptr_addr;
      var $free_me=(($25+184)|0);
      var $26=HEAP32[(($free_me)>>2)];
      var $or=$26 | 4096;
      HEAP32[(($free_me)>>2)]=$or;
      var $27=$info_ptr_addr;
      var $valid=(($27+8)|0);
      var $28=HEAP32[(($valid)>>2)];
      var $or18=$28 | 8;
      HEAP32[(($valid)>>2)]=$or18;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_PLTE["X"]=1;

function _png_set_sBIT($png_ptr, $info_ptr, $sig_bit) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $sig_bit_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $sig_bit_addr=$sig_bit;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$info_ptr_addr;
      var $sig_bit2=(($2+68)|0);
      var $3=$sig_bit2;
      var $4=$sig_bit_addr;
      var $5=$4;
      assert(5 % 1 === 0, 'memcpy given ' + 5 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($3)]=HEAP8[($5)];HEAP8[($3+1)]=HEAP8[($5+1)];HEAP8[($3+2)]=HEAP8[($5+2)];HEAP8[($3+3)]=HEAP8[($5+3)];HEAP8[($3+4)]=HEAP8[($5+4)];
      var $6=$info_ptr_addr;
      var $valid=(($6+8)|0);
      var $7=HEAP32[(($valid)>>2)];
      var $or=$7 | 2;
      HEAP32[(($valid)>>2)]=$or;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_sRGB_gAMA_and_cHRM($png_ptr, $info_ptr, $srgb_intent) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $srgb_intent_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $srgb_intent_addr=$srgb_intent;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $3=$info_ptr_addr;
      var $4=$srgb_intent_addr;
      _png_set_sRGB($2, $3, $4);
      var $5=$png_ptr_addr;
      var $6=$info_ptr_addr;
      _png_set_gAMA_fixed($5, $6, 45455);
      var $7=$png_ptr_addr;
      var $8=$info_ptr_addr;
      _png_set_cHRM_fixed($7, $8, 31270, 32900, 64000, 33000, 30000, 60000, 15000, 6000);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_iCCP($png_ptr, $info_ptr, $name, $compression_type, $profile, $proflen) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $name_addr;
      var $compression_type_addr;
      var $profile_addr;
      var $proflen_addr;
      var $new_iccp_name;
      var $new_iccp_profile;
      var $length;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $name_addr=$name;
      $compression_type_addr=$compression_type;
      $profile_addr=$profile;
      $proflen_addr=$proflen;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$name_addr;
      var $cmp3=(($2)|0)==0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$profile_addr;
      var $cmp5=(($3)|0)==0;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 11; break;
    case 6: 
      var $4=$name_addr;
      var $call=_strlen($4);
      var $add=(($call+1)|0);
      $length=$add;
      var $5=$png_ptr_addr;
      var $6=$length;
      var $call6=_png_malloc_warn($5, $6);
      $new_iccp_name=$call6;
      var $7=$new_iccp_name;
      var $cmp7=(($7)|0)==0;
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $8=$png_ptr_addr;
      _png_warning($8, ((STRING_TABLE.__str27987)|0));
      __label__ = 11; break;
    case 8: 
      var $9=$new_iccp_name;
      var $10=$name_addr;
      var $11=$length;
      assert($11 % 1 === 0, 'memcpy given ' + $11 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($9, $10, $11, 1);
      var $12=$png_ptr_addr;
      var $13=$proflen_addr;
      var $call10=_png_malloc_warn($12, $13);
      $new_iccp_profile=$call10;
      var $14=$new_iccp_profile;
      var $cmp11=(($14)|0)==0;
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$png_ptr_addr;
      var $16=$new_iccp_name;
      _png_free($15, $16);
      var $17=$png_ptr_addr;
      _png_warning($17, ((STRING_TABLE.__str28988)|0));
      __label__ = 11; break;
    case 10: 
      var $18=$new_iccp_profile;
      var $19=$profile_addr;
      var $20=$proflen_addr;
      assert($20 % 1 === 0, 'memcpy given ' + $20 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($18, $19, $20, 1);
      var $21=$png_ptr_addr;
      var $22=$info_ptr_addr;
      _png_free_data($21, $22, 16, 0);
      var $23=$proflen_addr;
      var $24=$info_ptr_addr;
      var $iccp_proflen=(($24+204)|0);
      HEAP32[(($iccp_proflen)>>2)]=$23;
      var $25=$new_iccp_name;
      var $26=$info_ptr_addr;
      var $iccp_name=(($26+196)|0);
      HEAP32[(($iccp_name)>>2)]=$25;
      var $27=$new_iccp_profile;
      var $28=$info_ptr_addr;
      var $iccp_profile=(($28+200)|0);
      HEAP32[(($iccp_profile)>>2)]=$27;
      var $29=$compression_type_addr;
      var $conv=(($29) & 255);
      var $30=$info_ptr_addr;
      var $iccp_compression=(($30+208)|0);
      HEAP8[($iccp_compression)]=$conv;
      var $31=$info_ptr_addr;
      var $free_me=(($31+184)|0);
      var $32=HEAP32[(($free_me)>>2)];
      var $or=$32 | 16;
      HEAP32[(($free_me)>>2)]=$or;
      var $33=$info_ptr_addr;
      var $valid=(($33+8)|0);
      var $34=HEAP32[(($valid)>>2)];
      var $or14=$34 | 4096;
      HEAP32[(($valid)>>2)]=$or14;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_iCCP["X"]=1;

function _png_set_text($png_ptr, $info_ptr, $text_ptr, $num_text) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $text_ptr_addr;
      var $num_text_addr;
      var $ret;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $text_ptr_addr=$text_ptr;
      $num_text_addr=$num_text;
      var $0=$png_ptr_addr;
      var $1=$info_ptr_addr;
      var $2=$text_ptr_addr;
      var $3=$num_text_addr;
      var $call=_png_set_text_2($0, $1, $2, $3);
      $ret=$call;
      var $4=$ret;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $5=$png_ptr_addr;
      _png_error($5, ((STRING_TABLE.__str29989)|0));
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_text_2($png_ptr, $info_ptr, $text_ptr, $num_text) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $text_ptr_addr;
      var $num_text_addr;
      var $i;
      var $old_max_text;
      var $old_num_text;
      var $old_text;
      var $text_length;
      var $key_len;
      var $lang_len;
      var $lang_key_len;
      var $textp;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $text_ptr_addr=$text_ptr;
      $num_text_addr=$num_text;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$num_text_addr;
      var $cmp3=(($2)|0)==0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=0;
      __label__ = 50; break;
    case 5: 
      var $3=$info_ptr_addr;
      var $num_text4=(($3+48)|0);
      var $4=HEAP32[(($num_text4)>>2)];
      var $5=$num_text_addr;
      var $add=(($4+$5)|0);
      var $6=$info_ptr_addr;
      var $max_text=(($6+52)|0);
      var $7=HEAP32[(($max_text)>>2)];
      var $cmp5=(($add)|0) > (($7)|0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 14; break; }
    case 6: 
      var $8=$info_ptr_addr;
      var $max_text7=(($8+52)|0);
      var $9=HEAP32[(($max_text7)>>2)];
      $old_max_text=$9;
      var $10=$info_ptr_addr;
      var $num_text8=(($10+48)|0);
      var $11=HEAP32[(($num_text8)>>2)];
      $old_num_text=$11;
      var $12=$info_ptr_addr;
      var $text=(($12+56)|0);
      var $13=HEAP32[(($text)>>2)];
      var $cmp9=(($13)|0)!=0;
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $14=$info_ptr_addr;
      var $num_text11=(($14+48)|0);
      var $15=HEAP32[(($num_text11)>>2)];
      var $16=$num_text_addr;
      var $add12=(($15+$16)|0);
      var $add13=(($add12+8)|0);
      var $17=$info_ptr_addr;
      var $max_text14=(($17+52)|0);
      HEAP32[(($max_text14)>>2)]=$add13;
      var $18=$info_ptr_addr;
      var $text15=(($18+56)|0);
      var $19=HEAP32[(($text15)>>2)];
      $old_text=$19;
      var $20=$png_ptr_addr;
      var $21=$info_ptr_addr;
      var $max_text16=(($21+52)|0);
      var $22=HEAP32[(($max_text16)>>2)];
      var $mul=(($22*28)|0);
      var $call=_png_malloc_warn($20, $mul);
      var $23=$call;
      var $24=$info_ptr_addr;
      var $text17=(($24+56)|0);
      HEAP32[(($text17)>>2)]=$23;
      var $25=$info_ptr_addr;
      var $text18=(($25+56)|0);
      var $26=HEAP32[(($text18)>>2)];
      var $cmp19=(($26)|0)==0;
      if ($cmp19) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $27=$old_max_text;
      var $28=$info_ptr_addr;
      var $max_text21=(($28+52)|0);
      HEAP32[(($max_text21)>>2)]=$27;
      var $29=$old_text;
      var $30=$info_ptr_addr;
      var $text22=(($30+56)|0);
      HEAP32[(($text22)>>2)]=$29;
      $retval=1;
      __label__ = 50; break;
    case 9: 
      var $31=$info_ptr_addr;
      var $text24=(($31+56)|0);
      var $32=HEAP32[(($text24)>>2)];
      var $33=$32;
      var $34=$old_text;
      var $35=$34;
      var $36=$old_max_text;
      var $mul25=(($36*28)|0);
      assert($mul25 % 1 === 0, 'memcpy given ' + $mul25 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($33, $35, $mul25, 1);
      var $37=$png_ptr_addr;
      var $38=$old_text;
      var $39=$38;
      _png_free($37, $39);
      __label__ = 13; break;
    case 10: 
      var $40=$num_text_addr;
      var $add26=(($40+8)|0);
      var $41=$info_ptr_addr;
      var $max_text27=(($41+52)|0);
      HEAP32[(($max_text27)>>2)]=$add26;
      var $42=$info_ptr_addr;
      var $num_text28=(($42+48)|0);
      HEAP32[(($num_text28)>>2)]=0;
      var $43=$png_ptr_addr;
      var $44=$info_ptr_addr;
      var $max_text29=(($44+52)|0);
      var $45=HEAP32[(($max_text29)>>2)];
      var $mul30=(($45*28)|0);
      var $call31=_png_malloc_warn($43, $mul30);
      var $46=$call31;
      var $47=$info_ptr_addr;
      var $text32=(($47+56)|0);
      HEAP32[(($text32)>>2)]=$46;
      var $48=$info_ptr_addr;
      var $text33=(($48+56)|0);
      var $49=HEAP32[(($text33)>>2)];
      var $cmp34=(($49)|0)==0;
      if ($cmp34) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $50=$old_num_text;
      var $51=$info_ptr_addr;
      var $num_text36=(($51+48)|0);
      HEAP32[(($num_text36)>>2)]=$50;
      var $52=$old_max_text;
      var $53=$info_ptr_addr;
      var $max_text37=(($53+52)|0);
      HEAP32[(($max_text37)>>2)]=$52;
      $retval=1;
      __label__ = 50; break;
    case 12: 
      var $54=$info_ptr_addr;
      var $free_me=(($54+184)|0);
      var $55=HEAP32[(($free_me)>>2)];
      var $or=$55 | 16384;
      HEAP32[(($free_me)>>2)]=$or;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $56=$i;
      var $57=$num_text_addr;
      var $cmp41=(($56)|0) < (($57)|0);
      if ($cmp41) { __label__ = 16; break; } else { __label__ = 49; break; }
    case 16: 
      var $58=$info_ptr_addr;
      var $num_text42=(($58+48)|0);
      var $59=HEAP32[(($num_text42)>>2)];
      var $60=$info_ptr_addr;
      var $text43=(($60+56)|0);
      var $61=HEAP32[(($text43)>>2)];
      var $arrayidx=(($61+$59*28)|0);
      $textp=$arrayidx;
      var $62=$i;
      var $63=$text_ptr_addr;
      var $arrayidx44=(($63+$62*28)|0);
      var $key=(($arrayidx44+4)|0);
      var $64=HEAP32[(($key)>>2)];
      var $cmp45=(($64)|0)==0;
      if ($cmp45) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 48; break;
    case 18: 
      var $65=$i;
      var $66=$text_ptr_addr;
      var $arrayidx48=(($66+$65*28)|0);
      var $compression=(($arrayidx48)|0);
      var $67=HEAP32[(($compression)>>2)];
      var $cmp49=(($67)|0) < -1;
      if ($cmp49) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $68=$i;
      var $69=$text_ptr_addr;
      var $arrayidx51=(($69+$68*28)|0);
      var $compression52=(($arrayidx51)|0);
      var $70=HEAP32[(($compression52)>>2)];
      var $cmp53=(($70)|0) >= 3;
      if ($cmp53) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $71=$png_ptr_addr;
      _png_warning($71, ((STRING_TABLE.__str30990)|0));
      __label__ = 48; break;
    case 21: 
      var $72=$i;
      var $73=$text_ptr_addr;
      var $arrayidx56=(($73+$72*28)|0);
      var $key57=(($arrayidx56+4)|0);
      var $74=HEAP32[(($key57)>>2)];
      var $call58=_strlen($74);
      $key_len=$call58;
      var $75=$i;
      var $76=$text_ptr_addr;
      var $arrayidx59=(($76+$75*28)|0);
      var $compression60=(($arrayidx59)|0);
      var $77=HEAP32[(($compression60)>>2)];
      var $cmp61=(($77)|0) <= 0;
      if ($cmp61) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $lang_len=0;
      $lang_key_len=0;
      __label__ = 30; break;
    case 23: 
      var $78=$i;
      var $79=$text_ptr_addr;
      var $arrayidx64=(($79+$78*28)|0);
      var $lang=(($arrayidx64+20)|0);
      var $80=HEAP32[(($lang)>>2)];
      var $cmp65=(($80)|0)!=0;
      if ($cmp65) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $81=$i;
      var $82=$text_ptr_addr;
      var $arrayidx67=(($82+$81*28)|0);
      var $lang68=(($arrayidx67+20)|0);
      var $83=HEAP32[(($lang68)>>2)];
      var $call69=_strlen($83);
      $lang_len=$call69;
      __label__ = 26; break;
    case 25: 
      $lang_len=0;
      __label__ = 26; break;
    case 26: 
      var $84=$i;
      var $85=$text_ptr_addr;
      var $arrayidx72=(($85+$84*28)|0);
      var $lang_key=(($arrayidx72+24)|0);
      var $86=HEAP32[(($lang_key)>>2)];
      var $cmp73=(($86)|0)!=0;
      if ($cmp73) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $87=$i;
      var $88=$text_ptr_addr;
      var $arrayidx75=(($88+$87*28)|0);
      var $lang_key76=(($arrayidx75+24)|0);
      var $89=HEAP32[(($lang_key76)>>2)];
      var $call77=_strlen($89);
      $lang_key_len=$call77;
      __label__ = 29; break;
    case 28: 
      $lang_key_len=0;
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $90=$i;
      var $91=$text_ptr_addr;
      var $arrayidx81=(($91+$90*28)|0);
      var $text82=(($arrayidx81+8)|0);
      var $92=HEAP32[(($text82)>>2)];
      var $cmp83=(($92)|0)==0;
      if ($cmp83) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $93=$i;
      var $94=$text_ptr_addr;
      var $arrayidx85=(($94+$93*28)|0);
      var $text86=(($arrayidx85+8)|0);
      var $95=HEAP32[(($text86)>>2)];
      var $arrayidx87=(($95)|0);
      var $96=HEAP8[($arrayidx87)];
      var $conv=(($96 << 24) >> 24);
      var $cmp88=(($conv)|0)==0;
      if ($cmp88) { __label__ = 32; break; } else { __label__ = 36; break; }
    case 32: 
      $text_length=0;
      var $97=$i;
      var $98=$text_ptr_addr;
      var $arrayidx91=(($98+$97*28)|0);
      var $compression92=(($arrayidx91)|0);
      var $99=HEAP32[(($compression92)>>2)];
      var $cmp93=(($99)|0) > 0;
      if ($cmp93) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $100=$textp;
      var $compression96=(($100)|0);
      HEAP32[(($compression96)>>2)]=1;
      __label__ = 35; break;
    case 34: 
      var $101=$textp;
      var $compression98=(($101)|0);
      HEAP32[(($compression98)>>2)]=-1;
      __label__ = 35; break;
    case 35: 
      __label__ = 37; break;
    case 36: 
      var $102=$i;
      var $103=$text_ptr_addr;
      var $arrayidx101=(($103+$102*28)|0);
      var $text102=(($arrayidx101+8)|0);
      var $104=HEAP32[(($text102)>>2)];
      var $call103=_strlen($104);
      $text_length=$call103;
      var $105=$i;
      var $106=$text_ptr_addr;
      var $arrayidx104=(($106+$105*28)|0);
      var $compression105=(($arrayidx104)|0);
      var $107=HEAP32[(($compression105)>>2)];
      var $108=$textp;
      var $compression106=(($108)|0);
      HEAP32[(($compression106)>>2)]=$107;
      __label__ = 37; break;
    case 37: 
      var $109=$png_ptr_addr;
      var $110=$key_len;
      var $111=$text_length;
      var $add108=(($110+$111)|0);
      var $112=$lang_len;
      var $add109=(($add108+$112)|0);
      var $113=$lang_key_len;
      var $add110=(($add109+$113)|0);
      var $add111=(($add110+4)|0);
      var $call112=_png_malloc_warn($109, $add111);
      var $114=$textp;
      var $key113=(($114+4)|0);
      HEAP32[(($key113)>>2)]=$call112;
      var $115=$textp;
      var $key114=(($115+4)|0);
      var $116=HEAP32[(($key114)>>2)];
      var $cmp115=(($116)|0)==0;
      if ($cmp115) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      $retval=1;
      __label__ = 50; break;
    case 39: 
      var $117=$textp;
      var $key119=(($117+4)|0);
      var $118=HEAP32[(($key119)>>2)];
      var $119=$i;
      var $120=$text_ptr_addr;
      var $arrayidx120=(($120+$119*28)|0);
      var $key121=(($arrayidx120+4)|0);
      var $121=HEAP32[(($key121)>>2)];
      var $122=$key_len;
      assert($122 % 1 === 0, 'memcpy given ' + $122 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($118, $121, $122, 1);
      var $123=$textp;
      var $key122=(($123+4)|0);
      var $124=HEAP32[(($key122)>>2)];
      var $125=$key_len;
      var $add_ptr=(($124+$125)|0);
      HEAP8[($add_ptr)]=0;
      var $126=$i;
      var $127=$text_ptr_addr;
      var $arrayidx123=(($127+$126*28)|0);
      var $compression124=(($arrayidx123)|0);
      var $128=HEAP32[(($compression124)>>2)];
      var $cmp125=(($128)|0) > 0;
      if ($cmp125) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $129=$textp;
      var $key128=(($129+4)|0);
      var $130=HEAP32[(($key128)>>2)];
      var $131=$key_len;
      var $add_ptr129=(($130+$131)|0);
      var $add_ptr130=(($add_ptr129+1)|0);
      var $132=$textp;
      var $lang131=(($132+20)|0);
      HEAP32[(($lang131)>>2)]=$add_ptr130;
      var $133=$textp;
      var $lang132=(($133+20)|0);
      var $134=HEAP32[(($lang132)>>2)];
      var $135=$i;
      var $136=$text_ptr_addr;
      var $arrayidx133=(($136+$135*28)|0);
      var $lang134=(($arrayidx133+20)|0);
      var $137=HEAP32[(($lang134)>>2)];
      var $138=$lang_len;
      assert($138 % 1 === 0, 'memcpy given ' + $138 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($134, $137, $138, 1);
      var $139=$textp;
      var $lang135=(($139+20)|0);
      var $140=HEAP32[(($lang135)>>2)];
      var $141=$lang_len;
      var $add_ptr136=(($140+$141)|0);
      HEAP8[($add_ptr136)]=0;
      var $142=$textp;
      var $lang137=(($142+20)|0);
      var $143=HEAP32[(($lang137)>>2)];
      var $144=$lang_len;
      var $add_ptr138=(($143+$144)|0);
      var $add_ptr139=(($add_ptr138+1)|0);
      var $145=$textp;
      var $lang_key140=(($145+24)|0);
      HEAP32[(($lang_key140)>>2)]=$add_ptr139;
      var $146=$textp;
      var $lang_key141=(($146+24)|0);
      var $147=HEAP32[(($lang_key141)>>2)];
      var $148=$i;
      var $149=$text_ptr_addr;
      var $arrayidx142=(($149+$148*28)|0);
      var $lang_key143=(($arrayidx142+24)|0);
      var $150=HEAP32[(($lang_key143)>>2)];
      var $151=$lang_key_len;
      assert($151 % 1 === 0, 'memcpy given ' + $151 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($147, $150, $151, 1);
      var $152=$textp;
      var $lang_key144=(($152+24)|0);
      var $153=HEAP32[(($lang_key144)>>2)];
      var $154=$lang_key_len;
      var $add_ptr145=(($153+$154)|0);
      HEAP8[($add_ptr145)]=0;
      var $155=$textp;
      var $lang_key146=(($155+24)|0);
      var $156=HEAP32[(($lang_key146)>>2)];
      var $157=$lang_key_len;
      var $add_ptr147=(($156+$157)|0);
      var $add_ptr148=(($add_ptr147+1)|0);
      var $158=$textp;
      var $text149=(($158+8)|0);
      HEAP32[(($text149)>>2)]=$add_ptr148;
      __label__ = 42; break;
    case 41: 
      var $159=$textp;
      var $lang151=(($159+20)|0);
      HEAP32[(($lang151)>>2)]=0;
      var $160=$textp;
      var $lang_key152=(($160+24)|0);
      HEAP32[(($lang_key152)>>2)]=0;
      var $161=$textp;
      var $key153=(($161+4)|0);
      var $162=HEAP32[(($key153)>>2)];
      var $163=$key_len;
      var $add_ptr154=(($162+$163)|0);
      var $add_ptr155=(($add_ptr154+1)|0);
      var $164=$textp;
      var $text156=(($164+8)|0);
      HEAP32[(($text156)>>2)]=$add_ptr155;
      __label__ = 42; break;
    case 42: 
      var $165=$text_length;
      var $tobool=(($165)|0)!=0;
      if ($tobool) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $166=$textp;
      var $text159=(($166+8)|0);
      var $167=HEAP32[(($text159)>>2)];
      var $168=$i;
      var $169=$text_ptr_addr;
      var $arrayidx160=(($169+$168*28)|0);
      var $text161=(($arrayidx160+8)|0);
      var $170=HEAP32[(($text161)>>2)];
      var $171=$text_length;
      assert($171 % 1 === 0, 'memcpy given ' + $171 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($167, $170, $171, 1);
      __label__ = 44; break;
    case 44: 
      var $172=$textp;
      var $text163=(($172+8)|0);
      var $173=HEAP32[(($text163)>>2)];
      var $174=$text_length;
      var $add_ptr164=(($173+$174)|0);
      HEAP8[($add_ptr164)]=0;
      var $175=$textp;
      var $compression165=(($175)|0);
      var $176=HEAP32[(($compression165)>>2)];
      var $cmp166=(($176)|0) > 0;
      if ($cmp166) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $177=$textp;
      var $text_length169=(($177+12)|0);
      HEAP32[(($text_length169)>>2)]=0;
      var $178=$text_length;
      var $179=$textp;
      var $itxt_length=(($179+16)|0);
      HEAP32[(($itxt_length)>>2)]=$178;
      __label__ = 47; break;
    case 46: 
      var $180=$text_length;
      var $181=$textp;
      var $text_length171=(($181+12)|0);
      HEAP32[(($text_length171)>>2)]=$180;
      var $182=$textp;
      var $itxt_length172=(($182+16)|0);
      HEAP32[(($itxt_length172)>>2)]=0;
      __label__ = 47; break;
    case 47: 
      var $183=$info_ptr_addr;
      var $num_text174=(($183+48)|0);
      var $184=HEAP32[(($num_text174)>>2)];
      var $inc=(($184+1)|0);
      HEAP32[(($num_text174)>>2)]=$inc;
      __label__ = 48; break;
    case 48: 
      var $185=$i;
      var $inc175=(($185+1)|0);
      $i=$inc175;
      __label__ = 15; break;
    case 49: 
      $retval=0;
      __label__ = 50; break;
    case 50: 
      var $186=$retval;
      ;
      return $186;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_text_2["X"]=1;

function _png_set_tIME($png_ptr, $info_ptr, $mod_time) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $mod_time_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $mod_time_addr=$mod_time;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$png_ptr_addr;
      var $mode=(($2+84)|0);
      var $3=HEAP32[(($mode)>>2)];
      var $and=$3 & 512;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 14; break;
    case 5: 
      var $4=$mod_time_addr;
      var $month=(($4+2)|0);
      var $5=HEAPU8[($month)];
      var $conv=(($5)&255);
      var $cmp3=(($conv)|0)==0;
      if ($cmp3) { __label__ = 12; break; } else { __label__ = 6; break; }
    case 6: 
      var $6=$mod_time_addr;
      var $month6=(($6+2)|0);
      var $7=HEAPU8[($month6)];
      var $conv7=(($7)&255);
      var $cmp8=(($conv7)|0) > 12;
      if ($cmp8) { __label__ = 12; break; } else { __label__ = 7; break; }
    case 7: 
      var $8=$mod_time_addr;
      var $day=(($8+3)|0);
      var $9=HEAPU8[($day)];
      var $conv11=(($9)&255);
      var $cmp12=(($conv11)|0)==0;
      if ($cmp12) { __label__ = 12; break; } else { __label__ = 8; break; }
    case 8: 
      var $10=$mod_time_addr;
      var $day15=(($10+3)|0);
      var $11=HEAPU8[($day15)];
      var $conv16=(($11)&255);
      var $cmp17=(($conv16)|0) > 31;
      if ($cmp17) { __label__ = 12; break; } else { __label__ = 9; break; }
    case 9: 
      var $12=$mod_time_addr;
      var $hour=(($12+4)|0);
      var $13=HEAPU8[($hour)];
      var $conv20=(($13)&255);
      var $cmp21=(($conv20)|0) > 23;
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 10; break; }
    case 10: 
      var $14=$mod_time_addr;
      var $minute=(($14+5)|0);
      var $15=HEAPU8[($minute)];
      var $conv24=(($15)&255);
      var $cmp25=(($conv24)|0) > 59;
      if ($cmp25) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $16=$mod_time_addr;
      var $second=(($16+6)|0);
      var $17=HEAPU8[($second)];
      var $conv28=(($17)&255);
      var $cmp29=(($conv28)|0) > 60;
      if ($cmp29) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $18=$png_ptr_addr;
      _png_warning($18, ((STRING_TABLE.__str31991)|0));
      __label__ = 14; break;
    case 13: 
      var $19=$info_ptr_addr;
      var $mod_time33=(($19+60)|0);
      var $20=$mod_time33;
      var $21=$mod_time_addr;
      var $22=$21;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($20)]=HEAP8[($22)];HEAP8[($20+1)]=HEAP8[($22+1)];HEAP8[($20+2)]=HEAP8[($22+2)];HEAP8[($20+3)]=HEAP8[($22+3)];HEAP8[($20+4)]=HEAP8[($22+4)];HEAP8[($20+5)]=HEAP8[($22+5)];HEAP8[($20+6)]=HEAP8[($22+6)];HEAP8[($20+7)]=HEAP8[($22+7)];
      var $23=$info_ptr_addr;
      var $valid=(($23+8)|0);
      var $24=HEAP32[(($valid)>>2)];
      var $or=$24 | 512;
      HEAP32[(($valid)>>2)]=$or;
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_tIME["X"]=1;

function _png_set_tRNS($png_ptr, $info_ptr, $trans_alpha, $num_trans, $trans_color) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $trans_alpha_addr;
      var $num_trans_addr;
      var $trans_color_addr;
      var $sample_max;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $trans_alpha_addr=$trans_alpha;
      $num_trans_addr=$num_trans;
      $trans_color_addr=$trans_color;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 22; break;
    case 4: 
      var $2=$trans_alpha_addr;
      var $cmp2=(($2)|0)!=0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $3=$png_ptr_addr;
      var $4=$info_ptr_addr;
      _png_free_data($3, $4, 8192, 0);
      var $5=$png_ptr_addr;
      var $call=_png_malloc($5, 256);
      var $6=$info_ptr_addr;
      var $trans_alpha4=(($6+76)|0);
      HEAP32[(($trans_alpha4)>>2)]=$call;
      var $7=$png_ptr_addr;
      var $trans_alpha5=(($7+396)|0);
      HEAP32[(($trans_alpha5)>>2)]=$call;
      var $8=$num_trans_addr;
      var $cmp6=(($8)|0) > 0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $9=$num_trans_addr;
      var $cmp7=(($9)|0) <= 256;
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $10=$info_ptr_addr;
      var $trans_alpha9=(($10+76)|0);
      var $11=HEAP32[(($trans_alpha9)>>2)];
      var $12=$trans_alpha_addr;
      var $13=$num_trans_addr;
      assert($13 % 1 === 0, 'memcpy given ' + $13 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($11, $12, $13, 1);
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $14=$trans_color_addr;
      var $cmp12=(($14)|0)!=0;
      if ($cmp12) { __label__ = 10; break; } else { __label__ = 20; break; }
    case 10: 
      var $15=$info_ptr_addr;
      var $bit_depth=(($15+24)|0);
      var $16=HEAPU8[($bit_depth)];
      var $conv=(($16)&255);
      var $shl=1 << $conv;
      $sample_max=$shl;
      var $17=$info_ptr_addr;
      var $color_type=(($17+25)|0);
      var $18=HEAPU8[($color_type)];
      var $conv14=(($18)&255);
      var $cmp15=(($conv14)|0)==0;
      if ($cmp15) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $19=$trans_color_addr;
      var $gray=(($19+8)|0);
      var $20=HEAPU16[(($gray)>>1)];
      var $conv18=(($20)&65535);
      var $21=$sample_max;
      var $cmp19=(($conv18)|0) > (($21)|0);
      if ($cmp19) { __label__ = 16; break; } else { __label__ = 12; break; }
    case 12: 
      var $22=$info_ptr_addr;
      var $color_type22=(($22+25)|0);
      var $23=HEAPU8[($color_type22)];
      var $conv23=(($23)&255);
      var $cmp24=(($conv23)|0)==2;
      if ($cmp24) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $24=$trans_color_addr;
      var $red=(($24+2)|0);
      var $25=HEAPU16[(($red)>>1)];
      var $conv27=(($25)&65535);
      var $26=$sample_max;
      var $cmp28=(($conv27)|0) > (($26)|0);
      if ($cmp28) { __label__ = 16; break; } else { __label__ = 14; break; }
    case 14: 
      var $27=$trans_color_addr;
      var $green=(($27+4)|0);
      var $28=HEAPU16[(($green)>>1)];
      var $conv31=(($28)&65535);
      var $29=$sample_max;
      var $cmp32=(($conv31)|0) > (($29)|0);
      if ($cmp32) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $30=$trans_color_addr;
      var $blue=(($30+6)|0);
      var $31=HEAPU16[(($blue)>>1)];
      var $conv35=(($31)&65535);
      var $32=$sample_max;
      var $cmp36=(($conv35)|0) > (($32)|0);
      if ($cmp36) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $33=$png_ptr_addr;
      _png_warning($33, ((STRING_TABLE.__str32992)|0));
      __label__ = 17; break;
    case 17: 
      var $34=$info_ptr_addr;
      var $trans_color40=(($34+80)|0);
      var $35=$trans_color40;
      var $36=$trans_color_addr;
      var $37=$36;
      assert(10 % 1 === 0, 'memcpy given ' + 10 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $37, $$dest = $35, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $38=$num_trans_addr;
      var $cmp41=(($38)|0)==0;
      if ($cmp41) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $num_trans_addr=1;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $39=$num_trans_addr;
      var $conv46=(($39) & 65535);
      var $40=$info_ptr_addr;
      var $num_trans47=(($40+22)|0);
      HEAP16[(($num_trans47)>>1)]=$conv46;
      var $41=$num_trans_addr;
      var $cmp48=(($41)|0)!=0;
      if ($cmp48) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $42=$info_ptr_addr;
      var $valid=(($42+8)|0);
      var $43=HEAP32[(($valid)>>2)];
      var $or=$43 | 16;
      HEAP32[(($valid)>>2)]=$or;
      var $44=$info_ptr_addr;
      var $free_me=(($44+184)|0);
      var $45=HEAP32[(($free_me)>>2)];
      var $or51=$45 | 8192;
      HEAP32[(($free_me)>>2)]=$or51;
      __label__ = 22; break;
    case 22: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_tRNS["X"]=1;

function _png_set_unknown_chunk_location($png_ptr, $info_ptr, $chunk, $location) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $chunk_addr;
      var $location_addr;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $chunk_addr=$chunk;
      $location_addr=$location;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$chunk_addr;
      var $cmp3=(($2)|0) >= 0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $3=$chunk_addr;
      var $4=$info_ptr_addr;
      var $unknown_chunks_num=(($4+192)|0);
      var $5=HEAP32[(($unknown_chunks_num)>>2)];
      var $cmp5=(($3)|0) < (($5)|0);
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$location_addr;
      var $conv=(($6) & 255);
      var $7=$chunk_addr;
      var $8=$info_ptr_addr;
      var $unknown_chunks=(($8+188)|0);
      var $9=HEAP32[(($unknown_chunks)>>2)];
      var $arrayidx=(($9+$7*20)|0);
      var $location6=(($arrayidx+16)|0);
      HEAP8[($location6)]=$conv;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_permit_mng_features($png_ptr, $mng_features) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $mng_features_addr;
      $png_ptr_addr=$png_ptr;
      $mng_features_addr=$mng_features;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 4; break;
    case 3: 
      var $1=$mng_features_addr;
      var $and=$1 & 5;
      var $conv=(($and) & 255);
      var $conv1=(($conv)&255);
      var $2=$png_ptr_addr;
      var $mng_features_permitted=(($2+576)|0);
      HEAP32[(($mng_features_permitted)>>2)]=$conv1;
      var $3=$png_ptr_addr;
      var $mng_features_permitted2=(($3+576)|0);
      var $4=HEAP32[(($mng_features_permitted2)>>2)];
      $retval=$4;
      __label__ = 4; break;
    case 4: 
      var $5=$retval;
      ;
      return $5;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_user_limits($png_ptr, $user_width_max, $user_height_max) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $user_width_max_addr;
      var $user_height_max_addr;
      $png_ptr_addr=$png_ptr;
      $user_width_max_addr=$user_width_max;
      $user_height_max_addr=$user_height_max;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$user_width_max_addr;
      var $2=$png_ptr_addr;
      var $user_width_max1=(($2+616)|0);
      HEAP32[(($user_width_max1)>>2)]=$1;
      var $3=$user_height_max_addr;
      var $4=$png_ptr_addr;
      var $user_height_max2=(($4+620)|0);
      HEAP32[(($user_height_max2)>>2)]=$3;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_chunk_cache_max($png_ptr, $user_chunk_cache_max) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $user_chunk_cache_max_addr;
      $png_ptr_addr=$png_ptr;
      $user_chunk_cache_max_addr=$user_chunk_cache_max;
      var $0=$png_ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$user_chunk_cache_max_addr;
      var $2=$png_ptr_addr;
      var $user_chunk_cache_max1=(($2+624)|0);
      HEAP32[(($user_chunk_cache_max1)>>2)]=$1;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_chunk_malloc_max($png_ptr, $user_chunk_malloc_max) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $user_chunk_malloc_max_addr;
      $png_ptr_addr=$png_ptr;
      $user_chunk_malloc_max_addr=$user_chunk_malloc_max;
      var $0=$png_ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$user_chunk_malloc_max_addr;
      var $2=$png_ptr_addr;
      var $user_chunk_malloc_max1=(($2+628)|0);
      HEAP32[(($user_chunk_malloc_max1)>>2)]=$1;
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_packing($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 5; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $bit_depth=(($1+292)|0);
      var $2=HEAPU8[($bit_depth)];
      var $conv=(($2)&255);
      var $cmp1=(($conv)|0) < 8;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$png_ptr_addr;
      var $transformations=(($3+92)|0);
      var $4=HEAP32[(($transformations)>>2)];
      var $or=$4 | 4;
      HEAP32[(($transformations)>>2)]=$or;
      var $5=$png_ptr_addr;
      var $usr_bit_depth=(($5+293)|0);
      HEAP8[($usr_bit_depth)]=8;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_interlace_handling($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $interlaced=(($1+288)|0);
      var $2=HEAPU8[($interlaced)];
      var $conv=(($2)&255);
      var $tobool1=(($conv)|0)!=0;
      if ($tobool1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$png_ptr_addr;
      var $transformations=(($3+92)|0);
      var $4=HEAP32[(($transformations)>>2)];
      var $or=$4 | 2;
      HEAP32[(($transformations)>>2)]=$or;
      $retval=7;
      __label__ = 5; break;
    case 4: 
      $retval=1;
      __label__ = 5; break;
    case 5: 
      var $5=$retval;
      ;
      return $5;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_filler($png_ptr, $filler, $filler_loc) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $filler_addr;
      var $filler_loc_addr;
      $png_ptr_addr=$png_ptr;
      $filler_addr=$filler;
      $filler_loc_addr=$filler_loc;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 11; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $transformations=(($1+92)|0);
      var $2=HEAP32[(($transformations)>>2)];
      var $or=$2 | 32768;
      HEAP32[(($transformations)>>2)]=$or;
      var $3=$filler_addr;
      var $conv=(($3) & 65535);
      var $4=$png_ptr_addr;
      var $filler1=(($4+306)|0);
      HEAP16[(($filler1)>>1)]=$conv;
      var $5=$filler_loc_addr;
      var $cmp2=(($5)|0)==1;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $6=$png_ptr_addr;
      var $flags=(($6+88)|0);
      var $7=HEAP32[(($flags)>>2)];
      var $or5=$7 | 128;
      HEAP32[(($flags)>>2)]=$or5;
      __label__ = 6; break;
    case 5: 
      var $8=$png_ptr_addr;
      var $flags6=(($8+88)|0);
      var $9=HEAP32[(($flags6)>>2)];
      var $and=$9 & -129;
      HEAP32[(($flags6)>>2)]=$and;
      __label__ = 6; break;
    case 6: 
      var $10=$png_ptr_addr;
      var $color_type=(($10+291)|0);
      var $11=HEAPU8[($color_type)];
      var $conv8=(($11)&255);
      var $cmp9=(($conv8)|0)==2;
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $12=$png_ptr_addr;
      var $usr_channels=(($12+296)|0);
      HEAP8[($usr_channels)]=4;
      __label__ = 8; break;
    case 8: 
      var $13=$png_ptr_addr;
      var $color_type13=(($13+291)|0);
      var $14=HEAPU8[($color_type13)];
      var $conv14=(($14)&255);
      var $cmp15=(($conv14)|0)==0;
      if ($cmp15) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $15=$png_ptr_addr;
      var $bit_depth=(($15+292)|0);
      var $16=HEAPU8[($bit_depth)];
      var $conv17=(($16)&255);
      var $cmp18=(($conv17)|0) >= 8;
      if ($cmp18) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $17=$png_ptr_addr;
      var $usr_channels21=(($17+296)|0);
      HEAP8[($usr_channels21)]=2;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_filler["X"]=1;

function _png_set_sPLT($png_ptr, $info_ptr, $entries, $nentries) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $entries_addr;
      var $nentries_addr;
      var $np;
      var $i;
      var $to;
      var $from;
      var $length;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $entries_addr=$entries;
      $nentries_addr=$nentries;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 15; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $3=$info_ptr_addr;
      var $splt_palettes_num=(($3+216)|0);
      var $4=HEAP32[(($splt_palettes_num)>>2)];
      var $5=$nentries_addr;
      var $add=(($4+$5)|0);
      var $mul=((($add<<4))|0);
      var $call=_png_malloc_warn($2, $mul);
      var $6=$call;
      $np=$6;
      var $7=$np;
      var $cmp2=(($7)|0)==0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$png_ptr_addr;
      _png_warning($8, ((STRING_TABLE.__str33993)|0));
      __label__ = 15; break;
    case 6: 
      var $9=$np;
      var $10=$9;
      var $11=$info_ptr_addr;
      var $splt_palettes=(($11+212)|0);
      var $12=HEAP32[(($splt_palettes)>>2)];
      var $13=$12;
      var $14=$info_ptr_addr;
      var $splt_palettes_num5=(($14+216)|0);
      var $15=HEAP32[(($splt_palettes_num5)>>2)];
      var $mul6=((($15<<4))|0);
      assert($mul6 % 1 === 0, 'memcpy given ' + $mul6 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($10, $13, $mul6, 1);
      var $16=$png_ptr_addr;
      var $17=$info_ptr_addr;
      var $splt_palettes7=(($17+212)|0);
      var $18=HEAP32[(($splt_palettes7)>>2)];
      var $19=$18;
      _png_free($16, $19);
      var $20=$info_ptr_addr;
      var $splt_palettes8=(($20+212)|0);
      HEAP32[(($splt_palettes8)>>2)]=0;
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $21=$i;
      var $22=$nentries_addr;
      var $cmp9=(($21)|0) < (($22)|0);
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: 
      var $23=$np;
      var $24=$info_ptr_addr;
      var $splt_palettes_num10=(($24+216)|0);
      var $25=HEAP32[(($splt_palettes_num10)>>2)];
      var $add_ptr=(($23+($25<<4))|0);
      var $26=$i;
      var $add_ptr11=(($add_ptr+($26<<4))|0);
      $to=$add_ptr11;
      var $27=$entries_addr;
      var $28=$i;
      var $add_ptr12=(($27+($28<<4))|0);
      $from=$add_ptr12;
      var $29=$from;
      var $name=(($29)|0);
      var $30=HEAP32[(($name)>>2)];
      var $call13=_strlen($30);
      var $add14=(($call13+1)|0);
      $length=$add14;
      var $31=$png_ptr_addr;
      var $32=$length;
      var $call15=_png_malloc_warn($31, $32);
      var $33=$to;
      var $name16=(($33)|0);
      HEAP32[(($name16)>>2)]=$call15;
      var $34=$to;
      var $name17=(($34)|0);
      var $35=HEAP32[(($name17)>>2)];
      var $cmp18=(($35)|0)==0;
      if ($cmp18) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $36=$png_ptr_addr;
      _png_warning($36, ((STRING_TABLE.__str34994)|0));
      __label__ = 13; break;
    case 10: 
      var $37=$to;
      var $name21=(($37)|0);
      var $38=HEAP32[(($name21)>>2)];
      var $39=$from;
      var $name22=(($39)|0);
      var $40=HEAP32[(($name22)>>2)];
      var $41=$length;
      assert($41 % 1 === 0, 'memcpy given ' + $41 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($38, $40, $41, 1);
      var $42=$png_ptr_addr;
      var $43=$from;
      var $nentries23=(($43+12)|0);
      var $44=HEAP32[(($nentries23)>>2)];
      var $mul24=(($44*10)|0);
      var $call25=_png_malloc_warn($42, $mul24);
      var $45=$call25;
      var $46=$to;
      var $entries26=(($46+8)|0);
      HEAP32[(($entries26)>>2)]=$45;
      var $47=$to;
      var $entries27=(($47+8)|0);
      var $48=HEAP32[(($entries27)>>2)];
      var $cmp28=(($48)|0)==0;
      if ($cmp28) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $49=$png_ptr_addr;
      _png_warning($49, ((STRING_TABLE.__str34994)|0));
      var $50=$png_ptr_addr;
      var $51=$to;
      var $name30=(($51)|0);
      var $52=HEAP32[(($name30)>>2)];
      _png_free($50, $52);
      var $53=$to;
      var $name31=(($53)|0);
      HEAP32[(($name31)>>2)]=0;
      __label__ = 13; break;
    case 12: 
      var $54=$to;
      var $entries33=(($54+8)|0);
      var $55=HEAP32[(($entries33)>>2)];
      var $56=$55;
      var $57=$from;
      var $entries34=(($57+8)|0);
      var $58=HEAP32[(($entries34)>>2)];
      var $59=$58;
      var $60=$from;
      var $nentries35=(($60+12)|0);
      var $61=HEAP32[(($nentries35)>>2)];
      var $mul36=(($61*10)|0);
      assert($mul36 % 1 === 0, 'memcpy given ' + $mul36 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($56, $59, $mul36, 1);
      var $62=$from;
      var $nentries37=(($62+12)|0);
      var $63=HEAP32[(($nentries37)>>2)];
      var $64=$to;
      var $nentries38=(($64+12)|0);
      HEAP32[(($nentries38)>>2)]=$63;
      var $65=$from;
      var $depth=(($65+4)|0);
      var $66=HEAP8[($depth)];
      var $67=$to;
      var $depth39=(($67+4)|0);
      HEAP8[($depth39)]=$66;
      __label__ = 13; break;
    case 13: 
      var $68=$i;
      var $inc=(($68+1)|0);
      $i=$inc;
      __label__ = 7; break;
    case 14: 
      var $69=$np;
      var $70=$info_ptr_addr;
      var $splt_palettes40=(($70+212)|0);
      HEAP32[(($splt_palettes40)>>2)]=$69;
      var $71=$nentries_addr;
      var $72=$info_ptr_addr;
      var $splt_palettes_num41=(($72+216)|0);
      var $73=HEAP32[(($splt_palettes_num41)>>2)];
      var $add42=(($73+$71)|0);
      HEAP32[(($splt_palettes_num41)>>2)]=$add42;
      var $74=$info_ptr_addr;
      var $valid=(($74+8)|0);
      var $75=HEAP32[(($valid)>>2)];
      var $or=$75 | 8192;
      HEAP32[(($valid)>>2)]=$or;
      var $76=$info_ptr_addr;
      var $free_me=(($76+184)|0);
      var $77=HEAP32[(($free_me)>>2)];
      var $or43=$77 | 32;
      HEAP32[(($free_me)>>2)]=$or43;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_sPLT["X"]=1;

function _png_set_unknown_chunks($png_ptr, $info_ptr, $unknowns, $num_unknowns) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $unknowns_addr;
      var $num_unknowns_addr;
      var $np;
      var $i;
      var $to;
      var $from;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      $unknowns_addr=$unknowns;
      $num_unknowns_addr=$num_unknowns;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$num_unknowns_addr;
      var $cmp3=(($2)|0)==0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 18; break;
    case 5: 
      var $3=$png_ptr_addr;
      var $4=$info_ptr_addr;
      var $unknown_chunks_num=(($4+192)|0);
      var $5=HEAP32[(($unknown_chunks_num)>>2)];
      var $6=$num_unknowns_addr;
      var $add=(($5+$6)|0);
      var $mul=(($add*20)|0);
      var $call=_png_malloc_warn($3, $mul);
      var $7=$call;
      $np=$7;
      var $8=$np;
      var $cmp4=(($8)|0)==0;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $9=$png_ptr_addr;
      _png_warning($9, ((STRING_TABLE.__str35995)|0));
      __label__ = 18; break;
    case 7: 
      var $10=$np;
      var $11=$10;
      var $12=$info_ptr_addr;
      var $unknown_chunks=(($12+188)|0);
      var $13=HEAP32[(($unknown_chunks)>>2)];
      var $14=$13;
      var $15=$info_ptr_addr;
      var $unknown_chunks_num7=(($15+192)|0);
      var $16=HEAP32[(($unknown_chunks_num7)>>2)];
      var $mul8=(($16*20)|0);
      assert($mul8 % 1 === 0, 'memcpy given ' + $mul8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($11, $14, $mul8, 1);
      var $17=$png_ptr_addr;
      var $18=$info_ptr_addr;
      var $unknown_chunks9=(($18+188)|0);
      var $19=HEAP32[(($unknown_chunks9)>>2)];
      var $20=$19;
      _png_free($17, $20);
      var $21=$info_ptr_addr;
      var $unknown_chunks10=(($21+188)|0);
      HEAP32[(($unknown_chunks10)>>2)]=0;
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $22=$i;
      var $23=$num_unknowns_addr;
      var $cmp11=(($22)|0) < (($23)|0);
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 17; break; }
    case 9: 
      var $24=$np;
      var $25=$info_ptr_addr;
      var $unknown_chunks_num12=(($25+192)|0);
      var $26=HEAP32[(($unknown_chunks_num12)>>2)];
      var $add_ptr=(($24+$26*20)|0);
      var $27=$i;
      var $add_ptr13=(($add_ptr+$27*20)|0);
      $to=$add_ptr13;
      var $28=$unknowns_addr;
      var $29=$i;
      var $add_ptr14=(($28+$29*20)|0);
      $from=$add_ptr14;
      var $30=$to;
      var $name=(($30)|0);
      var $arraydecay=(($name)|0);
      var $31=$from;
      var $name15=(($31)|0);
      var $arraydecay16=(($name15)|0);
      assert(5 % 1 === 0, 'memcpy given ' + 5 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($arraydecay)]=HEAP8[($arraydecay16)];HEAP8[($arraydecay+1)]=HEAP8[($arraydecay16+1)];HEAP8[($arraydecay+2)]=HEAP8[($arraydecay16+2)];HEAP8[($arraydecay+3)]=HEAP8[($arraydecay16+3)];HEAP8[($arraydecay+4)]=HEAP8[($arraydecay16+4)];
      var $32=$to;
      var $name17=(($32)|0);
      var $arrayidx=(($name17+4)|0);
      HEAP8[($arrayidx)]=0;
      var $33=$from;
      var $size=(($33+12)|0);
      var $34=HEAP32[(($size)>>2)];
      var $35=$to;
      var $size18=(($35+12)|0);
      HEAP32[(($size18)>>2)]=$34;
      var $36=$png_ptr_addr;
      var $mode=(($36+84)|0);
      var $37=HEAP32[(($mode)>>2)];
      var $and=$37 & 255;
      var $conv=(($and) & 255);
      var $38=$to;
      var $location=(($38+16)|0);
      HEAP8[($location)]=$conv;
      var $39=$from;
      var $size19=(($39+12)|0);
      var $40=HEAP32[(($size19)>>2)];
      var $cmp20=(($40)|0)==0;
      if ($cmp20) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $41=$to;
      var $data=(($41+8)|0);
      HEAP32[(($data)>>2)]=0;
      __label__ = 15; break;
    case 11: 
      var $42=$png_ptr_addr;
      var $43=$from;
      var $size23=(($43+12)|0);
      var $44=HEAP32[(($size23)>>2)];
      var $call24=_png_malloc_warn($42, $44);
      var $45=$to;
      var $data25=(($45+8)|0);
      HEAP32[(($data25)>>2)]=$call24;
      var $46=$to;
      var $data26=(($46+8)|0);
      var $47=HEAP32[(($data26)>>2)];
      var $cmp27=(($47)|0)==0;
      if ($cmp27) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $48=$png_ptr_addr;
      _png_warning($48, ((STRING_TABLE.__str35995)|0));
      var $49=$to;
      var $size30=(($49+12)|0);
      HEAP32[(($size30)>>2)]=0;
      __label__ = 14; break;
    case 13: 
      var $50=$to;
      var $data32=(($50+8)|0);
      var $51=HEAP32[(($data32)>>2)];
      var $52=$from;
      var $data33=(($52+8)|0);
      var $53=HEAP32[(($data33)>>2)];
      var $54=$from;
      var $size34=(($54+12)|0);
      var $55=HEAP32[(($size34)>>2)];
      assert($55 % 1 === 0, 'memcpy given ' + $55 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($51, $53, $55, 1);
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $56=$i;
      var $inc=(($56+1)|0);
      $i=$inc;
      __label__ = 8; break;
    case 17: 
      var $57=$np;
      var $58=$info_ptr_addr;
      var $unknown_chunks37=(($58+188)|0);
      HEAP32[(($unknown_chunks37)>>2)]=$57;
      var $59=$num_unknowns_addr;
      var $60=$info_ptr_addr;
      var $unknown_chunks_num38=(($60+192)|0);
      var $61=HEAP32[(($unknown_chunks_num38)>>2)];
      var $add39=(($61+$59)|0);
      HEAP32[(($unknown_chunks_num38)>>2)]=$add39;
      var $62=$info_ptr_addr;
      var $free_me=(($62+184)|0);
      var $63=HEAP32[(($free_me)>>2)];
      var $or=$63 | 512;
      HEAP32[(($free_me)>>2)]=$or;
      __label__ = 18; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_unknown_chunks["X"]=1;

function _png_set_keep_unknown_chunks($png_ptr, $keep, $chunk_list, $num_chunks) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $keep_addr;
      var $chunk_list_addr;
      var $num_chunks_addr;
      var $new_list;
      var $p;
      var $i;
      var $old_num_chunks;
      $png_ptr_addr=$png_ptr;
      $keep_addr=$keep;
      $chunk_list_addr=$chunk_list;
      $num_chunks_addr=$num_chunks;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 21; break;
    case 3: 
      var $1=$num_chunks_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 12; break; }
    case 4: 
      var $2=$keep_addr;
      var $cmp3=(($2)|0)==3;
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $3=$keep_addr;
      var $cmp4=(($3)|0)==2;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $4=$png_ptr_addr;
      var $flags=(($4+88)|0);
      var $5=HEAP32[(($flags)>>2)];
      var $or=$5 | 32768;
      HEAP32[(($flags)>>2)]=$or;
      __label__ = 8; break;
    case 7: 
      var $6=$png_ptr_addr;
      var $flags6=(($6+88)|0);
      var $7=HEAP32[(($flags6)>>2)];
      var $and=$7 & -32769;
      HEAP32[(($flags6)>>2)]=$and;
      __label__ = 8; break;
    case 8: 
      var $8=$keep_addr;
      var $cmp8=(($8)|0)==3;
      if ($cmp8) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $9=$png_ptr_addr;
      var $flags10=(($9+88)|0);
      var $10=HEAP32[(($flags10)>>2)];
      var $or11=$10 | 65536;
      HEAP32[(($flags10)>>2)]=$or11;
      __label__ = 11; break;
    case 10: 
      var $11=$png_ptr_addr;
      var $flags13=(($11+88)|0);
      var $12=HEAP32[(($flags13)>>2)];
      var $and14=$12 & -65537;
      HEAP32[(($flags13)>>2)]=$and14;
      __label__ = 11; break;
    case 11: 
      __label__ = 21; break;
    case 12: 
      var $13=$chunk_list_addr;
      var $cmp17=(($13)|0)==0;
      if ($cmp17) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 21; break;
    case 14: 
      var $14=$png_ptr_addr;
      var $num_chunk_list=(($14+560)|0);
      var $15=HEAP32[(($num_chunk_list)>>2)];
      $old_num_chunks=$15;
      var $16=$png_ptr_addr;
      var $17=$num_chunks_addr;
      var $18=$old_num_chunks;
      var $add=(($17+$18)|0);
      var $mul=(($add*5)|0);
      var $call=_png_malloc($16, $mul);
      $new_list=$call;
      var $19=$png_ptr_addr;
      var $chunk_list20=(($19+564)|0);
      var $20=HEAP32[(($chunk_list20)>>2)];
      var $cmp21=(($20)|0)!=0;
      if ($cmp21) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $21=$new_list;
      var $22=$png_ptr_addr;
      var $chunk_list23=(($22+564)|0);
      var $23=HEAP32[(($chunk_list23)>>2)];
      var $24=$old_num_chunks;
      var $mul24=(($24*5)|0);
      assert($mul24 % 1 === 0, 'memcpy given ' + $mul24 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($21, $23, $mul24, 1);
      var $25=$png_ptr_addr;
      var $26=$png_ptr_addr;
      var $chunk_list25=(($26+564)|0);
      var $27=HEAP32[(($chunk_list25)>>2)];
      _png_free($25, $27);
      var $28=$png_ptr_addr;
      var $chunk_list26=(($28+564)|0);
      HEAP32[(($chunk_list26)>>2)]=0;
      __label__ = 16; break;
    case 16: 
      var $29=$new_list;
      var $30=$old_num_chunks;
      var $mul28=(($30*5)|0);
      var $add_ptr=(($29+$mul28)|0);
      var $31=$chunk_list_addr;
      var $32=$num_chunks_addr;
      var $mul29=(($32*5)|0);
      assert($mul29 % 1 === 0, 'memcpy given ' + $mul29 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr, $31, $mul29, 1);
      var $33=$new_list;
      var $34=$old_num_chunks;
      var $mul30=(($34*5)|0);
      var $add_ptr31=(($33+$mul30)|0);
      var $add_ptr32=(($add_ptr31+4)|0);
      $p=$add_ptr32;
      $i=0;
      __label__ = 17; break;
    case 17: 
      var $35=$i;
      var $36=$num_chunks_addr;
      var $cmp33=(($35)|0) < (($36)|0);
      if ($cmp33) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $37=$keep_addr;
      var $conv=(($37) & 255);
      var $38=$p;
      HEAP8[($38)]=$conv;
      __label__ = 19; break;
    case 19: 
      var $39=$i;
      var $inc=(($39+1)|0);
      $i=$inc;
      var $40=$p;
      var $add_ptr34=(($40+5)|0);
      $p=$add_ptr34;
      __label__ = 17; break;
    case 20: 
      var $41=$old_num_chunks;
      var $42=$num_chunks_addr;
      var $add35=(($41+$42)|0);
      var $43=$png_ptr_addr;
      var $num_chunk_list36=(($43+560)|0);
      HEAP32[(($num_chunk_list36)>>2)]=$add35;
      var $44=$new_list;
      var $45=$png_ptr_addr;
      var $chunk_list37=(($45+564)|0);
      HEAP32[(($chunk_list37)>>2)]=$44;
      var $46=$png_ptr_addr;
      var $free_me=(($46+548)|0);
      var $47=HEAP32[(($free_me)>>2)];
      var $or38=$47 | 1024;
      HEAP32[(($free_me)>>2)]=$or38;
      __label__ = 21; break;
    case 21: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_keep_unknown_chunks["X"]=1;

function _png_set_compression_buffer_size($png_ptr, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $size_addr;
      $png_ptr_addr=$png_ptr;
      $size_addr=$size;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 7; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $2=$png_ptr_addr;
      var $zbuf=(($2+152)|0);
      var $3=HEAP32[(($zbuf)>>2)];
      _png_free($1, $3);
      var $4=$size_addr;
      var $cmp1=(($4)>>>0) > 4294967295;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str36996)|0));
      var $6=$png_ptr_addr;
      var $zbuf_size=(($6+156)|0);
      HEAP32[(($zbuf_size)>>2)]=-1;
      $size_addr=-1;
      __label__ = 6; break;
    case 5: 
      var $7=$size_addr;
      var $8=$png_ptr_addr;
      var $zbuf_size3=(($8+156)|0);
      HEAP32[(($zbuf_size3)>>2)]=$7;
      __label__ = 6; break;
    case 6: 
      var $9=$png_ptr_addr;
      var $10=$size_addr;
      var $call=_png_malloc($9, $10);
      var $11=$png_ptr_addr;
      var $zbuf5=(($11+152)|0);
      HEAP32[(($zbuf5)>>2)]=$call;
      var $12=$png_ptr_addr;
      var $zbuf6=(($12+152)|0);
      var $13=HEAP32[(($zbuf6)>>2)];
      var $14=$png_ptr_addr;
      var $zstream=(($14+96)|0);
      var $next_out=(($zstream+12)|0);
      HEAP32[(($next_out)>>2)]=$13;
      var $15=$png_ptr_addr;
      var $zstream7=(($15+96)|0);
      var $avail_out=(($zstream7+16)|0);
      HEAP32[(($avail_out)>>2)]=0;
      var $16=$png_ptr_addr;
      var $zstream8=(($16+96)|0);
      var $avail_in=(($zstream8+4)|0);
      HEAP32[(($avail_in)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_compression_buffer_size["X"]=1;

function _png_set_shift($png_ptr, $true_bits) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $true_bits_addr;
      $png_ptr_addr=$png_ptr;
      $true_bits_addr=$true_bits;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $transformations=(($1+92)|0);
      var $2=HEAP32[(($transformations)>>2)];
      var $or=$2 | 8;
      HEAP32[(($transformations)>>2)]=$or;
      var $3=$png_ptr_addr;
      var $shift=(($3+389)|0);
      var $4=$true_bits_addr;
      var $5=$shift;
      var $6=$4;
      assert(5 % 1 === 0, 'memcpy given ' + 5 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($5)]=HEAP8[($6)];HEAP8[($5+1)]=HEAP8[($6+1)];HEAP8[($5+2)]=HEAP8[($6+2)];HEAP8[($5+3)]=HEAP8[($6+3)];HEAP8[($5+4)]=HEAP8[($6+4)];
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_do_invert($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $rp;
      var $i;
      var $istop;
      var $rp14;
      var $i15;
      var $istop16;
      var $rp38;
      var $i39;
      var $istop40;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $color_type=(($0+8)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$row_addr;
      $rp=$2;
      var $3=$row_info_addr;
      var $rowbytes=(($3+4)|0);
      var $4=HEAP32[(($rowbytes)>>2)];
      $istop=$4;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $5=$i;
      var $6=$istop;
      var $cmp2=(($5)>>>0) < (($6)>>>0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $7=$rp;
      var $8=HEAPU8[($7)];
      var $conv4=(($8)&255);
      var $neg=$conv4 ^ -1;
      var $conv5=(($neg) & 255);
      var $9=$rp;
      HEAP8[($9)]=$conv5;
      var $10=$rp;
      var $incdec_ptr=(($10+1)|0);
      $rp=$incdec_ptr;
      __label__ = 5; break;
    case 5: 
      var $11=$i;
      var $inc=(($11+1)|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      __label__ = 23; break;
    case 7: 
      var $12=$row_info_addr;
      var $color_type6=(($12+8)|0);
      var $13=HEAPU8[($color_type6)];
      var $conv7=(($13)&255);
      var $cmp8=(($conv7)|0)==4;
      if ($cmp8) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: 
      var $14=$row_info_addr;
      var $bit_depth=(($14+9)|0);
      var $15=HEAPU8[($bit_depth)];
      var $conv10=(($15)&255);
      var $cmp11=(($conv10)|0)==8;
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: 
      var $16=$row_addr;
      $rp14=$16;
      var $17=$row_info_addr;
      var $rowbytes17=(($17+4)|0);
      var $18=HEAP32[(($rowbytes17)>>2)];
      $istop16=$18;
      $i15=0;
      __label__ = 10; break;
    case 10: 
      var $19=$i15;
      var $20=$istop16;
      var $cmp19=(($19)>>>0) < (($20)>>>0);
      if ($cmp19) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $21=$rp14;
      var $22=HEAPU8[($21)];
      var $conv22=(($22)&255);
      var $neg23=$conv22 ^ -1;
      var $conv24=(($neg23) & 255);
      var $23=$rp14;
      HEAP8[($23)]=$conv24;
      var $24=$rp14;
      var $add_ptr=(($24+2)|0);
      $rp14=$add_ptr;
      __label__ = 12; break;
    case 12: 
      var $25=$i15;
      var $add=(($25+2)|0);
      $i15=$add;
      __label__ = 10; break;
    case 13: 
      __label__ = 22; break;
    case 14: 
      var $26=$row_info_addr;
      var $color_type28=(($26+8)|0);
      var $27=HEAPU8[($color_type28)];
      var $conv29=(($27)&255);
      var $cmp30=(($conv29)|0)==4;
      if ($cmp30) { __label__ = 15; break; } else { __label__ = 21; break; }
    case 15: 
      var $28=$row_info_addr;
      var $bit_depth33=(($28+9)|0);
      var $29=HEAPU8[($bit_depth33)];
      var $conv34=(($29)&255);
      var $cmp35=(($conv34)|0)==16;
      if ($cmp35) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $30=$row_addr;
      $rp38=$30;
      var $31=$row_info_addr;
      var $rowbytes41=(($31+4)|0);
      var $32=HEAP32[(($rowbytes41)>>2)];
      $istop40=$32;
      $i39=0;
      __label__ = 17; break;
    case 17: 
      var $33=$i39;
      var $34=$istop40;
      var $cmp43=(($33)>>>0) < (($34)>>>0);
      if ($cmp43) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $35=$rp38;
      var $36=HEAPU8[($35)];
      var $conv46=(($36)&255);
      var $neg47=$conv46 ^ -1;
      var $conv48=(($neg47) & 255);
      var $37=$rp38;
      HEAP8[($37)]=$conv48;
      var $38=$rp38;
      var $add_ptr49=(($38+1)|0);
      var $39=HEAPU8[($add_ptr49)];
      var $conv50=(($39)&255);
      var $neg51=$conv50 ^ -1;
      var $conv52=(($neg51) & 255);
      var $40=$rp38;
      var $add_ptr53=(($40+1)|0);
      HEAP8[($add_ptr53)]=$conv52;
      var $41=$rp38;
      var $add_ptr54=(($41+4)|0);
      $rp38=$add_ptr54;
      __label__ = 19; break;
    case 19: 
      var $42=$i39;
      var $add56=(($42+4)|0);
      $i39=$add56;
      __label__ = 17; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_invert["X"]=1;

function _png_do_swap($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $rp;
      var $i;
      var $istop;
      var $t;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $bit_depth=(($0+9)|0);
      var $1=HEAPU8[($bit_depth)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==16;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$row_addr;
      $rp=$2;
      var $3=$row_info_addr;
      var $width=(($3)|0);
      var $4=HEAP32[(($width)>>2)];
      var $5=$row_info_addr;
      var $channels=(($5+10)|0);
      var $6=HEAPU8[($channels)];
      var $conv2=(($6)&255);
      var $mul=(($4*$conv2)|0);
      $istop=$mul;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $7=$i;
      var $8=$istop;
      var $cmp3=(($7)>>>0) < (($8)>>>0);
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $9=$rp;
      var $10=HEAP8[($9)];
      $t=$10;
      var $11=$rp;
      var $add_ptr=(($11+1)|0);
      var $12=HEAP8[($add_ptr)];
      var $13=$rp;
      HEAP8[($13)]=$12;
      var $14=$t;
      var $15=$rp;
      var $add_ptr5=(($15+1)|0);
      HEAP8[($add_ptr5)]=$14;
      __label__ = 5; break;
    case 5: 
      var $16=$i;
      var $inc=(($16+1)|0);
      $i=$inc;
      var $17=$rp;
      var $add_ptr6=(($17+2)|0);
      $rp=$add_ptr6;
      __label__ = 3; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_swap["X"]=1;

function _png_do_packswap($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $rp;
      var $end;
      var $table;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $bit_depth=(($0+9)|0);
      var $1=HEAPU8[($bit_depth)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0) < 8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 16; break; }
    case 2: 
      var $2=$row_addr;
      var $3=$row_info_addr;
      var $rowbytes=(($3+4)|0);
      var $4=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($2+$4)|0);
      $end=$add_ptr;
      var $5=$row_info_addr;
      var $bit_depth2=(($5+9)|0);
      var $6=HEAPU8[($bit_depth2)];
      var $conv3=(($6)&255);
      var $cmp4=(($conv3)|0)==1;
      if ($cmp4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $table=((STRING_TABLE._onebppswaptable)|0);
      __label__ = 11; break;
    case 4: 
      var $7=$row_info_addr;
      var $bit_depth7=(($7+9)|0);
      var $8=HEAPU8[($bit_depth7)];
      var $conv8=(($8)&255);
      var $cmp9=(($conv8)|0)==2;
      if ($cmp9) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $table=((STRING_TABLE._twobppswaptable)|0);
      __label__ = 10; break;
    case 6: 
      var $9=$row_info_addr;
      var $bit_depth13=(($9+9)|0);
      var $10=HEAPU8[($bit_depth13)];
      var $conv14=(($10)&255);
      var $cmp15=(($conv14)|0)==4;
      if ($cmp15) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $table=((STRING_TABLE._fourbppswaptable)|0);
      __label__ = 9; break;
    case 8: 
      __label__ = 16; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $11=$row_addr;
      $rp=$11;
      __label__ = 12; break;
    case 12: 
      var $12=$rp;
      var $13=$end;
      var $cmp21=(($12)>>>0) < (($13)>>>0);
      if ($cmp21) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $14=$rp;
      var $15=HEAPU8[($14)];
      var $idxprom=(($15)&255);
      var $16=$table;
      var $arrayidx=(($16+$idxprom)|0);
      var $17=HEAP8[($arrayidx)];
      var $18=$rp;
      HEAP8[($18)]=$17;
      __label__ = 14; break;
    case 14: 
      var $19=$rp;
      var $incdec_ptr=(($19+1)|0);
      $rp=$incdec_ptr;
      __label__ = 12; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_packswap["X"]=1;

function _png_do_strip_channel($row_info, $row, $at_start) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $at_start_addr;
      var $sp;
      var $dp;
      var $ep;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $at_start_addr=$at_start;
      var $0=$row_addr;
      $sp=$0;
      var $1=$row_addr;
      $dp=$1;
      var $2=$row_addr;
      var $3=$row_info_addr;
      var $rowbytes=(($3+4)|0);
      var $4=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($2+$4)|0);
      $ep=$add_ptr;
      var $5=$row_info_addr;
      var $channels=(($5+10)|0);
      var $6=HEAPU8[($channels)];
      var $conv=(($6)&255);
      var $cmp=(($conv)|0)==2;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 23; break; }
    case 2: 
      var $7=$row_info_addr;
      var $bit_depth=(($7+9)|0);
      var $8=HEAPU8[($bit_depth)];
      var $conv2=(($8)&255);
      var $cmp3=(($conv2)|0)==8;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      var $9=$at_start_addr;
      var $tobool=(($9)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $10=$sp;
      var $incdec_ptr=(($10+1)|0);
      $sp=$incdec_ptr;
      __label__ = 6; break;
    case 5: 
      var $11=$sp;
      var $add_ptr7=(($11+2)|0);
      $sp=$add_ptr7;
      var $12=$dp;
      var $incdec_ptr8=(($12+1)|0);
      $dp=$incdec_ptr8;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $13=$sp;
      var $14=$ep;
      var $cmp9=(($13)>>>0) < (($14)>>>0);
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $15=$sp;
      var $16=HEAP8[($15)];
      var $17=$dp;
      var $incdec_ptr11=(($17+1)|0);
      $dp=$incdec_ptr11;
      HEAP8[($17)]=$16;
      var $18=$sp;
      var $add_ptr12=(($18+2)|0);
      $sp=$add_ptr12;
      __label__ = 7; break;
    case 9: 
      var $19=$row_info_addr;
      var $pixel_depth=(($19+11)|0);
      HEAP8[($pixel_depth)]=8;
      __label__ = 20; break;
    case 10: 
      var $20=$row_info_addr;
      var $bit_depth14=(($20+9)|0);
      var $21=HEAPU8[($bit_depth14)];
      var $conv15=(($21)&255);
      var $cmp16=(($conv15)|0)==16;
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 18; break; }
    case 11: 
      var $22=$at_start_addr;
      var $tobool19=(($22)|0)!=0;
      if ($tobool19) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $23=$sp;
      var $add_ptr21=(($23+2)|0);
      $sp=$add_ptr21;
      __label__ = 14; break;
    case 13: 
      var $24=$sp;
      var $add_ptr23=(($24+4)|0);
      $sp=$add_ptr23;
      var $25=$dp;
      var $add_ptr24=(($25+2)|0);
      $dp=$add_ptr24;
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $26=$sp;
      var $27=$ep;
      var $cmp27=(($26)>>>0) < (($27)>>>0);
      if ($cmp27) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $28=$sp;
      var $incdec_ptr30=(($28+1)|0);
      $sp=$incdec_ptr30;
      var $29=HEAP8[($28)];
      var $30=$dp;
      var $incdec_ptr31=(($30+1)|0);
      $dp=$incdec_ptr31;
      HEAP8[($30)]=$29;
      var $31=$sp;
      var $32=HEAP8[($31)];
      var $33=$dp;
      var $incdec_ptr32=(($33+1)|0);
      $dp=$incdec_ptr32;
      HEAP8[($33)]=$32;
      var $34=$sp;
      var $add_ptr33=(($34+3)|0);
      $sp=$add_ptr33;
      __label__ = 15; break;
    case 17: 
      var $35=$row_info_addr;
      var $pixel_depth35=(($35+11)|0);
      HEAP8[($pixel_depth35)]=16;
      __label__ = 19; break;
    case 18: 
      __label__ = 48; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $36=$row_info_addr;
      var $channels39=(($36+10)|0);
      HEAP8[($channels39)]=1;
      var $37=$row_info_addr;
      var $color_type=(($37+8)|0);
      var $38=HEAPU8[($color_type)];
      var $conv40=(($38)&255);
      var $cmp41=(($conv40)|0)==4;
      if ($cmp41) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $39=$row_info_addr;
      var $color_type44=(($39+8)|0);
      HEAP8[($color_type44)]=0;
      __label__ = 22; break;
    case 22: 
      __label__ = 47; break;
    case 23: 
      var $40=$row_info_addr;
      var $channels47=(($40+10)|0);
      var $41=HEAPU8[($channels47)];
      var $conv48=(($41)&255);
      var $cmp49=(($conv48)|0)==4;
      if ($cmp49) { __label__ = 24; break; } else { __label__ = 45; break; }
    case 24: 
      var $42=$row_info_addr;
      var $bit_depth52=(($42+9)|0);
      var $43=HEAPU8[($bit_depth52)];
      var $conv53=(($43)&255);
      var $cmp54=(($conv53)|0)==8;
      if ($cmp54) { __label__ = 25; break; } else { __label__ = 32; break; }
    case 25: 
      var $44=$at_start_addr;
      var $tobool57=(($44)|0)!=0;
      if ($tobool57) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $45=$sp;
      var $incdec_ptr59=(($45+1)|0);
      $sp=$incdec_ptr59;
      __label__ = 28; break;
    case 27: 
      var $46=$sp;
      var $add_ptr61=(($46+4)|0);
      $sp=$add_ptr61;
      var $47=$dp;
      var $add_ptr62=(($47+3)|0);
      $dp=$add_ptr62;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $48=$sp;
      var $49=$ep;
      var $cmp65=(($48)>>>0) < (($49)>>>0);
      if ($cmp65) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $50=$sp;
      var $incdec_ptr68=(($50+1)|0);
      $sp=$incdec_ptr68;
      var $51=HEAP8[($50)];
      var $52=$dp;
      var $incdec_ptr69=(($52+1)|0);
      $dp=$incdec_ptr69;
      HEAP8[($52)]=$51;
      var $53=$sp;
      var $incdec_ptr70=(($53+1)|0);
      $sp=$incdec_ptr70;
      var $54=HEAP8[($53)];
      var $55=$dp;
      var $incdec_ptr71=(($55+1)|0);
      $dp=$incdec_ptr71;
      HEAP8[($55)]=$54;
      var $56=$sp;
      var $57=HEAP8[($56)];
      var $58=$dp;
      var $incdec_ptr72=(($58+1)|0);
      $dp=$incdec_ptr72;
      HEAP8[($58)]=$57;
      var $59=$sp;
      var $add_ptr73=(($59+2)|0);
      $sp=$add_ptr73;
      __label__ = 29; break;
    case 31: 
      var $60=$row_info_addr;
      var $pixel_depth75=(($60+11)|0);
      HEAP8[($pixel_depth75)]=24;
      __label__ = 42; break;
    case 32: 
      var $61=$row_info_addr;
      var $bit_depth77=(($61+9)|0);
      var $62=HEAPU8[($bit_depth77)];
      var $conv78=(($62)&255);
      var $cmp79=(($conv78)|0)==16;
      if ($cmp79) { __label__ = 33; break; } else { __label__ = 40; break; }
    case 33: 
      var $63=$at_start_addr;
      var $tobool82=(($63)|0)!=0;
      if ($tobool82) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $64=$sp;
      var $add_ptr84=(($64+2)|0);
      $sp=$add_ptr84;
      __label__ = 36; break;
    case 35: 
      var $65=$sp;
      var $add_ptr86=(($65+8)|0);
      $sp=$add_ptr86;
      var $66=$dp;
      var $add_ptr87=(($66+6)|0);
      $dp=$add_ptr87;
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $67=$sp;
      var $68=$ep;
      var $cmp90=(($67)>>>0) < (($68)>>>0);
      if ($cmp90) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $69=$sp;
      var $incdec_ptr93=(($69+1)|0);
      $sp=$incdec_ptr93;
      var $70=HEAP8[($69)];
      var $71=$dp;
      var $incdec_ptr94=(($71+1)|0);
      $dp=$incdec_ptr94;
      HEAP8[($71)]=$70;
      var $72=$sp;
      var $incdec_ptr95=(($72+1)|0);
      $sp=$incdec_ptr95;
      var $73=HEAP8[($72)];
      var $74=$dp;
      var $incdec_ptr96=(($74+1)|0);
      $dp=$incdec_ptr96;
      HEAP8[($74)]=$73;
      var $75=$sp;
      var $incdec_ptr97=(($75+1)|0);
      $sp=$incdec_ptr97;
      var $76=HEAP8[($75)];
      var $77=$dp;
      var $incdec_ptr98=(($77+1)|0);
      $dp=$incdec_ptr98;
      HEAP8[($77)]=$76;
      var $78=$sp;
      var $incdec_ptr99=(($78+1)|0);
      $sp=$incdec_ptr99;
      var $79=HEAP8[($78)];
      var $80=$dp;
      var $incdec_ptr100=(($80+1)|0);
      $dp=$incdec_ptr100;
      HEAP8[($80)]=$79;
      var $81=$sp;
      var $incdec_ptr101=(($81+1)|0);
      $sp=$incdec_ptr101;
      var $82=HEAP8[($81)];
      var $83=$dp;
      var $incdec_ptr102=(($83+1)|0);
      $dp=$incdec_ptr102;
      HEAP8[($83)]=$82;
      var $84=$sp;
      var $85=HEAP8[($84)];
      var $86=$dp;
      var $incdec_ptr103=(($86+1)|0);
      $dp=$incdec_ptr103;
      HEAP8[($86)]=$85;
      var $87=$sp;
      var $add_ptr104=(($87+3)|0);
      $sp=$add_ptr104;
      __label__ = 37; break;
    case 39: 
      var $88=$row_info_addr;
      var $pixel_depth106=(($88+11)|0);
      HEAP8[($pixel_depth106)]=48;
      __label__ = 41; break;
    case 40: 
      __label__ = 48; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $89=$row_info_addr;
      var $channels110=(($89+10)|0);
      HEAP8[($channels110)]=3;
      var $90=$row_info_addr;
      var $color_type111=(($90+8)|0);
      var $91=HEAPU8[($color_type111)];
      var $conv112=(($91)&255);
      var $cmp113=(($conv112)|0)==6;
      if ($cmp113) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $92=$row_info_addr;
      var $color_type116=(($92+8)|0);
      HEAP8[($color_type116)]=2;
      __label__ = 44; break;
    case 44: 
      __label__ = 46; break;
    case 45: 
      __label__ = 48; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $93=$dp;
      var $94=$row_addr;
      var $sub_ptr_lhs_cast=$93;
      var $sub_ptr_rhs_cast=$94;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      var $95=$row_info_addr;
      var $rowbytes121=(($95+4)|0);
      HEAP32[(($rowbytes121)>>2)]=$sub_ptr_sub;
      __label__ = 48; break;
    case 48: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_strip_channel["X"]=1;

function _png_do_bgr($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $row_width;
      var $rp;
      var $i;
      var $save;
      var $rp18;
      var $i19;
      var $save24;
      var $rp43;
      var $i44;
      var $save49;
      var $rp66;
      var $i67;
      var $save72;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $color_type=(($0+8)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $and=$conv & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 34; break; }
    case 2: 
      var $2=$row_info_addr;
      var $width=(($2)|0);
      var $3=HEAP32[(($width)>>2)];
      $row_width=$3;
      var $4=$row_info_addr;
      var $bit_depth=(($4+9)|0);
      var $5=HEAPU8[($bit_depth)];
      var $conv1=(($5)&255);
      var $cmp=(($conv1)|0)==8;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 17; break; }
    case 3: 
      var $6=$row_info_addr;
      var $color_type4=(($6+8)|0);
      var $7=HEAPU8[($color_type4)];
      var $conv5=(($7)&255);
      var $cmp6=(($conv5)|0)==2;
      if ($cmp6) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      $i=0;
      var $8=$row_addr;
      $rp=$8;
      __label__ = 5; break;
    case 5: 
      var $9=$i;
      var $10=$row_width;
      var $cmp9=(($9)>>>0) < (($10)>>>0);
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $11=$rp;
      var $12=HEAP8[($11)];
      $save=$12;
      var $13=$rp;
      var $add_ptr=(($13+2)|0);
      var $14=HEAP8[($add_ptr)];
      var $15=$rp;
      HEAP8[($15)]=$14;
      var $16=$save;
      var $17=$rp;
      var $add_ptr11=(($17+2)|0);
      HEAP8[($add_ptr11)]=$16;
      __label__ = 7; break;
    case 7: 
      var $18=$i;
      var $inc=(($18+1)|0);
      $i=$inc;
      var $19=$rp;
      var $add_ptr12=(($19+3)|0);
      $rp=$add_ptr12;
      __label__ = 5; break;
    case 8: 
      __label__ = 16; break;
    case 9: 
      var $20=$row_info_addr;
      var $color_type13=(($20+8)|0);
      var $21=HEAPU8[($color_type13)];
      var $conv14=(($21)&255);
      var $cmp15=(($conv14)|0)==6;
      if ($cmp15) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 10: 
      $i19=0;
      var $22=$row_addr;
      $rp18=$22;
      __label__ = 11; break;
    case 11: 
      var $23=$i19;
      var $24=$row_width;
      var $cmp21=(($23)>>>0) < (($24)>>>0);
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $25=$rp18;
      var $26=HEAP8[($25)];
      $save24=$26;
      var $27=$rp18;
      var $add_ptr25=(($27+2)|0);
      var $28=HEAP8[($add_ptr25)];
      var $29=$rp18;
      HEAP8[($29)]=$28;
      var $30=$save24;
      var $31=$rp18;
      var $add_ptr26=(($31+2)|0);
      HEAP8[($add_ptr26)]=$30;
      __label__ = 13; break;
    case 13: 
      var $32=$i19;
      var $inc28=(($32+1)|0);
      $i19=$inc28;
      var $33=$rp18;
      var $add_ptr29=(($33+4)|0);
      $rp18=$add_ptr29;
      __label__ = 11; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 33; break;
    case 17: 
      var $34=$row_info_addr;
      var $bit_depth33=(($34+9)|0);
      var $35=HEAPU8[($bit_depth33)];
      var $conv34=(($35)&255);
      var $cmp35=(($conv34)|0)==16;
      if ($cmp35) { __label__ = 18; break; } else { __label__ = 32; break; }
    case 18: 
      var $36=$row_info_addr;
      var $color_type38=(($36+8)|0);
      var $37=HEAPU8[($color_type38)];
      var $conv39=(($37)&255);
      var $cmp40=(($conv39)|0)==2;
      if ($cmp40) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: 
      $i44=0;
      var $38=$row_addr;
      $rp43=$38;
      __label__ = 20; break;
    case 20: 
      var $39=$i44;
      var $40=$row_width;
      var $cmp46=(($39)>>>0) < (($40)>>>0);
      if ($cmp46) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $41=$rp43;
      var $42=HEAP8[($41)];
      $save49=$42;
      var $43=$rp43;
      var $add_ptr50=(($43+4)|0);
      var $44=HEAP8[($add_ptr50)];
      var $45=$rp43;
      HEAP8[($45)]=$44;
      var $46=$save49;
      var $47=$rp43;
      var $add_ptr51=(($47+4)|0);
      HEAP8[($add_ptr51)]=$46;
      var $48=$rp43;
      var $add_ptr52=(($48+1)|0);
      var $49=HEAP8[($add_ptr52)];
      $save49=$49;
      var $50=$rp43;
      var $add_ptr53=(($50+5)|0);
      var $51=HEAP8[($add_ptr53)];
      var $52=$rp43;
      var $add_ptr54=(($52+1)|0);
      HEAP8[($add_ptr54)]=$51;
      var $53=$save49;
      var $54=$rp43;
      var $add_ptr55=(($54+5)|0);
      HEAP8[($add_ptr55)]=$53;
      __label__ = 22; break;
    case 22: 
      var $55=$i44;
      var $inc57=(($55+1)|0);
      $i44=$inc57;
      var $56=$rp43;
      var $add_ptr58=(($56+6)|0);
      $rp43=$add_ptr58;
      __label__ = 20; break;
    case 23: 
      __label__ = 31; break;
    case 24: 
      var $57=$row_info_addr;
      var $color_type61=(($57+8)|0);
      var $58=HEAPU8[($color_type61)];
      var $conv62=(($58)&255);
      var $cmp63=(($conv62)|0)==6;
      if ($cmp63) { __label__ = 25; break; } else { __label__ = 30; break; }
    case 25: 
      $i67=0;
      var $59=$row_addr;
      $rp66=$59;
      __label__ = 26; break;
    case 26: 
      var $60=$i67;
      var $61=$row_width;
      var $cmp69=(($60)>>>0) < (($61)>>>0);
      if ($cmp69) { __label__ = 27; break; } else { __label__ = 29; break; }
    case 27: 
      var $62=$rp66;
      var $63=HEAP8[($62)];
      $save72=$63;
      var $64=$rp66;
      var $add_ptr73=(($64+4)|0);
      var $65=HEAP8[($add_ptr73)];
      var $66=$rp66;
      HEAP8[($66)]=$65;
      var $67=$save72;
      var $68=$rp66;
      var $add_ptr74=(($68+4)|0);
      HEAP8[($add_ptr74)]=$67;
      var $69=$rp66;
      var $add_ptr75=(($69+1)|0);
      var $70=HEAP8[($add_ptr75)];
      $save72=$70;
      var $71=$rp66;
      var $add_ptr76=(($71+5)|0);
      var $72=HEAP8[($add_ptr76)];
      var $73=$rp66;
      var $add_ptr77=(($73+1)|0);
      HEAP8[($add_ptr77)]=$72;
      var $74=$save72;
      var $75=$rp66;
      var $add_ptr78=(($75+5)|0);
      HEAP8[($add_ptr78)]=$74;
      __label__ = 28; break;
    case 28: 
      var $76=$i67;
      var $inc80=(($76+1)|0);
      $i67=$inc80;
      var $77=$rp66;
      var $add_ptr81=(($77+8)|0);
      $rp66=$add_ptr81;
      __label__ = 26; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_bgr["X"]=1;

function _png_do_check_palette_indexes($png_ptr, $row_info) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $row_info_addr;
      var $padding;
      var $rp;
      var $i;
      var $i70;
      $png_ptr_addr=$png_ptr;
      $row_info_addr=$row_info;
      var $0=$png_ptr_addr;
      var $num_palette=(($0+276)|0);
      var $1=HEAPU16[(($num_palette)>>1)];
      var $conv=(($1)&65535);
      var $2=$row_info_addr;
      var $bit_depth=(($2+9)|0);
      var $3=HEAPU8[($bit_depth)];
      var $conv1=(($3)&255);
      var $shl=1 << $conv1;
      var $cmp=(($conv)|0) < (($shl)|0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 42; break; }
    case 2: 
      var $4=$png_ptr_addr;
      var $num_palette_max=(($4+280)|0);
      var $5=HEAP32[(($num_palette_max)>>2)];
      var $cmp3=(($5)|0) >= 0;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 42; break; }
    case 3: 
      var $6=$row_info_addr;
      var $pixel_depth=(($6+11)|0);
      var $7=HEAPU8[($pixel_depth)];
      var $conv5=(($7)&255);
      var $sub=(((-$conv5))|0);
      var $8=$row_info_addr;
      var $width=(($8)|0);
      var $9=HEAP32[(($width)>>2)];
      var $mul=(($sub*$9)|0);
      var $and=$mul & 7;
      $padding=$and;
      var $10=$png_ptr_addr;
      var $row_buf=(($10+240)|0);
      var $11=HEAP32[(($row_buf)>>2)];
      var $12=$row_info_addr;
      var $rowbytes=(($12+4)|0);
      var $13=HEAP32[(($rowbytes)>>2)];
      var $add_ptr=(($11+$13)|0);
      $rp=$add_ptr;
      var $14=$row_info_addr;
      var $bit_depth6=(($14+9)|0);
      var $15=HEAPU8[($bit_depth6)];
      var $conv7=(($15)&255);
      if ((($conv7)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($conv7)|0) == 2) {
        __label__ = 11; break;
      }
      else if ((($conv7)|0) == 4) {
        __label__ = 24; break;
      }
      else if ((($conv7)|0) == 8) {
        __label__ = 33; break;
      }
      else {
      __label__ = 40; break;
      }
      
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $16=$rp;
      var $17=$png_ptr_addr;
      var $row_buf8=(($17+240)|0);
      var $18=HEAPU32[(($row_buf8)>>2)];
      var $cmp9=(($16)>>>0) > (($18)>>>0);
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $19=$rp;
      var $20=HEAPU8[($19)];
      var $conv11=(($20)&255);
      var $21=$padding;
      var $shr=$conv11 >> (($21)|0);
      var $cmp12=(($shr)|0)!=0;
      if ($cmp12) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $22=$png_ptr_addr;
      var $num_palette_max15=(($22+280)|0);
      HEAP32[(($num_palette_max15)>>2)]=1;
      __label__ = 8; break;
    case 8: 
      $padding=0;
      __label__ = 9; break;
    case 9: 
      var $23=$rp;
      var $incdec_ptr=(($23-1)|0);
      $rp=$incdec_ptr;
      __label__ = 5; break;
    case 10: 
      __label__ = 41; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $24=$rp;
      var $25=$png_ptr_addr;
      var $row_buf18=(($25+240)|0);
      var $26=HEAPU32[(($row_buf18)>>2)];
      var $cmp19=(($24)>>>0) > (($26)>>>0);
      if ($cmp19) { __label__ = 13; break; } else { __label__ = 23; break; }
    case 13: 
      var $27=$rp;
      var $28=HEAPU8[($27)];
      var $conv22=(($28)&255);
      var $29=$padding;
      var $shr23=$conv22 >> (($29)|0);
      var $and24=$shr23 & 3;
      $i=$and24;
      var $30=$i;
      var $31=$png_ptr_addr;
      var $num_palette_max25=(($31+280)|0);
      var $32=HEAP32[(($num_palette_max25)>>2)];
      var $cmp26=(($30)|0) > (($32)|0);
      if ($cmp26) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $33=$i;
      var $34=$png_ptr_addr;
      var $num_palette_max29=(($34+280)|0);
      HEAP32[(($num_palette_max29)>>2)]=$33;
      __label__ = 15; break;
    case 15: 
      var $35=$rp;
      var $36=HEAPU8[($35)];
      var $conv31=(($36)&255);
      var $37=$padding;
      var $shr32=$conv31 >> (($37)|0);
      var $shr33=$shr32 >> 2;
      var $and34=$shr33 & 3;
      $i=$and34;
      var $38=$i;
      var $39=$png_ptr_addr;
      var $num_palette_max35=(($39+280)|0);
      var $40=HEAP32[(($num_palette_max35)>>2)];
      var $cmp36=(($38)|0) > (($40)|0);
      if ($cmp36) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $41=$i;
      var $42=$png_ptr_addr;
      var $num_palette_max39=(($42+280)|0);
      HEAP32[(($num_palette_max39)>>2)]=$41;
      __label__ = 17; break;
    case 17: 
      var $43=$rp;
      var $44=HEAPU8[($43)];
      var $conv41=(($44)&255);
      var $45=$padding;
      var $shr42=$conv41 >> (($45)|0);
      var $shr43=$shr42 >> 4;
      var $and44=$shr43 & 3;
      $i=$and44;
      var $46=$i;
      var $47=$png_ptr_addr;
      var $num_palette_max45=(($47+280)|0);
      var $48=HEAP32[(($num_palette_max45)>>2)];
      var $cmp46=(($46)|0) > (($48)|0);
      if ($cmp46) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $49=$i;
      var $50=$png_ptr_addr;
      var $num_palette_max49=(($50+280)|0);
      HEAP32[(($num_palette_max49)>>2)]=$49;
      __label__ = 19; break;
    case 19: 
      var $51=$rp;
      var $52=HEAPU8[($51)];
      var $conv51=(($52)&255);
      var $53=$padding;
      var $shr52=$conv51 >> (($53)|0);
      var $shr53=$shr52 >> 6;
      var $and54=$shr53 & 3;
      $i=$and54;
      var $54=$i;
      var $55=$png_ptr_addr;
      var $num_palette_max55=(($55+280)|0);
      var $56=HEAP32[(($num_palette_max55)>>2)];
      var $cmp56=(($54)|0) > (($56)|0);
      if ($cmp56) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $57=$i;
      var $58=$png_ptr_addr;
      var $num_palette_max59=(($58+280)|0);
      HEAP32[(($num_palette_max59)>>2)]=$57;
      __label__ = 21; break;
    case 21: 
      $padding=0;
      __label__ = 22; break;
    case 22: 
      var $59=$rp;
      var $incdec_ptr62=(($59-1)|0);
      $rp=$incdec_ptr62;
      __label__ = 12; break;
    case 23: 
      __label__ = 41; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $60=$rp;
      var $61=$png_ptr_addr;
      var $row_buf66=(($61+240)|0);
      var $62=HEAPU32[(($row_buf66)>>2)];
      var $cmp67=(($60)>>>0) > (($62)>>>0);
      if ($cmp67) { __label__ = 26; break; } else { __label__ = 32; break; }
    case 26: 
      var $63=$rp;
      var $64=HEAPU8[($63)];
      var $conv71=(($64)&255);
      var $65=$padding;
      var $shr72=$conv71 >> (($65)|0);
      var $and73=$shr72 & 15;
      $i70=$and73;
      var $66=$i70;
      var $67=$png_ptr_addr;
      var $num_palette_max74=(($67+280)|0);
      var $68=HEAP32[(($num_palette_max74)>>2)];
      var $cmp75=(($66)|0) > (($68)|0);
      if ($cmp75) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $69=$i70;
      var $70=$png_ptr_addr;
      var $num_palette_max78=(($70+280)|0);
      HEAP32[(($num_palette_max78)>>2)]=$69;
      __label__ = 28; break;
    case 28: 
      var $71=$rp;
      var $72=HEAPU8[($71)];
      var $conv80=(($72)&255);
      var $73=$padding;
      var $shr81=$conv80 >> (($73)|0);
      var $shr82=$shr81 >> 4;
      var $and83=$shr82 & 15;
      $i70=$and83;
      var $74=$i70;
      var $75=$png_ptr_addr;
      var $num_palette_max84=(($75+280)|0);
      var $76=HEAP32[(($num_palette_max84)>>2)];
      var $cmp85=(($74)|0) > (($76)|0);
      if ($cmp85) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $77=$i70;
      var $78=$png_ptr_addr;
      var $num_palette_max88=(($78+280)|0);
      HEAP32[(($num_palette_max88)>>2)]=$77;
      __label__ = 30; break;
    case 30: 
      $padding=0;
      __label__ = 31; break;
    case 31: 
      var $79=$rp;
      var $incdec_ptr91=(($79-1)|0);
      $rp=$incdec_ptr91;
      __label__ = 25; break;
    case 32: 
      __label__ = 41; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $80=$rp;
      var $81=$png_ptr_addr;
      var $row_buf95=(($81+240)|0);
      var $82=HEAPU32[(($row_buf95)>>2)];
      var $cmp96=(($80)>>>0) > (($82)>>>0);
      if ($cmp96) { __label__ = 35; break; } else { __label__ = 39; break; }
    case 35: 
      var $83=$rp;
      var $84=HEAPU8[($83)];
      var $conv99=(($84)&255);
      var $85=$png_ptr_addr;
      var $num_palette_max100=(($85+280)|0);
      var $86=HEAP32[(($num_palette_max100)>>2)];
      var $cmp101=(($conv99)|0) >= (($86)|0);
      if ($cmp101) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $87=$rp;
      var $88=HEAPU8[($87)];
      var $conv104=(($88)&255);
      var $89=$png_ptr_addr;
      var $num_palette_max105=(($89+280)|0);
      HEAP32[(($num_palette_max105)>>2)]=$conv104;
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      var $90=$rp;
      var $incdec_ptr108=(($90-1)|0);
      $rp=$incdec_ptr108;
      __label__ = 34; break;
    case 39: 
      __label__ = 41; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_check_palette_indexes["X"]=1;

function _png_write_data($png_ptr, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $data_addr;
      var $length_addr;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $write_data_fn=(($0+56)|0);
      var $1=HEAP32[(($write_data_fn)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $write_data_fn1=(($2+56)|0);
      var $3=HEAP32[(($write_data_fn1)>>2)];
      var $4=$png_ptr_addr;
      var $5=$data_addr;
      var $6=$length_addr;
      FUNCTION_TABLE[$3]($4, $5, $6);
      __label__ = 4; break;
    case 3: 
      var $7=$png_ptr_addr;
      _png_error($7, ((STRING_TABLE.__str1085)|0));
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_default_write_data($png_ptr, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $data_addr;
      var $length_addr;
      var $check;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 5; break;
    case 3: 
      var $1=$data_addr;
      var $2=$length_addr;
      var $3=$png_ptr_addr;
      var $io_ptr=(($3+64)|0);
      var $4=HEAP32[(($io_ptr)>>2)];
      var $5=$4;
      var $call=_fwrite($1, 1, $2, $5);
      $check=$call;
      var $6=$check;
      var $7=$length_addr;
      var $cmp1=(($6)|0)!=(($7)|0);
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $8=$png_ptr_addr;
      _png_error($8, ((STRING_TABLE.__str11086)|0));
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_flush($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $output_flush_fn=(($0+336)|0);
      var $1=HEAP32[(($output_flush_fn)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $output_flush_fn1=(($2+336)|0);
      var $3=HEAP32[(($output_flush_fn1)>>2)];
      var $4=$png_ptr_addr;
      FUNCTION_TABLE[$3]($4);
      __label__ = 3; break;
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_default_flush($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $io_ptr;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $io_ptr1=(($1+64)|0);
      var $2=HEAP32[(($io_ptr1)>>2)];
      var $3=$2;
      $io_ptr=$3;
      var $4=$io_ptr;
      var $call=_fflush($4);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_write_fn($png_ptr, $io_ptr, $write_data_fn, $output_flush_fn) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $io_ptr_addr;
      var $write_data_fn_addr;
      var $output_flush_fn_addr;
      $png_ptr_addr=$png_ptr;
      $io_ptr_addr=$io_ptr;
      $write_data_fn_addr=$write_data_fn;
      $output_flush_fn_addr=$output_flush_fn;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 11; break;
    case 3: 
      var $1=$io_ptr_addr;
      var $2=$png_ptr_addr;
      var $io_ptr1=(($2+64)|0);
      HEAP32[(($io_ptr1)>>2)]=$1;
      var $3=$write_data_fn_addr;
      var $cmp2=(($3)|0)!=0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$write_data_fn_addr;
      var $5=$png_ptr_addr;
      var $write_data_fn4=(($5+56)|0);
      HEAP32[(($write_data_fn4)>>2)]=$4;
      __label__ = 6; break;
    case 5: 
      var $6=$png_ptr_addr;
      var $write_data_fn5=(($6+56)|0);
      HEAP32[(($write_data_fn5)>>2)]=26;
      __label__ = 6; break;
    case 6: 
      var $7=$output_flush_fn_addr;
      var $cmp7=(($7)|0)!=0;
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $8=$output_flush_fn_addr;
      var $9=$png_ptr_addr;
      var $output_flush_fn9=(($9+336)|0);
      HEAP32[(($output_flush_fn9)>>2)]=$8;
      __label__ = 9; break;
    case 8: 
      var $10=$png_ptr_addr;
      var $output_flush_fn11=(($10+336)|0);
      HEAP32[(($output_flush_fn11)>>2)]=28;
      __label__ = 9; break;
    case 9: 
      var $11=$png_ptr_addr;
      var $read_data_fn=(($11+60)|0);
      var $12=HEAP32[(($read_data_fn)>>2)];
      var $cmp13=(($12)|0)!=0;
      if ($cmp13) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $13=$png_ptr_addr;
      var $read_data_fn15=(($13+60)|0);
      HEAP32[(($read_data_fn15)>>2)]=0;
      var $14=$png_ptr_addr;
      _png_warning($14, ((STRING_TABLE.__str21087)|0));
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_write_fn["X"]=1;

function _png_write_info_before_PLTE($png_ptr, $info_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $up;
      var $keep;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 36; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $mode=(($2+84)|0);
      var $3=HEAP32[(($mode)>>2)];
      var $and=$3 & 1024;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 36; break; } else { __label__ = 5; break; }
    case 5: 
      var $4=$png_ptr_addr;
      _png_write_sig($4);
      var $5=$png_ptr_addr;
      var $mode3=(($5+84)|0);
      var $6=HEAP32[(($mode3)>>2)];
      var $and4=$6 & 4096;
      var $tobool5=(($and4)|0)!=0;
      if ($tobool5) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $7=$png_ptr_addr;
      var $mng_features_permitted=(($7+576)|0);
      var $8=HEAP32[(($mng_features_permitted)>>2)];
      var $tobool6=(($8)|0)!=0;
      if ($tobool6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $9=$png_ptr_addr;
      _png_warning($9, ((STRING_TABLE.__str1090)|0));
      var $10=$png_ptr_addr;
      var $mng_features_permitted8=(($10+576)|0);
      HEAP32[(($mng_features_permitted8)>>2)]=0;
      __label__ = 8; break;
    case 8: 
      var $11=$png_ptr_addr;
      var $12=$info_ptr_addr;
      var $width=(($12)|0);
      var $13=HEAP32[(($width)>>2)];
      var $14=$info_ptr_addr;
      var $height=(($14+4)|0);
      var $15=HEAP32[(($height)>>2)];
      var $16=$info_ptr_addr;
      var $bit_depth=(($16+24)|0);
      var $17=HEAPU8[($bit_depth)];
      var $conv=(($17)&255);
      var $18=$info_ptr_addr;
      var $color_type=(($18+25)|0);
      var $19=HEAPU8[($color_type)];
      var $conv10=(($19)&255);
      var $20=$info_ptr_addr;
      var $compression_type=(($20+26)|0);
      var $21=HEAPU8[($compression_type)];
      var $conv11=(($21)&255);
      var $22=$info_ptr_addr;
      var $filter_type=(($22+27)|0);
      var $23=HEAPU8[($filter_type)];
      var $conv12=(($23)&255);
      var $24=$info_ptr_addr;
      var $interlace_type=(($24+28)|0);
      var $25=HEAPU8[($interlace_type)];
      var $conv13=(($25)&255);
      _png_write_IHDR($11, $13, $15, $conv, $conv10, $conv11, $conv12, $conv13);
      var $26=$info_ptr_addr;
      var $valid=(($26+8)|0);
      var $27=HEAP32[(($valid)>>2)];
      var $and14=$27 & 1;
      var $tobool15=(($and14)|0)!=0;
      if ($tobool15) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $28=$png_ptr_addr;
      var $29=$info_ptr_addr;
      var $gamma=(($29+40)|0);
      var $30=HEAP32[(($gamma)>>2)];
      _png_write_gAMA_fixed($28, $30);
      __label__ = 10; break;
    case 10: 
      var $31=$info_ptr_addr;
      var $valid18=(($31+8)|0);
      var $32=HEAP32[(($valid18)>>2)];
      var $and19=$32 & 2048;
      var $tobool20=(($and19)|0)!=0;
      if ($tobool20) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $33=$png_ptr_addr;
      var $34=$info_ptr_addr;
      var $srgb_intent=(($34+44)|0);
      var $35=HEAPU8[($srgb_intent)];
      var $conv22=(($35)&255);
      _png_write_sRGB($33, $conv22);
      __label__ = 12; break;
    case 12: 
      var $36=$info_ptr_addr;
      var $valid24=(($36+8)|0);
      var $37=HEAP32[(($valid24)>>2)];
      var $and25=$37 & 4096;
      var $tobool26=(($and25)|0)!=0;
      if ($tobool26) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $38=$png_ptr_addr;
      var $39=$info_ptr_addr;
      var $iccp_name=(($39+196)|0);
      var $40=HEAP32[(($iccp_name)>>2)];
      var $41=$info_ptr_addr;
      var $iccp_profile=(($41+200)|0);
      var $42=HEAP32[(($iccp_profile)>>2)];
      var $43=$info_ptr_addr;
      var $iccp_proflen=(($43+204)|0);
      var $44=HEAP32[(($iccp_proflen)>>2)];
      _png_write_iCCP($38, $40, 0, $42, $44);
      __label__ = 14; break;
    case 14: 
      var $45=$info_ptr_addr;
      var $valid29=(($45+8)|0);
      var $46=HEAP32[(($valid29)>>2)];
      var $and30=$46 & 2;
      var $tobool31=(($and30)|0)!=0;
      if ($tobool31) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $47=$png_ptr_addr;
      var $48=$info_ptr_addr;
      var $sig_bit=(($48+68)|0);
      var $49=$info_ptr_addr;
      var $color_type33=(($49+25)|0);
      var $50=HEAPU8[($color_type33)];
      var $conv34=(($50)&255);
      _png_write_sBIT($47, $sig_bit, $conv34);
      __label__ = 16; break;
    case 16: 
      var $51=$info_ptr_addr;
      var $valid36=(($51+8)|0);
      var $52=HEAP32[(($valid36)>>2)];
      var $and37=$52 & 4;
      var $tobool38=(($and37)|0)!=0;
      if ($tobool38) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $53=$png_ptr_addr;
      var $54=$info_ptr_addr;
      var $x_white=(($54+128)|0);
      var $55=HEAP32[(($x_white)>>2)];
      var $56=$info_ptr_addr;
      var $y_white=(($56+132)|0);
      var $57=HEAP32[(($y_white)>>2)];
      var $58=$info_ptr_addr;
      var $x_red=(($58+136)|0);
      var $59=HEAP32[(($x_red)>>2)];
      var $60=$info_ptr_addr;
      var $y_red=(($60+140)|0);
      var $61=HEAP32[(($y_red)>>2)];
      var $62=$info_ptr_addr;
      var $x_green=(($62+144)|0);
      var $63=HEAP32[(($x_green)>>2)];
      var $64=$info_ptr_addr;
      var $y_green=(($64+148)|0);
      var $65=HEAP32[(($y_green)>>2)];
      var $66=$info_ptr_addr;
      var $x_blue=(($66+152)|0);
      var $67=HEAP32[(($x_blue)>>2)];
      var $68=$info_ptr_addr;
      var $y_blue=(($68+156)|0);
      var $69=HEAP32[(($y_blue)>>2)];
      _png_write_cHRM_fixed($53, $55, $57, $59, $61, $63, $65, $67, $69);
      __label__ = 18; break;
    case 18: 
      var $70=$info_ptr_addr;
      var $unknown_chunks_num=(($70+192)|0);
      var $71=HEAP32[(($unknown_chunks_num)>>2)];
      var $tobool41=(($71)|0)!=0;
      if ($tobool41) { __label__ = 19; break; } else { __label__ = 35; break; }
    case 19: 
      var $72=$info_ptr_addr;
      var $unknown_chunks=(($72+188)|0);
      var $73=HEAP32[(($unknown_chunks)>>2)];
      $up=$73;
      __label__ = 20; break;
    case 20: 
      var $74=$up;
      var $75=$info_ptr_addr;
      var $unknown_chunks43=(($75+188)|0);
      var $76=HEAP32[(($unknown_chunks43)>>2)];
      var $77=$info_ptr_addr;
      var $unknown_chunks_num44=(($77+192)|0);
      var $78=HEAP32[(($unknown_chunks_num44)>>2)];
      var $add_ptr=(($76+$78*20)|0);
      var $cmp45=(($74)>>>0) < (($add_ptr)>>>0);
      if ($cmp45) { __label__ = 21; break; } else { __label__ = 34; break; }
    case 21: 
      var $79=$png_ptr_addr;
      var $80=$up;
      var $name=(($80)|0);
      var $arraydecay=(($name)|0);
      var $call=_png_handle_as_unknown($79, $arraydecay);
      $keep=$call;
      var $81=$keep;
      var $cmp47=(($81)|0)!=1;
      if ($cmp47) { __label__ = 22; break; } else { __label__ = 32; break; }
    case 22: 
      var $82=$up;
      var $location=(($82+16)|0);
      var $83=HEAPU8[($location)];
      var $conv50=(($83)&255);
      var $tobool51=(($conv50)|0)!=0;
      if ($tobool51) { __label__ = 23; break; } else { __label__ = 32; break; }
    case 23: 
      var $84=$up;
      var $location53=(($84+16)|0);
      var $85=HEAPU8[($location53)];
      var $conv54=(($85)&255);
      var $and55=$conv54 & 2;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { __label__ = 32; break; } else { __label__ = 24; break; }
    case 24: 
      var $86=$up;
      var $location58=(($86+16)|0);
      var $87=HEAPU8[($location58)];
      var $conv59=(($87)&255);
      var $and60=$conv59 & 4;
      var $tobool61=(($and60)|0)!=0;
      if ($tobool61) { __label__ = 32; break; } else { __label__ = 25; break; }
    case 25: 
      var $88=$up;
      var $location63=(($88+16)|0);
      var $89=HEAPU8[($location63)];
      var $conv64=(($89)&255);
      var $and65=$conv64 & 8;
      var $tobool66=(($and65)|0)!=0;
      if ($tobool66) { __label__ = 32; break; } else { __label__ = 26; break; }
    case 26: 
      var $90=$up;
      var $name68=(($90)|0);
      var $arrayidx=(($name68+3)|0);
      var $91=HEAPU8[($arrayidx)];
      var $conv69=(($91)&255);
      var $and70=$conv69 & 32;
      var $tobool71=(($and70)|0)!=0;
      if ($tobool71) { __label__ = 29; break; } else { __label__ = 27; break; }
    case 27: 
      var $92=$keep;
      var $cmp73=(($92)|0)==3;
      if ($cmp73) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: 
      var $93=$png_ptr_addr;
      var $flags=(($93+88)|0);
      var $94=HEAP32[(($flags)>>2)];
      var $and76=$94 & 65536;
      var $tobool77=(($and76)|0)!=0;
      if ($tobool77) { __label__ = 29; break; } else { __label__ = 32; break; }
    case 29: 
      var $95=$up;
      var $size=(($95+12)|0);
      var $96=HEAP32[(($size)>>2)];
      var $cmp79=(($96)|0)==0;
      if ($cmp79) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $97=$png_ptr_addr;
      _png_warning($97, ((STRING_TABLE.__str11091)|0));
      __label__ = 31; break;
    case 31: 
      var $98=$png_ptr_addr;
      var $99=$up;
      var $name83=(($99)|0);
      var $arraydecay84=(($name83)|0);
      var $100=$up;
      var $data=(($100+8)|0);
      var $101=HEAP32[(($data)>>2)];
      var $102=$up;
      var $size85=(($102+12)|0);
      var $103=HEAP32[(($size85)>>2)];
      _png_write_chunk($98, $arraydecay84, $101, $103);
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      var $104=$up;
      var $incdec_ptr=(($104+20)|0);
      $up=$incdec_ptr;
      __label__ = 20; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $105=$png_ptr_addr;
      var $mode88=(($105+84)|0);
      var $106=HEAP32[(($mode88)>>2)];
      var $or=$106 | 1024;
      HEAP32[(($mode88)>>2)]=$or;
      __label__ = 36; break;
    case 36: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_info_before_PLTE["X"]=1;

function _png_write_info($png_ptr, $info_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $i;
      var $j;
      var $up;
      var $keep;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$info_ptr_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 65; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $3=$info_ptr_addr;
      _png_write_info_before_PLTE($2, $3);
      var $4=$info_ptr_addr;
      var $valid=(($4+8)|0);
      var $5=HEAP32[(($valid)>>2)];
      var $and=$5 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$png_ptr_addr;
      var $7=$info_ptr_addr;
      var $palette=(($7+16)|0);
      var $8=HEAP32[(($palette)>>2)];
      var $9=$info_ptr_addr;
      var $num_palette=(($9+20)|0);
      var $10=HEAPU16[(($num_palette)>>1)];
      var $conv=(($10)&65535);
      _png_write_PLTE($6, $8, $conv);
      __label__ = 9; break;
    case 6: 
      var $11=$info_ptr_addr;
      var $color_type=(($11+25)|0);
      var $12=HEAPU8[($color_type)];
      var $conv3=(($12)&255);
      var $cmp4=(($conv3)|0)==3;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $13=$png_ptr_addr;
      _png_error($13, ((STRING_TABLE.__str21092)|0));
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $14=$info_ptr_addr;
      var $valid9=(($14+8)|0);
      var $15=HEAP32[(($valid9)>>2)];
      var $and10=$15 & 16;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { __label__ = 10; break; } else { __label__ = 18; break; }
    case 10: 
      var $16=$png_ptr_addr;
      var $transformations=(($16+92)|0);
      var $17=HEAP32[(($transformations)>>2)];
      var $and13=$17 & 524288;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 11; break; } else { __label__ = 17; break; }
    case 11: 
      var $18=$info_ptr_addr;
      var $color_type15=(($18+25)|0);
      var $19=HEAPU8[($color_type15)];
      var $conv16=(($19)&255);
      var $cmp17=(($conv16)|0)==3;
      if ($cmp17) { __label__ = 12; break; } else { __label__ = 17; break; }
    case 12: 
      $j=0;
      __label__ = 13; break;
    case 13: 
      var $20=$j;
      var $21=$info_ptr_addr;
      var $num_trans=(($21+22)|0);
      var $22=HEAPU16[(($num_trans)>>1)];
      var $conv20=(($22)&65535);
      var $cmp21=(($20)|0) < (($conv20)|0);
      if ($cmp21) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $23=$j;
      var $24=$info_ptr_addr;
      var $trans_alpha=(($24+76)|0);
      var $25=HEAP32[(($trans_alpha)>>2)];
      var $arrayidx=(($25+$23)|0);
      var $26=HEAPU8[($arrayidx)];
      var $conv23=(($26)&255);
      var $sub=((255-$conv23)|0);
      var $conv24=(($sub) & 255);
      var $27=$j;
      var $28=$info_ptr_addr;
      var $trans_alpha25=(($28+76)|0);
      var $29=HEAP32[(($trans_alpha25)>>2)];
      var $arrayidx26=(($29+$27)|0);
      HEAP8[($arrayidx26)]=$conv24;
      __label__ = 15; break;
    case 15: 
      var $30=$j;
      var $inc=(($30+1)|0);
      $j=$inc;
      __label__ = 13; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $31=$png_ptr_addr;
      var $32=$info_ptr_addr;
      var $trans_alpha28=(($32+76)|0);
      var $33=HEAP32[(($trans_alpha28)>>2)];
      var $34=$info_ptr_addr;
      var $trans_color=(($34+80)|0);
      var $35=$info_ptr_addr;
      var $num_trans29=(($35+22)|0);
      var $36=HEAPU16[(($num_trans29)>>1)];
      var $conv30=(($36)&65535);
      var $37=$info_ptr_addr;
      var $color_type31=(($37+25)|0);
      var $38=HEAPU8[($color_type31)];
      var $conv32=(($38)&255);
      _png_write_tRNS($31, $33, $trans_color, $conv30, $conv32);
      __label__ = 18; break;
    case 18: 
      var $39=$info_ptr_addr;
      var $valid34=(($39+8)|0);
      var $40=HEAP32[(($valid34)>>2)];
      var $and35=$40 & 32;
      var $tobool36=(($and35)|0)!=0;
      if ($tobool36) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $41=$png_ptr_addr;
      var $42=$info_ptr_addr;
      var $background=(($42+90)|0);
      var $43=$info_ptr_addr;
      var $color_type38=(($43+25)|0);
      var $44=HEAPU8[($color_type38)];
      var $conv39=(($44)&255);
      _png_write_bKGD($41, $background, $conv39);
      __label__ = 20; break;
    case 20: 
      var $45=$info_ptr_addr;
      var $valid41=(($45+8)|0);
      var $46=HEAP32[(($valid41)>>2)];
      var $and42=$46 & 64;
      var $tobool43=(($and42)|0)!=0;
      if ($tobool43) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $47=$png_ptr_addr;
      var $48=$info_ptr_addr;
      var $hist=(($48+124)|0);
      var $49=HEAP32[(($hist)>>2)];
      var $50=$info_ptr_addr;
      var $num_palette45=(($50+20)|0);
      var $51=HEAPU16[(($num_palette45)>>1)];
      var $conv46=(($51)&65535);
      _png_write_hIST($47, $49, $conv46);
      __label__ = 22; break;
    case 22: 
      var $52=$info_ptr_addr;
      var $valid48=(($52+8)|0);
      var $53=HEAP32[(($valid48)>>2)];
      var $and49=$53 & 256;
      var $tobool50=(($and49)|0)!=0;
      if ($tobool50) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $54=$png_ptr_addr;
      var $55=$info_ptr_addr;
      var $x_offset=(($55+100)|0);
      var $56=HEAP32[(($x_offset)>>2)];
      var $57=$info_ptr_addr;
      var $y_offset=(($57+104)|0);
      var $58=HEAP32[(($y_offset)>>2)];
      var $59=$info_ptr_addr;
      var $offset_unit_type=(($59+108)|0);
      var $60=HEAPU8[($offset_unit_type)];
      var $conv52=(($60)&255);
      _png_write_oFFs($54, $56, $58, $conv52);
      __label__ = 24; break;
    case 24: 
      var $61=$info_ptr_addr;
      var $valid54=(($61+8)|0);
      var $62=HEAP32[(($valid54)>>2)];
      var $and55=$62 & 1024;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $63=$png_ptr_addr;
      var $64=$info_ptr_addr;
      var $pcal_purpose=(($64+160)|0);
      var $65=HEAP32[(($pcal_purpose)>>2)];
      var $66=$info_ptr_addr;
      var $pcal_X0=(($66+164)|0);
      var $67=HEAP32[(($pcal_X0)>>2)];
      var $68=$info_ptr_addr;
      var $pcal_X1=(($68+168)|0);
      var $69=HEAP32[(($pcal_X1)>>2)];
      var $70=$info_ptr_addr;
      var $pcal_type=(($70+180)|0);
      var $71=HEAPU8[($pcal_type)];
      var $conv58=(($71)&255);
      var $72=$info_ptr_addr;
      var $pcal_nparams=(($72+181)|0);
      var $73=HEAPU8[($pcal_nparams)];
      var $conv59=(($73)&255);
      var $74=$info_ptr_addr;
      var $pcal_units=(($74+172)|0);
      var $75=HEAP32[(($pcal_units)>>2)];
      var $76=$info_ptr_addr;
      var $pcal_params=(($76+176)|0);
      var $77=HEAP32[(($pcal_params)>>2)];
      _png_write_pCAL($63, $65, $67, $69, $conv58, $conv59, $75, $77);
      __label__ = 26; break;
    case 26: 
      var $78=$info_ptr_addr;
      var $valid61=(($78+8)|0);
      var $79=HEAP32[(($valid61)>>2)];
      var $and62=$79 & 16384;
      var $tobool63=(($and62)|0)!=0;
      if ($tobool63) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $80=$png_ptr_addr;
      var $81=$info_ptr_addr;
      var $scal_unit=(($81+220)|0);
      var $82=HEAPU8[($scal_unit)];
      var $conv65=(($82)&255);
      var $83=$info_ptr_addr;
      var $scal_s_width=(($83+224)|0);
      var $84=HEAP32[(($scal_s_width)>>2)];
      var $85=$info_ptr_addr;
      var $scal_s_height=(($85+228)|0);
      var $86=HEAP32[(($scal_s_height)>>2)];
      _png_write_sCAL_s($80, $conv65, $84, $86);
      __label__ = 28; break;
    case 28: 
      var $87=$info_ptr_addr;
      var $valid67=(($87+8)|0);
      var $88=HEAP32[(($valid67)>>2)];
      var $and68=$88 & 128;
      var $tobool69=(($and68)|0)!=0;
      if ($tobool69) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $89=$png_ptr_addr;
      var $90=$info_ptr_addr;
      var $x_pixels_per_unit=(($90+112)|0);
      var $91=HEAP32[(($x_pixels_per_unit)>>2)];
      var $92=$info_ptr_addr;
      var $y_pixels_per_unit=(($92+116)|0);
      var $93=HEAP32[(($y_pixels_per_unit)>>2)];
      var $94=$info_ptr_addr;
      var $phys_unit_type=(($94+120)|0);
      var $95=HEAPU8[($phys_unit_type)];
      var $conv71=(($95)&255);
      _png_write_pHYs($89, $91, $93, $conv71);
      __label__ = 30; break;
    case 30: 
      var $96=$info_ptr_addr;
      var $valid73=(($96+8)|0);
      var $97=HEAP32[(($valid73)>>2)];
      var $and74=$97 & 512;
      var $tobool75=(($and74)|0)!=0;
      if ($tobool75) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $98=$png_ptr_addr;
      var $99=$info_ptr_addr;
      var $mod_time=(($99+60)|0);
      _png_write_tIME($98, $mod_time);
      var $100=$png_ptr_addr;
      var $mode=(($100+84)|0);
      var $101=HEAP32[(($mode)>>2)];
      var $or=$101 | 512;
      HEAP32[(($mode)>>2)]=$or;
      __label__ = 32; break;
    case 32: 
      var $102=$info_ptr_addr;
      var $valid78=(($102+8)|0);
      var $103=HEAP32[(($valid78)>>2)];
      var $and79=$103 & 8192;
      var $tobool80=(($and79)|0)!=0;
      if ($tobool80) { __label__ = 33; break; } else { __label__ = 38; break; }
    case 33: 
      $i=0;
      __label__ = 34; break;
    case 34: 
      var $104=$i;
      var $105=$info_ptr_addr;
      var $splt_palettes_num=(($105+216)|0);
      var $106=HEAP32[(($splt_palettes_num)>>2)];
      var $cmp83=(($104)|0) < (($106)|0);
      if ($cmp83) { __label__ = 35; break; } else { __label__ = 37; break; }
    case 35: 
      var $107=$png_ptr_addr;
      var $108=$info_ptr_addr;
      var $splt_palettes=(($108+212)|0);
      var $109=HEAP32[(($splt_palettes)>>2)];
      var $110=$i;
      var $add_ptr=(($109+($110<<4))|0);
      _png_write_sPLT($107, $add_ptr);
      __label__ = 36; break;
    case 36: 
      var $111=$i;
      var $inc87=(($111+1)|0);
      $i=$inc87;
      __label__ = 34; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      $i=0;
      __label__ = 39; break;
    case 39: 
      var $112=$i;
      var $113=$info_ptr_addr;
      var $num_text=(($113+48)|0);
      var $114=HEAP32[(($num_text)>>2)];
      var $cmp91=(($112)|0) < (($114)|0);
      if ($cmp91) { __label__ = 40; break; } else { __label__ = 50; break; }
    case 40: 
      var $115=$i;
      var $116=$info_ptr_addr;
      var $text=(($116+56)|0);
      var $117=HEAP32[(($text)>>2)];
      var $arrayidx94=(($117+$115*28)|0);
      var $compression=(($arrayidx94)|0);
      var $118=HEAP32[(($compression)>>2)];
      var $cmp95=(($118)|0) > 0;
      if ($cmp95) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $119=$png_ptr_addr;
      var $120=$i;
      var $121=$info_ptr_addr;
      var $text98=(($121+56)|0);
      var $122=HEAP32[(($text98)>>2)];
      var $arrayidx99=(($122+$120*28)|0);
      var $compression100=(($arrayidx99)|0);
      var $123=HEAP32[(($compression100)>>2)];
      var $124=$i;
      var $125=$info_ptr_addr;
      var $text101=(($125+56)|0);
      var $126=HEAP32[(($text101)>>2)];
      var $arrayidx102=(($126+$124*28)|0);
      var $key=(($arrayidx102+4)|0);
      var $127=HEAP32[(($key)>>2)];
      var $128=$i;
      var $129=$info_ptr_addr;
      var $text103=(($129+56)|0);
      var $130=HEAP32[(($text103)>>2)];
      var $arrayidx104=(($130+$128*28)|0);
      var $lang=(($arrayidx104+20)|0);
      var $131=HEAP32[(($lang)>>2)];
      var $132=$i;
      var $133=$info_ptr_addr;
      var $text105=(($133+56)|0);
      var $134=HEAP32[(($text105)>>2)];
      var $arrayidx106=(($134+$132*28)|0);
      var $lang_key=(($arrayidx106+24)|0);
      var $135=HEAP32[(($lang_key)>>2)];
      var $136=$i;
      var $137=$info_ptr_addr;
      var $text107=(($137+56)|0);
      var $138=HEAP32[(($text107)>>2)];
      var $arrayidx108=(($138+$136*28)|0);
      var $text109=(($arrayidx108+8)|0);
      var $139=HEAP32[(($text109)>>2)];
      _png_write_iTXt($119, $123, $127, $131, $135, $139);
      var $140=$i;
      var $141=$info_ptr_addr;
      var $text110=(($141+56)|0);
      var $142=HEAP32[(($text110)>>2)];
      var $arrayidx111=(($142+$140*28)|0);
      var $compression112=(($arrayidx111)|0);
      HEAP32[(($compression112)>>2)]=-3;
      __label__ = 48; break;
    case 42: 
      var $143=$i;
      var $144=$info_ptr_addr;
      var $text114=(($144+56)|0);
      var $145=HEAP32[(($text114)>>2)];
      var $arrayidx115=(($145+$143*28)|0);
      var $compression116=(($arrayidx115)|0);
      var $146=HEAP32[(($compression116)>>2)];
      var $cmp117=(($146)|0)==0;
      if ($cmp117) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $147=$png_ptr_addr;
      var $148=$i;
      var $149=$info_ptr_addr;
      var $text120=(($149+56)|0);
      var $150=HEAP32[(($text120)>>2)];
      var $arrayidx121=(($150+$148*28)|0);
      var $key122=(($arrayidx121+4)|0);
      var $151=HEAP32[(($key122)>>2)];
      var $152=$i;
      var $153=$info_ptr_addr;
      var $text123=(($153+56)|0);
      var $154=HEAP32[(($text123)>>2)];
      var $arrayidx124=(($154+$152*28)|0);
      var $text125=(($arrayidx124+8)|0);
      var $155=HEAP32[(($text125)>>2)];
      var $156=$i;
      var $157=$info_ptr_addr;
      var $text126=(($157+56)|0);
      var $158=HEAP32[(($text126)>>2)];
      var $arrayidx127=(($158+$156*28)|0);
      var $compression128=(($arrayidx127)|0);
      var $159=HEAP32[(($compression128)>>2)];
      _png_write_zTXt($147, $151, $155, 0, $159);
      var $160=$i;
      var $161=$info_ptr_addr;
      var $text129=(($161+56)|0);
      var $162=HEAP32[(($text129)>>2)];
      var $arrayidx130=(($162+$160*28)|0);
      var $compression131=(($arrayidx130)|0);
      HEAP32[(($compression131)>>2)]=-2;
      __label__ = 47; break;
    case 44: 
      var $163=$i;
      var $164=$info_ptr_addr;
      var $text133=(($164+56)|0);
      var $165=HEAP32[(($text133)>>2)];
      var $arrayidx134=(($165+$163*28)|0);
      var $compression135=(($arrayidx134)|0);
      var $166=HEAP32[(($compression135)>>2)];
      var $cmp136=(($166)|0)==-1;
      if ($cmp136) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $167=$png_ptr_addr;
      var $168=$i;
      var $169=$info_ptr_addr;
      var $text139=(($169+56)|0);
      var $170=HEAP32[(($text139)>>2)];
      var $arrayidx140=(($170+$168*28)|0);
      var $key141=(($arrayidx140+4)|0);
      var $171=HEAP32[(($key141)>>2)];
      var $172=$i;
      var $173=$info_ptr_addr;
      var $text142=(($173+56)|0);
      var $174=HEAP32[(($text142)>>2)];
      var $arrayidx143=(($174+$172*28)|0);
      var $text144=(($arrayidx143+8)|0);
      var $175=HEAP32[(($text144)>>2)];
      _png_write_tEXt($167, $171, $175, 0);
      var $176=$i;
      var $177=$info_ptr_addr;
      var $text145=(($177+56)|0);
      var $178=HEAP32[(($text145)>>2)];
      var $arrayidx146=(($178+$176*28)|0);
      var $compression147=(($arrayidx146)|0);
      HEAP32[(($compression147)>>2)]=-3;
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $179=$i;
      var $inc152=(($179+1)|0);
      $i=$inc152;
      __label__ = 39; break;
    case 50: 
      var $180=$info_ptr_addr;
      var $unknown_chunks_num=(($180+192)|0);
      var $181=HEAP32[(($unknown_chunks_num)>>2)];
      var $tobool154=(($181)|0)!=0;
      if ($tobool154) { __label__ = 51; break; } else { __label__ = 65; break; }
    case 51: 
      var $182=$info_ptr_addr;
      var $unknown_chunks=(($182+188)|0);
      var $183=HEAP32[(($unknown_chunks)>>2)];
      $up=$183;
      __label__ = 52; break;
    case 52: 
      var $184=$up;
      var $185=$info_ptr_addr;
      var $unknown_chunks157=(($185+188)|0);
      var $186=HEAP32[(($unknown_chunks157)>>2)];
      var $187=$info_ptr_addr;
      var $unknown_chunks_num158=(($187+192)|0);
      var $188=HEAP32[(($unknown_chunks_num158)>>2)];
      var $add_ptr159=(($186+$188*20)|0);
      var $cmp160=(($184)>>>0) < (($add_ptr159)>>>0);
      if ($cmp160) { __label__ = 53; break; } else { __label__ = 64; break; }
    case 53: 
      var $189=$png_ptr_addr;
      var $190=$up;
      var $name=(($190)|0);
      var $arraydecay=(($name)|0);
      var $call=_png_handle_as_unknown($189, $arraydecay);
      $keep=$call;
      var $191=$keep;
      var $cmp163=(($191)|0)!=1;
      if ($cmp163) { __label__ = 54; break; } else { __label__ = 62; break; }
    case 54: 
      var $192=$up;
      var $location=(($192+16)|0);
      var $193=HEAPU8[($location)];
      var $conv166=(($193)&255);
      var $tobool167=(($conv166)|0)!=0;
      if ($tobool167) { __label__ = 55; break; } else { __label__ = 62; break; }
    case 55: 
      var $194=$up;
      var $location169=(($194+16)|0);
      var $195=HEAPU8[($location169)];
      var $conv170=(($195)&255);
      var $and171=$conv170 & 2;
      var $tobool172=(($and171)|0)!=0;
      if ($tobool172) { __label__ = 56; break; } else { __label__ = 62; break; }
    case 56: 
      var $196=$up;
      var $location174=(($196+16)|0);
      var $197=HEAPU8[($location174)];
      var $conv175=(($197)&255);
      var $and176=$conv175 & 4;
      var $tobool177=(($and176)|0)!=0;
      if ($tobool177) { __label__ = 62; break; } else { __label__ = 57; break; }
    case 57: 
      var $198=$up;
      var $location179=(($198+16)|0);
      var $199=HEAPU8[($location179)];
      var $conv180=(($199)&255);
      var $and181=$conv180 & 8;
      var $tobool182=(($and181)|0)!=0;
      if ($tobool182) { __label__ = 62; break; } else { __label__ = 58; break; }
    case 58: 
      var $200=$up;
      var $name184=(($200)|0);
      var $arrayidx185=(($name184+3)|0);
      var $201=HEAPU8[($arrayidx185)];
      var $conv186=(($201)&255);
      var $and187=$conv186 & 32;
      var $tobool188=(($and187)|0)!=0;
      if ($tobool188) { __label__ = 61; break; } else { __label__ = 59; break; }
    case 59: 
      var $202=$keep;
      var $cmp190=(($202)|0)==3;
      if ($cmp190) { __label__ = 61; break; } else { __label__ = 60; break; }
    case 60: 
      var $203=$png_ptr_addr;
      var $flags=(($203+88)|0);
      var $204=HEAP32[(($flags)>>2)];
      var $and193=$204 & 65536;
      var $tobool194=(($and193)|0)!=0;
      if ($tobool194) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $205=$png_ptr_addr;
      var $206=$up;
      var $name196=(($206)|0);
      var $arraydecay197=(($name196)|0);
      var $207=$up;
      var $data=(($207+8)|0);
      var $208=HEAP32[(($data)>>2)];
      var $209=$up;
      var $size=(($209+12)|0);
      var $210=HEAP32[(($size)>>2)];
      _png_write_chunk($205, $arraydecay197, $208, $210);
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $211=$up;
      var $incdec_ptr=(($211+20)|0);
      $up=$incdec_ptr;
      __label__ = 52; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_info["X"]=1;

function _png_write_end($png_ptr, $info_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $info_ptr_addr;
      var $i;
      var $up;
      var $keep;
      $png_ptr_addr=$png_ptr;
      $info_ptr_addr=$info_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 38; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $mode=(($1+84)|0);
      var $2=HEAP32[(($mode)>>2)];
      var $and=$2 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$png_ptr_addr;
      _png_error($3, ((STRING_TABLE.__str31093)|0));
      __label__ = 5; break;
    case 5: 
      var $4=$png_ptr_addr;
      var $num_palette_max=(($4+280)|0);
      var $5=HEAP32[(($num_palette_max)>>2)];
      var $6=$png_ptr_addr;
      var $num_palette=(($6+276)|0);
      var $7=HEAPU16[(($num_palette)>>1)];
      var $conv=(($7)&65535);
      var $cmp3=(($5)|0) > (($conv)|0);
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $8=$png_ptr_addr;
      _png_benign_error($8, ((STRING_TABLE.__str41094)|0));
      __label__ = 7; break;
    case 7: 
      var $9=$info_ptr_addr;
      var $cmp7=(($9)|0)!=0;
      if ($cmp7) { __label__ = 8; break; } else { __label__ = 37; break; }
    case 8: 
      var $10=$info_ptr_addr;
      var $valid=(($10+8)|0);
      var $11=HEAP32[(($valid)>>2)];
      var $and10=$11 & 512;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $12=$png_ptr_addr;
      var $mode12=(($12+84)|0);
      var $13=HEAP32[(($mode12)>>2)];
      var $and13=$13 & 512;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $14=$png_ptr_addr;
      var $15=$info_ptr_addr;
      var $mod_time=(($15+60)|0);
      _png_write_tIME($14, $mod_time);
      __label__ = 11; break;
    case 11: 
      $i=0;
      __label__ = 12; break;
    case 12: 
      var $16=$i;
      var $17=$info_ptr_addr;
      var $num_text=(($17+48)|0);
      var $18=HEAP32[(($num_text)>>2)];
      var $cmp17=(($16)|0) < (($18)|0);
      if ($cmp17) { __label__ = 13; break; } else { __label__ = 23; break; }
    case 13: 
      var $19=$i;
      var $20=$info_ptr_addr;
      var $text=(($20+56)|0);
      var $21=HEAP32[(($text)>>2)];
      var $arrayidx=(($21+$19*28)|0);
      var $compression=(($arrayidx)|0);
      var $22=HEAP32[(($compression)>>2)];
      var $cmp19=(($22)|0) > 0;
      if ($cmp19) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $23=$png_ptr_addr;
      var $24=$i;
      var $25=$info_ptr_addr;
      var $text22=(($25+56)|0);
      var $26=HEAP32[(($text22)>>2)];
      var $arrayidx23=(($26+$24*28)|0);
      var $compression24=(($arrayidx23)|0);
      var $27=HEAP32[(($compression24)>>2)];
      var $28=$i;
      var $29=$info_ptr_addr;
      var $text25=(($29+56)|0);
      var $30=HEAP32[(($text25)>>2)];
      var $arrayidx26=(($30+$28*28)|0);
      var $key=(($arrayidx26+4)|0);
      var $31=HEAP32[(($key)>>2)];
      var $32=$i;
      var $33=$info_ptr_addr;
      var $text27=(($33+56)|0);
      var $34=HEAP32[(($text27)>>2)];
      var $arrayidx28=(($34+$32*28)|0);
      var $lang=(($arrayidx28+20)|0);
      var $35=HEAP32[(($lang)>>2)];
      var $36=$i;
      var $37=$info_ptr_addr;
      var $text29=(($37+56)|0);
      var $38=HEAP32[(($text29)>>2)];
      var $arrayidx30=(($38+$36*28)|0);
      var $lang_key=(($arrayidx30+24)|0);
      var $39=HEAP32[(($lang_key)>>2)];
      var $40=$i;
      var $41=$info_ptr_addr;
      var $text31=(($41+56)|0);
      var $42=HEAP32[(($text31)>>2)];
      var $arrayidx32=(($42+$40*28)|0);
      var $text33=(($arrayidx32+8)|0);
      var $43=HEAP32[(($text33)>>2)];
      _png_write_iTXt($23, $27, $31, $35, $39, $43);
      var $44=$i;
      var $45=$info_ptr_addr;
      var $text34=(($45+56)|0);
      var $46=HEAP32[(($text34)>>2)];
      var $arrayidx35=(($46+$44*28)|0);
      var $compression36=(($arrayidx35)|0);
      HEAP32[(($compression36)>>2)]=-3;
      __label__ = 21; break;
    case 15: 
      var $47=$i;
      var $48=$info_ptr_addr;
      var $text37=(($48+56)|0);
      var $49=HEAP32[(($text37)>>2)];
      var $arrayidx38=(($49+$47*28)|0);
      var $compression39=(($arrayidx38)|0);
      var $50=HEAP32[(($compression39)>>2)];
      var $cmp40=(($50)|0) >= 0;
      if ($cmp40) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $51=$png_ptr_addr;
      var $52=$i;
      var $53=$info_ptr_addr;
      var $text43=(($53+56)|0);
      var $54=HEAP32[(($text43)>>2)];
      var $arrayidx44=(($54+$52*28)|0);
      var $key45=(($arrayidx44+4)|0);
      var $55=HEAP32[(($key45)>>2)];
      var $56=$i;
      var $57=$info_ptr_addr;
      var $text46=(($57+56)|0);
      var $58=HEAP32[(($text46)>>2)];
      var $arrayidx47=(($58+$56*28)|0);
      var $text48=(($arrayidx47+8)|0);
      var $59=HEAP32[(($text48)>>2)];
      var $60=$i;
      var $61=$info_ptr_addr;
      var $text49=(($61+56)|0);
      var $62=HEAP32[(($text49)>>2)];
      var $arrayidx50=(($62+$60*28)|0);
      var $compression51=(($arrayidx50)|0);
      var $63=HEAP32[(($compression51)>>2)];
      _png_write_zTXt($51, $55, $59, 0, $63);
      var $64=$i;
      var $65=$info_ptr_addr;
      var $text52=(($65+56)|0);
      var $66=HEAP32[(($text52)>>2)];
      var $arrayidx53=(($66+$64*28)|0);
      var $compression54=(($arrayidx53)|0);
      HEAP32[(($compression54)>>2)]=-2;
      __label__ = 20; break;
    case 17: 
      var $67=$i;
      var $68=$info_ptr_addr;
      var $text56=(($68+56)|0);
      var $69=HEAP32[(($text56)>>2)];
      var $arrayidx57=(($69+$67*28)|0);
      var $compression58=(($arrayidx57)|0);
      var $70=HEAP32[(($compression58)>>2)];
      var $cmp59=(($70)|0)==-1;
      if ($cmp59) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $71=$png_ptr_addr;
      var $72=$i;
      var $73=$info_ptr_addr;
      var $text62=(($73+56)|0);
      var $74=HEAP32[(($text62)>>2)];
      var $arrayidx63=(($74+$72*28)|0);
      var $key64=(($arrayidx63+4)|0);
      var $75=HEAP32[(($key64)>>2)];
      var $76=$i;
      var $77=$info_ptr_addr;
      var $text65=(($77+56)|0);
      var $78=HEAP32[(($text65)>>2)];
      var $arrayidx66=(($78+$76*28)|0);
      var $text67=(($arrayidx66+8)|0);
      var $79=HEAP32[(($text67)>>2)];
      _png_write_tEXt($71, $75, $79, 0);
      var $80=$i;
      var $81=$info_ptr_addr;
      var $text68=(($81+56)|0);
      var $82=HEAP32[(($text68)>>2)];
      var $arrayidx69=(($82+$80*28)|0);
      var $compression70=(($arrayidx69)|0);
      HEAP32[(($compression70)>>2)]=-3;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $83=$i;
      var $inc=(($83+1)|0);
      $i=$inc;
      __label__ = 12; break;
    case 23: 
      var $84=$info_ptr_addr;
      var $unknown_chunks_num=(($84+192)|0);
      var $85=HEAP32[(($unknown_chunks_num)>>2)];
      var $tobool74=(($85)|0)!=0;
      if ($tobool74) { __label__ = 24; break; } else { __label__ = 36; break; }
    case 24: 
      var $86=$info_ptr_addr;
      var $unknown_chunks=(($86+188)|0);
      var $87=HEAP32[(($unknown_chunks)>>2)];
      $up=$87;
      __label__ = 25; break;
    case 25: 
      var $88=$up;
      var $89=$info_ptr_addr;
      var $unknown_chunks77=(($89+188)|0);
      var $90=HEAP32[(($unknown_chunks77)>>2)];
      var $91=$info_ptr_addr;
      var $unknown_chunks_num78=(($91+192)|0);
      var $92=HEAP32[(($unknown_chunks_num78)>>2)];
      var $add_ptr=(($90+$92*20)|0);
      var $cmp79=(($88)>>>0) < (($add_ptr)>>>0);
      if ($cmp79) { __label__ = 26; break; } else { __label__ = 35; break; }
    case 26: 
      var $93=$png_ptr_addr;
      var $94=$up;
      var $name=(($94)|0);
      var $arraydecay=(($name)|0);
      var $call=_png_handle_as_unknown($93, $arraydecay);
      $keep=$call;
      var $95=$keep;
      var $cmp82=(($95)|0)!=1;
      if ($cmp82) { __label__ = 27; break; } else { __label__ = 33; break; }
    case 27: 
      var $96=$up;
      var $location=(($96+16)|0);
      var $97=HEAPU8[($location)];
      var $conv85=(($97)&255);
      var $tobool86=(($conv85)|0)!=0;
      if ($tobool86) { __label__ = 28; break; } else { __label__ = 33; break; }
    case 28: 
      var $98=$up;
      var $location88=(($98+16)|0);
      var $99=HEAPU8[($location88)];
      var $conv89=(($99)&255);
      var $and90=$conv89 & 8;
      var $tobool91=(($and90)|0)!=0;
      if ($tobool91) { __label__ = 29; break; } else { __label__ = 33; break; }
    case 29: 
      var $100=$up;
      var $name93=(($100)|0);
      var $arrayidx94=(($name93+3)|0);
      var $101=HEAPU8[($arrayidx94)];
      var $conv95=(($101)&255);
      var $and96=$conv95 & 32;
      var $tobool97=(($and96)|0)!=0;
      if ($tobool97) { __label__ = 32; break; } else { __label__ = 30; break; }
    case 30: 
      var $102=$keep;
      var $cmp98=(($102)|0)==3;
      if ($cmp98) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $103=$png_ptr_addr;
      var $flags=(($103+88)|0);
      var $104=HEAP32[(($flags)>>2)];
      var $and101=$104 & 65536;
      var $tobool102=(($and101)|0)!=0;
      if ($tobool102) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $105=$png_ptr_addr;
      var $106=$up;
      var $name104=(($106)|0);
      var $arraydecay105=(($name104)|0);
      var $107=$up;
      var $data=(($107+8)|0);
      var $108=HEAP32[(($data)>>2)];
      var $109=$up;
      var $size=(($109+12)|0);
      var $110=HEAP32[(($size)>>2)];
      _png_write_chunk($105, $arraydecay105, $108, $110);
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $111=$up;
      var $incdec_ptr=(($111+20)|0);
      $up=$incdec_ptr;
      __label__ = 25; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $112=$png_ptr_addr;
      var $mode111=(($112+84)|0);
      var $113=HEAP32[(($mode111)>>2)];
      var $or=$113 | 8;
      HEAP32[(($mode111)>>2)]=$or;
      var $114=$png_ptr_addr;
      _png_write_IEND($114);
      __label__ = 38; break;
    case 38: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_end["X"]=1;

function _png_create_write_struct_2($user_png_ver, $error_ptr, $error_fn, $warn_fn, $mem_ptr, $malloc_fn, $free_fn) {
  ;
  var __label__;
  __label__ = 1; 
  var setjmpTable = {"3": function(value) { __label__ = 15; $call2 = value },dummy: 0};
  while(1) try { switch(__label__) {
    case 1: 
      var $retval;
      var $user_png_ver_addr;
      var $error_ptr_addr;
      var $error_fn_addr;
      var $warn_fn_addr;
      var $mem_ptr_addr;
      var $malloc_fn_addr;
      var $free_fn_addr;
      var $png_cleanup_needed;
      var $png_ptr;
      $user_png_ver_addr=$user_png_ver;
      $error_ptr_addr=$error_ptr;
      $error_fn_addr=$error_fn;
      $warn_fn_addr=$warn_fn;
      $mem_ptr_addr=$mem_ptr;
      $malloc_fn_addr=$malloc_fn;
      $free_fn_addr=$free_fn;
      $png_cleanup_needed=0;
      var $0=$malloc_fn_addr;
      var $1=$mem_ptr_addr;
      var $call=_png_create_struct_2(1, $0, $1);
      var $2=$call;
      $png_ptr=$2;
      var $3=$png_ptr;
      var $cmp=(($3)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 14; break;
    case 3: 
      var $4=$png_ptr;
      var $user_width_max=(($4+616)|0);
      HEAP32[(($user_width_max)>>2)]=2147483647;
      var $5=$png_ptr;
      var $user_height_max=(($5+620)|0);
      HEAP32[(($user_height_max)>>2)]=2147483647;
      var $6=$png_ptr;
      var $call1=_png_set_longjmp_fn($6, 12, 40);
      var $arraydecay=(($call1)|0);
      var $call2=(HEAP32[(($arraydecay)>>2)]=__label__, 0);
      __label__ = 15; break;
    case 15: 
      var $tobool=(($call2)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $7=$png_ptr;
      var $8=$mem_ptr_addr;
      var $9=$malloc_fn_addr;
      var $10=$free_fn_addr;
      _png_set_mem_fn($7, $8, $9, $10);
      var $11=$png_ptr;
      var $12=$error_ptr_addr;
      var $13=$error_fn_addr;
      var $14=$warn_fn_addr;
      _png_set_error_fn($11, $12, $13, $14);
      var $15=$png_ptr;
      var $16=$user_png_ver_addr;
      var $call5=_png_user_version_check($15, $16);
      var $tobool6=(($call5)|0)!=0;
      if ($tobool6) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      $png_cleanup_needed=1;
      __label__ = 7; break;
    case 7: 
      var $17=$png_ptr;
      var $zbuf_size=(($17+156)|0);
      HEAP32[(($zbuf_size)>>2)]=8192;
      var $18=$png_cleanup_needed;
      var $tobool9=(($18)|0)!=0;
      if ($tobool9) { __label__ = 11; break; } else { __label__ = 8; break; }
    case 8: 
      var $19=$png_ptr;
      var $20=$png_ptr;
      var $zbuf_size11=(($20+156)|0);
      var $21=HEAP32[(($zbuf_size11)>>2)];
      var $call12=_png_malloc_warn($19, $21);
      var $22=$png_ptr;
      var $zbuf=(($22+152)|0);
      HEAP32[(($zbuf)>>2)]=$call12;
      var $23=$png_ptr;
      var $zbuf13=(($23+152)|0);
      var $24=HEAP32[(($zbuf13)>>2)];
      var $cmp14=(($24)|0)==0;
      if ($cmp14) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $png_cleanup_needed=1;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $25=$png_cleanup_needed;
      var $tobool18=(($25)|0)!=0;
      if ($tobool18) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $26=$png_ptr;
      var $27=$png_ptr;
      var $zbuf20=(($27+152)|0);
      var $28=HEAP32[(($zbuf20)>>2)];
      _png_free($26, $28);
      var $29=$png_ptr;
      var $zbuf21=(($29+152)|0);
      HEAP32[(($zbuf21)>>2)]=0;
      var $30=$png_ptr;
      var $31=$30;
      var $32=$free_fn_addr;
      var $33=$mem_ptr_addr;
      _png_destroy_struct_2($31, $32, $33);
      $retval=0;
      __label__ = 14; break;
    case 13: 
      var $34=$png_ptr;
      _png_set_write_fn($34, 0, 0, 0);
      var $35=$png_ptr;
      _png_reset_filter_heuristics($35);
      var $36=$png_ptr;
      $retval=$36;
      __label__ = 14; break;
    case 14: 
      var $37=$retval;
      ;
      return $37;
    default: assert(0, "bad label: " + __label__);
  } } catch(e) { if (!e.longjmp) throw(e); setjmpTable[e.label](e.value) }
}
_png_create_write_struct_2["X"]=1;

function _png_reset_filter_heuristics($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $old;
      var $old5;
      var $old11;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $num_prev_filters=(($0+493)|0);
      HEAP8[($num_prev_filters)]=0;
      var $1=$png_ptr_addr;
      var $heuristic_method=(($1+492)|0);
      HEAP8[($heuristic_method)]=1;
      var $2=$png_ptr_addr;
      var $prev_filters=(($2+496)|0);
      var $3=HEAP32[(($prev_filters)>>2)];
      var $cmp=(($3)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $4=$png_ptr_addr;
      var $prev_filters1=(($4+496)|0);
      var $5=HEAP32[(($prev_filters1)>>2)];
      $old=$5;
      var $6=$png_ptr_addr;
      var $prev_filters2=(($6+496)|0);
      HEAP32[(($prev_filters2)>>2)]=0;
      var $7=$png_ptr_addr;
      var $8=$old;
      _png_free($7, $8);
      __label__ = 3; break;
    case 3: 
      var $9=$png_ptr_addr;
      var $filter_weights=(($9+500)|0);
      var $10=HEAP32[(($filter_weights)>>2)];
      var $cmp3=(($10)|0)!=0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $11=$png_ptr_addr;
      var $filter_weights6=(($11+500)|0);
      var $12=HEAP32[(($filter_weights6)>>2)];
      $old5=$12;
      var $13=$png_ptr_addr;
      var $filter_weights7=(($13+500)|0);
      HEAP32[(($filter_weights7)>>2)]=0;
      var $14=$png_ptr_addr;
      var $15=$old5;
      var $16=$15;
      _png_free($14, $16);
      __label__ = 5; break;
    case 5: 
      var $17=$png_ptr_addr;
      var $inv_filter_weights=(($17+504)|0);
      var $18=HEAP32[(($inv_filter_weights)>>2)];
      var $cmp9=(($18)|0)!=0;
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $19=$png_ptr_addr;
      var $inv_filter_weights12=(($19+504)|0);
      var $20=HEAP32[(($inv_filter_weights12)>>2)];
      $old11=$20;
      var $21=$png_ptr_addr;
      var $inv_filter_weights13=(($21+504)|0);
      HEAP32[(($inv_filter_weights13)>>2)]=0;
      var $22=$png_ptr_addr;
      var $23=$old11;
      var $24=$23;
      _png_free($22, $24);
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_reset_filter_heuristics["X"]=1;

function _png_write_row($png_ptr, $row) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $row_addr;
      var $row_info=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $row_addr=$row;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 58; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $row_number=(($1+228)|0);
      var $2=HEAP32[(($row_number)>>2)];
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $3=$png_ptr_addr;
      var $pass=(($3+289)|0);
      var $4=HEAPU8[($pass)];
      var $conv=(($4)&255);
      var $cmp2=(($conv)|0)==0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $5=$png_ptr_addr;
      var $mode=(($5+84)|0);
      var $6=HEAP32[(($mode)>>2)];
      var $and=$6 & 1024;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $7=$png_ptr_addr;
      _png_error($7, ((STRING_TABLE.__str51095)|0));
      __label__ = 7; break;
    case 7: 
      var $8=$png_ptr_addr;
      _png_write_start_row($8);
      __label__ = 8; break;
    case 8: 
      var $9=$png_ptr_addr;
      var $interlaced=(($9+288)|0);
      var $10=HEAPU8[($interlaced)];
      var $conv8=(($10)&255);
      var $tobool9=(($conv8)|0)!=0;
      if ($tobool9) { __label__ = 9; break; } else { __label__ = 37; break; }
    case 9: 
      var $11=$png_ptr_addr;
      var $transformations=(($11+92)|0);
      var $12=HEAP32[(($transformations)>>2)];
      var $and11=$12 & 2;
      var $tobool12=(($and11)|0)!=0;
      if ($tobool12) { __label__ = 10; break; } else { __label__ = 37; break; }
    case 10: 
      var $13=$png_ptr_addr;
      var $pass14=(($13+289)|0);
      var $14=HEAPU8[($pass14)];
      var $conv15=(($14)&255);
      if ((($conv15)|0) == 0) {
        __label__ = 11; break;
      }
      else if ((($conv15)|0) == 1) {
        __label__ = 14; break;
      }
      else if ((($conv15)|0) == 2) {
        __label__ = 18; break;
      }
      else if ((($conv15)|0) == 3) {
        __label__ = 21; break;
      }
      else if ((($conv15)|0) == 4) {
        __label__ = 25; break;
      }
      else if ((($conv15)|0) == 5) {
        __label__ = 28; break;
      }
      else if ((($conv15)|0) == 6) {
        __label__ = 32; break;
      }
      else {
      __label__ = 35; break;
      }
      
    case 11: 
      var $15=$png_ptr_addr;
      var $row_number16=(($15+228)|0);
      var $16=HEAP32[(($row_number16)>>2)];
      var $and17=$16 & 7;
      var $tobool18=(($and17)|0)!=0;
      if ($tobool18) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $17=$png_ptr_addr;
      _png_write_finish_row($17);
      __label__ = 58; break;
    case 13: 
      __label__ = 36; break;
    case 14: 
      var $18=$png_ptr_addr;
      var $row_number22=(($18+228)|0);
      var $19=HEAP32[(($row_number22)>>2)];
      var $and23=$19 & 7;
      var $tobool24=(($and23)|0)!=0;
      if ($tobool24) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $20=$png_ptr_addr;
      var $width=(($20+204)|0);
      var $21=HEAPU32[(($width)>>2)];
      var $cmp25=(($21)>>>0) < 5;
      if ($cmp25) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $22=$png_ptr_addr;
      _png_write_finish_row($22);
      __label__ = 58; break;
    case 17: 
      __label__ = 36; break;
    case 18: 
      var $23=$png_ptr_addr;
      var $row_number30=(($23+228)|0);
      var $24=HEAP32[(($row_number30)>>2)];
      var $and31=$24 & 7;
      var $cmp32=(($and31)|0)!=4;
      if ($cmp32) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $25=$png_ptr_addr;
      _png_write_finish_row($25);
      __label__ = 58; break;
    case 20: 
      __label__ = 36; break;
    case 21: 
      var $26=$png_ptr_addr;
      var $row_number37=(($26+228)|0);
      var $27=HEAP32[(($row_number37)>>2)];
      var $and38=$27 & 3;
      var $tobool39=(($and38)|0)!=0;
      if ($tobool39) { __label__ = 23; break; } else { __label__ = 22; break; }
    case 22: 
      var $28=$png_ptr_addr;
      var $width41=(($28+204)|0);
      var $29=HEAPU32[(($width41)>>2)];
      var $cmp42=(($29)>>>0) < 3;
      if ($cmp42) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $30=$png_ptr_addr;
      _png_write_finish_row($30);
      __label__ = 58; break;
    case 24: 
      __label__ = 36; break;
    case 25: 
      var $31=$png_ptr_addr;
      var $row_number47=(($31+228)|0);
      var $32=HEAP32[(($row_number47)>>2)];
      var $and48=$32 & 3;
      var $cmp49=(($and48)|0)!=2;
      if ($cmp49) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $33=$png_ptr_addr;
      _png_write_finish_row($33);
      __label__ = 58; break;
    case 27: 
      __label__ = 36; break;
    case 28: 
      var $34=$png_ptr_addr;
      var $row_number54=(($34+228)|0);
      var $35=HEAP32[(($row_number54)>>2)];
      var $and55=$35 & 1;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { __label__ = 30; break; } else { __label__ = 29; break; }
    case 29: 
      var $36=$png_ptr_addr;
      var $width58=(($36+204)|0);
      var $37=HEAPU32[(($width58)>>2)];
      var $cmp59=(($37)>>>0) < 2;
      if ($cmp59) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $38=$png_ptr_addr;
      _png_write_finish_row($38);
      __label__ = 58; break;
    case 31: 
      __label__ = 36; break;
    case 32: 
      var $39=$png_ptr_addr;
      var $row_number64=(($39+228)|0);
      var $40=HEAP32[(($row_number64)>>2)];
      var $and65=$40 & 1;
      var $tobool66=(($and65)|0)!=0;
      if ($tobool66) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $41=$png_ptr_addr;
      _png_write_finish_row($41);
      __label__ = 58; break;
    case 34: 
      __label__ = 36; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $42=$png_ptr_addr;
      var $color_type=(($42+291)|0);
      var $43=HEAP8[($color_type)];
      var $color_type70=(($row_info+8)|0);
      HEAP8[($color_type70)]=$43;
      var $44=$png_ptr_addr;
      var $usr_width=(($44+216)|0);
      var $45=HEAP32[(($usr_width)>>2)];
      var $width71=(($row_info)|0);
      HEAP32[(($width71)>>2)]=$45;
      var $46=$png_ptr_addr;
      var $usr_channels=(($46+296)|0);
      var $47=HEAP8[($usr_channels)];
      var $channels=(($row_info+10)|0);
      HEAP8[($channels)]=$47;
      var $48=$png_ptr_addr;
      var $usr_bit_depth=(($48+293)|0);
      var $49=HEAP8[($usr_bit_depth)];
      var $bit_depth=(($row_info+9)|0);
      HEAP8[($bit_depth)]=$49;
      var $bit_depth72=(($row_info+9)|0);
      var $50=HEAPU8[($bit_depth72)];
      var $conv73=(($50)&255);
      var $channels74=(($row_info+10)|0);
      var $51=HEAPU8[($channels74)];
      var $conv75=(($51)&255);
      var $mul=(($conv73*$conv75)|0);
      var $conv76=(($mul) & 255);
      var $pixel_depth=(($row_info+11)|0);
      HEAP8[($pixel_depth)]=$conv76;
      var $pixel_depth77=(($row_info+11)|0);
      var $52=HEAPU8[($pixel_depth77)];
      var $conv78=(($52)&255);
      var $cmp79=(($conv78)|0) >= 8;
      if ($cmp79) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $width81=(($row_info)|0);
      var $53=HEAP32[(($width81)>>2)];
      var $pixel_depth82=(($row_info+11)|0);
      var $54=HEAPU8[($pixel_depth82)];
      var $conv83=(($54)&255);
      var $shr=$conv83 >>> 3;
      var $mul84=(($53*$shr)|0);
      var $cond = $mul84;__label__ = 40; break;
    case 39: 
      var $width85=(($row_info)|0);
      var $55=HEAP32[(($width85)>>2)];
      var $pixel_depth86=(($row_info+11)|0);
      var $56=HEAPU8[($pixel_depth86)];
      var $conv87=(($56)&255);
      var $mul88=(($55*$conv87)|0);
      var $add=(($mul88+7)|0);
      var $shr89=$add >>> 3;
      var $cond = $shr89;__label__ = 40; break;
    case 40: 
      var $cond;
      var $rowbytes=(($row_info+4)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      var $57=$png_ptr_addr;
      var $row_buf=(($57+240)|0);
      var $58=HEAP32[(($row_buf)>>2)];
      var $add_ptr=(($58+1)|0);
      var $59=$row_addr;
      var $rowbytes90=(($row_info+4)|0);
      var $60=HEAP32[(($rowbytes90)>>2)];
      assert($60 % 1 === 0, 'memcpy given ' + $60 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr, $59, $60, 1);
      var $61=$png_ptr_addr;
      var $interlaced91=(($61+288)|0);
      var $62=HEAPU8[($interlaced91)];
      var $conv92=(($62)&255);
      var $tobool93=(($conv92)|0)!=0;
      if ($tobool93) { __label__ = 41; break; } else { __label__ = 46; break; }
    case 41: 
      var $63=$png_ptr_addr;
      var $pass95=(($63+289)|0);
      var $64=HEAPU8[($pass95)];
      var $conv96=(($64)&255);
      var $cmp97=(($conv96)|0) < 6;
      if ($cmp97) { __label__ = 42; break; } else { __label__ = 46; break; }
    case 42: 
      var $65=$png_ptr_addr;
      var $transformations100=(($65+92)|0);
      var $66=HEAP32[(($transformations100)>>2)];
      var $and101=$66 & 2;
      var $tobool102=(($and101)|0)!=0;
      if ($tobool102) { __label__ = 43; break; } else { __label__ = 46; break; }
    case 43: 
      var $67=$png_ptr_addr;
      var $row_buf104=(($67+240)|0);
      var $68=HEAP32[(($row_buf104)>>2)];
      var $add_ptr105=(($68+1)|0);
      var $69=$png_ptr_addr;
      var $pass106=(($69+289)|0);
      var $70=HEAPU8[($pass106)];
      var $conv107=(($70)&255);
      _png_do_write_interlace($row_info, $add_ptr105, $conv107);
      var $width108=(($row_info)|0);
      var $71=HEAP32[(($width108)>>2)];
      var $tobool109=(($71)|0)!=0;
      if ($tobool109) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $72=$png_ptr_addr;
      _png_write_finish_row($72);
      __label__ = 58; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      var $73=$png_ptr_addr;
      var $transformations113=(($73+92)|0);
      var $74=HEAP32[(($transformations113)>>2)];
      var $tobool114=(($74)|0)!=0;
      if ($tobool114) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $75=$png_ptr_addr;
      _png_do_write_transformations($75, $row_info);
      __label__ = 48; break;
    case 48: 
      var $pixel_depth117=(($row_info+11)|0);
      var $76=HEAPU8[($pixel_depth117)];
      var $conv118=(($76)&255);
      var $77=$png_ptr_addr;
      var $pixel_depth119=(($77+294)|0);
      var $78=HEAPU8[($pixel_depth119)];
      var $conv120=(($78)&255);
      var $cmp121=(($conv118)|0)!=(($conv120)|0);
      if ($cmp121) { __label__ = 50; break; } else { __label__ = 49; break; }
    case 49: 
      var $pixel_depth124=(($row_info+11)|0);
      var $79=HEAPU8[($pixel_depth124)];
      var $conv125=(($79)&255);
      var $80=$png_ptr_addr;
      var $transformed_pixel_depth=(($80+299)|0);
      var $81=HEAPU8[($transformed_pixel_depth)];
      var $conv126=(($81)&255);
      var $cmp127=(($conv125)|0)!=(($conv126)|0);
      if ($cmp127) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $82=$png_ptr_addr;
      _png_error($82, ((STRING_TABLE.__str61096)|0));
      __label__ = 51; break;
    case 51: 
      var $83=$png_ptr_addr;
      var $mng_features_permitted=(($83+576)|0);
      var $84=HEAP32[(($mng_features_permitted)>>2)];
      var $and131=$84 & 4;
      var $tobool132=(($and131)|0)!=0;
      if ($tobool132) { __label__ = 52; break; } else { __label__ = 54; break; }
    case 52: 
      var $85=$png_ptr_addr;
      var $filter_type=(($85+580)|0);
      var $86=HEAPU8[($filter_type)];
      var $conv134=(($86)&255);
      var $cmp135=(($conv134)|0)==64;
      if ($cmp135) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $87=$png_ptr_addr;
      var $row_buf138=(($87+240)|0);
      var $88=HEAP32[(($row_buf138)>>2)];
      var $add_ptr139=(($88+1)|0);
      _png_do_write_intrapixel($row_info, $add_ptr139);
      __label__ = 54; break;
    case 54: 
      var $color_type141=(($row_info+8)|0);
      var $89=HEAPU8[($color_type141)];
      var $conv142=(($89)&255);
      var $cmp143=(($conv142)|0)==3;
      if ($cmp143) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $90=$png_ptr_addr;
      _png_do_check_palette_indexes($90, $row_info);
      __label__ = 56; break;
    case 56: 
      var $91=$png_ptr_addr;
      _png_write_find_filter($91, $row_info);
      var $92=$png_ptr_addr;
      var $write_row_fn=(($92+416)|0);
      var $93=HEAP32[(($write_row_fn)>>2)];
      var $cmp147=(($93)|0)!=0;
      if ($cmp147) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $94=$png_ptr_addr;
      var $write_row_fn150=(($94+416)|0);
      var $95=HEAP32[(($write_row_fn150)>>2)];
      var $96=$png_ptr_addr;
      var $97=$png_ptr_addr;
      var $row_number151=(($97+228)|0);
      var $98=HEAP32[(($row_number151)>>2)];
      var $99=$png_ptr_addr;
      var $pass152=(($99+289)|0);
      var $100=HEAPU8[($pass152)];
      var $conv153=(($100)&255);
      FUNCTION_TABLE[$95]($96, $98, $conv153);
      __label__ = 58; break;
    case 58: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_row["X"]=1;

function _png_write_flush($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $wrote_IDAT;
      var $ret;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 18; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $row_number=(($1+228)|0);
      var $2=HEAPU32[(($row_number)>>2)];
      var $3=$png_ptr_addr;
      var $num_rows=(($3+212)|0);
      var $4=HEAPU32[(($num_rows)>>2)];
      var $cmp1=(($2)>>>0) >= (($4)>>>0);
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 18; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $5=$png_ptr_addr;
      var $zstream=(($5+96)|0);
      var $call=_deflate($zstream, 2);
      $ret=$call;
      $wrote_IDAT=0;
      var $6=$ret;
      var $cmp4=(($6)|0)!=0;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $7=$png_ptr_addr;
      var $zstream6=(($7+96)|0);
      var $msg=(($zstream6+24)|0);
      var $8=HEAP32[(($msg)>>2)];
      var $cmp7=(($8)|0)!=0;
      if ($cmp7) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $9=$png_ptr_addr;
      var $10=$png_ptr_addr;
      var $zstream9=(($10+96)|0);
      var $msg10=(($zstream9+24)|0);
      var $11=HEAP32[(($msg10)>>2)];
      _png_error($9, $11);
      __label__ = 10; break;
    case 9: 
      var $12=$png_ptr_addr;
      _png_error($12, ((STRING_TABLE.__str71097)|0));
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $13=$png_ptr_addr;
      var $zstream13=(($13+96)|0);
      var $avail_out=(($zstream13+16)|0);
      var $14=HEAP32[(($avail_out)>>2)];
      var $tobool=(($14)|0)!=0;
      if ($tobool) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $15=$png_ptr_addr;
      var $16=$png_ptr_addr;
      var $zbuf=(($16+152)|0);
      var $17=HEAP32[(($zbuf)>>2)];
      var $18=$png_ptr_addr;
      var $zbuf_size=(($18+156)|0);
      var $19=HEAP32[(($zbuf_size)>>2)];
      _png_write_IDAT($15, $17, $19);
      $wrote_IDAT=1;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $20=$wrote_IDAT;
      var $cmp16=(($20)|0)==1;
      if ($cmp16) { __label__ = 6; break; } else { __label__ = 15; break; }
    case 15: 
      var $21=$png_ptr_addr;
      var $zbuf_size17=(($21+156)|0);
      var $22=HEAP32[(($zbuf_size17)>>2)];
      var $23=$png_ptr_addr;
      var $zstream18=(($23+96)|0);
      var $avail_out19=(($zstream18+16)|0);
      var $24=HEAP32[(($avail_out19)>>2)];
      var $cmp20=(($22)|0)!=(($24)|0);
      if ($cmp20) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $25=$png_ptr_addr;
      var $26=$png_ptr_addr;
      var $zbuf22=(($26+152)|0);
      var $27=HEAP32[(($zbuf22)>>2)];
      var $28=$png_ptr_addr;
      var $zbuf_size23=(($28+156)|0);
      var $29=HEAP32[(($zbuf_size23)>>2)];
      var $30=$png_ptr_addr;
      var $zstream24=(($30+96)|0);
      var $avail_out25=(($zstream24+16)|0);
      var $31=HEAP32[(($avail_out25)>>2)];
      var $sub=(($29-$31)|0);
      _png_write_IDAT($25, $27, $sub);
      __label__ = 17; break;
    case 17: 
      var $32=$png_ptr_addr;
      var $flush_rows=(($32+344)|0);
      HEAP32[(($flush_rows)>>2)]=0;
      var $33=$png_ptr_addr;
      _png_flush($33);
      __label__ = 18; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_flush["X"]=1;

function _png_destroy_write_struct($png_ptr_ptr, $info_ptr_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_ptr_addr;
      var $info_ptr_ptr_addr;
      var $png_ptr;
      var $info_ptr;
      var $free_fn;
      var $mem_ptr;
      $png_ptr_ptr_addr=$png_ptr_ptr;
      $info_ptr_ptr_addr=$info_ptr_ptr;
      $png_ptr=0;
      $info_ptr=0;
      $free_fn=0;
      $mem_ptr=0;
      var $0=$png_ptr_ptr_addr;
      var $cmp=(($0)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_ptr_addr;
      var $2=HEAP32[(($1)>>2)];
      $png_ptr=$2;
      __label__ = 3; break;
    case 3: 
      var $3=$png_ptr;
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$png_ptr;
      var $free_fn3=(($4+592)|0);
      var $5=HEAP32[(($free_fn3)>>2)];
      $free_fn=$5;
      var $6=$png_ptr;
      var $mem_ptr4=(($6+584)|0);
      var $7=HEAP32[(($mem_ptr4)>>2)];
      $mem_ptr=$7;
      __label__ = 5; break;
    case 5: 
      var $8=$info_ptr_ptr_addr;
      var $cmp6=(($8)|0)!=0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $9=$info_ptr_ptr_addr;
      var $10=HEAP32[(($9)>>2)];
      $info_ptr=$10;
      __label__ = 7; break;
    case 7: 
      var $11=$info_ptr;
      var $cmp9=(($11)|0)!=0;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: 
      var $12=$png_ptr;
      var $cmp11=(($12)|0)!=0;
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $13=$png_ptr;
      var $14=$info_ptr;
      _png_free_data($13, $14, 32767, -1);
      var $15=$png_ptr;
      var $num_chunk_list=(($15+560)|0);
      var $16=HEAP32[(($num_chunk_list)>>2)];
      var $tobool=(($16)|0)!=0;
      if ($tobool) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $17=$png_ptr;
      var $18=$png_ptr;
      var $chunk_list=(($18+564)|0);
      var $19=HEAP32[(($chunk_list)>>2)];
      _png_free($17, $19);
      var $20=$png_ptr;
      var $num_chunk_list14=(($20+560)|0);
      HEAP32[(($num_chunk_list14)>>2)]=0;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $21=$info_ptr;
      var $22=$21;
      var $23=$free_fn;
      var $24=$mem_ptr;
      _png_destroy_struct_2($22, $23, $24);
      var $25=$info_ptr_ptr_addr;
      HEAP32[(($25)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      var $26=$png_ptr;
      var $cmp18=(($26)|0)!=0;
      if ($cmp18) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $27=$png_ptr;
      _png_write_destroy($27);
      var $28=$png_ptr;
      var $29=$28;
      var $30=$free_fn;
      var $31=$mem_ptr;
      _png_destroy_struct_2($29, $30, $31);
      var $32=$png_ptr_ptr_addr;
      HEAP32[(($32)>>2)]=0;
      __label__ = 15; break;
    case 15: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_destroy_write_struct["X"]=1;

function _png_write_destroy($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $tmp_jmp=__stackBase__;
      var $error_fn;
      var $warning_fn;
      var $error_ptr;
      var $free_fn;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $zlib_state=(($0+160)|0);
      var $1=HEAP32[(($zlib_state)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $zstream=(($2+96)|0);
      var $call=_deflateEnd($zstream);
      __label__ = 3; break;
    case 3: 
      var $3=$png_ptr_addr;
      var $4=$png_ptr_addr;
      var $zbuf=(($4+152)|0);
      var $5=HEAP32[(($zbuf)>>2)];
      _png_free($3, $5);
      var $6=$png_ptr_addr;
      var $7=$png_ptr_addr;
      var $row_buf=(($7+240)|0);
      var $8=HEAP32[(($row_buf)>>2)];
      _png_free($6, $8);
      var $9=$png_ptr_addr;
      var $10=$png_ptr_addr;
      var $prev_row=(($10+236)|0);
      var $11=HEAP32[(($prev_row)>>2)];
      _png_free($9, $11);
      var $12=$png_ptr_addr;
      var $13=$png_ptr_addr;
      var $sub_row=(($13+244)|0);
      var $14=HEAP32[(($sub_row)>>2)];
      _png_free($12, $14);
      var $15=$png_ptr_addr;
      var $16=$png_ptr_addr;
      var $up_row=(($16+248)|0);
      var $17=HEAP32[(($up_row)>>2)];
      _png_free($15, $17);
      var $18=$png_ptr_addr;
      var $19=$png_ptr_addr;
      var $avg_row=(($19+252)|0);
      var $20=HEAP32[(($avg_row)>>2)];
      _png_free($18, $20);
      var $21=$png_ptr_addr;
      var $22=$png_ptr_addr;
      var $paeth_row=(($22+256)|0);
      var $23=HEAP32[(($paeth_row)>>2)];
      _png_free($21, $23);
      var $24=$png_ptr_addr;
      _png_reset_filter_heuristics($24);
      var $25=$png_ptr_addr;
      var $26=$png_ptr_addr;
      var $filter_costs=(($26+508)|0);
      var $27=HEAP32[(($filter_costs)>>2)];
      var $28=$27;
      _png_free($25, $28);
      var $29=$png_ptr_addr;
      var $30=$png_ptr_addr;
      var $inv_filter_costs=(($30+512)|0);
      var $31=HEAP32[(($inv_filter_costs)>>2)];
      var $32=$31;
      _png_free($29, $32);
      var $arraydecay=(($tmp_jmp)|0);
      var $33=$arraydecay;
      var $34=$png_ptr_addr;
      var $longjmp_buffer=(($34)|0);
      var $arraydecay1=(($longjmp_buffer)|0);
      var $35=$arraydecay1;
      assert(40 % 1 === 0, 'memcpy given ' + 40 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($33, $35, 40, 1);
      var $36=$png_ptr_addr;
      var $error_fn2=(($36+44)|0);
      var $37=HEAP32[(($error_fn2)>>2)];
      $error_fn=$37;
      var $38=$png_ptr_addr;
      var $warning_fn3=(($38+48)|0);
      var $39=HEAP32[(($warning_fn3)>>2)];
      $warning_fn=$39;
      var $40=$png_ptr_addr;
      var $error_ptr4=(($40+52)|0);
      var $41=HEAP32[(($error_ptr4)>>2)];
      $error_ptr=$41;
      var $42=$png_ptr_addr;
      var $free_fn5=(($42+592)|0);
      var $43=HEAP32[(($free_fn5)>>2)];
      $free_fn=$43;
      var $44=$png_ptr_addr;
      var $45=$44;
      _memset($45, 0, 684, 1);
      var $46=$error_fn;
      var $47=$png_ptr_addr;
      var $error_fn6=(($47+44)|0);
      HEAP32[(($error_fn6)>>2)]=$46;
      var $48=$warning_fn;
      var $49=$png_ptr_addr;
      var $warning_fn7=(($49+48)|0);
      HEAP32[(($warning_fn7)>>2)]=$48;
      var $50=$error_ptr;
      var $51=$png_ptr_addr;
      var $error_ptr8=(($51+52)|0);
      HEAP32[(($error_ptr8)>>2)]=$50;
      var $52=$free_fn;
      var $53=$png_ptr_addr;
      var $free_fn9=(($53+592)|0);
      HEAP32[(($free_fn9)>>2)]=$52;
      var $54=$png_ptr_addr;
      var $longjmp_buffer10=(($54)|0);
      var $arraydecay11=(($longjmp_buffer10)|0);
      var $55=$arraydecay11;
      var $arraydecay12=(($tmp_jmp)|0);
      var $56=$arraydecay12;
      assert(40 % 1 === 0, 'memcpy given ' + 40 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($55, $56, 40, 1);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_destroy["X"]=1;

function _png_set_compression_level($png_ptr, $level) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $level_addr;
      $png_ptr_addr=$png_ptr;
      $level_addr=$level;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $flags=(($1+88)|0);
      var $2=HEAP32[(($flags)>>2)];
      var $or=$2 | 2;
      HEAP32[(($flags)>>2)]=$or;
      var $3=$level_addr;
      var $4=$png_ptr_addr;
      var $zlib_level=(($4+164)|0);
      HEAP32[(($zlib_level)>>2)]=$3;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_compression_mem_level($png_ptr, $mem_level) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $mem_level_addr;
      $png_ptr_addr=$png_ptr;
      $mem_level_addr=$mem_level;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $flags=(($1+88)|0);
      var $2=HEAP32[(($flags)>>2)];
      var $or=$2 | 4;
      HEAP32[(($flags)>>2)]=$or;
      var $3=$mem_level_addr;
      var $4=$png_ptr_addr;
      var $zlib_mem_level=(($4+176)|0);
      HEAP32[(($zlib_mem_level)>>2)]=$3;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_compression_strategy($png_ptr, $strategy) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $strategy_addr;
      $png_ptr_addr=$png_ptr;
      $strategy_addr=$strategy;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $flags=(($1+88)|0);
      var $2=HEAP32[(($flags)>>2)];
      var $or=$2 | 1;
      HEAP32[(($flags)>>2)]=$or;
      var $3=$strategy_addr;
      var $4=$png_ptr_addr;
      var $zlib_strategy=(($4+180)|0);
      HEAP32[(($zlib_strategy)>>2)]=$3;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_set_filter($png_ptr, $method, $filters) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $method_addr;
      var $filters_addr;
      $png_ptr_addr=$png_ptr;
      $method_addr=$method;
      $filters_addr=$filters;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 42; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $mng_features_permitted=(($1+576)|0);
      var $2=HEAP32[(($mng_features_permitted)>>2)];
      var $and=$2 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $3=$method_addr;
      var $cmp1=(($3)|0)==64;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $method_addr=0;
      __label__ = 6; break;
    case 6: 
      var $4=$method_addr;
      var $cmp4=(($4)|0)==0;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 41; break; }
    case 7: 
      var $5=$filters_addr;
      var $and6=$5 & 255;
      if ((($and6)|0) == 5 || (($and6)|0) == 6 || (($and6)|0) == 7) {
        __label__ = 8; break;
      }
      else if ((($and6)|0) == 0) {
        __label__ = 9; break;
      }
      else if ((($and6)|0) == 1) {
        __label__ = 10; break;
      }
      else if ((($and6)|0) == 2) {
        __label__ = 11; break;
      }
      else if ((($and6)|0) == 3) {
        __label__ = 12; break;
      }
      else if ((($and6)|0) == 4) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 8: 
      var $6=$png_ptr_addr;
      _png_warning($6, ((STRING_TABLE.__str81098)|0));
      __label__ = 9; break;
    case 9: 
      var $7=$png_ptr_addr;
      var $do_filter=(($7+290)|0);
      HEAP8[($do_filter)]=8;
      __label__ = 15; break;
    case 10: 
      var $8=$png_ptr_addr;
      var $do_filter9=(($8+290)|0);
      HEAP8[($do_filter9)]=16;
      __label__ = 15; break;
    case 11: 
      var $9=$png_ptr_addr;
      var $do_filter11=(($9+290)|0);
      HEAP8[($do_filter11)]=32;
      __label__ = 15; break;
    case 12: 
      var $10=$png_ptr_addr;
      var $do_filter13=(($10+290)|0);
      HEAP8[($do_filter13)]=64;
      __label__ = 15; break;
    case 13: 
      var $11=$png_ptr_addr;
      var $do_filter15=(($11+290)|0);
      HEAP8[($do_filter15)]=-128;
      __label__ = 15; break;
    case 14: 
      var $12=$filters_addr;
      var $conv=(($12) & 255);
      var $13=$png_ptr_addr;
      var $do_filter16=(($13+290)|0);
      HEAP8[($do_filter16)]=$conv;
      __label__ = 15; break;
    case 15: 
      var $14=$png_ptr_addr;
      var $row_buf=(($14+240)|0);
      var $15=HEAP32[(($row_buf)>>2)];
      var $cmp17=(($15)|0)!=0;
      if ($cmp17) { __label__ = 16; break; } else { __label__ = 40; break; }
    case 16: 
      var $16=$png_ptr_addr;
      var $do_filter20=(($16+290)|0);
      var $17=HEAPU8[($do_filter20)];
      var $conv21=(($17)&255);
      var $and22=$conv21 & 16;
      var $tobool23=(($and22)|0)!=0;
      if ($tobool23) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $18=$png_ptr_addr;
      var $sub_row=(($18+244)|0);
      var $19=HEAP32[(($sub_row)>>2)];
      var $cmp25=(($19)|0)==0;
      if ($cmp25) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $20=$png_ptr_addr;
      var $21=$png_ptr_addr;
      var $rowbytes=(($21+220)|0);
      var $22=HEAP32[(($rowbytes)>>2)];
      var $add=(($22+1)|0);
      var $call=_png_malloc($20, $add);
      var $23=$png_ptr_addr;
      var $sub_row28=(($23+244)|0);
      HEAP32[(($sub_row28)>>2)]=$call;
      var $24=$png_ptr_addr;
      var $sub_row29=(($24+244)|0);
      var $25=HEAP32[(($sub_row29)>>2)];
      var $arrayidx=(($25)|0);
      HEAP8[($arrayidx)]=1;
      __label__ = 19; break;
    case 19: 
      var $26=$png_ptr_addr;
      var $do_filter31=(($26+290)|0);
      var $27=HEAPU8[($do_filter31)];
      var $conv32=(($27)&255);
      var $and33=$conv32 & 32;
      var $tobool34=(($and33)|0)!=0;
      if ($tobool34) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: 
      var $28=$png_ptr_addr;
      var $up_row=(($28+248)|0);
      var $29=HEAP32[(($up_row)>>2)];
      var $cmp36=(($29)|0)==0;
      if ($cmp36) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $30=$png_ptr_addr;
      var $prev_row=(($30+236)|0);
      var $31=HEAP32[(($prev_row)>>2)];
      var $cmp39=(($31)|0)==0;
      if ($cmp39) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $32=$png_ptr_addr;
      _png_warning($32, ((STRING_TABLE.__str91099)|0));
      var $33=$png_ptr_addr;
      var $do_filter42=(($33+290)|0);
      var $34=HEAPU8[($do_filter42)];
      var $conv43=(($34)&255);
      var $and44=$conv43 & -33;
      var $conv45=(($and44) & 255);
      var $35=$png_ptr_addr;
      var $do_filter46=(($35+290)|0);
      HEAP8[($do_filter46)]=$conv45;
      __label__ = 24; break;
    case 23: 
      var $36=$png_ptr_addr;
      var $37=$png_ptr_addr;
      var $rowbytes47=(($37+220)|0);
      var $38=HEAP32[(($rowbytes47)>>2)];
      var $add48=(($38+1)|0);
      var $call49=_png_malloc($36, $add48);
      var $39=$png_ptr_addr;
      var $up_row50=(($39+248)|0);
      HEAP32[(($up_row50)>>2)]=$call49;
      var $40=$png_ptr_addr;
      var $up_row51=(($40+248)|0);
      var $41=HEAP32[(($up_row51)>>2)];
      var $arrayidx52=(($41)|0);
      HEAP8[($arrayidx52)]=2;
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $42=$png_ptr_addr;
      var $do_filter55=(($42+290)|0);
      var $43=HEAPU8[($do_filter55)];
      var $conv56=(($43)&255);
      var $and57=$conv56 & 64;
      var $tobool58=(($and57)|0)!=0;
      if ($tobool58) { __label__ = 26; break; } else { __label__ = 31; break; }
    case 26: 
      var $44=$png_ptr_addr;
      var $avg_row=(($44+252)|0);
      var $45=HEAP32[(($avg_row)>>2)];
      var $cmp60=(($45)|0)==0;
      if ($cmp60) { __label__ = 27; break; } else { __label__ = 31; break; }
    case 27: 
      var $46=$png_ptr_addr;
      var $prev_row63=(($46+236)|0);
      var $47=HEAP32[(($prev_row63)>>2)];
      var $cmp64=(($47)|0)==0;
      if ($cmp64) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $48=$png_ptr_addr;
      _png_warning($48, ((STRING_TABLE.__str101100)|0));
      var $49=$png_ptr_addr;
      var $do_filter67=(($49+290)|0);
      var $50=HEAPU8[($do_filter67)];
      var $conv68=(($50)&255);
      var $and69=$conv68 & -65;
      var $conv70=(($and69) & 255);
      var $51=$png_ptr_addr;
      var $do_filter71=(($51+290)|0);
      HEAP8[($do_filter71)]=$conv70;
      __label__ = 30; break;
    case 29: 
      var $52=$png_ptr_addr;
      var $53=$png_ptr_addr;
      var $rowbytes73=(($53+220)|0);
      var $54=HEAP32[(($rowbytes73)>>2)];
      var $add74=(($54+1)|0);
      var $call75=_png_malloc($52, $add74);
      var $55=$png_ptr_addr;
      var $avg_row76=(($55+252)|0);
      HEAP32[(($avg_row76)>>2)]=$call75;
      var $56=$png_ptr_addr;
      var $avg_row77=(($56+252)|0);
      var $57=HEAP32[(($avg_row77)>>2)];
      var $arrayidx78=(($57)|0);
      HEAP8[($arrayidx78)]=3;
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $58=$png_ptr_addr;
      var $do_filter81=(($58+290)|0);
      var $59=HEAPU8[($do_filter81)];
      var $conv82=(($59)&255);
      var $and83=$conv82 & 128;
      var $tobool84=(($and83)|0)!=0;
      if ($tobool84) { __label__ = 32; break; } else { __label__ = 37; break; }
    case 32: 
      var $60=$png_ptr_addr;
      var $paeth_row=(($60+256)|0);
      var $61=HEAP32[(($paeth_row)>>2)];
      var $cmp86=(($61)|0)==0;
      if ($cmp86) { __label__ = 33; break; } else { __label__ = 37; break; }
    case 33: 
      var $62=$png_ptr_addr;
      var $prev_row89=(($62+236)|0);
      var $63=HEAP32[(($prev_row89)>>2)];
      var $cmp90=(($63)|0)==0;
      if ($cmp90) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $64=$png_ptr_addr;
      _png_warning($64, ((STRING_TABLE.__str111101)|0));
      var $65=$png_ptr_addr;
      var $do_filter93=(($65+290)|0);
      var $66=HEAPU8[($do_filter93)];
      var $conv94=(($66)&255);
      var $and95=$conv94 & 127;
      var $conv96=(($and95) & 255);
      HEAP8[($do_filter93)]=$conv96;
      __label__ = 36; break;
    case 35: 
      var $67=$png_ptr_addr;
      var $68=$png_ptr_addr;
      var $rowbytes98=(($68+220)|0);
      var $69=HEAP32[(($rowbytes98)>>2)];
      var $add99=(($69+1)|0);
      var $call100=_png_malloc($67, $add99);
      var $70=$png_ptr_addr;
      var $paeth_row101=(($70+256)|0);
      HEAP32[(($paeth_row101)>>2)]=$call100;
      var $71=$png_ptr_addr;
      var $paeth_row102=(($71+256)|0);
      var $72=HEAP32[(($paeth_row102)>>2)];
      var $arrayidx103=(($72)|0);
      HEAP8[($arrayidx103)]=4;
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $73=$png_ptr_addr;
      var $do_filter106=(($73+290)|0);
      var $74=HEAPU8[($do_filter106)];
      var $conv107=(($74)&255);
      var $cmp108=(($conv107)|0)==0;
      if ($cmp108) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $75=$png_ptr_addr;
      var $do_filter111=(($75+290)|0);
      HEAP8[($do_filter111)]=8;
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 42; break;
    case 41: 
      var $76=$png_ptr_addr;
      _png_error($76, ((STRING_TABLE.__str121102)|0));
      __label__ = 42; break;
    case 42: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_set_filter["X"]=1;

function _png_set_compression_window_bits($png_ptr, $window_bits) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $window_bits_addr;
      $png_ptr_addr=$png_ptr;
      $window_bits_addr=$window_bits;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 11; break;
    case 3: 
      var $1=$window_bits_addr;
      var $cmp1=(($1)|0) > 15;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $2=$png_ptr_addr;
      _png_warning($2, ((STRING_TABLE.__str131103)|0));
      __label__ = 8; break;
    case 5: 
      var $3=$window_bits_addr;
      var $cmp3=(($3)|0) < 8;
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $4=$png_ptr_addr;
      _png_warning($4, ((STRING_TABLE.__str141104)|0));
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $5=$window_bits_addr;
      var $cmp7=(($5)|0)==8;
      if ($cmp7) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $6=$png_ptr_addr;
      _png_warning($6, ((STRING_TABLE.__str151105)|0));
      $window_bits_addr=9;
      __label__ = 10; break;
    case 10: 
      var $7=$png_ptr_addr;
      var $flags=(($7+88)|0);
      var $8=HEAP32[(($flags)>>2)];
      var $or=$8 | 8;
      HEAP32[(($flags)>>2)]=$or;
      var $9=$window_bits_addr;
      var $10=$png_ptr_addr;
      var $zlib_window_bits=(($10+172)|0);
      HEAP32[(($zlib_window_bits)>>2)]=$9;
      __label__ = 11; break;
    case 11: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_do_write_transformations($png_ptr, $row_info) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $row_info_addr;
      $png_ptr_addr=$png_ptr;
      $row_info_addr=$row_info;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 25; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $transformations=(($1+92)|0);
      var $2=HEAP32[(($transformations)>>2)];
      var $and=$2 & 1048576;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $3=$png_ptr_addr;
      var $write_user_transform_fn=(($3+72)|0);
      var $4=HEAP32[(($write_user_transform_fn)>>2)];
      var $cmp2=(($4)|0)!=0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$png_ptr_addr;
      var $write_user_transform_fn4=(($5+72)|0);
      var $6=HEAP32[(($write_user_transform_fn4)>>2)];
      var $7=$png_ptr_addr;
      var $8=$row_info_addr;
      var $9=$png_ptr_addr;
      var $row_buf=(($9+240)|0);
      var $10=HEAP32[(($row_buf)>>2)];
      var $add_ptr=(($10+1)|0);
      FUNCTION_TABLE[$6]($7, $8, $add_ptr);
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $11=$png_ptr_addr;
      var $transformations7=(($11+92)|0);
      var $12=HEAP32[(($transformations7)>>2)];
      var $and8=$12 & 32768;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $13=$row_info_addr;
      var $14=$png_ptr_addr;
      var $row_buf11=(($14+240)|0);
      var $15=HEAP32[(($row_buf11)>>2)];
      var $add_ptr12=(($15+1)|0);
      var $16=$png_ptr_addr;
      var $flags=(($16+88)|0);
      var $17=HEAP32[(($flags)>>2)];
      var $and13=$17 & 128;
      var $tobool14=(($and13)|0)!=0;
      var $lnot=$tobool14 ^ 1;
      var $lnot_ext=(($lnot)&1);
      _png_do_strip_channel($13, $add_ptr12, $lnot_ext);
      __label__ = 9; break;
    case 9: 
      var $18=$png_ptr_addr;
      var $transformations16=(($18+92)|0);
      var $19=HEAP32[(($transformations16)>>2)];
      var $and17=$19 & 65536;
      var $tobool18=(($and17)|0)!=0;
      if ($tobool18) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $20=$row_info_addr;
      var $21=$png_ptr_addr;
      var $row_buf20=(($21+240)|0);
      var $22=HEAP32[(($row_buf20)>>2)];
      var $add_ptr21=(($22+1)|0);
      _png_do_packswap($20, $add_ptr21);
      __label__ = 11; break;
    case 11: 
      var $23=$png_ptr_addr;
      var $transformations23=(($23+92)|0);
      var $24=HEAP32[(($transformations23)>>2)];
      var $and24=$24 & 4;
      var $tobool25=(($and24)|0)!=0;
      if ($tobool25) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $25=$row_info_addr;
      var $26=$png_ptr_addr;
      var $row_buf27=(($26+240)|0);
      var $27=HEAP32[(($row_buf27)>>2)];
      var $add_ptr28=(($27+1)|0);
      var $28=$png_ptr_addr;
      var $bit_depth=(($28+292)|0);
      var $29=HEAPU8[($bit_depth)];
      var $conv=(($29)&255);
      _png_do_pack($25, $add_ptr28, $conv);
      __label__ = 13; break;
    case 13: 
      var $30=$png_ptr_addr;
      var $transformations30=(($30+92)|0);
      var $31=HEAP32[(($transformations30)>>2)];
      var $and31=$31 & 16;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $32=$row_info_addr;
      var $33=$png_ptr_addr;
      var $row_buf34=(($33+240)|0);
      var $34=HEAP32[(($row_buf34)>>2)];
      var $add_ptr35=(($34+1)|0);
      _png_do_swap($32, $add_ptr35);
      __label__ = 15; break;
    case 15: 
      var $35=$png_ptr_addr;
      var $transformations37=(($35+92)|0);
      var $36=HEAP32[(($transformations37)>>2)];
      var $and38=$36 & 8;
      var $tobool39=(($and38)|0)!=0;
      if ($tobool39) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $37=$row_info_addr;
      var $38=$png_ptr_addr;
      var $row_buf41=(($38+240)|0);
      var $39=HEAP32[(($row_buf41)>>2)];
      var $add_ptr42=(($39+1)|0);
      var $40=$png_ptr_addr;
      var $shift=(($40+389)|0);
      _png_do_shift($37, $add_ptr42, $shift);
      __label__ = 17; break;
    case 17: 
      var $41=$png_ptr_addr;
      var $transformations44=(($41+92)|0);
      var $42=HEAP32[(($transformations44)>>2)];
      var $and45=$42 & 131072;
      var $tobool46=(($and45)|0)!=0;
      if ($tobool46) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $43=$row_info_addr;
      var $44=$png_ptr_addr;
      var $row_buf48=(($44+240)|0);
      var $45=HEAP32[(($row_buf48)>>2)];
      var $add_ptr49=(($45+1)|0);
      _png_do_write_swap_alpha($43, $add_ptr49);
      __label__ = 19; break;
    case 19: 
      var $46=$png_ptr_addr;
      var $transformations51=(($46+92)|0);
      var $47=HEAP32[(($transformations51)>>2)];
      var $and52=$47 & 524288;
      var $tobool53=(($and52)|0)!=0;
      if ($tobool53) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $48=$row_info_addr;
      var $49=$png_ptr_addr;
      var $row_buf55=(($49+240)|0);
      var $50=HEAP32[(($row_buf55)>>2)];
      var $add_ptr56=(($50+1)|0);
      _png_do_write_invert_alpha($48, $add_ptr56);
      __label__ = 21; break;
    case 21: 
      var $51=$png_ptr_addr;
      var $transformations58=(($51+92)|0);
      var $52=HEAP32[(($transformations58)>>2)];
      var $and59=$52 & 1;
      var $tobool60=(($and59)|0)!=0;
      if ($tobool60) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $53=$row_info_addr;
      var $54=$png_ptr_addr;
      var $row_buf62=(($54+240)|0);
      var $55=HEAP32[(($row_buf62)>>2)];
      var $add_ptr63=(($55+1)|0);
      _png_do_bgr($53, $add_ptr63);
      __label__ = 23; break;
    case 23: 
      var $56=$png_ptr_addr;
      var $transformations65=(($56+92)|0);
      var $57=HEAP32[(($transformations65)>>2)];
      var $and66=$57 & 32;
      var $tobool67=(($and66)|0)!=0;
      if ($tobool67) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $58=$row_info_addr;
      var $59=$png_ptr_addr;
      var $row_buf69=(($59+240)|0);
      var $60=HEAP32[(($row_buf69)>>2)];
      var $add_ptr70=(($60+1)|0);
      _png_do_invert($58, $add_ptr70);
      __label__ = 25; break;
    case 25: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_write_transformations["X"]=1;

function _png_do_pack($row_info, $row, $bit_depth) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $bit_depth_addr;
      var $sp;
      var $dp;
      var $mask;
      var $v;
      var $i;
      var $row_width;
      var $sp24;
      var $dp25;
      var $shift;
      var $v26;
      var $i27;
      var $row_width28;
      var $value;
      var $sp55;
      var $dp56;
      var $shift57;
      var $v58;
      var $i59;
      var $row_width60;
      var $value66;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $bit_depth_addr=$bit_depth;
      var $0=$row_info_addr;
      var $bit_depth1=(($0+9)|0);
      var $1=HEAPU8[($bit_depth1)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 41; break; }
    case 2: 
      var $2=$row_info_addr;
      var $channels=(($2+10)|0);
      var $3=HEAPU8[($channels)];
      var $conv3=(($3)&255);
      var $cmp4=(($conv3)|0)==1;
      if ($cmp4) { __label__ = 3; break; } else { __label__ = 41; break; }
    case 3: 
      var $4=$bit_depth_addr;
      if ((($4)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($4)|0) == 2) {
        __label__ = 16; break;
      }
      else if ((($4)|0) == 4) {
        __label__ = 26; break;
      }
      else {
      __label__ = 36; break;
      }
      
    case 4: 
      var $5=$row_info_addr;
      var $width=(($5)|0);
      var $6=HEAP32[(($width)>>2)];
      $row_width=$6;
      var $7=$row_addr;
      $sp=$7;
      var $8=$row_addr;
      $dp=$8;
      $mask=128;
      $v=0;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $9=$i;
      var $10=$row_width;
      var $cmp6=(($9)>>>0) < (($10)>>>0);
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 13; break; }
    case 6: 
      var $11=$sp;
      var $12=HEAPU8[($11)];
      var $conv8=(($12)&255);
      var $cmp9=(($conv8)|0)!=0;
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $13=$mask;
      var $14=$v;
      var $or=$14 | $13;
      $v=$or;
      __label__ = 8; break;
    case 8: 
      var $15=$sp;
      var $incdec_ptr=(($15+1)|0);
      $sp=$incdec_ptr;
      var $16=$mask;
      var $cmp12=(($16)|0) > 1;
      if ($cmp12) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $17=$mask;
      var $shr=$17 >> 1;
      $mask=$shr;
      __label__ = 11; break;
    case 10: 
      $mask=128;
      var $18=$v;
      var $conv15=(($18) & 255);
      var $19=$dp;
      HEAP8[($19)]=$conv15;
      var $20=$dp;
      var $incdec_ptr16=(($20+1)|0);
      $dp=$incdec_ptr16;
      $v=0;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $21=$i;
      var $inc=(($21+1)|0);
      $i=$inc;
      __label__ = 5; break;
    case 13: 
      var $22=$mask;
      var $cmp18=(($22)|0)!=128;
      if ($cmp18) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $23=$v;
      var $conv21=(($23) & 255);
      var $24=$dp;
      HEAP8[($24)]=$conv21;
      __label__ = 15; break;
    case 15: 
      __label__ = 37; break;
    case 16: 
      var $25=$row_info_addr;
      var $width29=(($25)|0);
      var $26=HEAP32[(($width29)>>2)];
      $row_width28=$26;
      var $27=$row_addr;
      $sp24=$27;
      var $28=$row_addr;
      $dp25=$28;
      $shift=6;
      $v26=0;
      $i27=0;
      __label__ = 17; break;
    case 17: 
      var $29=$i27;
      var $30=$row_width28;
      var $cmp31=(($29)>>>0) < (($30)>>>0);
      if ($cmp31) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: 
      var $31=$sp24;
      var $32=HEAPU8[($31)];
      var $conv34=(($32)&255);
      var $and=$conv34 & 3;
      var $conv35=(($and) & 255);
      $value=$conv35;
      var $33=$value;
      var $conv36=(($33)&255);
      var $34=$shift;
      var $shl=$conv36 << $34;
      var $35=$v26;
      var $or37=$35 | $shl;
      $v26=$or37;
      var $36=$shift;
      var $cmp38=(($36)|0)==0;
      if ($cmp38) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      $shift=6;
      var $37=$v26;
      var $conv41=(($37) & 255);
      var $38=$dp25;
      HEAP8[($38)]=$conv41;
      var $39=$dp25;
      var $incdec_ptr42=(($39+1)|0);
      $dp25=$incdec_ptr42;
      $v26=0;
      __label__ = 21; break;
    case 20: 
      var $40=$shift;
      var $sub=(($40-2)|0);
      $shift=$sub;
      __label__ = 21; break;
    case 21: 
      var $41=$sp24;
      var $incdec_ptr45=(($41+1)|0);
      $sp24=$incdec_ptr45;
      __label__ = 22; break;
    case 22: 
      var $42=$i27;
      var $inc47=(($42+1)|0);
      $i27=$inc47;
      __label__ = 17; break;
    case 23: 
      var $43=$shift;
      var $cmp49=(($43)|0)!=6;
      if ($cmp49) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $44=$v26;
      var $conv52=(($44) & 255);
      var $45=$dp25;
      HEAP8[($45)]=$conv52;
      __label__ = 25; break;
    case 25: 
      __label__ = 37; break;
    case 26: 
      var $46=$row_info_addr;
      var $width61=(($46)|0);
      var $47=HEAP32[(($width61)>>2)];
      $row_width60=$47;
      var $48=$row_addr;
      $sp55=$48;
      var $49=$row_addr;
      $dp56=$49;
      $shift57=4;
      $v58=0;
      $i59=0;
      __label__ = 27; break;
    case 27: 
      var $50=$i59;
      var $51=$row_width60;
      var $cmp63=(($50)>>>0) < (($51)>>>0);
      if ($cmp63) { __label__ = 28; break; } else { __label__ = 33; break; }
    case 28: 
      var $52=$sp55;
      var $53=HEAPU8[($52)];
      var $conv67=(($53)&255);
      var $and68=$conv67 & 15;
      var $conv69=(($and68) & 255);
      $value66=$conv69;
      var $54=$value66;
      var $conv70=(($54)&255);
      var $55=$shift57;
      var $shl71=$conv70 << $55;
      var $56=$v58;
      var $or72=$56 | $shl71;
      $v58=$or72;
      var $57=$shift57;
      var $cmp73=(($57)|0)==0;
      if ($cmp73) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      $shift57=4;
      var $58=$v58;
      var $conv76=(($58) & 255);
      var $59=$dp56;
      HEAP8[($59)]=$conv76;
      var $60=$dp56;
      var $incdec_ptr77=(($60+1)|0);
      $dp56=$incdec_ptr77;
      $v58=0;
      __label__ = 31; break;
    case 30: 
      var $61=$shift57;
      var $sub79=(($61-4)|0);
      $shift57=$sub79;
      __label__ = 31; break;
    case 31: 
      var $62=$sp55;
      var $incdec_ptr81=(($62+1)|0);
      $sp55=$incdec_ptr81;
      __label__ = 32; break;
    case 32: 
      var $63=$i59;
      var $inc83=(($63+1)|0);
      $i59=$inc83;
      __label__ = 27; break;
    case 33: 
      var $64=$shift57;
      var $cmp85=(($64)|0)!=4;
      if ($cmp85) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $65=$v58;
      var $conv88=(($65) & 255);
      var $66=$dp56;
      HEAP8[($66)]=$conv88;
      __label__ = 35; break;
    case 35: 
      __label__ = 37; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $67=$bit_depth_addr;
      var $conv90=(($67) & 255);
      var $68=$row_info_addr;
      var $bit_depth91=(($68+9)|0);
      HEAP8[($bit_depth91)]=$conv90;
      var $69=$bit_depth_addr;
      var $70=$row_info_addr;
      var $channels92=(($70+10)|0);
      var $71=HEAPU8[($channels92)];
      var $conv93=(($71)&255);
      var $mul=(($69*$conv93)|0);
      var $conv94=(($mul) & 255);
      var $72=$row_info_addr;
      var $pixel_depth=(($72+11)|0);
      HEAP8[($pixel_depth)]=$conv94;
      var $73=$row_info_addr;
      var $pixel_depth95=(($73+11)|0);
      var $74=HEAPU8[($pixel_depth95)];
      var $conv96=(($74)&255);
      var $cmp97=(($conv96)|0) >= 8;
      if ($cmp97) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $75=$row_info_addr;
      var $width99=(($75)|0);
      var $76=HEAP32[(($width99)>>2)];
      var $77=$row_info_addr;
      var $pixel_depth100=(($77+11)|0);
      var $78=HEAPU8[($pixel_depth100)];
      var $conv101=(($78)&255);
      var $shr102=$conv101 >>> 3;
      var $mul103=(($76*$shr102)|0);
      var $cond = $mul103;__label__ = 40; break;
    case 39: 
      var $79=$row_info_addr;
      var $width104=(($79)|0);
      var $80=HEAP32[(($width104)>>2)];
      var $81=$row_info_addr;
      var $pixel_depth105=(($81+11)|0);
      var $82=HEAPU8[($pixel_depth105)];
      var $conv106=(($82)&255);
      var $mul107=(($80*$conv106)|0);
      var $add=(($mul107+7)|0);
      var $shr108=$add >>> 3;
      var $cond = $shr108;__label__ = 40; break;
    case 40: 
      var $cond;
      var $83=$row_info_addr;
      var $rowbytes=(($83+4)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      __label__ = 41; break;
    case 41: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_pack["X"]=1;

function _png_do_shift($row_info, $row, $bit_depth) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $bit_depth_addr;
      var $shift_start=__stackBase__;
      var $shift_dec=__stackBase__+16;
      var $channels;
      var $bp;
      var $i;
      var $mask;
      var $row_bytes;
      var $v;
      var $j;
      var $bp122;
      var $i123;
      var $istop;
      var $v128;
      var $j129;
      var $c;
      var $bp169;
      var $i170;
      var $istop171;
      var $c178;
      var $value;
      var $v180;
      var $j181;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $bit_depth_addr=$bit_depth;
      var $0=$row_info_addr;
      var $color_type=(($0+8)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)!=3;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 55; break; }
    case 2: 
      $channels=0;
      var $2=$row_info_addr;
      var $color_type2=(($2+8)|0);
      var $3=HEAPU8[($color_type2)];
      var $conv3=(($3)&255);
      var $and=$conv3 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$row_info_addr;
      var $bit_depth5=(($4+9)|0);
      var $5=HEAPU8[($bit_depth5)];
      var $conv6=(($5)&255);
      var $6=$bit_depth_addr;
      var $red=(($6)|0);
      var $7=HEAPU8[($red)];
      var $conv7=(($7)&255);
      var $sub=(($conv6-$conv7)|0);
      var $8=$channels;
      var $arrayidx=(($shift_start+($8<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$sub;
      var $9=$bit_depth_addr;
      var $red8=(($9)|0);
      var $10=HEAPU8[($red8)];
      var $conv9=(($10)&255);
      var $11=$channels;
      var $arrayidx10=(($shift_dec+($11<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=$conv9;
      var $12=$channels;
      var $inc=(($12+1)|0);
      $channels=$inc;
      var $13=$row_info_addr;
      var $bit_depth11=(($13+9)|0);
      var $14=HEAPU8[($bit_depth11)];
      var $conv12=(($14)&255);
      var $15=$bit_depth_addr;
      var $green=(($15+1)|0);
      var $16=HEAPU8[($green)];
      var $conv13=(($16)&255);
      var $sub14=(($conv12-$conv13)|0);
      var $17=$channels;
      var $arrayidx15=(($shift_start+($17<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$sub14;
      var $18=$bit_depth_addr;
      var $green16=(($18+1)|0);
      var $19=HEAPU8[($green16)];
      var $conv17=(($19)&255);
      var $20=$channels;
      var $arrayidx18=(($shift_dec+($20<<2))|0);
      HEAP32[(($arrayidx18)>>2)]=$conv17;
      var $21=$channels;
      var $inc19=(($21+1)|0);
      $channels=$inc19;
      var $22=$row_info_addr;
      var $bit_depth20=(($22+9)|0);
      var $23=HEAPU8[($bit_depth20)];
      var $conv21=(($23)&255);
      var $24=$bit_depth_addr;
      var $blue=(($24+2)|0);
      var $25=HEAPU8[($blue)];
      var $conv22=(($25)&255);
      var $sub23=(($conv21-$conv22)|0);
      var $26=$channels;
      var $arrayidx24=(($shift_start+($26<<2))|0);
      HEAP32[(($arrayidx24)>>2)]=$sub23;
      var $27=$bit_depth_addr;
      var $blue25=(($27+2)|0);
      var $28=HEAPU8[($blue25)];
      var $conv26=(($28)&255);
      var $29=$channels;
      var $arrayidx27=(($shift_dec+($29<<2))|0);
      HEAP32[(($arrayidx27)>>2)]=$conv26;
      var $30=$channels;
      var $inc28=(($30+1)|0);
      $channels=$inc28;
      __label__ = 5; break;
    case 4: 
      var $31=$row_info_addr;
      var $bit_depth29=(($31+9)|0);
      var $32=HEAPU8[($bit_depth29)];
      var $conv30=(($32)&255);
      var $33=$bit_depth_addr;
      var $gray=(($33+3)|0);
      var $34=HEAPU8[($gray)];
      var $conv31=(($34)&255);
      var $sub32=(($conv30-$conv31)|0);
      var $35=$channels;
      var $arrayidx33=(($shift_start+($35<<2))|0);
      HEAP32[(($arrayidx33)>>2)]=$sub32;
      var $36=$bit_depth_addr;
      var $gray34=(($36+3)|0);
      var $37=HEAPU8[($gray34)];
      var $conv35=(($37)&255);
      var $38=$channels;
      var $arrayidx36=(($shift_dec+($38<<2))|0);
      HEAP32[(($arrayidx36)>>2)]=$conv35;
      var $39=$channels;
      var $inc37=(($39+1)|0);
      $channels=$inc37;
      __label__ = 5; break;
    case 5: 
      var $40=$row_info_addr;
      var $color_type38=(($40+8)|0);
      var $41=HEAPU8[($color_type38)];
      var $conv39=(($41)&255);
      var $and40=$conv39 & 4;
      var $tobool41=(($and40)|0)!=0;
      if ($tobool41) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $42=$row_info_addr;
      var $bit_depth43=(($42+9)|0);
      var $43=HEAPU8[($bit_depth43)];
      var $conv44=(($43)&255);
      var $44=$bit_depth_addr;
      var $alpha=(($44+4)|0);
      var $45=HEAPU8[($alpha)];
      var $conv45=(($45)&255);
      var $sub46=(($conv44-$conv45)|0);
      var $46=$channels;
      var $arrayidx47=(($shift_start+($46<<2))|0);
      HEAP32[(($arrayidx47)>>2)]=$sub46;
      var $47=$bit_depth_addr;
      var $alpha48=(($47+4)|0);
      var $48=HEAPU8[($alpha48)];
      var $conv49=(($48)&255);
      var $49=$channels;
      var $arrayidx50=(($shift_dec+($49<<2))|0);
      HEAP32[(($arrayidx50)>>2)]=$conv49;
      var $50=$channels;
      var $inc51=(($50+1)|0);
      $channels=$inc51;
      __label__ = 7; break;
    case 7: 
      var $51=$row_info_addr;
      var $bit_depth53=(($51+9)|0);
      var $52=HEAPU8[($bit_depth53)];
      var $conv54=(($52)&255);
      var $cmp55=(($conv54)|0) < 8;
      if ($cmp55) { __label__ = 8; break; } else { __label__ = 28; break; }
    case 8: 
      var $53=$row_addr;
      $bp=$53;
      var $54=$row_info_addr;
      var $rowbytes=(($54+4)|0);
      var $55=HEAP32[(($rowbytes)>>2)];
      $row_bytes=$55;
      var $56=$bit_depth_addr;
      var $gray58=(($56+3)|0);
      var $57=HEAPU8[($gray58)];
      var $conv59=(($57)&255);
      var $cmp60=(($conv59)|0)==1;
      if ($cmp60) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $58=$row_info_addr;
      var $bit_depth62=(($58+9)|0);
      var $59=HEAPU8[($bit_depth62)];
      var $conv63=(($59)&255);
      var $cmp64=(($conv63)|0)==2;
      if ($cmp64) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $mask=85;
      __label__ = 16; break;
    case 11: 
      var $60=$row_info_addr;
      var $bit_depth68=(($60+9)|0);
      var $61=HEAPU8[($bit_depth68)];
      var $conv69=(($61)&255);
      var $cmp70=(($conv69)|0)==4;
      if ($cmp70) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $62=$bit_depth_addr;
      var $gray73=(($62+3)|0);
      var $63=HEAPU8[($gray73)];
      var $conv74=(($63)&255);
      var $cmp75=(($conv74)|0)==3;
      if ($cmp75) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $mask=17;
      __label__ = 15; break;
    case 14: 
      $mask=-1;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      $i=0;
      __label__ = 17; break;
    case 17: 
      var $64=$i;
      var $65=$row_bytes;
      var $cmp81=(($64)>>>0) < (($65)>>>0);
      if ($cmp81) { __label__ = 18; break; } else { __label__ = 27; break; }
    case 18: 
      var $66=$bp;
      var $67=HEAPU8[($66)];
      var $conv83=(($67)&255);
      $v=$conv83;
      var $68=$bp;
      HEAP8[($68)]=0;
      var $arrayidx84=(($shift_start)|0);
      var $69=HEAP32[(($arrayidx84)>>2)];
      $j=$69;
      __label__ = 19; break;
    case 19: 
      var $70=$j;
      var $arrayidx86=(($shift_dec)|0);
      var $71=HEAP32[(($arrayidx86)>>2)];
      var $sub87=(((-$71))|0);
      var $cmp88=(($70)|0) > (($sub87)|0);
      if ($cmp88) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: 
      var $72=$j;
      var $cmp91=(($72)|0) > 0;
      if ($cmp91) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $73=$v;
      var $conv94=(($73)&65535);
      var $74=$j;
      var $shl=$conv94 << $74;
      var $and95=$shl & 255;
      var $conv96=(($and95) & 255);
      var $conv97=(($conv96)&255);
      var $75=$bp;
      var $76=HEAPU8[($75)];
      var $conv98=(($76)&255);
      var $or=$conv98 | $conv97;
      var $conv99=(($or) & 255);
      HEAP8[($75)]=$conv99;
      __label__ = 23; break;
    case 22: 
      var $77=$v;
      var $conv101=(($77)&65535);
      var $78=$j;
      var $sub102=(((-$78))|0);
      var $shr=$conv101 >> (($sub102)|0);
      var $79=$mask;
      var $conv103=(($79)&255);
      var $and104=$shr & $conv103;
      var $conv105=(($and104) & 255);
      var $conv106=(($conv105)&255);
      var $80=$bp;
      var $81=HEAPU8[($80)];
      var $conv107=(($81)&255);
      var $or108=$conv107 | $conv106;
      var $conv109=(($or108) & 255);
      HEAP8[($80)]=$conv109;
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $arrayidx111=(($shift_dec)|0);
      var $82=HEAP32[(($arrayidx111)>>2)];
      var $83=$j;
      var $sub112=(($83-$82)|0);
      $j=$sub112;
      __label__ = 19; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $84=$i;
      var $inc114=(($84+1)|0);
      $i=$inc114;
      var $85=$bp;
      var $incdec_ptr=(($85+1)|0);
      $bp=$incdec_ptr;
      __label__ = 17; break;
    case 27: 
      __label__ = 54; break;
    case 28: 
      var $86=$row_info_addr;
      var $bit_depth117=(($86+9)|0);
      var $87=HEAPU8[($bit_depth117)];
      var $conv118=(($87)&255);
      var $cmp119=(($conv118)|0)==8;
      if ($cmp119) { __label__ = 29; break; } else { __label__ = 41; break; }
    case 29: 
      var $88=$row_addr;
      $bp122=$88;
      var $89=$channels;
      var $90=$row_info_addr;
      var $width=(($90)|0);
      var $91=HEAP32[(($width)>>2)];
      var $mul=(($89*$91)|0);
      $istop=$mul;
      $i123=0;
      __label__ = 30; break;
    case 30: 
      var $92=$i123;
      var $93=$istop;
      var $cmp125=(($92)>>>0) < (($93)>>>0);
      if ($cmp125) { __label__ = 31; break; } else { __label__ = 40; break; }
    case 31: 
      var $94=$i123;
      var $95=$channels;
      var $rem=(($94)>>>0)%(($95)>>>0);
      $c=$rem;
      var $96=$bp122;
      var $97=HEAPU8[($96)];
      var $conv130=(($97)&255);
      $v128=$conv130;
      var $98=$bp122;
      HEAP8[($98)]=0;
      var $99=$c;
      var $arrayidx131=(($shift_start+($99<<2))|0);
      var $100=HEAP32[(($arrayidx131)>>2)];
      $j129=$100;
      __label__ = 32; break;
    case 32: 
      var $101=$j129;
      var $102=$c;
      var $arrayidx133=(($shift_dec+($102<<2))|0);
      var $103=HEAP32[(($arrayidx133)>>2)];
      var $sub134=(((-$103))|0);
      var $cmp135=(($101)|0) > (($sub134)|0);
      if ($cmp135) { __label__ = 33; break; } else { __label__ = 38; break; }
    case 33: 
      var $104=$j129;
      var $cmp138=(($104)|0) > 0;
      if ($cmp138) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $105=$v128;
      var $conv141=(($105)&65535);
      var $106=$j129;
      var $shl142=$conv141 << $106;
      var $and143=$shl142 & 255;
      var $conv144=(($and143) & 255);
      var $conv145=(($conv144)&255);
      var $107=$bp122;
      var $108=HEAPU8[($107)];
      var $conv146=(($108)&255);
      var $or147=$conv146 | $conv145;
      var $conv148=(($or147) & 255);
      HEAP8[($107)]=$conv148;
      __label__ = 36; break;
    case 35: 
      var $109=$v128;
      var $conv150=(($109)&65535);
      var $110=$j129;
      var $sub151=(((-$110))|0);
      var $shr152=$conv150 >> (($sub151)|0);
      var $and153=$shr152 & 255;
      var $conv154=(($and153) & 255);
      var $conv155=(($conv154)&255);
      var $111=$bp122;
      var $112=HEAPU8[($111)];
      var $conv156=(($112)&255);
      var $or157=$conv156 | $conv155;
      var $conv158=(($or157) & 255);
      HEAP8[($111)]=$conv158;
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $113=$c;
      var $arrayidx161=(($shift_dec+($113<<2))|0);
      var $114=HEAP32[(($arrayidx161)>>2)];
      var $115=$j129;
      var $sub162=(($115-$114)|0);
      $j129=$sub162;
      __label__ = 32; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $116=$i123;
      var $inc165=(($116+1)|0);
      $i123=$inc165;
      var $117=$bp122;
      var $incdec_ptr166=(($117+1)|0);
      $bp122=$incdec_ptr166;
      __label__ = 30; break;
    case 40: 
      __label__ = 53; break;
    case 41: 
      var $118=$channels;
      var $119=$row_info_addr;
      var $width172=(($119)|0);
      var $120=HEAP32[(($width172)>>2)];
      var $mul173=(($118*$120)|0);
      $istop171=$mul173;
      var $121=$row_addr;
      $bp169=$121;
      $i170=0;
      __label__ = 42; break;
    case 42: 
      var $122=$i170;
      var $123=$istop171;
      var $cmp175=(($122)>>>0) < (($123)>>>0);
      if ($cmp175) { __label__ = 43; break; } else { __label__ = 52; break; }
    case 43: 
      var $124=$i170;
      var $125=$channels;
      var $rem179=(($124)>>>0)%(($125)>>>0);
      $c178=$rem179;
      var $126=$bp169;
      var $127=HEAPU8[($126)];
      var $conv182=(($127)&255);
      var $conv183=(($conv182)&65535);
      var $shl184=$conv183 << 8;
      var $128=$bp169;
      var $add_ptr=(($128+1)|0);
      var $129=HEAPU8[($add_ptr)];
      var $conv185=(($129)&255);
      var $add=(($shl184+$conv185)|0);
      var $conv186=(($add) & 65535);
      $v180=$conv186;
      $value=0;
      var $130=$c178;
      var $arrayidx187=(($shift_start+($130<<2))|0);
      var $131=HEAP32[(($arrayidx187)>>2)];
      $j181=$131;
      __label__ = 44; break;
    case 44: 
      var $132=$j181;
      var $133=$c178;
      var $arrayidx189=(($shift_dec+($133<<2))|0);
      var $134=HEAP32[(($arrayidx189)>>2)];
      var $sub190=(((-$134))|0);
      var $cmp191=(($132)|0) > (($sub190)|0);
      if ($cmp191) { __label__ = 45; break; } else { __label__ = 50; break; }
    case 45: 
      var $135=$j181;
      var $cmp194=(($135)|0) > 0;
      if ($cmp194) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $136=$v180;
      var $conv197=(($136)&65535);
      var $137=$j181;
      var $shl198=$conv197 << $137;
      var $and199=$shl198 & 65535;
      var $conv200=(($and199) & 65535);
      var $conv201=(($conv200)&65535);
      var $138=$value;
      var $conv202=(($138)&65535);
      var $or203=$conv202 | $conv201;
      var $conv204=(($or203) & 65535);
      $value=$conv204;
      __label__ = 48; break;
    case 47: 
      var $139=$v180;
      var $conv206=(($139)&65535);
      var $140=$j181;
      var $sub207=(((-$140))|0);
      var $shr208=$conv206 >> (($sub207)|0);
      var $and209=$shr208 & 65535;
      var $conv210=(($and209) & 65535);
      var $conv211=(($conv210)&65535);
      var $141=$value;
      var $conv212=(($141)&65535);
      var $or213=$conv212 | $conv211;
      var $conv214=(($or213) & 65535);
      $value=$conv214;
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $142=$c178;
      var $arrayidx217=(($shift_dec+($142<<2))|0);
      var $143=HEAP32[(($arrayidx217)>>2)];
      var $144=$j181;
      var $sub218=(($144-$143)|0);
      $j181=$sub218;
      __label__ = 44; break;
    case 50: 
      var $145=$value;
      var $conv220=(($145)&65535);
      var $shr221=$conv220 >> 8;
      var $conv222=(($shr221) & 255);
      var $146=$bp169;
      var $incdec_ptr223=(($146+1)|0);
      $bp169=$incdec_ptr223;
      HEAP8[($146)]=$conv222;
      var $147=$value;
      var $conv224=(($147)&65535);
      var $and225=$conv224 & 255;
      var $conv226=(($and225) & 255);
      var $148=$bp169;
      var $incdec_ptr227=(($148+1)|0);
      $bp169=$incdec_ptr227;
      HEAP8[($148)]=$conv226;
      __label__ = 51; break;
    case 51: 
      var $149=$i170;
      var $inc229=(($149+1)|0);
      $i170=$inc229;
      __label__ = 42; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_shift["X"]=1;

function _png_do_write_swap_alpha($row_info, $row) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $sp;
      var $dp;
      var $i;
      var $row_width;
      var $save;
      var $sp15;
      var $dp16;
      var $i17;
      var $row_width18;
      var $save24=__stackBase__;
      var $sp58;
      var $dp59;
      var $i60;
      var $row_width61;
      var $save67;
      var $sp76;
      var $dp77;
      var $i78;
      var $row_width79;
      var $save85=__stackBase__+4;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $color_type=(($0+8)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==6;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 14; break; }
    case 2: 
      var $2=$row_info_addr;
      var $bit_depth=(($2+9)|0);
      var $3=HEAPU8[($bit_depth)];
      var $conv2=(($3)&255);
      var $cmp3=(($conv2)|0)==8;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $4=$row_info_addr;
      var $width=(($4)|0);
      var $5=HEAP32[(($width)>>2)];
      $row_width=$5;
      $i=0;
      var $6=$row_addr;
      $dp=$6;
      $sp=$6;
      __label__ = 4; break;
    case 4: 
      var $7=$i;
      var $8=$row_width;
      var $cmp6=(($7)>>>0) < (($8)>>>0);
      if ($cmp6) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $9=$sp;
      var $incdec_ptr=(($9+1)|0);
      $sp=$incdec_ptr;
      var $10=HEAP8[($9)];
      $save=$10;
      var $11=$sp;
      var $incdec_ptr8=(($11+1)|0);
      $sp=$incdec_ptr8;
      var $12=HEAP8[($11)];
      var $13=$dp;
      var $incdec_ptr9=(($13+1)|0);
      $dp=$incdec_ptr9;
      HEAP8[($13)]=$12;
      var $14=$sp;
      var $incdec_ptr10=(($14+1)|0);
      $sp=$incdec_ptr10;
      var $15=HEAP8[($14)];
      var $16=$dp;
      var $incdec_ptr11=(($16+1)|0);
      $dp=$incdec_ptr11;
      HEAP8[($16)]=$15;
      var $17=$sp;
      var $incdec_ptr12=(($17+1)|0);
      $sp=$incdec_ptr12;
      var $18=HEAP8[($17)];
      var $19=$dp;
      var $incdec_ptr13=(($19+1)|0);
      $dp=$incdec_ptr13;
      HEAP8[($19)]=$18;
      var $20=$save;
      var $21=$dp;
      var $incdec_ptr14=(($21+1)|0);
      $dp=$incdec_ptr14;
      HEAP8[($21)]=$20;
      __label__ = 6; break;
    case 6: 
      var $22=$i;
      var $inc=(($22+1)|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      __label__ = 13; break;
    case 8: 
      var $23=$row_info_addr;
      var $width19=(($23)|0);
      var $24=HEAP32[(($width19)>>2)];
      $row_width18=$24;
      $i17=0;
      var $25=$row_addr;
      $dp16=$25;
      $sp15=$25;
      __label__ = 9; break;
    case 9: 
      var $26=$i17;
      var $27=$row_width18;
      var $cmp21=(($26)>>>0) < (($27)>>>0);
      if ($cmp21) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $28=$sp15;
      var $incdec_ptr25=(($28+1)|0);
      $sp15=$incdec_ptr25;
      var $29=HEAP8[($28)];
      var $arrayidx=(($save24)|0);
      HEAP8[($arrayidx)]=$29;
      var $30=$sp15;
      var $incdec_ptr26=(($30+1)|0);
      $sp15=$incdec_ptr26;
      var $31=HEAP8[($30)];
      var $arrayidx27=(($save24+1)|0);
      HEAP8[($arrayidx27)]=$31;
      var $32=$sp15;
      var $incdec_ptr28=(($32+1)|0);
      $sp15=$incdec_ptr28;
      var $33=HEAP8[($32)];
      var $34=$dp16;
      var $incdec_ptr29=(($34+1)|0);
      $dp16=$incdec_ptr29;
      HEAP8[($34)]=$33;
      var $35=$sp15;
      var $incdec_ptr30=(($35+1)|0);
      $sp15=$incdec_ptr30;
      var $36=HEAP8[($35)];
      var $37=$dp16;
      var $incdec_ptr31=(($37+1)|0);
      $dp16=$incdec_ptr31;
      HEAP8[($37)]=$36;
      var $38=$sp15;
      var $incdec_ptr32=(($38+1)|0);
      $sp15=$incdec_ptr32;
      var $39=HEAP8[($38)];
      var $40=$dp16;
      var $incdec_ptr33=(($40+1)|0);
      $dp16=$incdec_ptr33;
      HEAP8[($40)]=$39;
      var $41=$sp15;
      var $incdec_ptr34=(($41+1)|0);
      $sp15=$incdec_ptr34;
      var $42=HEAP8[($41)];
      var $43=$dp16;
      var $incdec_ptr35=(($43+1)|0);
      $dp16=$incdec_ptr35;
      HEAP8[($43)]=$42;
      var $44=$sp15;
      var $incdec_ptr36=(($44+1)|0);
      $sp15=$incdec_ptr36;
      var $45=HEAP8[($44)];
      var $46=$dp16;
      var $incdec_ptr37=(($46+1)|0);
      $dp16=$incdec_ptr37;
      HEAP8[($46)]=$45;
      var $47=$sp15;
      var $incdec_ptr38=(($47+1)|0);
      $sp15=$incdec_ptr38;
      var $48=HEAP8[($47)];
      var $49=$dp16;
      var $incdec_ptr39=(($49+1)|0);
      $dp16=$incdec_ptr39;
      HEAP8[($49)]=$48;
      var $arrayidx40=(($save24)|0);
      var $50=HEAP8[($arrayidx40)];
      var $51=$dp16;
      var $incdec_ptr41=(($51+1)|0);
      $dp16=$incdec_ptr41;
      HEAP8[($51)]=$50;
      var $arrayidx42=(($save24+1)|0);
      var $52=HEAP8[($arrayidx42)];
      var $53=$dp16;
      var $incdec_ptr43=(($53+1)|0);
      $dp16=$incdec_ptr43;
      HEAP8[($53)]=$52;
      __label__ = 11; break;
    case 11: 
      var $54=$i17;
      var $inc45=(($54+1)|0);
      $i17=$inc45;
      __label__ = 9; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 28; break;
    case 14: 
      var $55=$row_info_addr;
      var $color_type48=(($55+8)|0);
      var $56=HEAPU8[($color_type48)];
      var $conv49=(($56)&255);
      var $cmp50=(($conv49)|0)==4;
      if ($cmp50) { __label__ = 15; break; } else { __label__ = 27; break; }
    case 15: 
      var $57=$row_info_addr;
      var $bit_depth53=(($57+9)|0);
      var $58=HEAPU8[($bit_depth53)];
      var $conv54=(($58)&255);
      var $cmp55=(($conv54)|0)==8;
      if ($cmp55) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $59=$row_info_addr;
      var $width62=(($59)|0);
      var $60=HEAP32[(($width62)>>2)];
      $row_width61=$60;
      $i60=0;
      var $61=$row_addr;
      $dp59=$61;
      $sp58=$61;
      __label__ = 17; break;
    case 17: 
      var $62=$i60;
      var $63=$row_width61;
      var $cmp64=(($62)>>>0) < (($63)>>>0);
      if ($cmp64) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $64=$sp58;
      var $incdec_ptr68=(($64+1)|0);
      $sp58=$incdec_ptr68;
      var $65=HEAP8[($64)];
      $save67=$65;
      var $66=$sp58;
      var $incdec_ptr69=(($66+1)|0);
      $sp58=$incdec_ptr69;
      var $67=HEAP8[($66)];
      var $68=$dp59;
      var $incdec_ptr70=(($68+1)|0);
      $dp59=$incdec_ptr70;
      HEAP8[($68)]=$67;
      var $69=$save67;
      var $70=$dp59;
      var $incdec_ptr71=(($70+1)|0);
      $dp59=$incdec_ptr71;
      HEAP8[($70)]=$69;
      __label__ = 19; break;
    case 19: 
      var $71=$i60;
      var $inc73=(($71+1)|0);
      $i60=$inc73;
      __label__ = 17; break;
    case 20: 
      __label__ = 26; break;
    case 21: 
      var $72=$row_info_addr;
      var $width80=(($72)|0);
      var $73=HEAP32[(($width80)>>2)];
      $row_width79=$73;
      $i78=0;
      var $74=$row_addr;
      $dp77=$74;
      $sp76=$74;
      __label__ = 22; break;
    case 22: 
      var $75=$i78;
      var $76=$row_width79;
      var $cmp82=(($75)>>>0) < (($76)>>>0);
      if ($cmp82) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $77=$sp76;
      var $incdec_ptr86=(($77+1)|0);
      $sp76=$incdec_ptr86;
      var $78=HEAP8[($77)];
      var $arrayidx87=(($save85)|0);
      HEAP8[($arrayidx87)]=$78;
      var $79=$sp76;
      var $incdec_ptr88=(($79+1)|0);
      $sp76=$incdec_ptr88;
      var $80=HEAP8[($79)];
      var $arrayidx89=(($save85+1)|0);
      HEAP8[($arrayidx89)]=$80;
      var $81=$sp76;
      var $incdec_ptr90=(($81+1)|0);
      $sp76=$incdec_ptr90;
      var $82=HEAP8[($81)];
      var $83=$dp77;
      var $incdec_ptr91=(($83+1)|0);
      $dp77=$incdec_ptr91;
      HEAP8[($83)]=$82;
      var $84=$sp76;
      var $incdec_ptr92=(($84+1)|0);
      $sp76=$incdec_ptr92;
      var $85=HEAP8[($84)];
      var $86=$dp77;
      var $incdec_ptr93=(($86+1)|0);
      $dp77=$incdec_ptr93;
      HEAP8[($86)]=$85;
      var $arrayidx94=(($save85)|0);
      var $87=HEAP8[($arrayidx94)];
      var $88=$dp77;
      var $incdec_ptr95=(($88+1)|0);
      $dp77=$incdec_ptr95;
      HEAP8[($88)]=$87;
      var $arrayidx96=(($save85+1)|0);
      var $89=HEAP8[($arrayidx96)];
      var $90=$dp77;
      var $incdec_ptr97=(($90+1)|0);
      $dp77=$incdec_ptr97;
      HEAP8[($90)]=$89;
      __label__ = 24; break;
    case 24: 
      var $91=$i78;
      var $inc99=(($91+1)|0);
      $i78=$inc99;
      __label__ = 22; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_write_swap_alpha["X"]=1;

function _png_do_write_invert_alpha($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $sp;
      var $dp;
      var $i;
      var $row_width;
      var $sp11;
      var $dp12;
      var $i13;
      var $row_width14;
      var $sp45;
      var $dp46;
      var $i47;
      var $row_width48;
      var $sp65;
      var $dp66;
      var $i67;
      var $row_width68;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $color_type=(($0+8)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==6;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 14; break; }
    case 2: 
      var $2=$row_info_addr;
      var $bit_depth=(($2+9)|0);
      var $3=HEAPU8[($bit_depth)];
      var $conv2=(($3)&255);
      var $cmp3=(($conv2)|0)==8;
      if ($cmp3) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $4=$row_info_addr;
      var $width=(($4)|0);
      var $5=HEAP32[(($width)>>2)];
      $row_width=$5;
      $i=0;
      var $6=$row_addr;
      $dp=$6;
      $sp=$6;
      __label__ = 4; break;
    case 4: 
      var $7=$i;
      var $8=$row_width;
      var $cmp6=(($7)>>>0) < (($8)>>>0);
      if ($cmp6) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $9=$sp;
      var $add_ptr=(($9+3)|0);
      $sp=$add_ptr;
      var $10=$sp;
      $dp=$10;
      var $11=$sp;
      var $incdec_ptr=(($11+1)|0);
      $sp=$incdec_ptr;
      var $12=HEAPU8[($11)];
      var $conv8=(($12)&255);
      var $sub=((255-$conv8)|0);
      var $conv9=(($sub) & 255);
      var $13=$dp;
      var $incdec_ptr10=(($13+1)|0);
      $dp=$incdec_ptr10;
      HEAP8[($13)]=$conv9;
      __label__ = 6; break;
    case 6: 
      var $14=$i;
      var $inc=(($14+1)|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      __label__ = 13; break;
    case 8: 
      var $15=$row_info_addr;
      var $width15=(($15)|0);
      var $16=HEAP32[(($width15)>>2)];
      $row_width14=$16;
      $i13=0;
      var $17=$row_addr;
      $dp12=$17;
      $sp11=$17;
      __label__ = 9; break;
    case 9: 
      var $18=$i13;
      var $19=$row_width14;
      var $cmp17=(($18)>>>0) < (($19)>>>0);
      if ($cmp17) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $20=$sp11;
      var $add_ptr20=(($20+6)|0);
      $sp11=$add_ptr20;
      var $21=$sp11;
      $dp12=$21;
      var $22=$sp11;
      var $incdec_ptr21=(($22+1)|0);
      $sp11=$incdec_ptr21;
      var $23=HEAPU8[($22)];
      var $conv22=(($23)&255);
      var $sub23=((255-$conv22)|0);
      var $conv24=(($sub23) & 255);
      var $24=$dp12;
      var $incdec_ptr25=(($24+1)|0);
      $dp12=$incdec_ptr25;
      HEAP8[($24)]=$conv24;
      var $25=$sp11;
      var $incdec_ptr26=(($25+1)|0);
      $sp11=$incdec_ptr26;
      var $26=HEAPU8[($25)];
      var $conv27=(($26)&255);
      var $sub28=((255-$conv27)|0);
      var $conv29=(($sub28) & 255);
      var $27=$dp12;
      var $incdec_ptr30=(($27+1)|0);
      $dp12=$incdec_ptr30;
      HEAP8[($27)]=$conv29;
      __label__ = 11; break;
    case 11: 
      var $28=$i13;
      var $inc32=(($28+1)|0);
      $i13=$inc32;
      __label__ = 9; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 28; break;
    case 14: 
      var $29=$row_info_addr;
      var $color_type35=(($29+8)|0);
      var $30=HEAPU8[($color_type35)];
      var $conv36=(($30)&255);
      var $cmp37=(($conv36)|0)==4;
      if ($cmp37) { __label__ = 15; break; } else { __label__ = 27; break; }
    case 15: 
      var $31=$row_info_addr;
      var $bit_depth40=(($31+9)|0);
      var $32=HEAPU8[($bit_depth40)];
      var $conv41=(($32)&255);
      var $cmp42=(($conv41)|0)==8;
      if ($cmp42) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $33=$row_info_addr;
      var $width49=(($33)|0);
      var $34=HEAP32[(($width49)>>2)];
      $row_width48=$34;
      $i47=0;
      var $35=$row_addr;
      $dp46=$35;
      $sp45=$35;
      __label__ = 17; break;
    case 17: 
      var $36=$i47;
      var $37=$row_width48;
      var $cmp51=(($36)>>>0) < (($37)>>>0);
      if ($cmp51) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $38=$sp45;
      var $incdec_ptr54=(($38+1)|0);
      $sp45=$incdec_ptr54;
      var $39=HEAP8[($38)];
      var $40=$dp46;
      var $incdec_ptr55=(($40+1)|0);
      $dp46=$incdec_ptr55;
      HEAP8[($40)]=$39;
      var $41=$sp45;
      var $incdec_ptr56=(($41+1)|0);
      $sp45=$incdec_ptr56;
      var $42=HEAPU8[($41)];
      var $conv57=(($42)&255);
      var $sub58=((255-$conv57)|0);
      var $conv59=(($sub58) & 255);
      var $43=$dp46;
      var $incdec_ptr60=(($43+1)|0);
      $dp46=$incdec_ptr60;
      HEAP8[($43)]=$conv59;
      __label__ = 19; break;
    case 19: 
      var $44=$i47;
      var $inc62=(($44+1)|0);
      $i47=$inc62;
      __label__ = 17; break;
    case 20: 
      __label__ = 26; break;
    case 21: 
      var $45=$row_info_addr;
      var $width69=(($45)|0);
      var $46=HEAP32[(($width69)>>2)];
      $row_width68=$46;
      $i67=0;
      var $47=$row_addr;
      $dp66=$47;
      $sp65=$47;
      __label__ = 22; break;
    case 22: 
      var $48=$i67;
      var $49=$row_width68;
      var $cmp71=(($48)>>>0) < (($49)>>>0);
      if ($cmp71) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $50=$sp65;
      var $add_ptr74=(($50+2)|0);
      $sp65=$add_ptr74;
      var $51=$sp65;
      $dp66=$51;
      var $52=$sp65;
      var $incdec_ptr75=(($52+1)|0);
      $sp65=$incdec_ptr75;
      var $53=HEAPU8[($52)];
      var $conv76=(($53)&255);
      var $sub77=((255-$conv76)|0);
      var $conv78=(($sub77) & 255);
      var $54=$dp66;
      var $incdec_ptr79=(($54+1)|0);
      $dp66=$incdec_ptr79;
      HEAP8[($54)]=$conv78;
      var $55=$sp65;
      var $incdec_ptr80=(($55+1)|0);
      $sp65=$incdec_ptr80;
      var $56=HEAPU8[($55)];
      var $conv81=(($56)&255);
      var $sub82=((255-$conv81)|0);
      var $conv83=(($sub82) & 255);
      var $57=$dp66;
      var $incdec_ptr84=(($57+1)|0);
      $dp66=$incdec_ptr84;
      HEAP8[($57)]=$conv83;
      __label__ = 24; break;
    case 24: 
      var $58=$i67;
      var $inc86=(($58+1)|0);
      $i67=$inc86;
      __label__ = 22; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_write_invert_alpha["X"]=1;

function _png_do_write_intrapixel($row_info, $row) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $bytes_per_pixel;
      var $row_width;
      var $rp;
      var $i;
      var $rp37;
      var $i38;
      var $s0;
      var $s1;
      var $s2;
      var $red;
      var $blue;
      $row_info_addr=$row_info;
      $row_addr=$row;
      var $0=$row_info_addr;
      var $color_type=(($0+8)|0);
      var $1=HEAPU8[($color_type)];
      var $conv=(($1)&255);
      var $and=$conv & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 28; break; }
    case 2: 
      var $2=$row_info_addr;
      var $width=(($2)|0);
      var $3=HEAP32[(($width)>>2)];
      $row_width=$3;
      var $4=$row_info_addr;
      var $bit_depth=(($4+9)|0);
      var $5=HEAPU8[($bit_depth)];
      var $conv1=(($5)&255);
      var $cmp=(($conv1)|0)==8;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 14; break; }
    case 3: 
      var $6=$row_info_addr;
      var $color_type4=(($6+8)|0);
      var $7=HEAPU8[($color_type4)];
      var $conv5=(($7)&255);
      var $cmp6=(($conv5)|0)==2;
      if ($cmp6) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $bytes_per_pixel=3;
      __label__ = 9; break;
    case 5: 
      var $8=$row_info_addr;
      var $color_type9=(($8+8)|0);
      var $9=HEAPU8[($color_type9)];
      var $conv10=(($9)&255);
      var $cmp11=(($conv10)|0)==6;
      if ($cmp11) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $bytes_per_pixel=4;
      __label__ = 8; break;
    case 7: 
      __label__ = 28; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      $i=0;
      var $10=$row_addr;
      $rp=$10;
      __label__ = 10; break;
    case 10: 
      var $11=$i;
      var $12=$row_width;
      var $cmp16=(($11)>>>0) < (($12)>>>0);
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $13=$rp;
      var $14=HEAPU8[($13)];
      var $conv18=(($14)&255);
      var $15=$rp;
      var $add_ptr=(($15+1)|0);
      var $16=HEAPU8[($add_ptr)];
      var $conv19=(($16)&255);
      var $sub=(($conv18-$conv19)|0);
      var $and20=$sub & 255;
      var $conv21=(($and20) & 255);
      var $17=$rp;
      HEAP8[($17)]=$conv21;
      var $18=$rp;
      var $add_ptr22=(($18+2)|0);
      var $19=HEAPU8[($add_ptr22)];
      var $conv23=(($19)&255);
      var $20=$rp;
      var $add_ptr24=(($20+1)|0);
      var $21=HEAPU8[($add_ptr24)];
      var $conv25=(($21)&255);
      var $sub26=(($conv23-$conv25)|0);
      var $and27=$sub26 & 255;
      var $conv28=(($and27) & 255);
      var $22=$rp;
      var $add_ptr29=(($22+2)|0);
      HEAP8[($add_ptr29)]=$conv28;
      __label__ = 12; break;
    case 12: 
      var $23=$i;
      var $inc=(($23+1)|0);
      $i=$inc;
      var $24=$bytes_per_pixel;
      var $25=$rp;
      var $add_ptr30=(($25+$24)|0);
      $rp=$add_ptr30;
      __label__ = 10; break;
    case 13: 
      __label__ = 27; break;
    case 14: 
      var $26=$row_info_addr;
      var $bit_depth32=(($26+9)|0);
      var $27=HEAPU8[($bit_depth32)];
      var $conv33=(($27)&255);
      var $cmp34=(($conv33)|0)==16;
      if ($cmp34) { __label__ = 15; break; } else { __label__ = 26; break; }
    case 15: 
      var $28=$row_info_addr;
      var $color_type39=(($28+8)|0);
      var $29=HEAPU8[($color_type39)];
      var $conv40=(($29)&255);
      var $cmp41=(($conv40)|0)==2;
      if ($cmp41) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $bytes_per_pixel=6;
      __label__ = 21; break;
    case 17: 
      var $30=$row_info_addr;
      var $color_type45=(($30+8)|0);
      var $31=HEAPU8[($color_type45)];
      var $conv46=(($31)&255);
      var $cmp47=(($conv46)|0)==6;
      if ($cmp47) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $bytes_per_pixel=8;
      __label__ = 20; break;
    case 19: 
      __label__ = 28; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      $i38=0;
      var $32=$row_addr;
      $rp37=$32;
      __label__ = 22; break;
    case 22: 
      var $33=$i38;
      var $34=$row_width;
      var $cmp54=(($33)>>>0) < (($34)>>>0);
      if ($cmp54) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $35=$rp37;
      var $36=HEAPU8[($35)];
      var $conv57=(($36)&255);
      var $shl=$conv57 << 8;
      var $37=$rp37;
      var $add_ptr58=(($37+1)|0);
      var $38=HEAPU8[($add_ptr58)];
      var $conv59=(($38)&255);
      var $or=$shl | $conv59;
      $s0=$or;
      var $39=$rp37;
      var $add_ptr60=(($39+2)|0);
      var $40=HEAPU8[($add_ptr60)];
      var $conv61=(($40)&255);
      var $shl62=$conv61 << 8;
      var $41=$rp37;
      var $add_ptr63=(($41+3)|0);
      var $42=HEAPU8[($add_ptr63)];
      var $conv64=(($42)&255);
      var $or65=$shl62 | $conv64;
      $s1=$or65;
      var $43=$rp37;
      var $add_ptr66=(($43+4)|0);
      var $44=HEAPU8[($add_ptr66)];
      var $conv67=(($44)&255);
      var $shl68=$conv67 << 8;
      var $45=$rp37;
      var $add_ptr69=(($45+5)|0);
      var $46=HEAPU8[($add_ptr69)];
      var $conv70=(($46)&255);
      var $or71=$shl68 | $conv70;
      $s2=$or71;
      var $47=$s0;
      var $48=$s1;
      var $sub72=(($47-$48)|0);
      var $and73=$sub72 & 65535;
      $red=$and73;
      var $49=$s2;
      var $50=$s1;
      var $sub74=(($49-$50)|0);
      var $and75=$sub74 & 65535;
      $blue=$and75;
      var $51=$red;
      var $shr=$51 >>> 8;
      var $and76=$shr & 255;
      var $conv77=(($and76) & 255);
      var $52=$rp37;
      HEAP8[($52)]=$conv77;
      var $53=$red;
      var $and78=$53 & 255;
      var $conv79=(($and78) & 255);
      var $54=$rp37;
      var $add_ptr80=(($54+1)|0);
      HEAP8[($add_ptr80)]=$conv79;
      var $55=$blue;
      var $shr81=$55 >>> 8;
      var $and82=$shr81 & 255;
      var $conv83=(($and82) & 255);
      var $56=$rp37;
      var $add_ptr84=(($56+4)|0);
      HEAP8[($add_ptr84)]=$conv83;
      var $57=$blue;
      var $and85=$57 & 255;
      var $conv86=(($and85) & 255);
      var $58=$rp37;
      var $add_ptr87=(($58+5)|0);
      HEAP8[($add_ptr87)]=$conv86;
      __label__ = 24; break;
    case 24: 
      var $59=$i38;
      var $inc89=(($59+1)|0);
      $i38=$inc89;
      var $60=$bytes_per_pixel;
      var $61=$rp37;
      var $add_ptr90=(($61+$60)|0);
      $rp37=$add_ptr90;
      __label__ = 22; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_write_intrapixel["X"]=1;

function _png_save_uint_32($buf, $i) {
  ;
  var __label__;

  var $buf_addr;
  var $i_addr;
  $buf_addr=$buf;
  $i_addr=$i;
  var $0=$i_addr;
  var $shr=$0 >>> 24;
  var $and=$shr & 255;
  var $conv=(($and) & 255);
  var $1=$buf_addr;
  var $arrayidx=(($1)|0);
  HEAP8[($arrayidx)]=$conv;
  var $2=$i_addr;
  var $shr1=$2 >>> 16;
  var $and2=$shr1 & 255;
  var $conv3=(($and2) & 255);
  var $3=$buf_addr;
  var $arrayidx4=(($3+1)|0);
  HEAP8[($arrayidx4)]=$conv3;
  var $4=$i_addr;
  var $shr5=$4 >>> 8;
  var $and6=$shr5 & 255;
  var $conv7=(($and6) & 255);
  var $5=$buf_addr;
  var $arrayidx8=(($5+2)|0);
  HEAP8[($arrayidx8)]=$conv7;
  var $6=$i_addr;
  var $and9=$6 & 255;
  var $conv10=(($and9) & 255);
  var $7=$buf_addr;
  var $arrayidx11=(($7+3)|0);
  HEAP8[($arrayidx11)]=$conv10;
  ;
  return;
}


function _png_save_int_32($buf, $i) {
  ;
  var __label__;

  var $buf_addr;
  var $i_addr;
  $buf_addr=$buf;
  $i_addr=$i;
  var $0=$i_addr;
  var $shr=$0 >> 24;
  var $and=$shr & 255;
  var $conv=(($and) & 255);
  var $1=$buf_addr;
  var $arrayidx=(($1)|0);
  HEAP8[($arrayidx)]=$conv;
  var $2=$i_addr;
  var $shr1=$2 >> 16;
  var $and2=$shr1 & 255;
  var $conv3=(($and2) & 255);
  var $3=$buf_addr;
  var $arrayidx4=(($3+1)|0);
  HEAP8[($arrayidx4)]=$conv3;
  var $4=$i_addr;
  var $shr5=$4 >> 8;
  var $and6=$shr5 & 255;
  var $conv7=(($and6) & 255);
  var $5=$buf_addr;
  var $arrayidx8=(($5+2)|0);
  HEAP8[($arrayidx8)]=$conv7;
  var $6=$i_addr;
  var $and9=$6 & 255;
  var $conv10=(($and9) & 255);
  var $7=$buf_addr;
  var $arrayidx11=(($7+3)|0);
  HEAP8[($arrayidx11)]=$conv10;
  ;
  return;
}


function _png_save_uint_16($buf, $i) {
  ;
  var __label__;

  var $buf_addr;
  var $i_addr;
  $buf_addr=$buf;
  $i_addr=$i;
  var $0=$i_addr;
  var $shr=$0 >>> 8;
  var $and=$shr & 255;
  var $conv=(($and) & 255);
  var $1=$buf_addr;
  var $arrayidx=(($1)|0);
  HEAP8[($arrayidx)]=$conv;
  var $2=$i_addr;
  var $and1=$2 & 255;
  var $conv2=(($and1) & 255);
  var $3=$buf_addr;
  var $arrayidx3=(($3+1)|0);
  HEAP8[($arrayidx3)]=$conv2;
  ;
  return;
}


function _png_write_sig($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $png_signature=__stackBase__;
      $png_ptr_addr=$png_ptr;
      var $0=$png_signature;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP8[($0)]=HEAP8[(((STRING_TABLE._png_write_sig_png_signature)|0))];HEAP8[($0+1)]=HEAP8[(((STRING_TABLE._png_write_sig_png_signature)|0)+1)];HEAP8[($0+2)]=HEAP8[(((STRING_TABLE._png_write_sig_png_signature)|0)+2)];HEAP8[($0+3)]=HEAP8[(((STRING_TABLE._png_write_sig_png_signature)|0)+3)];HEAP8[($0+4)]=HEAP8[(((STRING_TABLE._png_write_sig_png_signature)|0)+4)];HEAP8[($0+5)]=HEAP8[(((STRING_TABLE._png_write_sig_png_signature)|0)+5)];HEAP8[($0+6)]=HEAP8[(((STRING_TABLE._png_write_sig_png_signature)|0)+6)];HEAP8[($0+7)]=HEAP8[(((STRING_TABLE._png_write_sig_png_signature)|0)+7)];
      var $1=$png_ptr_addr;
      var $io_state=(($1+660)|0);
      HEAP32[(($io_state)>>2)]=18;
      var $2=$png_ptr_addr;
      var $3=$png_ptr_addr;
      var $sig_bytes=(($3+297)|0);
      var $4=HEAPU8[($sig_bytes)];
      var $idxprom=(($4)&255);
      var $arrayidx=(($png_signature+$idxprom)|0);
      var $5=$png_ptr_addr;
      var $sig_bytes1=(($5+297)|0);
      var $6=HEAPU8[($sig_bytes1)];
      var $conv=(($6)&255);
      var $sub=((8-$conv)|0);
      _png_write_data($2, $arrayidx, $sub);
      var $7=$png_ptr_addr;
      var $sig_bytes2=(($7+297)|0);
      var $8=HEAPU8[($sig_bytes2)];
      var $conv3=(($8)&255);
      var $cmp=(($conv3)|0) < 3;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $9=$png_ptr_addr;
      var $mode=(($9+84)|0);
      var $10=HEAP32[(($mode)>>2)];
      var $or=$10 | 4096;
      HEAP32[(($mode)>>2)]=$or;
      __label__ = 3; break;
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_chunk_header($png_ptr, $chunk_name, $length) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $chunk_name_addr;
      var $length_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $chunk_name_addr=$chunk_name;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $io_state=(($1+660)|0);
      HEAP32[(($io_state)>>2)]=34;
      var $arraydecay=(($buf)|0);
      var $2=$length_addr;
      _png_save_uint_32($arraydecay, $2);
      var $arraydecay1=(($buf)|0);
      var $add_ptr=(($arraydecay1+4)|0);
      var $3=$chunk_name_addr;
      _png_save_uint_32($add_ptr, $3);
      var $4=$png_ptr_addr;
      var $arraydecay2=(($buf)|0);
      _png_write_data($4, $arraydecay2, 8);
      var $5=$chunk_name_addr;
      var $6=$png_ptr_addr;
      var $chunk_name3=(($6+232)|0);
      HEAP32[(($chunk_name3)>>2)]=$5;
      var $7=$png_ptr_addr;
      _png_reset_crc($7);
      var $8=$png_ptr_addr;
      var $arraydecay4=(($buf)|0);
      var $add_ptr5=(($arraydecay4+4)|0);
      _png_calculate_crc($8, $add_ptr5, 4);
      var $9=$png_ptr_addr;
      var $io_state6=(($9+660)|0);
      HEAP32[(($io_state6)>>2)]=66;
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_chunk_data($png_ptr, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $data_addr;
      var $length_addr;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $1=$data_addr;
      var $cmp1=(($1)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $2=$length_addr;
      var $cmp2=(($2)>>>0) > 0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $3=$png_ptr_addr;
      var $4=$data_addr;
      var $5=$length_addr;
      _png_write_data($3, $4, $5);
      var $6=$png_ptr_addr;
      var $7=$data_addr;
      var $8=$length_addr;
      _png_calculate_crc($6, $7, $8);
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_chunk_end($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 4; break;
    case 3: 
      var $1=$png_ptr_addr;
      var $io_state=(($1+660)|0);
      HEAP32[(($io_state)>>2)]=130;
      var $arraydecay=(($buf)|0);
      var $2=$png_ptr_addr;
      var $crc=(($2+268)|0);
      var $3=HEAP32[(($crc)>>2)];
      _png_save_uint_32($arraydecay, $3);
      var $4=$png_ptr_addr;
      var $arraydecay1=(($buf)|0);
      _png_write_data($4, $arraydecay1, 4);
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_chunk($png_ptr, $chunk_string, $data, $length) {
  ;
  var __label__;

  var $png_ptr_addr;
  var $chunk_string_addr;
  var $data_addr;
  var $length_addr;
  $png_ptr_addr=$png_ptr;
  $chunk_string_addr=$chunk_string;
  $data_addr=$data;
  $length_addr=$length;
  var $0=$png_ptr_addr;
  var $1=$chunk_string_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPU8[($arrayidx)];
  var $conv=(($2)&255);
  var $and=255 & $conv;
  var $shl=$and << 24;
  var $3=$chunk_string_addr;
  var $arrayidx1=(($3+1)|0);
  var $4=HEAPU8[($arrayidx1)];
  var $conv2=(($4)&255);
  var $and3=255 & $conv2;
  var $shl4=$and3 << 16;
  var $or=$shl | $shl4;
  var $5=$chunk_string_addr;
  var $arrayidx5=(($5+2)|0);
  var $6=HEAPU8[($arrayidx5)];
  var $conv6=(($6)&255);
  var $and7=255 & $conv6;
  var $shl8=$and7 << 8;
  var $or9=$or | $shl8;
  var $7=$chunk_string_addr;
  var $arrayidx10=(($7+3)|0);
  var $8=HEAPU8[($arrayidx10)];
  var $conv11=(($8)&255);
  var $and12=255 & $conv11;
  var $shl13=$and12 << 0;
  var $or14=$or9 | $shl13;
  var $9=$data_addr;
  var $10=$length_addr;
  _png_write_complete_chunk($0, $or14, $9, $10);
  ;
  return;
}


function _png_write_complete_chunk($png_ptr, $chunk_name, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $chunk_name_addr;
      var $data_addr;
      var $length_addr;
      $png_ptr_addr=$png_ptr;
      $chunk_name_addr=$chunk_name;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      var $1=$length_addr;
      var $cmp1=(($1)>>>0) > 4294967295;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $2=$png_ptr_addr;
      _png_error($2, ((STRING_TABLE.__str621195)|0));
      __label__ = 5; break;
    case 5: 
      var $3=$png_ptr_addr;
      var $4=$chunk_name_addr;
      var $5=$length_addr;
      _png_write_chunk_header($3, $4, $5);
      var $6=$png_ptr_addr;
      var $7=$data_addr;
      var $8=$length_addr;
      _png_write_chunk_data($6, $7, $8);
      var $9=$png_ptr_addr;
      _png_write_chunk_end($9);
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_IHDR($png_ptr, $width, $height, $bit_depth, $color_type, $compression_type, $filter_type, $interlace_type) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $width_addr;
      var $height_addr;
      var $bit_depth_addr;
      var $color_type_addr;
      var $compression_type_addr;
      var $filter_type_addr;
      var $interlace_type_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $width_addr=$width;
      $height_addr=$height;
      $bit_depth_addr=$bit_depth;
      $color_type_addr=$color_type;
      $compression_type_addr=$compression_type;
      $filter_type_addr=$filter_type;
      $interlace_type_addr=$interlace_type;
      var $0=$color_type_addr;
      if ((($0)|0) == 0) {
        __label__ = 2; break;
      }
      else if ((($0)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($0)|0) == 3) {
        __label__ = 10; break;
      }
      else if ((($0)|0) == 4) {
        __label__ = 14; break;
      }
      else if ((($0)|0) == 6) {
        __label__ = 18; break;
      }
      else {
      __label__ = 22; break;
      }
      
    case 2: 
      var $1=$bit_depth_addr;
      if ((($1)|0) == 1 || (($1)|0) == 2 || (($1)|0) == 4 || (($1)|0) == 8 || (($1)|0) == 16) {
        __label__ = 3; break;
      }
      else {
      __label__ = 4; break;
      }
      
    case 3: 
      var $2=$png_ptr_addr;
      var $channels=(($2+295)|0);
      HEAP8[($channels)]=1;
      __label__ = 5; break;
    case 4: 
      var $3=$png_ptr_addr;
      _png_error($3, ((STRING_TABLE.__str1133)|0));
      __label__ = 5; break;
    case 5: 
      __label__ = 23; break;
    case 6: 
      var $4=$bit_depth_addr;
      var $cmp=(($4)|0)!=8;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $5=$bit_depth_addr;
      var $cmp3=(($5)|0)!=16;
      if ($cmp3) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $6=$png_ptr_addr;
      _png_error($6, ((STRING_TABLE.__str11134)|0));
      __label__ = 9; break;
    case 9: 
      var $7=$png_ptr_addr;
      var $channels4=(($7+295)|0);
      HEAP8[($channels4)]=3;
      __label__ = 23; break;
    case 10: 
      var $8=$bit_depth_addr;
      if ((($8)|0) == 1 || (($8)|0) == 2 || (($8)|0) == 4 || (($8)|0) == 8) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 11: 
      var $9=$png_ptr_addr;
      var $channels7=(($9+295)|0);
      HEAP8[($channels7)]=1;
      __label__ = 13; break;
    case 12: 
      var $10=$png_ptr_addr;
      _png_error($10, ((STRING_TABLE.__str21135)|0));
      __label__ = 13; break;
    case 13: 
      __label__ = 23; break;
    case 14: 
      var $11=$bit_depth_addr;
      var $cmp11=(($11)|0)!=8;
      if ($cmp11) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $12=$bit_depth_addr;
      var $cmp13=(($12)|0)!=16;
      if ($cmp13) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $13=$png_ptr_addr;
      _png_error($13, ((STRING_TABLE.__str31136)|0));
      __label__ = 17; break;
    case 17: 
      var $14=$png_ptr_addr;
      var $channels16=(($14+295)|0);
      HEAP8[($channels16)]=2;
      __label__ = 23; break;
    case 18: 
      var $15=$bit_depth_addr;
      var $cmp18=(($15)|0)!=8;
      if ($cmp18) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $16=$bit_depth_addr;
      var $cmp20=(($16)|0)!=16;
      if ($cmp20) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $17=$png_ptr_addr;
      _png_error($17, ((STRING_TABLE.__str41137)|0));
      __label__ = 21; break;
    case 21: 
      var $18=$png_ptr_addr;
      var $channels23=(($18+295)|0);
      HEAP8[($channels23)]=4;
      __label__ = 23; break;
    case 22: 
      var $19=$png_ptr_addr;
      _png_error($19, ((STRING_TABLE.__str51138)|0));
      __label__ = 23; break;
    case 23: 
      var $20=$compression_type_addr;
      var $cmp26=(($20)|0)!=0;
      if ($cmp26) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $21=$png_ptr_addr;
      _png_warning($21, ((STRING_TABLE.__str61139)|0));
      $compression_type_addr=0;
      __label__ = 25; break;
    case 25: 
      var $22=$png_ptr_addr;
      var $mng_features_permitted=(($22+576)|0);
      var $23=HEAP32[(($mng_features_permitted)>>2)];
      var $and=$23 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 26: 
      var $24=$png_ptr_addr;
      var $mode=(($24+84)|0);
      var $25=HEAP32[(($mode)>>2)];
      var $and30=$25 & 4096;
      var $cmp31=(($and30)|0)==0;
      if ($cmp31) { __label__ = 27; break; } else { __label__ = 30; break; }
    case 27: 
      var $26=$color_type_addr;
      var $cmp33=(($26)|0)==2;
      if ($cmp33) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: 
      var $27=$color_type_addr;
      var $cmp34=(($27)|0)==6;
      if ($cmp34) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $28=$filter_type_addr;
      var $cmp36=(($28)|0)==64;
      if ($cmp36) { __label__ = 32; break; } else { __label__ = 30; break; }
    case 30: 
      var $29=$filter_type_addr;
      var $cmp38=(($29)|0)!=0;
      if ($cmp38) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $30=$png_ptr_addr;
      _png_warning($30, ((STRING_TABLE.__str71140)|0));
      $filter_type_addr=0;
      __label__ = 32; break;
    case 32: 
      var $31=$interlace_type_addr;
      var $cmp41=(($31)|0)!=0;
      if ($cmp41) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: 
      var $32=$interlace_type_addr;
      var $cmp43=(($32)|0)!=1;
      if ($cmp43) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $33=$png_ptr_addr;
      _png_warning($33, ((STRING_TABLE.__str81141)|0));
      $interlace_type_addr=1;
      __label__ = 35; break;
    case 35: 
      var $34=$bit_depth_addr;
      var $conv=(($34) & 255);
      var $35=$png_ptr_addr;
      var $bit_depth46=(($35+292)|0);
      HEAP8[($bit_depth46)]=$conv;
      var $36=$color_type_addr;
      var $conv47=(($36) & 255);
      var $37=$png_ptr_addr;
      var $color_type48=(($37+291)|0);
      HEAP8[($color_type48)]=$conv47;
      var $38=$interlace_type_addr;
      var $conv49=(($38) & 255);
      var $39=$png_ptr_addr;
      var $interlaced=(($39+288)|0);
      HEAP8[($interlaced)]=$conv49;
      var $40=$filter_type_addr;
      var $conv50=(($40) & 255);
      var $41=$png_ptr_addr;
      var $filter_type51=(($41+580)|0);
      HEAP8[($filter_type51)]=$conv50;
      var $42=$compression_type_addr;
      var $conv52=(($42) & 255);
      var $43=$png_ptr_addr;
      var $compression_type53=(($43+612)|0);
      HEAP8[($compression_type53)]=$conv52;
      var $44=$width_addr;
      var $45=$png_ptr_addr;
      var $width54=(($45+204)|0);
      HEAP32[(($width54)>>2)]=$44;
      var $46=$height_addr;
      var $47=$png_ptr_addr;
      var $height55=(($47+208)|0);
      HEAP32[(($height55)>>2)]=$46;
      var $48=$bit_depth_addr;
      var $49=$png_ptr_addr;
      var $channels56=(($49+295)|0);
      var $50=HEAPU8[($channels56)];
      var $conv57=(($50)&255);
      var $mul=(($48*$conv57)|0);
      var $conv58=(($mul) & 255);
      var $51=$png_ptr_addr;
      var $pixel_depth=(($51+294)|0);
      HEAP8[($pixel_depth)]=$conv58;
      var $52=$png_ptr_addr;
      var $pixel_depth59=(($52+294)|0);
      var $53=HEAPU8[($pixel_depth59)];
      var $conv60=(($53)&255);
      var $cmp61=(($conv60)|0) >= 8;
      if ($cmp61) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $54=$width_addr;
      var $55=$png_ptr_addr;
      var $pixel_depth63=(($55+294)|0);
      var $56=HEAPU8[($pixel_depth63)];
      var $conv64=(($56)&255);
      var $shr=$conv64 >>> 3;
      var $mul65=(($54*$shr)|0);
      var $cond = $mul65;__label__ = 38; break;
    case 37: 
      var $57=$width_addr;
      var $58=$png_ptr_addr;
      var $pixel_depth66=(($58+294)|0);
      var $59=HEAPU8[($pixel_depth66)];
      var $conv67=(($59)&255);
      var $mul68=(($57*$conv67)|0);
      var $add=(($mul68+7)|0);
      var $shr69=$add >>> 3;
      var $cond = $shr69;__label__ = 38; break;
    case 38: 
      var $cond;
      var $60=$png_ptr_addr;
      var $rowbytes=(($60+220)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      var $61=$png_ptr_addr;
      var $width70=(($61+204)|0);
      var $62=HEAP32[(($width70)>>2)];
      var $63=$png_ptr_addr;
      var $usr_width=(($63+216)|0);
      HEAP32[(($usr_width)>>2)]=$62;
      var $64=$png_ptr_addr;
      var $bit_depth71=(($64+292)|0);
      var $65=HEAP8[($bit_depth71)];
      var $66=$png_ptr_addr;
      var $usr_bit_depth=(($66+293)|0);
      HEAP8[($usr_bit_depth)]=$65;
      var $67=$png_ptr_addr;
      var $channels72=(($67+295)|0);
      var $68=HEAP8[($channels72)];
      var $69=$png_ptr_addr;
      var $usr_channels=(($69+296)|0);
      HEAP8[($usr_channels)]=$68;
      var $arraydecay=(($buf)|0);
      var $70=$width_addr;
      _png_save_uint_32($arraydecay, $70);
      var $arraydecay73=(($buf)|0);
      var $add_ptr=(($arraydecay73+4)|0);
      var $71=$height_addr;
      _png_save_uint_32($add_ptr, $71);
      var $72=$bit_depth_addr;
      var $conv74=(($72) & 255);
      var $arrayidx=(($buf+8)|0);
      HEAP8[($arrayidx)]=$conv74;
      var $73=$color_type_addr;
      var $conv75=(($73) & 255);
      var $arrayidx76=(($buf+9)|0);
      HEAP8[($arrayidx76)]=$conv75;
      var $74=$compression_type_addr;
      var $conv77=(($74) & 255);
      var $arrayidx78=(($buf+10)|0);
      HEAP8[($arrayidx78)]=$conv77;
      var $75=$filter_type_addr;
      var $conv79=(($75) & 255);
      var $arrayidx80=(($buf+11)|0);
      HEAP8[($arrayidx80)]=$conv79;
      var $76=$interlace_type_addr;
      var $conv81=(($76) & 255);
      var $arrayidx82=(($buf+12)|0);
      HEAP8[($arrayidx82)]=$conv81;
      var $77=$png_ptr_addr;
      var $arraydecay83=(($buf)|0);
      _png_write_complete_chunk($77, 1229472850, $arraydecay83, 13);
      var $78=$png_ptr_addr;
      var $zstream=(($78+96)|0);
      var $zalloc=(($zstream+32)|0);
      HEAP32[(($zalloc)>>2)]=8;
      var $79=$png_ptr_addr;
      var $zstream84=(($79+96)|0);
      var $zfree=(($zstream84+36)|0);
      HEAP32[(($zfree)>>2)]=10;
      var $80=$png_ptr_addr;
      var $81=$80;
      var $82=$png_ptr_addr;
      var $zstream85=(($82+96)|0);
      var $opaque=(($zstream85+40)|0);
      HEAP32[(($opaque)>>2)]=$81;
      var $83=$png_ptr_addr;
      var $do_filter=(($83+290)|0);
      var $84=HEAP8[($do_filter)];
      var $tobool86=(($84 << 24) >> 24)!=0;
      if ($tobool86) { __label__ = 44; break; } else { __label__ = 39; break; }
    case 39: 
      var $85=$png_ptr_addr;
      var $color_type88=(($85+291)|0);
      var $86=HEAPU8[($color_type88)];
      var $conv89=(($86)&255);
      var $cmp90=(($conv89)|0)==3;
      if ($cmp90) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: 
      var $87=$png_ptr_addr;
      var $bit_depth93=(($87+292)|0);
      var $88=HEAPU8[($bit_depth93)];
      var $conv94=(($88)&255);
      var $cmp95=(($conv94)|0) < 8;
      if ($cmp95) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $89=$png_ptr_addr;
      var $do_filter98=(($89+290)|0);
      HEAP8[($do_filter98)]=8;
      __label__ = 43; break;
    case 42: 
      var $90=$png_ptr_addr;
      var $do_filter99=(($90+290)|0);
      HEAP8[($do_filter99)]=-8;
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $91=$png_ptr_addr;
      var $flags=(($91+88)|0);
      var $92=HEAP32[(($flags)>>2)];
      var $and102=$92 & 1;
      var $tobool103=(($and102)|0)!=0;
      if ($tobool103) { __label__ = 49; break; } else { __label__ = 45; break; }
    case 45: 
      var $93=$png_ptr_addr;
      var $do_filter105=(($93+290)|0);
      var $94=HEAPU8[($do_filter105)];
      var $conv106=(($94)&255);
      var $cmp107=(($conv106)|0)!=8;
      if ($cmp107) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $95=$png_ptr_addr;
      var $zlib_strategy=(($95+180)|0);
      HEAP32[(($zlib_strategy)>>2)]=1;
      __label__ = 48; break;
    case 47: 
      var $96=$png_ptr_addr;
      var $zlib_strategy111=(($96+180)|0);
      HEAP32[(($zlib_strategy111)>>2)]=0;
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $97=$png_ptr_addr;
      var $flags114=(($97+88)|0);
      var $98=HEAP32[(($flags114)>>2)];
      var $and115=$98 & 2;
      var $tobool116=(($and115)|0)!=0;
      if ($tobool116) { __label__ = 51; break; } else { __label__ = 50; break; }
    case 50: 
      var $99=$png_ptr_addr;
      var $zlib_level=(($99+164)|0);
      HEAP32[(($zlib_level)>>2)]=-1;
      __label__ = 51; break;
    case 51: 
      var $100=$png_ptr_addr;
      var $flags119=(($100+88)|0);
      var $101=HEAP32[(($flags119)>>2)];
      var $and120=$101 & 4;
      var $tobool121=(($and120)|0)!=0;
      if ($tobool121) { __label__ = 53; break; } else { __label__ = 52; break; }
    case 52: 
      var $102=$png_ptr_addr;
      var $zlib_mem_level=(($102+176)|0);
      HEAP32[(($zlib_mem_level)>>2)]=8;
      __label__ = 53; break;
    case 53: 
      var $103=$png_ptr_addr;
      var $flags124=(($103+88)|0);
      var $104=HEAP32[(($flags124)>>2)];
      var $and125=$104 & 8;
      var $tobool126=(($and125)|0)!=0;
      if ($tobool126) { __label__ = 55; break; } else { __label__ = 54; break; }
    case 54: 
      var $105=$png_ptr_addr;
      var $zlib_window_bits=(($105+172)|0);
      HEAP32[(($zlib_window_bits)>>2)]=15;
      __label__ = 55; break;
    case 55: 
      var $106=$png_ptr_addr;
      var $flags129=(($106+88)|0);
      var $107=HEAP32[(($flags129)>>2)];
      var $and130=$107 & 16;
      var $tobool131=(($and130)|0)!=0;
      if ($tobool131) { __label__ = 57; break; } else { __label__ = 56; break; }
    case 56: 
      var $108=$png_ptr_addr;
      var $zlib_method=(($108+168)|0);
      HEAP32[(($zlib_method)>>2)]=8;
      __label__ = 57; break;
    case 57: 
      var $109=$png_ptr_addr;
      var $flags134=(($109+88)|0);
      var $110=HEAP32[(($flags134)>>2)];
      var $and135=$110 & 16777216;
      var $tobool136=(($and135)|0)!=0;
      if ($tobool136) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $111=$png_ptr_addr;
      var $zlib_text_strategy=(($111+200)|0);
      HEAP32[(($zlib_text_strategy)>>2)]=0;
      __label__ = 59; break;
    case 59: 
      var $112=$png_ptr_addr;
      var $flags139=(($112+88)|0);
      var $113=HEAP32[(($flags139)>>2)];
      var $and140=$113 & 33554432;
      var $tobool141=(($and140)|0)!=0;
      if ($tobool141) { __label__ = 61; break; } else { __label__ = 60; break; }
    case 60: 
      var $114=$png_ptr_addr;
      var $zlib_level143=(($114+164)|0);
      var $115=HEAP32[(($zlib_level143)>>2)];
      var $116=$png_ptr_addr;
      var $zlib_text_level=(($116+184)|0);
      HEAP32[(($zlib_text_level)>>2)]=$115;
      __label__ = 61; break;
    case 61: 
      var $117=$png_ptr_addr;
      var $flags145=(($117+88)|0);
      var $118=HEAP32[(($flags145)>>2)];
      var $and146=$118 & 67108864;
      var $tobool147=(($and146)|0)!=0;
      if ($tobool147) { __label__ = 63; break; } else { __label__ = 62; break; }
    case 62: 
      var $119=$png_ptr_addr;
      var $zlib_mem_level149=(($119+176)|0);
      var $120=HEAP32[(($zlib_mem_level149)>>2)];
      var $121=$png_ptr_addr;
      var $zlib_text_mem_level=(($121+196)|0);
      HEAP32[(($zlib_text_mem_level)>>2)]=$120;
      __label__ = 63; break;
    case 63: 
      var $122=$png_ptr_addr;
      var $flags151=(($122+88)|0);
      var $123=HEAP32[(($flags151)>>2)];
      var $and152=$123 & 134217728;
      var $tobool153=(($and152)|0)!=0;
      if ($tobool153) { __label__ = 65; break; } else { __label__ = 64; break; }
    case 64: 
      var $124=$png_ptr_addr;
      var $zlib_window_bits155=(($124+172)|0);
      var $125=HEAP32[(($zlib_window_bits155)>>2)];
      var $126=$png_ptr_addr;
      var $zlib_text_window_bits=(($126+192)|0);
      HEAP32[(($zlib_text_window_bits)>>2)]=$125;
      __label__ = 65; break;
    case 65: 
      var $127=$png_ptr_addr;
      var $flags157=(($127+88)|0);
      var $128=HEAP32[(($flags157)>>2)];
      var $and158=$128 & 268435456;
      var $tobool159=(($and158)|0)!=0;
      if ($tobool159) { __label__ = 67; break; } else { __label__ = 66; break; }
    case 66: 
      var $129=$png_ptr_addr;
      var $zlib_method161=(($129+168)|0);
      var $130=HEAP32[(($zlib_method161)>>2)];
      var $131=$png_ptr_addr;
      var $zlib_text_method=(($131+188)|0);
      HEAP32[(($zlib_text_method)>>2)]=$130;
      __label__ = 67; break;
    case 67: 
      var $132=$png_ptr_addr;
      var $zlib_state=(($132+160)|0);
      HEAP32[(($zlib_state)>>2)]=0;
      var $133=$png_ptr_addr;
      var $mode163=(($133+84)|0);
      HEAP32[(($mode163)>>2)]=1;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_IHDR["X"]=1;

function _png_write_PLTE($png_ptr, $palette, $num_pal) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $palette_addr;
      var $num_pal_addr;
      var $i;
      var $pal_ptr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $palette_addr=$palette;
      $num_pal_addr=$num_pal;
      var $0=$png_ptr_addr;
      var $mng_features_permitted=(($0+576)|0);
      var $1=HEAP32[(($mng_features_permitted)>>2)];
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$num_pal_addr;
      var $cmp=(($2)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$num_pal_addr;
      var $cmp1=(($3)>>>0) > 256;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $4=$png_ptr_addr;
      var $color_type=(($4+291)|0);
      var $5=HEAPU8[($color_type)];
      var $conv=(($5)&255);
      var $cmp2=(($conv)|0)==3;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$png_ptr_addr;
      _png_error($6, ((STRING_TABLE.__str91142)|0));
      __label__ = 7; break;
    case 6: 
      var $7=$png_ptr_addr;
      _png_warning($7, ((STRING_TABLE.__str91142)|0));
      __label__ = 15; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $8=$png_ptr_addr;
      var $color_type6=(($8+291)|0);
      var $9=HEAPU8[($color_type6)];
      var $conv7=(($9)&255);
      var $and8=$conv7 & 2;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $10=$png_ptr_addr;
      _png_warning($10, ((STRING_TABLE.__str101143)|0));
      __label__ = 15; break;
    case 10: 
      var $11=$num_pal_addr;
      var $conv12=(($11) & 65535);
      var $12=$png_ptr_addr;
      var $num_palette=(($12+276)|0);
      HEAP16[(($num_palette)>>1)]=$conv12;
      var $13=$png_ptr_addr;
      var $14=$num_pal_addr;
      var $mul=(($14*3)|0);
      _png_write_chunk_header($13, 1347179589, $mul);
      $i=0;
      var $15=$palette_addr;
      $pal_ptr=$15;
      __label__ = 11; break;
    case 11: 
      var $16=$i;
      var $17=$num_pal_addr;
      var $cmp13=(($16)>>>0) < (($17)>>>0);
      if ($cmp13) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $18=$pal_ptr;
      var $red=(($18)|0);
      var $19=HEAP8[($red)];
      var $arrayidx=(($buf)|0);
      HEAP8[($arrayidx)]=$19;
      var $20=$pal_ptr;
      var $green=(($20+1)|0);
      var $21=HEAP8[($green)];
      var $arrayidx15=(($buf+1)|0);
      HEAP8[($arrayidx15)]=$21;
      var $22=$pal_ptr;
      var $blue=(($22+2)|0);
      var $23=HEAP8[($blue)];
      var $arrayidx16=(($buf+2)|0);
      HEAP8[($arrayidx16)]=$23;
      var $24=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_write_chunk_data($24, $arraydecay, 3);
      __label__ = 13; break;
    case 13: 
      var $25=$i;
      var $inc=(($25+1)|0);
      $i=$inc;
      var $26=$pal_ptr;
      var $incdec_ptr=(($26+3)|0);
      $pal_ptr=$incdec_ptr;
      __label__ = 11; break;
    case 14: 
      var $27=$png_ptr_addr;
      _png_write_chunk_end($27);
      var $28=$png_ptr_addr;
      var $mode=(($28+84)|0);
      var $29=HEAP32[(($mode)>>2)];
      var $or=$29 | 2;
      HEAP32[(($mode)>>2)]=$or;
      __label__ = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_PLTE["X"]=1;

function _png_write_IDAT($png_ptr, $data, $length) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $data_addr;
      var $length_addr;
      var $z_cmf;
      var $z_cinfo;
      var $half_z_window_size;
      var $uncompressed_idat_size;
      var $tmp;
      $png_ptr_addr=$png_ptr;
      $data_addr=$data;
      $length_addr=$length;
      var $0=$png_ptr_addr;
      var $mode=(($0+84)|0);
      var $1=HEAP32[(($mode)>>2)];
      var $and=$1 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 21; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $compression_type=(($2+612)|0);
      var $3=HEAPU8[($compression_type)];
      var $conv=(($3)&255);
      var $cmp=(($conv)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 21; break; }
    case 3: 
      var $4=$data_addr;
      var $arrayidx=(($4)|0);
      var $5=HEAPU8[($arrayidx)];
      var $conv2=(($5)&255);
      $z_cmf=$conv2;
      var $6=$z_cmf;
      var $and3=$6 & 15;
      var $cmp4=(($and3)|0)==8;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 19; break; }
    case 4: 
      var $7=$z_cmf;
      var $and7=$7 & 240;
      var $cmp8=(($and7)>>>0) <= 112;
      if ($cmp8) { __label__ = 5; break; } else { __label__ = 19; break; }
    case 5: 
      var $8=$length_addr;
      var $cmp11=(($8)>>>0) >= 2;
      if ($cmp11) { __label__ = 6; break; } else { __label__ = 18; break; }
    case 6: 
      var $9=$png_ptr_addr;
      var $height=(($9+208)|0);
      var $10=HEAPU32[(($height)>>2)];
      var $cmp14=(($10)>>>0) < 16384;
      if ($cmp14) { __label__ = 7; break; } else { __label__ = 18; break; }
    case 7: 
      var $11=$png_ptr_addr;
      var $width=(($11+204)|0);
      var $12=HEAPU32[(($width)>>2)];
      var $cmp17=(($12)>>>0) < 16384;
      if ($cmp17) { __label__ = 8; break; } else { __label__ = 18; break; }
    case 8: 
      var $13=$png_ptr_addr;
      var $height20=(($13+208)|0);
      var $14=HEAP32[(($height20)>>2)];
      var $15=$png_ptr_addr;
      var $width21=(($15+204)|0);
      var $16=HEAP32[(($width21)>>2)];
      var $17=$png_ptr_addr;
      var $channels=(($17+295)|0);
      var $18=HEAPU8[($channels)];
      var $conv22=(($18)&255);
      var $mul=(($16*$conv22)|0);
      var $19=$png_ptr_addr;
      var $bit_depth=(($19+292)|0);
      var $20=HEAPU8[($bit_depth)];
      var $conv23=(($20)&255);
      var $mul24=(($mul*$conv23)|0);
      var $add=(($mul24+15)|0);
      var $shr=$add >>> 3;
      var $mul25=(($14*$shr)|0);
      $uncompressed_idat_size=$mul25;
      var $21=$png_ptr_addr;
      var $interlaced=(($21+288)|0);
      var $22=HEAP8[($interlaced)];
      var $tobool26=(($22 << 24) >> 24)!=0;
      if ($tobool26) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $23=$png_ptr_addr;
      var $height28=(($23+208)|0);
      var $24=HEAP32[(($height28)>>2)];
      var $add29=(($24+7)|0);
      var $div=Math.floor((($add29)>>>0)/8);
      var $25=$png_ptr_addr;
      var $bit_depth30=(($25+292)|0);
      var $26=HEAPU8[($bit_depth30)];
      var $conv31=(($26)&255);
      var $cmp32=(($conv31)|0) < 8;
      var $cond=$cmp32 ? 12 : 6;
      var $mul34=(($div*$cond)|0);
      var $27=$uncompressed_idat_size;
      var $add35=(($27+$mul34)|0);
      $uncompressed_idat_size=$add35;
      __label__ = 10; break;
    case 10: 
      var $28=$z_cmf;
      var $shr36=$28 >>> 4;
      $z_cinfo=$shr36;
      var $29=$z_cinfo;
      var $add37=(($29+7)|0);
      var $shl=1 << $add37;
      $half_z_window_size=$shl;
      __label__ = 11; break;
    case 11: 
      var $30=$uncompressed_idat_size;
      var $31=$half_z_window_size;
      var $cmp38=(($30)>>>0) <= (($31)>>>0);
      if ($cmp38) { __label__ = 12; break; } else { var $33 = 0;__label__ = 13; break; }
    case 12: 
      var $32=$half_z_window_size;
      var $cmp40=(($32)>>>0) >= 256;
      var $33 = $cmp40;__label__ = 13; break;
    case 13: 
      var $33;
      if ($33) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $34=$z_cinfo;
      var $dec=(($34-1)|0);
      $z_cinfo=$dec;
      var $35=$half_z_window_size;
      var $shr42=$35 >>> 1;
      $half_z_window_size=$shr42;
      __label__ = 11; break;
    case 15: 
      var $36=$z_cmf;
      var $and43=$36 & 15;
      var $37=$z_cinfo;
      var $shl44=$37 << 4;
      var $or=$and43 | $shl44;
      $z_cmf=$or;
      var $38=$data_addr;
      var $arrayidx45=(($38)|0);
      var $39=HEAPU8[($arrayidx45)];
      var $conv46=(($39)&255);
      var $40=$z_cmf;
      var $cmp47=(($conv46)|0)!=(($40)|0);
      if ($cmp47) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $41=$z_cmf;
      var $conv50=(($41) & 255);
      var $42=$data_addr;
      var $arrayidx51=(($42)|0);
      HEAP8[($arrayidx51)]=$conv50;
      var $43=$data_addr;
      var $arrayidx52=(($43+1)|0);
      var $44=HEAPU8[($arrayidx52)];
      var $conv53=(($44)&255);
      var $and54=$conv53 & 224;
      $tmp=$and54;
      var $45=$z_cmf;
      var $shl55=$45 << 8;
      var $46=$tmp;
      var $add56=(($shl55+$46)|0);
      var $rem=(($add56)>>>0)%31;
      var $sub=((31-$rem)|0);
      var $47=$tmp;
      var $add57=(($47+$sub)|0);
      $tmp=$add57;
      var $48=$tmp;
      var $conv58=(($48) & 255);
      var $49=$data_addr;
      var $arrayidx59=(($49+1)|0);
      HEAP8[($arrayidx59)]=$conv58;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 20; break;
    case 19: 
      var $50=$png_ptr_addr;
      _png_error($50, ((STRING_TABLE.__str111144)|0));
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $51=$png_ptr_addr;
      var $52=$data_addr;
      var $53=$length_addr;
      _png_write_complete_chunk($51, 1229209940, $52, $53);
      var $54=$png_ptr_addr;
      var $mode64=(($54+84)|0);
      var $55=HEAP32[(($mode64)>>2)];
      var $or65=$55 | 4;
      HEAP32[(($mode64)>>2)]=$or65;
      var $56=$png_ptr_addr;
      var $zbuf=(($56+152)|0);
      var $57=HEAP32[(($zbuf)>>2)];
      var $58=$png_ptr_addr;
      var $zstream=(($58+96)|0);
      var $next_out=(($zstream+12)|0);
      HEAP32[(($next_out)>>2)]=$57;
      var $59=$png_ptr_addr;
      var $zbuf_size=(($59+156)|0);
      var $60=HEAP32[(($zbuf_size)>>2)];
      var $61=$png_ptr_addr;
      var $zstream66=(($61+96)|0);
      var $avail_out=(($zstream66+16)|0);
      HEAP32[(($avail_out)>>2)]=$60;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_IDAT["X"]=1;

function _png_write_IEND($png_ptr) {
  ;
  var __label__;

  var $png_ptr_addr;
  $png_ptr_addr=$png_ptr;
  var $0=$png_ptr_addr;
  _png_write_complete_chunk($0, 1229278788, 0, 0);
  var $1=$png_ptr_addr;
  var $mode=(($1+84)|0);
  var $2=HEAP32[(($mode)>>2)];
  var $or=$2 | 16;
  HEAP32[(($mode)>>2)]=$or;
  ;
  return;
}


function _png_write_gAMA_fixed($png_ptr, $file_gamma) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $png_ptr_addr;
  var $file_gamma_addr;
  var $buf=__stackBase__;
  $png_ptr_addr=$png_ptr;
  $file_gamma_addr=$file_gamma;
  var $arraydecay=(($buf)|0);
  var $0=$file_gamma_addr;
  _png_save_uint_32($arraydecay, $0);
  var $1=$png_ptr_addr;
  var $arraydecay1=(($buf)|0);
  _png_write_complete_chunk($1, 1732332865, $arraydecay1, 4);
  STACKTOP = __stackBase__;
  return;
}


function _png_write_sRGB($png_ptr, $srgb_intent) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $srgb_intent_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $srgb_intent_addr=$srgb_intent;
      var $0=$srgb_intent_addr;
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      _png_warning($1, ((STRING_TABLE.__str121145)|0));
      __label__ = 3; break;
    case 3: 
      var $2=$srgb_intent_addr;
      var $conv=(($2) & 255);
      var $arrayidx=(($buf)|0);
      HEAP8[($arrayidx)]=$conv;
      var $3=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_write_complete_chunk($3, 1934772034, $arraydecay, 1);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_iCCP($png_ptr, $name, $compression_type, $profile, $profile_len) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $name_addr;
      var $compression_type_addr;
      var $profile_addr;
      var $profile_len_addr;
      var $name_len;
      var $new_name=__stackBase__;
      var $comp=__stackBase__+4;
      var $embedded_profile_len;
      $png_ptr_addr=$png_ptr;
      $name_addr=$name;
      $compression_type_addr=$compression_type;
      $profile_addr=$profile;
      $profile_len_addr=$profile_len;
      $embedded_profile_len=0;
      var $num_output_ptr=(($comp+8)|0);
      HEAP32[(($num_output_ptr)>>2)]=0;
      var $max_output_ptr=(($comp+12)|0);
      HEAP32[(($max_output_ptr)>>2)]=0;
      var $output_ptr=(($comp+16)|0);
      HEAP32[(($output_ptr)>>2)]=0;
      var $input=(($comp)|0);
      HEAP32[(($input)>>2)]=0;
      var $input_len=(($comp+4)|0);
      HEAP32[(($input_len)>>2)]=0;
      var $0=$png_ptr_addr;
      var $1=$name_addr;
      var $call=_png_check_keyword($0, $1, $new_name);
      $name_len=$call;
      var $cmp=(($call)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 20; break;
    case 3: 
      var $2=$compression_type_addr;
      var $cmp1=(($2)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$png_ptr_addr;
      _png_warning($3, ((STRING_TABLE.__str131146)|0));
      __label__ = 5; break;
    case 5: 
      var $4=$profile_addr;
      var $cmp4=(($4)|0)==0;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $profile_len_addr=0;
      __label__ = 7; break;
    case 7: 
      var $5=$profile_len_addr;
      var $cmp7=(($5)|0) > 3;
      if ($cmp7) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $6=$profile_addr;
      var $7=HEAPU8[($6)];
      var $conv=(($7)&255);
      var $shl=$conv << 24;
      var $8=$profile_addr;
      var $add_ptr=(($8+1)|0);
      var $9=HEAPU8[($add_ptr)];
      var $conv9=(($9)&255);
      var $shl10=$conv9 << 16;
      var $or=$shl | $shl10;
      var $10=$profile_addr;
      var $add_ptr11=(($10+2)|0);
      var $11=HEAPU8[($add_ptr11)];
      var $conv12=(($11)&255);
      var $shl13=$conv12 << 8;
      var $or14=$or | $shl13;
      var $12=$profile_addr;
      var $add_ptr15=(($12+3)|0);
      var $13=HEAPU8[($add_ptr15)];
      var $conv16=(($13)&255);
      var $or17=$or14 | $conv16;
      $embedded_profile_len=$or17;
      __label__ = 9; break;
    case 9: 
      var $14=$embedded_profile_len;
      var $cmp19=(($14)|0) < 0;
      if ($cmp19) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $15=$png_ptr_addr;
      _png_warning($15, ((STRING_TABLE.__str141147)|0));
      var $16=$png_ptr_addr;
      var $17=HEAP32[(($new_name)>>2)];
      _png_free($16, $17);
      __label__ = 20; break;
    case 11: 
      var $18=$profile_len_addr;
      var $19=$embedded_profile_len;
      var $cmp23=(($18)|0) < (($19)|0);
      if ($cmp23) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $20=$png_ptr_addr;
      _png_warning($20, ((STRING_TABLE.__str151148)|0));
      var $21=$png_ptr_addr;
      var $22=HEAP32[(($new_name)>>2)];
      _png_free($21, $22);
      __label__ = 20; break;
    case 13: 
      var $23=$profile_len_addr;
      var $24=$embedded_profile_len;
      var $cmp27=(($23)|0) > (($24)|0);
      if ($cmp27) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $25=$png_ptr_addr;
      _png_warning($25, ((STRING_TABLE.__str161149)|0));
      var $26=$embedded_profile_len;
      $profile_len_addr=$26;
      __label__ = 15; break;
    case 15: 
      var $27=$profile_len_addr;
      var $tobool=(($27)|0)!=0;
      if ($tobool) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $28=$png_ptr_addr;
      var $29=$profile_addr;
      var $30=$profile_len_addr;
      var $call32=_png_text_compress($28, $29, $30, 0, $comp);
      $profile_len_addr=$call32;
      __label__ = 17; break;
    case 17: 
      var $31=$png_ptr_addr;
      var $32=$name_len;
      var $33=$profile_len_addr;
      var $add=(($32+$33)|0);
      var $add34=(($add+2)|0);
      _png_write_chunk_header($31, 1766015824, $add34);
      var $34=$name_len;
      var $add35=(($34+1)|0);
      var $35=HEAP32[(($new_name)>>2)];
      var $arrayidx=(($35+$add35)|0);
      HEAP8[($arrayidx)]=0;
      var $36=$png_ptr_addr;
      var $37=HEAP32[(($new_name)>>2)];
      var $38=$name_len;
      var $add36=(($38+2)|0);
      _png_write_chunk_data($36, $37, $add36);
      var $39=$profile_len_addr;
      var $tobool37=(($39)|0)!=0;
      if ($tobool37) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $40=$png_ptr_addr;
      var $41=$profile_len_addr;
      _png_write_compressed_data_out($40, $comp, $41);
      __label__ = 19; break;
    case 19: 
      var $42=$png_ptr_addr;
      _png_write_chunk_end($42);
      var $43=$png_ptr_addr;
      var $44=HEAP32[(($new_name)>>2)];
      _png_free($43, $44);
      __label__ = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_iCCP["X"]=1;

function _png_check_keyword($png_ptr, $key, $new_key) {
  var __stackBase__  = STACKTOP; STACKTOP += 256; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $key_addr;
      var $new_key_addr;
      var $key_len;
      var $ikp;
      var $kp;
      var $dp;
      var $kflag;
      var $kwarn;
      var $p=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $key_addr=$key;
      $new_key_addr=$new_key;
      $kwarn=0;
      var $0=$new_key_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$key_addr;
      var $cmp=(($1)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$key_addr;
      var $call=_strlen($2);
      $key_len=$call;
      var $cmp1=(($call)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$png_ptr_addr;
      _png_warning($3, ((STRING_TABLE.__str261159)|0));
      $retval=0;
      __label__ = 43; break;
    case 4: 
      var $4=$png_ptr_addr;
      var $5=$key_len;
      var $add=(($5+2)|0);
      var $call2=_png_malloc_warn($4, $add);
      var $6=$new_key_addr;
      HEAP32[(($6)>>2)]=$call2;
      var $7=$new_key_addr;
      var $8=HEAP32[(($7)>>2)];
      var $cmp3=(($8)|0)==0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $9=$png_ptr_addr;
      _png_warning($9, ((STRING_TABLE.__str271160)|0));
      $retval=0;
      __label__ = 43; break;
    case 6: 
      var $10=$key_addr;
      $ikp=$10;
      var $11=$new_key_addr;
      var $12=HEAP32[(($11)>>2)];
      $dp=$12;
      __label__ = 7; break;
    case 7: 
      var $13=$ikp;
      var $14=HEAP8[($13)];
      var $conv=(($14 << 24) >> 24);
      var $cmp6=(($conv)|0)!=0;
      if ($cmp6) { __label__ = 8; break; } else { __label__ = 15; break; }
    case 8: 
      var $15=$ikp;
      var $16=HEAPU8[($15)];
      var $conv8=(($16)&255);
      var $cmp9=(($conv8)|0) < 32;
      if ($cmp9) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $17=$ikp;
      var $18=HEAPU8[($17)];
      var $conv12=(($18)&255);
      var $cmp13=(($conv12)|0) > 126;
      if ($cmp13) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $19=$ikp;
      var $20=HEAPU8[($19)];
      var $conv15=(($20)&255);
      var $cmp16=(($conv15)|0) < 161;
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $arraydecay=(($p)|0);
      var $21=$ikp;
      var $22=HEAPU8[($21)];
      var $conv19=(($22)&255);
      _png_warning_parameter_unsigned($arraydecay, 1, 4, $conv19);
      var $23=$png_ptr_addr;
      var $arraydecay20=(($p)|0);
      _png_formatted_warning($23, $arraydecay20, ((STRING_TABLE.__str281161)|0));
      var $24=$dp;
      HEAP8[($24)]=32;
      __label__ = 13; break;
    case 12: 
      var $25=$ikp;
      var $26=HEAP8[($25)];
      var $27=$dp;
      HEAP8[($27)]=$26;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $28=$ikp;
      var $incdec_ptr=(($28+1)|0);
      $ikp=$incdec_ptr;
      var $29=$dp;
      var $incdec_ptr22=(($29+1)|0);
      $dp=$incdec_ptr22;
      __label__ = 7; break;
    case 15: 
      var $30=$dp;
      HEAP8[($30)]=0;
      var $31=$new_key_addr;
      var $32=HEAP32[(($31)>>2)];
      var $33=$key_len;
      var $add_ptr=(($32+$33)|0);
      var $add_ptr23=(($add_ptr-1)|0);
      $kp=$add_ptr23;
      var $34=$kp;
      var $35=HEAP8[($34)];
      var $conv24=(($35 << 24) >> 24);
      var $cmp25=(($conv24)|0)==32;
      if ($cmp25) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      var $36=$png_ptr_addr;
      _png_warning($36, ((STRING_TABLE.__str291162)|0));
      __label__ = 17; break;
    case 17: 
      var $37=$kp;
      var $38=HEAP8[($37)];
      var $conv28=(($38 << 24) >> 24);
      var $cmp29=(($conv28)|0)==32;
      if ($cmp29) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $39=$kp;
      var $incdec_ptr31=(($39-1)|0);
      $kp=$incdec_ptr31;
      HEAP8[($39)]=0;
      var $40=$key_len;
      var $dec=(($40-1)|0);
      $key_len=$dec;
      __label__ = 17; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $41=$new_key_addr;
      var $42=HEAP32[(($41)>>2)];
      $kp=$42;
      var $43=$kp;
      var $44=HEAP8[($43)];
      var $conv33=(($44 << 24) >> 24);
      var $cmp34=(($conv33)|0)==32;
      if ($cmp34) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $45=$png_ptr_addr;
      _png_warning($45, ((STRING_TABLE.__str301163)|0));
      __label__ = 22; break;
    case 22: 
      var $46=$kp;
      var $47=HEAP8[($46)];
      var $conv38=(($47 << 24) >> 24);
      var $cmp39=(($conv38)|0)==32;
      if ($cmp39) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $48=$kp;
      var $incdec_ptr42=(($48+1)|0);
      $kp=$incdec_ptr42;
      var $49=$key_len;
      var $dec43=(($49-1)|0);
      $key_len=$dec43;
      __label__ = 22; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      $kflag=0;
      var $50=$new_key_addr;
      var $51=HEAP32[(($50)>>2)];
      $dp=$51;
      __label__ = 26; break;
    case 26: 
      var $52=$kp;
      var $53=HEAP8[($52)];
      var $conv47=(($53 << 24) >> 24);
      var $cmp48=(($conv47)|0)!=0;
      if ($cmp48) { __label__ = 27; break; } else { __label__ = 36; break; }
    case 27: 
      var $54=$kp;
      var $55=HEAP8[($54)];
      var $conv51=(($55 << 24) >> 24);
      var $cmp52=(($conv51)|0)==32;
      if ($cmp52) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: 
      var $56=$kflag;
      var $cmp55=(($56)|0)==0;
      if ($cmp55) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $57=$kp;
      var $58=HEAP8[($57)];
      var $59=$dp;
      var $incdec_ptr58=(($59+1)|0);
      $dp=$incdec_ptr58;
      HEAP8[($59)]=$58;
      $kflag=1;
      __label__ = 34; break;
    case 30: 
      var $60=$kp;
      var $61=HEAP8[($60)];
      var $conv60=(($61 << 24) >> 24);
      var $cmp61=(($conv60)|0)==32;
      if ($cmp61) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $62=$key_len;
      var $dec64=(($62-1)|0);
      $key_len=$dec64;
      $kwarn=1;
      __label__ = 33; break;
    case 32: 
      var $63=$kp;
      var $64=HEAP8[($63)];
      var $65=$dp;
      var $incdec_ptr66=(($65+1)|0);
      $dp=$incdec_ptr66;
      HEAP8[($65)]=$64;
      $kflag=0;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $66=$kp;
      var $incdec_ptr70=(($66+1)|0);
      $kp=$incdec_ptr70;
      __label__ = 26; break;
    case 36: 
      var $67=$dp;
      HEAP8[($67)]=0;
      var $68=$kwarn;
      var $tobool=(($68)|0)!=0;
      if ($tobool) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $69=$png_ptr_addr;
      _png_warning($69, ((STRING_TABLE.__str311164)|0));
      __label__ = 38; break;
    case 38: 
      var $70=$key_len;
      var $cmp74=(($70)|0)==0;
      if ($cmp74) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $71=$png_ptr_addr;
      var $72=$new_key_addr;
      var $73=HEAP32[(($72)>>2)];
      _png_free($71, $73);
      var $74=$png_ptr_addr;
      _png_warning($74, ((STRING_TABLE.__str321165)|0));
      __label__ = 40; break;
    case 40: 
      var $75=$key_len;
      var $cmp78=(($75)>>>0) > 79;
      if ($cmp78) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $76=$png_ptr_addr;
      _png_warning($76, ((STRING_TABLE.__str331166)|0));
      var $77=$new_key_addr;
      var $78=HEAP32[(($77)>>2)];
      var $arrayidx=(($78+79)|0);
      HEAP8[($arrayidx)]=0;
      $key_len=79;
      __label__ = 42; break;
    case 42: 
      var $79=$key_len;
      $retval=$79;
      __label__ = 43; break;
    case 43: 
      var $80=$retval;
      STACKTOP = __stackBase__;
      return $80;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_check_keyword["X"]=1;

function _png_text_compress($png_ptr, $text, $text_len, $compression, $comp) {
  var __stackBase__  = STACKTOP; STACKTOP += 256; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $png_ptr_addr;
      var $text_addr;
      var $text_len_addr;
      var $compression_addr;
      var $comp_addr;
      var $ret;
      var $p=__stackBase__;
      var $old_max;
      var $old_ptr;
      var $old_max78;
      var $old_ptr86;
      $png_ptr_addr=$png_ptr;
      $text_addr=$text;
      $text_len_addr=$text_len;
      $compression_addr=$compression;
      $comp_addr=$comp;
      var $0=$comp_addr;
      var $num_output_ptr=(($0+8)|0);
      HEAP32[(($num_output_ptr)>>2)]=0;
      var $1=$comp_addr;
      var $max_output_ptr=(($1+12)|0);
      HEAP32[(($max_output_ptr)>>2)]=0;
      var $2=$comp_addr;
      var $output_ptr=(($2+16)|0);
      HEAP32[(($output_ptr)>>2)]=0;
      var $3=$comp_addr;
      var $input=(($3)|0);
      HEAP32[(($input)>>2)]=0;
      var $4=$text_len_addr;
      var $5=$comp_addr;
      var $input_len=(($5+4)|0);
      HEAP32[(($input_len)>>2)]=$4;
      var $6=$compression_addr;
      var $cmp=(($6)|0)==-1;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $7=$text_addr;
      var $8=$comp_addr;
      var $input1=(($8)|0);
      HEAP32[(($input1)>>2)]=$7;
      var $9=$text_len_addr;
      $retval=$9;
      __label__ = 41; break;
    case 3: 
      var $10=$compression_addr;
      var $cmp2=(($10)|0) >= 3;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $arraydecay=(($p)|0);
      var $11=$compression_addr;
      _png_warning_parameter_signed($arraydecay, 1, 1, $11);
      var $12=$png_ptr_addr;
      var $arraydecay4=(($p)|0);
      _png_formatted_warning($12, $arraydecay4, ((STRING_TABLE.__str611194)|0));
      __label__ = 5; break;
    case 5: 
      var $13=$png_ptr_addr;
      _png_zlib_claim($13, 2);
      var $14=$text_len_addr;
      var $15=$png_ptr_addr;
      var $zstream=(($15+96)|0);
      var $avail_in=(($zstream+4)|0);
      HEAP32[(($avail_in)>>2)]=$14;
      var $16=$text_addr;
      var $17=$png_ptr_addr;
      var $zstream6=(($17+96)|0);
      var $next_in=(($zstream6)|0);
      HEAP32[(($next_in)>>2)]=$16;
      var $18=$png_ptr_addr;
      var $zbuf_size=(($18+156)|0);
      var $19=HEAP32[(($zbuf_size)>>2)];
      var $20=$png_ptr_addr;
      var $zstream7=(($20+96)|0);
      var $avail_out=(($zstream7+16)|0);
      HEAP32[(($avail_out)>>2)]=$19;
      var $21=$png_ptr_addr;
      var $zbuf=(($21+152)|0);
      var $22=HEAP32[(($zbuf)>>2)];
      var $23=$png_ptr_addr;
      var $zstream8=(($23+96)|0);
      var $next_out=(($zstream8+12)|0);
      HEAP32[(($next_out)>>2)]=$22;
      __label__ = 6; break;
    case 6: 
      var $24=$png_ptr_addr;
      var $zstream9=(($24+96)|0);
      var $call=_deflate($zstream9, 0);
      $ret=$call;
      var $25=$ret;
      var $cmp10=(($25)|0)!=0;
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $26=$png_ptr_addr;
      var $zstream12=(($26+96)|0);
      var $msg=(($zstream12+24)|0);
      var $27=HEAP32[(($msg)>>2)];
      var $cmp13=(($27)|0)!=0;
      if ($cmp13) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $28=$png_ptr_addr;
      var $29=$png_ptr_addr;
      var $zstream15=(($29+96)|0);
      var $msg16=(($zstream15+24)|0);
      var $30=HEAP32[(($msg16)>>2)];
      _png_error($28, $30);
      __label__ = 10; break;
    case 9: 
      var $31=$png_ptr_addr;
      _png_error($31, ((STRING_TABLE.__str401173)|0));
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $32=$png_ptr_addr;
      var $zstream19=(($32+96)|0);
      var $avail_out20=(($zstream19+16)|0);
      var $33=HEAP32[(($avail_out20)>>2)];
      var $tobool=(($33)|0)!=0;
      if ($tobool) { __label__ = 18; break; } else { __label__ = 12; break; }
    case 12: 
      var $34=$comp_addr;
      var $num_output_ptr22=(($34+8)|0);
      var $35=HEAP32[(($num_output_ptr22)>>2)];
      var $36=$comp_addr;
      var $max_output_ptr23=(($36+12)|0);
      var $37=HEAP32[(($max_output_ptr23)>>2)];
      var $cmp24=(($35)|0) >= (($37)|0);
      if ($cmp24) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $38=$comp_addr;
      var $max_output_ptr26=(($38+12)|0);
      var $39=HEAP32[(($max_output_ptr26)>>2)];
      $old_max=$39;
      var $40=$comp_addr;
      var $num_output_ptr27=(($40+8)|0);
      var $41=HEAP32[(($num_output_ptr27)>>2)];
      var $add=(($41+4)|0);
      var $42=$comp_addr;
      var $max_output_ptr28=(($42+12)|0);
      HEAP32[(($max_output_ptr28)>>2)]=$add;
      var $43=$comp_addr;
      var $output_ptr29=(($43+16)|0);
      var $44=HEAP32[(($output_ptr29)>>2)];
      var $cmp30=(($44)|0)!=0;
      if ($cmp30) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $45=$comp_addr;
      var $output_ptr32=(($45+16)|0);
      var $46=HEAP32[(($output_ptr32)>>2)];
      $old_ptr=$46;
      var $47=$png_ptr_addr;
      var $48=$comp_addr;
      var $max_output_ptr33=(($48+12)|0);
      var $49=HEAP32[(($max_output_ptr33)>>2)];
      var $mul=((($49<<2))|0);
      var $call34=_png_malloc($47, $mul);
      var $50=$call34;
      var $51=$comp_addr;
      var $output_ptr35=(($51+16)|0);
      HEAP32[(($output_ptr35)>>2)]=$50;
      var $52=$comp_addr;
      var $output_ptr36=(($52+16)|0);
      var $53=HEAP32[(($output_ptr36)>>2)];
      var $54=$53;
      var $55=$old_ptr;
      var $56=$55;
      var $57=$old_max;
      var $mul37=((($57<<2))|0);
      assert($mul37 % 1 === 0, 'memcpy given ' + $mul37 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($54, $56, $mul37, 1);
      var $58=$png_ptr_addr;
      var $59=$old_ptr;
      var $60=$59;
      _png_free($58, $60);
      __label__ = 16; break;
    case 15: 
      var $61=$png_ptr_addr;
      var $62=$comp_addr;
      var $max_output_ptr39=(($62+12)|0);
      var $63=HEAP32[(($max_output_ptr39)>>2)];
      var $mul40=((($63<<2))|0);
      var $call41=_png_malloc($61, $mul40);
      var $64=$call41;
      var $65=$comp_addr;
      var $output_ptr42=(($65+16)|0);
      HEAP32[(($output_ptr42)>>2)]=$64;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $66=$png_ptr_addr;
      var $67=$png_ptr_addr;
      var $zbuf_size45=(($67+156)|0);
      var $68=HEAP32[(($zbuf_size45)>>2)];
      var $call46=_png_malloc($66, $68);
      var $69=$comp_addr;
      var $num_output_ptr47=(($69+8)|0);
      var $70=HEAP32[(($num_output_ptr47)>>2)];
      var $71=$comp_addr;
      var $output_ptr48=(($71+16)|0);
      var $72=HEAP32[(($output_ptr48)>>2)];
      var $arrayidx=(($72+($70<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$call46;
      var $73=$comp_addr;
      var $num_output_ptr49=(($73+8)|0);
      var $74=HEAP32[(($num_output_ptr49)>>2)];
      var $75=$comp_addr;
      var $output_ptr50=(($75+16)|0);
      var $76=HEAP32[(($output_ptr50)>>2)];
      var $arrayidx51=(($76+($74<<2))|0);
      var $77=HEAP32[(($arrayidx51)>>2)];
      var $78=$png_ptr_addr;
      var $zbuf52=(($78+152)|0);
      var $79=HEAP32[(($zbuf52)>>2)];
      var $80=$png_ptr_addr;
      var $zbuf_size53=(($80+156)|0);
      var $81=HEAP32[(($zbuf_size53)>>2)];
      assert($81 % 1 === 0, 'memcpy given ' + $81 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($77, $79, $81, 1);
      var $82=$comp_addr;
      var $num_output_ptr54=(($82+8)|0);
      var $83=HEAP32[(($num_output_ptr54)>>2)];
      var $inc=(($83+1)|0);
      HEAP32[(($num_output_ptr54)>>2)]=$inc;
      var $84=$png_ptr_addr;
      var $zbuf_size55=(($84+156)|0);
      var $85=HEAP32[(($zbuf_size55)>>2)];
      var $86=$png_ptr_addr;
      var $zstream56=(($86+96)|0);
      var $avail_out57=(($zstream56+16)|0);
      HEAP32[(($avail_out57)>>2)]=$85;
      var $87=$png_ptr_addr;
      var $zbuf58=(($87+152)|0);
      var $88=HEAP32[(($zbuf58)>>2)];
      var $89=$png_ptr_addr;
      var $zstream59=(($89+96)|0);
      var $next_out60=(($zstream59+12)|0);
      HEAP32[(($next_out60)>>2)]=$88;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $90=$png_ptr_addr;
      var $zstream62=(($90+96)|0);
      var $avail_in63=(($zstream62+4)|0);
      var $91=HEAP32[(($avail_in63)>>2)];
      var $tobool64=(($91)|0)!=0;
      if ($tobool64) { __label__ = 6; break; } else { __label__ = 20; break; }
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $92=$png_ptr_addr;
      var $zstream66=(($92+96)|0);
      var $call67=_deflate($zstream66, 4);
      $ret=$call67;
      var $93=$ret;
      var $cmp68=(($93)|0)==0;
      if ($cmp68) { __label__ = 22; break; } else { __label__ = 30; break; }
    case 22: 
      var $94=$png_ptr_addr;
      var $zstream70=(($94+96)|0);
      var $avail_out71=(($zstream70+16)|0);
      var $95=HEAP32[(($avail_out71)>>2)];
      var $tobool72=(($95)|0)!=0;
      if ($tobool72) { __label__ = 29; break; } else { __label__ = 23; break; }
    case 23: 
      var $96=$comp_addr;
      var $num_output_ptr74=(($96+8)|0);
      var $97=HEAP32[(($num_output_ptr74)>>2)];
      var $98=$comp_addr;
      var $max_output_ptr75=(($98+12)|0);
      var $99=HEAP32[(($max_output_ptr75)>>2)];
      var $cmp76=(($97)|0) >= (($99)|0);
      if ($cmp76) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: 
      var $100=$comp_addr;
      var $max_output_ptr79=(($100+12)|0);
      var $101=HEAP32[(($max_output_ptr79)>>2)];
      $old_max78=$101;
      var $102=$comp_addr;
      var $num_output_ptr80=(($102+8)|0);
      var $103=HEAP32[(($num_output_ptr80)>>2)];
      var $add81=(($103+4)|0);
      var $104=$comp_addr;
      var $max_output_ptr82=(($104+12)|0);
      HEAP32[(($max_output_ptr82)>>2)]=$add81;
      var $105=$comp_addr;
      var $output_ptr83=(($105+16)|0);
      var $106=HEAP32[(($output_ptr83)>>2)];
      var $cmp84=(($106)|0)!=0;
      if ($cmp84) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $107=$comp_addr;
      var $output_ptr87=(($107+16)|0);
      var $108=HEAP32[(($output_ptr87)>>2)];
      $old_ptr86=$108;
      var $109=$png_ptr_addr;
      var $110=$comp_addr;
      var $max_output_ptr88=(($110+12)|0);
      var $111=HEAP32[(($max_output_ptr88)>>2)];
      var $mul89=((($111<<2))|0);
      var $call90=_png_malloc($109, $mul89);
      var $112=$call90;
      var $113=$comp_addr;
      var $output_ptr91=(($113+16)|0);
      HEAP32[(($output_ptr91)>>2)]=$112;
      var $114=$comp_addr;
      var $output_ptr92=(($114+16)|0);
      var $115=HEAP32[(($output_ptr92)>>2)];
      var $116=$115;
      var $117=$old_ptr86;
      var $118=$117;
      var $119=$old_max78;
      var $mul93=((($119<<2))|0);
      assert($mul93 % 1 === 0, 'memcpy given ' + $mul93 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($116, $118, $mul93, 1);
      var $120=$png_ptr_addr;
      var $121=$old_ptr86;
      var $122=$121;
      _png_free($120, $122);
      __label__ = 27; break;
    case 26: 
      var $123=$png_ptr_addr;
      var $124=$comp_addr;
      var $max_output_ptr95=(($124+12)|0);
      var $125=HEAP32[(($max_output_ptr95)>>2)];
      var $mul96=((($125<<2))|0);
      var $call97=_png_malloc($123, $mul96);
      var $126=$call97;
      var $127=$comp_addr;
      var $output_ptr98=(($127+16)|0);
      HEAP32[(($output_ptr98)>>2)]=$126;
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $128=$png_ptr_addr;
      var $129=$png_ptr_addr;
      var $zbuf_size101=(($129+156)|0);
      var $130=HEAP32[(($zbuf_size101)>>2)];
      var $call102=_png_malloc($128, $130);
      var $131=$comp_addr;
      var $num_output_ptr103=(($131+8)|0);
      var $132=HEAP32[(($num_output_ptr103)>>2)];
      var $133=$comp_addr;
      var $output_ptr104=(($133+16)|0);
      var $134=HEAP32[(($output_ptr104)>>2)];
      var $arrayidx105=(($134+($132<<2))|0);
      HEAP32[(($arrayidx105)>>2)]=$call102;
      var $135=$comp_addr;
      var $num_output_ptr106=(($135+8)|0);
      var $136=HEAP32[(($num_output_ptr106)>>2)];
      var $137=$comp_addr;
      var $output_ptr107=(($137+16)|0);
      var $138=HEAP32[(($output_ptr107)>>2)];
      var $arrayidx108=(($138+($136<<2))|0);
      var $139=HEAP32[(($arrayidx108)>>2)];
      var $140=$png_ptr_addr;
      var $zbuf109=(($140+152)|0);
      var $141=HEAP32[(($zbuf109)>>2)];
      var $142=$png_ptr_addr;
      var $zbuf_size110=(($142+156)|0);
      var $143=HEAP32[(($zbuf_size110)>>2)];
      assert($143 % 1 === 0, 'memcpy given ' + $143 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($139, $141, $143, 1);
      var $144=$comp_addr;
      var $num_output_ptr111=(($144+8)|0);
      var $145=HEAP32[(($num_output_ptr111)>>2)];
      var $inc112=(($145+1)|0);
      HEAP32[(($num_output_ptr111)>>2)]=$inc112;
      var $146=$png_ptr_addr;
      var $zbuf_size113=(($146+156)|0);
      var $147=HEAP32[(($zbuf_size113)>>2)];
      var $148=$png_ptr_addr;
      var $zstream114=(($148+96)|0);
      var $avail_out115=(($zstream114+16)|0);
      HEAP32[(($avail_out115)>>2)]=$147;
      var $149=$png_ptr_addr;
      var $zbuf116=(($149+152)|0);
      var $150=HEAP32[(($zbuf116)>>2)];
      var $151=$png_ptr_addr;
      var $zstream117=(($151+96)|0);
      var $next_out118=(($zstream117+12)|0);
      HEAP32[(($next_out118)>>2)]=$150;
      __label__ = 29; break;
    case 29: 
      __label__ = 36; break;
    case 30: 
      var $152=$ret;
      var $cmp121=(($152)|0)!=1;
      if ($cmp121) { __label__ = 31; break; } else { __label__ = 35; break; }
    case 31: 
      var $153=$png_ptr_addr;
      var $zstream123=(($153+96)|0);
      var $msg124=(($zstream123+24)|0);
      var $154=HEAP32[(($msg124)>>2)];
      var $cmp125=(($154)|0)!=0;
      if ($cmp125) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $155=$png_ptr_addr;
      var $156=$png_ptr_addr;
      var $zstream127=(($156+96)|0);
      var $msg128=(($zstream127+24)|0);
      var $157=HEAP32[(($msg128)>>2)];
      _png_error($155, $157);
      __label__ = 34; break;
    case 33: 
      var $158=$png_ptr_addr;
      _png_error($158, ((STRING_TABLE.__str401173)|0));
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $159=$ret;
      var $cmp134=(($159)|0)!=1;
      if ($cmp134) { __label__ = 21; break; } else { __label__ = 38; break; }
    case 38: 
      var $160=$png_ptr_addr;
      var $zbuf_size136=(($160+156)|0);
      var $161=HEAP32[(($zbuf_size136)>>2)];
      var $162=$comp_addr;
      var $num_output_ptr137=(($162+8)|0);
      var $163=HEAP32[(($num_output_ptr137)>>2)];
      var $mul138=(($161*$163)|0);
      $text_len_addr=$mul138;
      var $164=$png_ptr_addr;
      var $zstream139=(($164+96)|0);
      var $avail_out140=(($zstream139+16)|0);
      var $165=HEAPU32[(($avail_out140)>>2)];
      var $166=$png_ptr_addr;
      var $zbuf_size141=(($166+156)|0);
      var $167=HEAPU32[(($zbuf_size141)>>2)];
      var $cmp142=(($165)>>>0) < (($167)>>>0);
      if ($cmp142) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $168=$png_ptr_addr;
      var $zbuf_size144=(($168+156)|0);
      var $169=HEAP32[(($zbuf_size144)>>2)];
      var $170=$png_ptr_addr;
      var $zstream145=(($170+96)|0);
      var $avail_out146=(($zstream145+16)|0);
      var $171=HEAP32[(($avail_out146)>>2)];
      var $sub=(($169-$171)|0);
      var $172=$text_len_addr;
      var $add147=(($172+$sub)|0);
      $text_len_addr=$add147;
      __label__ = 40; break;
    case 40: 
      var $173=$text_len_addr;
      $retval=$173;
      __label__ = 41; break;
    case 41: 
      var $174=$retval;
      STACKTOP = __stackBase__;
      return $174;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_text_compress["X"]=1;

function _png_write_compressed_data_out($png_ptr, $comp, $data_len) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $comp_addr;
      var $data_len_addr;
      var $i;
      var $z_cmf;
      var $z_cinfo;
      var $half_z_window_size;
      var $uncompressed_text_size;
      var $tmp;
      var $tmp56;
      $png_ptr_addr=$png_ptr;
      $comp_addr=$comp;
      $data_len_addr=$data_len;
      var $0=$comp_addr;
      var $input=(($0)|0);
      var $1=HEAP32[(($input)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $3=$comp_addr;
      var $input1=(($3)|0);
      var $4=HEAP32[(($input1)>>2)];
      var $5=$data_len_addr;
      _png_write_chunk_data($2, $4, $5);
      __label__ = 33; break;
    case 3: 
      var $6=$data_len_addr;
      var $cmp=(($6)>>>0) >= 2;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 24; break; }
    case 4: 
      var $7=$comp_addr;
      var $input_len=(($7+4)|0);
      var $8=HEAPU32[(($input_len)>>2)];
      var $cmp2=(($8)>>>0) < 16384;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 24; break; }
    case 5: 
      var $9=$png_ptr_addr;
      var $zbuf_size=(($9+156)|0);
      var $10=HEAPU32[(($zbuf_size)>>2)];
      var $cmp4=(($10)>>>0) > 1;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 24; break; }
    case 6: 
      var $11=$comp_addr;
      var $num_output_ptr=(($11+8)|0);
      var $12=HEAP32[(($num_output_ptr)>>2)];
      var $tobool6=(($12)|0)!=0;
      if ($tobool6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $13=$comp_addr;
      var $output_ptr=(($13+16)|0);
      var $14=HEAP32[(($output_ptr)>>2)];
      var $arrayidx=(($14)|0);
      var $15=HEAP32[(($arrayidx)>>2)];
      var $arrayidx8=(($15)|0);
      var $16=HEAPU8[($arrayidx8)];
      var $conv=(($16)&255);
      $z_cmf=$conv;
      __label__ = 9; break;
    case 8: 
      var $17=$png_ptr_addr;
      var $zbuf=(($17+152)|0);
      var $18=HEAP32[(($zbuf)>>2)];
      var $arrayidx9=(($18)|0);
      var $19=HEAPU8[($arrayidx9)];
      var $conv10=(($19)&255);
      $z_cmf=$conv10;
      __label__ = 9; break;
    case 9: 
      var $20=$z_cmf;
      var $and=$20 & 15;
      var $cmp12=(($and)|0)==8;
      if ($cmp12) { __label__ = 10; break; } else { __label__ = 22; break; }
    case 10: 
      var $21=$z_cmf;
      var $and15=$21 & 240;
      var $cmp16=(($and15)>>>0) <= 112;
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 22; break; }
    case 11: 
      var $22=$comp_addr;
      var $input_len19=(($22+4)|0);
      var $23=HEAP32[(($input_len19)>>2)];
      $uncompressed_text_size=$23;
      var $24=$z_cmf;
      var $shr=$24 >>> 4;
      $z_cinfo=$shr;
      var $25=$z_cinfo;
      var $add=(($25+7)|0);
      var $shl=1 << $add;
      $half_z_window_size=$shl;
      __label__ = 12; break;
    case 12: 
      var $26=$uncompressed_text_size;
      var $27=$half_z_window_size;
      var $cmp20=(($26)>>>0) <= (($27)>>>0);
      if ($cmp20) { __label__ = 13; break; } else { var $29 = 0;__label__ = 14; break; }
    case 13: 
      var $28=$half_z_window_size;
      var $cmp22=(($28)>>>0) >= 256;
      var $29 = $cmp22;__label__ = 14; break;
    case 14: 
      var $29;
      if ($29) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $30=$z_cinfo;
      var $dec=(($30-1)|0);
      $z_cinfo=$dec;
      var $31=$half_z_window_size;
      var $shr24=$31 >>> 1;
      $half_z_window_size=$shr24;
      __label__ = 12; break;
    case 16: 
      var $32=$z_cmf;
      var $and25=$32 & 15;
      var $33=$z_cinfo;
      var $shl26=$33 << 4;
      var $or=$and25 | $shl26;
      $z_cmf=$or;
      var $34=$comp_addr;
      var $num_output_ptr27=(($34+8)|0);
      var $35=HEAP32[(($num_output_ptr27)>>2)];
      var $tobool28=(($35)|0)!=0;
      if ($tobool28) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $36=$comp_addr;
      var $output_ptr30=(($36+16)|0);
      var $37=HEAP32[(($output_ptr30)>>2)];
      var $arrayidx31=(($37)|0);
      var $38=HEAP32[(($arrayidx31)>>2)];
      var $arrayidx32=(($38)|0);
      var $39=HEAPU8[($arrayidx32)];
      var $conv33=(($39)&255);
      var $40=$z_cmf;
      var $cmp34=(($conv33)|0)!=(($40)|0);
      if ($cmp34) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $41=$z_cmf;
      var $conv37=(($41) & 255);
      var $42=$comp_addr;
      var $output_ptr38=(($42+16)|0);
      var $43=HEAP32[(($output_ptr38)>>2)];
      var $arrayidx39=(($43)|0);
      var $44=HEAP32[(($arrayidx39)>>2)];
      var $arrayidx40=(($44)|0);
      HEAP8[($arrayidx40)]=$conv37;
      var $45=$comp_addr;
      var $output_ptr41=(($45+16)|0);
      var $46=HEAP32[(($output_ptr41)>>2)];
      var $arrayidx42=(($46)|0);
      var $47=HEAP32[(($arrayidx42)>>2)];
      var $arrayidx43=(($47+1)|0);
      var $48=HEAPU8[($arrayidx43)];
      var $conv44=(($48)&255);
      var $and45=$conv44 & 224;
      $tmp=$and45;
      var $49=$z_cmf;
      var $shl46=$49 << 8;
      var $50=$tmp;
      var $add47=(($shl46+$50)|0);
      var $rem=(($add47)>>>0)%31;
      var $sub=((31-$rem)|0);
      var $51=$tmp;
      var $add48=(($51+$sub)|0);
      $tmp=$add48;
      var $52=$tmp;
      var $conv49=(($52) & 255);
      var $53=$comp_addr;
      var $output_ptr50=(($53+16)|0);
      var $54=HEAP32[(($output_ptr50)>>2)];
      var $arrayidx51=(($54)|0);
      var $55=HEAP32[(($arrayidx51)>>2)];
      var $arrayidx52=(($55+1)|0);
      HEAP8[($arrayidx52)]=$conv49;
      __label__ = 19; break;
    case 19: 
      __label__ = 21; break;
    case 20: 
      var $56=$z_cmf;
      var $conv57=(($56) & 255);
      var $57=$png_ptr_addr;
      var $zbuf58=(($57+152)|0);
      var $58=HEAP32[(($zbuf58)>>2)];
      var $arrayidx59=(($58)|0);
      HEAP8[($arrayidx59)]=$conv57;
      var $59=$png_ptr_addr;
      var $zbuf60=(($59+152)|0);
      var $60=HEAP32[(($zbuf60)>>2)];
      var $arrayidx61=(($60+1)|0);
      var $61=HEAPU8[($arrayidx61)];
      var $conv62=(($61)&255);
      var $and63=$conv62 & 224;
      $tmp56=$and63;
      var $62=$z_cmf;
      var $shl64=$62 << 8;
      var $63=$tmp56;
      var $add65=(($shl64+$63)|0);
      var $rem66=(($add65)>>>0)%31;
      var $sub67=((31-$rem66)|0);
      var $64=$tmp56;
      var $add68=(($64+$sub67)|0);
      $tmp56=$add68;
      var $65=$tmp56;
      var $conv69=(($65) & 255);
      var $66=$png_ptr_addr;
      var $zbuf70=(($66+152)|0);
      var $67=HEAP32[(($zbuf70)>>2)];
      var $arrayidx71=(($67+1)|0);
      HEAP8[($arrayidx71)]=$conv69;
      __label__ = 21; break;
    case 21: 
      __label__ = 23; break;
    case 22: 
      var $68=$png_ptr_addr;
      _png_error($68, ((STRING_TABLE.__str601193)|0));
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      $i=0;
      __label__ = 25; break;
    case 25: 
      var $69=$i;
      var $70=$comp_addr;
      var $num_output_ptr76=(($70+8)|0);
      var $71=HEAP32[(($num_output_ptr76)>>2)];
      var $cmp77=(($69)|0) < (($71)|0);
      if ($cmp77) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $72=$png_ptr_addr;
      var $73=$i;
      var $74=$comp_addr;
      var $output_ptr79=(($74+16)|0);
      var $75=HEAP32[(($output_ptr79)>>2)];
      var $arrayidx80=(($75+($73<<2))|0);
      var $76=HEAP32[(($arrayidx80)>>2)];
      var $77=$png_ptr_addr;
      var $zbuf_size81=(($77+156)|0);
      var $78=HEAP32[(($zbuf_size81)>>2)];
      _png_write_chunk_data($72, $76, $78);
      var $79=$png_ptr_addr;
      var $80=$i;
      var $81=$comp_addr;
      var $output_ptr82=(($81+16)|0);
      var $82=HEAP32[(($output_ptr82)>>2)];
      var $arrayidx83=(($82+($80<<2))|0);
      var $83=HEAP32[(($arrayidx83)>>2)];
      _png_free($79, $83);
      __label__ = 27; break;
    case 27: 
      var $84=$i;
      var $inc=(($84+1)|0);
      $i=$inc;
      __label__ = 25; break;
    case 28: 
      var $85=$comp_addr;
      var $max_output_ptr=(($85+12)|0);
      var $86=HEAP32[(($max_output_ptr)>>2)];
      var $cmp84=(($86)|0)!=0;
      if ($cmp84) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $87=$png_ptr_addr;
      var $88=$comp_addr;
      var $output_ptr87=(($88+16)|0);
      var $89=HEAP32[(($output_ptr87)>>2)];
      var $90=$89;
      _png_free($87, $90);
      __label__ = 30; break;
    case 30: 
      var $91=$png_ptr_addr;
      var $zstream=(($91+96)|0);
      var $avail_out=(($zstream+16)|0);
      var $92=HEAPU32[(($avail_out)>>2)];
      var $93=$png_ptr_addr;
      var $zbuf_size89=(($93+156)|0);
      var $94=HEAPU32[(($zbuf_size89)>>2)];
      var $cmp90=(($92)>>>0) < (($94)>>>0);
      if ($cmp90) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $95=$png_ptr_addr;
      var $96=$png_ptr_addr;
      var $zbuf93=(($96+152)|0);
      var $97=HEAP32[(($zbuf93)>>2)];
      var $98=$png_ptr_addr;
      var $zbuf_size94=(($98+156)|0);
      var $99=HEAP32[(($zbuf_size94)>>2)];
      var $100=$png_ptr_addr;
      var $zstream95=(($100+96)|0);
      var $avail_out96=(($zstream95+16)|0);
      var $101=HEAP32[(($avail_out96)>>2)];
      var $sub97=(($99-$101)|0);
      _png_write_chunk_data($95, $97, $sub97);
      __label__ = 32; break;
    case 32: 
      var $102=$png_ptr_addr;
      _png_zlib_release($102);
      __label__ = 33; break;
    case 33: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_compressed_data_out["X"]=1;

function _png_write_sPLT($png_ptr, $spalette) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $spalette_addr;
      var $name_len;
      var $new_name=__stackBase__;
      var $entrybuf=__stackBase__+4;
      var $entry_size;
      var $palette_size;
      var $ep;
      $png_ptr_addr=$png_ptr;
      $spalette_addr=$spalette;
      var $0=$spalette_addr;
      var $depth=(($0+4)|0);
      var $1=HEAPU8[($depth)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0)==8;
      var $cond=$cmp ? 6 : 10;
      $entry_size=$cond;
      var $2=$entry_size;
      var $3=$spalette_addr;
      var $nentries=(($3+12)|0);
      var $4=HEAP32[(($nentries)>>2)];
      var $mul=(($2*$4)|0);
      $palette_size=$mul;
      var $5=$png_ptr_addr;
      var $6=$spalette_addr;
      var $name=(($6)|0);
      var $7=HEAP32[(($name)>>2)];
      var $call=_png_check_keyword($5, $7, $new_name);
      $name_len=$call;
      var $cmp2=(($call)|0)==0;
      if ($cmp2) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 11; break;
    case 3: 
      var $8=$png_ptr_addr;
      var $9=$name_len;
      var $add=(($9+2)|0);
      var $10=$palette_size;
      var $add4=(($add+$10)|0);
      _png_write_chunk_header($8, 1934642260, $add4);
      var $11=$png_ptr_addr;
      var $12=HEAP32[(($new_name)>>2)];
      var $13=$name_len;
      var $add5=(($13+1)|0);
      _png_write_chunk_data($11, $12, $add5);
      var $14=$png_ptr_addr;
      var $15=$spalette_addr;
      var $depth6=(($15+4)|0);
      _png_write_chunk_data($14, $depth6, 1);
      var $16=$spalette_addr;
      var $entries=(($16+8)|0);
      var $17=HEAP32[(($entries)>>2)];
      $ep=$17;
      __label__ = 4; break;
    case 4: 
      var $18=$ep;
      var $19=$spalette_addr;
      var $entries7=(($19+8)|0);
      var $20=HEAP32[(($entries7)>>2)];
      var $21=$spalette_addr;
      var $nentries8=(($21+12)|0);
      var $22=HEAP32[(($nentries8)>>2)];
      var $add_ptr=(($20+$22*10)|0);
      var $cmp9=(($18)>>>0) < (($add_ptr)>>>0);
      if ($cmp9) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $23=$spalette_addr;
      var $depth11=(($23+4)|0);
      var $24=HEAPU8[($depth11)];
      var $conv12=(($24)&255);
      var $cmp13=(($conv12)|0)==8;
      if ($cmp13) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $25=$ep;
      var $red=(($25)|0);
      var $26=HEAP16[(($red)>>1)];
      var $conv16=(($26) & 255);
      var $arrayidx=(($entrybuf)|0);
      HEAP8[($arrayidx)]=$conv16;
      var $27=$ep;
      var $green=(($27+2)|0);
      var $28=HEAP16[(($green)>>1)];
      var $conv17=(($28) & 255);
      var $arrayidx18=(($entrybuf+1)|0);
      HEAP8[($arrayidx18)]=$conv17;
      var $29=$ep;
      var $blue=(($29+4)|0);
      var $30=HEAP16[(($blue)>>1)];
      var $conv19=(($30) & 255);
      var $arrayidx20=(($entrybuf+2)|0);
      HEAP8[($arrayidx20)]=$conv19;
      var $31=$ep;
      var $alpha=(($31+6)|0);
      var $32=HEAP16[(($alpha)>>1)];
      var $conv21=(($32) & 255);
      var $arrayidx22=(($entrybuf+3)|0);
      HEAP8[($arrayidx22)]=$conv21;
      var $arraydecay=(($entrybuf)|0);
      var $add_ptr23=(($arraydecay+4)|0);
      var $33=$ep;
      var $frequency=(($33+8)|0);
      var $34=HEAPU16[(($frequency)>>1)];
      var $conv24=(($34)&65535);
      _png_save_uint_16($add_ptr23, $conv24);
      __label__ = 8; break;
    case 7: 
      var $arraydecay25=(($entrybuf)|0);
      var $add_ptr26=(($arraydecay25)|0);
      var $35=$ep;
      var $red27=(($35)|0);
      var $36=HEAPU16[(($red27)>>1)];
      var $conv28=(($36)&65535);
      _png_save_uint_16($add_ptr26, $conv28);
      var $arraydecay29=(($entrybuf)|0);
      var $add_ptr30=(($arraydecay29+2)|0);
      var $37=$ep;
      var $green31=(($37+2)|0);
      var $38=HEAPU16[(($green31)>>1)];
      var $conv32=(($38)&65535);
      _png_save_uint_16($add_ptr30, $conv32);
      var $arraydecay33=(($entrybuf)|0);
      var $add_ptr34=(($arraydecay33+4)|0);
      var $39=$ep;
      var $blue35=(($39+4)|0);
      var $40=HEAPU16[(($blue35)>>1)];
      var $conv36=(($40)&65535);
      _png_save_uint_16($add_ptr34, $conv36);
      var $arraydecay37=(($entrybuf)|0);
      var $add_ptr38=(($arraydecay37+6)|0);
      var $41=$ep;
      var $alpha39=(($41+6)|0);
      var $42=HEAPU16[(($alpha39)>>1)];
      var $conv40=(($42)&65535);
      _png_save_uint_16($add_ptr38, $conv40);
      var $arraydecay41=(($entrybuf)|0);
      var $add_ptr42=(($arraydecay41+8)|0);
      var $43=$ep;
      var $frequency43=(($43+8)|0);
      var $44=HEAPU16[(($frequency43)>>1)];
      var $conv44=(($44)&65535);
      _png_save_uint_16($add_ptr42, $conv44);
      __label__ = 8; break;
    case 8: 
      var $45=$png_ptr_addr;
      var $arraydecay46=(($entrybuf)|0);
      var $46=$entry_size;
      _png_write_chunk_data($45, $arraydecay46, $46);
      __label__ = 9; break;
    case 9: 
      var $47=$ep;
      var $incdec_ptr=(($47+10)|0);
      $ep=$incdec_ptr;
      __label__ = 4; break;
    case 10: 
      var $48=$png_ptr_addr;
      _png_write_chunk_end($48);
      var $49=$png_ptr_addr;
      var $50=HEAP32[(($new_name)>>2)];
      _png_free($49, $50);
      __label__ = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_sPLT["X"]=1;

function _png_write_sBIT($png_ptr, $sbit, $color_type) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $sbit_addr;
      var $color_type_addr;
      var $buf=__stackBase__;
      var $size;
      var $maxbits;
      $png_ptr_addr=$png_ptr;
      $sbit_addr=$sbit;
      $color_type_addr=$color_type;
      var $0=$color_type_addr;
      var $and=$0 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 13; break; }
    case 2: 
      var $1=$color_type_addr;
      var $cmp=(($1)|0)==3;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $cond = 8;__label__ = 5; break;
    case 4: 
      var $2=$png_ptr_addr;
      var $usr_bit_depth=(($2+293)|0);
      var $3=HEAPU8[($usr_bit_depth)];
      var $conv=(($3)&255);
      var $cond = $conv;__label__ = 5; break;
    case 5: 
      var $cond;
      var $conv1=(($cond) & 255);
      $maxbits=$conv1;
      var $4=$sbit_addr;
      var $red=(($4)|0);
      var $5=HEAPU8[($red)];
      var $conv2=(($5)&255);
      var $cmp3=(($conv2)|0)==0;
      if ($cmp3) { __label__ = 11; break; } else { __label__ = 6; break; }
    case 6: 
      var $6=$sbit_addr;
      var $red5=(($6)|0);
      var $7=HEAPU8[($red5)];
      var $conv6=(($7)&255);
      var $8=$maxbits;
      var $conv7=(($8)&255);
      var $cmp8=(($conv6)|0) > (($conv7)|0);
      if ($cmp8) { __label__ = 11; break; } else { __label__ = 7; break; }
    case 7: 
      var $9=$sbit_addr;
      var $green=(($9+1)|0);
      var $10=HEAPU8[($green)];
      var $conv11=(($10)&255);
      var $cmp12=(($conv11)|0)==0;
      if ($cmp12) { __label__ = 11; break; } else { __label__ = 8; break; }
    case 8: 
      var $11=$sbit_addr;
      var $green15=(($11+1)|0);
      var $12=HEAPU8[($green15)];
      var $conv16=(($12)&255);
      var $13=$maxbits;
      var $conv17=(($13)&255);
      var $cmp18=(($conv16)|0) > (($conv17)|0);
      if ($cmp18) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $14=$sbit_addr;
      var $blue=(($14+2)|0);
      var $15=HEAPU8[($blue)];
      var $conv21=(($15)&255);
      var $cmp22=(($conv21)|0)==0;
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $16=$sbit_addr;
      var $blue25=(($16+2)|0);
      var $17=HEAPU8[($blue25)];
      var $conv26=(($17)&255);
      var $18=$maxbits;
      var $conv27=(($18)&255);
      var $cmp28=(($conv26)|0) > (($conv27)|0);
      if ($cmp28) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $19=$png_ptr_addr;
      _png_warning($19, ((STRING_TABLE.__str171150)|0));
      __label__ = 23; break;
    case 12: 
      var $20=$sbit_addr;
      var $red31=(($20)|0);
      var $21=HEAP8[($red31)];
      var $arrayidx=(($buf)|0);
      HEAP8[($arrayidx)]=$21;
      var $22=$sbit_addr;
      var $green32=(($22+1)|0);
      var $23=HEAP8[($green32)];
      var $arrayidx33=(($buf+1)|0);
      HEAP8[($arrayidx33)]=$23;
      var $24=$sbit_addr;
      var $blue34=(($24+2)|0);
      var $25=HEAP8[($blue34)];
      var $arrayidx35=(($buf+2)|0);
      HEAP8[($arrayidx35)]=$25;
      $size=3;
      __label__ = 17; break;
    case 13: 
      var $26=$sbit_addr;
      var $gray=(($26+3)|0);
      var $27=HEAPU8[($gray)];
      var $conv36=(($27)&255);
      var $cmp37=(($conv36)|0)==0;
      if ($cmp37) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $28=$sbit_addr;
      var $gray40=(($28+3)|0);
      var $29=HEAPU8[($gray40)];
      var $conv41=(($29)&255);
      var $30=$png_ptr_addr;
      var $usr_bit_depth42=(($30+293)|0);
      var $31=HEAPU8[($usr_bit_depth42)];
      var $conv43=(($31)&255);
      var $cmp44=(($conv41)|0) > (($conv43)|0);
      if ($cmp44) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $32=$png_ptr_addr;
      _png_warning($32, ((STRING_TABLE.__str171150)|0));
      __label__ = 23; break;
    case 16: 
      var $33=$sbit_addr;
      var $gray48=(($33+3)|0);
      var $34=HEAP8[($gray48)];
      var $arrayidx49=(($buf)|0);
      HEAP8[($arrayidx49)]=$34;
      $size=1;
      __label__ = 17; break;
    case 17: 
      var $35=$color_type_addr;
      var $and51=$35 & 4;
      var $tobool52=(($and51)|0)!=0;
      if ($tobool52) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: 
      var $36=$sbit_addr;
      var $alpha=(($36+4)|0);
      var $37=HEAPU8[($alpha)];
      var $conv54=(($37)&255);
      var $cmp55=(($conv54)|0)==0;
      if ($cmp55) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $38=$sbit_addr;
      var $alpha58=(($38+4)|0);
      var $39=HEAPU8[($alpha58)];
      var $conv59=(($39)&255);
      var $40=$png_ptr_addr;
      var $usr_bit_depth60=(($40+293)|0);
      var $41=HEAPU8[($usr_bit_depth60)];
      var $conv61=(($41)&255);
      var $cmp62=(($conv59)|0) > (($conv61)|0);
      if ($cmp62) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $42=$png_ptr_addr;
      _png_warning($42, ((STRING_TABLE.__str171150)|0));
      __label__ = 23; break;
    case 21: 
      var $43=$sbit_addr;
      var $alpha66=(($43+4)|0);
      var $44=HEAP8[($alpha66)];
      var $45=$size;
      var $inc=(($45+1)|0);
      $size=$inc;
      var $arrayidx67=(($buf+$45)|0);
      HEAP8[($arrayidx67)]=$44;
      __label__ = 22; break;
    case 22: 
      var $46=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      var $47=$size;
      _png_write_complete_chunk($46, 1933723988, $arraydecay, $47);
      __label__ = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_sBIT["X"]=1;

function _png_write_cHRM_fixed($png_ptr, $white_x, $white_y, $red_x, $red_y, $green_x, $green_y, $blue_x, $blue_y) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $white_x_addr;
      var $white_y_addr;
      var $red_x_addr;
      var $red_y_addr;
      var $green_x_addr;
      var $green_y_addr;
      var $blue_x_addr;
      var $blue_y_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $white_x_addr=$white_x;
      $white_y_addr=$white_y;
      $red_x_addr=$red_x;
      $red_y_addr=$red_y;
      $green_x_addr=$green_x;
      $green_y_addr=$green_y;
      $blue_x_addr=$blue_x;
      $blue_y_addr=$blue_y;
      var $0=$png_ptr_addr;
      var $1=$white_x_addr;
      var $2=$white_y_addr;
      var $3=$red_x_addr;
      var $4=$red_y_addr;
      var $5=$green_x_addr;
      var $6=$green_y_addr;
      var $7=$blue_x_addr;
      var $8=$blue_y_addr;
      var $call=_png_check_cHRM_fixed($0, $1, $2, $3, $4, $5, $6, $7, $8);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $arraydecay=(($buf)|0);
      var $9=$white_x_addr;
      _png_save_uint_32($arraydecay, $9);
      var $arraydecay1=(($buf)|0);
      var $add_ptr=(($arraydecay1+4)|0);
      var $10=$white_y_addr;
      _png_save_uint_32($add_ptr, $10);
      var $arraydecay2=(($buf)|0);
      var $add_ptr3=(($arraydecay2+8)|0);
      var $11=$red_x_addr;
      _png_save_uint_32($add_ptr3, $11);
      var $arraydecay4=(($buf)|0);
      var $add_ptr5=(($arraydecay4+12)|0);
      var $12=$red_y_addr;
      _png_save_uint_32($add_ptr5, $12);
      var $arraydecay6=(($buf)|0);
      var $add_ptr7=(($arraydecay6+16)|0);
      var $13=$green_x_addr;
      _png_save_uint_32($add_ptr7, $13);
      var $arraydecay8=(($buf)|0);
      var $add_ptr9=(($arraydecay8+20)|0);
      var $14=$green_y_addr;
      _png_save_uint_32($add_ptr9, $14);
      var $arraydecay10=(($buf)|0);
      var $add_ptr11=(($arraydecay10+24)|0);
      var $15=$blue_x_addr;
      _png_save_uint_32($add_ptr11, $15);
      var $arraydecay12=(($buf)|0);
      var $add_ptr13=(($arraydecay12+28)|0);
      var $16=$blue_y_addr;
      _png_save_uint_32($add_ptr13, $16);
      var $17=$png_ptr_addr;
      var $arraydecay14=(($buf)|0);
      _png_write_complete_chunk($17, 1665684045, $arraydecay14, 32);
      __label__ = 3; break;
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_cHRM_fixed["X"]=1;

function _png_write_tRNS($png_ptr, $trans_alpha, $tran, $num_trans, $color_type) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $trans_alpha_addr;
      var $tran_addr;
      var $num_trans_addr;
      var $color_type_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $trans_alpha_addr=$trans_alpha;
      $tran_addr=$tran;
      $num_trans_addr=$num_trans;
      $color_type_addr=$color_type;
      var $0=$color_type_addr;
      var $cmp=(($0)|0)==3;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; }
    case 2: 
      var $1=$num_trans_addr;
      var $cmp1=(($1)|0) <= 0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$num_trans_addr;
      var $3=$png_ptr_addr;
      var $num_palette=(($3+276)|0);
      var $4=HEAPU16[(($num_palette)>>1)];
      var $conv=(($4)&65535);
      var $cmp2=(($2)|0) > (($conv)|0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str181151)|0));
      __label__ = 18; break;
    case 5: 
      var $6=$png_ptr_addr;
      var $7=$trans_alpha_addr;
      var $8=$num_trans_addr;
      _png_write_complete_chunk($6, 1951551059, $7, $8);
      __label__ = 18; break;
    case 6: 
      var $9=$color_type_addr;
      var $cmp5=(($9)|0)==0;
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $10=$tran_addr;
      var $gray=(($10+8)|0);
      var $11=HEAPU16[(($gray)>>1)];
      var $conv8=(($11)&65535);
      var $12=$png_ptr_addr;
      var $bit_depth=(($12+292)|0);
      var $13=HEAPU8[($bit_depth)];
      var $conv9=(($13)&255);
      var $shl=1 << $conv9;
      var $cmp10=(($conv8)|0) >= (($shl)|0);
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $14=$png_ptr_addr;
      _png_warning($14, ((STRING_TABLE.__str191152)|0));
      __label__ = 18; break;
    case 9: 
      var $arraydecay=(($buf)|0);
      var $15=$tran_addr;
      var $gray14=(($15+8)|0);
      var $16=HEAPU16[(($gray14)>>1)];
      var $conv15=(($16)&65535);
      _png_save_uint_16($arraydecay, $conv15);
      var $17=$png_ptr_addr;
      var $arraydecay16=(($buf)|0);
      _png_write_complete_chunk($17, 1951551059, $arraydecay16, 2);
      __label__ = 17; break;
    case 10: 
      var $18=$color_type_addr;
      var $cmp18=(($18)|0)==2;
      if ($cmp18) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $arraydecay21=(($buf)|0);
      var $19=$tran_addr;
      var $red=(($19+2)|0);
      var $20=HEAPU16[(($red)>>1)];
      var $conv22=(($20)&65535);
      _png_save_uint_16($arraydecay21, $conv22);
      var $arraydecay23=(($buf)|0);
      var $add_ptr=(($arraydecay23+2)|0);
      var $21=$tran_addr;
      var $green=(($21+4)|0);
      var $22=HEAPU16[(($green)>>1)];
      var $conv24=(($22)&65535);
      _png_save_uint_16($add_ptr, $conv24);
      var $arraydecay25=(($buf)|0);
      var $add_ptr26=(($arraydecay25+4)|0);
      var $23=$tran_addr;
      var $blue=(($23+6)|0);
      var $24=HEAPU16[(($blue)>>1)];
      var $conv27=(($24)&65535);
      _png_save_uint_16($add_ptr26, $conv27);
      var $25=$png_ptr_addr;
      var $bit_depth28=(($25+292)|0);
      var $26=HEAPU8[($bit_depth28)];
      var $conv29=(($26)&255);
      var $cmp30=(($conv29)|0)==8;
      if ($cmp30) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $arrayidx=(($buf)|0);
      var $27=HEAPU8[($arrayidx)];
      var $conv32=(($27)&255);
      var $arrayidx33=(($buf+2)|0);
      var $28=HEAPU8[($arrayidx33)];
      var $conv34=(($28)&255);
      var $or=$conv32 | $conv34;
      var $arrayidx35=(($buf+4)|0);
      var $29=HEAPU8[($arrayidx35)];
      var $conv36=(($29)&255);
      var $or37=$or | $conv36;
      var $tobool=(($or37)|0)!=0;
      if ($tobool) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $30=$png_ptr_addr;
      _png_warning($30, ((STRING_TABLE.__str201153)|0));
      __label__ = 18; break;
    case 14: 
      var $31=$png_ptr_addr;
      var $arraydecay40=(($buf)|0);
      _png_write_complete_chunk($31, 1951551059, $arraydecay40, 6);
      __label__ = 16; break;
    case 15: 
      var $32=$png_ptr_addr;
      _png_warning($32, ((STRING_TABLE.__str211154)|0));
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_tRNS["X"]=1;

function _png_write_bKGD($png_ptr, $back, $color_type) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $back_addr;
      var $color_type_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $back_addr=$back;
      $color_type_addr=$color_type;
      var $0=$color_type_addr;
      var $cmp=(($0)|0)==3;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $1=$png_ptr_addr;
      var $num_palette=(($1+276)|0);
      var $2=HEAPU16[(($num_palette)>>1)];
      var $conv=(($2)&65535);
      var $tobool=(($conv)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$png_ptr_addr;
      var $mng_features_permitted=(($3+576)|0);
      var $4=HEAP32[(($mng_features_permitted)>>2)];
      var $and=$4 & 1;
      var $tobool1=(($and)|0)!=0;
      if ($tobool1) { __label__ = 6; break; } else { __label__ = 4; break; }
    case 4: 
      var $5=$back_addr;
      var $index=(($5)|0);
      var $6=HEAPU8[($index)];
      var $conv2=(($6)&255);
      var $7=$png_ptr_addr;
      var $num_palette3=(($7+276)|0);
      var $8=HEAPU16[(($num_palette3)>>1)];
      var $conv4=(($8)&65535);
      var $cmp5=(($conv2)|0) >= (($conv4)|0);
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $9=$png_ptr_addr;
      _png_warning($9, ((STRING_TABLE.__str221155)|0));
      __label__ = 16; break;
    case 6: 
      var $10=$back_addr;
      var $index8=(($10)|0);
      var $11=HEAP8[($index8)];
      var $arrayidx=(($buf)|0);
      HEAP8[($arrayidx)]=$11;
      var $12=$png_ptr_addr;
      var $arraydecay=(($buf)|0);
      _png_write_complete_chunk($12, 1649100612, $arraydecay, 1);
      __label__ = 16; break;
    case 7: 
      var $13=$color_type_addr;
      var $and9=$13 & 2;
      var $tobool10=(($and9)|0)!=0;
      if ($tobool10) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $arraydecay12=(($buf)|0);
      var $14=$back_addr;
      var $red=(($14+2)|0);
      var $15=HEAPU16[(($red)>>1)];
      var $conv13=(($15)&65535);
      _png_save_uint_16($arraydecay12, $conv13);
      var $arraydecay14=(($buf)|0);
      var $add_ptr=(($arraydecay14+2)|0);
      var $16=$back_addr;
      var $green=(($16+4)|0);
      var $17=HEAPU16[(($green)>>1)];
      var $conv15=(($17)&65535);
      _png_save_uint_16($add_ptr, $conv15);
      var $arraydecay16=(($buf)|0);
      var $add_ptr17=(($arraydecay16+4)|0);
      var $18=$back_addr;
      var $blue=(($18+6)|0);
      var $19=HEAPU16[(($blue)>>1)];
      var $conv18=(($19)&65535);
      _png_save_uint_16($add_ptr17, $conv18);
      var $20=$png_ptr_addr;
      var $bit_depth=(($20+292)|0);
      var $21=HEAPU8[($bit_depth)];
      var $conv19=(($21)&255);
      var $cmp20=(($conv19)|0)==8;
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $arrayidx23=(($buf)|0);
      var $22=HEAPU8[($arrayidx23)];
      var $conv24=(($22)&255);
      var $arrayidx25=(($buf+2)|0);
      var $23=HEAPU8[($arrayidx25)];
      var $conv26=(($23)&255);
      var $or=$conv24 | $conv26;
      var $arrayidx27=(($buf+4)|0);
      var $24=HEAPU8[($arrayidx27)];
      var $conv28=(($24)&255);
      var $or29=$or | $conv28;
      var $tobool30=(($or29)|0)!=0;
      if ($tobool30) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $25=$png_ptr_addr;
      _png_warning($25, ((STRING_TABLE.__str231156)|0));
      __label__ = 16; break;
    case 11: 
      var $26=$png_ptr_addr;
      var $arraydecay33=(($buf)|0);
      _png_write_complete_chunk($26, 1649100612, $arraydecay33, 6);
      __label__ = 15; break;
    case 12: 
      var $27=$back_addr;
      var $gray=(($27+8)|0);
      var $28=HEAPU16[(($gray)>>1)];
      var $conv35=(($28)&65535);
      var $29=$png_ptr_addr;
      var $bit_depth36=(($29+292)|0);
      var $30=HEAPU8[($bit_depth36)];
      var $conv37=(($30)&255);
      var $shl=1 << $conv37;
      var $cmp38=(($conv35)|0) >= (($shl)|0);
      if ($cmp38) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $31=$png_ptr_addr;
      _png_warning($31, ((STRING_TABLE.__str241157)|0));
      __label__ = 16; break;
    case 14: 
      var $arraydecay42=(($buf)|0);
      var $32=$back_addr;
      var $gray43=(($32+8)|0);
      var $33=HEAPU16[(($gray43)>>1)];
      var $conv44=(($33)&65535);
      _png_save_uint_16($arraydecay42, $conv44);
      var $34=$png_ptr_addr;
      var $arraydecay45=(($buf)|0);
      _png_write_complete_chunk($34, 1649100612, $arraydecay45, 2);
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_bKGD["X"]=1;

function _png_write_hIST($png_ptr, $hist, $num_hist) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $hist_addr;
      var $num_hist_addr;
      var $i;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $hist_addr=$hist;
      $num_hist_addr=$num_hist;
      var $0=$num_hist_addr;
      var $1=$png_ptr_addr;
      var $num_palette=(($1+276)|0);
      var $2=HEAPU16[(($num_palette)>>1)];
      var $conv=(($2)&65535);
      var $cmp=(($0)|0) > (($conv)|0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $3=$png_ptr_addr;
      _png_warning($3, ((STRING_TABLE.__str251158)|0));
      __label__ = 8; break;
    case 3: 
      var $4=$png_ptr_addr;
      var $5=$num_hist_addr;
      var $mul=((($5<<1))|0);
      _png_write_chunk_header($4, 1749635924, $mul);
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $6=$i;
      var $7=$num_hist_addr;
      var $cmp2=(($6)|0) < (($7)|0);
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $arraydecay=(($buf)|0);
      var $8=$i;
      var $9=$hist_addr;
      var $arrayidx=(($9+($8<<1))|0);
      var $10=HEAPU16[(($arrayidx)>>1)];
      var $conv4=(($10)&65535);
      _png_save_uint_16($arraydecay, $conv4);
      var $11=$png_ptr_addr;
      var $arraydecay5=(($buf)|0);
      _png_write_chunk_data($11, $arraydecay5, 2);
      __label__ = 6; break;
    case 6: 
      var $12=$i;
      var $inc=(($12+1)|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      var $13=$png_ptr_addr;
      _png_write_chunk_end($13);
      __label__ = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_tEXt($png_ptr, $key, $text, $text_len) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $key_addr;
      var $text_addr;
      var $text_len_addr;
      var $key_len;
      var $new_key=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $key_addr=$key;
      $text_addr=$text;
      $text_len_addr=$text_len;
      var $0=$png_ptr_addr;
      var $1=$key_addr;
      var $call=_png_check_keyword($0, $1, $new_key);
      $key_len=$call;
      var $cmp=(($call)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 10; break;
    case 3: 
      var $2=$text_addr;
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$text_addr;
      var $4=HEAP8[($3)];
      var $conv=(($4 << 24) >> 24);
      var $cmp2=(($conv)|0)==0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $text_len_addr=0;
      __label__ = 7; break;
    case 6: 
      var $5=$text_addr;
      var $call5=_strlen($5);
      $text_len_addr=$call5;
      __label__ = 7; break;
    case 7: 
      var $6=$png_ptr_addr;
      var $7=$key_len;
      var $8=$text_len_addr;
      var $add=(($7+$8)|0);
      var $add7=(($add+1)|0);
      _png_write_chunk_header($6, 1950701684, $add7);
      var $9=$png_ptr_addr;
      var $10=HEAP32[(($new_key)>>2)];
      var $11=$key_len;
      var $add8=(($11+1)|0);
      _png_write_chunk_data($9, $10, $add8);
      var $12=$text_len_addr;
      var $tobool=(($12)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $13=$png_ptr_addr;
      var $14=$text_addr;
      var $15=$text_len_addr;
      _png_write_chunk_data($13, $14, $15);
      __label__ = 9; break;
    case 9: 
      var $16=$png_ptr_addr;
      _png_write_chunk_end($16);
      var $17=$png_ptr_addr;
      var $18=HEAP32[(($new_key)>>2)];
      _png_free($17, $18);
      __label__ = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_tEXt["X"]=1;

function _png_write_zTXt($png_ptr, $key, $text, $text_len, $compression) {
  var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $key_addr;
      var $text_addr;
      var $text_len_addr;
      var $compression_addr;
      var $key_len;
      var $buf=__stackBase__;
      var $new_key=__stackBase__+4;
      var $comp=__stackBase__+8;
      $png_ptr_addr=$png_ptr;
      $key_addr=$key;
      $text_addr=$text;
      $text_len_addr=$text_len;
      $compression_addr=$compression;
      var $num_output_ptr=(($comp+8)|0);
      HEAP32[(($num_output_ptr)>>2)]=0;
      var $max_output_ptr=(($comp+12)|0);
      HEAP32[(($max_output_ptr)>>2)]=0;
      var $output_ptr=(($comp+16)|0);
      HEAP32[(($output_ptr)>>2)]=0;
      var $input=(($comp)|0);
      HEAP32[(($input)>>2)]=0;
      var $input_len=(($comp+4)|0);
      HEAP32[(($input_len)>>2)]=0;
      var $0=$png_ptr_addr;
      var $1=$key_addr;
      var $call=_png_check_keyword($0, $1, $new_key);
      $key_len=$call;
      var $cmp=(($call)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $3=HEAP32[(($new_key)>>2)];
      _png_free($2, $3);
      __label__ = 8; break;
    case 3: 
      var $4=$text_addr;
      var $cmp1=(($4)|0)==0;
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 4; break; }
    case 4: 
      var $5=$text_addr;
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $cmp2=(($conv)|0)==0;
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $7=$compression_addr;
      var $cmp5=(($7)|0)==-1;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $8=$png_ptr_addr;
      var $9=HEAP32[(($new_key)>>2)];
      var $10=$text_addr;
      _png_write_tEXt($8, $9, $10, 0);
      var $11=$png_ptr_addr;
      var $12=HEAP32[(($new_key)>>2)];
      _png_free($11, $12);
      __label__ = 8; break;
    case 7: 
      var $13=$text_addr;
      var $call9=_strlen($13);
      $text_len_addr=$call9;
      var $14=$png_ptr_addr;
      var $15=$text_addr;
      var $16=$text_len_addr;
      var $17=$compression_addr;
      var $call10=_png_text_compress($14, $15, $16, $17, $comp);
      $text_len_addr=$call10;
      var $18=$png_ptr_addr;
      var $19=$key_len;
      var $20=$text_len_addr;
      var $add=(($19+$20)|0);
      var $add11=(($add+2)|0);
      _png_write_chunk_header($18, 2052348020, $add11);
      var $21=$png_ptr_addr;
      var $22=HEAP32[(($new_key)>>2)];
      var $23=$key_len;
      var $add12=(($23+1)|0);
      _png_write_chunk_data($21, $22, $add12);
      var $24=$png_ptr_addr;
      var $25=HEAP32[(($new_key)>>2)];
      _png_free($24, $25);
      var $26=$compression_addr;
      var $conv13=(($26) & 255);
      HEAP8[($buf)]=$conv13;
      var $27=$png_ptr_addr;
      _png_write_chunk_data($27, $buf, 1);
      var $28=$png_ptr_addr;
      var $29=$text_len_addr;
      _png_write_compressed_data_out($28, $comp, $29);
      var $30=$png_ptr_addr;
      _png_write_chunk_end($30);
      __label__ = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_zTXt["X"]=1;

function _png_write_iTXt($png_ptr, $compression, $key, $lang, $lang_key, $text) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $compression_addr;
      var $key_addr;
      var $lang_addr;
      var $lang_key_addr;
      var $text_addr;
      var $lang_len;
      var $key_len;
      var $lang_key_len;
      var $text_len;
      var $new_lang=__stackBase__;
      var $new_key=__stackBase__+4;
      var $cbuf=__stackBase__+8;
      var $comp=__stackBase__+12;
      $png_ptr_addr=$png_ptr;
      $compression_addr=$compression;
      $key_addr=$key;
      $lang_addr=$lang;
      $lang_key_addr=$lang_key;
      $text_addr=$text;
      HEAP32[(($new_key)>>2)]=0;
      var $num_output_ptr=(($comp+8)|0);
      HEAP32[(($num_output_ptr)>>2)]=0;
      var $max_output_ptr=(($comp+12)|0);
      HEAP32[(($max_output_ptr)>>2)]=0;
      var $output_ptr=(($comp+16)|0);
      HEAP32[(($output_ptr)>>2)]=0;
      var $input=(($comp)|0);
      HEAP32[(($input)>>2)]=0;
      var $0=$png_ptr_addr;
      var $1=$key_addr;
      var $call=_png_check_keyword($0, $1, $new_key);
      $key_len=$call;
      var $cmp=(($call)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 22; break;
    case 3: 
      var $2=$png_ptr_addr;
      var $3=$lang_addr;
      var $call1=_png_check_keyword($2, $3, $new_lang);
      $lang_len=$call1;
      var $cmp2=(($call1)|0)==0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$png_ptr_addr;
      _png_warning($4, ((STRING_TABLE.__str341167)|0));
      HEAP32[(($new_lang)>>2)]=0;
      $lang_len=0;
      __label__ = 5; break;
    case 5: 
      var $5=$lang_key_addr;
      var $cmp5=(($5)|0)==0;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $lang_key_len=0;
      __label__ = 8; break;
    case 7: 
      var $6=$lang_key_addr;
      var $call7=_strlen($6);
      $lang_key_len=$call7;
      __label__ = 8; break;
    case 8: 
      var $7=$text_addr;
      var $cmp9=(($7)|0)==0;
      if ($cmp9) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $text_len=0;
      __label__ = 11; break;
    case 10: 
      var $8=$text_addr;
      var $call12=_strlen($8);
      $text_len=$call12;
      __label__ = 11; break;
    case 11: 
      var $9=$png_ptr_addr;
      var $10=$text_addr;
      var $11=$text_len;
      var $12=$compression_addr;
      var $sub=(($12-2)|0);
      var $call14=_png_text_compress($9, $10, $11, $sub, $comp);
      $text_len=$call14;
      var $13=$png_ptr_addr;
      var $14=$key_len;
      var $add=(($14+5)|0);
      var $15=$lang_len;
      var $add15=(($add+$15)|0);
      var $16=$lang_key_len;
      var $add16=(($add15+$16)|0);
      var $17=$text_len;
      var $add17=(($add16+$17)|0);
      _png_write_chunk_header($13, 1767135348, $add17);
      var $18=$png_ptr_addr;
      var $19=HEAP32[(($new_key)>>2)];
      var $20=$key_len;
      var $add18=(($20+1)|0);
      _png_write_chunk_data($18, $19, $add18);
      var $21=$compression_addr;
      var $cmp19=(($21)|0)==1;
      if ($cmp19) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $22=$compression_addr;
      var $cmp20=(($22)|0)==-1;
      if ($cmp20) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $arrayidx=(($cbuf)|0);
      HEAP8[($arrayidx)]=0;
      __label__ = 15; break;
    case 14: 
      var $arrayidx23=(($cbuf)|0);
      HEAP8[($arrayidx23)]=1;
      __label__ = 15; break;
    case 15: 
      var $arrayidx25=(($cbuf+1)|0);
      HEAP8[($arrayidx25)]=0;
      var $23=$png_ptr_addr;
      var $arraydecay=(($cbuf)|0);
      _png_write_chunk_data($23, $arraydecay, 2);
      var $arrayidx26=(($cbuf)|0);
      HEAP8[($arrayidx26)]=0;
      var $24=$png_ptr_addr;
      var $25=HEAP32[(($new_lang)>>2)];
      var $tobool=(($25)|0)!=0;
      if ($tobool) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $26=HEAP32[(($new_lang)>>2)];
      var $cond = $26;__label__ = 18; break;
    case 17: 
      var $arraydecay27=(($cbuf)|0);
      var $cond = $arraydecay27;__label__ = 18; break;
    case 18: 
      var $cond;
      var $27=$lang_len;
      var $add28=(($27+1)|0);
      _png_write_chunk_data($24, $cond, $add28);
      var $28=$png_ptr_addr;
      var $29=$lang_key_addr;
      var $tobool29=(($29)|0)!=0;
      if ($tobool29) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $30=$lang_key_addr;
      var $cond34 = $30;__label__ = 21; break;
    case 20: 
      var $arraydecay32=(($cbuf)|0);
      var $cond34 = $arraydecay32;__label__ = 21; break;
    case 21: 
      var $cond34;
      var $31=$lang_key_len;
      var $add35=(($31+1)|0);
      _png_write_chunk_data($28, $cond34, $add35);
      var $32=$png_ptr_addr;
      var $33=$text_len;
      _png_write_compressed_data_out($32, $comp, $33);
      var $34=$png_ptr_addr;
      _png_write_chunk_end($34);
      var $35=$png_ptr_addr;
      var $36=HEAP32[(($new_key)>>2)];
      _png_free($35, $36);
      var $37=$png_ptr_addr;
      var $38=HEAP32[(($new_lang)>>2)];
      _png_free($37, $38);
      __label__ = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_iTXt["X"]=1;

function _png_write_oFFs($png_ptr, $x_offset, $y_offset, $unit_type) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $x_offset_addr;
      var $y_offset_addr;
      var $unit_type_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $x_offset_addr=$x_offset;
      $y_offset_addr=$y_offset;
      $unit_type_addr=$unit_type;
      var $0=$unit_type_addr;
      var $cmp=(($0)|0) >= 2;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      _png_warning($1, ((STRING_TABLE.__str351168)|0));
      __label__ = 3; break;
    case 3: 
      var $arraydecay=(($buf)|0);
      var $2=$x_offset_addr;
      _png_save_int_32($arraydecay, $2);
      var $arraydecay1=(($buf)|0);
      var $add_ptr=(($arraydecay1+4)|0);
      var $3=$y_offset_addr;
      _png_save_int_32($add_ptr, $3);
      var $4=$unit_type_addr;
      var $conv=(($4) & 255);
      var $arrayidx=(($buf+8)|0);
      HEAP8[($arrayidx)]=$conv;
      var $5=$png_ptr_addr;
      var $arraydecay2=(($buf)|0);
      _png_write_complete_chunk($5, 1866876531, $arraydecay2, 9);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_pCAL($png_ptr, $purpose, $X0, $X1, $type, $nparams, $units, $params) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $purpose_addr;
      var $X0_addr;
      var $X1_addr;
      var $type_addr;
      var $nparams_addr;
      var $units_addr;
      var $params_addr;
      var $purpose_len;
      var $units_len;
      var $total_len;
      var $params_len;
      var $buf=__stackBase__;
      var $new_purpose=__stackBase__+12;
      var $i;
      $png_ptr_addr=$png_ptr;
      $purpose_addr=$purpose;
      $X0_addr=$X0;
      $X1_addr=$X1;
      $type_addr=$type;
      $nparams_addr=$nparams;
      $units_addr=$units;
      $params_addr=$params;
      var $0=$type_addr;
      var $cmp=(($0)|0) >= 4;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      _png_warning($1, ((STRING_TABLE.__str361169)|0));
      __label__ = 3; break;
    case 3: 
      var $2=$png_ptr_addr;
      var $3=$purpose_addr;
      var $call=_png_check_keyword($2, $3, $new_purpose);
      var $add=(($call+1)|0);
      $purpose_len=$add;
      var $4=$units_addr;
      var $call1=_strlen($4);
      var $5=$nparams_addr;
      var $cmp2=(($5)|0)==0;
      var $cond=$cmp2 ? 0 : 1;
      var $add3=(($call1+$cond)|0);
      $units_len=$add3;
      var $6=$purpose_len;
      var $7=$units_len;
      var $add4=(($6+$7)|0);
      var $add5=(($add4+10)|0);
      $total_len=$add5;
      var $8=$png_ptr_addr;
      var $9=$nparams_addr;
      var $mul=((($9<<2))|0);
      var $call6=_png_malloc($8, $mul);
      var $10=$call6;
      $params_len=$10;
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $11=$i;
      var $12=$nparams_addr;
      var $cmp7=(($11)|0) < (($12)|0);
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $13=$i;
      var $14=$params_addr;
      var $arrayidx=(($14+($13<<2))|0);
      var $15=HEAP32[(($arrayidx)>>2)];
      var $call8=_strlen($15);
      var $16=$i;
      var $17=$nparams_addr;
      var $sub=(($17-1)|0);
      var $cmp9=(($16)|0)==(($sub)|0);
      var $cond10=$cmp9 ? 0 : 1;
      var $add11=(($call8+$cond10)|0);
      var $18=$i;
      var $19=$params_len;
      var $arrayidx12=(($19+($18<<2))|0);
      HEAP32[(($arrayidx12)>>2)]=$add11;
      var $20=$i;
      var $21=$params_len;
      var $arrayidx13=(($21+($20<<2))|0);
      var $22=HEAP32[(($arrayidx13)>>2)];
      var $23=$total_len;
      var $add14=(($23+$22)|0);
      $total_len=$add14;
      __label__ = 6; break;
    case 6: 
      var $24=$i;
      var $inc=(($24+1)|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      var $25=$png_ptr_addr;
      var $26=$total_len;
      _png_write_chunk_header($25, 1883455820, $26);
      var $27=$png_ptr_addr;
      var $28=HEAP32[(($new_purpose)>>2)];
      var $29=$purpose_len;
      _png_write_chunk_data($27, $28, $29);
      var $arraydecay=(($buf)|0);
      var $30=$X0_addr;
      _png_save_int_32($arraydecay, $30);
      var $arraydecay15=(($buf)|0);
      var $add_ptr=(($arraydecay15+4)|0);
      var $31=$X1_addr;
      _png_save_int_32($add_ptr, $31);
      var $32=$type_addr;
      var $conv=(($32) & 255);
      var $arrayidx16=(($buf+8)|0);
      HEAP8[($arrayidx16)]=$conv;
      var $33=$nparams_addr;
      var $conv17=(($33) & 255);
      var $arrayidx18=(($buf+9)|0);
      HEAP8[($arrayidx18)]=$conv17;
      var $34=$png_ptr_addr;
      var $arraydecay19=(($buf)|0);
      _png_write_chunk_data($34, $arraydecay19, 10);
      var $35=$png_ptr_addr;
      var $36=$units_addr;
      var $37=$units_len;
      _png_write_chunk_data($35, $36, $37);
      var $38=$png_ptr_addr;
      var $39=HEAP32[(($new_purpose)>>2)];
      _png_free($38, $39);
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $40=$i;
      var $41=$nparams_addr;
      var $cmp21=(($40)|0) < (($41)|0);
      if ($cmp21) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $42=$png_ptr_addr;
      var $43=$i;
      var $44=$params_addr;
      var $arrayidx24=(($44+($43<<2))|0);
      var $45=HEAP32[(($arrayidx24)>>2)];
      var $46=$i;
      var $47=$params_len;
      var $arrayidx25=(($47+($46<<2))|0);
      var $48=HEAP32[(($arrayidx25)>>2)];
      _png_write_chunk_data($42, $45, $48);
      __label__ = 10; break;
    case 10: 
      var $49=$i;
      var $inc27=(($49+1)|0);
      $i=$inc27;
      __label__ = 8; break;
    case 11: 
      var $50=$png_ptr_addr;
      var $51=$params_len;
      var $52=$51;
      _png_free($50, $52);
      var $53=$png_ptr_addr;
      _png_write_chunk_end($53);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_pCAL["X"]=1;

function _png_write_sCAL_s($png_ptr, $unit, $width, $height) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $unit_addr;
      var $width_addr;
      var $height_addr;
      var $buf=__stackBase__;
      var $wlen;
      var $hlen;
      var $total_len;
      $png_ptr_addr=$png_ptr;
      $unit_addr=$unit;
      $width_addr=$width;
      $height_addr=$height;
      var $0=$width_addr;
      var $call=_strlen($0);
      $wlen=$call;
      var $1=$height_addr;
      var $call1=_strlen($1);
      $hlen=$call1;
      var $2=$wlen;
      var $3=$hlen;
      var $add=(($2+$3)|0);
      var $add2=(($add+2)|0);
      $total_len=$add2;
      var $4=$total_len;
      var $cmp=(($4)>>>0) > 64;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $5=$png_ptr_addr;
      _png_warning($5, ((STRING_TABLE.__str371170)|0));
      __label__ = 4; break;
    case 3: 
      var $6=$unit_addr;
      var $conv=(($6) & 255);
      var $arrayidx=(($buf)|0);
      HEAP8[($arrayidx)]=$conv;
      var $arraydecay=(($buf)|0);
      var $add_ptr=(($arraydecay+1)|0);
      var $7=$width_addr;
      var $8=$wlen;
      var $add3=(($8+1)|0);
      assert($add3 % 1 === 0, 'memcpy given ' + $add3 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr, $7, $add3, 1);
      var $arraydecay4=(($buf)|0);
      var $9=$wlen;
      var $add_ptr5=(($arraydecay4+$9)|0);
      var $add_ptr6=(($add_ptr5+2)|0);
      var $10=$height_addr;
      var $11=$hlen;
      assert($11 % 1 === 0, 'memcpy given ' + $11 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr6, $10, $11, 1);
      var $12=$png_ptr_addr;
      var $arraydecay7=(($buf)|0);
      var $13=$total_len;
      _png_write_complete_chunk($12, 1933787468, $arraydecay7, $13);
      __label__ = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_sCAL_s["X"]=1;

function _png_write_pHYs($png_ptr, $x_pixels_per_unit, $y_pixels_per_unit, $unit_type) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $x_pixels_per_unit_addr;
      var $y_pixels_per_unit_addr;
      var $unit_type_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $x_pixels_per_unit_addr=$x_pixels_per_unit;
      $y_pixels_per_unit_addr=$y_pixels_per_unit;
      $unit_type_addr=$unit_type;
      var $0=$unit_type_addr;
      var $cmp=(($0)|0) >= 2;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $1=$png_ptr_addr;
      _png_warning($1, ((STRING_TABLE.__str381171)|0));
      __label__ = 3; break;
    case 3: 
      var $arraydecay=(($buf)|0);
      var $2=$x_pixels_per_unit_addr;
      _png_save_uint_32($arraydecay, $2);
      var $arraydecay1=(($buf)|0);
      var $add_ptr=(($arraydecay1+4)|0);
      var $3=$y_pixels_per_unit_addr;
      _png_save_uint_32($add_ptr, $3);
      var $4=$unit_type_addr;
      var $conv=(($4) & 255);
      var $arrayidx=(($buf+8)|0);
      HEAP8[($arrayidx)]=$conv;
      var $5=$png_ptr_addr;
      var $arraydecay2=(($buf)|0);
      _png_write_complete_chunk($5, 1883789683, $arraydecay2, 9);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _png_write_tIME($png_ptr, $mod_time) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $mod_time_addr;
      var $buf=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $mod_time_addr=$mod_time;
      var $0=$mod_time_addr;
      var $month=(($0+2)|0);
      var $1=HEAPU8[($month)];
      var $conv=(($1)&255);
      var $cmp=(($conv)|0) > 12;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$mod_time_addr;
      var $month2=(($2+2)|0);
      var $3=HEAPU8[($month2)];
      var $conv3=(($3)&255);
      var $cmp4=(($conv3)|0) < 1;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$mod_time_addr;
      var $day=(($4+3)|0);
      var $5=HEAPU8[($day)];
      var $conv7=(($5)&255);
      var $cmp8=(($conv7)|0) > 31;
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $6=$mod_time_addr;
      var $day11=(($6+3)|0);
      var $7=HEAPU8[($day11)];
      var $conv12=(($7)&255);
      var $cmp13=(($conv12)|0) < 1;
      if ($cmp13) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $8=$mod_time_addr;
      var $hour=(($8+4)|0);
      var $9=HEAPU8[($hour)];
      var $conv16=(($9)&255);
      var $cmp17=(($conv16)|0) > 23;
      if ($cmp17) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $10=$mod_time_addr;
      var $second=(($10+6)|0);
      var $11=HEAPU8[($second)];
      var $conv20=(($11)&255);
      var $cmp21=(($conv20)|0) > 60;
      if ($cmp21) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $12=$png_ptr_addr;
      _png_warning($12, ((STRING_TABLE.__str391172)|0));
      __label__ = 9; break;
    case 8: 
      var $arraydecay=(($buf)|0);
      var $13=$mod_time_addr;
      var $year=(($13)|0);
      var $14=HEAPU16[(($year)>>1)];
      var $conv23=(($14)&65535);
      _png_save_uint_16($arraydecay, $conv23);
      var $15=$mod_time_addr;
      var $month24=(($15+2)|0);
      var $16=HEAP8[($month24)];
      var $arrayidx=(($buf+2)|0);
      HEAP8[($arrayidx)]=$16;
      var $17=$mod_time_addr;
      var $day25=(($17+3)|0);
      var $18=HEAP8[($day25)];
      var $arrayidx26=(($buf+3)|0);
      HEAP8[($arrayidx26)]=$18;
      var $19=$mod_time_addr;
      var $hour27=(($19+4)|0);
      var $20=HEAP8[($hour27)];
      var $arrayidx28=(($buf+4)|0);
      HEAP8[($arrayidx28)]=$20;
      var $21=$mod_time_addr;
      var $minute=(($21+5)|0);
      var $22=HEAP8[($minute)];
      var $arrayidx29=(($buf+5)|0);
      HEAP8[($arrayidx29)]=$22;
      var $23=$mod_time_addr;
      var $second30=(($23+6)|0);
      var $24=HEAP8[($second30)];
      var $arrayidx31=(($buf+6)|0);
      HEAP8[($arrayidx31)]=$24;
      var $25=$png_ptr_addr;
      var $arraydecay32=(($buf)|0);
      _png_write_complete_chunk($25, 1950960965, $arraydecay32, 7);
      __label__ = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_tIME["X"]=1;

function _png_write_start_row($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $buf_size;
      var $usr_pixel_depth;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $usr_channels=(($0+296)|0);
      var $1=HEAPU8[($usr_channels)];
      var $conv=(($1)&255);
      var $2=$png_ptr_addr;
      var $usr_bit_depth=(($2+293)|0);
      var $3=HEAPU8[($usr_bit_depth)];
      var $conv1=(($3)&255);
      var $mul=(($conv*$conv1)|0);
      $usr_pixel_depth=$mul;
      var $4=$usr_pixel_depth;
      var $cmp=(($4)|0) >= 8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $5=$png_ptr_addr;
      var $width=(($5+204)|0);
      var $6=HEAP32[(($width)>>2)];
      var $7=$usr_pixel_depth;
      var $shr=$7 >>> 3;
      var $mul3=(($6*$shr)|0);
      var $cond = $mul3;__label__ = 4; break;
    case 3: 
      var $8=$png_ptr_addr;
      var $width4=(($8+204)|0);
      var $9=HEAP32[(($width4)>>2)];
      var $10=$usr_pixel_depth;
      var $mul5=(($9*$10)|0);
      var $add=(($mul5+7)|0);
      var $shr6=$add >>> 3;
      var $cond = $shr6;__label__ = 4; break;
    case 4: 
      var $cond;
      var $add7=(($cond+1)|0);
      $buf_size=$add7;
      var $11=$png_ptr_addr;
      var $pixel_depth=(($11+294)|0);
      var $12=HEAP8[($pixel_depth)];
      var $13=$png_ptr_addr;
      var $transformed_pixel_depth=(($13+299)|0);
      HEAP8[($transformed_pixel_depth)]=$12;
      var $14=$usr_pixel_depth;
      var $conv8=(($14) & 255);
      var $15=$png_ptr_addr;
      var $maximum_pixel_depth=(($15+298)|0);
      HEAP8[($maximum_pixel_depth)]=$conv8;
      var $16=$png_ptr_addr;
      var $17=$buf_size;
      var $call=_png_malloc($16, $17);
      var $18=$png_ptr_addr;
      var $row_buf=(($18+240)|0);
      HEAP32[(($row_buf)>>2)]=$call;
      var $19=$png_ptr_addr;
      var $row_buf9=(($19+240)|0);
      var $20=HEAP32[(($row_buf9)>>2)];
      var $arrayidx=(($20)|0);
      HEAP8[($arrayidx)]=0;
      var $21=$png_ptr_addr;
      var $do_filter=(($21+290)|0);
      var $22=HEAPU8[($do_filter)];
      var $conv10=(($22)&255);
      var $and=$conv10 & 16;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=$png_ptr_addr;
      var $24=$png_ptr_addr;
      var $rowbytes=(($24+220)|0);
      var $25=HEAP32[(($rowbytes)>>2)];
      var $add11=(($25+1)|0);
      var $call12=_png_malloc($23, $add11);
      var $26=$png_ptr_addr;
      var $sub_row=(($26+244)|0);
      HEAP32[(($sub_row)>>2)]=$call12;
      var $27=$png_ptr_addr;
      var $sub_row13=(($27+244)|0);
      var $28=HEAP32[(($sub_row13)>>2)];
      var $arrayidx14=(($28)|0);
      HEAP8[($arrayidx14)]=1;
      __label__ = 6; break;
    case 6: 
      var $29=$png_ptr_addr;
      var $do_filter15=(($29+290)|0);
      var $30=HEAPU8[($do_filter15)];
      var $conv16=(($30)&255);
      var $and17=$conv16 & 224;
      var $tobool18=(($and17)|0)!=0;
      if ($tobool18) { __label__ = 7; break; } else { __label__ = 14; break; }
    case 7: 
      var $31=$png_ptr_addr;
      var $32=$buf_size;
      var $call20=_png_calloc($31, $32);
      var $33=$png_ptr_addr;
      var $prev_row=(($33+236)|0);
      HEAP32[(($prev_row)>>2)]=$call20;
      var $34=$png_ptr_addr;
      var $do_filter21=(($34+290)|0);
      var $35=HEAPU8[($do_filter21)];
      var $conv22=(($35)&255);
      var $and23=$conv22 & 32;
      var $tobool24=(($and23)|0)!=0;
      if ($tobool24) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $36=$png_ptr_addr;
      var $37=$png_ptr_addr;
      var $rowbytes26=(($37+220)|0);
      var $38=HEAP32[(($rowbytes26)>>2)];
      var $add27=(($38+1)|0);
      var $call28=_png_malloc($36, $add27);
      var $39=$png_ptr_addr;
      var $up_row=(($39+248)|0);
      HEAP32[(($up_row)>>2)]=$call28;
      var $40=$png_ptr_addr;
      var $up_row29=(($40+248)|0);
      var $41=HEAP32[(($up_row29)>>2)];
      var $arrayidx30=(($41)|0);
      HEAP8[($arrayidx30)]=2;
      __label__ = 9; break;
    case 9: 
      var $42=$png_ptr_addr;
      var $do_filter32=(($42+290)|0);
      var $43=HEAPU8[($do_filter32)];
      var $conv33=(($43)&255);
      var $and34=$conv33 & 64;
      var $tobool35=(($and34)|0)!=0;
      if ($tobool35) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $44=$png_ptr_addr;
      var $45=$png_ptr_addr;
      var $rowbytes37=(($45+220)|0);
      var $46=HEAP32[(($rowbytes37)>>2)];
      var $add38=(($46+1)|0);
      var $call39=_png_malloc($44, $add38);
      var $47=$png_ptr_addr;
      var $avg_row=(($47+252)|0);
      HEAP32[(($avg_row)>>2)]=$call39;
      var $48=$png_ptr_addr;
      var $avg_row40=(($48+252)|0);
      var $49=HEAP32[(($avg_row40)>>2)];
      var $arrayidx41=(($49)|0);
      HEAP8[($arrayidx41)]=3;
      __label__ = 11; break;
    case 11: 
      var $50=$png_ptr_addr;
      var $do_filter43=(($50+290)|0);
      var $51=HEAPU8[($do_filter43)];
      var $conv44=(($51)&255);
      var $and45=$conv44 & 128;
      var $tobool46=(($and45)|0)!=0;
      if ($tobool46) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $52=$png_ptr_addr;
      var $53=$png_ptr_addr;
      var $rowbytes48=(($53+220)|0);
      var $54=HEAP32[(($rowbytes48)>>2)];
      var $add49=(($54+1)|0);
      var $call50=_png_malloc($52, $add49);
      var $55=$png_ptr_addr;
      var $paeth_row=(($55+256)|0);
      HEAP32[(($paeth_row)>>2)]=$call50;
      var $56=$png_ptr_addr;
      var $paeth_row51=(($56+256)|0);
      var $57=HEAP32[(($paeth_row51)>>2)];
      var $arrayidx52=(($57)|0);
      HEAP8[($arrayidx52)]=4;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $58=$png_ptr_addr;
      var $interlaced=(($58+288)|0);
      var $59=HEAP8[($interlaced)];
      var $tobool55=(($59 << 24) >> 24)!=0;
      if ($tobool55) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $60=$png_ptr_addr;
      var $transformations=(($60+92)|0);
      var $61=HEAP32[(($transformations)>>2)];
      var $and57=$61 & 2;
      var $tobool58=(($and57)|0)!=0;
      if ($tobool58) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $62=$png_ptr_addr;
      var $height=(($62+208)|0);
      var $63=HEAP32[(($height)>>2)];
      var $64=HEAPU8[(((STRING_TABLE._png_write_start_row_png_pass_yinc)|0))];
      var $conv60=(($64)&255);
      var $add61=(($63+$conv60)|0);
      var $sub=(($add61-1)|0);
      var $65=HEAPU8[(((STRING_TABLE._png_write_start_row_png_pass_ystart)|0))];
      var $conv62=(($65)&255);
      var $sub63=(($sub-$conv62)|0);
      var $66=HEAPU8[(((STRING_TABLE._png_write_start_row_png_pass_yinc)|0))];
      var $conv64=(($66)&255);
      var $div=Math.floor((($sub63)>>>0)/(($conv64)>>>0));
      var $67=$png_ptr_addr;
      var $num_rows=(($67+212)|0);
      HEAP32[(($num_rows)>>2)]=$div;
      var $68=$png_ptr_addr;
      var $width65=(($68+204)|0);
      var $69=HEAP32[(($width65)>>2)];
      var $70=HEAPU8[(((STRING_TABLE._png_write_start_row_png_pass_inc)|0))];
      var $conv66=(($70)&255);
      var $add67=(($69+$conv66)|0);
      var $sub68=(($add67-1)|0);
      var $71=HEAPU8[(((STRING_TABLE._png_write_start_row_png_pass_start)|0))];
      var $conv69=(($71)&255);
      var $sub70=(($sub68-$conv69)|0);
      var $72=HEAPU8[(((STRING_TABLE._png_write_start_row_png_pass_inc)|0))];
      var $conv71=(($72)&255);
      var $div72=Math.floor((($sub70)>>>0)/(($conv71)>>>0));
      var $73=$png_ptr_addr;
      var $usr_width=(($73+216)|0);
      HEAP32[(($usr_width)>>2)]=$div72;
      __label__ = 18; break;
    case 17: 
      var $74=$png_ptr_addr;
      var $height73=(($74+208)|0);
      var $75=HEAP32[(($height73)>>2)];
      var $76=$png_ptr_addr;
      var $num_rows74=(($76+212)|0);
      HEAP32[(($num_rows74)>>2)]=$75;
      var $77=$png_ptr_addr;
      var $width75=(($77+204)|0);
      var $78=HEAP32[(($width75)>>2)];
      var $79=$png_ptr_addr;
      var $usr_width76=(($79+216)|0);
      HEAP32[(($usr_width76)>>2)]=$78;
      __label__ = 18; break;
    case 18: 
      __label__ = 20; break;
    case 19: 
      var $80=$png_ptr_addr;
      var $height79=(($80+208)|0);
      var $81=HEAP32[(($height79)>>2)];
      var $82=$png_ptr_addr;
      var $num_rows80=(($82+212)|0);
      HEAP32[(($num_rows80)>>2)]=$81;
      var $83=$png_ptr_addr;
      var $width81=(($83+204)|0);
      var $84=HEAP32[(($width81)>>2)];
      var $85=$png_ptr_addr;
      var $usr_width82=(($85+216)|0);
      HEAP32[(($usr_width82)>>2)]=$84;
      __label__ = 20; break;
    case 20: 
      var $86=$png_ptr_addr;
      _png_zlib_claim($86, 1);
      var $87=$png_ptr_addr;
      var $zbuf_size=(($87+156)|0);
      var $88=HEAP32[(($zbuf_size)>>2)];
      var $89=$png_ptr_addr;
      var $zstream=(($89+96)|0);
      var $avail_out=(($zstream+16)|0);
      HEAP32[(($avail_out)>>2)]=$88;
      var $90=$png_ptr_addr;
      var $zbuf=(($90+152)|0);
      var $91=HEAP32[(($zbuf)>>2)];
      var $92=$png_ptr_addr;
      var $zstream84=(($92+96)|0);
      var $next_out=(($zstream84+12)|0);
      HEAP32[(($next_out)>>2)]=$91;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_start_row["X"]=1;

function _png_zlib_claim($png_ptr, $state) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $state_addr;
      var $ret;
      var $who;
      var $pos;
      var $msg=__stackBase__;
      $png_ptr_addr=$png_ptr;
      $state_addr=$state;
      var $0=$png_ptr_addr;
      var $zlib_state=(($0+160)|0);
      var $1=HEAP32[(($zlib_state)>>2)];
      var $and=$1 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 21; break; } else { __label__ = 2; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $zlib_state1=(($2+160)|0);
      var $3=HEAP32[(($zlib_state1)>>2)];
      var $4=$state_addr;
      var $cmp=(($3)|0)!=(($4)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 20; break; }
    case 3: 
      $ret=0;
      $who=((STRING_TABLE.__str481181)|0);
      var $5=$png_ptr_addr;
      var $zlib_state3=(($5+160)|0);
      var $6=HEAP32[(($zlib_state3)>>2)];
      var $cmp4=(($6)|0)!=0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $7=$png_ptr_addr;
      var $zstream=(($7+96)|0);
      var $call=_deflateEnd($zstream);
      $ret=$call;
      $who=((STRING_TABLE.__str491182)|0);
      var $8=$png_ptr_addr;
      var $zlib_state6=(($8+160)|0);
      HEAP32[(($zlib_state6)>>2)]=0;
      __label__ = 5; break;
    case 5: 
      var $9=$ret;
      var $cmp7=(($9)|0)==0;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $10=$state_addr;
      if ((($10)|0) == 2) {
        __label__ = 7; break;
      }
      else if ((($10)|0) == 1) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 7: 
      var $11=$png_ptr_addr;
      var $zstream9=(($11+96)|0);
      var $12=$png_ptr_addr;
      var $zlib_text_level=(($12+184)|0);
      var $13=HEAP32[(($zlib_text_level)>>2)];
      var $14=$png_ptr_addr;
      var $zlib_text_method=(($14+188)|0);
      var $15=HEAP32[(($zlib_text_method)>>2)];
      var $16=$png_ptr_addr;
      var $zlib_text_window_bits=(($16+192)|0);
      var $17=HEAP32[(($zlib_text_window_bits)>>2)];
      var $18=$png_ptr_addr;
      var $zlib_text_mem_level=(($18+196)|0);
      var $19=HEAP32[(($zlib_text_mem_level)>>2)];
      var $20=$png_ptr_addr;
      var $zlib_text_strategy=(($20+200)|0);
      var $21=HEAP32[(($zlib_text_strategy)>>2)];
      var $call10=_deflateInit2_($zstream9, $13, $15, $17, $19, $21, ((STRING_TABLE.__str501183)|0), 56);
      $ret=$call10;
      $who=((STRING_TABLE.__str511184)|0);
      __label__ = 10; break;
    case 8: 
      var $22=$png_ptr_addr;
      var $zstream12=(($22+96)|0);
      var $23=$png_ptr_addr;
      var $zlib_level=(($23+164)|0);
      var $24=HEAP32[(($zlib_level)>>2)];
      var $25=$png_ptr_addr;
      var $zlib_method=(($25+168)|0);
      var $26=HEAP32[(($zlib_method)>>2)];
      var $27=$png_ptr_addr;
      var $zlib_window_bits=(($27+172)|0);
      var $28=HEAP32[(($zlib_window_bits)>>2)];
      var $29=$png_ptr_addr;
      var $zlib_mem_level=(($29+176)|0);
      var $30=HEAP32[(($zlib_mem_level)>>2)];
      var $31=$png_ptr_addr;
      var $zlib_strategy=(($31+180)|0);
      var $32=HEAP32[(($zlib_strategy)>>2)];
      var $call13=_deflateInit2_($zstream12, $24, $26, $28, $30, $32, ((STRING_TABLE.__str501183)|0), 56);
      $ret=$call13;
      $who=((STRING_TABLE.__str521185)|0);
      __label__ = 10; break;
    case 9: 
      var $33=$png_ptr_addr;
      _png_error($33, ((STRING_TABLE.__str531186)|0));
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $34=$ret;
      var $cmp15=(($34)|0)==0;
      if ($cmp15) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $35=$state_addr;
      var $36=$png_ptr_addr;
      var $zlib_state17=(($36+160)|0);
      HEAP32[(($zlib_state17)>>2)]=$35;
      __label__ = 19; break;
    case 13: 
      $pos=0;
      var $arraydecay=(($msg)|0);
      var $37=$pos;
      var $call18=_png_safecat($arraydecay, 64, $37, ((STRING_TABLE.__str541187)|0));
      $pos=$call18;
      var $arraydecay19=(($msg)|0);
      var $38=$pos;
      var $39=$who;
      var $call20=_png_safecat($arraydecay19, 64, $38, $39);
      $pos=$call20;
      var $40=$ret;
      if ((($40)|0) == -6) {
        __label__ = 14; break;
      }
      else if ((($40)|0) == -2) {
        __label__ = 15; break;
      }
      else if ((($40)|0) == -4) {
        __label__ = 16; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 14: 
      var $arraydecay22=(($msg)|0);
      var $41=$pos;
      var $call23=_png_safecat($arraydecay22, 64, $41, ((STRING_TABLE.__str551188)|0));
      $pos=$call23;
      __label__ = 18; break;
    case 15: 
      var $arraydecay25=(($msg)|0);
      var $42=$pos;
      var $call26=_png_safecat($arraydecay25, 64, $42, ((STRING_TABLE.__str561189)|0));
      $pos=$call26;
      __label__ = 18; break;
    case 16: 
      var $arraydecay28=(($msg)|0);
      var $43=$pos;
      var $call29=_png_safecat($arraydecay28, 64, $43, ((STRING_TABLE.__str571190)|0));
      $pos=$call29;
      __label__ = 18; break;
    case 17: 
      var $arraydecay31=(($msg)|0);
      var $44=$pos;
      var $call32=_png_safecat($arraydecay31, 64, $44, ((STRING_TABLE.__str581191)|0));
      $pos=$call32;
      __label__ = 18; break;
    case 18: 
      var $45=$png_ptr_addr;
      var $arraydecay34=(($msg)|0);
      _png_error($45, $arraydecay34);
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $46=$png_ptr_addr;
      var $zlib_state37=(($46+160)|0);
      var $47=HEAP32[(($zlib_state37)>>2)];
      var $or=$47 | 4;
      HEAP32[(($zlib_state37)>>2)]=$or;
      __label__ = 22; break;
    case 21: 
      var $48=$png_ptr_addr;
      _png_error($48, ((STRING_TABLE.__str591192)|0));
      __label__ = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_zlib_claim["X"]=1;

function _png_write_finish_row($png_ptr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ret;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $row_number=(($0+228)|0);
      var $1=HEAP32[(($row_number)>>2)];
      var $inc=(($1+1)|0);
      HEAP32[(($row_number)>>2)]=$inc;
      var $2=$png_ptr_addr;
      var $row_number1=(($2+228)|0);
      var $3=HEAPU32[(($row_number1)>>2)];
      var $4=$png_ptr_addr;
      var $num_rows=(($4+212)|0);
      var $5=HEAPU32[(($num_rows)>>2)];
      var $cmp=(($3)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 40; break;
    case 3: 
      var $6=$png_ptr_addr;
      var $interlaced=(($6+288)|0);
      var $7=HEAP8[($interlaced)];
      var $tobool=(($7 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 24; break; }
    case 4: 
      var $8=$png_ptr_addr;
      var $row_number3=(($8+228)|0);
      HEAP32[(($row_number3)>>2)]=0;
      var $9=$png_ptr_addr;
      var $transformations=(($9+92)|0);
      var $10=HEAP32[(($transformations)>>2)];
      var $and=$10 & 2;
      var $tobool4=(($and)|0)!=0;
      if ($tobool4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $11=$png_ptr_addr;
      var $pass=(($11+289)|0);
      var $12=HEAP8[($pass)];
      var $inc6=(($12+1)&255);
      HEAP8[($pass)]=$inc6;
      __label__ = 16; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $13=$png_ptr_addr;
      var $pass7=(($13+289)|0);
      var $14=HEAP8[($pass7)];
      var $inc8=(($14+1)&255);
      HEAP8[($pass7)]=$inc8;
      var $15=$png_ptr_addr;
      var $pass9=(($15+289)|0);
      var $16=HEAPU8[($pass9)];
      var $conv=(($16)&255);
      var $cmp10=(($conv)|0) >= 7;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 15; break;
    case 9: 
      var $17=$png_ptr_addr;
      var $width=(($17+204)|0);
      var $18=HEAP32[(($width)>>2)];
      var $19=$png_ptr_addr;
      var $pass14=(($19+289)|0);
      var $20=HEAPU8[($pass14)];
      var $idxprom=(($20)&255);
      var $arrayidx=((STRING_TABLE._png_write_finish_row_png_pass_inc+$idxprom)|0);
      var $21=HEAPU8[($arrayidx)];
      var $conv15=(($21)&255);
      var $add=(($18+$conv15)|0);
      var $sub=(($add-1)|0);
      var $22=$png_ptr_addr;
      var $pass16=(($22+289)|0);
      var $23=HEAPU8[($pass16)];
      var $idxprom17=(($23)&255);
      var $arrayidx18=((STRING_TABLE._png_write_finish_row_png_pass_start+$idxprom17)|0);
      var $24=HEAPU8[($arrayidx18)];
      var $conv19=(($24)&255);
      var $sub20=(($sub-$conv19)|0);
      var $25=$png_ptr_addr;
      var $pass21=(($25+289)|0);
      var $26=HEAPU8[($pass21)];
      var $idxprom22=(($26)&255);
      var $arrayidx23=((STRING_TABLE._png_write_finish_row_png_pass_inc+$idxprom22)|0);
      var $27=HEAPU8[($arrayidx23)];
      var $conv24=(($27)&255);
      var $div=Math.floor((($sub20)>>>0)/(($conv24)>>>0));
      var $28=$png_ptr_addr;
      var $usr_width=(($28+216)|0);
      HEAP32[(($usr_width)>>2)]=$div;
      var $29=$png_ptr_addr;
      var $height=(($29+208)|0);
      var $30=HEAP32[(($height)>>2)];
      var $31=$png_ptr_addr;
      var $pass25=(($31+289)|0);
      var $32=HEAPU8[($pass25)];
      var $idxprom26=(($32)&255);
      var $arrayidx27=((STRING_TABLE._png_write_finish_row_png_pass_yinc+$idxprom26)|0);
      var $33=HEAPU8[($arrayidx27)];
      var $conv28=(($33)&255);
      var $add29=(($30+$conv28)|0);
      var $sub30=(($add29-1)|0);
      var $34=$png_ptr_addr;
      var $pass31=(($34+289)|0);
      var $35=HEAPU8[($pass31)];
      var $idxprom32=(($35)&255);
      var $arrayidx33=((STRING_TABLE._png_write_finish_row_png_pass_ystart+$idxprom32)|0);
      var $36=HEAPU8[($arrayidx33)];
      var $conv34=(($36)&255);
      var $sub35=(($sub30-$conv34)|0);
      var $37=$png_ptr_addr;
      var $pass36=(($37+289)|0);
      var $38=HEAPU8[($pass36)];
      var $idxprom37=(($38)&255);
      var $arrayidx38=((STRING_TABLE._png_write_finish_row_png_pass_yinc+$idxprom37)|0);
      var $39=HEAPU8[($arrayidx38)];
      var $conv39=(($39)&255);
      var $div40=Math.floor((($sub35)>>>0)/(($conv39)>>>0));
      var $40=$png_ptr_addr;
      var $num_rows41=(($40+212)|0);
      HEAP32[(($num_rows41)>>2)]=$div40;
      var $41=$png_ptr_addr;
      var $transformations42=(($41+92)|0);
      var $42=HEAP32[(($transformations42)>>2)];
      var $and43=$42 & 2;
      var $tobool44=(($and43)|0)!=0;
      if ($tobool44) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 15; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $43=$png_ptr_addr;
      var $usr_width47=(($43+216)|0);
      var $44=HEAP32[(($usr_width47)>>2)];
      var $cmp48=(($44)|0)==0;
      if ($cmp48) { var $47 = 1;__label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $45=$png_ptr_addr;
      var $num_rows50=(($45+212)|0);
      var $46=HEAP32[(($num_rows50)>>2)];
      var $cmp51=(($46)|0)==0;
      var $47 = $cmp51;__label__ = 14; break;
    case 14: 
      var $47;
      if ($47) { __label__ = 7; break; } else { __label__ = 15; break; }
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $48=$png_ptr_addr;
      var $pass54=(($48+289)|0);
      var $49=HEAPU8[($pass54)];
      var $conv55=(($49)&255);
      var $cmp56=(($conv55)|0) < 7;
      if ($cmp56) { __label__ = 17; break; } else { __label__ = 23; break; }
    case 17: 
      var $50=$png_ptr_addr;
      var $prev_row=(($50+236)|0);
      var $51=HEAP32[(($prev_row)>>2)];
      var $cmp59=(($51)|0)!=0;
      if ($cmp59) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: 
      var $52=$png_ptr_addr;
      var $prev_row62=(($52+236)|0);
      var $53=HEAP32[(($prev_row62)>>2)];
      var $54=$png_ptr_addr;
      var $usr_channels=(($54+296)|0);
      var $55=HEAPU8[($usr_channels)];
      var $conv63=(($55)&255);
      var $56=$png_ptr_addr;
      var $usr_bit_depth=(($56+293)|0);
      var $57=HEAPU8[($usr_bit_depth)];
      var $conv64=(($57)&255);
      var $mul=(($conv63*$conv64)|0);
      var $cmp65=(($mul)|0) >= 8;
      if ($cmp65) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $58=$png_ptr_addr;
      var $width67=(($58+204)|0);
      var $59=HEAP32[(($width67)>>2)];
      var $60=$png_ptr_addr;
      var $usr_channels68=(($60+296)|0);
      var $61=HEAPU8[($usr_channels68)];
      var $conv69=(($61)&255);
      var $62=$png_ptr_addr;
      var $usr_bit_depth70=(($62+293)|0);
      var $63=HEAPU8[($usr_bit_depth70)];
      var $conv71=(($63)&255);
      var $mul72=(($conv69*$conv71)|0);
      var $shr=$mul72 >>> 3;
      var $mul73=(($59*$shr)|0);
      var $cond = $mul73;__label__ = 21; break;
    case 20: 
      var $64=$png_ptr_addr;
      var $width74=(($64+204)|0);
      var $65=HEAP32[(($width74)>>2)];
      var $66=$png_ptr_addr;
      var $usr_channels75=(($66+296)|0);
      var $67=HEAPU8[($usr_channels75)];
      var $conv76=(($67)&255);
      var $68=$png_ptr_addr;
      var $usr_bit_depth77=(($68+293)|0);
      var $69=HEAPU8[($usr_bit_depth77)];
      var $conv78=(($69)&255);
      var $mul79=(($conv76*$conv78)|0);
      var $mul80=(($65*$mul79)|0);
      var $add81=(($mul80+7)|0);
      var $shr82=$add81 >>> 3;
      var $cond = $shr82;__label__ = 21; break;
    case 21: 
      var $cond;
      var $add83=(($cond+1)|0);
      _memset($53, 0, $add83, 1);
      __label__ = 22; break;
    case 22: 
      __label__ = 40; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $70=$png_ptr_addr;
      var $zstream=(($70+96)|0);
      var $call=_deflate($zstream, 4);
      $ret=$call;
      var $71=$ret;
      var $cmp88=(($71)|0)==0;
      if ($cmp88) { __label__ = 26; break; } else { __label__ = 29; break; }
    case 26: 
      var $72=$png_ptr_addr;
      var $zstream91=(($72+96)|0);
      var $avail_out=(($zstream91+16)|0);
      var $73=HEAP32[(($avail_out)>>2)];
      var $tobool92=(($73)|0)!=0;
      if ($tobool92) { __label__ = 28; break; } else { __label__ = 27; break; }
    case 27: 
      var $74=$png_ptr_addr;
      var $75=$png_ptr_addr;
      var $zbuf=(($75+152)|0);
      var $76=HEAP32[(($zbuf)>>2)];
      var $77=$png_ptr_addr;
      var $zbuf_size=(($77+156)|0);
      var $78=HEAP32[(($zbuf_size)>>2)];
      _png_write_IDAT($74, $76, $78);
      var $79=$png_ptr_addr;
      var $zbuf94=(($79+152)|0);
      var $80=HEAP32[(($zbuf94)>>2)];
      var $81=$png_ptr_addr;
      var $zstream95=(($81+96)|0);
      var $next_out=(($zstream95+12)|0);
      HEAP32[(($next_out)>>2)]=$80;
      var $82=$png_ptr_addr;
      var $zbuf_size96=(($82+156)|0);
      var $83=HEAP32[(($zbuf_size96)>>2)];
      var $84=$png_ptr_addr;
      var $zstream97=(($84+96)|0);
      var $avail_out98=(($zstream97+16)|0);
      HEAP32[(($avail_out98)>>2)]=$83;
      __label__ = 28; break;
    case 28: 
      __label__ = 35; break;
    case 29: 
      var $85=$ret;
      var $cmp101=(($85)|0)!=1;
      if ($cmp101) { __label__ = 30; break; } else { __label__ = 34; break; }
    case 30: 
      var $86=$png_ptr_addr;
      var $zstream104=(($86+96)|0);
      var $msg=(($zstream104+24)|0);
      var $87=HEAP32[(($msg)>>2)];
      var $cmp105=(($87)|0)!=0;
      if ($cmp105) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $88=$png_ptr_addr;
      var $89=$png_ptr_addr;
      var $zstream108=(($89+96)|0);
      var $msg109=(($zstream108+24)|0);
      var $90=HEAP32[(($msg109)>>2)];
      _png_error($88, $90);
      __label__ = 33; break;
    case 32: 
      var $91=$png_ptr_addr;
      _png_error($91, ((STRING_TABLE.__str401173)|0));
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $92=$ret;
      var $cmp115=(($92)|0)!=1;
      if ($cmp115) { __label__ = 25; break; } else { __label__ = 37; break; }
    case 37: 
      var $93=$png_ptr_addr;
      var $zstream118=(($93+96)|0);
      var $avail_out119=(($zstream118+16)|0);
      var $94=HEAPU32[(($avail_out119)>>2)];
      var $95=$png_ptr_addr;
      var $zbuf_size120=(($95+156)|0);
      var $96=HEAPU32[(($zbuf_size120)>>2)];
      var $cmp121=(($94)>>>0) < (($96)>>>0);
      if ($cmp121) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $97=$png_ptr_addr;
      var $98=$png_ptr_addr;
      var $zbuf124=(($98+152)|0);
      var $99=HEAP32[(($zbuf124)>>2)];
      var $100=$png_ptr_addr;
      var $zbuf_size125=(($100+156)|0);
      var $101=HEAP32[(($zbuf_size125)>>2)];
      var $102=$png_ptr_addr;
      var $zstream126=(($102+96)|0);
      var $avail_out127=(($zstream126+16)|0);
      var $103=HEAP32[(($avail_out127)>>2)];
      var $sub128=(($101-$103)|0);
      _png_write_IDAT($97, $99, $sub128);
      __label__ = 39; break;
    case 39: 
      var $104=$png_ptr_addr;
      _png_zlib_release($104);
      var $105=$png_ptr_addr;
      var $zstream130=(($105+96)|0);
      var $data_type=(($zstream130+44)|0);
      HEAP32[(($data_type)>>2)]=0;
      __label__ = 40; break;
    case 40: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_finish_row["X"]=1;

function _png_zlib_release($png_ptr) {
  var __stackBase__  = STACKTOP; STACKTOP += 256; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $ret;
      var $err;
      var $p=__stackBase__;
      $png_ptr_addr=$png_ptr;
      var $0=$png_ptr_addr;
      var $zlib_state=(($0+160)|0);
      var $1=HEAP32[(($zlib_state)>>2)];
      var $and=$1 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 13; break; }
    case 2: 
      var $2=$png_ptr_addr;
      var $zstream=(($2+96)|0);
      var $call=_deflateReset($zstream);
      $ret=$call;
      var $3=$png_ptr_addr;
      var $zlib_state1=(($3+160)|0);
      var $4=HEAP32[(($zlib_state1)>>2)];
      var $and2=$4 & -5;
      HEAP32[(($zlib_state1)>>2)]=$and2;
      var $5=$ret;
      var $cmp=(($5)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 3: 
      var $6=$ret;
      if ((($6)|0) == -6) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == -2) {
        __label__ = 5; break;
      }
      else if ((($6)|0) == -4) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 4: 
      $err=((STRING_TABLE.__str411174)|0);
      __label__ = 8; break;
    case 5: 
      $err=((STRING_TABLE.__str421175)|0);
      __label__ = 8; break;
    case 6: 
      $err=((STRING_TABLE.__str431176)|0);
      __label__ = 8; break;
    case 7: 
      $err=((STRING_TABLE.__str441177)|0);
      __label__ = 8; break;
    case 8: 
      var $arraydecay=(($p)|0);
      var $7=$ret;
      _png_warning_parameter_signed($arraydecay, 1, 1, $7);
      var $arraydecay6=(($p)|0);
      var $8=$err;
      _png_warning_parameter($arraydecay6, 2, $8);
      var $9=$png_ptr_addr;
      var $zstream7=(($9+96)|0);
      var $msg=(($zstream7+24)|0);
      var $10=HEAP32[(($msg)>>2)];
      var $tobool8=(($10)|0)!=0;
      if ($tobool8) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $11=$png_ptr_addr;
      var $zstream10=(($11+96)|0);
      var $msg11=(($zstream10+24)|0);
      var $12=HEAP32[(($msg11)>>2)];
      $err=$12;
      __label__ = 11; break;
    case 10: 
      $err=((STRING_TABLE.__str451178)|0);
      __label__ = 11; break;
    case 11: 
      var $arraydecay12=(($p)|0);
      var $13=$err;
      _png_warning_parameter($arraydecay12, 3, $13);
      var $14=$png_ptr_addr;
      var $arraydecay13=(($p)|0);
      _png_formatted_warning($14, $arraydecay13, ((STRING_TABLE.__str461179)|0));
      __label__ = 12; break;
    case 12: 
      __label__ = 14; break;
    case 13: 
      var $15=$png_ptr_addr;
      _png_warning($15, ((STRING_TABLE.__str471180)|0));
      __label__ = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_zlib_release["X"]=1;

function _png_do_write_interlace($row_info, $row, $pass) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $row_info_addr;
      var $row_addr;
      var $pass_addr;
      var $sp;
      var $dp;
      var $shift;
      var $d;
      var $value;
      var $i;
      var $row_width;
      var $sp19;
      var $dp20;
      var $shift21;
      var $d22;
      var $value23;
      var $i24;
      var $row_width25;
      var $sp62;
      var $dp63;
      var $shift64;
      var $d65;
      var $value66;
      var $i67;
      var $row_width68;
      var $sp104;
      var $dp105;
      var $i106;
      var $row_width107;
      var $pixel_bytes;
      $row_info_addr=$row_info;
      $row_addr=$row;
      $pass_addr=$pass;
      var $0=$pass_addr;
      var $cmp=(($0)|0) < 6;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 44; break; }
    case 2: 
      var $1=$row_info_addr;
      var $pixel_depth=(($1+11)|0);
      var $2=HEAPU8[($pixel_depth)];
      var $conv=(($2)&255);
      if ((($conv)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($conv)|0) == 2) {
        __label__ = 13; break;
      }
      else if ((($conv)|0) == 4) {
        __label__ = 23; break;
      }
      else {
      __label__ = 33; break;
      }
      
    case 3: 
      var $3=$row_info_addr;
      var $width=(($3)|0);
      var $4=HEAP32[(($width)>>2)];
      $row_width=$4;
      var $5=$row_addr;
      $dp=$5;
      $d=0;
      $shift=7;
      var $6=$pass_addr;
      var $arrayidx=((STRING_TABLE._png_do_write_interlace_png_pass_start+$6)|0);
      var $7=HEAPU8[($arrayidx)];
      var $conv1=(($7)&255);
      $i=$conv1;
      __label__ = 4; break;
    case 4: 
      var $8=$i;
      var $9=$row_width;
      var $cmp2=(($8)>>>0) < (($9)>>>0);
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $10=$row_addr;
      var $11=$i;
      var $shr=$11 >>> 3;
      var $add_ptr=(($10+$shr)|0);
      $sp=$add_ptr;
      var $12=$sp;
      var $13=HEAPU8[($12)];
      var $conv4=(($13)&255);
      var $14=$i;
      var $and=$14 & 7;
      var $sub=((7-$and)|0);
      var $shr5=$conv4 >> (($sub)|0);
      var $and6=$shr5 & 1;
      $value=$and6;
      var $15=$value;
      var $16=$shift;
      var $shl=$15 << $16;
      var $17=$d;
      var $or=$17 | $shl;
      $d=$or;
      var $18=$shift;
      var $cmp7=(($18)|0)==0;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $shift=7;
      var $19=$d;
      var $conv10=(($19) & 255);
      var $20=$dp;
      var $incdec_ptr=(($20+1)|0);
      $dp=$incdec_ptr;
      HEAP8[($20)]=$conv10;
      $d=0;
      __label__ = 8; break;
    case 7: 
      var $21=$shift;
      var $dec=(($21-1)|0);
      $shift=$dec;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $22=$pass_addr;
      var $arrayidx11=((STRING_TABLE._png_do_write_interlace_png_pass_inc+$22)|0);
      var $23=HEAPU8[($arrayidx11)];
      var $conv12=(($23)&255);
      var $24=$i;
      var $add=(($24+$conv12)|0);
      $i=$add;
      __label__ = 4; break;
    case 10: 
      var $25=$shift;
      var $cmp13=(($25)|0)!=7;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $26=$d;
      var $conv16=(($26) & 255);
      var $27=$dp;
      HEAP8[($27)]=$conv16;
      __label__ = 12; break;
    case 12: 
      __label__ = 40; break;
    case 13: 
      var $28=$row_info_addr;
      var $width26=(($28)|0);
      var $29=HEAP32[(($width26)>>2)];
      $row_width25=$29;
      var $30=$row_addr;
      $dp20=$30;
      $shift21=6;
      $d22=0;
      var $31=$pass_addr;
      var $arrayidx27=((STRING_TABLE._png_do_write_interlace_png_pass_start+$31)|0);
      var $32=HEAPU8[($arrayidx27)];
      var $conv28=(($32)&255);
      $i24=$conv28;
      __label__ = 14; break;
    case 14: 
      var $33=$i24;
      var $34=$row_width25;
      var $cmp30=(($33)>>>0) < (($34)>>>0);
      if ($cmp30) { __label__ = 15; break; } else { __label__ = 20; break; }
    case 15: 
      var $35=$row_addr;
      var $36=$i24;
      var $shr33=$36 >>> 2;
      var $add_ptr34=(($35+$shr33)|0);
      $sp19=$add_ptr34;
      var $37=$sp19;
      var $38=HEAPU8[($37)];
      var $conv35=(($38)&255);
      var $39=$i24;
      var $and36=$39 & 3;
      var $sub37=((3-$and36)|0);
      var $shl38=$sub37 << 1;
      var $shr39=$conv35 >> (($shl38)|0);
      var $and40=$shr39 & 3;
      $value23=$and40;
      var $40=$value23;
      var $41=$shift21;
      var $shl41=$40 << $41;
      var $42=$d22;
      var $or42=$42 | $shl41;
      $d22=$or42;
      var $43=$shift21;
      var $cmp43=(($43)|0)==0;
      if ($cmp43) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $shift21=6;
      var $44=$d22;
      var $conv46=(($44) & 255);
      var $45=$dp20;
      var $incdec_ptr47=(($45+1)|0);
      $dp20=$incdec_ptr47;
      HEAP8[($45)]=$conv46;
      $d22=0;
      __label__ = 18; break;
    case 17: 
      var $46=$shift21;
      var $sub49=(($46-2)|0);
      $shift21=$sub49;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $47=$pass_addr;
      var $arrayidx52=((STRING_TABLE._png_do_write_interlace_png_pass_inc+$47)|0);
      var $48=HEAPU8[($arrayidx52)];
      var $conv53=(($48)&255);
      var $49=$i24;
      var $add54=(($49+$conv53)|0);
      $i24=$add54;
      __label__ = 14; break;
    case 20: 
      var $50=$shift21;
      var $cmp56=(($50)|0)!=6;
      if ($cmp56) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $51=$d22;
      var $conv59=(($51) & 255);
      var $52=$dp20;
      HEAP8[($52)]=$conv59;
      __label__ = 22; break;
    case 22: 
      __label__ = 40; break;
    case 23: 
      var $53=$row_info_addr;
      var $width69=(($53)|0);
      var $54=HEAP32[(($width69)>>2)];
      $row_width68=$54;
      var $55=$row_addr;
      $dp63=$55;
      $shift64=4;
      $d65=0;
      var $56=$pass_addr;
      var $arrayidx70=((STRING_TABLE._png_do_write_interlace_png_pass_start+$56)|0);
      var $57=HEAPU8[($arrayidx70)];
      var $conv71=(($57)&255);
      $i67=$conv71;
      __label__ = 24; break;
    case 24: 
      var $58=$i67;
      var $59=$row_width68;
      var $cmp73=(($58)>>>0) < (($59)>>>0);
      if ($cmp73) { __label__ = 25; break; } else { __label__ = 30; break; }
    case 25: 
      var $60=$row_addr;
      var $61=$i67;
      var $shr76=$61 >>> 1;
      var $add_ptr77=(($60+$shr76)|0);
      $sp62=$add_ptr77;
      var $62=$sp62;
      var $63=HEAPU8[($62)];
      var $conv78=(($63)&255);
      var $64=$i67;
      var $and79=$64 & 1;
      var $sub80=((1-$and79)|0);
      var $shl81=$sub80 << 2;
      var $shr82=$conv78 >> (($shl81)|0);
      var $and83=$shr82 & 15;
      $value66=$and83;
      var $65=$value66;
      var $66=$shift64;
      var $shl84=$65 << $66;
      var $67=$d65;
      var $or85=$67 | $shl84;
      $d65=$or85;
      var $68=$shift64;
      var $cmp86=(($68)|0)==0;
      if ($cmp86) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      $shift64=4;
      var $69=$d65;
      var $conv89=(($69) & 255);
      var $70=$dp63;
      var $incdec_ptr90=(($70+1)|0);
      $dp63=$incdec_ptr90;
      HEAP8[($70)]=$conv89;
      $d65=0;
      __label__ = 28; break;
    case 27: 
      var $71=$shift64;
      var $sub92=(($71-4)|0);
      $shift64=$sub92;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $72=$pass_addr;
      var $arrayidx95=((STRING_TABLE._png_do_write_interlace_png_pass_inc+$72)|0);
      var $73=HEAPU8[($arrayidx95)];
      var $conv96=(($73)&255);
      var $74=$i67;
      var $add97=(($74+$conv96)|0);
      $i67=$add97;
      __label__ = 24; break;
    case 30: 
      var $75=$shift64;
      var $cmp99=(($75)|0)!=4;
      if ($cmp99) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $76=$d65;
      var $conv102=(($76) & 255);
      var $77=$dp63;
      HEAP8[($77)]=$conv102;
      __label__ = 32; break;
    case 32: 
      __label__ = 40; break;
    case 33: 
      var $78=$row_info_addr;
      var $width108=(($78)|0);
      var $79=HEAP32[(($width108)>>2)];
      $row_width107=$79;
      var $80=$row_addr;
      $dp105=$80;
      var $81=$row_info_addr;
      var $pixel_depth109=(($81+11)|0);
      var $82=HEAPU8[($pixel_depth109)];
      var $conv110=(($82)&255);
      var $shr111=$conv110 >> 3;
      $pixel_bytes=$shr111;
      var $83=$pass_addr;
      var $arrayidx112=((STRING_TABLE._png_do_write_interlace_png_pass_start+$83)|0);
      var $84=HEAPU8[($arrayidx112)];
      var $conv113=(($84)&255);
      $i106=$conv113;
      __label__ = 34; break;
    case 34: 
      var $85=$i106;
      var $86=$row_width107;
      var $cmp115=(($85)>>>0) < (($86)>>>0);
      if ($cmp115) { __label__ = 35; break; } else { __label__ = 39; break; }
    case 35: 
      var $87=$row_addr;
      var $88=$i106;
      var $89=$pixel_bytes;
      var $mul=(($88*$89)|0);
      var $add_ptr118=(($87+$mul)|0);
      $sp104=$add_ptr118;
      var $90=$dp105;
      var $91=$sp104;
      var $cmp119=(($90)|0)!=(($91)|0);
      if ($cmp119) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $92=$dp105;
      var $93=$sp104;
      var $94=$pixel_bytes;
      assert($94 % 1 === 0, 'memcpy given ' + $94 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($92, $93, $94, 1);
      __label__ = 37; break;
    case 37: 
      var $95=$pixel_bytes;
      var $96=$dp105;
      var $add_ptr123=(($96+$95)|0);
      $dp105=$add_ptr123;
      __label__ = 38; break;
    case 38: 
      var $97=$pass_addr;
      var $arrayidx125=((STRING_TABLE._png_do_write_interlace_png_pass_inc+$97)|0);
      var $98=HEAPU8[($arrayidx125)];
      var $conv126=(($98)&255);
      var $99=$i106;
      var $add127=(($99+$conv126)|0);
      $i106=$add127;
      __label__ = 34; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $100=$row_info_addr;
      var $width129=(($100)|0);
      var $101=HEAP32[(($width129)>>2)];
      var $102=$pass_addr;
      var $arrayidx130=((STRING_TABLE._png_do_write_interlace_png_pass_inc+$102)|0);
      var $103=HEAPU8[($arrayidx130)];
      var $conv131=(($103)&255);
      var $add132=(($101+$conv131)|0);
      var $sub133=(($add132-1)|0);
      var $104=$pass_addr;
      var $arrayidx134=((STRING_TABLE._png_do_write_interlace_png_pass_start+$104)|0);
      var $105=HEAPU8[($arrayidx134)];
      var $conv135=(($105)&255);
      var $sub136=(($sub133-$conv135)|0);
      var $106=$pass_addr;
      var $arrayidx137=((STRING_TABLE._png_do_write_interlace_png_pass_inc+$106)|0);
      var $107=HEAPU8[($arrayidx137)];
      var $conv138=(($107)&255);
      var $div=Math.floor((($sub136)>>>0)/(($conv138)>>>0));
      var $108=$row_info_addr;
      var $width139=(($108)|0);
      HEAP32[(($width139)>>2)]=$div;
      var $109=$row_info_addr;
      var $pixel_depth140=(($109+11)|0);
      var $110=HEAPU8[($pixel_depth140)];
      var $conv141=(($110)&255);
      var $cmp142=(($conv141)|0) >= 8;
      if ($cmp142) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $111=$row_info_addr;
      var $width144=(($111)|0);
      var $112=HEAP32[(($width144)>>2)];
      var $113=$row_info_addr;
      var $pixel_depth145=(($113+11)|0);
      var $114=HEAPU8[($pixel_depth145)];
      var $conv146=(($114)&255);
      var $shr147=$conv146 >>> 3;
      var $mul148=(($112*$shr147)|0);
      var $cond = $mul148;__label__ = 43; break;
    case 42: 
      var $115=$row_info_addr;
      var $width149=(($115)|0);
      var $116=HEAP32[(($width149)>>2)];
      var $117=$row_info_addr;
      var $pixel_depth150=(($117+11)|0);
      var $118=HEAPU8[($pixel_depth150)];
      var $conv151=(($118)&255);
      var $mul152=(($116*$conv151)|0);
      var $add153=(($mul152+7)|0);
      var $shr154=$add153 >>> 3;
      var $cond = $shr154;__label__ = 43; break;
    case 43: 
      var $cond;
      var $119=$row_info_addr;
      var $rowbytes=(($119+4)|0);
      HEAP32[(($rowbytes)>>2)]=$cond;
      __label__ = 44; break;
    case 44: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_do_write_interlace["X"]=1;

function _png_write_find_filter($png_ptr, $row_info) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $row_info_addr;
      var $best_row;
      var $prev_row;
      var $row_buf;
      var $mins;
      var $bpp;
      var $filter_to_do;
      var $row_bytes;
      var $num_p_filters;
      var $rp;
      var $sum;
      var $i;
      var $v;
      var $sumhi;
      var $sumlo;
      var $j;
      var $rp59;
      var $lp;
      var $dp;
      var $i60;
      var $rp94;
      var $dp95;
      var $lp96;
      var $sum97;
      var $lmins;
      var $i98;
      var $v99;
      var $j105;
      var $lmhi;
      var $lmlo;
      var $j204;
      var $sumhi205;
      var $sumlo206;
      var $rp263;
      var $dp264;
      var $pp;
      var $i265;
      var $rp290;
      var $dp291;
      var $pp292;
      var $sum293;
      var $lmins294;
      var $i295;
      var $v296;
      var $j302;
      var $lmhi303;
      var $lmlo304;
      var $j387;
      var $sumhi388;
      var $sumlo389;
      var $rp446;
      var $dp447;
      var $pp448;
      var $lp449;
      var $i450;
      var $rp495;
      var $dp496;
      var $pp497;
      var $lp498;
      var $sum499;
      var $lmins500;
      var $i501;
      var $v502;
      var $j508;
      var $lmhi509;
      var $lmlo510;
      var $j623;
      var $sumhi624;
      var $sumlo625;
      var $rp682;
      var $dp683;
      var $pp684;
      var $cp;
      var $lp685;
      var $i686;
      var $a;
      var $b;
      var $c;
      var $pa;
      var $pb;
      var $pc;
      var $p;
      var $rp773;
      var $dp774;
      var $pp775;
      var $cp776;
      var $lp777;
      var $sum778;
      var $lmins779;
      var $i780;
      var $v781;
      var $j787;
      var $lmhi788;
      var $lmlo789;
      var $a869;
      var $b870;
      var $c871;
      var $pa872;
      var $pb873;
      var $pc874;
      var $p875;
      var $j950;
      var $sumhi951;
      var $sumlo952;
      var $j1012;
      $png_ptr_addr=$png_ptr;
      $row_info_addr=$row_info;
      var $0=$png_ptr_addr;
      var $do_filter=(($0+290)|0);
      var $1=HEAP8[($do_filter)];
      $filter_to_do=$1;
      var $2=$row_info_addr;
      var $rowbytes=(($2+4)|0);
      var $3=HEAP32[(($rowbytes)>>2)];
      $row_bytes=$3;
      var $4=$png_ptr_addr;
      var $num_prev_filters=(($4+493)|0);
      var $5=HEAPU8[($num_prev_filters)];
      var $conv=(($5)&255);
      $num_p_filters=$conv;
      var $6=$row_info_addr;
      var $pixel_depth=(($6+11)|0);
      var $7=HEAPU8[($pixel_depth)];
      var $conv1=(($7)&255);
      var $add=(($conv1+7)|0);
      var $shr=$add >> 3;
      $bpp=$shr;
      var $8=$png_ptr_addr;
      var $prev_row2=(($8+236)|0);
      var $9=HEAP32[(($prev_row2)>>2)];
      $prev_row=$9;
      var $10=$png_ptr_addr;
      var $row_buf3=(($10+240)|0);
      var $11=HEAP32[(($row_buf3)>>2)];
      $best_row=$11;
      var $12=$best_row;
      $row_buf=$12;
      $mins=2147483647;
      var $13=$filter_to_do;
      var $conv4=(($13)&255);
      var $and=$conv4 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 22; break; }
    case 2: 
      var $14=$filter_to_do;
      var $conv5=(($14)&255);
      var $cmp=(($conv5)|0)!=8;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 22; break; }
    case 3: 
      $sum=0;
      $i=0;
      var $15=$row_buf;
      var $add_ptr=(($15+1)|0);
      $rp=$add_ptr;
      __label__ = 4; break;
    case 4: 
      var $16=$i;
      var $17=$row_bytes;
      var $cmp7=(($16)>>>0) < (($17)>>>0);
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      var $18=$rp;
      var $19=HEAPU8[($18)];
      var $conv9=(($19)&255);
      $v=$conv9;
      var $20=$v;
      var $cmp10=(($20)|0) < 128;
      if ($cmp10) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $21=$v;
      var $cond = $21;__label__ = 8; break;
    case 7: 
      var $22=$v;
      var $sub=((256-$22)|0);
      var $cond = $sub;__label__ = 8; break;
    case 8: 
      var $cond;
      var $23=$sum;
      var $add12=(($23+$cond)|0);
      $sum=$add12;
      __label__ = 9; break;
    case 9: 
      var $24=$i;
      var $inc=(($24+1)|0);
      $i=$inc;
      var $25=$rp;
      var $incdec_ptr=(($25+1)|0);
      $rp=$incdec_ptr;
      __label__ = 4; break;
    case 10: 
      var $26=$png_ptr_addr;
      var $heuristic_method=(($26+492)|0);
      var $27=HEAPU8[($heuristic_method)];
      var $conv13=(($27)&255);
      var $cmp14=(($conv13)|0)==2;
      if ($cmp14) { __label__ = 11; break; } else { __label__ = 21; break; }
    case 11: 
      var $28=$sum;
      var $and17=$28 & 65535;
      $sumlo=$and17;
      var $29=$sum;
      var $shr18=$29 >>> 10;
      var $and19=$shr18 & 4194240;
      $sumhi=$and19;
      $j=0;
      __label__ = 12; break;
    case 12: 
      var $30=$j;
      var $31=$num_p_filters;
      var $cmp21=(($30)|0) < (($31)|0);
      if ($cmp21) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      var $32=$j;
      var $33=$png_ptr_addr;
      var $prev_filters=(($33+496)|0);
      var $34=HEAP32[(($prev_filters)>>2)];
      var $arrayidx=(($34+$32)|0);
      var $35=HEAPU8[($arrayidx)];
      var $conv24=(($35)&255);
      var $cmp25=(($conv24)|0)==0;
      if ($cmp25) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $36=$sumlo;
      var $37=$j;
      var $38=$png_ptr_addr;
      var $filter_weights=(($38+500)|0);
      var $39=HEAP32[(($filter_weights)>>2)];
      var $arrayidx28=(($39+($37<<1))|0);
      var $40=HEAPU16[(($arrayidx28)>>1)];
      var $conv29=(($40)&65535);
      var $mul=(($36*$conv29)|0);
      var $shr30=$mul >>> 8;
      $sumlo=$shr30;
      var $41=$sumhi;
      var $42=$j;
      var $43=$png_ptr_addr;
      var $filter_weights31=(($43+500)|0);
      var $44=HEAP32[(($filter_weights31)>>2)];
      var $arrayidx32=(($44+($42<<1))|0);
      var $45=HEAPU16[(($arrayidx32)>>1)];
      var $conv33=(($45)&65535);
      var $mul34=(($41*$conv33)|0);
      var $shr35=$mul34 >>> 8;
      $sumhi=$shr35;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $46=$j;
      var $inc37=(($46+1)|0);
      $j=$inc37;
      __label__ = 12; break;
    case 17: 
      var $47=$sumlo;
      var $48=$png_ptr_addr;
      var $filter_costs=(($48+508)|0);
      var $49=HEAP32[(($filter_costs)>>2)];
      var $arrayidx39=(($49)|0);
      var $50=HEAPU16[(($arrayidx39)>>1)];
      var $conv40=(($50)&65535);
      var $mul41=(($47*$conv40)|0);
      var $shr42=$mul41 >>> 3;
      $sumlo=$shr42;
      var $51=$sumhi;
      var $52=$png_ptr_addr;
      var $filter_costs43=(($52+508)|0);
      var $53=HEAP32[(($filter_costs43)>>2)];
      var $arrayidx44=(($53)|0);
      var $54=HEAPU16[(($arrayidx44)>>1)];
      var $conv45=(($54)&65535);
      var $mul46=(($51*$conv45)|0);
      var $shr47=$mul46 >>> 3;
      $sumhi=$shr47;
      var $55=$sumhi;
      var $cmp48=(($55)>>>0) > 4194240;
      if ($cmp48) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $sum=2147483647;
      __label__ = 20; break;
    case 19: 
      var $56=$sumhi;
      var $shl=$56 << 10;
      var $57=$sumlo;
      var $add51=(($shl+$57)|0);
      $sum=$add51;
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $58=$sum;
      $mins=$58;
      __label__ = 22; break;
    case 22: 
      var $59=$filter_to_do;
      var $conv55=(($59)&255);
      var $cmp56=(($conv55)|0)==16;
      if ($cmp56) { __label__ = 23; break; } else { __label__ = 32; break; }
    case 23: 
      $i60=0;
      var $60=$row_buf;
      var $add_ptr61=(($60+1)|0);
      $rp59=$add_ptr61;
      var $61=$png_ptr_addr;
      var $sub_row=(($61+244)|0);
      var $62=HEAP32[(($sub_row)>>2)];
      var $add_ptr62=(($62+1)|0);
      $dp=$add_ptr62;
      __label__ = 24; break;
    case 24: 
      var $63=$i60;
      var $64=$bpp;
      var $cmp64=(($63)>>>0) < (($64)>>>0);
      if ($cmp64) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $65=$rp59;
      var $66=HEAP8[($65)];
      var $67=$dp;
      HEAP8[($67)]=$66;
      __label__ = 26; break;
    case 26: 
      var $68=$i60;
      var $inc68=(($68+1)|0);
      $i60=$inc68;
      var $69=$rp59;
      var $incdec_ptr69=(($69+1)|0);
      $rp59=$incdec_ptr69;
      var $70=$dp;
      var $incdec_ptr70=(($70+1)|0);
      $dp=$incdec_ptr70;
      __label__ = 24; break;
    case 27: 
      var $71=$row_buf;
      var $add_ptr72=(($71+1)|0);
      $lp=$add_ptr72;
      __label__ = 28; break;
    case 28: 
      var $72=$i60;
      var $73=$row_bytes;
      var $cmp74=(($72)>>>0) < (($73)>>>0);
      if ($cmp74) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: 
      var $74=$rp59;
      var $75=HEAPU8[($74)];
      var $conv77=(($75)&255);
      var $76=$lp;
      var $77=HEAPU8[($76)];
      var $conv78=(($77)&255);
      var $sub79=(($conv77-$conv78)|0);
      var $and80=$sub79 & 255;
      var $conv81=(($and80) & 255);
      var $78=$dp;
      HEAP8[($78)]=$conv81;
      __label__ = 30; break;
    case 30: 
      var $79=$i60;
      var $inc83=(($79+1)|0);
      $i60=$inc83;
      var $80=$rp59;
      var $incdec_ptr84=(($80+1)|0);
      $rp59=$incdec_ptr84;
      var $81=$lp;
      var $incdec_ptr85=(($81+1)|0);
      $lp=$incdec_ptr85;
      var $82=$dp;
      var $incdec_ptr86=(($82+1)|0);
      $dp=$incdec_ptr86;
      __label__ = 28; break;
    case 31: 
      var $83=$png_ptr_addr;
      var $sub_row88=(($83+244)|0);
      var $84=HEAP32[(($sub_row88)>>2)];
      $best_row=$84;
      __label__ = 75; break;
    case 32: 
      var $85=$filter_to_do;
      var $conv90=(($85)&255);
      var $and91=$conv90 & 16;
      var $tobool92=(($and91)|0)!=0;
      if ($tobool92) { __label__ = 33; break; } else { __label__ = 74; break; }
    case 33: 
      $sum97=0;
      var $86=$mins;
      $lmins=$86;
      var $87=$png_ptr_addr;
      var $heuristic_method100=(($87+492)|0);
      var $88=HEAPU8[($heuristic_method100)];
      var $conv101=(($88)&255);
      var $cmp102=(($conv101)|0)==2;
      if ($cmp102) { __label__ = 34; break; } else { __label__ = 44; break; }
    case 34: 
      var $89=$lmins;
      var $and106=$89 & 65535;
      $lmlo=$and106;
      var $90=$lmins;
      var $shr107=$90 >>> 10;
      var $and108=$shr107 & 4194240;
      $lmhi=$and108;
      $j105=0;
      __label__ = 35; break;
    case 35: 
      var $91=$j105;
      var $92=$num_p_filters;
      var $cmp110=(($91)|0) < (($92)|0);
      if ($cmp110) { __label__ = 36; break; } else { __label__ = 40; break; }
    case 36: 
      var $93=$j105;
      var $94=$png_ptr_addr;
      var $prev_filters113=(($94+496)|0);
      var $95=HEAP32[(($prev_filters113)>>2)];
      var $arrayidx114=(($95+$93)|0);
      var $96=HEAPU8[($arrayidx114)];
      var $conv115=(($96)&255);
      var $cmp116=(($conv115)|0)==1;
      if ($cmp116) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $97=$lmlo;
      var $98=$j105;
      var $99=$png_ptr_addr;
      var $inv_filter_weights=(($99+504)|0);
      var $100=HEAP32[(($inv_filter_weights)>>2)];
      var $arrayidx119=(($100+($98<<1))|0);
      var $101=HEAPU16[(($arrayidx119)>>1)];
      var $conv120=(($101)&65535);
      var $mul121=(($97*$conv120)|0);
      var $shr122=$mul121 >>> 8;
      $lmlo=$shr122;
      var $102=$lmhi;
      var $103=$j105;
      var $104=$png_ptr_addr;
      var $inv_filter_weights123=(($104+504)|0);
      var $105=HEAP32[(($inv_filter_weights123)>>2)];
      var $arrayidx124=(($105+($103<<1))|0);
      var $106=HEAPU16[(($arrayidx124)>>1)];
      var $conv125=(($106)&65535);
      var $mul126=(($102*$conv125)|0);
      var $shr127=$mul126 >>> 8;
      $lmhi=$shr127;
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $107=$j105;
      var $inc130=(($107+1)|0);
      $j105=$inc130;
      __label__ = 35; break;
    case 40: 
      var $108=$lmlo;
      var $109=$png_ptr_addr;
      var $inv_filter_costs=(($109+512)|0);
      var $110=HEAP32[(($inv_filter_costs)>>2)];
      var $arrayidx132=(($110+2)|0);
      var $111=HEAPU16[(($arrayidx132)>>1)];
      var $conv133=(($111)&65535);
      var $mul134=(($108*$conv133)|0);
      var $shr135=$mul134 >>> 3;
      $lmlo=$shr135;
      var $112=$lmhi;
      var $113=$png_ptr_addr;
      var $inv_filter_costs136=(($113+512)|0);
      var $114=HEAP32[(($inv_filter_costs136)>>2)];
      var $arrayidx137=(($114+2)|0);
      var $115=HEAPU16[(($arrayidx137)>>1)];
      var $conv138=(($115)&65535);
      var $mul139=(($112*$conv138)|0);
      var $shr140=$mul139 >>> 3;
      $lmhi=$shr140;
      var $116=$lmhi;
      var $cmp141=(($116)>>>0) > 4194240;
      if ($cmp141) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      $lmins=2147483647;
      __label__ = 43; break;
    case 42: 
      var $117=$lmhi;
      var $shl145=$117 << 10;
      var $118=$lmlo;
      var $add146=(($shl145+$118)|0);
      $lmins=$add146;
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      $i98=0;
      var $119=$row_buf;
      var $add_ptr149=(($119+1)|0);
      $rp94=$add_ptr149;
      var $120=$png_ptr_addr;
      var $sub_row150=(($120+244)|0);
      var $121=HEAP32[(($sub_row150)>>2)];
      var $add_ptr151=(($121+1)|0);
      $dp95=$add_ptr151;
      __label__ = 45; break;
    case 45: 
      var $122=$i98;
      var $123=$bpp;
      var $cmp153=(($122)>>>0) < (($123)>>>0);
      if ($cmp153) { __label__ = 46; break; } else { __label__ = 51; break; }
    case 46: 
      var $124=$rp94;
      var $125=HEAPU8[($124)];
      var $126=$dp95;
      HEAP8[($126)]=$125;
      var $conv156=(($125)&255);
      $v99=$conv156;
      var $127=$v99;
      var $cmp157=(($127)|0) < 128;
      if ($cmp157) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $128=$v99;
      var $cond163 = $128;__label__ = 49; break;
    case 48: 
      var $129=$v99;
      var $sub161=((256-$129)|0);
      var $cond163 = $sub161;__label__ = 49; break;
    case 49: 
      var $cond163;
      var $130=$sum97;
      var $add164=(($130+$cond163)|0);
      $sum97=$add164;
      __label__ = 50; break;
    case 50: 
      var $131=$i98;
      var $inc166=(($131+1)|0);
      $i98=$inc166;
      var $132=$rp94;
      var $incdec_ptr167=(($132+1)|0);
      $rp94=$incdec_ptr167;
      var $133=$dp95;
      var $incdec_ptr168=(($133+1)|0);
      $dp95=$incdec_ptr168;
      __label__ = 45; break;
    case 51: 
      var $134=$row_buf;
      var $add_ptr170=(($134+1)|0);
      $lp96=$add_ptr170;
      __label__ = 52; break;
    case 52: 
      var $135=$i98;
      var $136=$row_bytes;
      var $cmp172=(($135)>>>0) < (($136)>>>0);
      if ($cmp172) { __label__ = 53; break; } else { __label__ = 60; break; }
    case 53: 
      var $137=$rp94;
      var $138=HEAPU8[($137)];
      var $conv175=(($138)&255);
      var $139=$lp96;
      var $140=HEAPU8[($139)];
      var $conv176=(($140)&255);
      var $sub177=(($conv175-$conv176)|0);
      var $and178=$sub177 & 255;
      var $conv179=(($and178) & 255);
      var $141=$dp95;
      HEAP8[($141)]=$conv179;
      var $conv180=(($conv179)&255);
      $v99=$conv180;
      var $142=$v99;
      var $cmp181=(($142)|0) < 128;
      if ($cmp181) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $143=$v99;
      var $cond187 = $143;__label__ = 56; break;
    case 55: 
      var $144=$v99;
      var $sub185=((256-$144)|0);
      var $cond187 = $sub185;__label__ = 56; break;
    case 56: 
      var $cond187;
      var $145=$sum97;
      var $add188=(($145+$cond187)|0);
      $sum97=$add188;
      var $146=$sum97;
      var $147=$lmins;
      var $cmp189=(($146)>>>0) > (($147)>>>0);
      if ($cmp189) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      __label__ = 60; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $148=$i98;
      var $inc194=(($148+1)|0);
      $i98=$inc194;
      var $149=$rp94;
      var $incdec_ptr195=(($149+1)|0);
      $rp94=$incdec_ptr195;
      var $150=$lp96;
      var $incdec_ptr196=(($150+1)|0);
      $lp96=$incdec_ptr196;
      var $151=$dp95;
      var $incdec_ptr197=(($151+1)|0);
      $dp95=$incdec_ptr197;
      __label__ = 52; break;
    case 60: 
      var $152=$png_ptr_addr;
      var $heuristic_method199=(($152+492)|0);
      var $153=HEAPU8[($heuristic_method199)];
      var $conv200=(($153)&255);
      var $cmp201=(($conv200)|0)==2;
      if ($cmp201) { __label__ = 61; break; } else { __label__ = 71; break; }
    case 61: 
      var $154=$sum97;
      var $and207=$154 & 65535;
      $sumlo206=$and207;
      var $155=$sum97;
      var $shr208=$155 >>> 10;
      var $and209=$shr208 & 4194240;
      $sumhi205=$and209;
      $j204=0;
      __label__ = 62; break;
    case 62: 
      var $156=$j204;
      var $157=$num_p_filters;
      var $cmp211=(($156)|0) < (($157)|0);
      if ($cmp211) { __label__ = 63; break; } else { __label__ = 67; break; }
    case 63: 
      var $158=$j204;
      var $159=$png_ptr_addr;
      var $prev_filters214=(($159+496)|0);
      var $160=HEAP32[(($prev_filters214)>>2)];
      var $arrayidx215=(($160+$158)|0);
      var $161=HEAPU8[($arrayidx215)];
      var $conv216=(($161)&255);
      var $cmp217=(($conv216)|0)==1;
      if ($cmp217) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $162=$sumlo206;
      var $163=$j204;
      var $164=$png_ptr_addr;
      var $inv_filter_weights220=(($164+504)|0);
      var $165=HEAP32[(($inv_filter_weights220)>>2)];
      var $arrayidx221=(($165+($163<<1))|0);
      var $166=HEAPU16[(($arrayidx221)>>1)];
      var $conv222=(($166)&65535);
      var $mul223=(($162*$conv222)|0);
      var $shr224=$mul223 >>> 8;
      $sumlo206=$shr224;
      var $167=$sumhi205;
      var $168=$j204;
      var $169=$png_ptr_addr;
      var $inv_filter_weights225=(($169+504)|0);
      var $170=HEAP32[(($inv_filter_weights225)>>2)];
      var $arrayidx226=(($170+($168<<1))|0);
      var $171=HEAPU16[(($arrayidx226)>>1)];
      var $conv227=(($171)&65535);
      var $mul228=(($167*$conv227)|0);
      var $shr229=$mul228 >>> 8;
      $sumhi205=$shr229;
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $172=$j204;
      var $inc232=(($172+1)|0);
      $j204=$inc232;
      __label__ = 62; break;
    case 67: 
      var $173=$sumlo206;
      var $174=$png_ptr_addr;
      var $inv_filter_costs234=(($174+512)|0);
      var $175=HEAP32[(($inv_filter_costs234)>>2)];
      var $arrayidx235=(($175+2)|0);
      var $176=HEAPU16[(($arrayidx235)>>1)];
      var $conv236=(($176)&65535);
      var $mul237=(($173*$conv236)|0);
      var $shr238=$mul237 >>> 3;
      $sumlo206=$shr238;
      var $177=$sumhi205;
      var $178=$png_ptr_addr;
      var $inv_filter_costs239=(($178+512)|0);
      var $179=HEAP32[(($inv_filter_costs239)>>2)];
      var $arrayidx240=(($179+2)|0);
      var $180=HEAPU16[(($arrayidx240)>>1)];
      var $conv241=(($180)&65535);
      var $mul242=(($177*$conv241)|0);
      var $shr243=$mul242 >>> 3;
      $sumhi205=$shr243;
      var $181=$sumhi205;
      var $cmp244=(($181)>>>0) > 4194240;
      if ($cmp244) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      $sum97=2147483647;
      __label__ = 70; break;
    case 69: 
      var $182=$sumhi205;
      var $shl248=$182 << 10;
      var $183=$sumlo206;
      var $add249=(($shl248+$183)|0);
      $sum97=$add249;
      __label__ = 70; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      var $184=$sum97;
      var $185=$mins;
      var $cmp252=(($184)>>>0) < (($185)>>>0);
      if ($cmp252) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $186=$sum97;
      $mins=$186;
      var $187=$png_ptr_addr;
      var $sub_row255=(($187+244)|0);
      var $188=HEAP32[(($sub_row255)>>2)];
      $best_row=$188;
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      var $189=$filter_to_do;
      var $conv259=(($189)&255);
      var $cmp260=(($conv259)|0)==32;
      if ($cmp260) { __label__ = 76; break; } else { __label__ = 81; break; }
    case 76: 
      $i265=0;
      var $190=$row_buf;
      var $add_ptr266=(($190+1)|0);
      $rp263=$add_ptr266;
      var $191=$png_ptr_addr;
      var $up_row=(($191+248)|0);
      var $192=HEAP32[(($up_row)>>2)];
      var $add_ptr267=(($192+1)|0);
      $dp264=$add_ptr267;
      var $193=$prev_row;
      var $add_ptr268=(($193+1)|0);
      $pp=$add_ptr268;
      __label__ = 77; break;
    case 77: 
      var $194=$i265;
      var $195=$row_bytes;
      var $cmp270=(($194)>>>0) < (($195)>>>0);
      if ($cmp270) { __label__ = 78; break; } else { __label__ = 80; break; }
    case 78: 
      var $196=$rp263;
      var $197=HEAPU8[($196)];
      var $conv273=(($197)&255);
      var $198=$pp;
      var $199=HEAPU8[($198)];
      var $conv274=(($199)&255);
      var $sub275=(($conv273-$conv274)|0);
      var $and276=$sub275 & 255;
      var $conv277=(($and276) & 255);
      var $200=$dp264;
      HEAP8[($200)]=$conv277;
      __label__ = 79; break;
    case 79: 
      var $201=$i265;
      var $inc279=(($201+1)|0);
      $i265=$inc279;
      var $202=$rp263;
      var $incdec_ptr280=(($202+1)|0);
      $rp263=$incdec_ptr280;
      var $203=$pp;
      var $incdec_ptr281=(($203+1)|0);
      $pp=$incdec_ptr281;
      var $204=$dp264;
      var $incdec_ptr282=(($204+1)|0);
      $dp264=$incdec_ptr282;
      __label__ = 77; break;
    case 80: 
      var $205=$png_ptr_addr;
      var $up_row284=(($205+248)|0);
      var $206=HEAP32[(($up_row284)>>2)];
      $best_row=$206;
      __label__ = 117; break;
    case 81: 
      var $207=$filter_to_do;
      var $conv286=(($207)&255);
      var $and287=$conv286 & 32;
      var $tobool288=(($and287)|0)!=0;
      if ($tobool288) { __label__ = 82; break; } else { __label__ = 116; break; }
    case 82: 
      $sum293=0;
      var $208=$mins;
      $lmins294=$208;
      var $209=$png_ptr_addr;
      var $heuristic_method297=(($209+492)|0);
      var $210=HEAPU8[($heuristic_method297)];
      var $conv298=(($210)&255);
      var $cmp299=(($conv298)|0)==2;
      if ($cmp299) { __label__ = 83; break; } else { __label__ = 93; break; }
    case 83: 
      var $211=$lmins294;
      var $and305=$211 & 65535;
      $lmlo304=$and305;
      var $212=$lmins294;
      var $shr306=$212 >>> 10;
      var $and307=$shr306 & 4194240;
      $lmhi303=$and307;
      $j302=0;
      __label__ = 84; break;
    case 84: 
      var $213=$j302;
      var $214=$num_p_filters;
      var $cmp309=(($213)|0) < (($214)|0);
      if ($cmp309) { __label__ = 85; break; } else { __label__ = 89; break; }
    case 85: 
      var $215=$j302;
      var $216=$png_ptr_addr;
      var $prev_filters312=(($216+496)|0);
      var $217=HEAP32[(($prev_filters312)>>2)];
      var $arrayidx313=(($217+$215)|0);
      var $218=HEAPU8[($arrayidx313)];
      var $conv314=(($218)&255);
      var $cmp315=(($conv314)|0)==2;
      if ($cmp315) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $219=$lmlo304;
      var $220=$j302;
      var $221=$png_ptr_addr;
      var $inv_filter_weights318=(($221+504)|0);
      var $222=HEAP32[(($inv_filter_weights318)>>2)];
      var $arrayidx319=(($222+($220<<1))|0);
      var $223=HEAPU16[(($arrayidx319)>>1)];
      var $conv320=(($223)&65535);
      var $mul321=(($219*$conv320)|0);
      var $shr322=$mul321 >>> 8;
      $lmlo304=$shr322;
      var $224=$lmhi303;
      var $225=$j302;
      var $226=$png_ptr_addr;
      var $inv_filter_weights323=(($226+504)|0);
      var $227=HEAP32[(($inv_filter_weights323)>>2)];
      var $arrayidx324=(($227+($225<<1))|0);
      var $228=HEAPU16[(($arrayidx324)>>1)];
      var $conv325=(($228)&65535);
      var $mul326=(($224*$conv325)|0);
      var $shr327=$mul326 >>> 8;
      $lmhi303=$shr327;
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      var $229=$j302;
      var $inc330=(($229+1)|0);
      $j302=$inc330;
      __label__ = 84; break;
    case 89: 
      var $230=$lmlo304;
      var $231=$png_ptr_addr;
      var $inv_filter_costs332=(($231+512)|0);
      var $232=HEAP32[(($inv_filter_costs332)>>2)];
      var $arrayidx333=(($232+4)|0);
      var $233=HEAPU16[(($arrayidx333)>>1)];
      var $conv334=(($233)&65535);
      var $mul335=(($230*$conv334)|0);
      var $shr336=$mul335 >>> 3;
      $lmlo304=$shr336;
      var $234=$lmhi303;
      var $235=$png_ptr_addr;
      var $inv_filter_costs337=(($235+512)|0);
      var $236=HEAP32[(($inv_filter_costs337)>>2)];
      var $arrayidx338=(($236+4)|0);
      var $237=HEAPU16[(($arrayidx338)>>1)];
      var $conv339=(($237)&65535);
      var $mul340=(($234*$conv339)|0);
      var $shr341=$mul340 >>> 3;
      $lmhi303=$shr341;
      var $238=$lmhi303;
      var $cmp342=(($238)>>>0) > 4194240;
      if ($cmp342) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      $lmins294=2147483647;
      __label__ = 92; break;
    case 91: 
      var $239=$lmhi303;
      var $shl346=$239 << 10;
      var $240=$lmlo304;
      var $add347=(($shl346+$240)|0);
      $lmins294=$add347;
      __label__ = 92; break;
    case 92: 
      __label__ = 93; break;
    case 93: 
      $i295=0;
      var $241=$row_buf;
      var $add_ptr350=(($241+1)|0);
      $rp290=$add_ptr350;
      var $242=$png_ptr_addr;
      var $up_row351=(($242+248)|0);
      var $243=HEAP32[(($up_row351)>>2)];
      var $add_ptr352=(($243+1)|0);
      $dp291=$add_ptr352;
      var $244=$prev_row;
      var $add_ptr353=(($244+1)|0);
      $pp292=$add_ptr353;
      __label__ = 94; break;
    case 94: 
      var $245=$i295;
      var $246=$row_bytes;
      var $cmp355=(($245)>>>0) < (($246)>>>0);
      if ($cmp355) { __label__ = 95; break; } else { __label__ = 102; break; }
    case 95: 
      var $247=$rp290;
      var $incdec_ptr358=(($247+1)|0);
      $rp290=$incdec_ptr358;
      var $248=HEAPU8[($247)];
      var $conv359=(($248)&255);
      var $249=$pp292;
      var $incdec_ptr360=(($249+1)|0);
      $pp292=$incdec_ptr360;
      var $250=HEAPU8[($249)];
      var $conv361=(($250)&255);
      var $sub362=(($conv359-$conv361)|0);
      var $and363=$sub362 & 255;
      var $conv364=(($and363) & 255);
      var $251=$dp291;
      var $incdec_ptr365=(($251+1)|0);
      $dp291=$incdec_ptr365;
      HEAP8[($251)]=$conv364;
      var $conv366=(($conv364)&255);
      $v296=$conv366;
      var $252=$v296;
      var $cmp367=(($252)|0) < 128;
      if ($cmp367) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: 
      var $253=$v296;
      var $cond373 = $253;__label__ = 98; break;
    case 97: 
      var $254=$v296;
      var $sub371=((256-$254)|0);
      var $cond373 = $sub371;__label__ = 98; break;
    case 98: 
      var $cond373;
      var $255=$sum293;
      var $add374=(($255+$cond373)|0);
      $sum293=$add374;
      var $256=$sum293;
      var $257=$lmins294;
      var $cmp375=(($256)>>>0) > (($257)>>>0);
      if ($cmp375) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      __label__ = 102; break;
    case 100: 
      __label__ = 101; break;
    case 101: 
      var $258=$i295;
      var $inc380=(($258+1)|0);
      $i295=$inc380;
      __label__ = 94; break;
    case 102: 
      var $259=$png_ptr_addr;
      var $heuristic_method382=(($259+492)|0);
      var $260=HEAPU8[($heuristic_method382)];
      var $conv383=(($260)&255);
      var $cmp384=(($conv383)|0)==2;
      if ($cmp384) { __label__ = 103; break; } else { __label__ = 113; break; }
    case 103: 
      var $261=$sum293;
      var $and390=$261 & 65535;
      $sumlo389=$and390;
      var $262=$sum293;
      var $shr391=$262 >>> 10;
      var $and392=$shr391 & 4194240;
      $sumhi388=$and392;
      $j387=0;
      __label__ = 104; break;
    case 104: 
      var $263=$j387;
      var $264=$num_p_filters;
      var $cmp394=(($263)|0) < (($264)|0);
      if ($cmp394) { __label__ = 105; break; } else { __label__ = 109; break; }
    case 105: 
      var $265=$j387;
      var $266=$png_ptr_addr;
      var $prev_filters397=(($266+496)|0);
      var $267=HEAP32[(($prev_filters397)>>2)];
      var $arrayidx398=(($267+$265)|0);
      var $268=HEAPU8[($arrayidx398)];
      var $conv399=(($268)&255);
      var $cmp400=(($conv399)|0)==2;
      if ($cmp400) { __label__ = 106; break; } else { __label__ = 107; break; }
    case 106: 
      var $269=$sumlo389;
      var $270=$j387;
      var $271=$png_ptr_addr;
      var $filter_weights403=(($271+500)|0);
      var $272=HEAP32[(($filter_weights403)>>2)];
      var $arrayidx404=(($272+($270<<1))|0);
      var $273=HEAPU16[(($arrayidx404)>>1)];
      var $conv405=(($273)&65535);
      var $mul406=(($269*$conv405)|0);
      var $shr407=$mul406 >>> 8;
      $sumlo389=$shr407;
      var $274=$sumhi388;
      var $275=$j387;
      var $276=$png_ptr_addr;
      var $filter_weights408=(($276+500)|0);
      var $277=HEAP32[(($filter_weights408)>>2)];
      var $arrayidx409=(($277+($275<<1))|0);
      var $278=HEAPU16[(($arrayidx409)>>1)];
      var $conv410=(($278)&65535);
      var $mul411=(($274*$conv410)|0);
      var $shr412=$mul411 >>> 8;
      $sumhi388=$shr412;
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      var $279=$j387;
      var $inc415=(($279+1)|0);
      $j387=$inc415;
      __label__ = 104; break;
    case 109: 
      var $280=$sumlo389;
      var $281=$png_ptr_addr;
      var $filter_costs417=(($281+508)|0);
      var $282=HEAP32[(($filter_costs417)>>2)];
      var $arrayidx418=(($282+4)|0);
      var $283=HEAPU16[(($arrayidx418)>>1)];
      var $conv419=(($283)&65535);
      var $mul420=(($280*$conv419)|0);
      var $shr421=$mul420 >>> 3;
      $sumlo389=$shr421;
      var $284=$sumhi388;
      var $285=$png_ptr_addr;
      var $filter_costs422=(($285+508)|0);
      var $286=HEAP32[(($filter_costs422)>>2)];
      var $arrayidx423=(($286+4)|0);
      var $287=HEAPU16[(($arrayidx423)>>1)];
      var $conv424=(($287)&65535);
      var $mul425=(($284*$conv424)|0);
      var $shr426=$mul425 >>> 3;
      $sumhi388=$shr426;
      var $288=$sumhi388;
      var $cmp427=(($288)>>>0) > 4194240;
      if ($cmp427) { __label__ = 110; break; } else { __label__ = 111; break; }
    case 110: 
      $sum293=2147483647;
      __label__ = 112; break;
    case 111: 
      var $289=$sumhi388;
      var $shl431=$289 << 10;
      var $290=$sumlo389;
      var $add432=(($shl431+$290)|0);
      $sum293=$add432;
      __label__ = 112; break;
    case 112: 
      __label__ = 113; break;
    case 113: 
      var $291=$sum293;
      var $292=$mins;
      var $cmp435=(($291)>>>0) < (($292)>>>0);
      if ($cmp435) { __label__ = 114; break; } else { __label__ = 115; break; }
    case 114: 
      var $293=$sum293;
      $mins=$293;
      var $294=$png_ptr_addr;
      var $up_row438=(($294+248)|0);
      var $295=HEAP32[(($up_row438)>>2)];
      $best_row=$295;
      __label__ = 115; break;
    case 115: 
      __label__ = 116; break;
    case 116: 
      __label__ = 117; break;
    case 117: 
      var $296=$filter_to_do;
      var $conv442=(($296)&255);
      var $cmp443=(($conv442)|0)==64;
      if ($cmp443) { __label__ = 118; break; } else { __label__ = 127; break; }
    case 118: 
      $i450=0;
      var $297=$row_buf;
      var $add_ptr451=(($297+1)|0);
      $rp446=$add_ptr451;
      var $298=$png_ptr_addr;
      var $avg_row=(($298+252)|0);
      var $299=HEAP32[(($avg_row)>>2)];
      var $add_ptr452=(($299+1)|0);
      $dp447=$add_ptr452;
      var $300=$prev_row;
      var $add_ptr453=(($300+1)|0);
      $pp448=$add_ptr453;
      __label__ = 119; break;
    case 119: 
      var $301=$i450;
      var $302=$bpp;
      var $cmp455=(($301)>>>0) < (($302)>>>0);
      if ($cmp455) { __label__ = 120; break; } else { __label__ = 122; break; }
    case 120: 
      var $303=$rp446;
      var $incdec_ptr458=(($303+1)|0);
      $rp446=$incdec_ptr458;
      var $304=HEAPU8[($303)];
      var $conv459=(($304)&255);
      var $305=$pp448;
      var $incdec_ptr460=(($305+1)|0);
      $pp448=$incdec_ptr460;
      var $306=HEAPU8[($305)];
      var $conv461=(($306)&255);
      var $div=(((($conv461)|0)/2)&-1);
      var $sub462=(($conv459-$div)|0);
      var $and463=$sub462 & 255;
      var $conv464=(($and463) & 255);
      var $307=$dp447;
      var $incdec_ptr465=(($307+1)|0);
      $dp447=$incdec_ptr465;
      HEAP8[($307)]=$conv464;
      __label__ = 121; break;
    case 121: 
      var $308=$i450;
      var $inc467=(($308+1)|0);
      $i450=$inc467;
      __label__ = 119; break;
    case 122: 
      var $309=$row_buf;
      var $add_ptr469=(($309+1)|0);
      $lp449=$add_ptr469;
      __label__ = 123; break;
    case 123: 
      var $310=$i450;
      var $311=$row_bytes;
      var $cmp471=(($310)>>>0) < (($311)>>>0);
      if ($cmp471) { __label__ = 124; break; } else { __label__ = 126; break; }
    case 124: 
      var $312=$rp446;
      var $incdec_ptr474=(($312+1)|0);
      $rp446=$incdec_ptr474;
      var $313=HEAPU8[($312)];
      var $conv475=(($313)&255);
      var $314=$pp448;
      var $incdec_ptr476=(($314+1)|0);
      $pp448=$incdec_ptr476;
      var $315=HEAPU8[($314)];
      var $conv477=(($315)&255);
      var $316=$lp449;
      var $incdec_ptr478=(($316+1)|0);
      $lp449=$incdec_ptr478;
      var $317=HEAPU8[($316)];
      var $conv479=(($317)&255);
      var $add480=(($conv477+$conv479)|0);
      var $div481=(((($add480)|0)/2)&-1);
      var $sub482=(($conv475-$div481)|0);
      var $and483=$sub482 & 255;
      var $conv484=(($and483) & 255);
      var $318=$dp447;
      var $incdec_ptr485=(($318+1)|0);
      $dp447=$incdec_ptr485;
      HEAP8[($318)]=$conv484;
      __label__ = 125; break;
    case 125: 
      var $319=$i450;
      var $inc487=(($319+1)|0);
      $i450=$inc487;
      __label__ = 123; break;
    case 126: 
      var $320=$png_ptr_addr;
      var $avg_row489=(($320+252)|0);
      var $321=HEAP32[(($avg_row489)>>2)];
      $best_row=$321;
      __label__ = 170; break;
    case 127: 
      var $322=$filter_to_do;
      var $conv491=(($322)&255);
      var $and492=$conv491 & 64;
      var $tobool493=(($and492)|0)!=0;
      if ($tobool493) { __label__ = 128; break; } else { __label__ = 169; break; }
    case 128: 
      $sum499=0;
      var $323=$mins;
      $lmins500=$323;
      var $324=$png_ptr_addr;
      var $heuristic_method503=(($324+492)|0);
      var $325=HEAPU8[($heuristic_method503)];
      var $conv504=(($325)&255);
      var $cmp505=(($conv504)|0)==2;
      if ($cmp505) { __label__ = 129; break; } else { __label__ = 139; break; }
    case 129: 
      var $326=$lmins500;
      var $and511=$326 & 65535;
      $lmlo510=$and511;
      var $327=$lmins500;
      var $shr512=$327 >>> 10;
      var $and513=$shr512 & 4194240;
      $lmhi509=$and513;
      $j508=0;
      __label__ = 130; break;
    case 130: 
      var $328=$j508;
      var $329=$num_p_filters;
      var $cmp515=(($328)|0) < (($329)|0);
      if ($cmp515) { __label__ = 131; break; } else { __label__ = 135; break; }
    case 131: 
      var $330=$j508;
      var $331=$png_ptr_addr;
      var $prev_filters518=(($331+496)|0);
      var $332=HEAP32[(($prev_filters518)>>2)];
      var $arrayidx519=(($332+$330)|0);
      var $333=HEAPU8[($arrayidx519)];
      var $conv520=(($333)&255);
      var $cmp521=(($conv520)|0)==3;
      if ($cmp521) { __label__ = 132; break; } else { __label__ = 133; break; }
    case 132: 
      var $334=$lmlo510;
      var $335=$j508;
      var $336=$png_ptr_addr;
      var $inv_filter_weights524=(($336+504)|0);
      var $337=HEAP32[(($inv_filter_weights524)>>2)];
      var $arrayidx525=(($337+($335<<1))|0);
      var $338=HEAPU16[(($arrayidx525)>>1)];
      var $conv526=(($338)&65535);
      var $mul527=(($334*$conv526)|0);
      var $shr528=$mul527 >>> 8;
      $lmlo510=$shr528;
      var $339=$lmhi509;
      var $340=$j508;
      var $341=$png_ptr_addr;
      var $inv_filter_weights529=(($341+504)|0);
      var $342=HEAP32[(($inv_filter_weights529)>>2)];
      var $arrayidx530=(($342+($340<<1))|0);
      var $343=HEAPU16[(($arrayidx530)>>1)];
      var $conv531=(($343)&65535);
      var $mul532=(($339*$conv531)|0);
      var $shr533=$mul532 >>> 8;
      $lmhi509=$shr533;
      __label__ = 133; break;
    case 133: 
      __label__ = 134; break;
    case 134: 
      var $344=$j508;
      var $inc536=(($344+1)|0);
      $j508=$inc536;
      __label__ = 130; break;
    case 135: 
      var $345=$lmlo510;
      var $346=$png_ptr_addr;
      var $inv_filter_costs538=(($346+512)|0);
      var $347=HEAP32[(($inv_filter_costs538)>>2)];
      var $arrayidx539=(($347+6)|0);
      var $348=HEAPU16[(($arrayidx539)>>1)];
      var $conv540=(($348)&65535);
      var $mul541=(($345*$conv540)|0);
      var $shr542=$mul541 >>> 3;
      $lmlo510=$shr542;
      var $349=$lmhi509;
      var $350=$png_ptr_addr;
      var $inv_filter_costs543=(($350+512)|0);
      var $351=HEAP32[(($inv_filter_costs543)>>2)];
      var $arrayidx544=(($351+6)|0);
      var $352=HEAPU16[(($arrayidx544)>>1)];
      var $conv545=(($352)&65535);
      var $mul546=(($349*$conv545)|0);
      var $shr547=$mul546 >>> 3;
      $lmhi509=$shr547;
      var $353=$lmhi509;
      var $cmp548=(($353)>>>0) > 4194240;
      if ($cmp548) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: 
      $lmins500=2147483647;
      __label__ = 138; break;
    case 137: 
      var $354=$lmhi509;
      var $shl552=$354 << 10;
      var $355=$lmlo510;
      var $add553=(($shl552+$355)|0);
      $lmins500=$add553;
      __label__ = 138; break;
    case 138: 
      __label__ = 139; break;
    case 139: 
      $i501=0;
      var $356=$row_buf;
      var $add_ptr556=(($356+1)|0);
      $rp495=$add_ptr556;
      var $357=$png_ptr_addr;
      var $avg_row557=(($357+252)|0);
      var $358=HEAP32[(($avg_row557)>>2)];
      var $add_ptr558=(($358+1)|0);
      $dp496=$add_ptr558;
      var $359=$prev_row;
      var $add_ptr559=(($359+1)|0);
      $pp497=$add_ptr559;
      __label__ = 140; break;
    case 140: 
      var $360=$i501;
      var $361=$bpp;
      var $cmp561=(($360)>>>0) < (($361)>>>0);
      if ($cmp561) { __label__ = 141; break; } else { __label__ = 146; break; }
    case 141: 
      var $362=$rp495;
      var $incdec_ptr564=(($362+1)|0);
      $rp495=$incdec_ptr564;
      var $363=HEAPU8[($362)];
      var $conv565=(($363)&255);
      var $364=$pp497;
      var $incdec_ptr566=(($364+1)|0);
      $pp497=$incdec_ptr566;
      var $365=HEAPU8[($364)];
      var $conv567=(($365)&255);
      var $div568=(((($conv567)|0)/2)&-1);
      var $sub569=(($conv565-$div568)|0);
      var $and570=$sub569 & 255;
      var $conv571=(($and570) & 255);
      var $366=$dp496;
      var $incdec_ptr572=(($366+1)|0);
      $dp496=$incdec_ptr572;
      HEAP8[($366)]=$conv571;
      var $conv573=(($conv571)&255);
      $v502=$conv573;
      var $367=$v502;
      var $cmp574=(($367)|0) < 128;
      if ($cmp574) { __label__ = 142; break; } else { __label__ = 143; break; }
    case 142: 
      var $368=$v502;
      var $cond580 = $368;__label__ = 144; break;
    case 143: 
      var $369=$v502;
      var $sub578=((256-$369)|0);
      var $cond580 = $sub578;__label__ = 144; break;
    case 144: 
      var $cond580;
      var $370=$sum499;
      var $add581=(($370+$cond580)|0);
      $sum499=$add581;
      __label__ = 145; break;
    case 145: 
      var $371=$i501;
      var $inc583=(($371+1)|0);
      $i501=$inc583;
      __label__ = 140; break;
    case 146: 
      var $372=$row_buf;
      var $add_ptr585=(($372+1)|0);
      $lp498=$add_ptr585;
      __label__ = 147; break;
    case 147: 
      var $373=$i501;
      var $374=$row_bytes;
      var $cmp587=(($373)>>>0) < (($374)>>>0);
      if ($cmp587) { __label__ = 148; break; } else { __label__ = 155; break; }
    case 148: 
      var $375=$rp495;
      var $incdec_ptr590=(($375+1)|0);
      $rp495=$incdec_ptr590;
      var $376=HEAPU8[($375)];
      var $conv591=(($376)&255);
      var $377=$pp497;
      var $incdec_ptr592=(($377+1)|0);
      $pp497=$incdec_ptr592;
      var $378=HEAPU8[($377)];
      var $conv593=(($378)&255);
      var $379=$lp498;
      var $incdec_ptr594=(($379+1)|0);
      $lp498=$incdec_ptr594;
      var $380=HEAPU8[($379)];
      var $conv595=(($380)&255);
      var $add596=(($conv593+$conv595)|0);
      var $div597=(((($add596)|0)/2)&-1);
      var $sub598=(($conv591-$div597)|0);
      var $and599=$sub598 & 255;
      var $conv600=(($and599) & 255);
      var $381=$dp496;
      var $incdec_ptr601=(($381+1)|0);
      $dp496=$incdec_ptr601;
      HEAP8[($381)]=$conv600;
      var $conv602=(($conv600)&255);
      $v502=$conv602;
      var $382=$v502;
      var $cmp603=(($382)|0) < 128;
      if ($cmp603) { __label__ = 149; break; } else { __label__ = 150; break; }
    case 149: 
      var $383=$v502;
      var $cond609 = $383;__label__ = 151; break;
    case 150: 
      var $384=$v502;
      var $sub607=((256-$384)|0);
      var $cond609 = $sub607;__label__ = 151; break;
    case 151: 
      var $cond609;
      var $385=$sum499;
      var $add610=(($385+$cond609)|0);
      $sum499=$add610;
      var $386=$sum499;
      var $387=$lmins500;
      var $cmp611=(($386)>>>0) > (($387)>>>0);
      if ($cmp611) { __label__ = 152; break; } else { __label__ = 153; break; }
    case 152: 
      __label__ = 155; break;
    case 153: 
      __label__ = 154; break;
    case 154: 
      var $388=$i501;
      var $inc616=(($388+1)|0);
      $i501=$inc616;
      __label__ = 147; break;
    case 155: 
      var $389=$png_ptr_addr;
      var $heuristic_method618=(($389+492)|0);
      var $390=HEAPU8[($heuristic_method618)];
      var $conv619=(($390)&255);
      var $cmp620=(($conv619)|0)==2;
      if ($cmp620) { __label__ = 156; break; } else { __label__ = 166; break; }
    case 156: 
      var $391=$sum499;
      var $and626=$391 & 65535;
      $sumlo625=$and626;
      var $392=$sum499;
      var $shr627=$392 >>> 10;
      var $and628=$shr627 & 4194240;
      $sumhi624=$and628;
      $j623=0;
      __label__ = 157; break;
    case 157: 
      var $393=$j623;
      var $394=$num_p_filters;
      var $cmp630=(($393)|0) < (($394)|0);
      if ($cmp630) { __label__ = 158; break; } else { __label__ = 162; break; }
    case 158: 
      var $395=$j623;
      var $396=$png_ptr_addr;
      var $prev_filters633=(($396+496)|0);
      var $397=HEAP32[(($prev_filters633)>>2)];
      var $arrayidx634=(($397+$395)|0);
      var $398=HEAPU8[($arrayidx634)];
      var $conv635=(($398)&255);
      var $cmp636=(($conv635)|0)==0;
      if ($cmp636) { __label__ = 159; break; } else { __label__ = 160; break; }
    case 159: 
      var $399=$sumlo625;
      var $400=$j623;
      var $401=$png_ptr_addr;
      var $filter_weights639=(($401+500)|0);
      var $402=HEAP32[(($filter_weights639)>>2)];
      var $arrayidx640=(($402+($400<<1))|0);
      var $403=HEAPU16[(($arrayidx640)>>1)];
      var $conv641=(($403)&65535);
      var $mul642=(($399*$conv641)|0);
      var $shr643=$mul642 >>> 8;
      $sumlo625=$shr643;
      var $404=$sumhi624;
      var $405=$j623;
      var $406=$png_ptr_addr;
      var $filter_weights644=(($406+500)|0);
      var $407=HEAP32[(($filter_weights644)>>2)];
      var $arrayidx645=(($407+($405<<1))|0);
      var $408=HEAPU16[(($arrayidx645)>>1)];
      var $conv646=(($408)&65535);
      var $mul647=(($404*$conv646)|0);
      var $shr648=$mul647 >>> 8;
      $sumhi624=$shr648;
      __label__ = 160; break;
    case 160: 
      __label__ = 161; break;
    case 161: 
      var $409=$j623;
      var $inc651=(($409+1)|0);
      $j623=$inc651;
      __label__ = 157; break;
    case 162: 
      var $410=$sumlo625;
      var $411=$png_ptr_addr;
      var $filter_costs653=(($411+508)|0);
      var $412=HEAP32[(($filter_costs653)>>2)];
      var $arrayidx654=(($412+6)|0);
      var $413=HEAPU16[(($arrayidx654)>>1)];
      var $conv655=(($413)&65535);
      var $mul656=(($410*$conv655)|0);
      var $shr657=$mul656 >>> 3;
      $sumlo625=$shr657;
      var $414=$sumhi624;
      var $415=$png_ptr_addr;
      var $filter_costs658=(($415+508)|0);
      var $416=HEAP32[(($filter_costs658)>>2)];
      var $arrayidx659=(($416+6)|0);
      var $417=HEAPU16[(($arrayidx659)>>1)];
      var $conv660=(($417)&65535);
      var $mul661=(($414*$conv660)|0);
      var $shr662=$mul661 >>> 3;
      $sumhi624=$shr662;
      var $418=$sumhi624;
      var $cmp663=(($418)>>>0) > 4194240;
      if ($cmp663) { __label__ = 163; break; } else { __label__ = 164; break; }
    case 163: 
      $sum499=2147483647;
      __label__ = 165; break;
    case 164: 
      var $419=$sumhi624;
      var $shl667=$419 << 10;
      var $420=$sumlo625;
      var $add668=(($shl667+$420)|0);
      $sum499=$add668;
      __label__ = 165; break;
    case 165: 
      __label__ = 166; break;
    case 166: 
      var $421=$sum499;
      var $422=$mins;
      var $cmp671=(($421)>>>0) < (($422)>>>0);
      if ($cmp671) { __label__ = 167; break; } else { __label__ = 168; break; }
    case 167: 
      var $423=$sum499;
      $mins=$423;
      var $424=$png_ptr_addr;
      var $avg_row674=(($424+252)|0);
      var $425=HEAP32[(($avg_row674)>>2)];
      $best_row=$425;
      __label__ = 168; break;
    case 168: 
      __label__ = 169; break;
    case 169: 
      __label__ = 170; break;
    case 170: 
      var $426=$filter_to_do;
      var $conv678=(($426)&255);
      var $cmp679=(($conv678)|0)==128;
      if ($cmp679) { __label__ = 171; break; } else { __label__ = 196; break; }
    case 171: 
      $i686=0;
      var $427=$row_buf;
      var $add_ptr687=(($427+1)|0);
      $rp682=$add_ptr687;
      var $428=$png_ptr_addr;
      var $paeth_row=(($428+256)|0);
      var $429=HEAP32[(($paeth_row)>>2)];
      var $add_ptr688=(($429+1)|0);
      $dp683=$add_ptr688;
      var $430=$prev_row;
      var $add_ptr689=(($430+1)|0);
      $pp684=$add_ptr689;
      __label__ = 172; break;
    case 172: 
      var $431=$i686;
      var $432=$bpp;
      var $cmp691=(($431)>>>0) < (($432)>>>0);
      if ($cmp691) { __label__ = 173; break; } else { __label__ = 175; break; }
    case 173: 
      var $433=$rp682;
      var $incdec_ptr694=(($433+1)|0);
      $rp682=$incdec_ptr694;
      var $434=HEAPU8[($433)];
      var $conv695=(($434)&255);
      var $435=$pp684;
      var $incdec_ptr696=(($435+1)|0);
      $pp684=$incdec_ptr696;
      var $436=HEAPU8[($435)];
      var $conv697=(($436)&255);
      var $sub698=(($conv695-$conv697)|0);
      var $and699=$sub698 & 255;
      var $conv700=(($and699) & 255);
      var $437=$dp683;
      var $incdec_ptr701=(($437+1)|0);
      $dp683=$incdec_ptr701;
      HEAP8[($437)]=$conv700;
      __label__ = 174; break;
    case 174: 
      var $438=$i686;
      var $inc703=(($438+1)|0);
      $i686=$inc703;
      __label__ = 172; break;
    case 175: 
      var $439=$row_buf;
      var $add_ptr705=(($439+1)|0);
      $lp685=$add_ptr705;
      var $440=$prev_row;
      var $add_ptr706=(($440+1)|0);
      $cp=$add_ptr706;
      __label__ = 176; break;
    case 176: 
      var $441=$i686;
      var $442=$row_bytes;
      var $cmp708=(($441)>>>0) < (($442)>>>0);
      if ($cmp708) { __label__ = 177; break; } else { __label__ = 195; break; }
    case 177: 
      var $443=$pp684;
      var $incdec_ptr711=(($443+1)|0);
      $pp684=$incdec_ptr711;
      var $444=HEAPU8[($443)];
      var $conv712=(($444)&255);
      $b=$conv712;
      var $445=$cp;
      var $incdec_ptr713=(($445+1)|0);
      $cp=$incdec_ptr713;
      var $446=HEAPU8[($445)];
      var $conv714=(($446)&255);
      $c=$conv714;
      var $447=$lp685;
      var $incdec_ptr715=(($447+1)|0);
      $lp685=$incdec_ptr715;
      var $448=HEAPU8[($447)];
      var $conv716=(($448)&255);
      $a=$conv716;
      var $449=$b;
      var $450=$c;
      var $sub717=(($449-$450)|0);
      $p=$sub717;
      var $451=$a;
      var $452=$c;
      var $sub718=(($451-$452)|0);
      $pc=$sub718;
      var $453=$p;
      var $cmp719=(($453)|0) < 0;
      if ($cmp719) { __label__ = 178; break; } else { __label__ = 179; break; }
    case 178: 
      var $454=$p;
      var $sub722=(((-$454))|0);
      var $cond725 = $sub722;__label__ = 180; break;
    case 179: 
      var $455=$p;
      var $cond725 = $455;__label__ = 180; break;
    case 180: 
      var $cond725;
      $pa=$cond725;
      var $456=$pc;
      var $cmp726=(($456)|0) < 0;
      if ($cmp726) { __label__ = 181; break; } else { __label__ = 182; break; }
    case 181: 
      var $457=$pc;
      var $sub729=(((-$457))|0);
      var $cond732 = $sub729;__label__ = 183; break;
    case 182: 
      var $458=$pc;
      var $cond732 = $458;__label__ = 183; break;
    case 183: 
      var $cond732;
      $pb=$cond732;
      var $459=$p;
      var $460=$pc;
      var $add733=(($459+$460)|0);
      var $cmp734=(($add733)|0) < 0;
      if ($cmp734) { __label__ = 184; break; } else { __label__ = 185; break; }
    case 184: 
      var $461=$p;
      var $462=$pc;
      var $add737=(($461+$462)|0);
      var $sub738=(((-$add737))|0);
      var $cond742 = $sub738;__label__ = 186; break;
    case 185: 
      var $463=$p;
      var $464=$pc;
      var $add740=(($463+$464)|0);
      var $cond742 = $add740;__label__ = 186; break;
    case 186: 
      var $cond742;
      $pc=$cond742;
      var $465=$pa;
      var $466=$pb;
      var $cmp743=(($465)|0) <= (($466)|0);
      if ($cmp743) { __label__ = 187; break; } else { __label__ = 189; break; }
    case 187: 
      var $467=$pa;
      var $468=$pc;
      var $cmp746=(($467)|0) <= (($468)|0);
      if ($cmp746) { __label__ = 188; break; } else { __label__ = 189; break; }
    case 188: 
      var $469=$a;
      var $cond757 = $469;__label__ = 193; break;
    case 189: 
      var $470=$pb;
      var $471=$pc;
      var $cmp750=(($470)|0) <= (($471)|0);
      if ($cmp750) { __label__ = 190; break; } else { __label__ = 191; break; }
    case 190: 
      var $472=$b;
      var $cond755 = $472;__label__ = 192; break;
    case 191: 
      var $473=$c;
      var $cond755 = $473;__label__ = 192; break;
    case 192: 
      var $cond755;
      var $cond757 = $cond755;__label__ = 193; break;
    case 193: 
      var $cond757;
      $p=$cond757;
      var $474=$rp682;
      var $incdec_ptr758=(($474+1)|0);
      $rp682=$incdec_ptr758;
      var $475=HEAPU8[($474)];
      var $conv759=(($475)&255);
      var $476=$p;
      var $sub760=(($conv759-$476)|0);
      var $and761=$sub760 & 255;
      var $conv762=(($and761) & 255);
      var $477=$dp683;
      var $incdec_ptr763=(($477+1)|0);
      $dp683=$incdec_ptr763;
      HEAP8[($477)]=$conv762;
      __label__ = 194; break;
    case 194: 
      var $478=$i686;
      var $inc765=(($478+1)|0);
      $i686=$inc765;
      __label__ = 176; break;
    case 195: 
      var $479=$png_ptr_addr;
      var $paeth_row767=(($479+256)|0);
      var $480=HEAP32[(($paeth_row767)>>2)];
      $best_row=$480;
      __label__ = 255; break;
    case 196: 
      var $481=$filter_to_do;
      var $conv769=(($481)&255);
      var $and770=$conv769 & 128;
      var $tobool771=(($and770)|0)!=0;
      if ($tobool771) { __label__ = 197; break; } else { __label__ = 254; break; }
    case 197: 
      $sum778=0;
      var $482=$mins;
      $lmins779=$482;
      var $483=$png_ptr_addr;
      var $heuristic_method782=(($483+492)|0);
      var $484=HEAPU8[($heuristic_method782)];
      var $conv783=(($484)&255);
      var $cmp784=(($conv783)|0)==2;
      if ($cmp784) { __label__ = 198; break; } else { __label__ = 208; break; }
    case 198: 
      var $485=$lmins779;
      var $and790=$485 & 65535;
      $lmlo789=$and790;
      var $486=$lmins779;
      var $shr791=$486 >>> 10;
      var $and792=$shr791 & 4194240;
      $lmhi788=$and792;
      $j787=0;
      __label__ = 199; break;
    case 199: 
      var $487=$j787;
      var $488=$num_p_filters;
      var $cmp794=(($487)|0) < (($488)|0);
      if ($cmp794) { __label__ = 200; break; } else { __label__ = 204; break; }
    case 200: 
      var $489=$j787;
      var $490=$png_ptr_addr;
      var $prev_filters797=(($490+496)|0);
      var $491=HEAP32[(($prev_filters797)>>2)];
      var $arrayidx798=(($491+$489)|0);
      var $492=HEAPU8[($arrayidx798)];
      var $conv799=(($492)&255);
      var $cmp800=(($conv799)|0)==4;
      if ($cmp800) { __label__ = 201; break; } else { __label__ = 202; break; }
    case 201: 
      var $493=$lmlo789;
      var $494=$j787;
      var $495=$png_ptr_addr;
      var $inv_filter_weights803=(($495+504)|0);
      var $496=HEAP32[(($inv_filter_weights803)>>2)];
      var $arrayidx804=(($496+($494<<1))|0);
      var $497=HEAPU16[(($arrayidx804)>>1)];
      var $conv805=(($497)&65535);
      var $mul806=(($493*$conv805)|0);
      var $shr807=$mul806 >>> 8;
      $lmlo789=$shr807;
      var $498=$lmhi788;
      var $499=$j787;
      var $500=$png_ptr_addr;
      var $inv_filter_weights808=(($500+504)|0);
      var $501=HEAP32[(($inv_filter_weights808)>>2)];
      var $arrayidx809=(($501+($499<<1))|0);
      var $502=HEAPU16[(($arrayidx809)>>1)];
      var $conv810=(($502)&65535);
      var $mul811=(($498*$conv810)|0);
      var $shr812=$mul811 >>> 8;
      $lmhi788=$shr812;
      __label__ = 202; break;
    case 202: 
      __label__ = 203; break;
    case 203: 
      var $503=$j787;
      var $inc815=(($503+1)|0);
      $j787=$inc815;
      __label__ = 199; break;
    case 204: 
      var $504=$lmlo789;
      var $505=$png_ptr_addr;
      var $inv_filter_costs817=(($505+512)|0);
      var $506=HEAP32[(($inv_filter_costs817)>>2)];
      var $arrayidx818=(($506+8)|0);
      var $507=HEAPU16[(($arrayidx818)>>1)];
      var $conv819=(($507)&65535);
      var $mul820=(($504*$conv819)|0);
      var $shr821=$mul820 >>> 3;
      $lmlo789=$shr821;
      var $508=$lmhi788;
      var $509=$png_ptr_addr;
      var $inv_filter_costs822=(($509+512)|0);
      var $510=HEAP32[(($inv_filter_costs822)>>2)];
      var $arrayidx823=(($510+8)|0);
      var $511=HEAPU16[(($arrayidx823)>>1)];
      var $conv824=(($511)&65535);
      var $mul825=(($508*$conv824)|0);
      var $shr826=$mul825 >>> 3;
      $lmhi788=$shr826;
      var $512=$lmhi788;
      var $cmp827=(($512)>>>0) > 4194240;
      if ($cmp827) { __label__ = 205; break; } else { __label__ = 206; break; }
    case 205: 
      $lmins779=2147483647;
      __label__ = 207; break;
    case 206: 
      var $513=$lmhi788;
      var $shl831=$513 << 10;
      var $514=$lmlo789;
      var $add832=(($shl831+$514)|0);
      $lmins779=$add832;
      __label__ = 207; break;
    case 207: 
      __label__ = 208; break;
    case 208: 
      $i780=0;
      var $515=$row_buf;
      var $add_ptr835=(($515+1)|0);
      $rp773=$add_ptr835;
      var $516=$png_ptr_addr;
      var $paeth_row836=(($516+256)|0);
      var $517=HEAP32[(($paeth_row836)>>2)];
      var $add_ptr837=(($517+1)|0);
      $dp774=$add_ptr837;
      var $518=$prev_row;
      var $add_ptr838=(($518+1)|0);
      $pp775=$add_ptr838;
      __label__ = 209; break;
    case 209: 
      var $519=$i780;
      var $520=$bpp;
      var $cmp840=(($519)>>>0) < (($520)>>>0);
      if ($cmp840) { __label__ = 210; break; } else { __label__ = 215; break; }
    case 210: 
      var $521=$rp773;
      var $incdec_ptr843=(($521+1)|0);
      $rp773=$incdec_ptr843;
      var $522=HEAPU8[($521)];
      var $conv844=(($522)&255);
      var $523=$pp775;
      var $incdec_ptr845=(($523+1)|0);
      $pp775=$incdec_ptr845;
      var $524=HEAPU8[($523)];
      var $conv846=(($524)&255);
      var $sub847=(($conv844-$conv846)|0);
      var $and848=$sub847 & 255;
      var $conv849=(($and848) & 255);
      var $525=$dp774;
      var $incdec_ptr850=(($525+1)|0);
      $dp774=$incdec_ptr850;
      HEAP8[($525)]=$conv849;
      var $conv851=(($conv849)&255);
      $v781=$conv851;
      var $526=$v781;
      var $cmp852=(($526)|0) < 128;
      if ($cmp852) { __label__ = 211; break; } else { __label__ = 212; break; }
    case 211: 
      var $527=$v781;
      var $cond858 = $527;__label__ = 213; break;
    case 212: 
      var $528=$v781;
      var $sub856=((256-$528)|0);
      var $cond858 = $sub856;__label__ = 213; break;
    case 213: 
      var $cond858;
      var $529=$sum778;
      var $add859=(($529+$cond858)|0);
      $sum778=$add859;
      __label__ = 214; break;
    case 214: 
      var $530=$i780;
      var $inc861=(($530+1)|0);
      $i780=$inc861;
      __label__ = 209; break;
    case 215: 
      var $531=$row_buf;
      var $add_ptr863=(($531+1)|0);
      $lp777=$add_ptr863;
      var $532=$prev_row;
      var $add_ptr864=(($532+1)|0);
      $cp776=$add_ptr864;
      __label__ = 216; break;
    case 216: 
      var $533=$i780;
      var $534=$row_bytes;
      var $cmp866=(($533)>>>0) < (($534)>>>0);
      if ($cmp866) { __label__ = 217; break; } else { __label__ = 240; break; }
    case 217: 
      var $535=$pp775;
      var $incdec_ptr876=(($535+1)|0);
      $pp775=$incdec_ptr876;
      var $536=HEAPU8[($535)];
      var $conv877=(($536)&255);
      $b870=$conv877;
      var $537=$cp776;
      var $incdec_ptr878=(($537+1)|0);
      $cp776=$incdec_ptr878;
      var $538=HEAPU8[($537)];
      var $conv879=(($538)&255);
      $c871=$conv879;
      var $539=$lp777;
      var $incdec_ptr880=(($539+1)|0);
      $lp777=$incdec_ptr880;
      var $540=HEAPU8[($539)];
      var $conv881=(($540)&255);
      $a869=$conv881;
      var $541=$b870;
      var $542=$c871;
      var $sub882=(($541-$542)|0);
      $p875=$sub882;
      var $543=$a869;
      var $544=$c871;
      var $sub883=(($543-$544)|0);
      $pc874=$sub883;
      var $545=$p875;
      var $cmp884=(($545)|0) < 0;
      if ($cmp884) { __label__ = 218; break; } else { __label__ = 219; break; }
    case 218: 
      var $546=$p875;
      var $sub887=(((-$546))|0);
      var $cond890 = $sub887;__label__ = 220; break;
    case 219: 
      var $547=$p875;
      var $cond890 = $547;__label__ = 220; break;
    case 220: 
      var $cond890;
      $pa872=$cond890;
      var $548=$pc874;
      var $cmp891=(($548)|0) < 0;
      if ($cmp891) { __label__ = 221; break; } else { __label__ = 222; break; }
    case 221: 
      var $549=$pc874;
      var $sub894=(((-$549))|0);
      var $cond897 = $sub894;__label__ = 223; break;
    case 222: 
      var $550=$pc874;
      var $cond897 = $550;__label__ = 223; break;
    case 223: 
      var $cond897;
      $pb873=$cond897;
      var $551=$p875;
      var $552=$pc874;
      var $add898=(($551+$552)|0);
      var $cmp899=(($add898)|0) < 0;
      if ($cmp899) { __label__ = 224; break; } else { __label__ = 225; break; }
    case 224: 
      var $553=$p875;
      var $554=$pc874;
      var $add902=(($553+$554)|0);
      var $sub903=(((-$add902))|0);
      var $cond907 = $sub903;__label__ = 226; break;
    case 225: 
      var $555=$p875;
      var $556=$pc874;
      var $add905=(($555+$556)|0);
      var $cond907 = $add905;__label__ = 226; break;
    case 226: 
      var $cond907;
      $pc874=$cond907;
      var $557=$pa872;
      var $558=$pb873;
      var $cmp908=(($557)|0) <= (($558)|0);
      if ($cmp908) { __label__ = 227; break; } else { __label__ = 229; break; }
    case 227: 
      var $559=$pa872;
      var $560=$pc874;
      var $cmp911=(($559)|0) <= (($560)|0);
      if ($cmp911) { __label__ = 228; break; } else { __label__ = 229; break; }
    case 228: 
      var $561=$a869;
      var $cond922 = $561;__label__ = 233; break;
    case 229: 
      var $562=$pb873;
      var $563=$pc874;
      var $cmp915=(($562)|0) <= (($563)|0);
      if ($cmp915) { __label__ = 230; break; } else { __label__ = 231; break; }
    case 230: 
      var $564=$b870;
      var $cond920 = $564;__label__ = 232; break;
    case 231: 
      var $565=$c871;
      var $cond920 = $565;__label__ = 232; break;
    case 232: 
      var $cond920;
      var $cond922 = $cond920;__label__ = 233; break;
    case 233: 
      var $cond922;
      $p875=$cond922;
      var $566=$rp773;
      var $incdec_ptr923=(($566+1)|0);
      $rp773=$incdec_ptr923;
      var $567=HEAPU8[($566)];
      var $conv924=(($567)&255);
      var $568=$p875;
      var $sub925=(($conv924-$568)|0);
      var $and926=$sub925 & 255;
      var $conv927=(($and926) & 255);
      var $569=$dp774;
      var $incdec_ptr928=(($569+1)|0);
      $dp774=$incdec_ptr928;
      HEAP8[($569)]=$conv927;
      var $conv929=(($conv927)&255);
      $v781=$conv929;
      var $570=$v781;
      var $cmp930=(($570)|0) < 128;
      if ($cmp930) { __label__ = 234; break; } else { __label__ = 235; break; }
    case 234: 
      var $571=$v781;
      var $cond936 = $571;__label__ = 236; break;
    case 235: 
      var $572=$v781;
      var $sub934=((256-$572)|0);
      var $cond936 = $sub934;__label__ = 236; break;
    case 236: 
      var $cond936;
      var $573=$sum778;
      var $add937=(($573+$cond936)|0);
      $sum778=$add937;
      var $574=$sum778;
      var $575=$lmins779;
      var $cmp938=(($574)>>>0) > (($575)>>>0);
      if ($cmp938) { __label__ = 237; break; } else { __label__ = 238; break; }
    case 237: 
      __label__ = 240; break;
    case 238: 
      __label__ = 239; break;
    case 239: 
      var $576=$i780;
      var $inc943=(($576+1)|0);
      $i780=$inc943;
      __label__ = 216; break;
    case 240: 
      var $577=$png_ptr_addr;
      var $heuristic_method945=(($577+492)|0);
      var $578=HEAPU8[($heuristic_method945)];
      var $conv946=(($578)&255);
      var $cmp947=(($conv946)|0)==2;
      if ($cmp947) { __label__ = 241; break; } else { __label__ = 251; break; }
    case 241: 
      var $579=$sum778;
      var $and953=$579 & 65535;
      $sumlo952=$and953;
      var $580=$sum778;
      var $shr954=$580 >>> 10;
      var $and955=$shr954 & 4194240;
      $sumhi951=$and955;
      $j950=0;
      __label__ = 242; break;
    case 242: 
      var $581=$j950;
      var $582=$num_p_filters;
      var $cmp957=(($581)|0) < (($582)|0);
      if ($cmp957) { __label__ = 243; break; } else { __label__ = 247; break; }
    case 243: 
      var $583=$j950;
      var $584=$png_ptr_addr;
      var $prev_filters960=(($584+496)|0);
      var $585=HEAP32[(($prev_filters960)>>2)];
      var $arrayidx961=(($585+$583)|0);
      var $586=HEAPU8[($arrayidx961)];
      var $conv962=(($586)&255);
      var $cmp963=(($conv962)|0)==4;
      if ($cmp963) { __label__ = 244; break; } else { __label__ = 245; break; }
    case 244: 
      var $587=$sumlo952;
      var $588=$j950;
      var $589=$png_ptr_addr;
      var $filter_weights966=(($589+500)|0);
      var $590=HEAP32[(($filter_weights966)>>2)];
      var $arrayidx967=(($590+($588<<1))|0);
      var $591=HEAPU16[(($arrayidx967)>>1)];
      var $conv968=(($591)&65535);
      var $mul969=(($587*$conv968)|0);
      var $shr970=$mul969 >>> 8;
      $sumlo952=$shr970;
      var $592=$sumhi951;
      var $593=$j950;
      var $594=$png_ptr_addr;
      var $filter_weights971=(($594+500)|0);
      var $595=HEAP32[(($filter_weights971)>>2)];
      var $arrayidx972=(($595+($593<<1))|0);
      var $596=HEAPU16[(($arrayidx972)>>1)];
      var $conv973=(($596)&65535);
      var $mul974=(($592*$conv973)|0);
      var $shr975=$mul974 >>> 8;
      $sumhi951=$shr975;
      __label__ = 245; break;
    case 245: 
      __label__ = 246; break;
    case 246: 
      var $597=$j950;
      var $inc978=(($597+1)|0);
      $j950=$inc978;
      __label__ = 242; break;
    case 247: 
      var $598=$sumlo952;
      var $599=$png_ptr_addr;
      var $filter_costs980=(($599+508)|0);
      var $600=HEAP32[(($filter_costs980)>>2)];
      var $arrayidx981=(($600+8)|0);
      var $601=HEAPU16[(($arrayidx981)>>1)];
      var $conv982=(($601)&65535);
      var $mul983=(($598*$conv982)|0);
      var $shr984=$mul983 >>> 3;
      $sumlo952=$shr984;
      var $602=$sumhi951;
      var $603=$png_ptr_addr;
      var $filter_costs985=(($603+508)|0);
      var $604=HEAP32[(($filter_costs985)>>2)];
      var $arrayidx986=(($604+8)|0);
      var $605=HEAPU16[(($arrayidx986)>>1)];
      var $conv987=(($605)&65535);
      var $mul988=(($602*$conv987)|0);
      var $shr989=$mul988 >>> 3;
      $sumhi951=$shr989;
      var $606=$sumhi951;
      var $cmp990=(($606)>>>0) > 4194240;
      if ($cmp990) { __label__ = 248; break; } else { __label__ = 249; break; }
    case 248: 
      $sum778=2147483647;
      __label__ = 250; break;
    case 249: 
      var $607=$sumhi951;
      var $shl994=$607 << 10;
      var $608=$sumlo952;
      var $add995=(($shl994+$608)|0);
      $sum778=$add995;
      __label__ = 250; break;
    case 250: 
      __label__ = 251; break;
    case 251: 
      var $609=$sum778;
      var $610=$mins;
      var $cmp998=(($609)>>>0) < (($610)>>>0);
      if ($cmp998) { __label__ = 252; break; } else { __label__ = 253; break; }
    case 252: 
      var $611=$png_ptr_addr;
      var $paeth_row1001=(($611+256)|0);
      var $612=HEAP32[(($paeth_row1001)>>2)];
      $best_row=$612;
      __label__ = 253; break;
    case 253: 
      __label__ = 254; break;
    case 254: 
      __label__ = 255; break;
    case 255: 
      var $613=$png_ptr_addr;
      var $614=$best_row;
      var $615=$row_info_addr;
      var $rowbytes1005=(($615+4)|0);
      var $616=HEAP32[(($rowbytes1005)>>2)];
      var $add1006=(($616+1)|0);
      _png_write_filtered_row($613, $614, $add1006);
      var $617=$png_ptr_addr;
      var $num_prev_filters1007=(($617+493)|0);
      var $618=HEAPU8[($num_prev_filters1007)];
      var $conv1008=(($618)&255);
      var $cmp1009=(($conv1008)|0) > 0;
      if ($cmp1009) { __label__ = 256; break; } else { __label__ = 261; break; }
    case 256: 
      $j1012=1;
      __label__ = 257; break;
    case 257: 
      var $619=$j1012;
      var $620=$num_p_filters;
      var $cmp1014=(($619)|0) < (($620)|0);
      if ($cmp1014) { __label__ = 258; break; } else { __label__ = 260; break; }
    case 258: 
      var $621=$j1012;
      var $sub1017=(($621-1)|0);
      var $622=$png_ptr_addr;
      var $prev_filters1018=(($622+496)|0);
      var $623=HEAP32[(($prev_filters1018)>>2)];
      var $arrayidx1019=(($623+$sub1017)|0);
      var $624=HEAP8[($arrayidx1019)];
      var $625=$j1012;
      var $626=$png_ptr_addr;
      var $prev_filters1020=(($626+496)|0);
      var $627=HEAP32[(($prev_filters1020)>>2)];
      var $arrayidx1021=(($627+$625)|0);
      HEAP8[($arrayidx1021)]=$624;
      __label__ = 259; break;
    case 259: 
      var $628=$j1012;
      var $inc1023=(($628+1)|0);
      $j1012=$inc1023;
      __label__ = 257; break;
    case 260: 
      var $629=$best_row;
      var $arrayidx1025=(($629)|0);
      var $630=HEAP8[($arrayidx1025)];
      var $631=$j1012;
      var $632=$png_ptr_addr;
      var $prev_filters1026=(($632+496)|0);
      var $633=HEAP32[(($prev_filters1026)>>2)];
      var $arrayidx1027=(($633+$631)|0);
      HEAP8[($arrayidx1027)]=$630;
      __label__ = 261; break;
    case 261: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_find_filter["X"]=1;

function _adler32($adler, $buf, $len) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $adler_addr;
      var $buf_addr;
      var $len_addr;
      var $sum2;
      var $n;
      $adler_addr=$adler;
      $buf_addr=$buf;
      $len_addr=$len;
      var $0=$adler_addr;
      var $shr=$0 >>> 16;
      var $and=$shr & 65535;
      $sum2=$and;
      var $1=$adler_addr;
      var $and1=$1 & 65535;
      $adler_addr=$and1;
      var $2=$len_addr;
      var $cmp=(($2)|0)==1;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $3=$buf_addr;
      var $arrayidx=(($3)|0);
      var $4=HEAPU8[($arrayidx)];
      var $conv=(($4)&255);
      var $5=$adler_addr;
      var $add=(($5+$conv)|0);
      $adler_addr=$add;
      var $6=$adler_addr;
      var $cmp2=(($6)>>>0) >= 65521;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$adler_addr;
      var $sub=(($7-65521)|0);
      $adler_addr=$sub;
      __label__ = 4; break;
    case 4: 
      var $8=$adler_addr;
      var $9=$sum2;
      var $add5=(($9+$8)|0);
      $sum2=$add5;
      var $10=$sum2;
      var $cmp6=(($10)>>>0) >= 65521;
      if ($cmp6) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $11=$sum2;
      var $sub9=(($11-65521)|0);
      $sum2=$sub9;
      __label__ = 6; break;
    case 6: 
      var $12=$adler_addr;
      var $13=$sum2;
      var $shl=$13 << 16;
      var $or=$12 | $shl;
      $retval=$or;
      __label__ = 31; break;
    case 7: 
      var $14=$buf_addr;
      var $cmp12=(($14)|0)==0;
      if ($cmp12) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $retval=1;
      __label__ = 31; break;
    case 9: 
      var $15=$len_addr;
      var $cmp16=(($15)>>>0) < 16;
      if ($cmp16) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $16=$len_addr;
      var $dec=(($16-1)|0);
      $len_addr=$dec;
      var $tobool=(($16)|0)!=0;
      if ($tobool) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $17=$buf_addr;
      var $incdec_ptr=(($17+1)|0);
      $buf_addr=$incdec_ptr;
      var $18=HEAPU8[($17)];
      var $conv19=(($18)&255);
      var $19=$adler_addr;
      var $add20=(($19+$conv19)|0);
      $adler_addr=$add20;
      var $20=$adler_addr;
      var $21=$sum2;
      var $add21=(($21+$20)|0);
      $sum2=$add21;
      __label__ = 11; break;
    case 13: 
      var $22=$adler_addr;
      var $cmp22=(($22)>>>0) >= 65521;
      if ($cmp22) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $23=$adler_addr;
      var $sub25=(($23-65521)|0);
      $adler_addr=$sub25;
      __label__ = 15; break;
    case 15: 
      var $24=$sum2;
      var $rem=(($24)>>>0)%65521;
      $sum2=$rem;
      var $25=$adler_addr;
      var $26=$sum2;
      var $shl27=$26 << 16;
      var $or28=$25 | $shl27;
      $retval=$or28;
      __label__ = 31; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $27=$len_addr;
      var $cmp31=(($27)>>>0) >= 5552;
      if ($cmp31) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: 
      var $28=$len_addr;
      var $sub34=(($28-5552)|0);
      $len_addr=$sub34;
      $n=347;
      __label__ = 19; break;
    case 19: 
      var $29=$buf_addr;
      var $arrayidx35=(($29)|0);
      var $30=HEAPU8[($arrayidx35)];
      var $conv36=(($30)&255);
      var $31=$adler_addr;
      var $add37=(($31+$conv36)|0);
      $adler_addr=$add37;
      var $32=$adler_addr;
      var $33=$sum2;
      var $add38=(($33+$32)|0);
      $sum2=$add38;
      var $34=$buf_addr;
      var $arrayidx39=(($34+1)|0);
      var $35=HEAPU8[($arrayidx39)];
      var $conv40=(($35)&255);
      var $36=$adler_addr;
      var $add41=(($36+$conv40)|0);
      $adler_addr=$add41;
      var $37=$adler_addr;
      var $38=$sum2;
      var $add42=(($38+$37)|0);
      $sum2=$add42;
      var $39=$buf_addr;
      var $arrayidx43=(($39+2)|0);
      var $40=HEAPU8[($arrayidx43)];
      var $conv44=(($40)&255);
      var $41=$adler_addr;
      var $add45=(($41+$conv44)|0);
      $adler_addr=$add45;
      var $42=$adler_addr;
      var $43=$sum2;
      var $add46=(($43+$42)|0);
      $sum2=$add46;
      var $44=$buf_addr;
      var $arrayidx47=(($44+3)|0);
      var $45=HEAPU8[($arrayidx47)];
      var $conv48=(($45)&255);
      var $46=$adler_addr;
      var $add49=(($46+$conv48)|0);
      $adler_addr=$add49;
      var $47=$adler_addr;
      var $48=$sum2;
      var $add50=(($48+$47)|0);
      $sum2=$add50;
      var $49=$buf_addr;
      var $arrayidx51=(($49+4)|0);
      var $50=HEAPU8[($arrayidx51)];
      var $conv52=(($50)&255);
      var $51=$adler_addr;
      var $add53=(($51+$conv52)|0);
      $adler_addr=$add53;
      var $52=$adler_addr;
      var $53=$sum2;
      var $add54=(($53+$52)|0);
      $sum2=$add54;
      var $54=$buf_addr;
      var $arrayidx55=(($54+5)|0);
      var $55=HEAPU8[($arrayidx55)];
      var $conv56=(($55)&255);
      var $56=$adler_addr;
      var $add57=(($56+$conv56)|0);
      $adler_addr=$add57;
      var $57=$adler_addr;
      var $58=$sum2;
      var $add58=(($58+$57)|0);
      $sum2=$add58;
      var $59=$buf_addr;
      var $arrayidx59=(($59+6)|0);
      var $60=HEAPU8[($arrayidx59)];
      var $conv60=(($60)&255);
      var $61=$adler_addr;
      var $add61=(($61+$conv60)|0);
      $adler_addr=$add61;
      var $62=$adler_addr;
      var $63=$sum2;
      var $add62=(($63+$62)|0);
      $sum2=$add62;
      var $64=$buf_addr;
      var $arrayidx63=(($64+7)|0);
      var $65=HEAPU8[($arrayidx63)];
      var $conv64=(($65)&255);
      var $66=$adler_addr;
      var $add65=(($66+$conv64)|0);
      $adler_addr=$add65;
      var $67=$adler_addr;
      var $68=$sum2;
      var $add66=(($68+$67)|0);
      $sum2=$add66;
      var $69=$buf_addr;
      var $arrayidx67=(($69+8)|0);
      var $70=HEAPU8[($arrayidx67)];
      var $conv68=(($70)&255);
      var $71=$adler_addr;
      var $add69=(($71+$conv68)|0);
      $adler_addr=$add69;
      var $72=$adler_addr;
      var $73=$sum2;
      var $add70=(($73+$72)|0);
      $sum2=$add70;
      var $74=$buf_addr;
      var $arrayidx71=(($74+9)|0);
      var $75=HEAPU8[($arrayidx71)];
      var $conv72=(($75)&255);
      var $76=$adler_addr;
      var $add73=(($76+$conv72)|0);
      $adler_addr=$add73;
      var $77=$adler_addr;
      var $78=$sum2;
      var $add74=(($78+$77)|0);
      $sum2=$add74;
      var $79=$buf_addr;
      var $arrayidx75=(($79+10)|0);
      var $80=HEAPU8[($arrayidx75)];
      var $conv76=(($80)&255);
      var $81=$adler_addr;
      var $add77=(($81+$conv76)|0);
      $adler_addr=$add77;
      var $82=$adler_addr;
      var $83=$sum2;
      var $add78=(($83+$82)|0);
      $sum2=$add78;
      var $84=$buf_addr;
      var $arrayidx79=(($84+11)|0);
      var $85=HEAPU8[($arrayidx79)];
      var $conv80=(($85)&255);
      var $86=$adler_addr;
      var $add81=(($86+$conv80)|0);
      $adler_addr=$add81;
      var $87=$adler_addr;
      var $88=$sum2;
      var $add82=(($88+$87)|0);
      $sum2=$add82;
      var $89=$buf_addr;
      var $arrayidx83=(($89+12)|0);
      var $90=HEAPU8[($arrayidx83)];
      var $conv84=(($90)&255);
      var $91=$adler_addr;
      var $add85=(($91+$conv84)|0);
      $adler_addr=$add85;
      var $92=$adler_addr;
      var $93=$sum2;
      var $add86=(($93+$92)|0);
      $sum2=$add86;
      var $94=$buf_addr;
      var $arrayidx87=(($94+13)|0);
      var $95=HEAPU8[($arrayidx87)];
      var $conv88=(($95)&255);
      var $96=$adler_addr;
      var $add89=(($96+$conv88)|0);
      $adler_addr=$add89;
      var $97=$adler_addr;
      var $98=$sum2;
      var $add90=(($98+$97)|0);
      $sum2=$add90;
      var $99=$buf_addr;
      var $arrayidx91=(($99+14)|0);
      var $100=HEAPU8[($arrayidx91)];
      var $conv92=(($100)&255);
      var $101=$adler_addr;
      var $add93=(($101+$conv92)|0);
      $adler_addr=$add93;
      var $102=$adler_addr;
      var $103=$sum2;
      var $add94=(($103+$102)|0);
      $sum2=$add94;
      var $104=$buf_addr;
      var $arrayidx95=(($104+15)|0);
      var $105=HEAPU8[($arrayidx95)];
      var $conv96=(($105)&255);
      var $106=$adler_addr;
      var $add97=(($106+$conv96)|0);
      $adler_addr=$add97;
      var $107=$adler_addr;
      var $108=$sum2;
      var $add98=(($108+$107)|0);
      $sum2=$add98;
      var $109=$buf_addr;
      var $add_ptr=(($109+16)|0);
      $buf_addr=$add_ptr;
      __label__ = 20; break;
    case 20: 
      var $110=$n;
      var $dec99=(($110-1)|0);
      $n=$dec99;
      var $tobool100=(($dec99)|0)!=0;
      if ($tobool100) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 21: 
      var $111=$adler_addr;
      var $rem101=(($111)>>>0)%65521;
      $adler_addr=$rem101;
      var $112=$sum2;
      var $rem102=(($112)>>>0)%65521;
      $sum2=$rem102;
      __label__ = 17; break;
    case 22: 
      var $113=$len_addr;
      var $tobool104=(($113)|0)!=0;
      if ($tobool104) { __label__ = 23; break; } else { __label__ = 30; break; }
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $114=$len_addr;
      var $cmp107=(($114)>>>0) >= 16;
      if ($cmp107) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $115=$len_addr;
      var $sub110=(($115-16)|0);
      $len_addr=$sub110;
      var $116=$buf_addr;
      var $arrayidx111=(($116)|0);
      var $117=HEAPU8[($arrayidx111)];
      var $conv112=(($117)&255);
      var $118=$adler_addr;
      var $add113=(($118+$conv112)|0);
      $adler_addr=$add113;
      var $119=$adler_addr;
      var $120=$sum2;
      var $add114=(($120+$119)|0);
      $sum2=$add114;
      var $121=$buf_addr;
      var $arrayidx115=(($121+1)|0);
      var $122=HEAPU8[($arrayidx115)];
      var $conv116=(($122)&255);
      var $123=$adler_addr;
      var $add117=(($123+$conv116)|0);
      $adler_addr=$add117;
      var $124=$adler_addr;
      var $125=$sum2;
      var $add118=(($125+$124)|0);
      $sum2=$add118;
      var $126=$buf_addr;
      var $arrayidx119=(($126+2)|0);
      var $127=HEAPU8[($arrayidx119)];
      var $conv120=(($127)&255);
      var $128=$adler_addr;
      var $add121=(($128+$conv120)|0);
      $adler_addr=$add121;
      var $129=$adler_addr;
      var $130=$sum2;
      var $add122=(($130+$129)|0);
      $sum2=$add122;
      var $131=$buf_addr;
      var $arrayidx123=(($131+3)|0);
      var $132=HEAPU8[($arrayidx123)];
      var $conv124=(($132)&255);
      var $133=$adler_addr;
      var $add125=(($133+$conv124)|0);
      $adler_addr=$add125;
      var $134=$adler_addr;
      var $135=$sum2;
      var $add126=(($135+$134)|0);
      $sum2=$add126;
      var $136=$buf_addr;
      var $arrayidx127=(($136+4)|0);
      var $137=HEAPU8[($arrayidx127)];
      var $conv128=(($137)&255);
      var $138=$adler_addr;
      var $add129=(($138+$conv128)|0);
      $adler_addr=$add129;
      var $139=$adler_addr;
      var $140=$sum2;
      var $add130=(($140+$139)|0);
      $sum2=$add130;
      var $141=$buf_addr;
      var $arrayidx131=(($141+5)|0);
      var $142=HEAPU8[($arrayidx131)];
      var $conv132=(($142)&255);
      var $143=$adler_addr;
      var $add133=(($143+$conv132)|0);
      $adler_addr=$add133;
      var $144=$adler_addr;
      var $145=$sum2;
      var $add134=(($145+$144)|0);
      $sum2=$add134;
      var $146=$buf_addr;
      var $arrayidx135=(($146+6)|0);
      var $147=HEAPU8[($arrayidx135)];
      var $conv136=(($147)&255);
      var $148=$adler_addr;
      var $add137=(($148+$conv136)|0);
      $adler_addr=$add137;
      var $149=$adler_addr;
      var $150=$sum2;
      var $add138=(($150+$149)|0);
      $sum2=$add138;
      var $151=$buf_addr;
      var $arrayidx139=(($151+7)|0);
      var $152=HEAPU8[($arrayidx139)];
      var $conv140=(($152)&255);
      var $153=$adler_addr;
      var $add141=(($153+$conv140)|0);
      $adler_addr=$add141;
      var $154=$adler_addr;
      var $155=$sum2;
      var $add142=(($155+$154)|0);
      $sum2=$add142;
      var $156=$buf_addr;
      var $arrayidx143=(($156+8)|0);
      var $157=HEAPU8[($arrayidx143)];
      var $conv144=(($157)&255);
      var $158=$adler_addr;
      var $add145=(($158+$conv144)|0);
      $adler_addr=$add145;
      var $159=$adler_addr;
      var $160=$sum2;
      var $add146=(($160+$159)|0);
      $sum2=$add146;
      var $161=$buf_addr;
      var $arrayidx147=(($161+9)|0);
      var $162=HEAPU8[($arrayidx147)];
      var $conv148=(($162)&255);
      var $163=$adler_addr;
      var $add149=(($163+$conv148)|0);
      $adler_addr=$add149;
      var $164=$adler_addr;
      var $165=$sum2;
      var $add150=(($165+$164)|0);
      $sum2=$add150;
      var $166=$buf_addr;
      var $arrayidx151=(($166+10)|0);
      var $167=HEAPU8[($arrayidx151)];
      var $conv152=(($167)&255);
      var $168=$adler_addr;
      var $add153=(($168+$conv152)|0);
      $adler_addr=$add153;
      var $169=$adler_addr;
      var $170=$sum2;
      var $add154=(($170+$169)|0);
      $sum2=$add154;
      var $171=$buf_addr;
      var $arrayidx155=(($171+11)|0);
      var $172=HEAPU8[($arrayidx155)];
      var $conv156=(($172)&255);
      var $173=$adler_addr;
      var $add157=(($173+$conv156)|0);
      $adler_addr=$add157;
      var $174=$adler_addr;
      var $175=$sum2;
      var $add158=(($175+$174)|0);
      $sum2=$add158;
      var $176=$buf_addr;
      var $arrayidx159=(($176+12)|0);
      var $177=HEAPU8[($arrayidx159)];
      var $conv160=(($177)&255);
      var $178=$adler_addr;
      var $add161=(($178+$conv160)|0);
      $adler_addr=$add161;
      var $179=$adler_addr;
      var $180=$sum2;
      var $add162=(($180+$179)|0);
      $sum2=$add162;
      var $181=$buf_addr;
      var $arrayidx163=(($181+13)|0);
      var $182=HEAPU8[($arrayidx163)];
      var $conv164=(($182)&255);
      var $183=$adler_addr;
      var $add165=(($183+$conv164)|0);
      $adler_addr=$add165;
      var $184=$adler_addr;
      var $185=$sum2;
      var $add166=(($185+$184)|0);
      $sum2=$add166;
      var $186=$buf_addr;
      var $arrayidx167=(($186+14)|0);
      var $187=HEAPU8[($arrayidx167)];
      var $conv168=(($187)&255);
      var $188=$adler_addr;
      var $add169=(($188+$conv168)|0);
      $adler_addr=$add169;
      var $189=$adler_addr;
      var $190=$sum2;
      var $add170=(($190+$189)|0);
      $sum2=$add170;
      var $191=$buf_addr;
      var $arrayidx171=(($191+15)|0);
      var $192=HEAPU8[($arrayidx171)];
      var $conv172=(($192)&255);
      var $193=$adler_addr;
      var $add173=(($193+$conv172)|0);
      $adler_addr=$add173;
      var $194=$adler_addr;
      var $195=$sum2;
      var $add174=(($195+$194)|0);
      $sum2=$add174;
      var $196=$buf_addr;
      var $add_ptr175=(($196+16)|0);
      $buf_addr=$add_ptr175;
      __label__ = 24; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $197=$len_addr;
      var $dec178=(($197-1)|0);
      $len_addr=$dec178;
      var $tobool179=(($197)|0)!=0;
      if ($tobool179) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $198=$buf_addr;
      var $incdec_ptr181=(($198+1)|0);
      $buf_addr=$incdec_ptr181;
      var $199=HEAPU8[($198)];
      var $conv182=(($199)&255);
      var $200=$adler_addr;
      var $add183=(($200+$conv182)|0);
      $adler_addr=$add183;
      var $201=$adler_addr;
      var $202=$sum2;
      var $add184=(($202+$201)|0);
      $sum2=$add184;
      __label__ = 27; break;
    case 29: 
      var $203=$adler_addr;
      var $rem186=(($203)>>>0)%65521;
      $adler_addr=$rem186;
      var $204=$sum2;
      var $rem187=(($204)>>>0)%65521;
      $sum2=$rem187;
      __label__ = 30; break;
    case 30: 
      var $205=$adler_addr;
      var $206=$sum2;
      var $shl189=$206 << 16;
      var $or190=$205 | $shl189;
      $retval=$or190;
      __label__ = 31; break;
    case 31: 
      var $207=$retval;
      ;
      return $207;
    default: assert(0, "bad label: " + __label__);
  }
}
_adler32["X"]=1;

function _png_write_filtered_row($png_ptr, $filtered_row, $avail) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $png_ptr_addr;
      var $filtered_row_addr;
      var $avail_addr;
      var $ret;
      var $tptr;
      $png_ptr_addr=$png_ptr;
      $filtered_row_addr=$filtered_row;
      $avail_addr=$avail;
      var $0=$filtered_row_addr;
      var $1=$png_ptr_addr;
      var $zstream=(($1+96)|0);
      var $next_in=(($zstream)|0);
      HEAP32[(($next_in)>>2)]=$0;
      var $2=$png_ptr_addr;
      var $zstream1=(($2+96)|0);
      var $avail_in=(($zstream1+4)|0);
      HEAP32[(($avail_in)>>2)]=0;
      __label__ = 2; break;
    case 2: 
      var $3=$png_ptr_addr;
      var $zstream2=(($3+96)|0);
      var $avail_in3=(($zstream2+4)|0);
      var $4=HEAP32[(($avail_in3)>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $5=$avail_addr;
      var $cmp4=(($5)>>>0) > 4294967295;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $6=$png_ptr_addr;
      var $zstream6=(($6+96)|0);
      var $avail_in7=(($zstream6+4)|0);
      HEAP32[(($avail_in7)>>2)]=-1;
      var $7=$avail_addr;
      var $sub=(($7+1)|0);
      $avail_addr=$sub;
      __label__ = 6; break;
    case 5: 
      var $8=$avail_addr;
      var $9=$png_ptr_addr;
      var $zstream8=(($9+96)|0);
      var $avail_in9=(($zstream8+4)|0);
      HEAP32[(($avail_in9)>>2)]=$8;
      $avail_addr=0;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $10=$png_ptr_addr;
      var $zstream11=(($10+96)|0);
      var $call=_deflate($zstream11, 0);
      $ret=$call;
      var $11=$ret;
      var $cmp12=(($11)|0)!=0;
      if ($cmp12) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $12=$png_ptr_addr;
      var $zstream14=(($12+96)|0);
      var $msg=(($zstream14+24)|0);
      var $13=HEAP32[(($msg)>>2)];
      var $cmp15=(($13)|0)!=0;
      if ($cmp15) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $14=$png_ptr_addr;
      var $15=$png_ptr_addr;
      var $zstream17=(($15+96)|0);
      var $msg18=(($zstream17+24)|0);
      var $16=HEAP32[(($msg18)>>2)];
      _png_error($14, $16);
      __label__ = 11; break;
    case 10: 
      var $17=$png_ptr_addr;
      _png_error($17, ((STRING_TABLE.__str401173)|0));
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $18=$png_ptr_addr;
      var $zstream22=(($18+96)|0);
      var $avail_out=(($zstream22+16)|0);
      var $19=HEAP32[(($avail_out)>>2)];
      var $tobool=(($19)|0)!=0;
      if ($tobool) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $20=$png_ptr_addr;
      var $21=$png_ptr_addr;
      var $zbuf=(($21+152)|0);
      var $22=HEAP32[(($zbuf)>>2)];
      var $23=$png_ptr_addr;
      var $zbuf_size=(($23+156)|0);
      var $24=HEAP32[(($zbuf_size)>>2)];
      _png_write_IDAT($20, $22, $24);
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $25=$avail_addr;
      var $cmp25=(($25)>>>0) > 0;
      if ($cmp25) { var $28 = 1;__label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $26=$png_ptr_addr;
      var $zstream26=(($26+96)|0);
      var $avail_in27=(($zstream26+4)|0);
      var $27=HEAPU32[(($avail_in27)>>2)];
      var $cmp28=(($27)>>>0) > 0;
      var $28 = $cmp28;__label__ = 17; break;
    case 17: 
      var $28;
      if ($28) { __label__ = 2; break; } else { __label__ = 18; break; }
    case 18: 
      var $29=$png_ptr_addr;
      var $prev_row=(($29+236)|0);
      var $30=HEAP32[(($prev_row)>>2)];
      var $cmp29=(($30)|0)!=0;
      if ($cmp29) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $31=$png_ptr_addr;
      var $prev_row31=(($31+236)|0);
      var $32=HEAP32[(($prev_row31)>>2)];
      $tptr=$32;
      var $33=$png_ptr_addr;
      var $row_buf=(($33+240)|0);
      var $34=HEAP32[(($row_buf)>>2)];
      var $35=$png_ptr_addr;
      var $prev_row32=(($35+236)|0);
      HEAP32[(($prev_row32)>>2)]=$34;
      var $36=$tptr;
      var $37=$png_ptr_addr;
      var $row_buf33=(($37+240)|0);
      HEAP32[(($row_buf33)>>2)]=$36;
      __label__ = 20; break;
    case 20: 
      var $38=$png_ptr_addr;
      _png_write_finish_row($38);
      var $39=$png_ptr_addr;
      var $flush_rows=(($39+344)|0);
      var $40=HEAP32[(($flush_rows)>>2)];
      var $inc=(($40+1)|0);
      HEAP32[(($flush_rows)>>2)]=$inc;
      var $41=$png_ptr_addr;
      var $flush_dist=(($41+340)|0);
      var $42=HEAPU32[(($flush_dist)>>2)];
      var $cmp35=(($42)>>>0) > 0;
      if ($cmp35) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $43=$png_ptr_addr;
      var $flush_rows36=(($43+344)|0);
      var $44=HEAPU32[(($flush_rows36)>>2)];
      var $45=$png_ptr_addr;
      var $flush_dist37=(($45+340)|0);
      var $46=HEAPU32[(($flush_dist37)>>2)];
      var $cmp38=(($44)>>>0) >= (($46)>>>0);
      if ($cmp38) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $47=$png_ptr_addr;
      _png_write_flush($47);
      __label__ = 23; break;
    case 23: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_png_write_filtered_row["X"]=1;

function _crc32($crc, $buf, $len) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $crc_addr;
      var $buf_addr;
      var $len_addr;
      var $endian=__stackBase__;
      $crc_addr=$crc;
      $buf_addr=$buf;
      $len_addr=$len;
      var $0=$buf_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $retval=0;
      __label__ = 6; break;
    case 3: 
      HEAP32[(($endian)>>2)]=1;
      var $1=$endian;
      var $2=HEAP8[($1)];
      var $tobool=(($2 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$crc_addr;
      var $4=$buf_addr;
      var $5=$len_addr;
      var $call=_crc32_little($3, $4, $5);
      $retval=$call;
      __label__ = 6; break;
    case 5: 
      var $6=$crc_addr;
      var $7=$buf_addr;
      var $8=$len_addr;
      var $call2=_crc32_big($6, $7, $8);
      $retval=$call2;
      __label__ = 6; break;
    case 6: 
      var $9=$retval;
      STACKTOP = __stackBase__;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _crc32_little($crc, $buf, $len) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $crc_addr;
      var $buf_addr;
      var $len_addr;
      var $c;
      var $buf4;
      $crc_addr=$crc;
      $buf_addr=$buf;
      $len_addr=$len;
      var $0=$crc_addr;
      $c=$0;
      var $1=$c;
      var $neg=$1 ^ -1;
      $c=$neg;
      __label__ = 2; break;
    case 2: 
      var $2=$len_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { var $5 = 0;__label__ = 4; break; }
    case 3: 
      var $3=$buf_addr;
      var $4=$3;
      var $and=$4 & 3;
      var $tobool1=(($and)|0)!=0;
      var $5 = $tobool1;__label__ = 4; break;
    case 4: 
      var $5;
      if ($5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$c;
      var $7=$buf_addr;
      var $incdec_ptr=(($7+1)|0);
      $buf_addr=$incdec_ptr;
      var $8=HEAPU8[($7)];
      var $conv=(($8)&255);
      var $xor=$6 ^ $conv;
      var $and2=$xor & 255;
      var $arrayidx=((((_crc_table)|0)+($and2<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      var $10=$c;
      var $shr=$10 >>> 8;
      var $xor3=$9 ^ $shr;
      $c=$xor3;
      var $11=$len_addr;
      var $dec=(($11-1)|0);
      $len_addr=$dec;
      __label__ = 2; break;
    case 6: 
      var $12=$buf_addr;
      var $13=$12;
      $buf4=$13;
      __label__ = 7; break;
    case 7: 
      var $14=$len_addr;
      var $cmp=(($14)>>>0) >= 32;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $15=$buf4;
      var $incdec_ptr7=(($15+4)|0);
      $buf4=$incdec_ptr7;
      var $16=HEAP32[(($15)>>2)];
      var $17=$c;
      var $xor8=$17 ^ $16;
      $c=$xor8;
      var $18=$c;
      var $and9=$18 & 255;
      var $arrayidx10=((((_crc_table+3072)|0)+($and9<<2))|0);
      var $19=HEAP32[(($arrayidx10)>>2)];
      var $20=$c;
      var $shr11=$20 >>> 8;
      var $and12=$shr11 & 255;
      var $arrayidx13=((((_crc_table+2048)|0)+($and12<<2))|0);
      var $21=HEAP32[(($arrayidx13)>>2)];
      var $xor14=$19 ^ $21;
      var $22=$c;
      var $shr15=$22 >>> 16;
      var $and16=$shr15 & 255;
      var $arrayidx17=((((_crc_table+1024)|0)+($and16<<2))|0);
      var $23=HEAP32[(($arrayidx17)>>2)];
      var $xor18=$xor14 ^ $23;
      var $24=$c;
      var $shr19=$24 >>> 24;
      var $arrayidx20=((((_crc_table)|0)+($shr19<<2))|0);
      var $25=HEAP32[(($arrayidx20)>>2)];
      var $xor21=$xor18 ^ $25;
      $c=$xor21;
      var $26=$buf4;
      var $incdec_ptr22=(($26+4)|0);
      $buf4=$incdec_ptr22;
      var $27=HEAP32[(($26)>>2)];
      var $28=$c;
      var $xor23=$28 ^ $27;
      $c=$xor23;
      var $29=$c;
      var $and24=$29 & 255;
      var $arrayidx25=((((_crc_table+3072)|0)+($and24<<2))|0);
      var $30=HEAP32[(($arrayidx25)>>2)];
      var $31=$c;
      var $shr26=$31 >>> 8;
      var $and27=$shr26 & 255;
      var $arrayidx28=((((_crc_table+2048)|0)+($and27<<2))|0);
      var $32=HEAP32[(($arrayidx28)>>2)];
      var $xor29=$30 ^ $32;
      var $33=$c;
      var $shr30=$33 >>> 16;
      var $and31=$shr30 & 255;
      var $arrayidx32=((((_crc_table+1024)|0)+($and31<<2))|0);
      var $34=HEAP32[(($arrayidx32)>>2)];
      var $xor33=$xor29 ^ $34;
      var $35=$c;
      var $shr34=$35 >>> 24;
      var $arrayidx35=((((_crc_table)|0)+($shr34<<2))|0);
      var $36=HEAP32[(($arrayidx35)>>2)];
      var $xor36=$xor33 ^ $36;
      $c=$xor36;
      var $37=$buf4;
      var $incdec_ptr37=(($37+4)|0);
      $buf4=$incdec_ptr37;
      var $38=HEAP32[(($37)>>2)];
      var $39=$c;
      var $xor38=$39 ^ $38;
      $c=$xor38;
      var $40=$c;
      var $and39=$40 & 255;
      var $arrayidx40=((((_crc_table+3072)|0)+($and39<<2))|0);
      var $41=HEAP32[(($arrayidx40)>>2)];
      var $42=$c;
      var $shr41=$42 >>> 8;
      var $and42=$shr41 & 255;
      var $arrayidx43=((((_crc_table+2048)|0)+($and42<<2))|0);
      var $43=HEAP32[(($arrayidx43)>>2)];
      var $xor44=$41 ^ $43;
      var $44=$c;
      var $shr45=$44 >>> 16;
      var $and46=$shr45 & 255;
      var $arrayidx47=((((_crc_table+1024)|0)+($and46<<2))|0);
      var $45=HEAP32[(($arrayidx47)>>2)];
      var $xor48=$xor44 ^ $45;
      var $46=$c;
      var $shr49=$46 >>> 24;
      var $arrayidx50=((((_crc_table)|0)+($shr49<<2))|0);
      var $47=HEAP32[(($arrayidx50)>>2)];
      var $xor51=$xor48 ^ $47;
      $c=$xor51;
      var $48=$buf4;
      var $incdec_ptr52=(($48+4)|0);
      $buf4=$incdec_ptr52;
      var $49=HEAP32[(($48)>>2)];
      var $50=$c;
      var $xor53=$50 ^ $49;
      $c=$xor53;
      var $51=$c;
      var $and54=$51 & 255;
      var $arrayidx55=((((_crc_table+3072)|0)+($and54<<2))|0);
      var $52=HEAP32[(($arrayidx55)>>2)];
      var $53=$c;
      var $shr56=$53 >>> 8;
      var $and57=$shr56 & 255;
      var $arrayidx58=((((_crc_table+2048)|0)+($and57<<2))|0);
      var $54=HEAP32[(($arrayidx58)>>2)];
      var $xor59=$52 ^ $54;
      var $55=$c;
      var $shr60=$55 >>> 16;
      var $and61=$shr60 & 255;
      var $arrayidx62=((((_crc_table+1024)|0)+($and61<<2))|0);
      var $56=HEAP32[(($arrayidx62)>>2)];
      var $xor63=$xor59 ^ $56;
      var $57=$c;
      var $shr64=$57 >>> 24;
      var $arrayidx65=((((_crc_table)|0)+($shr64<<2))|0);
      var $58=HEAP32[(($arrayidx65)>>2)];
      var $xor66=$xor63 ^ $58;
      $c=$xor66;
      var $59=$buf4;
      var $incdec_ptr67=(($59+4)|0);
      $buf4=$incdec_ptr67;
      var $60=HEAP32[(($59)>>2)];
      var $61=$c;
      var $xor68=$61 ^ $60;
      $c=$xor68;
      var $62=$c;
      var $and69=$62 & 255;
      var $arrayidx70=((((_crc_table+3072)|0)+($and69<<2))|0);
      var $63=HEAP32[(($arrayidx70)>>2)];
      var $64=$c;
      var $shr71=$64 >>> 8;
      var $and72=$shr71 & 255;
      var $arrayidx73=((((_crc_table+2048)|0)+($and72<<2))|0);
      var $65=HEAP32[(($arrayidx73)>>2)];
      var $xor74=$63 ^ $65;
      var $66=$c;
      var $shr75=$66 >>> 16;
      var $and76=$shr75 & 255;
      var $arrayidx77=((((_crc_table+1024)|0)+($and76<<2))|0);
      var $67=HEAP32[(($arrayidx77)>>2)];
      var $xor78=$xor74 ^ $67;
      var $68=$c;
      var $shr79=$68 >>> 24;
      var $arrayidx80=((((_crc_table)|0)+($shr79<<2))|0);
      var $69=HEAP32[(($arrayidx80)>>2)];
      var $xor81=$xor78 ^ $69;
      $c=$xor81;
      var $70=$buf4;
      var $incdec_ptr82=(($70+4)|0);
      $buf4=$incdec_ptr82;
      var $71=HEAP32[(($70)>>2)];
      var $72=$c;
      var $xor83=$72 ^ $71;
      $c=$xor83;
      var $73=$c;
      var $and84=$73 & 255;
      var $arrayidx85=((((_crc_table+3072)|0)+($and84<<2))|0);
      var $74=HEAP32[(($arrayidx85)>>2)];
      var $75=$c;
      var $shr86=$75 >>> 8;
      var $and87=$shr86 & 255;
      var $arrayidx88=((((_crc_table+2048)|0)+($and87<<2))|0);
      var $76=HEAP32[(($arrayidx88)>>2)];
      var $xor89=$74 ^ $76;
      var $77=$c;
      var $shr90=$77 >>> 16;
      var $and91=$shr90 & 255;
      var $arrayidx92=((((_crc_table+1024)|0)+($and91<<2))|0);
      var $78=HEAP32[(($arrayidx92)>>2)];
      var $xor93=$xor89 ^ $78;
      var $79=$c;
      var $shr94=$79 >>> 24;
      var $arrayidx95=((((_crc_table)|0)+($shr94<<2))|0);
      var $80=HEAP32[(($arrayidx95)>>2)];
      var $xor96=$xor93 ^ $80;
      $c=$xor96;
      var $81=$buf4;
      var $incdec_ptr97=(($81+4)|0);
      $buf4=$incdec_ptr97;
      var $82=HEAP32[(($81)>>2)];
      var $83=$c;
      var $xor98=$83 ^ $82;
      $c=$xor98;
      var $84=$c;
      var $and99=$84 & 255;
      var $arrayidx100=((((_crc_table+3072)|0)+($and99<<2))|0);
      var $85=HEAP32[(($arrayidx100)>>2)];
      var $86=$c;
      var $shr101=$86 >>> 8;
      var $and102=$shr101 & 255;
      var $arrayidx103=((((_crc_table+2048)|0)+($and102<<2))|0);
      var $87=HEAP32[(($arrayidx103)>>2)];
      var $xor104=$85 ^ $87;
      var $88=$c;
      var $shr105=$88 >>> 16;
      var $and106=$shr105 & 255;
      var $arrayidx107=((((_crc_table+1024)|0)+($and106<<2))|0);
      var $89=HEAP32[(($arrayidx107)>>2)];
      var $xor108=$xor104 ^ $89;
      var $90=$c;
      var $shr109=$90 >>> 24;
      var $arrayidx110=((((_crc_table)|0)+($shr109<<2))|0);
      var $91=HEAP32[(($arrayidx110)>>2)];
      var $xor111=$xor108 ^ $91;
      $c=$xor111;
      var $92=$buf4;
      var $incdec_ptr112=(($92+4)|0);
      $buf4=$incdec_ptr112;
      var $93=HEAP32[(($92)>>2)];
      var $94=$c;
      var $xor113=$94 ^ $93;
      $c=$xor113;
      var $95=$c;
      var $and114=$95 & 255;
      var $arrayidx115=((((_crc_table+3072)|0)+($and114<<2))|0);
      var $96=HEAP32[(($arrayidx115)>>2)];
      var $97=$c;
      var $shr116=$97 >>> 8;
      var $and117=$shr116 & 255;
      var $arrayidx118=((((_crc_table+2048)|0)+($and117<<2))|0);
      var $98=HEAP32[(($arrayidx118)>>2)];
      var $xor119=$96 ^ $98;
      var $99=$c;
      var $shr120=$99 >>> 16;
      var $and121=$shr120 & 255;
      var $arrayidx122=((((_crc_table+1024)|0)+($and121<<2))|0);
      var $100=HEAP32[(($arrayidx122)>>2)];
      var $xor123=$xor119 ^ $100;
      var $101=$c;
      var $shr124=$101 >>> 24;
      var $arrayidx125=((((_crc_table)|0)+($shr124<<2))|0);
      var $102=HEAP32[(($arrayidx125)>>2)];
      var $xor126=$xor123 ^ $102;
      $c=$xor126;
      var $103=$len_addr;
      var $sub=(($103-32)|0);
      $len_addr=$sub;
      __label__ = 7; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $104=$len_addr;
      var $cmp129=(($104)>>>0) >= 4;
      if ($cmp129) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $105=$buf4;
      var $incdec_ptr132=(($105+4)|0);
      $buf4=$incdec_ptr132;
      var $106=HEAP32[(($105)>>2)];
      var $107=$c;
      var $xor133=$107 ^ $106;
      $c=$xor133;
      var $108=$c;
      var $and134=$108 & 255;
      var $arrayidx135=((((_crc_table+3072)|0)+($and134<<2))|0);
      var $109=HEAP32[(($arrayidx135)>>2)];
      var $110=$c;
      var $shr136=$110 >>> 8;
      var $and137=$shr136 & 255;
      var $arrayidx138=((((_crc_table+2048)|0)+($and137<<2))|0);
      var $111=HEAP32[(($arrayidx138)>>2)];
      var $xor139=$109 ^ $111;
      var $112=$c;
      var $shr140=$112 >>> 16;
      var $and141=$shr140 & 255;
      var $arrayidx142=((((_crc_table+1024)|0)+($and141<<2))|0);
      var $113=HEAP32[(($arrayidx142)>>2)];
      var $xor143=$xor139 ^ $113;
      var $114=$c;
      var $shr144=$114 >>> 24;
      var $arrayidx145=((((_crc_table)|0)+($shr144<<2))|0);
      var $115=HEAP32[(($arrayidx145)>>2)];
      var $xor146=$xor143 ^ $115;
      $c=$xor146;
      var $116=$len_addr;
      var $sub147=(($116-4)|0);
      $len_addr=$sub147;
      __label__ = 10; break;
    case 12: 
      var $117=$buf4;
      var $118=$117;
      $buf_addr=$118;
      var $119=$len_addr;
      var $tobool149=(($119)|0)!=0;
      if ($tobool149) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $120=$c;
      var $121=$buf_addr;
      var $incdec_ptr150=(($121+1)|0);
      $buf_addr=$incdec_ptr150;
      var $122=HEAPU8[($121)];
      var $conv151=(($122)&255);
      var $xor152=$120 ^ $conv151;
      var $and153=$xor152 & 255;
      var $arrayidx154=((((_crc_table)|0)+($and153<<2))|0);
      var $123=HEAP32[(($arrayidx154)>>2)];
      var $124=$c;
      var $shr155=$124 >>> 8;
      var $xor156=$123 ^ $shr155;
      $c=$xor156;
      __label__ = 15; break;
    case 15: 
      var $125=$len_addr;
      var $dec157=(($125-1)|0);
      $len_addr=$dec157;
      var $tobool158=(($dec157)|0)!=0;
      if ($tobool158) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $126=$c;
      var $neg159=$126 ^ -1;
      $c=$neg159;
      var $127=$c;
      ;
      return $127;
    default: assert(0, "bad label: " + __label__);
  }
}
_crc32_little["X"]=1;

function _crc32_big($crc, $buf, $len) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $crc_addr;
      var $buf_addr;
      var $len_addr;
      var $c;
      var $buf4;
      $crc_addr=$crc;
      $buf_addr=$buf;
      $len_addr=$len;
      var $0=$crc_addr;
      var $shr=$0 >>> 24;
      var $and=$shr & 255;
      var $1=$crc_addr;
      var $shr1=$1 >>> 8;
      var $and2=$shr1 & 65280;
      var $add=(($and+$and2)|0);
      var $2=$crc_addr;
      var $and3=$2 & 65280;
      var $shl=$and3 << 8;
      var $add4=(($add+$shl)|0);
      var $3=$crc_addr;
      var $and5=$3 & 255;
      var $shl6=$and5 << 24;
      var $add7=(($add4+$shl6)|0);
      $c=$add7;
      var $4=$c;
      var $neg=$4 ^ -1;
      $c=$neg;
      __label__ = 2; break;
    case 2: 
      var $5=$len_addr;
      var $tobool=(($5)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { var $8 = 0;__label__ = 4; break; }
    case 3: 
      var $6=$buf_addr;
      var $7=$6;
      var $and8=$7 & 3;
      var $tobool9=(($and8)|0)!=0;
      var $8 = $tobool9;__label__ = 4; break;
    case 4: 
      var $8;
      if ($8) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $9=$c;
      var $shr10=$9 >>> 24;
      var $10=$buf_addr;
      var $incdec_ptr=(($10+1)|0);
      $buf_addr=$incdec_ptr;
      var $11=HEAPU8[($10)];
      var $conv=(($11)&255);
      var $xor=$shr10 ^ $conv;
      var $arrayidx=((((_crc_table+4096)|0)+($xor<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $13=$c;
      var $shl11=$13 << 8;
      var $xor12=$12 ^ $shl11;
      $c=$xor12;
      var $14=$len_addr;
      var $dec=(($14-1)|0);
      $len_addr=$dec;
      __label__ = 2; break;
    case 6: 
      var $15=$buf_addr;
      var $16=$15;
      $buf4=$16;
      var $17=$buf4;
      var $incdec_ptr13=(($17-4)|0);
      $buf4=$incdec_ptr13;
      __label__ = 7; break;
    case 7: 
      var $18=$len_addr;
      var $cmp=(($18)>>>0) >= 32;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $19=$buf4;
      var $incdec_ptr17=(($19+4)|0);
      $buf4=$incdec_ptr17;
      var $20=HEAP32[(($incdec_ptr17)>>2)];
      var $21=$c;
      var $xor18=$21 ^ $20;
      $c=$xor18;
      var $22=$c;
      var $and19=$22 & 255;
      var $arrayidx20=((((_crc_table+4096)|0)+($and19<<2))|0);
      var $23=HEAP32[(($arrayidx20)>>2)];
      var $24=$c;
      var $shr21=$24 >>> 8;
      var $and22=$shr21 & 255;
      var $arrayidx23=((((_crc_table+5120)|0)+($and22<<2))|0);
      var $25=HEAP32[(($arrayidx23)>>2)];
      var $xor24=$23 ^ $25;
      var $26=$c;
      var $shr25=$26 >>> 16;
      var $and26=$shr25 & 255;
      var $arrayidx27=((((_crc_table+6144)|0)+($and26<<2))|0);
      var $27=HEAP32[(($arrayidx27)>>2)];
      var $xor28=$xor24 ^ $27;
      var $28=$c;
      var $shr29=$28 >>> 24;
      var $arrayidx30=((((_crc_table+7168)|0)+($shr29<<2))|0);
      var $29=HEAP32[(($arrayidx30)>>2)];
      var $xor31=$xor28 ^ $29;
      $c=$xor31;
      var $30=$buf4;
      var $incdec_ptr32=(($30+4)|0);
      $buf4=$incdec_ptr32;
      var $31=HEAP32[(($incdec_ptr32)>>2)];
      var $32=$c;
      var $xor33=$32 ^ $31;
      $c=$xor33;
      var $33=$c;
      var $and34=$33 & 255;
      var $arrayidx35=((((_crc_table+4096)|0)+($and34<<2))|0);
      var $34=HEAP32[(($arrayidx35)>>2)];
      var $35=$c;
      var $shr36=$35 >>> 8;
      var $and37=$shr36 & 255;
      var $arrayidx38=((((_crc_table+5120)|0)+($and37<<2))|0);
      var $36=HEAP32[(($arrayidx38)>>2)];
      var $xor39=$34 ^ $36;
      var $37=$c;
      var $shr40=$37 >>> 16;
      var $and41=$shr40 & 255;
      var $arrayidx42=((((_crc_table+6144)|0)+($and41<<2))|0);
      var $38=HEAP32[(($arrayidx42)>>2)];
      var $xor43=$xor39 ^ $38;
      var $39=$c;
      var $shr44=$39 >>> 24;
      var $arrayidx45=((((_crc_table+7168)|0)+($shr44<<2))|0);
      var $40=HEAP32[(($arrayidx45)>>2)];
      var $xor46=$xor43 ^ $40;
      $c=$xor46;
      var $41=$buf4;
      var $incdec_ptr47=(($41+4)|0);
      $buf4=$incdec_ptr47;
      var $42=HEAP32[(($incdec_ptr47)>>2)];
      var $43=$c;
      var $xor48=$43 ^ $42;
      $c=$xor48;
      var $44=$c;
      var $and49=$44 & 255;
      var $arrayidx50=((((_crc_table+4096)|0)+($and49<<2))|0);
      var $45=HEAP32[(($arrayidx50)>>2)];
      var $46=$c;
      var $shr51=$46 >>> 8;
      var $and52=$shr51 & 255;
      var $arrayidx53=((((_crc_table+5120)|0)+($and52<<2))|0);
      var $47=HEAP32[(($arrayidx53)>>2)];
      var $xor54=$45 ^ $47;
      var $48=$c;
      var $shr55=$48 >>> 16;
      var $and56=$shr55 & 255;
      var $arrayidx57=((((_crc_table+6144)|0)+($and56<<2))|0);
      var $49=HEAP32[(($arrayidx57)>>2)];
      var $xor58=$xor54 ^ $49;
      var $50=$c;
      var $shr59=$50 >>> 24;
      var $arrayidx60=((((_crc_table+7168)|0)+($shr59<<2))|0);
      var $51=HEAP32[(($arrayidx60)>>2)];
      var $xor61=$xor58 ^ $51;
      $c=$xor61;
      var $52=$buf4;
      var $incdec_ptr62=(($52+4)|0);
      $buf4=$incdec_ptr62;
      var $53=HEAP32[(($incdec_ptr62)>>2)];
      var $54=$c;
      var $xor63=$54 ^ $53;
      $c=$xor63;
      var $55=$c;
      var $and64=$55 & 255;
      var $arrayidx65=((((_crc_table+4096)|0)+($and64<<2))|0);
      var $56=HEAP32[(($arrayidx65)>>2)];
      var $57=$c;
      var $shr66=$57 >>> 8;
      var $and67=$shr66 & 255;
      var $arrayidx68=((((_crc_table+5120)|0)+($and67<<2))|0);
      var $58=HEAP32[(($arrayidx68)>>2)];
      var $xor69=$56 ^ $58;
      var $59=$c;
      var $shr70=$59 >>> 16;
      var $and71=$shr70 & 255;
      var $arrayidx72=((((_crc_table+6144)|0)+($and71<<2))|0);
      var $60=HEAP32[(($arrayidx72)>>2)];
      var $xor73=$xor69 ^ $60;
      var $61=$c;
      var $shr74=$61 >>> 24;
      var $arrayidx75=((((_crc_table+7168)|0)+($shr74<<2))|0);
      var $62=HEAP32[(($arrayidx75)>>2)];
      var $xor76=$xor73 ^ $62;
      $c=$xor76;
      var $63=$buf4;
      var $incdec_ptr77=(($63+4)|0);
      $buf4=$incdec_ptr77;
      var $64=HEAP32[(($incdec_ptr77)>>2)];
      var $65=$c;
      var $xor78=$65 ^ $64;
      $c=$xor78;
      var $66=$c;
      var $and79=$66 & 255;
      var $arrayidx80=((((_crc_table+4096)|0)+($and79<<2))|0);
      var $67=HEAP32[(($arrayidx80)>>2)];
      var $68=$c;
      var $shr81=$68 >>> 8;
      var $and82=$shr81 & 255;
      var $arrayidx83=((((_crc_table+5120)|0)+($and82<<2))|0);
      var $69=HEAP32[(($arrayidx83)>>2)];
      var $xor84=$67 ^ $69;
      var $70=$c;
      var $shr85=$70 >>> 16;
      var $and86=$shr85 & 255;
      var $arrayidx87=((((_crc_table+6144)|0)+($and86<<2))|0);
      var $71=HEAP32[(($arrayidx87)>>2)];
      var $xor88=$xor84 ^ $71;
      var $72=$c;
      var $shr89=$72 >>> 24;
      var $arrayidx90=((((_crc_table+7168)|0)+($shr89<<2))|0);
      var $73=HEAP32[(($arrayidx90)>>2)];
      var $xor91=$xor88 ^ $73;
      $c=$xor91;
      var $74=$buf4;
      var $incdec_ptr92=(($74+4)|0);
      $buf4=$incdec_ptr92;
      var $75=HEAP32[(($incdec_ptr92)>>2)];
      var $76=$c;
      var $xor93=$76 ^ $75;
      $c=$xor93;
      var $77=$c;
      var $and94=$77 & 255;
      var $arrayidx95=((((_crc_table+4096)|0)+($and94<<2))|0);
      var $78=HEAP32[(($arrayidx95)>>2)];
      var $79=$c;
      var $shr96=$79 >>> 8;
      var $and97=$shr96 & 255;
      var $arrayidx98=((((_crc_table+5120)|0)+($and97<<2))|0);
      var $80=HEAP32[(($arrayidx98)>>2)];
      var $xor99=$78 ^ $80;
      var $81=$c;
      var $shr100=$81 >>> 16;
      var $and101=$shr100 & 255;
      var $arrayidx102=((((_crc_table+6144)|0)+($and101<<2))|0);
      var $82=HEAP32[(($arrayidx102)>>2)];
      var $xor103=$xor99 ^ $82;
      var $83=$c;
      var $shr104=$83 >>> 24;
      var $arrayidx105=((((_crc_table+7168)|0)+($shr104<<2))|0);
      var $84=HEAP32[(($arrayidx105)>>2)];
      var $xor106=$xor103 ^ $84;
      $c=$xor106;
      var $85=$buf4;
      var $incdec_ptr107=(($85+4)|0);
      $buf4=$incdec_ptr107;
      var $86=HEAP32[(($incdec_ptr107)>>2)];
      var $87=$c;
      var $xor108=$87 ^ $86;
      $c=$xor108;
      var $88=$c;
      var $and109=$88 & 255;
      var $arrayidx110=((((_crc_table+4096)|0)+($and109<<2))|0);
      var $89=HEAP32[(($arrayidx110)>>2)];
      var $90=$c;
      var $shr111=$90 >>> 8;
      var $and112=$shr111 & 255;
      var $arrayidx113=((((_crc_table+5120)|0)+($and112<<2))|0);
      var $91=HEAP32[(($arrayidx113)>>2)];
      var $xor114=$89 ^ $91;
      var $92=$c;
      var $shr115=$92 >>> 16;
      var $and116=$shr115 & 255;
      var $arrayidx117=((((_crc_table+6144)|0)+($and116<<2))|0);
      var $93=HEAP32[(($arrayidx117)>>2)];
      var $xor118=$xor114 ^ $93;
      var $94=$c;
      var $shr119=$94 >>> 24;
      var $arrayidx120=((((_crc_table+7168)|0)+($shr119<<2))|0);
      var $95=HEAP32[(($arrayidx120)>>2)];
      var $xor121=$xor118 ^ $95;
      $c=$xor121;
      var $96=$buf4;
      var $incdec_ptr122=(($96+4)|0);
      $buf4=$incdec_ptr122;
      var $97=HEAP32[(($incdec_ptr122)>>2)];
      var $98=$c;
      var $xor123=$98 ^ $97;
      $c=$xor123;
      var $99=$c;
      var $and124=$99 & 255;
      var $arrayidx125=((((_crc_table+4096)|0)+($and124<<2))|0);
      var $100=HEAP32[(($arrayidx125)>>2)];
      var $101=$c;
      var $shr126=$101 >>> 8;
      var $and127=$shr126 & 255;
      var $arrayidx128=((((_crc_table+5120)|0)+($and127<<2))|0);
      var $102=HEAP32[(($arrayidx128)>>2)];
      var $xor129=$100 ^ $102;
      var $103=$c;
      var $shr130=$103 >>> 16;
      var $and131=$shr130 & 255;
      var $arrayidx132=((((_crc_table+6144)|0)+($and131<<2))|0);
      var $104=HEAP32[(($arrayidx132)>>2)];
      var $xor133=$xor129 ^ $104;
      var $105=$c;
      var $shr134=$105 >>> 24;
      var $arrayidx135=((((_crc_table+7168)|0)+($shr134<<2))|0);
      var $106=HEAP32[(($arrayidx135)>>2)];
      var $xor136=$xor133 ^ $106;
      $c=$xor136;
      var $107=$len_addr;
      var $sub=(($107-32)|0);
      $len_addr=$sub;
      __label__ = 7; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $108=$len_addr;
      var $cmp139=(($108)>>>0) >= 4;
      if ($cmp139) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $109=$buf4;
      var $incdec_ptr142=(($109+4)|0);
      $buf4=$incdec_ptr142;
      var $110=HEAP32[(($incdec_ptr142)>>2)];
      var $111=$c;
      var $xor143=$111 ^ $110;
      $c=$xor143;
      var $112=$c;
      var $and144=$112 & 255;
      var $arrayidx145=((((_crc_table+4096)|0)+($and144<<2))|0);
      var $113=HEAP32[(($arrayidx145)>>2)];
      var $114=$c;
      var $shr146=$114 >>> 8;
      var $and147=$shr146 & 255;
      var $arrayidx148=((((_crc_table+5120)|0)+($and147<<2))|0);
      var $115=HEAP32[(($arrayidx148)>>2)];
      var $xor149=$113 ^ $115;
      var $116=$c;
      var $shr150=$116 >>> 16;
      var $and151=$shr150 & 255;
      var $arrayidx152=((((_crc_table+6144)|0)+($and151<<2))|0);
      var $117=HEAP32[(($arrayidx152)>>2)];
      var $xor153=$xor149 ^ $117;
      var $118=$c;
      var $shr154=$118 >>> 24;
      var $arrayidx155=((((_crc_table+7168)|0)+($shr154<<2))|0);
      var $119=HEAP32[(($arrayidx155)>>2)];
      var $xor156=$xor153 ^ $119;
      $c=$xor156;
      var $120=$len_addr;
      var $sub157=(($120-4)|0);
      $len_addr=$sub157;
      __label__ = 10; break;
    case 12: 
      var $121=$buf4;
      var $incdec_ptr159=(($121+4)|0);
      $buf4=$incdec_ptr159;
      var $122=$buf4;
      var $123=$122;
      $buf_addr=$123;
      var $124=$len_addr;
      var $tobool160=(($124)|0)!=0;
      if ($tobool160) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $125=$c;
      var $shr161=$125 >>> 24;
      var $126=$buf_addr;
      var $incdec_ptr162=(($126+1)|0);
      $buf_addr=$incdec_ptr162;
      var $127=HEAPU8[($126)];
      var $conv163=(($127)&255);
      var $xor164=$shr161 ^ $conv163;
      var $arrayidx165=((((_crc_table+4096)|0)+($xor164<<2))|0);
      var $128=HEAP32[(($arrayidx165)>>2)];
      var $129=$c;
      var $shl166=$129 << 8;
      var $xor167=$128 ^ $shl166;
      $c=$xor167;
      __label__ = 15; break;
    case 15: 
      var $130=$len_addr;
      var $dec168=(($130-1)|0);
      $len_addr=$dec168;
      var $tobool169=(($dec168)|0)!=0;
      if ($tobool169) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $131=$c;
      var $neg170=$131 ^ -1;
      $c=$neg170;
      var $132=$c;
      var $shr171=$132 >>> 24;
      var $and172=$shr171 & 255;
      var $133=$c;
      var $shr173=$133 >>> 8;
      var $and174=$shr173 & 65280;
      var $add175=(($and172+$and174)|0);
      var $134=$c;
      var $and176=$134 & 65280;
      var $shl177=$and176 << 8;
      var $add178=(($add175+$shl177)|0);
      var $135=$c;
      var $and179=$135 & 255;
      var $shl180=$and179 << 24;
      var $add181=(($add178+$shl180)|0);
      ;
      return $add181;
    default: assert(0, "bad label: " + __label__);
  }
}
_crc32_big["X"]=1;

function _deflateInit2_($strm, $level, $method, $windowBits, $memLevel, $strategy, $version, $stream_size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $level_addr;
      var $method_addr;
      var $windowBits_addr;
      var $memLevel_addr;
      var $strategy_addr;
      var $version_addr;
      var $stream_size_addr;
      var $s;
      var $wrap;
      var $overlay;
      $strm_addr=$strm;
      $level_addr=$level;
      $method_addr=$method;
      $windowBits_addr=$windowBits;
      $memLevel_addr=$memLevel;
      $strategy_addr=$strategy;
      $version_addr=$version;
      $stream_size_addr=$stream_size;
      $wrap=1;
      var $0=$version_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$version_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2 << 24) >> 24);
      var $3=HEAP8[(((STRING_TABLE._deflateInit2__my_version)|0))];
      var $conv1=(($3 << 24) >> 24);
      var $cmp2=(($conv)|0)!=(($conv1)|0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$stream_size_addr;
      var $cmp5=(($4)|0)!=56;
      if ($cmp5) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=-6;
      __label__ = 38; break;
    case 5: 
      var $5=$strm_addr;
      var $cmp7=(($5)|0)==0;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $retval=-2;
      __label__ = 38; break;
    case 7: 
      var $6=$strm_addr;
      var $msg=(($6+24)|0);
      HEAP32[(($msg)>>2)]=0;
      var $7=$strm_addr;
      var $zalloc=(($7+32)|0);
      var $8=HEAP32[(($zalloc)>>2)];
      var $cmp11=(($8)|0)==0;
      if ($cmp11) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $retval=-2;
      __label__ = 38; break;
    case 9: 
      var $9=$strm_addr;
      var $zfree=(($9+36)|0);
      var $10=HEAP32[(($zfree)>>2)];
      var $cmp15=(($10)|0)==0;
      if ($cmp15) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $retval=-2;
      __label__ = 38; break;
    case 11: 
      var $11=$level_addr;
      var $cmp19=(($11)|0)==-1;
      if ($cmp19) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $level_addr=6;
      __label__ = 13; break;
    case 13: 
      var $12=$windowBits_addr;
      var $cmp23=(($12)|0) < 0;
      if ($cmp23) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $wrap=0;
      var $13=$windowBits_addr;
      var $sub=(((-$13))|0);
      $windowBits_addr=$sub;
      __label__ = 18; break;
    case 15: 
      var $14=$windowBits_addr;
      var $cmp26=(($14)|0) > 15;
      if ($cmp26) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      $wrap=2;
      var $15=$windowBits_addr;
      var $sub29=(($15-16)|0);
      $windowBits_addr=$sub29;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $16=$memLevel_addr;
      var $cmp32=(($16)|0) < 1;
      if ($cmp32) { __label__ = 27; break; } else { __label__ = 19; break; }
    case 19: 
      var $17=$memLevel_addr;
      var $cmp35=(($17)|0) > 9;
      if ($cmp35) { __label__ = 27; break; } else { __label__ = 20; break; }
    case 20: 
      var $18=$method_addr;
      var $cmp38=(($18)|0)!=8;
      if ($cmp38) { __label__ = 27; break; } else { __label__ = 21; break; }
    case 21: 
      var $19=$windowBits_addr;
      var $cmp41=(($19)|0) < 8;
      if ($cmp41) { __label__ = 27; break; } else { __label__ = 22; break; }
    case 22: 
      var $20=$windowBits_addr;
      var $cmp44=(($20)|0) > 15;
      if ($cmp44) { __label__ = 27; break; } else { __label__ = 23; break; }
    case 23: 
      var $21=$level_addr;
      var $cmp47=(($21)|0) < 0;
      if ($cmp47) { __label__ = 27; break; } else { __label__ = 24; break; }
    case 24: 
      var $22=$level_addr;
      var $cmp50=(($22)|0) > 9;
      if ($cmp50) { __label__ = 27; break; } else { __label__ = 25; break; }
    case 25: 
      var $23=$strategy_addr;
      var $cmp53=(($23)|0) < 0;
      if ($cmp53) { __label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      var $24=$strategy_addr;
      var $cmp56=(($24)|0) > 4;
      if ($cmp56) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      $retval=-2;
      __label__ = 38; break;
    case 28: 
      var $25=$windowBits_addr;
      var $cmp60=(($25)|0)==8;
      if ($cmp60) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      $windowBits_addr=9;
      __label__ = 30; break;
    case 30: 
      var $26=$strm_addr;
      var $zalloc64=(($26+32)|0);
      var $27=HEAP32[(($zalloc64)>>2)];
      var $28=$strm_addr;
      var $opaque=(($28+40)|0);
      var $29=HEAP32[(($opaque)>>2)];
      var $call=FUNCTION_TABLE[$27]($29, 1, 5828);
      var $30=$call;
      $s=$30;
      var $31=$s;
      var $cmp65=(($31)|0)==0;
      if ($cmp65) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      $retval=-4;
      __label__ = 38; break;
    case 32: 
      var $32=$s;
      var $33=$strm_addr;
      var $state=(($33+28)|0);
      HEAP32[(($state)>>2)]=$32;
      var $34=$strm_addr;
      var $35=$s;
      var $strm69=(($35)|0);
      HEAP32[(($strm69)>>2)]=$34;
      var $36=$wrap;
      var $37=$s;
      var $wrap70=(($37+24)|0);
      HEAP32[(($wrap70)>>2)]=$36;
      var $38=$s;
      var $gzhead=(($38+28)|0);
      HEAP32[(($gzhead)>>2)]=0;
      var $39=$windowBits_addr;
      var $40=$s;
      var $w_bits=(($40+48)|0);
      HEAP32[(($w_bits)>>2)]=$39;
      var $41=$s;
      var $w_bits71=(($41+48)|0);
      var $42=HEAP32[(($w_bits71)>>2)];
      var $shl=1 << $42;
      var $43=$s;
      var $w_size=(($43+44)|0);
      HEAP32[(($w_size)>>2)]=$shl;
      var $44=$s;
      var $w_size72=(($44+44)|0);
      var $45=HEAP32[(($w_size72)>>2)];
      var $sub73=(($45-1)|0);
      var $46=$s;
      var $w_mask=(($46+52)|0);
      HEAP32[(($w_mask)>>2)]=$sub73;
      var $47=$memLevel_addr;
      var $add=(($47+7)|0);
      var $48=$s;
      var $hash_bits=(($48+80)|0);
      HEAP32[(($hash_bits)>>2)]=$add;
      var $49=$s;
      var $hash_bits74=(($49+80)|0);
      var $50=HEAP32[(($hash_bits74)>>2)];
      var $shl75=1 << $50;
      var $51=$s;
      var $hash_size=(($51+76)|0);
      HEAP32[(($hash_size)>>2)]=$shl75;
      var $52=$s;
      var $hash_size76=(($52+76)|0);
      var $53=HEAP32[(($hash_size76)>>2)];
      var $sub77=(($53-1)|0);
      var $54=$s;
      var $hash_mask=(($54+84)|0);
      HEAP32[(($hash_mask)>>2)]=$sub77;
      var $55=$s;
      var $hash_bits78=(($55+80)|0);
      var $56=HEAP32[(($hash_bits78)>>2)];
      var $add79=(($56+3)|0);
      var $sub80=(($add79-1)|0);
      var $div=Math.floor((($sub80)>>>0)/3);
      var $57=$s;
      var $hash_shift=(($57+88)|0);
      HEAP32[(($hash_shift)>>2)]=$div;
      var $58=$strm_addr;
      var $zalloc81=(($58+32)|0);
      var $59=HEAP32[(($zalloc81)>>2)];
      var $60=$strm_addr;
      var $opaque82=(($60+40)|0);
      var $61=HEAP32[(($opaque82)>>2)];
      var $62=$s;
      var $w_size83=(($62+44)|0);
      var $63=HEAP32[(($w_size83)>>2)];
      var $call84=FUNCTION_TABLE[$59]($61, $63, 2);
      var $64=$s;
      var $window=(($64+56)|0);
      HEAP32[(($window)>>2)]=$call84;
      var $65=$strm_addr;
      var $zalloc85=(($65+32)|0);
      var $66=HEAP32[(($zalloc85)>>2)];
      var $67=$strm_addr;
      var $opaque86=(($67+40)|0);
      var $68=HEAP32[(($opaque86)>>2)];
      var $69=$s;
      var $w_size87=(($69+44)|0);
      var $70=HEAP32[(($w_size87)>>2)];
      var $call88=FUNCTION_TABLE[$66]($68, $70, 2);
      var $71=$call88;
      var $72=$s;
      var $prev=(($72+64)|0);
      HEAP32[(($prev)>>2)]=$71;
      var $73=$strm_addr;
      var $zalloc89=(($73+32)|0);
      var $74=HEAP32[(($zalloc89)>>2)];
      var $75=$strm_addr;
      var $opaque90=(($75+40)|0);
      var $76=HEAP32[(($opaque90)>>2)];
      var $77=$s;
      var $hash_size91=(($77+76)|0);
      var $78=HEAP32[(($hash_size91)>>2)];
      var $call92=FUNCTION_TABLE[$74]($76, $78, 2);
      var $79=$call92;
      var $80=$s;
      var $head=(($80+68)|0);
      HEAP32[(($head)>>2)]=$79;
      var $81=$s;
      var $high_water=(($81+5824)|0);
      HEAP32[(($high_water)>>2)]=0;
      var $82=$memLevel_addr;
      var $add93=(($82+6)|0);
      var $shl94=1 << $add93;
      var $83=$s;
      var $lit_bufsize=(($83+5788)|0);
      HEAP32[(($lit_bufsize)>>2)]=$shl94;
      var $84=$strm_addr;
      var $zalloc95=(($84+32)|0);
      var $85=HEAP32[(($zalloc95)>>2)];
      var $86=$strm_addr;
      var $opaque96=(($86+40)|0);
      var $87=HEAP32[(($opaque96)>>2)];
      var $88=$s;
      var $lit_bufsize97=(($88+5788)|0);
      var $89=HEAP32[(($lit_bufsize97)>>2)];
      var $call98=FUNCTION_TABLE[$85]($87, $89, 4);
      var $90=$call98;
      $overlay=$90;
      var $91=$overlay;
      var $92=$91;
      var $93=$s;
      var $pending_buf=(($93+8)|0);
      HEAP32[(($pending_buf)>>2)]=$92;
      var $94=$s;
      var $lit_bufsize99=(($94+5788)|0);
      var $95=HEAP32[(($lit_bufsize99)>>2)];
      var $mul=((($95<<2))|0);
      var $96=$s;
      var $pending_buf_size=(($96+12)|0);
      HEAP32[(($pending_buf_size)>>2)]=$mul;
      var $97=$s;
      var $window100=(($97+56)|0);
      var $98=HEAP32[(($window100)>>2)];
      var $cmp101=(($98)|0)==0;
      if ($cmp101) { __label__ = 36; break; } else { __label__ = 33; break; }
    case 33: 
      var $99=$s;
      var $prev104=(($99+64)|0);
      var $100=HEAP32[(($prev104)>>2)];
      var $cmp105=(($100)|0)==0;
      if ($cmp105) { __label__ = 36; break; } else { __label__ = 34; break; }
    case 34: 
      var $101=$s;
      var $head108=(($101+68)|0);
      var $102=HEAP32[(($head108)>>2)];
      var $cmp109=(($102)|0)==0;
      if ($cmp109) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $103=$s;
      var $pending_buf112=(($103+8)|0);
      var $104=HEAP32[(($pending_buf112)>>2)];
      var $cmp113=(($104)|0)==0;
      if ($cmp113) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $105=$s;
      var $status=(($105+4)|0);
      HEAP32[(($status)>>2)]=666;
      var $106=HEAP32[((((_z_errmsg+24)|0))>>2)];
      var $107=$strm_addr;
      var $msg116=(($107+24)|0);
      HEAP32[(($msg116)>>2)]=$106;
      var $108=$strm_addr;
      var $call117=_deflateEnd($108);
      $retval=-4;
      __label__ = 38; break;
    case 37: 
      var $109=$overlay;
      var $110=$s;
      var $lit_bufsize119=(($110+5788)|0);
      var $111=HEAPU32[(($lit_bufsize119)>>2)];
      var $div120=Math.floor((($111)>>>0)/2);
      var $add_ptr=(($109+($div120<<1))|0);
      var $112=$s;
      var $d_buf=(($112+5796)|0);
      HEAP32[(($d_buf)>>2)]=$add_ptr;
      var $113=$s;
      var $pending_buf121=(($113+8)|0);
      var $114=HEAP32[(($pending_buf121)>>2)];
      var $115=$s;
      var $lit_bufsize122=(($115+5788)|0);
      var $116=HEAP32[(($lit_bufsize122)>>2)];
      var $mul123=(($116*3)|0);
      var $add_ptr124=(($114+$mul123)|0);
      var $117=$s;
      var $l_buf=(($117+5784)|0);
      HEAP32[(($l_buf)>>2)]=$add_ptr124;
      var $118=$level_addr;
      var $119=$s;
      var $level125=(($119+132)|0);
      HEAP32[(($level125)>>2)]=$118;
      var $120=$strategy_addr;
      var $121=$s;
      var $strategy126=(($121+136)|0);
      HEAP32[(($strategy126)>>2)]=$120;
      var $122=$method_addr;
      var $conv127=(($122) & 255);
      var $123=$s;
      var $method128=(($123+36)|0);
      HEAP8[($method128)]=$conv127;
      var $124=$strm_addr;
      var $call129=_deflateReset($124);
      $retval=$call129;
      __label__ = 38; break;
    case 38: 
      var $125=$retval;
      ;
      return $125;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflateInit2_["X"]=1;

function _deflateEnd($strm) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $status;
      $strm_addr=$strm;
      var $0=$strm_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$strm_addr;
      var $state=(($1+28)|0);
      var $2=HEAP32[(($state)>>2)];
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=-2;
      __label__ = 21; break;
    case 4: 
      var $3=$strm_addr;
      var $state2=(($3+28)|0);
      var $4=HEAP32[(($state2)>>2)];
      var $status3=(($4+4)|0);
      var $5=HEAP32[(($status3)>>2)];
      $status=$5;
      var $6=$status;
      var $cmp4=(($6)|0)!=42;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      var $7=$status;
      var $cmp5=(($7)|0)!=69;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $8=$status;
      var $cmp7=(($8)|0)!=73;
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $9=$status;
      var $cmp9=(($9)|0)!=91;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $10=$status;
      var $cmp11=(($10)|0)!=103;
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $11=$status;
      var $cmp13=(($11)|0)!=113;
      if ($cmp13) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $12=$status;
      var $cmp15=(($12)|0)!=666;
      if ($cmp15) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $retval=-2;
      __label__ = 21; break;
    case 12: 
      var $13=$strm_addr;
      var $state18=(($13+28)|0);
      var $14=HEAP32[(($state18)>>2)];
      var $pending_buf=(($14+8)|0);
      var $15=HEAP32[(($pending_buf)>>2)];
      var $tobool=(($15)|0)!=0;
      if ($tobool) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $16=$strm_addr;
      var $zfree=(($16+36)|0);
      var $17=HEAP32[(($zfree)>>2)];
      var $18=$strm_addr;
      var $opaque=(($18+40)|0);
      var $19=HEAP32[(($opaque)>>2)];
      var $20=$strm_addr;
      var $state20=(($20+28)|0);
      var $21=HEAP32[(($state20)>>2)];
      var $pending_buf21=(($21+8)|0);
      var $22=HEAP32[(($pending_buf21)>>2)];
      FUNCTION_TABLE[$17]($19, $22);
      __label__ = 14; break;
    case 14: 
      var $23=$strm_addr;
      var $state23=(($23+28)|0);
      var $24=HEAP32[(($state23)>>2)];
      var $head=(($24+68)|0);
      var $25=HEAP32[(($head)>>2)];
      var $tobool24=(($25)|0)!=0;
      if ($tobool24) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $26=$strm_addr;
      var $zfree26=(($26+36)|0);
      var $27=HEAP32[(($zfree26)>>2)];
      var $28=$strm_addr;
      var $opaque27=(($28+40)|0);
      var $29=HEAP32[(($opaque27)>>2)];
      var $30=$strm_addr;
      var $state28=(($30+28)|0);
      var $31=HEAP32[(($state28)>>2)];
      var $head29=(($31+68)|0);
      var $32=HEAP32[(($head29)>>2)];
      var $33=$32;
      FUNCTION_TABLE[$27]($29, $33);
      __label__ = 16; break;
    case 16: 
      var $34=$strm_addr;
      var $state31=(($34+28)|0);
      var $35=HEAP32[(($state31)>>2)];
      var $prev=(($35+64)|0);
      var $36=HEAP32[(($prev)>>2)];
      var $tobool32=(($36)|0)!=0;
      if ($tobool32) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $37=$strm_addr;
      var $zfree34=(($37+36)|0);
      var $38=HEAP32[(($zfree34)>>2)];
      var $39=$strm_addr;
      var $opaque35=(($39+40)|0);
      var $40=HEAP32[(($opaque35)>>2)];
      var $41=$strm_addr;
      var $state36=(($41+28)|0);
      var $42=HEAP32[(($state36)>>2)];
      var $prev37=(($42+64)|0);
      var $43=HEAP32[(($prev37)>>2)];
      var $44=$43;
      FUNCTION_TABLE[$38]($40, $44);
      __label__ = 18; break;
    case 18: 
      var $45=$strm_addr;
      var $state39=(($45+28)|0);
      var $46=HEAP32[(($state39)>>2)];
      var $window=(($46+56)|0);
      var $47=HEAP32[(($window)>>2)];
      var $tobool40=(($47)|0)!=0;
      if ($tobool40) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $48=$strm_addr;
      var $zfree42=(($48+36)|0);
      var $49=HEAP32[(($zfree42)>>2)];
      var $50=$strm_addr;
      var $opaque43=(($50+40)|0);
      var $51=HEAP32[(($opaque43)>>2)];
      var $52=$strm_addr;
      var $state44=(($52+28)|0);
      var $53=HEAP32[(($state44)>>2)];
      var $window45=(($53+56)|0);
      var $54=HEAP32[(($window45)>>2)];
      FUNCTION_TABLE[$49]($51, $54);
      __label__ = 20; break;
    case 20: 
      var $55=$strm_addr;
      var $zfree47=(($55+36)|0);
      var $56=HEAP32[(($zfree47)>>2)];
      var $57=$strm_addr;
      var $opaque48=(($57+40)|0);
      var $58=HEAP32[(($opaque48)>>2)];
      var $59=$strm_addr;
      var $state49=(($59+28)|0);
      var $60=HEAP32[(($state49)>>2)];
      var $61=$60;
      FUNCTION_TABLE[$56]($58, $61);
      var $62=$strm_addr;
      var $state50=(($62+28)|0);
      HEAP32[(($state50)>>2)]=0;
      var $63=$status;
      var $cmp51=(($63)|0)==113;
      var $cond=$cmp51 ? -3 : 0;
      $retval=$cond;
      __label__ = 21; break;
    case 21: 
      var $64=$retval;
      ;
      return $64;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflateEnd["X"]=1;

function _deflateReset($strm) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $strm_addr;
      var $ret;
      $strm_addr=$strm;
      var $0=$strm_addr;
      var $call=_deflateResetKeep($0);
      $ret=$call;
      var $1=$ret;
      var $cmp=(($1)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$strm_addr;
      var $state=(($2+28)|0);
      var $3=HEAP32[(($state)>>2)];
      _lm_init($3);
      __label__ = 3; break;
    case 3: 
      var $4=$ret;
      ;
      return $4;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fill_window($s) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $n;
      var $m;
      var $p;
      var $more;
      var $wsize;
      var $str;
      var $curr;
      var $init;
      $s_addr=$s;
      var $0=$s_addr;
      var $w_size=(($0+44)|0);
      var $1=HEAP32[(($w_size)>>2)];
      $wsize=$1;
      __label__ = 2; break;
    case 2: 
      var $2=$s_addr;
      var $window_size=(($2+60)|0);
      var $3=HEAP32[(($window_size)>>2)];
      var $4=$s_addr;
      var $lookahead=(($4+116)|0);
      var $5=HEAP32[(($lookahead)>>2)];
      var $sub=(($3-$5)|0);
      var $6=$s_addr;
      var $strstart=(($6+108)|0);
      var $7=HEAP32[(($strstart)>>2)];
      var $sub1=(($sub-$7)|0);
      $more=$sub1;
      var $8=$s_addr;
      var $strstart2=(($8+108)|0);
      var $9=HEAPU32[(($strstart2)>>2)];
      var $10=$wsize;
      var $11=$s_addr;
      var $w_size3=(($11+44)|0);
      var $12=HEAP32[(($w_size3)>>2)];
      var $sub4=(($12-262)|0);
      var $add=(($10+$sub4)|0);
      var $cmp=(($9)>>>0) >= (($add)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 16; break; }
    case 3: 
      var $13=$s_addr;
      var $window=(($13+56)|0);
      var $14=HEAP32[(($window)>>2)];
      var $15=$s_addr;
      var $window5=(($15+56)|0);
      var $16=HEAP32[(($window5)>>2)];
      var $17=$wsize;
      var $add_ptr=(($16+$17)|0);
      var $18=$wsize;
      _zmemcpy($14, $add_ptr, $18);
      var $19=$wsize;
      var $20=$s_addr;
      var $match_start=(($20+112)|0);
      var $21=HEAP32[(($match_start)>>2)];
      var $sub6=(($21-$19)|0);
      HEAP32[(($match_start)>>2)]=$sub6;
      var $22=$wsize;
      var $23=$s_addr;
      var $strstart7=(($23+108)|0);
      var $24=HEAP32[(($strstart7)>>2)];
      var $sub8=(($24-$22)|0);
      HEAP32[(($strstart7)>>2)]=$sub8;
      var $25=$wsize;
      var $26=$s_addr;
      var $block_start=(($26+92)|0);
      var $27=HEAP32[(($block_start)>>2)];
      var $sub9=(($27-$25)|0);
      HEAP32[(($block_start)>>2)]=$sub9;
      var $28=$s_addr;
      var $hash_size=(($28+76)|0);
      var $29=HEAP32[(($hash_size)>>2)];
      $n=$29;
      var $30=$n;
      var $31=$s_addr;
      var $head=(($31+68)|0);
      var $32=HEAP32[(($head)>>2)];
      var $arrayidx=(($32+($30<<1))|0);
      $p=$arrayidx;
      __label__ = 4; break;
    case 4: 
      var $33=$p;
      var $incdec_ptr=(($33-2)|0);
      $p=$incdec_ptr;
      var $34=HEAPU16[(($incdec_ptr)>>1)];
      var $conv=(($34)&65535);
      $m=$conv;
      var $35=$m;
      var $36=$wsize;
      var $cmp11=(($35)>>>0) >= (($36)>>>0);
      if ($cmp11) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $37=$m;
      var $38=$wsize;
      var $sub13=(($37-$38)|0);
      var $cond = $sub13;__label__ = 7; break;
    case 6: 
      var $cond = 0;__label__ = 7; break;
    case 7: 
      var $cond;
      var $conv14=(($cond) & 65535);
      var $39=$p;
      HEAP16[(($39)>>1)]=$conv14;
      __label__ = 8; break;
    case 8: 
      var $40=$n;
      var $dec=(($40-1)|0);
      $n=$dec;
      var $tobool=(($dec)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 9: 
      var $41=$wsize;
      $n=$41;
      var $42=$n;
      var $43=$s_addr;
      var $prev=(($43+64)|0);
      var $44=HEAP32[(($prev)>>2)];
      var $arrayidx15=(($44+($42<<1))|0);
      $p=$arrayidx15;
      __label__ = 10; break;
    case 10: 
      var $45=$p;
      var $incdec_ptr17=(($45-2)|0);
      $p=$incdec_ptr17;
      var $46=HEAPU16[(($incdec_ptr17)>>1)];
      var $conv18=(($46)&65535);
      $m=$conv18;
      var $47=$m;
      var $48=$wsize;
      var $cmp19=(($47)>>>0) >= (($48)>>>0);
      if ($cmp19) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $49=$m;
      var $50=$wsize;
      var $sub22=(($49-$50)|0);
      var $cond25 = $sub22;__label__ = 13; break;
    case 12: 
      var $cond25 = 0;__label__ = 13; break;
    case 13: 
      var $cond25;
      var $conv26=(($cond25) & 65535);
      var $51=$p;
      HEAP16[(($51)>>1)]=$conv26;
      __label__ = 14; break;
    case 14: 
      var $52=$n;
      var $dec28=(($52-1)|0);
      $n=$dec28;
      var $tobool29=(($dec28)|0)!=0;
      if ($tobool29) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 15: 
      var $53=$wsize;
      var $54=$more;
      var $add31=(($54+$53)|0);
      $more=$add31;
      __label__ = 16; break;
    case 16: 
      var $55=$s_addr;
      var $strm=(($55)|0);
      var $56=HEAP32[(($strm)>>2)];
      var $avail_in=(($56+4)|0);
      var $57=HEAP32[(($avail_in)>>2)];
      var $cmp32=(($57)|0)==0;
      if ($cmp32) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 29; break;
    case 18: 
      var $58=$s_addr;
      var $strm36=(($58)|0);
      var $59=HEAP32[(($strm36)>>2)];
      var $60=$s_addr;
      var $window37=(($60+56)|0);
      var $61=HEAP32[(($window37)>>2)];
      var $62=$s_addr;
      var $strstart38=(($62+108)|0);
      var $63=HEAP32[(($strstart38)>>2)];
      var $add_ptr39=(($61+$63)|0);
      var $64=$s_addr;
      var $lookahead40=(($64+116)|0);
      var $65=HEAP32[(($lookahead40)>>2)];
      var $add_ptr41=(($add_ptr39+$65)|0);
      var $66=$more;
      var $call=_read_buf($59, $add_ptr41, $66);
      $n=$call;
      var $67=$n;
      var $68=$s_addr;
      var $lookahead42=(($68+116)|0);
      var $69=HEAP32[(($lookahead42)>>2)];
      var $add43=(($69+$67)|0);
      HEAP32[(($lookahead42)>>2)]=$add43;
      var $70=$s_addr;
      var $lookahead44=(($70+116)|0);
      var $71=HEAP32[(($lookahead44)>>2)];
      var $72=$s_addr;
      var $insert=(($72+5812)|0);
      var $73=HEAP32[(($insert)>>2)];
      var $add45=(($71+$73)|0);
      var $cmp46=(($add45)>>>0) >= 3;
      if ($cmp46) { __label__ = 19; break; } else { __label__ = 25; break; }
    case 19: 
      var $74=$s_addr;
      var $strstart49=(($74+108)|0);
      var $75=HEAP32[(($strstart49)>>2)];
      var $76=$s_addr;
      var $insert50=(($76+5812)|0);
      var $77=HEAP32[(($insert50)>>2)];
      var $sub51=(($75-$77)|0);
      $str=$sub51;
      var $78=$str;
      var $79=$s_addr;
      var $window52=(($79+56)|0);
      var $80=HEAP32[(($window52)>>2)];
      var $arrayidx53=(($80+$78)|0);
      var $81=HEAPU8[($arrayidx53)];
      var $conv54=(($81)&255);
      var $82=$s_addr;
      var $ins_h=(($82+72)|0);
      HEAP32[(($ins_h)>>2)]=$conv54;
      var $83=$s_addr;
      var $ins_h55=(($83+72)|0);
      var $84=HEAP32[(($ins_h55)>>2)];
      var $85=$s_addr;
      var $hash_shift=(($85+88)|0);
      var $86=HEAP32[(($hash_shift)>>2)];
      var $shl=$84 << $86;
      var $87=$str;
      var $add56=(($87+1)|0);
      var $88=$s_addr;
      var $window57=(($88+56)|0);
      var $89=HEAP32[(($window57)>>2)];
      var $arrayidx58=(($89+$add56)|0);
      var $90=HEAPU8[($arrayidx58)];
      var $conv59=(($90)&255);
      var $xor=$shl ^ $conv59;
      var $91=$s_addr;
      var $hash_mask=(($91+84)|0);
      var $92=HEAP32[(($hash_mask)>>2)];
      var $and=$xor & $92;
      var $93=$s_addr;
      var $ins_h60=(($93+72)|0);
      HEAP32[(($ins_h60)>>2)]=$and;
      __label__ = 20; break;
    case 20: 
      var $94=$s_addr;
      var $insert61=(($94+5812)|0);
      var $95=HEAP32[(($insert61)>>2)];
      var $tobool62=(($95)|0)!=0;
      if ($tobool62) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $96=$s_addr;
      var $ins_h63=(($96+72)|0);
      var $97=HEAP32[(($ins_h63)>>2)];
      var $98=$s_addr;
      var $hash_shift64=(($98+88)|0);
      var $99=HEAP32[(($hash_shift64)>>2)];
      var $shl65=$97 << $99;
      var $100=$str;
      var $add66=(($100+3)|0);
      var $sub67=(($add66-1)|0);
      var $101=$s_addr;
      var $window68=(($101+56)|0);
      var $102=HEAP32[(($window68)>>2)];
      var $arrayidx69=(($102+$sub67)|0);
      var $103=HEAPU8[($arrayidx69)];
      var $conv70=(($103)&255);
      var $xor71=$shl65 ^ $conv70;
      var $104=$s_addr;
      var $hash_mask72=(($104+84)|0);
      var $105=HEAP32[(($hash_mask72)>>2)];
      var $and73=$xor71 & $105;
      var $106=$s_addr;
      var $ins_h74=(($106+72)|0);
      HEAP32[(($ins_h74)>>2)]=$and73;
      var $107=$s_addr;
      var $ins_h75=(($107+72)|0);
      var $108=HEAP32[(($ins_h75)>>2)];
      var $109=$s_addr;
      var $head76=(($109+68)|0);
      var $110=HEAP32[(($head76)>>2)];
      var $arrayidx77=(($110+($108<<1))|0);
      var $111=HEAP16[(($arrayidx77)>>1)];
      var $112=$str;
      var $113=$s_addr;
      var $w_mask=(($113+52)|0);
      var $114=HEAP32[(($w_mask)>>2)];
      var $and78=$112 & $114;
      var $115=$s_addr;
      var $prev79=(($115+64)|0);
      var $116=HEAP32[(($prev79)>>2)];
      var $arrayidx80=(($116+($and78<<1))|0);
      HEAP16[(($arrayidx80)>>1)]=$111;
      var $117=$str;
      var $conv81=(($117) & 65535);
      var $118=$s_addr;
      var $ins_h82=(($118+72)|0);
      var $119=HEAP32[(($ins_h82)>>2)];
      var $120=$s_addr;
      var $head83=(($120+68)|0);
      var $121=HEAP32[(($head83)>>2)];
      var $arrayidx84=(($121+($119<<1))|0);
      HEAP16[(($arrayidx84)>>1)]=$conv81;
      var $122=$str;
      var $inc=(($122+1)|0);
      $str=$inc;
      var $123=$s_addr;
      var $insert85=(($123+5812)|0);
      var $124=HEAP32[(($insert85)>>2)];
      var $dec86=(($124-1)|0);
      HEAP32[(($insert85)>>2)]=$dec86;
      var $125=$s_addr;
      var $lookahead87=(($125+116)|0);
      var $126=HEAP32[(($lookahead87)>>2)];
      var $127=$s_addr;
      var $insert88=(($127+5812)|0);
      var $128=HEAP32[(($insert88)>>2)];
      var $add89=(($126+$128)|0);
      var $cmp90=(($add89)>>>0) < 3;
      if ($cmp90) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 24; break;
    case 23: 
      __label__ = 20; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $129=$s_addr;
      var $lookahead96=(($129+116)|0);
      var $130=HEAPU32[(($lookahead96)>>2)];
      var $cmp97=(($130)>>>0) < 262;
      if ($cmp97) { __label__ = 27; break; } else { var $134 = 0;__label__ = 28; break; }
    case 27: 
      var $131=$s_addr;
      var $strm99=(($131)|0);
      var $132=HEAP32[(($strm99)>>2)];
      var $avail_in100=(($132+4)|0);
      var $133=HEAP32[(($avail_in100)>>2)];
      var $cmp101=(($133)|0)!=0;
      var $134 = $cmp101;__label__ = 28; break;
    case 28: 
      var $134;
      if ($134) { __label__ = 2; break; } else { __label__ = 29; break; }
    case 29: 
      var $135=$s_addr;
      var $high_water=(($135+5824)|0);
      var $136=HEAPU32[(($high_water)>>2)];
      var $137=$s_addr;
      var $window_size104=(($137+60)|0);
      var $138=HEAPU32[(($window_size104)>>2)];
      var $cmp105=(($136)>>>0) < (($138)>>>0);
      if ($cmp105) { __label__ = 30; break; } else { __label__ = 40; break; }
    case 30: 
      var $139=$s_addr;
      var $strstart108=(($139+108)|0);
      var $140=HEAP32[(($strstart108)>>2)];
      var $141=$s_addr;
      var $lookahead109=(($141+116)|0);
      var $142=HEAP32[(($lookahead109)>>2)];
      var $add110=(($140+$142)|0);
      $curr=$add110;
      var $143=$s_addr;
      var $high_water111=(($143+5824)|0);
      var $144=HEAPU32[(($high_water111)>>2)];
      var $145=$curr;
      var $cmp112=(($144)>>>0) < (($145)>>>0);
      if ($cmp112) { __label__ = 31; break; } else { __label__ = 34; break; }
    case 31: 
      var $146=$s_addr;
      var $window_size115=(($146+60)|0);
      var $147=HEAP32[(($window_size115)>>2)];
      var $148=$curr;
      var $sub116=(($147-$148)|0);
      $init=$sub116;
      var $149=$init;
      var $cmp117=(($149)>>>0) > 258;
      if ($cmp117) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $init=258;
      __label__ = 33; break;
    case 33: 
      var $150=$s_addr;
      var $window121=(($150+56)|0);
      var $151=HEAP32[(($window121)>>2)];
      var $152=$curr;
      var $add_ptr122=(($151+$152)|0);
      var $153=$init;
      _zmemzero($add_ptr122, $153);
      var $154=$curr;
      var $155=$init;
      var $add123=(($154+$155)|0);
      var $156=$s_addr;
      var $high_water124=(($156+5824)|0);
      HEAP32[(($high_water124)>>2)]=$add123;
      __label__ = 39; break;
    case 34: 
      var $157=$s_addr;
      var $high_water125=(($157+5824)|0);
      var $158=HEAPU32[(($high_water125)>>2)];
      var $159=$curr;
      var $add126=(($159+258)|0);
      var $cmp127=(($158)>>>0) < (($add126)>>>0);
      if ($cmp127) { __label__ = 35; break; } else { __label__ = 38; break; }
    case 35: 
      var $160=$curr;
      var $add130=(($160+258)|0);
      var $161=$s_addr;
      var $high_water131=(($161+5824)|0);
      var $162=HEAP32[(($high_water131)>>2)];
      var $sub132=(($add130-$162)|0);
      $init=$sub132;
      var $163=$init;
      var $164=$s_addr;
      var $window_size133=(($164+60)|0);
      var $165=HEAP32[(($window_size133)>>2)];
      var $166=$s_addr;
      var $high_water134=(($166+5824)|0);
      var $167=HEAP32[(($high_water134)>>2)];
      var $sub135=(($165-$167)|0);
      var $cmp136=(($163)>>>0) > (($sub135)>>>0);
      if ($cmp136) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $168=$s_addr;
      var $window_size139=(($168+60)|0);
      var $169=HEAP32[(($window_size139)>>2)];
      var $170=$s_addr;
      var $high_water140=(($170+5824)|0);
      var $171=HEAP32[(($high_water140)>>2)];
      var $sub141=(($169-$171)|0);
      $init=$sub141;
      __label__ = 37; break;
    case 37: 
      var $172=$s_addr;
      var $window143=(($172+56)|0);
      var $173=HEAP32[(($window143)>>2)];
      var $174=$s_addr;
      var $high_water144=(($174+5824)|0);
      var $175=HEAP32[(($high_water144)>>2)];
      var $add_ptr145=(($173+$175)|0);
      var $176=$init;
      _zmemzero($add_ptr145, $176);
      var $177=$init;
      var $178=$s_addr;
      var $high_water146=(($178+5824)|0);
      var $179=HEAP32[(($high_water146)>>2)];
      var $add147=(($179+$177)|0);
      HEAP32[(($high_water146)>>2)]=$add147;
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fill_window["X"]=1;

function _deflateResetKeep($strm) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $s;
      $strm_addr=$strm;
      var $0=$strm_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$strm_addr;
      var $state=(($1+28)|0);
      var $2=HEAP32[(($state)>>2)];
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$strm_addr;
      var $zalloc=(($3+32)|0);
      var $4=HEAP32[(($zalloc)>>2)];
      var $cmp3=(($4)|0)==0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $5=$strm_addr;
      var $zfree=(($5+36)|0);
      var $6=HEAP32[(($zfree)>>2)];
      var $cmp5=(($6)|0)==0;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=-2;
      __label__ = 12; break;
    case 6: 
      var $7=$strm_addr;
      var $total_out=(($7+20)|0);
      HEAP32[(($total_out)>>2)]=0;
      var $8=$strm_addr;
      var $total_in=(($8+8)|0);
      HEAP32[(($total_in)>>2)]=0;
      var $9=$strm_addr;
      var $msg=(($9+24)|0);
      HEAP32[(($msg)>>2)]=0;
      var $10=$strm_addr;
      var $data_type=(($10+44)|0);
      HEAP32[(($data_type)>>2)]=2;
      var $11=$strm_addr;
      var $state6=(($11+28)|0);
      var $12=HEAP32[(($state6)>>2)];
      $s=$12;
      var $13=$s;
      var $pending=(($13+20)|0);
      HEAP32[(($pending)>>2)]=0;
      var $14=$s;
      var $pending_buf=(($14+8)|0);
      var $15=HEAP32[(($pending_buf)>>2)];
      var $16=$s;
      var $pending_out=(($16+16)|0);
      HEAP32[(($pending_out)>>2)]=$15;
      var $17=$s;
      var $wrap=(($17+24)|0);
      var $18=HEAP32[(($wrap)>>2)];
      var $cmp7=(($18)|0) < 0;
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $19=$s;
      var $wrap9=(($19+24)|0);
      var $20=HEAP32[(($wrap9)>>2)];
      var $sub=(((-$20))|0);
      var $21=$s;
      var $wrap10=(($21+24)|0);
      HEAP32[(($wrap10)>>2)]=$sub;
      __label__ = 8; break;
    case 8: 
      var $22=$s;
      var $wrap12=(($22+24)|0);
      var $23=HEAP32[(($wrap12)>>2)];
      var $tobool=(($23)|0)!=0;
      var $cond=$tobool ? 42 : 113;
      var $24=$s;
      var $status=(($24+4)|0);
      HEAP32[(($status)>>2)]=$cond;
      var $25=$s;
      var $wrap13=(($25+24)|0);
      var $26=HEAP32[(($wrap13)>>2)];
      var $cmp14=(($26)|0)==2;
      if ($cmp14) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $call=_crc32(0, 0, 0);
      var $cond16 = $call;__label__ = 11; break;
    case 10: 
      var $call15=_adler32(0, 0, 0);
      var $cond16 = $call15;__label__ = 11; break;
    case 11: 
      var $cond16;
      var $27=$strm_addr;
      var $adler=(($27+48)|0);
      HEAP32[(($adler)>>2)]=$cond16;
      var $28=$s;
      var $last_flush=(($28+40)|0);
      HEAP32[(($last_flush)>>2)]=0;
      var $29=$s;
      __tr_init($29);
      $retval=0;
      __label__ = 12; break;
    case 12: 
      var $30=$retval;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflateResetKeep["X"]=1;

function _lm_init($s) {
  ;
  var __label__;

  var $s_addr;
  $s_addr=$s;
  var $0=$s_addr;
  var $w_size=(($0+44)|0);
  var $1=HEAP32[(($w_size)>>2)];
  var $mul=((($1<<1))|0);
  var $2=$s_addr;
  var $window_size=(($2+60)|0);
  HEAP32[(($window_size)>>2)]=$mul;
  var $3=$s_addr;
  var $hash_size=(($3+76)|0);
  var $4=HEAP32[(($hash_size)>>2)];
  var $sub=(($4-1)|0);
  var $5=$s_addr;
  var $head=(($5+68)|0);
  var $6=HEAP32[(($head)>>2)];
  var $arrayidx=(($6+($sub<<1))|0);
  HEAP16[(($arrayidx)>>1)]=0;
  var $7=$s_addr;
  var $head1=(($7+68)|0);
  var $8=HEAP32[(($head1)>>2)];
  var $9=$8;
  var $10=$s_addr;
  var $hash_size2=(($10+76)|0);
  var $11=HEAP32[(($hash_size2)>>2)];
  var $sub3=(($11-1)|0);
  var $mul4=((($sub3<<1))|0);
  _zmemzero($9, $mul4);
  var $12=$s_addr;
  var $level=(($12+132)|0);
  var $13=HEAP32[(($level)>>2)];
  var $arrayidx5=((_configuration_table+$13*12)|0);
  var $max_lazy=(($arrayidx5+2)|0);
  var $14=HEAPU16[(($max_lazy)>>1)];
  var $conv=(($14)&65535);
  var $15=$s_addr;
  var $max_lazy_match=(($15+128)|0);
  HEAP32[(($max_lazy_match)>>2)]=$conv;
  var $16=$s_addr;
  var $level6=(($16+132)|0);
  var $17=HEAP32[(($level6)>>2)];
  var $arrayidx7=((_configuration_table+$17*12)|0);
  var $good_length=(($arrayidx7)|0);
  var $18=HEAPU16[(($good_length)>>1)];
  var $conv8=(($18)&65535);
  var $19=$s_addr;
  var $good_match=(($19+140)|0);
  HEAP32[(($good_match)>>2)]=$conv8;
  var $20=$s_addr;
  var $level9=(($20+132)|0);
  var $21=HEAP32[(($level9)>>2)];
  var $arrayidx10=((_configuration_table+$21*12)|0);
  var $nice_length=(($arrayidx10+4)|0);
  var $22=HEAPU16[(($nice_length)>>1)];
  var $conv11=(($22)&65535);
  var $23=$s_addr;
  var $nice_match=(($23+144)|0);
  HEAP32[(($nice_match)>>2)]=$conv11;
  var $24=$s_addr;
  var $level12=(($24+132)|0);
  var $25=HEAP32[(($level12)>>2)];
  var $arrayidx13=((_configuration_table+$25*12)|0);
  var $max_chain=(($arrayidx13+6)|0);
  var $26=HEAPU16[(($max_chain)>>1)];
  var $conv14=(($26)&65535);
  var $27=$s_addr;
  var $max_chain_length=(($27+124)|0);
  HEAP32[(($max_chain_length)>>2)]=$conv14;
  var $28=$s_addr;
  var $strstart=(($28+108)|0);
  HEAP32[(($strstart)>>2)]=0;
  var $29=$s_addr;
  var $block_start=(($29+92)|0);
  HEAP32[(($block_start)>>2)]=0;
  var $30=$s_addr;
  var $lookahead=(($30+116)|0);
  HEAP32[(($lookahead)>>2)]=0;
  var $31=$s_addr;
  var $insert=(($31+5812)|0);
  HEAP32[(($insert)>>2)]=0;
  var $32=$s_addr;
  var $prev_length=(($32+120)|0);
  HEAP32[(($prev_length)>>2)]=2;
  var $33=$s_addr;
  var $match_length=(($33+96)|0);
  HEAP32[(($match_length)>>2)]=2;
  var $34=$s_addr;
  var $match_available=(($34+104)|0);
  HEAP32[(($match_available)>>2)]=0;
  var $35=$s_addr;
  var $ins_h=(($35+72)|0);
  HEAP32[(($ins_h)>>2)]=0;
  ;
  return;
}
_lm_init["X"]=1;

function _deflate($strm, $flush) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $flush_addr;
      var $old_flush;
      var $s;
      var $header;
      var $level_flags;
      var $beg;
      var $beg329;
      var $val;
      var $beg408;
      var $val410;
      var $bstate;
      $strm_addr=$strm;
      $flush_addr=$flush;
      var $0=$strm_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$strm_addr;
      var $state=(($1+28)|0);
      var $2=HEAP32[(($state)>>2)];
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$flush_addr;
      var $cmp3=(($3)|0) > 5;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $4=$flush_addr;
      var $cmp5=(($4)|0) < 0;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=-2;
      __label__ = 173; break;
    case 6: 
      var $5=$strm_addr;
      var $state6=(($5+28)|0);
      var $6=HEAP32[(($state6)>>2)];
      $s=$6;
      var $7=$strm_addr;
      var $next_out=(($7+12)|0);
      var $8=HEAP32[(($next_out)>>2)];
      var $cmp7=(($8)|0)==0;
      if ($cmp7) { __label__ = 11; break; } else { __label__ = 7; break; }
    case 7: 
      var $9=$strm_addr;
      var $next_in=(($9)|0);
      var $10=HEAP32[(($next_in)>>2)];
      var $cmp9=(($10)|0)==0;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$strm_addr;
      var $avail_in=(($11+4)|0);
      var $12=HEAP32[(($avail_in)>>2)];
      var $cmp10=(($12)|0)!=0;
      if ($cmp10) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $13=$s;
      var $status=(($13+4)|0);
      var $14=HEAP32[(($status)>>2)];
      var $cmp12=(($14)|0)==666;
      if ($cmp12) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $15=$flush_addr;
      var $cmp14=(($15)|0)!=4;
      if ($cmp14) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $16=HEAP32[((((_z_errmsg+16)|0))>>2)];
      var $17=$strm_addr;
      var $msg=(($17+24)|0);
      HEAP32[(($msg)>>2)]=$16;
      $retval=-2;
      __label__ = 173; break;
    case 12: 
      var $18=$strm_addr;
      var $avail_out=(($18+16)|0);
      var $19=HEAP32[(($avail_out)>>2)];
      var $cmp17=(($19)|0)==0;
      if ($cmp17) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $20=HEAP32[((((_z_errmsg+28)|0))>>2)];
      var $21=$strm_addr;
      var $msg19=(($21+24)|0);
      HEAP32[(($msg19)>>2)]=$20;
      $retval=-5;
      __label__ = 173; break;
    case 14: 
      var $22=$strm_addr;
      var $23=$s;
      var $strm21=(($23)|0);
      HEAP32[(($strm21)>>2)]=$22;
      var $24=$s;
      var $last_flush=(($24+40)|0);
      var $25=HEAP32[(($last_flush)>>2)];
      $old_flush=$25;
      var $26=$flush_addr;
      var $27=$s;
      var $last_flush22=(($27+40)|0);
      HEAP32[(($last_flush22)>>2)]=$26;
      var $28=$s;
      var $status23=(($28+4)|0);
      var $29=HEAP32[(($status23)>>2)];
      var $cmp24=(($29)|0)==42;
      if ($cmp24) { __label__ = 15; break; } else { __label__ = 50; break; }
    case 15: 
      var $30=$s;
      var $wrap=(($30+24)|0);
      var $31=HEAP32[(($wrap)>>2)];
      var $cmp26=(($31)|0)==2;
      if ($cmp26) { __label__ = 16; break; } else { __label__ = 34; break; }
    case 16: 
      var $call=_crc32(0, 0, 0);
      var $32=$strm_addr;
      var $adler=(($32+48)|0);
      HEAP32[(($adler)>>2)]=$call;
      var $33=$s;
      var $pending=(($33+20)|0);
      var $34=HEAP32[(($pending)>>2)];
      var $inc=(($34+1)|0);
      HEAP32[(($pending)>>2)]=$inc;
      var $35=$s;
      var $pending_buf=(($35+8)|0);
      var $36=HEAP32[(($pending_buf)>>2)];
      var $arrayidx=(($36+$34)|0);
      HEAP8[($arrayidx)]=31;
      var $37=$s;
      var $pending28=(($37+20)|0);
      var $38=HEAP32[(($pending28)>>2)];
      var $inc29=(($38+1)|0);
      HEAP32[(($pending28)>>2)]=$inc29;
      var $39=$s;
      var $pending_buf30=(($39+8)|0);
      var $40=HEAP32[(($pending_buf30)>>2)];
      var $arrayidx31=(($40+$38)|0);
      HEAP8[($arrayidx31)]=-117;
      var $41=$s;
      var $pending32=(($41+20)|0);
      var $42=HEAP32[(($pending32)>>2)];
      var $inc33=(($42+1)|0);
      HEAP32[(($pending32)>>2)]=$inc33;
      var $43=$s;
      var $pending_buf34=(($43+8)|0);
      var $44=HEAP32[(($pending_buf34)>>2)];
      var $arrayidx35=(($44+$42)|0);
      HEAP8[($arrayidx35)]=8;
      var $45=$s;
      var $gzhead=(($45+28)|0);
      var $46=HEAP32[(($gzhead)>>2)];
      var $cmp36=(($46)|0)==0;
      if ($cmp36) { __label__ = 17; break; } else { __label__ = 23; break; }
    case 17: 
      var $47=$s;
      var $pending38=(($47+20)|0);
      var $48=HEAP32[(($pending38)>>2)];
      var $inc39=(($48+1)|0);
      HEAP32[(($pending38)>>2)]=$inc39;
      var $49=$s;
      var $pending_buf40=(($49+8)|0);
      var $50=HEAP32[(($pending_buf40)>>2)];
      var $arrayidx41=(($50+$48)|0);
      HEAP8[($arrayidx41)]=0;
      var $51=$s;
      var $pending42=(($51+20)|0);
      var $52=HEAP32[(($pending42)>>2)];
      var $inc43=(($52+1)|0);
      HEAP32[(($pending42)>>2)]=$inc43;
      var $53=$s;
      var $pending_buf44=(($53+8)|0);
      var $54=HEAP32[(($pending_buf44)>>2)];
      var $arrayidx45=(($54+$52)|0);
      HEAP8[($arrayidx45)]=0;
      var $55=$s;
      var $pending46=(($55+20)|0);
      var $56=HEAP32[(($pending46)>>2)];
      var $inc47=(($56+1)|0);
      HEAP32[(($pending46)>>2)]=$inc47;
      var $57=$s;
      var $pending_buf48=(($57+8)|0);
      var $58=HEAP32[(($pending_buf48)>>2)];
      var $arrayidx49=(($58+$56)|0);
      HEAP8[($arrayidx49)]=0;
      var $59=$s;
      var $pending50=(($59+20)|0);
      var $60=HEAP32[(($pending50)>>2)];
      var $inc51=(($60+1)|0);
      HEAP32[(($pending50)>>2)]=$inc51;
      var $61=$s;
      var $pending_buf52=(($61+8)|0);
      var $62=HEAP32[(($pending_buf52)>>2)];
      var $arrayidx53=(($62+$60)|0);
      HEAP8[($arrayidx53)]=0;
      var $63=$s;
      var $pending54=(($63+20)|0);
      var $64=HEAP32[(($pending54)>>2)];
      var $inc55=(($64+1)|0);
      HEAP32[(($pending54)>>2)]=$inc55;
      var $65=$s;
      var $pending_buf56=(($65+8)|0);
      var $66=HEAP32[(($pending_buf56)>>2)];
      var $arrayidx57=(($66+$64)|0);
      HEAP8[($arrayidx57)]=0;
      var $67=$s;
      var $level=(($67+132)|0);
      var $68=HEAP32[(($level)>>2)];
      var $cmp58=(($68)|0)==9;
      if ($cmp58) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $cond62 = 2;__label__ = 22; break;
    case 19: 
      var $69=$s;
      var $strategy=(($69+136)|0);
      var $70=HEAP32[(($strategy)>>2)];
      var $cmp59=(($70)|0) >= 2;
      if ($cmp59) { var $73 = 1;__label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $71=$s;
      var $level60=(($71+132)|0);
      var $72=HEAP32[(($level60)>>2)];
      var $cmp61=(($72)|0) < 2;
      var $73 = $cmp61;__label__ = 21; break;
    case 21: 
      var $73;
      var $cond=$73 ? 4 : 0;
      var $cond62 = $cond;__label__ = 22; break;
    case 22: 
      var $cond62;
      var $conv=(($cond62) & 255);
      var $74=$s;
      var $pending63=(($74+20)|0);
      var $75=HEAP32[(($pending63)>>2)];
      var $inc64=(($75+1)|0);
      HEAP32[(($pending63)>>2)]=$inc64;
      var $76=$s;
      var $pending_buf65=(($76+8)|0);
      var $77=HEAP32[(($pending_buf65)>>2)];
      var $arrayidx66=(($77+$75)|0);
      HEAP8[($arrayidx66)]=$conv;
      var $78=$s;
      var $pending67=(($78+20)|0);
      var $79=HEAP32[(($pending67)>>2)];
      var $inc68=(($79+1)|0);
      HEAP32[(($pending67)>>2)]=$inc68;
      var $80=$s;
      var $pending_buf69=(($80+8)|0);
      var $81=HEAP32[(($pending_buf69)>>2)];
      var $arrayidx70=(($81+$79)|0);
      HEAP8[($arrayidx70)]=3;
      var $82=$s;
      var $status71=(($82+4)|0);
      HEAP32[(($status71)>>2)]=113;
      __label__ = 33; break;
    case 23: 
      var $83=$s;
      var $gzhead72=(($83+28)|0);
      var $84=HEAP32[(($gzhead72)>>2)];
      var $text=(($84)|0);
      var $85=HEAP32[(($text)>>2)];
      var $tobool=(($85)|0)!=0;
      var $cond73=$tobool ? 1 : 0;
      var $86=$s;
      var $gzhead74=(($86+28)|0);
      var $87=HEAP32[(($gzhead74)>>2)];
      var $hcrc=(($87+44)|0);
      var $88=HEAP32[(($hcrc)>>2)];
      var $tobool75=(($88)|0)!=0;
      var $cond76=$tobool75 ? 2 : 0;
      var $add=(($cond73+$cond76)|0);
      var $89=$s;
      var $gzhead77=(($89+28)|0);
      var $90=HEAP32[(($gzhead77)>>2)];
      var $extra=(($90+16)|0);
      var $91=HEAP32[(($extra)>>2)];
      var $cmp78=(($91)|0)==0;
      var $cond80=$cmp78 ? 0 : 4;
      var $add81=(($add+$cond80)|0);
      var $92=$s;
      var $gzhead82=(($92+28)|0);
      var $93=HEAP32[(($gzhead82)>>2)];
      var $name=(($93+28)|0);
      var $94=HEAP32[(($name)>>2)];
      var $cmp83=(($94)|0)==0;
      var $cond85=$cmp83 ? 0 : 8;
      var $add86=(($add81+$cond85)|0);
      var $95=$s;
      var $gzhead87=(($95+28)|0);
      var $96=HEAP32[(($gzhead87)>>2)];
      var $comment=(($96+36)|0);
      var $97=HEAP32[(($comment)>>2)];
      var $cmp88=(($97)|0)==0;
      var $cond90=$cmp88 ? 0 : 16;
      var $add91=(($add86+$cond90)|0);
      var $conv92=(($add91) & 255);
      var $98=$s;
      var $pending93=(($98+20)|0);
      var $99=HEAP32[(($pending93)>>2)];
      var $inc94=(($99+1)|0);
      HEAP32[(($pending93)>>2)]=$inc94;
      var $100=$s;
      var $pending_buf95=(($100+8)|0);
      var $101=HEAP32[(($pending_buf95)>>2)];
      var $arrayidx96=(($101+$99)|0);
      HEAP8[($arrayidx96)]=$conv92;
      var $102=$s;
      var $gzhead97=(($102+28)|0);
      var $103=HEAP32[(($gzhead97)>>2)];
      var $time=(($103+4)|0);
      var $104=HEAP32[(($time)>>2)];
      var $and=$104 & 255;
      var $conv98=(($and) & 255);
      var $105=$s;
      var $pending99=(($105+20)|0);
      var $106=HEAP32[(($pending99)>>2)];
      var $inc100=(($106+1)|0);
      HEAP32[(($pending99)>>2)]=$inc100;
      var $107=$s;
      var $pending_buf101=(($107+8)|0);
      var $108=HEAP32[(($pending_buf101)>>2)];
      var $arrayidx102=(($108+$106)|0);
      HEAP8[($arrayidx102)]=$conv98;
      var $109=$s;
      var $gzhead103=(($109+28)|0);
      var $110=HEAP32[(($gzhead103)>>2)];
      var $time104=(($110+4)|0);
      var $111=HEAPU32[(($time104)>>2)];
      var $shr=$111 >>> 8;
      var $and105=$shr & 255;
      var $conv106=(($and105) & 255);
      var $112=$s;
      var $pending107=(($112+20)|0);
      var $113=HEAPU32[(($pending107)>>2)];
      var $inc108=(($113+1)|0);
      HEAP32[(($pending107)>>2)]=$inc108;
      var $114=$s;
      var $pending_buf109=(($114+8)|0);
      var $115=HEAP32[(($pending_buf109)>>2)];
      var $arrayidx110=(($115+$113)|0);
      HEAP8[($arrayidx110)]=$conv106;
      var $116=$s;
      var $gzhead111=(($116+28)|0);
      var $117=HEAP32[(($gzhead111)>>2)];
      var $time112=(($117+4)|0);
      var $118=HEAPU32[(($time112)>>2)];
      var $shr113=$118 >>> 16;
      var $and114=$shr113 & 255;
      var $conv115=(($and114) & 255);
      var $119=$s;
      var $pending116=(($119+20)|0);
      var $120=HEAPU32[(($pending116)>>2)];
      var $inc117=(($120+1)|0);
      HEAP32[(($pending116)>>2)]=$inc117;
      var $121=$s;
      var $pending_buf118=(($121+8)|0);
      var $122=HEAP32[(($pending_buf118)>>2)];
      var $arrayidx119=(($122+$120)|0);
      HEAP8[($arrayidx119)]=$conv115;
      var $123=$s;
      var $gzhead120=(($123+28)|0);
      var $124=HEAP32[(($gzhead120)>>2)];
      var $time121=(($124+4)|0);
      var $125=HEAPU32[(($time121)>>2)];
      var $shr122=$125 >>> 24;
      var $and123=$shr122 & 255;
      var $conv124=(($and123) & 255);
      var $126=$s;
      var $pending125=(($126+20)|0);
      var $127=HEAPU32[(($pending125)>>2)];
      var $inc126=(($127+1)|0);
      HEAP32[(($pending125)>>2)]=$inc126;
      var $128=$s;
      var $pending_buf127=(($128+8)|0);
      var $129=HEAP32[(($pending_buf127)>>2)];
      var $arrayidx128=(($129+$127)|0);
      HEAP8[($arrayidx128)]=$conv124;
      var $130=$s;
      var $level129=(($130+132)|0);
      var $131=HEAP32[(($level129)>>2)];
      var $cmp130=(($131)|0)==9;
      if ($cmp130) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $cond144 = 2;__label__ = 28; break;
    case 25: 
      var $132=$s;
      var $strategy134=(($132+136)|0);
      var $133=HEAP32[(($strategy134)>>2)];
      var $cmp135=(($133)|0) >= 2;
      if ($cmp135) { var $136 = 1;__label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      var $134=$s;
      var $level138=(($134+132)|0);
      var $135=HEAP32[(($level138)>>2)];
      var $cmp139=(($135)|0) < 2;
      var $136 = $cmp139;__label__ = 27; break;
    case 27: 
      var $136;
      var $cond142=$136 ? 4 : 0;
      var $cond144 = $cond142;__label__ = 28; break;
    case 28: 
      var $cond144;
      var $conv145=(($cond144) & 255);
      var $137=$s;
      var $pending146=(($137+20)|0);
      var $138=HEAP32[(($pending146)>>2)];
      var $inc147=(($138+1)|0);
      HEAP32[(($pending146)>>2)]=$inc147;
      var $139=$s;
      var $pending_buf148=(($139+8)|0);
      var $140=HEAP32[(($pending_buf148)>>2)];
      var $arrayidx149=(($140+$138)|0);
      HEAP8[($arrayidx149)]=$conv145;
      var $141=$s;
      var $gzhead150=(($141+28)|0);
      var $142=HEAP32[(($gzhead150)>>2)];
      var $os=(($142+12)|0);
      var $143=HEAP32[(($os)>>2)];
      var $and151=$143 & 255;
      var $conv152=(($and151) & 255);
      var $144=$s;
      var $pending153=(($144+20)|0);
      var $145=HEAP32[(($pending153)>>2)];
      var $inc154=(($145+1)|0);
      HEAP32[(($pending153)>>2)]=$inc154;
      var $146=$s;
      var $pending_buf155=(($146+8)|0);
      var $147=HEAP32[(($pending_buf155)>>2)];
      var $arrayidx156=(($147+$145)|0);
      HEAP8[($arrayidx156)]=$conv152;
      var $148=$s;
      var $gzhead157=(($148+28)|0);
      var $149=HEAP32[(($gzhead157)>>2)];
      var $extra158=(($149+16)|0);
      var $150=HEAP32[(($extra158)>>2)];
      var $cmp159=(($150)|0)!=0;
      if ($cmp159) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $151=$s;
      var $gzhead162=(($151+28)|0);
      var $152=HEAP32[(($gzhead162)>>2)];
      var $extra_len=(($152+20)|0);
      var $153=HEAP32[(($extra_len)>>2)];
      var $and163=$153 & 255;
      var $conv164=(($and163) & 255);
      var $154=$s;
      var $pending165=(($154+20)|0);
      var $155=HEAP32[(($pending165)>>2)];
      var $inc166=(($155+1)|0);
      HEAP32[(($pending165)>>2)]=$inc166;
      var $156=$s;
      var $pending_buf167=(($156+8)|0);
      var $157=HEAP32[(($pending_buf167)>>2)];
      var $arrayidx168=(($157+$155)|0);
      HEAP8[($arrayidx168)]=$conv164;
      var $158=$s;
      var $gzhead169=(($158+28)|0);
      var $159=HEAP32[(($gzhead169)>>2)];
      var $extra_len170=(($159+20)|0);
      var $160=HEAPU32[(($extra_len170)>>2)];
      var $shr171=$160 >>> 8;
      var $and172=$shr171 & 255;
      var $conv173=(($and172) & 255);
      var $161=$s;
      var $pending174=(($161+20)|0);
      var $162=HEAPU32[(($pending174)>>2)];
      var $inc175=(($162+1)|0);
      HEAP32[(($pending174)>>2)]=$inc175;
      var $163=$s;
      var $pending_buf176=(($163+8)|0);
      var $164=HEAP32[(($pending_buf176)>>2)];
      var $arrayidx177=(($164+$162)|0);
      HEAP8[($arrayidx177)]=$conv173;
      __label__ = 30; break;
    case 30: 
      var $165=$s;
      var $gzhead179=(($165+28)|0);
      var $166=HEAP32[(($gzhead179)>>2)];
      var $hcrc180=(($166+44)|0);
      var $167=HEAP32[(($hcrc180)>>2)];
      var $tobool181=(($167)|0)!=0;
      if ($tobool181) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $168=$strm_addr;
      var $adler183=(($168+48)|0);
      var $169=HEAP32[(($adler183)>>2)];
      var $170=$s;
      var $pending_buf184=(($170+8)|0);
      var $171=HEAP32[(($pending_buf184)>>2)];
      var $172=$s;
      var $pending185=(($172+20)|0);
      var $173=HEAP32[(($pending185)>>2)];
      var $call186=_crc32($169, $171, $173);
      var $174=$strm_addr;
      var $adler187=(($174+48)|0);
      HEAP32[(($adler187)>>2)]=$call186;
      __label__ = 32; break;
    case 32: 
      var $175=$s;
      var $gzindex=(($175+32)|0);
      HEAP32[(($gzindex)>>2)]=0;
      var $176=$s;
      var $status189=(($176+4)|0);
      HEAP32[(($status189)>>2)]=69;
      __label__ = 33; break;
    case 33: 
      __label__ = 49; break;
    case 34: 
      var $177=$s;
      var $w_bits=(($177+48)|0);
      var $178=HEAP32[(($w_bits)>>2)];
      var $sub=(($178-8)|0);
      var $shl=$sub << 4;
      var $add192=(($shl+8)|0);
      var $shl193=$add192 << 8;
      $header=$shl193;
      var $179=$s;
      var $strategy194=(($179+136)|0);
      var $180=HEAP32[(($strategy194)>>2)];
      var $cmp195=(($180)|0) >= 2;
      if ($cmp195) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $181=$s;
      var $level198=(($181+132)|0);
      var $182=HEAP32[(($level198)>>2)];
      var $cmp199=(($182)|0) < 2;
      if ($cmp199) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      $level_flags=0;
      __label__ = 44; break;
    case 37: 
      var $183=$s;
      var $level203=(($183+132)|0);
      var $184=HEAP32[(($level203)>>2)];
      var $cmp204=(($184)|0) < 6;
      if ($cmp204) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      $level_flags=1;
      __label__ = 43; break;
    case 39: 
      var $185=$s;
      var $level208=(($185+132)|0);
      var $186=HEAP32[(($level208)>>2)];
      var $cmp209=(($186)|0)==6;
      if ($cmp209) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      $level_flags=2;
      __label__ = 42; break;
    case 41: 
      $level_flags=3;
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $187=$level_flags;
      var $shl216=$187 << 6;
      var $188=$header;
      var $or=$188 | $shl216;
      $header=$or;
      var $189=$s;
      var $strstart=(($189+108)|0);
      var $190=HEAP32[(($strstart)>>2)];
      var $cmp217=(($190)|0)!=0;
      if ($cmp217) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $191=$header;
      var $or220=$191 | 32;
      $header=$or220;
      __label__ = 46; break;
    case 46: 
      var $192=$header;
      var $rem=(($192)>>>0)%31;
      var $sub222=((31-$rem)|0);
      var $193=$header;
      var $add223=(($193+$sub222)|0);
      $header=$add223;
      var $194=$s;
      var $status224=(($194+4)|0);
      HEAP32[(($status224)>>2)]=113;
      var $195=$s;
      var $196=$header;
      _putShortMSB($195, $196);
      var $197=$s;
      var $strstart225=(($197+108)|0);
      var $198=HEAP32[(($strstart225)>>2)];
      var $cmp226=(($198)|0)!=0;
      if ($cmp226) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $199=$s;
      var $200=$strm_addr;
      var $adler229=(($200+48)|0);
      var $201=HEAPU32[(($adler229)>>2)];
      var $shr230=$201 >>> 16;
      _putShortMSB($199, $shr230);
      var $202=$s;
      var $203=$strm_addr;
      var $adler231=(($203+48)|0);
      var $204=HEAP32[(($adler231)>>2)];
      var $and232=$204 & 65535;
      _putShortMSB($202, $and232);
      __label__ = 48; break;
    case 48: 
      var $call234=_adler32(0, 0, 0);
      var $205=$strm_addr;
      var $adler235=(($205+48)|0);
      HEAP32[(($adler235)>>2)]=$call234;
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $206=$s;
      var $status238=(($206+4)|0);
      var $207=HEAP32[(($status238)>>2)];
      var $cmp239=(($207)|0)==69;
      if ($cmp239) { __label__ = 51; break; } else { __label__ = 70; break; }
    case 51: 
      var $208=$s;
      var $gzhead242=(($208+28)|0);
      var $209=HEAP32[(($gzhead242)>>2)];
      var $extra243=(($209+16)|0);
      var $210=HEAP32[(($extra243)>>2)];
      var $cmp244=(($210)|0)!=0;
      if ($cmp244) { __label__ = 52; break; } else { __label__ = 68; break; }
    case 52: 
      var $211=$s;
      var $pending247=(($211+20)|0);
      var $212=HEAP32[(($pending247)>>2)];
      $beg=$212;
      __label__ = 53; break;
    case 53: 
      var $213=$s;
      var $gzindex248=(($213+32)|0);
      var $214=HEAPU32[(($gzindex248)>>2)];
      var $215=$s;
      var $gzhead249=(($215+28)|0);
      var $216=HEAP32[(($gzhead249)>>2)];
      var $extra_len250=(($216+20)|0);
      var $217=HEAP32[(($extra_len250)>>2)];
      var $and251=$217 & 65535;
      var $cmp252=(($214)>>>0) < (($and251)>>>0);
      if ($cmp252) { __label__ = 54; break; } else { __label__ = 62; break; }
    case 54: 
      var $218=$s;
      var $pending254=(($218+20)|0);
      var $219=HEAP32[(($pending254)>>2)];
      var $220=$s;
      var $pending_buf_size=(($220+12)|0);
      var $221=HEAP32[(($pending_buf_size)>>2)];
      var $cmp255=(($219)|0)==(($221)|0);
      if ($cmp255) { __label__ = 55; break; } else { __label__ = 61; break; }
    case 55: 
      var $222=$s;
      var $gzhead258=(($222+28)|0);
      var $223=HEAP32[(($gzhead258)>>2)];
      var $hcrc259=(($223+44)|0);
      var $224=HEAP32[(($hcrc259)>>2)];
      var $tobool260=(($224)|0)!=0;
      if ($tobool260) { __label__ = 56; break; } else { __label__ = 58; break; }
    case 56: 
      var $225=$s;
      var $pending262=(($225+20)|0);
      var $226=HEAPU32[(($pending262)>>2)];
      var $227=$beg;
      var $cmp263=(($226)>>>0) > (($227)>>>0);
      if ($cmp263) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $228=$strm_addr;
      var $adler266=(($228+48)|0);
      var $229=HEAP32[(($adler266)>>2)];
      var $230=$s;
      var $pending_buf267=(($230+8)|0);
      var $231=HEAP32[(($pending_buf267)>>2)];
      var $232=$beg;
      var $add_ptr=(($231+$232)|0);
      var $233=$s;
      var $pending268=(($233+20)|0);
      var $234=HEAP32[(($pending268)>>2)];
      var $235=$beg;
      var $sub269=(($234-$235)|0);
      var $call270=_crc32($229, $add_ptr, $sub269);
      var $236=$strm_addr;
      var $adler271=(($236+48)|0);
      HEAP32[(($adler271)>>2)]=$call270;
      __label__ = 58; break;
    case 58: 
      var $237=$strm_addr;
      _flush_pending($237);
      var $238=$s;
      var $pending273=(($238+20)|0);
      var $239=HEAP32[(($pending273)>>2)];
      $beg=$239;
      var $240=$s;
      var $pending274=(($240+20)|0);
      var $241=HEAP32[(($pending274)>>2)];
      var $242=$s;
      var $pending_buf_size275=(($242+12)|0);
      var $243=HEAP32[(($pending_buf_size275)>>2)];
      var $cmp276=(($241)|0)==(($243)|0);
      if ($cmp276) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 62; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $244=$s;
      var $gzindex281=(($244+32)|0);
      var $245=HEAP32[(($gzindex281)>>2)];
      var $246=$s;
      var $gzhead282=(($246+28)|0);
      var $247=HEAP32[(($gzhead282)>>2)];
      var $extra283=(($247+16)|0);
      var $248=HEAP32[(($extra283)>>2)];
      var $arrayidx284=(($248+$245)|0);
      var $249=HEAP8[($arrayidx284)];
      var $250=$s;
      var $pending285=(($250+20)|0);
      var $251=HEAP32[(($pending285)>>2)];
      var $inc286=(($251+1)|0);
      HEAP32[(($pending285)>>2)]=$inc286;
      var $252=$s;
      var $pending_buf287=(($252+8)|0);
      var $253=HEAP32[(($pending_buf287)>>2)];
      var $arrayidx288=(($253+$251)|0);
      HEAP8[($arrayidx288)]=$249;
      var $254=$s;
      var $gzindex289=(($254+32)|0);
      var $255=HEAP32[(($gzindex289)>>2)];
      var $inc290=(($255+1)|0);
      HEAP32[(($gzindex289)>>2)]=$inc290;
      __label__ = 53; break;
    case 62: 
      var $256=$s;
      var $gzhead291=(($256+28)|0);
      var $257=HEAP32[(($gzhead291)>>2)];
      var $hcrc292=(($257+44)|0);
      var $258=HEAP32[(($hcrc292)>>2)];
      var $tobool293=(($258)|0)!=0;
      if ($tobool293) { __label__ = 63; break; } else { __label__ = 65; break; }
    case 63: 
      var $259=$s;
      var $pending295=(($259+20)|0);
      var $260=HEAPU32[(($pending295)>>2)];
      var $261=$beg;
      var $cmp296=(($260)>>>0) > (($261)>>>0);
      if ($cmp296) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $262=$strm_addr;
      var $adler299=(($262+48)|0);
      var $263=HEAP32[(($adler299)>>2)];
      var $264=$s;
      var $pending_buf300=(($264+8)|0);
      var $265=HEAP32[(($pending_buf300)>>2)];
      var $266=$beg;
      var $add_ptr301=(($265+$266)|0);
      var $267=$s;
      var $pending302=(($267+20)|0);
      var $268=HEAP32[(($pending302)>>2)];
      var $269=$beg;
      var $sub303=(($268-$269)|0);
      var $call304=_crc32($263, $add_ptr301, $sub303);
      var $270=$strm_addr;
      var $adler305=(($270+48)|0);
      HEAP32[(($adler305)>>2)]=$call304;
      __label__ = 65; break;
    case 65: 
      var $271=$s;
      var $gzindex307=(($271+32)|0);
      var $272=HEAP32[(($gzindex307)>>2)];
      var $273=$s;
      var $gzhead308=(($273+28)|0);
      var $274=HEAP32[(($gzhead308)>>2)];
      var $extra_len309=(($274+20)|0);
      var $275=HEAP32[(($extra_len309)>>2)];
      var $cmp310=(($272)|0)==(($275)|0);
      if ($cmp310) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $276=$s;
      var $gzindex313=(($276+32)|0);
      HEAP32[(($gzindex313)>>2)]=0;
      var $277=$s;
      var $status314=(($277+4)|0);
      HEAP32[(($status314)>>2)]=73;
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break;
    case 68: 
      var $278=$s;
      var $status317=(($278+4)|0);
      HEAP32[(($status317)>>2)]=73;
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $279=$s;
      var $status320=(($279+4)|0);
      var $280=HEAP32[(($status320)>>2)];
      var $cmp321=(($280)|0)==73;
      if ($cmp321) { __label__ = 71; break; } else { __label__ = 90; break; }
    case 71: 
      var $281=$s;
      var $gzhead324=(($281+28)|0);
      var $282=HEAP32[(($gzhead324)>>2)];
      var $name325=(($282+28)|0);
      var $283=HEAP32[(($name325)>>2)];
      var $cmp326=(($283)|0)!=0;
      if ($cmp326) { __label__ = 72; break; } else { __label__ = 88; break; }
    case 72: 
      var $284=$s;
      var $pending330=(($284+20)|0);
      var $285=HEAP32[(($pending330)>>2)];
      $beg329=$285;
      __label__ = 73; break;
    case 73: 
      var $286=$s;
      var $pending331=(($286+20)|0);
      var $287=HEAP32[(($pending331)>>2)];
      var $288=$s;
      var $pending_buf_size332=(($288+12)|0);
      var $289=HEAP32[(($pending_buf_size332)>>2)];
      var $cmp333=(($287)|0)==(($289)|0);
      if ($cmp333) { __label__ = 74; break; } else { __label__ = 80; break; }
    case 74: 
      var $290=$s;
      var $gzhead336=(($290+28)|0);
      var $291=HEAP32[(($gzhead336)>>2)];
      var $hcrc337=(($291+44)|0);
      var $292=HEAP32[(($hcrc337)>>2)];
      var $tobool338=(($292)|0)!=0;
      if ($tobool338) { __label__ = 75; break; } else { __label__ = 77; break; }
    case 75: 
      var $293=$s;
      var $pending340=(($293+20)|0);
      var $294=HEAPU32[(($pending340)>>2)];
      var $295=$beg329;
      var $cmp341=(($294)>>>0) > (($295)>>>0);
      if ($cmp341) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      var $296=$strm_addr;
      var $adler344=(($296+48)|0);
      var $297=HEAP32[(($adler344)>>2)];
      var $298=$s;
      var $pending_buf345=(($298+8)|0);
      var $299=HEAP32[(($pending_buf345)>>2)];
      var $300=$beg329;
      var $add_ptr346=(($299+$300)|0);
      var $301=$s;
      var $pending347=(($301+20)|0);
      var $302=HEAP32[(($pending347)>>2)];
      var $303=$beg329;
      var $sub348=(($302-$303)|0);
      var $call349=_crc32($297, $add_ptr346, $sub348);
      var $304=$strm_addr;
      var $adler350=(($304+48)|0);
      HEAP32[(($adler350)>>2)]=$call349;
      __label__ = 77; break;
    case 77: 
      var $305=$strm_addr;
      _flush_pending($305);
      var $306=$s;
      var $pending352=(($306+20)|0);
      var $307=HEAP32[(($pending352)>>2)];
      $beg329=$307;
      var $308=$s;
      var $pending353=(($308+20)|0);
      var $309=HEAP32[(($pending353)>>2)];
      var $310=$s;
      var $pending_buf_size354=(($310+12)|0);
      var $311=HEAP32[(($pending_buf_size354)>>2)];
      var $cmp355=(($309)|0)==(($311)|0);
      if ($cmp355) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      $val=1;
      __label__ = 82; break;
    case 79: 
      __label__ = 80; break;
    case 80: 
      var $312=$s;
      var $gzindex360=(($312+32)|0);
      var $313=HEAP32[(($gzindex360)>>2)];
      var $inc361=(($313+1)|0);
      HEAP32[(($gzindex360)>>2)]=$inc361;
      var $314=$s;
      var $gzhead362=(($314+28)|0);
      var $315=HEAP32[(($gzhead362)>>2)];
      var $name363=(($315+28)|0);
      var $316=HEAP32[(($name363)>>2)];
      var $arrayidx364=(($316+$313)|0);
      var $317=HEAPU8[($arrayidx364)];
      var $conv365=(($317)&255);
      $val=$conv365;
      var $318=$val;
      var $conv366=(($318) & 255);
      var $319=$s;
      var $pending367=(($319+20)|0);
      var $320=HEAPU32[(($pending367)>>2)];
      var $inc368=(($320+1)|0);
      HEAP32[(($pending367)>>2)]=$inc368;
      var $321=$s;
      var $pending_buf369=(($321+8)|0);
      var $322=HEAP32[(($pending_buf369)>>2)];
      var $arrayidx370=(($322+$320)|0);
      HEAP8[($arrayidx370)]=$conv366;
      __label__ = 81; break;
    case 81: 
      var $323=$val;
      var $cmp371=(($323)|0)!=0;
      if ($cmp371) { __label__ = 73; break; } else { __label__ = 82; break; }
    case 82: 
      var $324=$s;
      var $gzhead373=(($324+28)|0);
      var $325=HEAP32[(($gzhead373)>>2)];
      var $hcrc374=(($325+44)|0);
      var $326=HEAP32[(($hcrc374)>>2)];
      var $tobool375=(($326)|0)!=0;
      if ($tobool375) { __label__ = 83; break; } else { __label__ = 85; break; }
    case 83: 
      var $327=$s;
      var $pending377=(($327+20)|0);
      var $328=HEAPU32[(($pending377)>>2)];
      var $329=$beg329;
      var $cmp378=(($328)>>>0) > (($329)>>>0);
      if ($cmp378) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $330=$strm_addr;
      var $adler381=(($330+48)|0);
      var $331=HEAP32[(($adler381)>>2)];
      var $332=$s;
      var $pending_buf382=(($332+8)|0);
      var $333=HEAP32[(($pending_buf382)>>2)];
      var $334=$beg329;
      var $add_ptr383=(($333+$334)|0);
      var $335=$s;
      var $pending384=(($335+20)|0);
      var $336=HEAP32[(($pending384)>>2)];
      var $337=$beg329;
      var $sub385=(($336-$337)|0);
      var $call386=_crc32($331, $add_ptr383, $sub385);
      var $338=$strm_addr;
      var $adler387=(($338+48)|0);
      HEAP32[(($adler387)>>2)]=$call386;
      __label__ = 85; break;
    case 85: 
      var $339=$val;
      var $cmp389=(($339)|0)==0;
      if ($cmp389) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $340=$s;
      var $gzindex392=(($340+32)|0);
      HEAP32[(($gzindex392)>>2)]=0;
      var $341=$s;
      var $status393=(($341+4)|0);
      HEAP32[(($status393)>>2)]=91;
      __label__ = 87; break;
    case 87: 
      __label__ = 89; break;
    case 88: 
      var $342=$s;
      var $status396=(($342+4)|0);
      HEAP32[(($status396)>>2)]=91;
      __label__ = 89; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      var $343=$s;
      var $status399=(($343+4)|0);
      var $344=HEAP32[(($status399)>>2)];
      var $cmp400=(($344)|0)==91;
      if ($cmp400) { __label__ = 91; break; } else { __label__ = 110; break; }
    case 91: 
      var $345=$s;
      var $gzhead403=(($345+28)|0);
      var $346=HEAP32[(($gzhead403)>>2)];
      var $comment404=(($346+36)|0);
      var $347=HEAP32[(($comment404)>>2)];
      var $cmp405=(($347)|0)!=0;
      if ($cmp405) { __label__ = 92; break; } else { __label__ = 108; break; }
    case 92: 
      var $348=$s;
      var $pending409=(($348+20)|0);
      var $349=HEAP32[(($pending409)>>2)];
      $beg408=$349;
      __label__ = 93; break;
    case 93: 
      var $350=$s;
      var $pending412=(($350+20)|0);
      var $351=HEAP32[(($pending412)>>2)];
      var $352=$s;
      var $pending_buf_size413=(($352+12)|0);
      var $353=HEAP32[(($pending_buf_size413)>>2)];
      var $cmp414=(($351)|0)==(($353)|0);
      if ($cmp414) { __label__ = 94; break; } else { __label__ = 100; break; }
    case 94: 
      var $354=$s;
      var $gzhead417=(($354+28)|0);
      var $355=HEAP32[(($gzhead417)>>2)];
      var $hcrc418=(($355+44)|0);
      var $356=HEAP32[(($hcrc418)>>2)];
      var $tobool419=(($356)|0)!=0;
      if ($tobool419) { __label__ = 95; break; } else { __label__ = 97; break; }
    case 95: 
      var $357=$s;
      var $pending421=(($357+20)|0);
      var $358=HEAPU32[(($pending421)>>2)];
      var $359=$beg408;
      var $cmp422=(($358)>>>0) > (($359)>>>0);
      if ($cmp422) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: 
      var $360=$strm_addr;
      var $adler425=(($360+48)|0);
      var $361=HEAP32[(($adler425)>>2)];
      var $362=$s;
      var $pending_buf426=(($362+8)|0);
      var $363=HEAP32[(($pending_buf426)>>2)];
      var $364=$beg408;
      var $add_ptr427=(($363+$364)|0);
      var $365=$s;
      var $pending428=(($365+20)|0);
      var $366=HEAP32[(($pending428)>>2)];
      var $367=$beg408;
      var $sub429=(($366-$367)|0);
      var $call430=_crc32($361, $add_ptr427, $sub429);
      var $368=$strm_addr;
      var $adler431=(($368+48)|0);
      HEAP32[(($adler431)>>2)]=$call430;
      __label__ = 97; break;
    case 97: 
      var $369=$strm_addr;
      _flush_pending($369);
      var $370=$s;
      var $pending433=(($370+20)|0);
      var $371=HEAP32[(($pending433)>>2)];
      $beg408=$371;
      var $372=$s;
      var $pending434=(($372+20)|0);
      var $373=HEAP32[(($pending434)>>2)];
      var $374=$s;
      var $pending_buf_size435=(($374+12)|0);
      var $375=HEAP32[(($pending_buf_size435)>>2)];
      var $cmp436=(($373)|0)==(($375)|0);
      if ($cmp436) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      $val410=1;
      __label__ = 102; break;
    case 99: 
      __label__ = 100; break;
    case 100: 
      var $376=$s;
      var $gzindex441=(($376+32)|0);
      var $377=HEAP32[(($gzindex441)>>2)];
      var $inc442=(($377+1)|0);
      HEAP32[(($gzindex441)>>2)]=$inc442;
      var $378=$s;
      var $gzhead443=(($378+28)|0);
      var $379=HEAP32[(($gzhead443)>>2)];
      var $comment444=(($379+36)|0);
      var $380=HEAP32[(($comment444)>>2)];
      var $arrayidx445=(($380+$377)|0);
      var $381=HEAPU8[($arrayidx445)];
      var $conv446=(($381)&255);
      $val410=$conv446;
      var $382=$val410;
      var $conv447=(($382) & 255);
      var $383=$s;
      var $pending448=(($383+20)|0);
      var $384=HEAPU32[(($pending448)>>2)];
      var $inc449=(($384+1)|0);
      HEAP32[(($pending448)>>2)]=$inc449;
      var $385=$s;
      var $pending_buf450=(($385+8)|0);
      var $386=HEAP32[(($pending_buf450)>>2)];
      var $arrayidx451=(($386+$384)|0);
      HEAP8[($arrayidx451)]=$conv447;
      __label__ = 101; break;
    case 101: 
      var $387=$val410;
      var $cmp453=(($387)|0)!=0;
      if ($cmp453) { __label__ = 93; break; } else { __label__ = 102; break; }
    case 102: 
      var $388=$s;
      var $gzhead456=(($388+28)|0);
      var $389=HEAP32[(($gzhead456)>>2)];
      var $hcrc457=(($389+44)|0);
      var $390=HEAP32[(($hcrc457)>>2)];
      var $tobool458=(($390)|0)!=0;
      if ($tobool458) { __label__ = 103; break; } else { __label__ = 105; break; }
    case 103: 
      var $391=$s;
      var $pending460=(($391+20)|0);
      var $392=HEAPU32[(($pending460)>>2)];
      var $393=$beg408;
      var $cmp461=(($392)>>>0) > (($393)>>>0);
      if ($cmp461) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      var $394=$strm_addr;
      var $adler464=(($394+48)|0);
      var $395=HEAP32[(($adler464)>>2)];
      var $396=$s;
      var $pending_buf465=(($396+8)|0);
      var $397=HEAP32[(($pending_buf465)>>2)];
      var $398=$beg408;
      var $add_ptr466=(($397+$398)|0);
      var $399=$s;
      var $pending467=(($399+20)|0);
      var $400=HEAP32[(($pending467)>>2)];
      var $401=$beg408;
      var $sub468=(($400-$401)|0);
      var $call469=_crc32($395, $add_ptr466, $sub468);
      var $402=$strm_addr;
      var $adler470=(($402+48)|0);
      HEAP32[(($adler470)>>2)]=$call469;
      __label__ = 105; break;
    case 105: 
      var $403=$val410;
      var $cmp472=(($403)|0)==0;
      if ($cmp472) { __label__ = 106; break; } else { __label__ = 107; break; }
    case 106: 
      var $404=$s;
      var $status475=(($404+4)|0);
      HEAP32[(($status475)>>2)]=103;
      __label__ = 107; break;
    case 107: 
      __label__ = 109; break;
    case 108: 
      var $405=$s;
      var $status478=(($405+4)|0);
      HEAP32[(($status478)>>2)]=103;
      __label__ = 109; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      var $406=$s;
      var $status481=(($406+4)|0);
      var $407=HEAP32[(($status481)>>2)];
      var $cmp482=(($407)|0)==103;
      if ($cmp482) { __label__ = 111; break; } else { __label__ = 119; break; }
    case 111: 
      var $408=$s;
      var $gzhead485=(($408+28)|0);
      var $409=HEAP32[(($gzhead485)>>2)];
      var $hcrc486=(($409+44)|0);
      var $410=HEAP32[(($hcrc486)>>2)];
      var $tobool487=(($410)|0)!=0;
      if ($tobool487) { __label__ = 112; break; } else { __label__ = 117; break; }
    case 112: 
      var $411=$s;
      var $pending489=(($411+20)|0);
      var $412=HEAP32[(($pending489)>>2)];
      var $add490=(($412+2)|0);
      var $413=$s;
      var $pending_buf_size491=(($413+12)|0);
      var $414=HEAPU32[(($pending_buf_size491)>>2)];
      var $cmp492=(($add490)>>>0) > (($414)>>>0);
      if ($cmp492) { __label__ = 113; break; } else { __label__ = 114; break; }
    case 113: 
      var $415=$strm_addr;
      _flush_pending($415);
      __label__ = 114; break;
    case 114: 
      var $416=$s;
      var $pending496=(($416+20)|0);
      var $417=HEAP32[(($pending496)>>2)];
      var $add497=(($417+2)|0);
      var $418=$s;
      var $pending_buf_size498=(($418+12)|0);
      var $419=HEAPU32[(($pending_buf_size498)>>2)];
      var $cmp499=(($add497)>>>0) <= (($419)>>>0);
      if ($cmp499) { __label__ = 115; break; } else { __label__ = 116; break; }
    case 115: 
      var $420=$strm_addr;
      var $adler502=(($420+48)|0);
      var $421=HEAP32[(($adler502)>>2)];
      var $and503=$421 & 255;
      var $conv504=(($and503) & 255);
      var $422=$s;
      var $pending505=(($422+20)|0);
      var $423=HEAP32[(($pending505)>>2)];
      var $inc506=(($423+1)|0);
      HEAP32[(($pending505)>>2)]=$inc506;
      var $424=$s;
      var $pending_buf507=(($424+8)|0);
      var $425=HEAP32[(($pending_buf507)>>2)];
      var $arrayidx508=(($425+$423)|0);
      HEAP8[($arrayidx508)]=$conv504;
      var $426=$strm_addr;
      var $adler509=(($426+48)|0);
      var $427=HEAPU32[(($adler509)>>2)];
      var $shr510=$427 >>> 8;
      var $and511=$shr510 & 255;
      var $conv512=(($and511) & 255);
      var $428=$s;
      var $pending513=(($428+20)|0);
      var $429=HEAPU32[(($pending513)>>2)];
      var $inc514=(($429+1)|0);
      HEAP32[(($pending513)>>2)]=$inc514;
      var $430=$s;
      var $pending_buf515=(($430+8)|0);
      var $431=HEAP32[(($pending_buf515)>>2)];
      var $arrayidx516=(($431+$429)|0);
      HEAP8[($arrayidx516)]=$conv512;
      var $call517=_crc32(0, 0, 0);
      var $432=$strm_addr;
      var $adler518=(($432+48)|0);
      HEAP32[(($adler518)>>2)]=$call517;
      var $433=$s;
      var $status519=(($433+4)|0);
      HEAP32[(($status519)>>2)]=113;
      __label__ = 116; break;
    case 116: 
      __label__ = 118; break;
    case 117: 
      var $434=$s;
      var $status522=(($434+4)|0);
      HEAP32[(($status522)>>2)]=113;
      __label__ = 118; break;
    case 118: 
      __label__ = 119; break;
    case 119: 
      var $435=$s;
      var $pending525=(($435+20)|0);
      var $436=HEAP32[(($pending525)>>2)];
      var $cmp526=(($436)|0)!=0;
      if ($cmp526) { __label__ = 120; break; } else { __label__ = 123; break; }
    case 120: 
      var $437=$strm_addr;
      _flush_pending($437);
      var $438=$strm_addr;
      var $avail_out529=(($438+16)|0);
      var $439=HEAP32[(($avail_out529)>>2)];
      var $cmp530=(($439)|0)==0;
      if ($cmp530) { __label__ = 121; break; } else { __label__ = 122; break; }
    case 121: 
      var $440=$s;
      var $last_flush533=(($440+40)|0);
      HEAP32[(($last_flush533)>>2)]=-1;
      $retval=0;
      __label__ = 173; break;
    case 122: 
      __label__ = 128; break;
    case 123: 
      var $441=$strm_addr;
      var $avail_in536=(($441+4)|0);
      var $442=HEAP32[(($avail_in536)>>2)];
      var $cmp537=(($442)|0)==0;
      if ($cmp537) { __label__ = 124; break; } else { __label__ = 127; break; }
    case 124: 
      var $443=$flush_addr;
      var $shl540=$443 << 1;
      var $444=$flush_addr;
      var $cmp541=(($444)|0) > 4;
      var $cond543=$cmp541 ? 9 : 0;
      var $sub544=(($shl540-$cond543)|0);
      var $445=$old_flush;
      var $shl545=$445 << 1;
      var $446=$old_flush;
      var $cmp546=(($446)|0) > 4;
      var $cond548=$cmp546 ? 9 : 0;
      var $sub549=(($shl545-$cond548)|0);
      var $cmp550=(($sub544)|0) <= (($sub549)|0);
      if ($cmp550) { __label__ = 125; break; } else { __label__ = 127; break; }
    case 125: 
      var $447=$flush_addr;
      var $cmp553=(($447)|0)!=4;
      if ($cmp553) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      var $448=HEAP32[((((_z_errmsg+28)|0))>>2)];
      var $449=$strm_addr;
      var $msg556=(($449+24)|0);
      HEAP32[(($msg556)>>2)]=$448;
      $retval=-5;
      __label__ = 173; break;
    case 127: 
      __label__ = 128; break;
    case 128: 
      var $450=$s;
      var $status559=(($450+4)|0);
      var $451=HEAP32[(($status559)>>2)];
      var $cmp560=(($451)|0)==666;
      if ($cmp560) { __label__ = 129; break; } else { __label__ = 131; break; }
    case 129: 
      var $452=$strm_addr;
      var $avail_in563=(($452+4)|0);
      var $453=HEAP32[(($avail_in563)>>2)];
      var $cmp564=(($453)|0)!=0;
      if ($cmp564) { __label__ = 130; break; } else { __label__ = 131; break; }
    case 130: 
      var $454=HEAP32[((((_z_errmsg+28)|0))>>2)];
      var $455=$strm_addr;
      var $msg567=(($455+24)|0);
      HEAP32[(($msg567)>>2)]=$454;
      $retval=-5;
      __label__ = 173; break;
    case 131: 
      var $456=$strm_addr;
      var $avail_in569=(($456+4)|0);
      var $457=HEAP32[(($avail_in569)>>2)];
      var $cmp570=(($457)|0)!=0;
      if ($cmp570) { __label__ = 135; break; } else { __label__ = 132; break; }
    case 132: 
      var $458=$s;
      var $lookahead=(($458+116)|0);
      var $459=HEAP32[(($lookahead)>>2)];
      var $cmp573=(($459)|0)!=0;
      if ($cmp573) { __label__ = 135; break; } else { __label__ = 133; break; }
    case 133: 
      var $460=$flush_addr;
      var $cmp576=(($460)|0)!=0;
      if ($cmp576) { __label__ = 134; break; } else { __label__ = 163; break; }
    case 134: 
      var $461=$s;
      var $status579=(($461+4)|0);
      var $462=HEAP32[(($status579)>>2)];
      var $cmp580=(($462)|0)!=666;
      if ($cmp580) { __label__ = 135; break; } else { __label__ = 163; break; }
    case 135: 
      var $463=$s;
      var $strategy583=(($463+136)|0);
      var $464=HEAP32[(($strategy583)>>2)];
      var $cmp584=(($464)|0)==2;
      if ($cmp584) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: 
      var $465=$s;
      var $466=$flush_addr;
      var $call587=_deflate_huff($465, $466);
      var $cond601 = $call587;__label__ = 141; break;
    case 137: 
      var $467=$s;
      var $strategy589=(($467+136)|0);
      var $468=HEAP32[(($strategy589)>>2)];
      var $cmp590=(($468)|0)==3;
      if ($cmp590) { __label__ = 138; break; } else { __label__ = 139; break; }
    case 138: 
      var $469=$s;
      var $470=$flush_addr;
      var $call593=_deflate_rle($469, $470);
      var $cond599 = $call593;__label__ = 140; break;
    case 139: 
      var $471=$s;
      var $level595=(($471+132)|0);
      var $472=HEAP32[(($level595)>>2)];
      var $arrayidx596=((_configuration_table+$472*12)|0);
      var $func=(($arrayidx596+8)|0);
      var $473=HEAP32[(($func)>>2)];
      var $474=$s;
      var $475=$flush_addr;
      var $call597=FUNCTION_TABLE[$473]($474, $475);
      var $cond599 = $call597;__label__ = 140; break;
    case 140: 
      var $cond599;
      var $cond601 = $cond599;__label__ = 141; break;
    case 141: 
      var $cond601;
      $bstate=$cond601;
      var $476=$bstate;
      var $cmp602=(($476)|0)==2;
      if ($cmp602) { __label__ = 143; break; } else { __label__ = 142; break; }
    case 142: 
      var $477=$bstate;
      var $cmp605=(($477)|0)==3;
      if ($cmp605) { __label__ = 143; break; } else { __label__ = 144; break; }
    case 143: 
      var $478=$s;
      var $status608=(($478+4)|0);
      HEAP32[(($status608)>>2)]=666;
      __label__ = 144; break;
    case 144: 
      var $479=$bstate;
      var $cmp610=(($479)|0)==0;
      if ($cmp610) { __label__ = 146; break; } else { __label__ = 145; break; }
    case 145: 
      var $480=$bstate;
      var $cmp613=(($480)|0)==2;
      if ($cmp613) { __label__ = 146; break; } else { __label__ = 149; break; }
    case 146: 
      var $481=$strm_addr;
      var $avail_out616=(($481+16)|0);
      var $482=HEAP32[(($avail_out616)>>2)];
      var $cmp617=(($482)|0)==0;
      if ($cmp617) { __label__ = 147; break; } else { __label__ = 148; break; }
    case 147: 
      var $483=$s;
      var $last_flush620=(($483+40)|0);
      HEAP32[(($last_flush620)>>2)]=-1;
      __label__ = 148; break;
    case 148: 
      $retval=0;
      __label__ = 173; break;
    case 149: 
      var $484=$bstate;
      var $cmp623=(($484)|0)==1;
      if ($cmp623) { __label__ = 150; break; } else { __label__ = 162; break; }
    case 150: 
      var $485=$flush_addr;
      var $cmp626=(($485)|0)==1;
      if ($cmp626) { __label__ = 151; break; } else { __label__ = 152; break; }
    case 151: 
      var $486=$s;
      __tr_align($486);
      __label__ = 159; break;
    case 152: 
      var $487=$flush_addr;
      var $cmp630=(($487)|0)!=5;
      if ($cmp630) { __label__ = 153; break; } else { __label__ = 158; break; }
    case 153: 
      var $488=$s;
      __tr_stored_block($488, 0, 0, 0);
      var $489=$flush_addr;
      var $cmp633=(($489)|0)==3;
      if ($cmp633) { __label__ = 154; break; } else { __label__ = 157; break; }
    case 154: 
      var $490=$s;
      var $hash_size=(($490+76)|0);
      var $491=HEAP32[(($hash_size)>>2)];
      var $sub636=(($491-1)|0);
      var $492=$s;
      var $head=(($492+68)|0);
      var $493=HEAP32[(($head)>>2)];
      var $arrayidx637=(($493+($sub636<<1))|0);
      HEAP16[(($arrayidx637)>>1)]=0;
      var $494=$s;
      var $head638=(($494+68)|0);
      var $495=HEAP32[(($head638)>>2)];
      var $496=$495;
      var $497=$s;
      var $hash_size639=(($497+76)|0);
      var $498=HEAP32[(($hash_size639)>>2)];
      var $sub640=(($498-1)|0);
      var $mul=((($sub640<<1))|0);
      _zmemzero($496, $mul);
      var $499=$s;
      var $lookahead641=(($499+116)|0);
      var $500=HEAP32[(($lookahead641)>>2)];
      var $cmp642=(($500)|0)==0;
      if ($cmp642) { __label__ = 155; break; } else { __label__ = 156; break; }
    case 155: 
      var $501=$s;
      var $strstart645=(($501+108)|0);
      HEAP32[(($strstart645)>>2)]=0;
      var $502=$s;
      var $block_start=(($502+92)|0);
      HEAP32[(($block_start)>>2)]=0;
      var $503=$s;
      var $insert=(($503+5812)|0);
      HEAP32[(($insert)>>2)]=0;
      __label__ = 156; break;
    case 156: 
      __label__ = 157; break;
    case 157: 
      __label__ = 158; break;
    case 158: 
      __label__ = 159; break;
    case 159: 
      var $504=$strm_addr;
      _flush_pending($504);
      var $505=$strm_addr;
      var $avail_out650=(($505+16)|0);
      var $506=HEAP32[(($avail_out650)>>2)];
      var $cmp651=(($506)|0)==0;
      if ($cmp651) { __label__ = 160; break; } else { __label__ = 161; break; }
    case 160: 
      var $507=$s;
      var $last_flush654=(($507+40)|0);
      HEAP32[(($last_flush654)>>2)]=-1;
      $retval=0;
      __label__ = 173; break;
    case 161: 
      __label__ = 162; break;
    case 162: 
      __label__ = 163; break;
    case 163: 
      var $508=$flush_addr;
      var $cmp658=(($508)|0)!=4;
      if ($cmp658) { __label__ = 164; break; } else { __label__ = 165; break; }
    case 164: 
      $retval=0;
      __label__ = 173; break;
    case 165: 
      var $509=$s;
      var $wrap662=(($509+24)|0);
      var $510=HEAP32[(($wrap662)>>2)];
      var $cmp663=(($510)|0) <= 0;
      if ($cmp663) { __label__ = 166; break; } else { __label__ = 167; break; }
    case 166: 
      $retval=1;
      __label__ = 173; break;
    case 167: 
      var $511=$s;
      var $wrap667=(($511+24)|0);
      var $512=HEAP32[(($wrap667)>>2)];
      var $cmp668=(($512)|0)==2;
      if ($cmp668) { __label__ = 168; break; } else { __label__ = 169; break; }
    case 168: 
      var $513=$strm_addr;
      var $adler671=(($513+48)|0);
      var $514=HEAP32[(($adler671)>>2)];
      var $and672=$514 & 255;
      var $conv673=(($and672) & 255);
      var $515=$s;
      var $pending674=(($515+20)|0);
      var $516=HEAP32[(($pending674)>>2)];
      var $inc675=(($516+1)|0);
      HEAP32[(($pending674)>>2)]=$inc675;
      var $517=$s;
      var $pending_buf676=(($517+8)|0);
      var $518=HEAP32[(($pending_buf676)>>2)];
      var $arrayidx677=(($518+$516)|0);
      HEAP8[($arrayidx677)]=$conv673;
      var $519=$strm_addr;
      var $adler678=(($519+48)|0);
      var $520=HEAPU32[(($adler678)>>2)];
      var $shr679=$520 >>> 8;
      var $and680=$shr679 & 255;
      var $conv681=(($and680) & 255);
      var $521=$s;
      var $pending682=(($521+20)|0);
      var $522=HEAPU32[(($pending682)>>2)];
      var $inc683=(($522+1)|0);
      HEAP32[(($pending682)>>2)]=$inc683;
      var $523=$s;
      var $pending_buf684=(($523+8)|0);
      var $524=HEAP32[(($pending_buf684)>>2)];
      var $arrayidx685=(($524+$522)|0);
      HEAP8[($arrayidx685)]=$conv681;
      var $525=$strm_addr;
      var $adler686=(($525+48)|0);
      var $526=HEAPU32[(($adler686)>>2)];
      var $shr687=$526 >>> 16;
      var $and688=$shr687 & 255;
      var $conv689=(($and688) & 255);
      var $527=$s;
      var $pending690=(($527+20)|0);
      var $528=HEAPU32[(($pending690)>>2)];
      var $inc691=(($528+1)|0);
      HEAP32[(($pending690)>>2)]=$inc691;
      var $529=$s;
      var $pending_buf692=(($529+8)|0);
      var $530=HEAP32[(($pending_buf692)>>2)];
      var $arrayidx693=(($530+$528)|0);
      HEAP8[($arrayidx693)]=$conv689;
      var $531=$strm_addr;
      var $adler694=(($531+48)|0);
      var $532=HEAPU32[(($adler694)>>2)];
      var $shr695=$532 >>> 24;
      var $and696=$shr695 & 255;
      var $conv697=(($and696) & 255);
      var $533=$s;
      var $pending698=(($533+20)|0);
      var $534=HEAPU32[(($pending698)>>2)];
      var $inc699=(($534+1)|0);
      HEAP32[(($pending698)>>2)]=$inc699;
      var $535=$s;
      var $pending_buf700=(($535+8)|0);
      var $536=HEAP32[(($pending_buf700)>>2)];
      var $arrayidx701=(($536+$534)|0);
      HEAP8[($arrayidx701)]=$conv697;
      var $537=$strm_addr;
      var $total_in=(($537+8)|0);
      var $538=HEAP32[(($total_in)>>2)];
      var $and702=$538 & 255;
      var $conv703=(($and702) & 255);
      var $539=$s;
      var $pending704=(($539+20)|0);
      var $540=HEAP32[(($pending704)>>2)];
      var $inc705=(($540+1)|0);
      HEAP32[(($pending704)>>2)]=$inc705;
      var $541=$s;
      var $pending_buf706=(($541+8)|0);
      var $542=HEAP32[(($pending_buf706)>>2)];
      var $arrayidx707=(($542+$540)|0);
      HEAP8[($arrayidx707)]=$conv703;
      var $543=$strm_addr;
      var $total_in708=(($543+8)|0);
      var $544=HEAPU32[(($total_in708)>>2)];
      var $shr709=$544 >>> 8;
      var $and710=$shr709 & 255;
      var $conv711=(($and710) & 255);
      var $545=$s;
      var $pending712=(($545+20)|0);
      var $546=HEAPU32[(($pending712)>>2)];
      var $inc713=(($546+1)|0);
      HEAP32[(($pending712)>>2)]=$inc713;
      var $547=$s;
      var $pending_buf714=(($547+8)|0);
      var $548=HEAP32[(($pending_buf714)>>2)];
      var $arrayidx715=(($548+$546)|0);
      HEAP8[($arrayidx715)]=$conv711;
      var $549=$strm_addr;
      var $total_in716=(($549+8)|0);
      var $550=HEAPU32[(($total_in716)>>2)];
      var $shr717=$550 >>> 16;
      var $and718=$shr717 & 255;
      var $conv719=(($and718) & 255);
      var $551=$s;
      var $pending720=(($551+20)|0);
      var $552=HEAPU32[(($pending720)>>2)];
      var $inc721=(($552+1)|0);
      HEAP32[(($pending720)>>2)]=$inc721;
      var $553=$s;
      var $pending_buf722=(($553+8)|0);
      var $554=HEAP32[(($pending_buf722)>>2)];
      var $arrayidx723=(($554+$552)|0);
      HEAP8[($arrayidx723)]=$conv719;
      var $555=$strm_addr;
      var $total_in724=(($555+8)|0);
      var $556=HEAPU32[(($total_in724)>>2)];
      var $shr725=$556 >>> 24;
      var $and726=$shr725 & 255;
      var $conv727=(($and726) & 255);
      var $557=$s;
      var $pending728=(($557+20)|0);
      var $558=HEAPU32[(($pending728)>>2)];
      var $inc729=(($558+1)|0);
      HEAP32[(($pending728)>>2)]=$inc729;
      var $559=$s;
      var $pending_buf730=(($559+8)|0);
      var $560=HEAP32[(($pending_buf730)>>2)];
      var $arrayidx731=(($560+$558)|0);
      HEAP8[($arrayidx731)]=$conv727;
      __label__ = 170; break;
    case 169: 
      var $561=$s;
      var $562=$strm_addr;
      var $adler733=(($562+48)|0);
      var $563=HEAPU32[(($adler733)>>2)];
      var $shr734=$563 >>> 16;
      _putShortMSB($561, $shr734);
      var $564=$s;
      var $565=$strm_addr;
      var $adler735=(($565+48)|0);
      var $566=HEAP32[(($adler735)>>2)];
      var $and736=$566 & 65535;
      _putShortMSB($564, $and736);
      __label__ = 170; break;
    case 170: 
      var $567=$strm_addr;
      _flush_pending($567);
      var $568=$s;
      var $wrap738=(($568+24)|0);
      var $569=HEAP32[(($wrap738)>>2)];
      var $cmp739=(($569)|0) > 0;
      if ($cmp739) { __label__ = 171; break; } else { __label__ = 172; break; }
    case 171: 
      var $570=$s;
      var $wrap742=(($570+24)|0);
      var $571=HEAP32[(($wrap742)>>2)];
      var $sub743=(((-$571))|0);
      var $572=$s;
      var $wrap744=(($572+24)|0);
      HEAP32[(($wrap744)>>2)]=$sub743;
      __label__ = 172; break;
    case 172: 
      var $573=$s;
      var $pending746=(($573+20)|0);
      var $574=HEAP32[(($pending746)>>2)];
      var $cmp747=(($574)|0)!=0;
      var $cond749=$cmp747 ? 0 : 1;
      $retval=$cond749;
      __label__ = 173; break;
    case 173: 
      var $575=$retval;
      ;
      return $575;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflate["X"]=1;

function _putShortMSB($s, $b) {
  ;
  var __label__;

  var $s_addr;
  var $b_addr;
  $s_addr=$s;
  $b_addr=$b;
  var $0=$b_addr;
  var $shr=$0 >>> 8;
  var $conv=(($shr) & 255);
  var $1=$s_addr;
  var $pending=(($1+20)|0);
  var $2=HEAPU32[(($pending)>>2)];
  var $inc=(($2+1)|0);
  HEAP32[(($pending)>>2)]=$inc;
  var $3=$s_addr;
  var $pending_buf=(($3+8)|0);
  var $4=HEAP32[(($pending_buf)>>2)];
  var $arrayidx=(($4+$2)|0);
  HEAP8[($arrayidx)]=$conv;
  var $5=$b_addr;
  var $and=$5 & 255;
  var $conv1=(($and) & 255);
  var $6=$s_addr;
  var $pending2=(($6+20)|0);
  var $7=HEAP32[(($pending2)>>2)];
  var $inc3=(($7+1)|0);
  HEAP32[(($pending2)>>2)]=$inc3;
  var $8=$s_addr;
  var $pending_buf4=(($8+8)|0);
  var $9=HEAP32[(($pending_buf4)>>2)];
  var $arrayidx5=(($9+$7)|0);
  HEAP8[($arrayidx5)]=$conv1;
  ;
  return;
}


function _flush_pending($strm) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $strm_addr;
      var $len;
      var $s;
      $strm_addr=$strm;
      var $0=$strm_addr;
      var $state=(($0+28)|0);
      var $1=HEAP32[(($state)>>2)];
      $s=$1;
      var $2=$s;
      __tr_flush_bits($2);
      var $3=$s;
      var $pending=(($3+20)|0);
      var $4=HEAP32[(($pending)>>2)];
      $len=$4;
      var $5=$len;
      var $6=$strm_addr;
      var $avail_out=(($6+16)|0);
      var $7=HEAPU32[(($avail_out)>>2)];
      var $cmp=(($5)>>>0) > (($7)>>>0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $8=$strm_addr;
      var $avail_out1=(($8+16)|0);
      var $9=HEAP32[(($avail_out1)>>2)];
      $len=$9;
      __label__ = 3; break;
    case 3: 
      var $10=$len;
      var $cmp2=(($10)|0)==0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 7; break;
    case 5: 
      var $11=$strm_addr;
      var $next_out=(($11+12)|0);
      var $12=HEAP32[(($next_out)>>2)];
      var $13=$s;
      var $pending_out=(($13+16)|0);
      var $14=HEAP32[(($pending_out)>>2)];
      var $15=$len;
      _zmemcpy($12, $14, $15);
      var $16=$len;
      var $17=$strm_addr;
      var $next_out5=(($17+12)|0);
      var $18=HEAP32[(($next_out5)>>2)];
      var $add_ptr=(($18+$16)|0);
      HEAP32[(($next_out5)>>2)]=$add_ptr;
      var $19=$len;
      var $20=$s;
      var $pending_out6=(($20+16)|0);
      var $21=HEAP32[(($pending_out6)>>2)];
      var $add_ptr7=(($21+$19)|0);
      HEAP32[(($pending_out6)>>2)]=$add_ptr7;
      var $22=$len;
      var $23=$strm_addr;
      var $total_out=(($23+20)|0);
      var $24=HEAP32[(($total_out)>>2)];
      var $add=(($24+$22)|0);
      HEAP32[(($total_out)>>2)]=$add;
      var $25=$len;
      var $26=$strm_addr;
      var $avail_out8=(($26+16)|0);
      var $27=HEAP32[(($avail_out8)>>2)];
      var $sub=(($27-$25)|0);
      HEAP32[(($avail_out8)>>2)]=$sub;
      var $28=$len;
      var $29=$s;
      var $pending9=(($29+20)|0);
      var $30=HEAP32[(($pending9)>>2)];
      var $sub10=(($30-$28)|0);
      HEAP32[(($pending9)>>2)]=$sub10;
      var $31=$s;
      var $pending11=(($31+20)|0);
      var $32=HEAP32[(($pending11)>>2)];
      var $cmp12=(($32)|0)==0;
      if ($cmp12) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $33=$s;
      var $pending_buf=(($33+8)|0);
      var $34=HEAP32[(($pending_buf)>>2)];
      var $35=$s;
      var $pending_out14=(($35+16)|0);
      HEAP32[(($pending_out14)>>2)]=$34;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_flush_pending["X"]=1;

function _deflate_huff($s, $flush) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $s_addr;
      var $flush_addr;
      var $bflush;
      var $cc;
      $s_addr=$s;
      $flush_addr=$flush;
      __label__ = 2; break;
    case 2: 
      var $0=$s_addr;
      var $lookahead=(($0+116)|0);
      var $1=HEAP32[(($lookahead)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $2=$s_addr;
      _fill_window($2);
      var $3=$s_addr;
      var $lookahead1=(($3+116)|0);
      var $4=HEAP32[(($lookahead1)>>2)];
      var $cmp2=(($4)|0)==0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $5=$flush_addr;
      var $cmp4=(($5)|0)==0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=0;
      __label__ = 31; break;
    case 6: 
      __label__ = 16; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $6=$s_addr;
      var $match_length=(($6+96)|0);
      HEAP32[(($match_length)>>2)]=0;
      var $7=$s_addr;
      var $strstart=(($7+108)|0);
      var $8=HEAP32[(($strstart)>>2)];
      var $9=$s_addr;
      var $window=(($9+56)|0);
      var $10=HEAP32[(($window)>>2)];
      var $arrayidx=(($10+$8)|0);
      var $11=HEAP8[($arrayidx)];
      $cc=$11;
      var $12=$s_addr;
      var $last_lit=(($12+5792)|0);
      var $13=HEAP32[(($last_lit)>>2)];
      var $14=$s_addr;
      var $d_buf=(($14+5796)|0);
      var $15=HEAP32[(($d_buf)>>2)];
      var $arrayidx8=(($15+($13<<1))|0);
      HEAP16[(($arrayidx8)>>1)]=0;
      var $16=$cc;
      var $17=$s_addr;
      var $last_lit9=(($17+5792)|0);
      var $18=HEAP32[(($last_lit9)>>2)];
      var $inc=(($18+1)|0);
      HEAP32[(($last_lit9)>>2)]=$inc;
      var $19=$s_addr;
      var $l_buf=(($19+5784)|0);
      var $20=HEAP32[(($l_buf)>>2)];
      var $arrayidx10=(($20+$18)|0);
      HEAP8[($arrayidx10)]=$16;
      var $21=$cc;
      var $idxprom=(($21)&255);
      var $22=$s_addr;
      var $dyn_ltree=(($22+148)|0);
      var $arrayidx11=(($dyn_ltree+($idxprom<<2))|0);
      var $fc=(($arrayidx11)|0);
      var $freq=$fc;
      var $23=HEAP16[(($freq)>>1)];
      var $inc12=(($23+1)&65535);
      HEAP16[(($freq)>>1)]=$inc12;
      var $24=$s_addr;
      var $last_lit13=(($24+5792)|0);
      var $25=HEAP32[(($last_lit13)>>2)];
      var $26=$s_addr;
      var $lit_bufsize=(($26+5788)|0);
      var $27=HEAP32[(($lit_bufsize)>>2)];
      var $sub=(($27-1)|0);
      var $cmp14=(($25)|0)==(($sub)|0);
      var $conv=(($cmp14)&1);
      $bflush=$conv;
      var $28=$s_addr;
      var $lookahead15=(($28+116)|0);
      var $29=HEAP32[(($lookahead15)>>2)];
      var $dec=(($29-1)|0);
      HEAP32[(($lookahead15)>>2)]=$dec;
      var $30=$s_addr;
      var $strstart16=(($30+108)|0);
      var $31=HEAP32[(($strstart16)>>2)];
      var $inc17=(($31+1)|0);
      HEAP32[(($strstart16)>>2)]=$inc17;
      var $32=$bflush;
      var $tobool=(($32)|0)!=0;
      if ($tobool) { __label__ = 9; break; } else { __label__ = 15; break; }
    case 9: 
      var $33=$s_addr;
      var $34=$s_addr;
      var $block_start=(($34+92)|0);
      var $35=HEAP32[(($block_start)>>2)];
      var $cmp19=(($35)|0) >= 0;
      if ($cmp19) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $36=$s_addr;
      var $block_start21=(($36+92)|0);
      var $37=HEAP32[(($block_start21)>>2)];
      var $38=$s_addr;
      var $window22=(($38+56)|0);
      var $39=HEAP32[(($window22)>>2)];
      var $arrayidx23=(($39+$37)|0);
      var $cond = $arrayidx23;__label__ = 12; break;
    case 11: 
      var $cond = 0;__label__ = 12; break;
    case 12: 
      var $cond;
      var $40=$s_addr;
      var $strstart24=(($40+108)|0);
      var $41=HEAP32[(($strstart24)>>2)];
      var $42=$s_addr;
      var $block_start25=(($42+92)|0);
      var $43=HEAP32[(($block_start25)>>2)];
      var $sub26=(($41-$43)|0);
      __tr_flush_block($33, $cond, $sub26, 0);
      var $44=$s_addr;
      var $strstart27=(($44+108)|0);
      var $45=HEAP32[(($strstart27)>>2)];
      var $46=$s_addr;
      var $block_start28=(($46+92)|0);
      HEAP32[(($block_start28)>>2)]=$45;
      var $47=$s_addr;
      var $strm=(($47)|0);
      var $48=HEAP32[(($strm)>>2)];
      _flush_pending($48);
      var $49=$s_addr;
      var $strm29=(($49)|0);
      var $50=HEAP32[(($strm29)>>2)];
      var $avail_out=(($50+16)|0);
      var $51=HEAP32[(($avail_out)>>2)];
      var $cmp30=(($51)|0)==0;
      if ($cmp30) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $retval=0;
      __label__ = 31; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 2; break;
    case 16: 
      var $52=$s_addr;
      var $insert=(($52+5812)|0);
      HEAP32[(($insert)>>2)]=0;
      var $53=$flush_addr;
      var $cmp35=(($53)|0)==4;
      if ($cmp35) { __label__ = 17; break; } else { __label__ = 23; break; }
    case 17: 
      var $54=$s_addr;
      var $55=$s_addr;
      var $block_start38=(($55+92)|0);
      var $56=HEAP32[(($block_start38)>>2)];
      var $cmp39=(($56)|0) >= 0;
      if ($cmp39) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $57=$s_addr;
      var $block_start42=(($57+92)|0);
      var $58=HEAP32[(($block_start42)>>2)];
      var $59=$s_addr;
      var $window43=(($59+56)|0);
      var $60=HEAP32[(($window43)>>2)];
      var $arrayidx44=(($60+$58)|0);
      var $cond47 = $arrayidx44;__label__ = 20; break;
    case 19: 
      var $cond47 = 0;__label__ = 20; break;
    case 20: 
      var $cond47;
      var $61=$s_addr;
      var $strstart48=(($61+108)|0);
      var $62=HEAP32[(($strstart48)>>2)];
      var $63=$s_addr;
      var $block_start49=(($63+92)|0);
      var $64=HEAP32[(($block_start49)>>2)];
      var $sub50=(($62-$64)|0);
      __tr_flush_block($54, $cond47, $sub50, 1);
      var $65=$s_addr;
      var $strstart51=(($65+108)|0);
      var $66=HEAP32[(($strstart51)>>2)];
      var $67=$s_addr;
      var $block_start52=(($67+92)|0);
      HEAP32[(($block_start52)>>2)]=$66;
      var $68=$s_addr;
      var $strm53=(($68)|0);
      var $69=HEAP32[(($strm53)>>2)];
      _flush_pending($69);
      var $70=$s_addr;
      var $strm54=(($70)|0);
      var $71=HEAP32[(($strm54)>>2)];
      var $avail_out55=(($71+16)|0);
      var $72=HEAP32[(($avail_out55)>>2)];
      var $cmp56=(($72)|0)==0;
      if ($cmp56) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      $retval=2;
      __label__ = 31; break;
    case 22: 
      $retval=3;
      __label__ = 31; break;
    case 23: 
      var $73=$s_addr;
      var $last_lit61=(($73+5792)|0);
      var $74=HEAP32[(($last_lit61)>>2)];
      var $tobool62=(($74)|0)!=0;
      if ($tobool62) { __label__ = 24; break; } else { __label__ = 30; break; }
    case 24: 
      var $75=$s_addr;
      var $76=$s_addr;
      var $block_start64=(($76+92)|0);
      var $77=HEAP32[(($block_start64)>>2)];
      var $cmp65=(($77)|0) >= 0;
      if ($cmp65) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $78=$s_addr;
      var $block_start68=(($78+92)|0);
      var $79=HEAP32[(($block_start68)>>2)];
      var $80=$s_addr;
      var $window69=(($80+56)|0);
      var $81=HEAP32[(($window69)>>2)];
      var $arrayidx70=(($81+$79)|0);
      var $cond73 = $arrayidx70;__label__ = 27; break;
    case 26: 
      var $cond73 = 0;__label__ = 27; break;
    case 27: 
      var $cond73;
      var $82=$s_addr;
      var $strstart74=(($82+108)|0);
      var $83=HEAP32[(($strstart74)>>2)];
      var $84=$s_addr;
      var $block_start75=(($84+92)|0);
      var $85=HEAP32[(($block_start75)>>2)];
      var $sub76=(($83-$85)|0);
      __tr_flush_block($75, $cond73, $sub76, 0);
      var $86=$s_addr;
      var $strstart77=(($86+108)|0);
      var $87=HEAP32[(($strstart77)>>2)];
      var $88=$s_addr;
      var $block_start78=(($88+92)|0);
      HEAP32[(($block_start78)>>2)]=$87;
      var $89=$s_addr;
      var $strm79=(($89)|0);
      var $90=HEAP32[(($strm79)>>2)];
      _flush_pending($90);
      var $91=$s_addr;
      var $strm80=(($91)|0);
      var $92=HEAP32[(($strm80)>>2)];
      var $avail_out81=(($92+16)|0);
      var $93=HEAP32[(($avail_out81)>>2)];
      var $cmp82=(($93)|0)==0;
      if ($cmp82) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      $retval=0;
      __label__ = 31; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      $retval=1;
      __label__ = 31; break;
    case 31: 
      var $94=$retval;
      ;
      return $94;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflate_huff["X"]=1;

function _deflate_rle($s, $flush) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $s_addr;
      var $flush_addr;
      var $bflush;
      var $prev;
      var $scan;
      var $strend;
      var $len;
      var $dist;
      var $cc;
      $s_addr=$s;
      $flush_addr=$flush;
      __label__ = 2; break;
    case 2: 
      var $0=$s_addr;
      var $lookahead=(($0+116)|0);
      var $1=HEAPU32[(($lookahead)>>2)];
      var $cmp=(($1)>>>0) <= 258;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $2=$s_addr;
      _fill_window($2);
      var $3=$s_addr;
      var $lookahead1=(($3+116)|0);
      var $4=HEAPU32[(($lookahead1)>>2)];
      var $cmp2=(($4)>>>0) <= 258;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $5=$flush_addr;
      var $cmp3=(($5)|0)==0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=0;
      __label__ = 59; break;
    case 6: 
      var $6=$s_addr;
      var $lookahead5=(($6+116)|0);
      var $7=HEAP32[(($lookahead5)>>2)];
      var $cmp6=(($7)|0)==0;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 44; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $8=$s_addr;
      var $match_length=(($8+96)|0);
      HEAP32[(($match_length)>>2)]=0;
      var $9=$s_addr;
      var $lookahead10=(($9+116)|0);
      var $10=HEAPU32[(($lookahead10)>>2)];
      var $cmp11=(($10)>>>0) >= 3;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 30; break; }
    case 10: 
      var $11=$s_addr;
      var $strstart=(($11+108)|0);
      var $12=HEAPU32[(($strstart)>>2)];
      var $cmp13=(($12)>>>0) > 0;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 30; break; }
    case 11: 
      var $13=$s_addr;
      var $window=(($13+56)|0);
      var $14=HEAP32[(($window)>>2)];
      var $15=$s_addr;
      var $strstart15=(($15+108)|0);
      var $16=HEAP32[(($strstart15)>>2)];
      var $add_ptr=(($14+$16)|0);
      var $add_ptr16=(($add_ptr-1)|0);
      $scan=$add_ptr16;
      var $17=$scan;
      var $18=HEAPU8[($17)];
      var $conv=(($18)&255);
      $prev=$conv;
      var $19=$prev;
      var $20=$scan;
      var $incdec_ptr=(($20+1)|0);
      $scan=$incdec_ptr;
      var $21=HEAPU8[($incdec_ptr)];
      var $conv17=(($21)&255);
      var $cmp18=(($19)|0)==(($conv17)|0);
      if ($cmp18) { __label__ = 12; break; } else { __label__ = 29; break; }
    case 12: 
      var $22=$prev;
      var $23=$scan;
      var $incdec_ptr21=(($23+1)|0);
      $scan=$incdec_ptr21;
      var $24=HEAPU8[($incdec_ptr21)];
      var $conv22=(($24)&255);
      var $cmp23=(($22)|0)==(($conv22)|0);
      if ($cmp23) { __label__ = 13; break; } else { __label__ = 29; break; }
    case 13: 
      var $25=$prev;
      var $26=$scan;
      var $incdec_ptr26=(($26+1)|0);
      $scan=$incdec_ptr26;
      var $27=HEAPU8[($incdec_ptr26)];
      var $conv27=(($27)&255);
      var $cmp28=(($25)|0)==(($conv27)|0);
      if ($cmp28) { __label__ = 14; break; } else { __label__ = 29; break; }
    case 14: 
      var $28=$s_addr;
      var $window31=(($28+56)|0);
      var $29=HEAP32[(($window31)>>2)];
      var $30=$s_addr;
      var $strstart32=(($30+108)|0);
      var $31=HEAP32[(($strstart32)>>2)];
      var $add_ptr33=(($29+$31)|0);
      var $add_ptr34=(($add_ptr33+258)|0);
      $strend=$add_ptr34;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $32=$prev;
      var $33=$scan;
      var $incdec_ptr35=(($33+1)|0);
      $scan=$incdec_ptr35;
      var $34=HEAPU8[($incdec_ptr35)];
      var $conv36=(($34)&255);
      var $cmp37=(($32)|0)==(($conv36)|0);
      if ($cmp37) { __label__ = 17; break; } else { var $58 = 0;__label__ = 25; break; }
    case 17: 
      var $35=$prev;
      var $36=$scan;
      var $incdec_ptr40=(($36+1)|0);
      $scan=$incdec_ptr40;
      var $37=HEAPU8[($incdec_ptr40)];
      var $conv41=(($37)&255);
      var $cmp42=(($35)|0)==(($conv41)|0);
      if ($cmp42) { __label__ = 18; break; } else { var $58 = 0;__label__ = 25; break; }
    case 18: 
      var $38=$prev;
      var $39=$scan;
      var $incdec_ptr45=(($39+1)|0);
      $scan=$incdec_ptr45;
      var $40=HEAPU8[($incdec_ptr45)];
      var $conv46=(($40)&255);
      var $cmp47=(($38)|0)==(($conv46)|0);
      if ($cmp47) { __label__ = 19; break; } else { var $58 = 0;__label__ = 25; break; }
    case 19: 
      var $41=$prev;
      var $42=$scan;
      var $incdec_ptr50=(($42+1)|0);
      $scan=$incdec_ptr50;
      var $43=HEAPU8[($incdec_ptr50)];
      var $conv51=(($43)&255);
      var $cmp52=(($41)|0)==(($conv51)|0);
      if ($cmp52) { __label__ = 20; break; } else { var $58 = 0;__label__ = 25; break; }
    case 20: 
      var $44=$prev;
      var $45=$scan;
      var $incdec_ptr55=(($45+1)|0);
      $scan=$incdec_ptr55;
      var $46=HEAPU8[($incdec_ptr55)];
      var $conv56=(($46)&255);
      var $cmp57=(($44)|0)==(($conv56)|0);
      if ($cmp57) { __label__ = 21; break; } else { var $58 = 0;__label__ = 25; break; }
    case 21: 
      var $47=$prev;
      var $48=$scan;
      var $incdec_ptr60=(($48+1)|0);
      $scan=$incdec_ptr60;
      var $49=HEAPU8[($incdec_ptr60)];
      var $conv61=(($49)&255);
      var $cmp62=(($47)|0)==(($conv61)|0);
      if ($cmp62) { __label__ = 22; break; } else { var $58 = 0;__label__ = 25; break; }
    case 22: 
      var $50=$prev;
      var $51=$scan;
      var $incdec_ptr65=(($51+1)|0);
      $scan=$incdec_ptr65;
      var $52=HEAPU8[($incdec_ptr65)];
      var $conv66=(($52)&255);
      var $cmp67=(($50)|0)==(($conv66)|0);
      if ($cmp67) { __label__ = 23; break; } else { var $58 = 0;__label__ = 25; break; }
    case 23: 
      var $53=$prev;
      var $54=$scan;
      var $incdec_ptr70=(($54+1)|0);
      $scan=$incdec_ptr70;
      var $55=HEAPU8[($incdec_ptr70)];
      var $conv71=(($55)&255);
      var $cmp72=(($53)|0)==(($conv71)|0);
      if ($cmp72) { __label__ = 24; break; } else { var $58 = 0;__label__ = 25; break; }
    case 24: 
      var $56=$scan;
      var $57=$strend;
      var $cmp74=(($56)>>>0) < (($57)>>>0);
      var $58 = $cmp74;__label__ = 25; break;
    case 25: 
      var $58;
      if ($58) { __label__ = 15; break; } else { __label__ = 26; break; }
    case 26: 
      var $59=$strend;
      var $60=$scan;
      var $sub_ptr_lhs_cast=$59;
      var $sub_ptr_rhs_cast=$60;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      var $sub=((258-$sub_ptr_sub)|0);
      var $61=$s_addr;
      var $match_length76=(($61+96)|0);
      HEAP32[(($match_length76)>>2)]=$sub;
      var $62=$s_addr;
      var $match_length77=(($62+96)|0);
      var $63=HEAPU32[(($match_length77)>>2)];
      var $64=$s_addr;
      var $lookahead78=(($64+116)|0);
      var $65=HEAPU32[(($lookahead78)>>2)];
      var $cmp79=(($63)>>>0) > (($65)>>>0);
      if ($cmp79) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $66=$s_addr;
      var $lookahead82=(($66+116)|0);
      var $67=HEAP32[(($lookahead82)>>2)];
      var $68=$s_addr;
      var $match_length83=(($68+96)|0);
      HEAP32[(($match_length83)>>2)]=$67;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $69=$s_addr;
      var $match_length87=(($69+96)|0);
      var $70=HEAPU32[(($match_length87)>>2)];
      var $cmp88=(($70)>>>0) >= 3;
      if ($cmp88) { __label__ = 31; break; } else { __label__ = 35; break; }
    case 31: 
      var $71=$s_addr;
      var $match_length91=(($71+96)|0);
      var $72=HEAP32[(($match_length91)>>2)];
      var $sub92=(($72-3)|0);
      var $conv93=(($sub92) & 255);
      $len=$conv93;
      $dist=1;
      var $73=$dist;
      var $74=$s_addr;
      var $last_lit=(($74+5792)|0);
      var $75=HEAP32[(($last_lit)>>2)];
      var $76=$s_addr;
      var $d_buf=(($76+5796)|0);
      var $77=HEAP32[(($d_buf)>>2)];
      var $arrayidx=(($77+($75<<1))|0);
      HEAP16[(($arrayidx)>>1)]=$73;
      var $78=$len;
      var $79=$s_addr;
      var $last_lit94=(($79+5792)|0);
      var $80=HEAP32[(($last_lit94)>>2)];
      var $inc=(($80+1)|0);
      HEAP32[(($last_lit94)>>2)]=$inc;
      var $81=$s_addr;
      var $l_buf=(($81+5784)|0);
      var $82=HEAP32[(($l_buf)>>2)];
      var $arrayidx95=(($82+$80)|0);
      HEAP8[($arrayidx95)]=$78;
      var $83=$dist;
      var $dec=(($83-1)&65535);
      $dist=$dec;
      var $84=$len;
      var $idxprom=(($84)&255);
      var $arrayidx96=(((STRING_TABLE.__length_code)+$idxprom)|0);
      var $85=HEAPU8[($arrayidx96)];
      var $conv97=(($85)&255);
      var $add=(($conv97+256)|0);
      var $add98=(($add+1)|0);
      var $86=$s_addr;
      var $dyn_ltree=(($86+148)|0);
      var $arrayidx99=(($dyn_ltree+($add98<<2))|0);
      var $fc=(($arrayidx99)|0);
      var $freq=$fc;
      var $87=HEAP16[(($freq)>>1)];
      var $inc100=(($87+1)&65535);
      HEAP16[(($freq)>>1)]=$inc100;
      var $88=$dist;
      var $conv101=(($88)&65535);
      var $cmp102=(($conv101)|0) < 256;
      if ($cmp102) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $89=$dist;
      var $idxprom104=(($89)&65535);
      var $arrayidx105=(((STRING_TABLE.__dist_code)+$idxprom104)|0);
      var $90=HEAPU8[($arrayidx105)];
      var $conv106=(($90)&255);
      var $cond = $conv106;__label__ = 34; break;
    case 33: 
      var $91=$dist;
      var $conv107=(($91)&65535);
      var $shr=$conv107 >> 7;
      var $add108=(($shr+256)|0);
      var $arrayidx109=(((STRING_TABLE.__dist_code)+$add108)|0);
      var $92=HEAPU8[($arrayidx109)];
      var $conv110=(($92)&255);
      var $cond = $conv110;__label__ = 34; break;
    case 34: 
      var $cond;
      var $93=$s_addr;
      var $dyn_dtree=(($93+2440)|0);
      var $arrayidx111=(($dyn_dtree+($cond<<2))|0);
      var $fc112=(($arrayidx111)|0);
      var $freq113=$fc112;
      var $94=HEAP16[(($freq113)>>1)];
      var $inc114=(($94+1)&65535);
      HEAP16[(($freq113)>>1)]=$inc114;
      var $95=$s_addr;
      var $last_lit115=(($95+5792)|0);
      var $96=HEAP32[(($last_lit115)>>2)];
      var $97=$s_addr;
      var $lit_bufsize=(($97+5788)|0);
      var $98=HEAP32[(($lit_bufsize)>>2)];
      var $sub116=(($98-1)|0);
      var $cmp117=(($96)|0)==(($sub116)|0);
      var $conv118=(($cmp117)&1);
      $bflush=$conv118;
      var $99=$s_addr;
      var $match_length119=(($99+96)|0);
      var $100=HEAP32[(($match_length119)>>2)];
      var $101=$s_addr;
      var $lookahead120=(($101+116)|0);
      var $102=HEAP32[(($lookahead120)>>2)];
      var $sub121=(($102-$100)|0);
      HEAP32[(($lookahead120)>>2)]=$sub121;
      var $103=$s_addr;
      var $match_length122=(($103+96)|0);
      var $104=HEAP32[(($match_length122)>>2)];
      var $105=$s_addr;
      var $strstart123=(($105+108)|0);
      var $106=HEAP32[(($strstart123)>>2)];
      var $add124=(($106+$104)|0);
      HEAP32[(($strstart123)>>2)]=$add124;
      var $107=$s_addr;
      var $match_length125=(($107+96)|0);
      HEAP32[(($match_length125)>>2)]=0;
      __label__ = 36; break;
    case 35: 
      var $108=$s_addr;
      var $strstart126=(($108+108)|0);
      var $109=HEAP32[(($strstart126)>>2)];
      var $110=$s_addr;
      var $window127=(($110+56)|0);
      var $111=HEAP32[(($window127)>>2)];
      var $arrayidx128=(($111+$109)|0);
      var $112=HEAP8[($arrayidx128)];
      $cc=$112;
      var $113=$s_addr;
      var $last_lit129=(($113+5792)|0);
      var $114=HEAP32[(($last_lit129)>>2)];
      var $115=$s_addr;
      var $d_buf130=(($115+5796)|0);
      var $116=HEAP32[(($d_buf130)>>2)];
      var $arrayidx131=(($116+($114<<1))|0);
      HEAP16[(($arrayidx131)>>1)]=0;
      var $117=$cc;
      var $118=$s_addr;
      var $last_lit132=(($118+5792)|0);
      var $119=HEAP32[(($last_lit132)>>2)];
      var $inc133=(($119+1)|0);
      HEAP32[(($last_lit132)>>2)]=$inc133;
      var $120=$s_addr;
      var $l_buf134=(($120+5784)|0);
      var $121=HEAP32[(($l_buf134)>>2)];
      var $arrayidx135=(($121+$119)|0);
      HEAP8[($arrayidx135)]=$117;
      var $122=$cc;
      var $idxprom136=(($122)&255);
      var $123=$s_addr;
      var $dyn_ltree137=(($123+148)|0);
      var $arrayidx138=(($dyn_ltree137+($idxprom136<<2))|0);
      var $fc139=(($arrayidx138)|0);
      var $freq140=$fc139;
      var $124=HEAP16[(($freq140)>>1)];
      var $inc141=(($124+1)&65535);
      HEAP16[(($freq140)>>1)]=$inc141;
      var $125=$s_addr;
      var $last_lit142=(($125+5792)|0);
      var $126=HEAP32[(($last_lit142)>>2)];
      var $127=$s_addr;
      var $lit_bufsize143=(($127+5788)|0);
      var $128=HEAP32[(($lit_bufsize143)>>2)];
      var $sub144=(($128-1)|0);
      var $cmp145=(($126)|0)==(($sub144)|0);
      var $conv146=(($cmp145)&1);
      $bflush=$conv146;
      var $129=$s_addr;
      var $lookahead147=(($129+116)|0);
      var $130=HEAP32[(($lookahead147)>>2)];
      var $dec148=(($130-1)|0);
      HEAP32[(($lookahead147)>>2)]=$dec148;
      var $131=$s_addr;
      var $strstart149=(($131+108)|0);
      var $132=HEAP32[(($strstart149)>>2)];
      var $inc150=(($132+1)|0);
      HEAP32[(($strstart149)>>2)]=$inc150;
      __label__ = 36; break;
    case 36: 
      var $133=$bflush;
      var $tobool=(($133)|0)!=0;
      if ($tobool) { __label__ = 37; break; } else { __label__ = 43; break; }
    case 37: 
      var $134=$s_addr;
      var $135=$s_addr;
      var $block_start=(($135+92)|0);
      var $136=HEAP32[(($block_start)>>2)];
      var $cmp153=(($136)|0) >= 0;
      if ($cmp153) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $137=$s_addr;
      var $block_start156=(($137+92)|0);
      var $138=HEAP32[(($block_start156)>>2)];
      var $139=$s_addr;
      var $window157=(($139+56)|0);
      var $140=HEAP32[(($window157)>>2)];
      var $arrayidx158=(($140+$138)|0);
      var $cond161 = $arrayidx158;__label__ = 40; break;
    case 39: 
      var $cond161 = 0;__label__ = 40; break;
    case 40: 
      var $cond161;
      var $141=$s_addr;
      var $strstart162=(($141+108)|0);
      var $142=HEAP32[(($strstart162)>>2)];
      var $143=$s_addr;
      var $block_start163=(($143+92)|0);
      var $144=HEAP32[(($block_start163)>>2)];
      var $sub164=(($142-$144)|0);
      __tr_flush_block($134, $cond161, $sub164, 0);
      var $145=$s_addr;
      var $strstart165=(($145+108)|0);
      var $146=HEAP32[(($strstart165)>>2)];
      var $147=$s_addr;
      var $block_start166=(($147+92)|0);
      HEAP32[(($block_start166)>>2)]=$146;
      var $148=$s_addr;
      var $strm=(($148)|0);
      var $149=HEAP32[(($strm)>>2)];
      _flush_pending($149);
      var $150=$s_addr;
      var $strm167=(($150)|0);
      var $151=HEAP32[(($strm167)>>2)];
      var $avail_out=(($151+16)|0);
      var $152=HEAP32[(($avail_out)>>2)];
      var $cmp168=(($152)|0)==0;
      if ($cmp168) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      $retval=0;
      __label__ = 59; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 2; break;
    case 44: 
      var $153=$s_addr;
      var $insert=(($153+5812)|0);
      HEAP32[(($insert)>>2)]=0;
      var $154=$flush_addr;
      var $cmp173=(($154)|0)==4;
      if ($cmp173) { __label__ = 45; break; } else { __label__ = 51; break; }
    case 45: 
      var $155=$s_addr;
      var $156=$s_addr;
      var $block_start176=(($156+92)|0);
      var $157=HEAP32[(($block_start176)>>2)];
      var $cmp177=(($157)|0) >= 0;
      if ($cmp177) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $158=$s_addr;
      var $block_start180=(($158+92)|0);
      var $159=HEAP32[(($block_start180)>>2)];
      var $160=$s_addr;
      var $window181=(($160+56)|0);
      var $161=HEAP32[(($window181)>>2)];
      var $arrayidx182=(($161+$159)|0);
      var $cond185 = $arrayidx182;__label__ = 48; break;
    case 47: 
      var $cond185 = 0;__label__ = 48; break;
    case 48: 
      var $cond185;
      var $162=$s_addr;
      var $strstart186=(($162+108)|0);
      var $163=HEAP32[(($strstart186)>>2)];
      var $164=$s_addr;
      var $block_start187=(($164+92)|0);
      var $165=HEAP32[(($block_start187)>>2)];
      var $sub188=(($163-$165)|0);
      __tr_flush_block($155, $cond185, $sub188, 1);
      var $166=$s_addr;
      var $strstart189=(($166+108)|0);
      var $167=HEAP32[(($strstart189)>>2)];
      var $168=$s_addr;
      var $block_start190=(($168+92)|0);
      HEAP32[(($block_start190)>>2)]=$167;
      var $169=$s_addr;
      var $strm191=(($169)|0);
      var $170=HEAP32[(($strm191)>>2)];
      _flush_pending($170);
      var $171=$s_addr;
      var $strm192=(($171)|0);
      var $172=HEAP32[(($strm192)>>2)];
      var $avail_out193=(($172+16)|0);
      var $173=HEAP32[(($avail_out193)>>2)];
      var $cmp194=(($173)|0)==0;
      if ($cmp194) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      $retval=2;
      __label__ = 59; break;
    case 50: 
      $retval=3;
      __label__ = 59; break;
    case 51: 
      var $174=$s_addr;
      var $last_lit199=(($174+5792)|0);
      var $175=HEAP32[(($last_lit199)>>2)];
      var $tobool200=(($175)|0)!=0;
      if ($tobool200) { __label__ = 52; break; } else { __label__ = 58; break; }
    case 52: 
      var $176=$s_addr;
      var $177=$s_addr;
      var $block_start202=(($177+92)|0);
      var $178=HEAP32[(($block_start202)>>2)];
      var $cmp203=(($178)|0) >= 0;
      if ($cmp203) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $179=$s_addr;
      var $block_start206=(($179+92)|0);
      var $180=HEAP32[(($block_start206)>>2)];
      var $181=$s_addr;
      var $window207=(($181+56)|0);
      var $182=HEAP32[(($window207)>>2)];
      var $arrayidx208=(($182+$180)|0);
      var $cond211 = $arrayidx208;__label__ = 55; break;
    case 54: 
      var $cond211 = 0;__label__ = 55; break;
    case 55: 
      var $cond211;
      var $183=$s_addr;
      var $strstart212=(($183+108)|0);
      var $184=HEAP32[(($strstart212)>>2)];
      var $185=$s_addr;
      var $block_start213=(($185+92)|0);
      var $186=HEAP32[(($block_start213)>>2)];
      var $sub214=(($184-$186)|0);
      __tr_flush_block($176, $cond211, $sub214, 0);
      var $187=$s_addr;
      var $strstart215=(($187+108)|0);
      var $188=HEAP32[(($strstart215)>>2)];
      var $189=$s_addr;
      var $block_start216=(($189+92)|0);
      HEAP32[(($block_start216)>>2)]=$188;
      var $190=$s_addr;
      var $strm217=(($190)|0);
      var $191=HEAP32[(($strm217)>>2)];
      _flush_pending($191);
      var $192=$s_addr;
      var $strm218=(($192)|0);
      var $193=HEAP32[(($strm218)>>2)];
      var $avail_out219=(($193+16)|0);
      var $194=HEAP32[(($avail_out219)>>2)];
      var $cmp220=(($194)|0)==0;
      if ($cmp220) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      $retval=0;
      __label__ = 59; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      $retval=1;
      __label__ = 59; break;
    case 59: 
      var $195=$retval;
      ;
      return $195;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflate_rle["X"]=1;

function _read_buf($strm, $buf, $size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $buf_addr;
      var $size_addr;
      var $len;
      $strm_addr=$strm;
      $buf_addr=$buf;
      $size_addr=$size;
      var $0=$strm_addr;
      var $avail_in=(($0+4)|0);
      var $1=HEAP32[(($avail_in)>>2)];
      $len=$1;
      var $2=$len;
      var $3=$size_addr;
      var $cmp=(($2)>>>0) > (($3)>>>0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $4=$size_addr;
      $len=$4;
      __label__ = 3; break;
    case 3: 
      var $5=$len;
      var $cmp1=(($5)|0)==0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=0;
      __label__ = 11; break;
    case 5: 
      var $6=$len;
      var $7=$strm_addr;
      var $avail_in4=(($7+4)|0);
      var $8=HEAP32[(($avail_in4)>>2)];
      var $sub=(($8-$6)|0);
      HEAP32[(($avail_in4)>>2)]=$sub;
      var $9=$buf_addr;
      var $10=$strm_addr;
      var $next_in=(($10)|0);
      var $11=HEAP32[(($next_in)>>2)];
      var $12=$len;
      _zmemcpy($9, $11, $12);
      var $13=$strm_addr;
      var $state=(($13+28)|0);
      var $14=HEAP32[(($state)>>2)];
      var $wrap=(($14+24)|0);
      var $15=HEAP32[(($wrap)>>2)];
      var $cmp5=(($15)|0)==1;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $16=$strm_addr;
      var $adler=(($16+48)|0);
      var $17=HEAP32[(($adler)>>2)];
      var $18=$buf_addr;
      var $19=$len;
      var $call=_adler32($17, $18, $19);
      var $20=$strm_addr;
      var $adler7=(($20+48)|0);
      HEAP32[(($adler7)>>2)]=$call;
      __label__ = 10; break;
    case 7: 
      var $21=$strm_addr;
      var $state8=(($21+28)|0);
      var $22=HEAP32[(($state8)>>2)];
      var $wrap9=(($22+24)|0);
      var $23=HEAP32[(($wrap9)>>2)];
      var $cmp10=(($23)|0)==2;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $24=$strm_addr;
      var $adler12=(($24+48)|0);
      var $25=HEAP32[(($adler12)>>2)];
      var $26=$buf_addr;
      var $27=$len;
      var $call13=_crc32($25, $26, $27);
      var $28=$strm_addr;
      var $adler14=(($28+48)|0);
      HEAP32[(($adler14)>>2)]=$call13;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $29=$len;
      var $30=$strm_addr;
      var $next_in17=(($30)|0);
      var $31=HEAP32[(($next_in17)>>2)];
      var $add_ptr=(($31+$29)|0);
      HEAP32[(($next_in17)>>2)]=$add_ptr;
      var $32=$len;
      var $33=$strm_addr;
      var $total_in=(($33+8)|0);
      var $34=HEAP32[(($total_in)>>2)];
      var $add=(($34+$32)|0);
      HEAP32[(($total_in)>>2)]=$add;
      var $35=$len;
      $retval=$35;
      __label__ = 11; break;
    case 11: 
      var $36=$retval;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}
_read_buf["X"]=1;

function _deflate_stored($s, $flush) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $s_addr;
      var $flush_addr;
      var $max_block_size;
      var $max_start;
      $s_addr=$s;
      $flush_addr=$flush;
      $max_block_size=65535;
      var $0=$max_block_size;
      var $1=$s_addr;
      var $pending_buf_size=(($1+12)|0);
      var $2=HEAP32[(($pending_buf_size)>>2)];
      var $sub=(($2-5)|0);
      var $cmp=(($0)>>>0) > (($sub)>>>0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $3=$s_addr;
      var $pending_buf_size1=(($3+12)|0);
      var $4=HEAP32[(($pending_buf_size1)>>2)];
      var $sub2=(($4-5)|0);
      $max_block_size=$sub2;
      __label__ = 3; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $5=$s_addr;
      var $lookahead=(($5+116)|0);
      var $6=HEAPU32[(($lookahead)>>2)];
      var $cmp3=(($6)>>>0) <= 1;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      var $7=$s_addr;
      _fill_window($7);
      var $8=$s_addr;
      var $lookahead5=(($8+116)|0);
      var $9=HEAP32[(($lookahead5)>>2)];
      var $cmp6=(($9)|0)==0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $10=$flush_addr;
      var $cmp7=(($10)|0)==0;
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $retval=0;
      __label__ = 42; break;
    case 8: 
      var $11=$s_addr;
      var $lookahead10=(($11+116)|0);
      var $12=HEAP32[(($lookahead10)>>2)];
      var $cmp11=(($12)|0)==0;
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 27; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $13=$s_addr;
      var $lookahead15=(($13+116)|0);
      var $14=HEAP32[(($lookahead15)>>2)];
      var $15=$s_addr;
      var $strstart=(($15+108)|0);
      var $16=HEAP32[(($strstart)>>2)];
      var $add=(($16+$14)|0);
      HEAP32[(($strstart)>>2)]=$add;
      var $17=$s_addr;
      var $lookahead16=(($17+116)|0);
      HEAP32[(($lookahead16)>>2)]=0;
      var $18=$s_addr;
      var $block_start=(($18+92)|0);
      var $19=HEAP32[(($block_start)>>2)];
      var $20=$max_block_size;
      var $add17=(($19+$20)|0);
      $max_start=$add17;
      var $21=$s_addr;
      var $strstart18=(($21+108)|0);
      var $22=HEAP32[(($strstart18)>>2)];
      var $cmp19=(($22)|0)==0;
      if ($cmp19) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $23=$s_addr;
      var $strstart20=(($23+108)|0);
      var $24=HEAPU32[(($strstart20)>>2)];
      var $25=$max_start;
      var $cmp21=(($24)>>>0) >= (($25)>>>0);
      if ($cmp21) { __label__ = 13; break; } else { __label__ = 19; break; }
    case 13: 
      var $26=$s_addr;
      var $strstart23=(($26+108)|0);
      var $27=HEAP32[(($strstart23)>>2)];
      var $28=$max_start;
      var $sub24=(($27-$28)|0);
      var $29=$s_addr;
      var $lookahead25=(($29+116)|0);
      HEAP32[(($lookahead25)>>2)]=$sub24;
      var $30=$max_start;
      var $31=$s_addr;
      var $strstart26=(($31+108)|0);
      HEAP32[(($strstart26)>>2)]=$30;
      var $32=$s_addr;
      var $33=$s_addr;
      var $block_start27=(($33+92)|0);
      var $34=HEAP32[(($block_start27)>>2)];
      var $cmp28=(($34)|0) >= 0;
      if ($cmp28) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $35=$s_addr;
      var $block_start29=(($35+92)|0);
      var $36=HEAP32[(($block_start29)>>2)];
      var $37=$s_addr;
      var $window=(($37+56)|0);
      var $38=HEAP32[(($window)>>2)];
      var $arrayidx=(($38+$36)|0);
      var $cond = $arrayidx;__label__ = 16; break;
    case 15: 
      var $cond = 0;__label__ = 16; break;
    case 16: 
      var $cond;
      var $39=$s_addr;
      var $strstart30=(($39+108)|0);
      var $40=HEAP32[(($strstart30)>>2)];
      var $41=$s_addr;
      var $block_start31=(($41+92)|0);
      var $42=HEAP32[(($block_start31)>>2)];
      var $sub32=(($40-$42)|0);
      __tr_flush_block($32, $cond, $sub32, 0);
      var $43=$s_addr;
      var $strstart33=(($43+108)|0);
      var $44=HEAP32[(($strstart33)>>2)];
      var $45=$s_addr;
      var $block_start34=(($45+92)|0);
      HEAP32[(($block_start34)>>2)]=$44;
      var $46=$s_addr;
      var $strm=(($46)|0);
      var $47=HEAP32[(($strm)>>2)];
      _flush_pending($47);
      var $48=$s_addr;
      var $strm35=(($48)|0);
      var $49=HEAP32[(($strm35)>>2)];
      var $avail_out=(($49+16)|0);
      var $50=HEAP32[(($avail_out)>>2)];
      var $cmp36=(($50)|0)==0;
      if ($cmp36) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      $retval=0;
      __label__ = 42; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $51=$s_addr;
      var $strstart40=(($51+108)|0);
      var $52=HEAP32[(($strstart40)>>2)];
      var $53=$s_addr;
      var $block_start41=(($53+92)|0);
      var $54=HEAP32[(($block_start41)>>2)];
      var $sub42=(($52-$54)|0);
      var $55=$s_addr;
      var $w_size=(($55+44)|0);
      var $56=HEAP32[(($w_size)>>2)];
      var $sub43=(($56-262)|0);
      var $cmp44=(($sub42)>>>0) >= (($sub43)>>>0);
      if ($cmp44) { __label__ = 20; break; } else { __label__ = 26; break; }
    case 20: 
      var $57=$s_addr;
      var $58=$s_addr;
      var $block_start46=(($58+92)|0);
      var $59=HEAP32[(($block_start46)>>2)];
      var $cmp47=(($59)|0) >= 0;
      if ($cmp47) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $60=$s_addr;
      var $block_start49=(($60+92)|0);
      var $61=HEAP32[(($block_start49)>>2)];
      var $62=$s_addr;
      var $window50=(($62+56)|0);
      var $63=HEAP32[(($window50)>>2)];
      var $arrayidx51=(($63+$61)|0);
      var $cond54 = $arrayidx51;__label__ = 23; break;
    case 22: 
      var $cond54 = 0;__label__ = 23; break;
    case 23: 
      var $cond54;
      var $64=$s_addr;
      var $strstart55=(($64+108)|0);
      var $65=HEAP32[(($strstart55)>>2)];
      var $66=$s_addr;
      var $block_start56=(($66+92)|0);
      var $67=HEAP32[(($block_start56)>>2)];
      var $sub57=(($65-$67)|0);
      __tr_flush_block($57, $cond54, $sub57, 0);
      var $68=$s_addr;
      var $strstart58=(($68+108)|0);
      var $69=HEAP32[(($strstart58)>>2)];
      var $70=$s_addr;
      var $block_start59=(($70+92)|0);
      HEAP32[(($block_start59)>>2)]=$69;
      var $71=$s_addr;
      var $strm60=(($71)|0);
      var $72=HEAP32[(($strm60)>>2)];
      _flush_pending($72);
      var $73=$s_addr;
      var $strm61=(($73)|0);
      var $74=HEAP32[(($strm61)>>2)];
      var $avail_out62=(($74+16)|0);
      var $75=HEAP32[(($avail_out62)>>2)];
      var $cmp63=(($75)|0)==0;
      if ($cmp63) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      $retval=0;
      __label__ = 42; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 4; break;
    case 27: 
      var $76=$s_addr;
      var $insert=(($76+5812)|0);
      HEAP32[(($insert)>>2)]=0;
      var $77=$flush_addr;
      var $cmp67=(($77)|0)==4;
      if ($cmp67) { __label__ = 28; break; } else { __label__ = 34; break; }
    case 28: 
      var $78=$s_addr;
      var $79=$s_addr;
      var $block_start69=(($79+92)|0);
      var $80=HEAP32[(($block_start69)>>2)];
      var $cmp70=(($80)|0) >= 0;
      if ($cmp70) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $81=$s_addr;
      var $block_start72=(($81+92)|0);
      var $82=HEAP32[(($block_start72)>>2)];
      var $83=$s_addr;
      var $window73=(($83+56)|0);
      var $84=HEAP32[(($window73)>>2)];
      var $arrayidx74=(($84+$82)|0);
      var $cond77 = $arrayidx74;__label__ = 31; break;
    case 30: 
      var $cond77 = 0;__label__ = 31; break;
    case 31: 
      var $cond77;
      var $85=$s_addr;
      var $strstart78=(($85+108)|0);
      var $86=HEAP32[(($strstart78)>>2)];
      var $87=$s_addr;
      var $block_start79=(($87+92)|0);
      var $88=HEAP32[(($block_start79)>>2)];
      var $sub80=(($86-$88)|0);
      __tr_flush_block($78, $cond77, $sub80, 1);
      var $89=$s_addr;
      var $strstart81=(($89+108)|0);
      var $90=HEAP32[(($strstart81)>>2)];
      var $91=$s_addr;
      var $block_start82=(($91+92)|0);
      HEAP32[(($block_start82)>>2)]=$90;
      var $92=$s_addr;
      var $strm83=(($92)|0);
      var $93=HEAP32[(($strm83)>>2)];
      _flush_pending($93);
      var $94=$s_addr;
      var $strm84=(($94)|0);
      var $95=HEAP32[(($strm84)>>2)];
      var $avail_out85=(($95+16)|0);
      var $96=HEAP32[(($avail_out85)>>2)];
      var $cmp86=(($96)|0)==0;
      if ($cmp86) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $retval=2;
      __label__ = 42; break;
    case 33: 
      $retval=3;
      __label__ = 42; break;
    case 34: 
      var $97=$s_addr;
      var $strstart90=(($97+108)|0);
      var $98=HEAP32[(($strstart90)>>2)];
      var $99=$s_addr;
      var $block_start91=(($99+92)|0);
      var $100=HEAP32[(($block_start91)>>2)];
      var $cmp92=(($98)|0) > (($100)|0);
      if ($cmp92) { __label__ = 35; break; } else { __label__ = 41; break; }
    case 35: 
      var $101=$s_addr;
      var $102=$s_addr;
      var $block_start94=(($102+92)|0);
      var $103=HEAP32[(($block_start94)>>2)];
      var $cmp95=(($103)|0) >= 0;
      if ($cmp95) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $104=$s_addr;
      var $block_start97=(($104+92)|0);
      var $105=HEAP32[(($block_start97)>>2)];
      var $106=$s_addr;
      var $window98=(($106+56)|0);
      var $107=HEAP32[(($window98)>>2)];
      var $arrayidx99=(($107+$105)|0);
      var $cond102 = $arrayidx99;__label__ = 38; break;
    case 37: 
      var $cond102 = 0;__label__ = 38; break;
    case 38: 
      var $cond102;
      var $108=$s_addr;
      var $strstart103=(($108+108)|0);
      var $109=HEAP32[(($strstart103)>>2)];
      var $110=$s_addr;
      var $block_start104=(($110+92)|0);
      var $111=HEAP32[(($block_start104)>>2)];
      var $sub105=(($109-$111)|0);
      __tr_flush_block($101, $cond102, $sub105, 0);
      var $112=$s_addr;
      var $strstart106=(($112+108)|0);
      var $113=HEAP32[(($strstart106)>>2)];
      var $114=$s_addr;
      var $block_start107=(($114+92)|0);
      HEAP32[(($block_start107)>>2)]=$113;
      var $115=$s_addr;
      var $strm108=(($115)|0);
      var $116=HEAP32[(($strm108)>>2)];
      _flush_pending($116);
      var $117=$s_addr;
      var $strm109=(($117)|0);
      var $118=HEAP32[(($strm109)>>2)];
      var $avail_out110=(($118+16)|0);
      var $119=HEAP32[(($avail_out110)>>2)];
      var $cmp111=(($119)|0)==0;
      if ($cmp111) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      $retval=0;
      __label__ = 42; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      $retval=1;
      __label__ = 42; break;
    case 42: 
      var $120=$retval;
      ;
      return $120;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflate_stored["X"]=1;

function _deflate_fast($s, $flush) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $s_addr;
      var $flush_addr;
      var $hash_head;
      var $bflush;
      var $len;
      var $dist;
      var $cc;
      $s_addr=$s;
      $flush_addr=$flush;
      __label__ = 2; break;
    case 2: 
      var $0=$s_addr;
      var $lookahead=(($0+116)|0);
      var $1=HEAPU32[(($lookahead)>>2)];
      var $cmp=(($1)>>>0) < 262;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $2=$s_addr;
      _fill_window($2);
      var $3=$s_addr;
      var $lookahead1=(($3+116)|0);
      var $4=HEAPU32[(($lookahead1)>>2)];
      var $cmp2=(($4)>>>0) < 262;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $5=$flush_addr;
      var $cmp3=(($5)|0)==0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=0;
      __label__ = 53; break;
    case 6: 
      var $6=$s_addr;
      var $lookahead5=(($6+116)|0);
      var $7=HEAP32[(($lookahead5)>>2)];
      var $cmp6=(($7)|0)==0;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 35; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      $hash_head=0;
      var $8=$s_addr;
      var $lookahead10=(($8+116)|0);
      var $9=HEAPU32[(($lookahead10)>>2)];
      var $cmp11=(($9)>>>0) >= 3;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $10=$s_addr;
      var $ins_h=(($10+72)|0);
      var $11=HEAP32[(($ins_h)>>2)];
      var $12=$s_addr;
      var $hash_shift=(($12+88)|0);
      var $13=HEAP32[(($hash_shift)>>2)];
      var $shl=$11 << $13;
      var $14=$s_addr;
      var $strstart=(($14+108)|0);
      var $15=HEAP32[(($strstart)>>2)];
      var $add=(($15+2)|0);
      var $16=$s_addr;
      var $window=(($16+56)|0);
      var $17=HEAP32[(($window)>>2)];
      var $arrayidx=(($17+$add)|0);
      var $18=HEAPU8[($arrayidx)];
      var $conv=(($18)&255);
      var $xor=$shl ^ $conv;
      var $19=$s_addr;
      var $hash_mask=(($19+84)|0);
      var $20=HEAP32[(($hash_mask)>>2)];
      var $and=$xor & $20;
      var $21=$s_addr;
      var $ins_h13=(($21+72)|0);
      HEAP32[(($ins_h13)>>2)]=$and;
      var $22=$s_addr;
      var $ins_h14=(($22+72)|0);
      var $23=HEAP32[(($ins_h14)>>2)];
      var $24=$s_addr;
      var $head=(($24+68)|0);
      var $25=HEAP32[(($head)>>2)];
      var $arrayidx15=(($25+($23<<1))|0);
      var $26=HEAPU16[(($arrayidx15)>>1)];
      var $27=$s_addr;
      var $strstart16=(($27+108)|0);
      var $28=HEAP32[(($strstart16)>>2)];
      var $29=$s_addr;
      var $w_mask=(($29+52)|0);
      var $30=HEAP32[(($w_mask)>>2)];
      var $and17=$28 & $30;
      var $31=$s_addr;
      var $prev=(($31+64)|0);
      var $32=HEAP32[(($prev)>>2)];
      var $arrayidx18=(($32+($and17<<1))|0);
      HEAP16[(($arrayidx18)>>1)]=$26;
      var $conv19=(($26)&65535);
      $hash_head=$conv19;
      var $33=$s_addr;
      var $strstart20=(($33+108)|0);
      var $34=HEAP32[(($strstart20)>>2)];
      var $conv21=(($34) & 65535);
      var $35=$s_addr;
      var $ins_h22=(($35+72)|0);
      var $36=HEAP32[(($ins_h22)>>2)];
      var $37=$s_addr;
      var $head23=(($37+68)|0);
      var $38=HEAP32[(($head23)>>2)];
      var $arrayidx24=(($38+($36<<1))|0);
      HEAP16[(($arrayidx24)>>1)]=$conv21;
      __label__ = 11; break;
    case 11: 
      var $39=$hash_head;
      var $cmp26=(($39)|0)!=0;
      if ($cmp26) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $40=$s_addr;
      var $strstart29=(($40+108)|0);
      var $41=HEAP32[(($strstart29)>>2)];
      var $42=$hash_head;
      var $sub=(($41-$42)|0);
      var $43=$s_addr;
      var $w_size=(($43+44)|0);
      var $44=HEAP32[(($w_size)>>2)];
      var $sub30=(($44-262)|0);
      var $cmp31=(($sub)>>>0) <= (($sub30)>>>0);
      if ($cmp31) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $45=$s_addr;
      var $46=$hash_head;
      var $call=_longest_match($45, $46);
      var $47=$s_addr;
      var $match_length=(($47+96)|0);
      HEAP32[(($match_length)>>2)]=$call;
      __label__ = 14; break;
    case 14: 
      var $48=$s_addr;
      var $match_length35=(($48+96)|0);
      var $49=HEAPU32[(($match_length35)>>2)];
      var $cmp36=(($49)>>>0) >= 3;
      if ($cmp36) { __label__ = 15; break; } else { __label__ = 26; break; }
    case 15: 
      var $50=$s_addr;
      var $match_length39=(($50+96)|0);
      var $51=HEAP32[(($match_length39)>>2)];
      var $sub40=(($51-3)|0);
      var $conv41=(($sub40) & 255);
      $len=$conv41;
      var $52=$s_addr;
      var $strstart42=(($52+108)|0);
      var $53=HEAP32[(($strstart42)>>2)];
      var $54=$s_addr;
      var $match_start=(($54+112)|0);
      var $55=HEAP32[(($match_start)>>2)];
      var $sub43=(($53-$55)|0);
      var $conv44=(($sub43) & 65535);
      $dist=$conv44;
      var $56=$dist;
      var $57=$s_addr;
      var $last_lit=(($57+5792)|0);
      var $58=HEAP32[(($last_lit)>>2)];
      var $59=$s_addr;
      var $d_buf=(($59+5796)|0);
      var $60=HEAP32[(($d_buf)>>2)];
      var $arrayidx45=(($60+($58<<1))|0);
      HEAP16[(($arrayidx45)>>1)]=$56;
      var $61=$len;
      var $62=$s_addr;
      var $last_lit46=(($62+5792)|0);
      var $63=HEAP32[(($last_lit46)>>2)];
      var $inc=(($63+1)|0);
      HEAP32[(($last_lit46)>>2)]=$inc;
      var $64=$s_addr;
      var $l_buf=(($64+5784)|0);
      var $65=HEAP32[(($l_buf)>>2)];
      var $arrayidx47=(($65+$63)|0);
      HEAP8[($arrayidx47)]=$61;
      var $66=$dist;
      var $dec=(($66-1)&65535);
      $dist=$dec;
      var $67=$len;
      var $idxprom=(($67)&255);
      var $arrayidx48=(((STRING_TABLE.__length_code)+$idxprom)|0);
      var $68=HEAPU8[($arrayidx48)];
      var $conv49=(($68)&255);
      var $add50=(($conv49+256)|0);
      var $add51=(($add50+1)|0);
      var $69=$s_addr;
      var $dyn_ltree=(($69+148)|0);
      var $arrayidx52=(($dyn_ltree+($add51<<2))|0);
      var $fc=(($arrayidx52)|0);
      var $freq=$fc;
      var $70=HEAP16[(($freq)>>1)];
      var $inc53=(($70+1)&65535);
      HEAP16[(($freq)>>1)]=$inc53;
      var $71=$dist;
      var $conv54=(($71)&65535);
      var $cmp55=(($conv54)|0) < 256;
      if ($cmp55) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $72=$dist;
      var $idxprom57=(($72)&65535);
      var $arrayidx58=(((STRING_TABLE.__dist_code)+$idxprom57)|0);
      var $73=HEAPU8[($arrayidx58)];
      var $conv59=(($73)&255);
      var $cond = $conv59;__label__ = 18; break;
    case 17: 
      var $74=$dist;
      var $conv60=(($74)&65535);
      var $shr=$conv60 >> 7;
      var $add61=(($shr+256)|0);
      var $arrayidx62=(((STRING_TABLE.__dist_code)+$add61)|0);
      var $75=HEAPU8[($arrayidx62)];
      var $conv63=(($75)&255);
      var $cond = $conv63;__label__ = 18; break;
    case 18: 
      var $cond;
      var $76=$s_addr;
      var $dyn_dtree=(($76+2440)|0);
      var $arrayidx64=(($dyn_dtree+($cond<<2))|0);
      var $fc65=(($arrayidx64)|0);
      var $freq66=$fc65;
      var $77=HEAP16[(($freq66)>>1)];
      var $inc67=(($77+1)&65535);
      HEAP16[(($freq66)>>1)]=$inc67;
      var $78=$s_addr;
      var $last_lit68=(($78+5792)|0);
      var $79=HEAP32[(($last_lit68)>>2)];
      var $80=$s_addr;
      var $lit_bufsize=(($80+5788)|0);
      var $81=HEAP32[(($lit_bufsize)>>2)];
      var $sub69=(($81-1)|0);
      var $cmp70=(($79)|0)==(($sub69)|0);
      var $conv71=(($cmp70)&1);
      $bflush=$conv71;
      var $82=$s_addr;
      var $match_length72=(($82+96)|0);
      var $83=HEAP32[(($match_length72)>>2)];
      var $84=$s_addr;
      var $lookahead73=(($84+116)|0);
      var $85=HEAP32[(($lookahead73)>>2)];
      var $sub74=(($85-$83)|0);
      HEAP32[(($lookahead73)>>2)]=$sub74;
      var $86=$s_addr;
      var $match_length75=(($86+96)|0);
      var $87=HEAPU32[(($match_length75)>>2)];
      var $88=$s_addr;
      var $max_lazy_match=(($88+128)|0);
      var $89=HEAPU32[(($max_lazy_match)>>2)];
      var $cmp76=(($87)>>>0) <= (($89)>>>0);
      if ($cmp76) { __label__ = 19; break; } else { __label__ = 24; break; }
    case 19: 
      var $90=$s_addr;
      var $lookahead79=(($90+116)|0);
      var $91=HEAPU32[(($lookahead79)>>2)];
      var $cmp80=(($91)>>>0) >= 3;
      if ($cmp80) { __label__ = 20; break; } else { __label__ = 24; break; }
    case 20: 
      var $92=$s_addr;
      var $match_length83=(($92+96)|0);
      var $93=HEAP32[(($match_length83)>>2)];
      var $dec84=(($93-1)|0);
      HEAP32[(($match_length83)>>2)]=$dec84;
      __label__ = 21; break;
    case 21: 
      var $94=$s_addr;
      var $strstart85=(($94+108)|0);
      var $95=HEAP32[(($strstart85)>>2)];
      var $inc86=(($95+1)|0);
      HEAP32[(($strstart85)>>2)]=$inc86;
      var $96=$s_addr;
      var $ins_h87=(($96+72)|0);
      var $97=HEAP32[(($ins_h87)>>2)];
      var $98=$s_addr;
      var $hash_shift88=(($98+88)|0);
      var $99=HEAP32[(($hash_shift88)>>2)];
      var $shl89=$97 << $99;
      var $100=$s_addr;
      var $strstart90=(($100+108)|0);
      var $101=HEAP32[(($strstart90)>>2)];
      var $add91=(($101+2)|0);
      var $102=$s_addr;
      var $window92=(($102+56)|0);
      var $103=HEAP32[(($window92)>>2)];
      var $arrayidx93=(($103+$add91)|0);
      var $104=HEAPU8[($arrayidx93)];
      var $conv94=(($104)&255);
      var $xor95=$shl89 ^ $conv94;
      var $105=$s_addr;
      var $hash_mask96=(($105+84)|0);
      var $106=HEAP32[(($hash_mask96)>>2)];
      var $and97=$xor95 & $106;
      var $107=$s_addr;
      var $ins_h98=(($107+72)|0);
      HEAP32[(($ins_h98)>>2)]=$and97;
      var $108=$s_addr;
      var $ins_h99=(($108+72)|0);
      var $109=HEAP32[(($ins_h99)>>2)];
      var $110=$s_addr;
      var $head100=(($110+68)|0);
      var $111=HEAP32[(($head100)>>2)];
      var $arrayidx101=(($111+($109<<1))|0);
      var $112=HEAPU16[(($arrayidx101)>>1)];
      var $113=$s_addr;
      var $strstart102=(($113+108)|0);
      var $114=HEAP32[(($strstart102)>>2)];
      var $115=$s_addr;
      var $w_mask103=(($115+52)|0);
      var $116=HEAP32[(($w_mask103)>>2)];
      var $and104=$114 & $116;
      var $117=$s_addr;
      var $prev105=(($117+64)|0);
      var $118=HEAP32[(($prev105)>>2)];
      var $arrayidx106=(($118+($and104<<1))|0);
      HEAP16[(($arrayidx106)>>1)]=$112;
      var $conv107=(($112)&65535);
      $hash_head=$conv107;
      var $119=$s_addr;
      var $strstart108=(($119+108)|0);
      var $120=HEAP32[(($strstart108)>>2)];
      var $conv109=(($120) & 65535);
      var $121=$s_addr;
      var $ins_h110=(($121+72)|0);
      var $122=HEAP32[(($ins_h110)>>2)];
      var $123=$s_addr;
      var $head111=(($123+68)|0);
      var $124=HEAP32[(($head111)>>2)];
      var $arrayidx112=(($124+($122<<1))|0);
      HEAP16[(($arrayidx112)>>1)]=$conv109;
      __label__ = 22; break;
    case 22: 
      var $125=$s_addr;
      var $match_length113=(($125+96)|0);
      var $126=HEAP32[(($match_length113)>>2)];
      var $dec114=(($126-1)|0);
      HEAP32[(($match_length113)>>2)]=$dec114;
      var $cmp115=(($dec114)|0)!=0;
      if ($cmp115) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 23: 
      var $127=$s_addr;
      var $strstart117=(($127+108)|0);
      var $128=HEAP32[(($strstart117)>>2)];
      var $inc118=(($128+1)|0);
      HEAP32[(($strstart117)>>2)]=$inc118;
      __label__ = 25; break;
    case 24: 
      var $129=$s_addr;
      var $match_length119=(($129+96)|0);
      var $130=HEAP32[(($match_length119)>>2)];
      var $131=$s_addr;
      var $strstart120=(($131+108)|0);
      var $132=HEAP32[(($strstart120)>>2)];
      var $add121=(($132+$130)|0);
      HEAP32[(($strstart120)>>2)]=$add121;
      var $133=$s_addr;
      var $match_length122=(($133+96)|0);
      HEAP32[(($match_length122)>>2)]=0;
      var $134=$s_addr;
      var $strstart123=(($134+108)|0);
      var $135=HEAP32[(($strstart123)>>2)];
      var $136=$s_addr;
      var $window124=(($136+56)|0);
      var $137=HEAP32[(($window124)>>2)];
      var $arrayidx125=(($137+$135)|0);
      var $138=HEAPU8[($arrayidx125)];
      var $conv126=(($138)&255);
      var $139=$s_addr;
      var $ins_h127=(($139+72)|0);
      HEAP32[(($ins_h127)>>2)]=$conv126;
      var $140=$s_addr;
      var $ins_h128=(($140+72)|0);
      var $141=HEAP32[(($ins_h128)>>2)];
      var $142=$s_addr;
      var $hash_shift129=(($142+88)|0);
      var $143=HEAP32[(($hash_shift129)>>2)];
      var $shl130=$141 << $143;
      var $144=$s_addr;
      var $strstart131=(($144+108)|0);
      var $145=HEAP32[(($strstart131)>>2)];
      var $add132=(($145+1)|0);
      var $146=$s_addr;
      var $window133=(($146+56)|0);
      var $147=HEAP32[(($window133)>>2)];
      var $arrayidx134=(($147+$add132)|0);
      var $148=HEAPU8[($arrayidx134)];
      var $conv135=(($148)&255);
      var $xor136=$shl130 ^ $conv135;
      var $149=$s_addr;
      var $hash_mask137=(($149+84)|0);
      var $150=HEAP32[(($hash_mask137)>>2)];
      var $and138=$xor136 & $150;
      var $151=$s_addr;
      var $ins_h139=(($151+72)|0);
      HEAP32[(($ins_h139)>>2)]=$and138;
      __label__ = 25; break;
    case 25: 
      __label__ = 27; break;
    case 26: 
      var $152=$s_addr;
      var $strstart142=(($152+108)|0);
      var $153=HEAP32[(($strstart142)>>2)];
      var $154=$s_addr;
      var $window143=(($154+56)|0);
      var $155=HEAP32[(($window143)>>2)];
      var $arrayidx144=(($155+$153)|0);
      var $156=HEAP8[($arrayidx144)];
      $cc=$156;
      var $157=$s_addr;
      var $last_lit145=(($157+5792)|0);
      var $158=HEAP32[(($last_lit145)>>2)];
      var $159=$s_addr;
      var $d_buf146=(($159+5796)|0);
      var $160=HEAP32[(($d_buf146)>>2)];
      var $arrayidx147=(($160+($158<<1))|0);
      HEAP16[(($arrayidx147)>>1)]=0;
      var $161=$cc;
      var $162=$s_addr;
      var $last_lit148=(($162+5792)|0);
      var $163=HEAP32[(($last_lit148)>>2)];
      var $inc149=(($163+1)|0);
      HEAP32[(($last_lit148)>>2)]=$inc149;
      var $164=$s_addr;
      var $l_buf150=(($164+5784)|0);
      var $165=HEAP32[(($l_buf150)>>2)];
      var $arrayidx151=(($165+$163)|0);
      HEAP8[($arrayidx151)]=$161;
      var $166=$cc;
      var $idxprom152=(($166)&255);
      var $167=$s_addr;
      var $dyn_ltree153=(($167+148)|0);
      var $arrayidx154=(($dyn_ltree153+($idxprom152<<2))|0);
      var $fc155=(($arrayidx154)|0);
      var $freq156=$fc155;
      var $168=HEAP16[(($freq156)>>1)];
      var $inc157=(($168+1)&65535);
      HEAP16[(($freq156)>>1)]=$inc157;
      var $169=$s_addr;
      var $last_lit158=(($169+5792)|0);
      var $170=HEAP32[(($last_lit158)>>2)];
      var $171=$s_addr;
      var $lit_bufsize159=(($171+5788)|0);
      var $172=HEAP32[(($lit_bufsize159)>>2)];
      var $sub160=(($172-1)|0);
      var $cmp161=(($170)|0)==(($sub160)|0);
      var $conv162=(($cmp161)&1);
      $bflush=$conv162;
      var $173=$s_addr;
      var $lookahead163=(($173+116)|0);
      var $174=HEAP32[(($lookahead163)>>2)];
      var $dec164=(($174-1)|0);
      HEAP32[(($lookahead163)>>2)]=$dec164;
      var $175=$s_addr;
      var $strstart165=(($175+108)|0);
      var $176=HEAP32[(($strstart165)>>2)];
      var $inc166=(($176+1)|0);
      HEAP32[(($strstart165)>>2)]=$inc166;
      __label__ = 27; break;
    case 27: 
      var $177=$bflush;
      var $tobool=(($177)|0)!=0;
      if ($tobool) { __label__ = 28; break; } else { __label__ = 34; break; }
    case 28: 
      var $178=$s_addr;
      var $179=$s_addr;
      var $block_start=(($179+92)|0);
      var $180=HEAP32[(($block_start)>>2)];
      var $cmp169=(($180)|0) >= 0;
      if ($cmp169) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $181=$s_addr;
      var $block_start172=(($181+92)|0);
      var $182=HEAP32[(($block_start172)>>2)];
      var $183=$s_addr;
      var $window173=(($183+56)|0);
      var $184=HEAP32[(($window173)>>2)];
      var $arrayidx174=(($184+$182)|0);
      var $cond177 = $arrayidx174;__label__ = 31; break;
    case 30: 
      var $cond177 = 0;__label__ = 31; break;
    case 31: 
      var $cond177;
      var $185=$s_addr;
      var $strstart178=(($185+108)|0);
      var $186=HEAP32[(($strstart178)>>2)];
      var $187=$s_addr;
      var $block_start179=(($187+92)|0);
      var $188=HEAP32[(($block_start179)>>2)];
      var $sub180=(($186-$188)|0);
      __tr_flush_block($178, $cond177, $sub180, 0);
      var $189=$s_addr;
      var $strstart181=(($189+108)|0);
      var $190=HEAP32[(($strstart181)>>2)];
      var $191=$s_addr;
      var $block_start182=(($191+92)|0);
      HEAP32[(($block_start182)>>2)]=$190;
      var $192=$s_addr;
      var $strm=(($192)|0);
      var $193=HEAP32[(($strm)>>2)];
      _flush_pending($193);
      var $194=$s_addr;
      var $strm183=(($194)|0);
      var $195=HEAP32[(($strm183)>>2)];
      var $avail_out=(($195+16)|0);
      var $196=HEAP32[(($avail_out)>>2)];
      var $cmp184=(($196)|0)==0;
      if ($cmp184) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $retval=0;
      __label__ = 53; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 2; break;
    case 35: 
      var $197=$s_addr;
      var $strstart189=(($197+108)|0);
      var $198=HEAPU32[(($strstart189)>>2)];
      var $cmp190=(($198)>>>0) < 2;
      if ($cmp190) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $199=$s_addr;
      var $strstart193=(($199+108)|0);
      var $200=HEAP32[(($strstart193)>>2)];
      var $cond196 = $200;__label__ = 38; break;
    case 37: 
      var $cond196 = 2;__label__ = 38; break;
    case 38: 
      var $cond196;
      var $201=$s_addr;
      var $insert=(($201+5812)|0);
      HEAP32[(($insert)>>2)]=$cond196;
      var $202=$flush_addr;
      var $cmp197=(($202)|0)==4;
      if ($cmp197) { __label__ = 39; break; } else { __label__ = 45; break; }
    case 39: 
      var $203=$s_addr;
      var $204=$s_addr;
      var $block_start200=(($204+92)|0);
      var $205=HEAP32[(($block_start200)>>2)];
      var $cmp201=(($205)|0) >= 0;
      if ($cmp201) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $206=$s_addr;
      var $block_start204=(($206+92)|0);
      var $207=HEAP32[(($block_start204)>>2)];
      var $208=$s_addr;
      var $window205=(($208+56)|0);
      var $209=HEAP32[(($window205)>>2)];
      var $arrayidx206=(($209+$207)|0);
      var $cond209 = $arrayidx206;__label__ = 42; break;
    case 41: 
      var $cond209 = 0;__label__ = 42; break;
    case 42: 
      var $cond209;
      var $210=$s_addr;
      var $strstart210=(($210+108)|0);
      var $211=HEAP32[(($strstart210)>>2)];
      var $212=$s_addr;
      var $block_start211=(($212+92)|0);
      var $213=HEAP32[(($block_start211)>>2)];
      var $sub212=(($211-$213)|0);
      __tr_flush_block($203, $cond209, $sub212, 1);
      var $214=$s_addr;
      var $strstart213=(($214+108)|0);
      var $215=HEAP32[(($strstart213)>>2)];
      var $216=$s_addr;
      var $block_start214=(($216+92)|0);
      HEAP32[(($block_start214)>>2)]=$215;
      var $217=$s_addr;
      var $strm215=(($217)|0);
      var $218=HEAP32[(($strm215)>>2)];
      _flush_pending($218);
      var $219=$s_addr;
      var $strm216=(($219)|0);
      var $220=HEAP32[(($strm216)>>2)];
      var $avail_out217=(($220+16)|0);
      var $221=HEAP32[(($avail_out217)>>2)];
      var $cmp218=(($221)|0)==0;
      if ($cmp218) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      $retval=2;
      __label__ = 53; break;
    case 44: 
      $retval=3;
      __label__ = 53; break;
    case 45: 
      var $222=$s_addr;
      var $last_lit223=(($222+5792)|0);
      var $223=HEAP32[(($last_lit223)>>2)];
      var $tobool224=(($223)|0)!=0;
      if ($tobool224) { __label__ = 46; break; } else { __label__ = 52; break; }
    case 46: 
      var $224=$s_addr;
      var $225=$s_addr;
      var $block_start226=(($225+92)|0);
      var $226=HEAP32[(($block_start226)>>2)];
      var $cmp227=(($226)|0) >= 0;
      if ($cmp227) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $227=$s_addr;
      var $block_start230=(($227+92)|0);
      var $228=HEAP32[(($block_start230)>>2)];
      var $229=$s_addr;
      var $window231=(($229+56)|0);
      var $230=HEAP32[(($window231)>>2)];
      var $arrayidx232=(($230+$228)|0);
      var $cond235 = $arrayidx232;__label__ = 49; break;
    case 48: 
      var $cond235 = 0;__label__ = 49; break;
    case 49: 
      var $cond235;
      var $231=$s_addr;
      var $strstart236=(($231+108)|0);
      var $232=HEAP32[(($strstart236)>>2)];
      var $233=$s_addr;
      var $block_start237=(($233+92)|0);
      var $234=HEAP32[(($block_start237)>>2)];
      var $sub238=(($232-$234)|0);
      __tr_flush_block($224, $cond235, $sub238, 0);
      var $235=$s_addr;
      var $strstart239=(($235+108)|0);
      var $236=HEAP32[(($strstart239)>>2)];
      var $237=$s_addr;
      var $block_start240=(($237+92)|0);
      HEAP32[(($block_start240)>>2)]=$236;
      var $238=$s_addr;
      var $strm241=(($238)|0);
      var $239=HEAP32[(($strm241)>>2)];
      _flush_pending($239);
      var $240=$s_addr;
      var $strm242=(($240)|0);
      var $241=HEAP32[(($strm242)>>2)];
      var $avail_out243=(($241+16)|0);
      var $242=HEAP32[(($avail_out243)>>2)];
      var $cmp244=(($242)|0)==0;
      if ($cmp244) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      $retval=0;
      __label__ = 53; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      $retval=1;
      __label__ = 53; break;
    case 53: 
      var $243=$retval;
      ;
      return $243;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflate_fast["X"]=1;

function _deflate_slow($s, $flush) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $s_addr;
      var $flush_addr;
      var $hash_head;
      var $bflush;
      var $max_insert;
      var $len;
      var $dist;
      var $cc;
      var $cc238;
      $s_addr=$s;
      $flush_addr=$flush;
      __label__ = 2; break;
    case 2: 
      var $0=$s_addr;
      var $lookahead=(($0+116)|0);
      var $1=HEAPU32[(($lookahead)>>2)];
      var $cmp=(($1)>>>0) < 262;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 9; break; }
    case 3: 
      var $2=$s_addr;
      _fill_window($2);
      var $3=$s_addr;
      var $lookahead1=(($3+116)|0);
      var $4=HEAPU32[(($lookahead1)>>2)];
      var $cmp2=(($4)>>>0) < 262;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $5=$flush_addr;
      var $cmp3=(($5)|0)==0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=0;
      __label__ = 70; break;
    case 6: 
      var $6=$s_addr;
      var $lookahead5=(($6+116)|0);
      var $7=HEAP32[(($lookahead5)>>2)];
      var $cmp6=(($7)|0)==0;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 50; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      $hash_head=0;
      var $8=$s_addr;
      var $lookahead10=(($8+116)|0);
      var $9=HEAPU32[(($lookahead10)>>2)];
      var $cmp11=(($9)>>>0) >= 3;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $10=$s_addr;
      var $ins_h=(($10+72)|0);
      var $11=HEAP32[(($ins_h)>>2)];
      var $12=$s_addr;
      var $hash_shift=(($12+88)|0);
      var $13=HEAP32[(($hash_shift)>>2)];
      var $shl=$11 << $13;
      var $14=$s_addr;
      var $strstart=(($14+108)|0);
      var $15=HEAP32[(($strstart)>>2)];
      var $add=(($15+2)|0);
      var $16=$s_addr;
      var $window=(($16+56)|0);
      var $17=HEAP32[(($window)>>2)];
      var $arrayidx=(($17+$add)|0);
      var $18=HEAPU8[($arrayidx)];
      var $conv=(($18)&255);
      var $xor=$shl ^ $conv;
      var $19=$s_addr;
      var $hash_mask=(($19+84)|0);
      var $20=HEAP32[(($hash_mask)>>2)];
      var $and=$xor & $20;
      var $21=$s_addr;
      var $ins_h13=(($21+72)|0);
      HEAP32[(($ins_h13)>>2)]=$and;
      var $22=$s_addr;
      var $ins_h14=(($22+72)|0);
      var $23=HEAP32[(($ins_h14)>>2)];
      var $24=$s_addr;
      var $head=(($24+68)|0);
      var $25=HEAP32[(($head)>>2)];
      var $arrayidx15=(($25+($23<<1))|0);
      var $26=HEAPU16[(($arrayidx15)>>1)];
      var $27=$s_addr;
      var $strstart16=(($27+108)|0);
      var $28=HEAP32[(($strstart16)>>2)];
      var $29=$s_addr;
      var $w_mask=(($29+52)|0);
      var $30=HEAP32[(($w_mask)>>2)];
      var $and17=$28 & $30;
      var $31=$s_addr;
      var $prev=(($31+64)|0);
      var $32=HEAP32[(($prev)>>2)];
      var $arrayidx18=(($32+($and17<<1))|0);
      HEAP16[(($arrayidx18)>>1)]=$26;
      var $conv19=(($26)&65535);
      $hash_head=$conv19;
      var $33=$s_addr;
      var $strstart20=(($33+108)|0);
      var $34=HEAP32[(($strstart20)>>2)];
      var $conv21=(($34) & 65535);
      var $35=$s_addr;
      var $ins_h22=(($35+72)|0);
      var $36=HEAP32[(($ins_h22)>>2)];
      var $37=$s_addr;
      var $head23=(($37+68)|0);
      var $38=HEAP32[(($head23)>>2)];
      var $arrayidx24=(($38+($36<<1))|0);
      HEAP16[(($arrayidx24)>>1)]=$conv21;
      __label__ = 11; break;
    case 11: 
      var $39=$s_addr;
      var $match_length=(($39+96)|0);
      var $40=HEAP32[(($match_length)>>2)];
      var $41=$s_addr;
      var $prev_length=(($41+120)|0);
      HEAP32[(($prev_length)>>2)]=$40;
      var $42=$s_addr;
      var $match_start=(($42+112)|0);
      var $43=HEAP32[(($match_start)>>2)];
      var $44=$s_addr;
      var $prev_match=(($44+100)|0);
      HEAP32[(($prev_match)>>2)]=$43;
      var $45=$s_addr;
      var $match_length26=(($45+96)|0);
      HEAP32[(($match_length26)>>2)]=2;
      var $46=$hash_head;
      var $cmp27=(($46)|0)!=0;
      if ($cmp27) { __label__ = 12; break; } else { __label__ = 20; break; }
    case 12: 
      var $47=$s_addr;
      var $prev_length30=(($47+120)|0);
      var $48=HEAPU32[(($prev_length30)>>2)];
      var $49=$s_addr;
      var $max_lazy_match=(($49+128)|0);
      var $50=HEAPU32[(($max_lazy_match)>>2)];
      var $cmp31=(($48)>>>0) < (($50)>>>0);
      if ($cmp31) { __label__ = 13; break; } else { __label__ = 20; break; }
    case 13: 
      var $51=$s_addr;
      var $strstart34=(($51+108)|0);
      var $52=HEAP32[(($strstart34)>>2)];
      var $53=$hash_head;
      var $sub=(($52-$53)|0);
      var $54=$s_addr;
      var $w_size=(($54+44)|0);
      var $55=HEAP32[(($w_size)>>2)];
      var $sub35=(($55-262)|0);
      var $cmp36=(($sub)>>>0) <= (($sub35)>>>0);
      if ($cmp36) { __label__ = 14; break; } else { __label__ = 20; break; }
    case 14: 
      var $56=$s_addr;
      var $57=$hash_head;
      var $call=_longest_match($56, $57);
      var $58=$s_addr;
      var $match_length39=(($58+96)|0);
      HEAP32[(($match_length39)>>2)]=$call;
      var $59=$s_addr;
      var $match_length40=(($59+96)|0);
      var $60=HEAPU32[(($match_length40)>>2)];
      var $cmp41=(($60)>>>0) <= 5;
      if ($cmp41) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $61=$s_addr;
      var $strategy=(($61+136)|0);
      var $62=HEAP32[(($strategy)>>2)];
      var $cmp44=(($62)|0)==1;
      if ($cmp44) { __label__ = 18; break; } else { __label__ = 16; break; }
    case 16: 
      var $63=$s_addr;
      var $match_length46=(($63+96)|0);
      var $64=HEAP32[(($match_length46)>>2)];
      var $cmp47=(($64)|0)==3;
      if ($cmp47) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $65=$s_addr;
      var $strstart50=(($65+108)|0);
      var $66=HEAP32[(($strstart50)>>2)];
      var $67=$s_addr;
      var $match_start51=(($67+112)|0);
      var $68=HEAP32[(($match_start51)>>2)];
      var $sub52=(($66-$68)|0);
      var $cmp53=(($sub52)>>>0) > 32767;
      if ($cmp53) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $69=$s_addr;
      var $match_length56=(($69+96)|0);
      HEAP32[(($match_length56)>>2)]=2;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $70=$s_addr;
      var $prev_length59=(($70+120)|0);
      var $71=HEAPU32[(($prev_length59)>>2)];
      var $cmp60=(($71)>>>0) >= 3;
      if ($cmp60) { __label__ = 21; break; } else { __label__ = 38; break; }
    case 21: 
      var $72=$s_addr;
      var $match_length63=(($72+96)|0);
      var $73=HEAPU32[(($match_length63)>>2)];
      var $74=$s_addr;
      var $prev_length64=(($74+120)|0);
      var $75=HEAPU32[(($prev_length64)>>2)];
      var $cmp65=(($73)>>>0) <= (($75)>>>0);
      if ($cmp65) { __label__ = 22; break; } else { __label__ = 38; break; }
    case 22: 
      var $76=$s_addr;
      var $strstart68=(($76+108)|0);
      var $77=HEAP32[(($strstart68)>>2)];
      var $78=$s_addr;
      var $lookahead69=(($78+116)|0);
      var $79=HEAP32[(($lookahead69)>>2)];
      var $add70=(($77+$79)|0);
      var $sub71=(($add70-3)|0);
      $max_insert=$sub71;
      var $80=$s_addr;
      var $prev_length72=(($80+120)|0);
      var $81=HEAP32[(($prev_length72)>>2)];
      var $sub73=(($81-3)|0);
      var $conv74=(($sub73) & 255);
      $len=$conv74;
      var $82=$s_addr;
      var $strstart75=(($82+108)|0);
      var $83=HEAP32[(($strstart75)>>2)];
      var $sub76=(($83-1)|0);
      var $84=$s_addr;
      var $prev_match77=(($84+100)|0);
      var $85=HEAP32[(($prev_match77)>>2)];
      var $sub78=(($sub76-$85)|0);
      var $conv79=(($sub78) & 65535);
      $dist=$conv79;
      var $86=$dist;
      var $87=$s_addr;
      var $last_lit=(($87+5792)|0);
      var $88=HEAP32[(($last_lit)>>2)];
      var $89=$s_addr;
      var $d_buf=(($89+5796)|0);
      var $90=HEAP32[(($d_buf)>>2)];
      var $arrayidx80=(($90+($88<<1))|0);
      HEAP16[(($arrayidx80)>>1)]=$86;
      var $91=$len;
      var $92=$s_addr;
      var $last_lit81=(($92+5792)|0);
      var $93=HEAP32[(($last_lit81)>>2)];
      var $inc=(($93+1)|0);
      HEAP32[(($last_lit81)>>2)]=$inc;
      var $94=$s_addr;
      var $l_buf=(($94+5784)|0);
      var $95=HEAP32[(($l_buf)>>2)];
      var $arrayidx82=(($95+$93)|0);
      HEAP8[($arrayidx82)]=$91;
      var $96=$dist;
      var $dec=(($96-1)&65535);
      $dist=$dec;
      var $97=$len;
      var $idxprom=(($97)&255);
      var $arrayidx83=(((STRING_TABLE.__length_code)+$idxprom)|0);
      var $98=HEAPU8[($arrayidx83)];
      var $conv84=(($98)&255);
      var $add85=(($conv84+256)|0);
      var $add86=(($add85+1)|0);
      var $99=$s_addr;
      var $dyn_ltree=(($99+148)|0);
      var $arrayidx87=(($dyn_ltree+($add86<<2))|0);
      var $fc=(($arrayidx87)|0);
      var $freq=$fc;
      var $100=HEAP16[(($freq)>>1)];
      var $inc88=(($100+1)&65535);
      HEAP16[(($freq)>>1)]=$inc88;
      var $101=$dist;
      var $conv89=(($101)&65535);
      var $cmp90=(($conv89)|0) < 256;
      if ($cmp90) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $102=$dist;
      var $idxprom92=(($102)&65535);
      var $arrayidx93=(((STRING_TABLE.__dist_code)+$idxprom92)|0);
      var $103=HEAPU8[($arrayidx93)];
      var $conv94=(($103)&255);
      var $cond = $conv94;__label__ = 25; break;
    case 24: 
      var $104=$dist;
      var $conv95=(($104)&65535);
      var $shr=$conv95 >> 7;
      var $add96=(($shr+256)|0);
      var $arrayidx97=(((STRING_TABLE.__dist_code)+$add96)|0);
      var $105=HEAPU8[($arrayidx97)];
      var $conv98=(($105)&255);
      var $cond = $conv98;__label__ = 25; break;
    case 25: 
      var $cond;
      var $106=$s_addr;
      var $dyn_dtree=(($106+2440)|0);
      var $arrayidx99=(($dyn_dtree+($cond<<2))|0);
      var $fc100=(($arrayidx99)|0);
      var $freq101=$fc100;
      var $107=HEAP16[(($freq101)>>1)];
      var $inc102=(($107+1)&65535);
      HEAP16[(($freq101)>>1)]=$inc102;
      var $108=$s_addr;
      var $last_lit103=(($108+5792)|0);
      var $109=HEAP32[(($last_lit103)>>2)];
      var $110=$s_addr;
      var $lit_bufsize=(($110+5788)|0);
      var $111=HEAP32[(($lit_bufsize)>>2)];
      var $sub104=(($111-1)|0);
      var $cmp105=(($109)|0)==(($sub104)|0);
      var $conv106=(($cmp105)&1);
      $bflush=$conv106;
      var $112=$s_addr;
      var $prev_length107=(($112+120)|0);
      var $113=HEAP32[(($prev_length107)>>2)];
      var $sub108=(($113-1)|0);
      var $114=$s_addr;
      var $lookahead109=(($114+116)|0);
      var $115=HEAP32[(($lookahead109)>>2)];
      var $sub110=(($115-$sub108)|0);
      HEAP32[(($lookahead109)>>2)]=$sub110;
      var $116=$s_addr;
      var $prev_length111=(($116+120)|0);
      var $117=HEAP32[(($prev_length111)>>2)];
      var $sub112=(($117-2)|0);
      HEAP32[(($prev_length111)>>2)]=$sub112;
      __label__ = 26; break;
    case 26: 
      var $118=$s_addr;
      var $strstart113=(($118+108)|0);
      var $119=HEAP32[(($strstart113)>>2)];
      var $inc114=(($119+1)|0);
      HEAP32[(($strstart113)>>2)]=$inc114;
      var $120=$max_insert;
      var $cmp115=(($inc114)>>>0) <= (($120)>>>0);
      if ($cmp115) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $121=$s_addr;
      var $ins_h118=(($121+72)|0);
      var $122=HEAP32[(($ins_h118)>>2)];
      var $123=$s_addr;
      var $hash_shift119=(($123+88)|0);
      var $124=HEAP32[(($hash_shift119)>>2)];
      var $shl120=$122 << $124;
      var $125=$s_addr;
      var $strstart121=(($125+108)|0);
      var $126=HEAP32[(($strstart121)>>2)];
      var $add122=(($126+2)|0);
      var $127=$s_addr;
      var $window123=(($127+56)|0);
      var $128=HEAP32[(($window123)>>2)];
      var $arrayidx124=(($128+$add122)|0);
      var $129=HEAPU8[($arrayidx124)];
      var $conv125=(($129)&255);
      var $xor126=$shl120 ^ $conv125;
      var $130=$s_addr;
      var $hash_mask127=(($130+84)|0);
      var $131=HEAP32[(($hash_mask127)>>2)];
      var $and128=$xor126 & $131;
      var $132=$s_addr;
      var $ins_h129=(($132+72)|0);
      HEAP32[(($ins_h129)>>2)]=$and128;
      var $133=$s_addr;
      var $ins_h130=(($133+72)|0);
      var $134=HEAP32[(($ins_h130)>>2)];
      var $135=$s_addr;
      var $head131=(($135+68)|0);
      var $136=HEAP32[(($head131)>>2)];
      var $arrayidx132=(($136+($134<<1))|0);
      var $137=HEAPU16[(($arrayidx132)>>1)];
      var $138=$s_addr;
      var $strstart133=(($138+108)|0);
      var $139=HEAP32[(($strstart133)>>2)];
      var $140=$s_addr;
      var $w_mask134=(($140+52)|0);
      var $141=HEAP32[(($w_mask134)>>2)];
      var $and135=$139 & $141;
      var $142=$s_addr;
      var $prev136=(($142+64)|0);
      var $143=HEAP32[(($prev136)>>2)];
      var $arrayidx137=(($143+($and135<<1))|0);
      HEAP16[(($arrayidx137)>>1)]=$137;
      var $conv138=(($137)&65535);
      $hash_head=$conv138;
      var $144=$s_addr;
      var $strstart139=(($144+108)|0);
      var $145=HEAP32[(($strstart139)>>2)];
      var $conv140=(($145) & 65535);
      var $146=$s_addr;
      var $ins_h141=(($146+72)|0);
      var $147=HEAP32[(($ins_h141)>>2)];
      var $148=$s_addr;
      var $head142=(($148+68)|0);
      var $149=HEAP32[(($head142)>>2)];
      var $arrayidx143=(($149+($147<<1))|0);
      HEAP16[(($arrayidx143)>>1)]=$conv140;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $150=$s_addr;
      var $prev_length145=(($150+120)|0);
      var $151=HEAP32[(($prev_length145)>>2)];
      var $dec146=(($151-1)|0);
      HEAP32[(($prev_length145)>>2)]=$dec146;
      var $cmp147=(($dec146)|0)!=0;
      if ($cmp147) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 30: 
      var $152=$s_addr;
      var $match_available=(($152+104)|0);
      HEAP32[(($match_available)>>2)]=0;
      var $153=$s_addr;
      var $match_length149=(($153+96)|0);
      HEAP32[(($match_length149)>>2)]=2;
      var $154=$s_addr;
      var $strstart150=(($154+108)|0);
      var $155=HEAP32[(($strstart150)>>2)];
      var $inc151=(($155+1)|0);
      HEAP32[(($strstart150)>>2)]=$inc151;
      var $156=$bflush;
      var $tobool=(($156)|0)!=0;
      if ($tobool) { __label__ = 31; break; } else { __label__ = 37; break; }
    case 31: 
      var $157=$s_addr;
      var $158=$s_addr;
      var $block_start=(($158+92)|0);
      var $159=HEAP32[(($block_start)>>2)];
      var $cmp153=(($159)|0) >= 0;
      if ($cmp153) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $160=$s_addr;
      var $block_start156=(($160+92)|0);
      var $161=HEAP32[(($block_start156)>>2)];
      var $162=$s_addr;
      var $window157=(($162+56)|0);
      var $163=HEAP32[(($window157)>>2)];
      var $arrayidx158=(($163+$161)|0);
      var $cond161 = $arrayidx158;__label__ = 34; break;
    case 33: 
      var $cond161 = 0;__label__ = 34; break;
    case 34: 
      var $cond161;
      var $164=$s_addr;
      var $strstart162=(($164+108)|0);
      var $165=HEAP32[(($strstart162)>>2)];
      var $166=$s_addr;
      var $block_start163=(($166+92)|0);
      var $167=HEAP32[(($block_start163)>>2)];
      var $sub164=(($165-$167)|0);
      __tr_flush_block($157, $cond161, $sub164, 0);
      var $168=$s_addr;
      var $strstart165=(($168+108)|0);
      var $169=HEAP32[(($strstart165)>>2)];
      var $170=$s_addr;
      var $block_start166=(($170+92)|0);
      HEAP32[(($block_start166)>>2)]=$169;
      var $171=$s_addr;
      var $strm=(($171)|0);
      var $172=HEAP32[(($strm)>>2)];
      _flush_pending($172);
      var $173=$s_addr;
      var $strm167=(($173)|0);
      var $174=HEAP32[(($strm167)>>2)];
      var $avail_out=(($174+16)|0);
      var $175=HEAP32[(($avail_out)>>2)];
      var $cmp168=(($175)|0)==0;
      if ($cmp168) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      $retval=0;
      __label__ = 70; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 49; break;
    case 38: 
      var $176=$s_addr;
      var $match_available173=(($176+104)|0);
      var $177=HEAP32[(($match_available173)>>2)];
      var $tobool174=(($177)|0)!=0;
      if ($tobool174) { __label__ = 39; break; } else { __label__ = 47; break; }
    case 39: 
      var $178=$s_addr;
      var $strstart176=(($178+108)|0);
      var $179=HEAP32[(($strstart176)>>2)];
      var $sub177=(($179-1)|0);
      var $180=$s_addr;
      var $window178=(($180+56)|0);
      var $181=HEAP32[(($window178)>>2)];
      var $arrayidx179=(($181+$sub177)|0);
      var $182=HEAP8[($arrayidx179)];
      $cc=$182;
      var $183=$s_addr;
      var $last_lit180=(($183+5792)|0);
      var $184=HEAP32[(($last_lit180)>>2)];
      var $185=$s_addr;
      var $d_buf181=(($185+5796)|0);
      var $186=HEAP32[(($d_buf181)>>2)];
      var $arrayidx182=(($186+($184<<1))|0);
      HEAP16[(($arrayidx182)>>1)]=0;
      var $187=$cc;
      var $188=$s_addr;
      var $last_lit183=(($188+5792)|0);
      var $189=HEAP32[(($last_lit183)>>2)];
      var $inc184=(($189+1)|0);
      HEAP32[(($last_lit183)>>2)]=$inc184;
      var $190=$s_addr;
      var $l_buf185=(($190+5784)|0);
      var $191=HEAP32[(($l_buf185)>>2)];
      var $arrayidx186=(($191+$189)|0);
      HEAP8[($arrayidx186)]=$187;
      var $192=$cc;
      var $idxprom187=(($192)&255);
      var $193=$s_addr;
      var $dyn_ltree188=(($193+148)|0);
      var $arrayidx189=(($dyn_ltree188+($idxprom187<<2))|0);
      var $fc190=(($arrayidx189)|0);
      var $freq191=$fc190;
      var $194=HEAP16[(($freq191)>>1)];
      var $inc192=(($194+1)&65535);
      HEAP16[(($freq191)>>1)]=$inc192;
      var $195=$s_addr;
      var $last_lit193=(($195+5792)|0);
      var $196=HEAP32[(($last_lit193)>>2)];
      var $197=$s_addr;
      var $lit_bufsize194=(($197+5788)|0);
      var $198=HEAP32[(($lit_bufsize194)>>2)];
      var $sub195=(($198-1)|0);
      var $cmp196=(($196)|0)==(($sub195)|0);
      var $conv197=(($cmp196)&1);
      $bflush=$conv197;
      var $199=$bflush;
      var $tobool198=(($199)|0)!=0;
      if ($tobool198) { __label__ = 40; break; } else { __label__ = 44; break; }
    case 40: 
      var $200=$s_addr;
      var $201=$s_addr;
      var $block_start200=(($201+92)|0);
      var $202=HEAP32[(($block_start200)>>2)];
      var $cmp201=(($202)|0) >= 0;
      if ($cmp201) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $203=$s_addr;
      var $block_start204=(($203+92)|0);
      var $204=HEAP32[(($block_start204)>>2)];
      var $205=$s_addr;
      var $window205=(($205+56)|0);
      var $206=HEAP32[(($window205)>>2)];
      var $arrayidx206=(($206+$204)|0);
      var $cond209 = $arrayidx206;__label__ = 43; break;
    case 42: 
      var $cond209 = 0;__label__ = 43; break;
    case 43: 
      var $cond209;
      var $207=$s_addr;
      var $strstart210=(($207+108)|0);
      var $208=HEAP32[(($strstart210)>>2)];
      var $209=$s_addr;
      var $block_start211=(($209+92)|0);
      var $210=HEAP32[(($block_start211)>>2)];
      var $sub212=(($208-$210)|0);
      __tr_flush_block($200, $cond209, $sub212, 0);
      var $211=$s_addr;
      var $strstart213=(($211+108)|0);
      var $212=HEAP32[(($strstart213)>>2)];
      var $213=$s_addr;
      var $block_start214=(($213+92)|0);
      HEAP32[(($block_start214)>>2)]=$212;
      var $214=$s_addr;
      var $strm215=(($214)|0);
      var $215=HEAP32[(($strm215)>>2)];
      _flush_pending($215);
      __label__ = 44; break;
    case 44: 
      var $216=$s_addr;
      var $strstart217=(($216+108)|0);
      var $217=HEAP32[(($strstart217)>>2)];
      var $inc218=(($217+1)|0);
      HEAP32[(($strstart217)>>2)]=$inc218;
      var $218=$s_addr;
      var $lookahead219=(($218+116)|0);
      var $219=HEAP32[(($lookahead219)>>2)];
      var $dec220=(($219-1)|0);
      HEAP32[(($lookahead219)>>2)]=$dec220;
      var $220=$s_addr;
      var $strm221=(($220)|0);
      var $221=HEAP32[(($strm221)>>2)];
      var $avail_out222=(($221+16)|0);
      var $222=HEAP32[(($avail_out222)>>2)];
      var $cmp223=(($222)|0)==0;
      if ($cmp223) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      $retval=0;
      __label__ = 70; break;
    case 46: 
      __label__ = 48; break;
    case 47: 
      var $223=$s_addr;
      var $match_available228=(($223+104)|0);
      HEAP32[(($match_available228)>>2)]=1;
      var $224=$s_addr;
      var $strstart229=(($224+108)|0);
      var $225=HEAP32[(($strstart229)>>2)];
      var $inc230=(($225+1)|0);
      HEAP32[(($strstart229)>>2)]=$inc230;
      var $226=$s_addr;
      var $lookahead231=(($226+116)|0);
      var $227=HEAP32[(($lookahead231)>>2)];
      var $dec232=(($227-1)|0);
      HEAP32[(($lookahead231)>>2)]=$dec232;
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 2; break;
    case 50: 
      var $228=$s_addr;
      var $match_available235=(($228+104)|0);
      var $229=HEAP32[(($match_available235)>>2)];
      var $tobool236=(($229)|0)!=0;
      if ($tobool236) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $230=$s_addr;
      var $strstart239=(($230+108)|0);
      var $231=HEAP32[(($strstart239)>>2)];
      var $sub240=(($231-1)|0);
      var $232=$s_addr;
      var $window241=(($232+56)|0);
      var $233=HEAP32[(($window241)>>2)];
      var $arrayidx242=(($233+$sub240)|0);
      var $234=HEAP8[($arrayidx242)];
      $cc238=$234;
      var $235=$s_addr;
      var $last_lit243=(($235+5792)|0);
      var $236=HEAP32[(($last_lit243)>>2)];
      var $237=$s_addr;
      var $d_buf244=(($237+5796)|0);
      var $238=HEAP32[(($d_buf244)>>2)];
      var $arrayidx245=(($238+($236<<1))|0);
      HEAP16[(($arrayidx245)>>1)]=0;
      var $239=$cc238;
      var $240=$s_addr;
      var $last_lit246=(($240+5792)|0);
      var $241=HEAP32[(($last_lit246)>>2)];
      var $inc247=(($241+1)|0);
      HEAP32[(($last_lit246)>>2)]=$inc247;
      var $242=$s_addr;
      var $l_buf248=(($242+5784)|0);
      var $243=HEAP32[(($l_buf248)>>2)];
      var $arrayidx249=(($243+$241)|0);
      HEAP8[($arrayidx249)]=$239;
      var $244=$cc238;
      var $idxprom250=(($244)&255);
      var $245=$s_addr;
      var $dyn_ltree251=(($245+148)|0);
      var $arrayidx252=(($dyn_ltree251+($idxprom250<<2))|0);
      var $fc253=(($arrayidx252)|0);
      var $freq254=$fc253;
      var $246=HEAP16[(($freq254)>>1)];
      var $inc255=(($246+1)&65535);
      HEAP16[(($freq254)>>1)]=$inc255;
      var $247=$s_addr;
      var $last_lit256=(($247+5792)|0);
      var $248=HEAP32[(($last_lit256)>>2)];
      var $249=$s_addr;
      var $lit_bufsize257=(($249+5788)|0);
      var $250=HEAP32[(($lit_bufsize257)>>2)];
      var $sub258=(($250-1)|0);
      var $cmp259=(($248)|0)==(($sub258)|0);
      var $conv260=(($cmp259)&1);
      $bflush=$conv260;
      var $251=$s_addr;
      var $match_available261=(($251+104)|0);
      HEAP32[(($match_available261)>>2)]=0;
      __label__ = 52; break;
    case 52: 
      var $252=$s_addr;
      var $strstart263=(($252+108)|0);
      var $253=HEAPU32[(($strstart263)>>2)];
      var $cmp264=(($253)>>>0) < 2;
      if ($cmp264) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $254=$s_addr;
      var $strstart267=(($254+108)|0);
      var $255=HEAP32[(($strstart267)>>2)];
      var $cond270 = $255;__label__ = 55; break;
    case 54: 
      var $cond270 = 2;__label__ = 55; break;
    case 55: 
      var $cond270;
      var $256=$s_addr;
      var $insert=(($256+5812)|0);
      HEAP32[(($insert)>>2)]=$cond270;
      var $257=$flush_addr;
      var $cmp271=(($257)|0)==4;
      if ($cmp271) { __label__ = 56; break; } else { __label__ = 62; break; }
    case 56: 
      var $258=$s_addr;
      var $259=$s_addr;
      var $block_start274=(($259+92)|0);
      var $260=HEAP32[(($block_start274)>>2)];
      var $cmp275=(($260)|0) >= 0;
      if ($cmp275) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $261=$s_addr;
      var $block_start278=(($261+92)|0);
      var $262=HEAP32[(($block_start278)>>2)];
      var $263=$s_addr;
      var $window279=(($263+56)|0);
      var $264=HEAP32[(($window279)>>2)];
      var $arrayidx280=(($264+$262)|0);
      var $cond283 = $arrayidx280;__label__ = 59; break;
    case 58: 
      var $cond283 = 0;__label__ = 59; break;
    case 59: 
      var $cond283;
      var $265=$s_addr;
      var $strstart284=(($265+108)|0);
      var $266=HEAP32[(($strstart284)>>2)];
      var $267=$s_addr;
      var $block_start285=(($267+92)|0);
      var $268=HEAP32[(($block_start285)>>2)];
      var $sub286=(($266-$268)|0);
      __tr_flush_block($258, $cond283, $sub286, 1);
      var $269=$s_addr;
      var $strstart287=(($269+108)|0);
      var $270=HEAP32[(($strstart287)>>2)];
      var $271=$s_addr;
      var $block_start288=(($271+92)|0);
      HEAP32[(($block_start288)>>2)]=$270;
      var $272=$s_addr;
      var $strm289=(($272)|0);
      var $273=HEAP32[(($strm289)>>2)];
      _flush_pending($273);
      var $274=$s_addr;
      var $strm290=(($274)|0);
      var $275=HEAP32[(($strm290)>>2)];
      var $avail_out291=(($275+16)|0);
      var $276=HEAP32[(($avail_out291)>>2)];
      var $cmp292=(($276)|0)==0;
      if ($cmp292) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      $retval=2;
      __label__ = 70; break;
    case 61: 
      $retval=3;
      __label__ = 70; break;
    case 62: 
      var $277=$s_addr;
      var $last_lit297=(($277+5792)|0);
      var $278=HEAP32[(($last_lit297)>>2)];
      var $tobool298=(($278)|0)!=0;
      if ($tobool298) { __label__ = 63; break; } else { __label__ = 69; break; }
    case 63: 
      var $279=$s_addr;
      var $280=$s_addr;
      var $block_start300=(($280+92)|0);
      var $281=HEAP32[(($block_start300)>>2)];
      var $cmp301=(($281)|0) >= 0;
      if ($cmp301) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $282=$s_addr;
      var $block_start304=(($282+92)|0);
      var $283=HEAP32[(($block_start304)>>2)];
      var $284=$s_addr;
      var $window305=(($284+56)|0);
      var $285=HEAP32[(($window305)>>2)];
      var $arrayidx306=(($285+$283)|0);
      var $cond309 = $arrayidx306;__label__ = 66; break;
    case 65: 
      var $cond309 = 0;__label__ = 66; break;
    case 66: 
      var $cond309;
      var $286=$s_addr;
      var $strstart310=(($286+108)|0);
      var $287=HEAP32[(($strstart310)>>2)];
      var $288=$s_addr;
      var $block_start311=(($288+92)|0);
      var $289=HEAP32[(($block_start311)>>2)];
      var $sub312=(($287-$289)|0);
      __tr_flush_block($279, $cond309, $sub312, 0);
      var $290=$s_addr;
      var $strstart313=(($290+108)|0);
      var $291=HEAP32[(($strstart313)>>2)];
      var $292=$s_addr;
      var $block_start314=(($292+92)|0);
      HEAP32[(($block_start314)>>2)]=$291;
      var $293=$s_addr;
      var $strm315=(($293)|0);
      var $294=HEAP32[(($strm315)>>2)];
      _flush_pending($294);
      var $295=$s_addr;
      var $strm316=(($295)|0);
      var $296=HEAP32[(($strm316)>>2)];
      var $avail_out317=(($296+16)|0);
      var $297=HEAP32[(($avail_out317)>>2)];
      var $cmp318=(($297)|0)==0;
      if ($cmp318) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      $retval=0;
      __label__ = 70; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      $retval=1;
      __label__ = 70; break;
    case 70: 
      var $298=$retval;
      ;
      return $298;
    default: assert(0, "bad label: " + __label__);
  }
}
_deflate_slow["X"]=1;

function _longest_match($s, $cur_match) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $s_addr;
      var $cur_match_addr;
      var $chain_length;
      var $scan;
      var $match;
      var $len;
      var $best_len;
      var $nice_match;
      var $limit;
      var $prev;
      var $wmask;
      var $strend;
      var $scan_end1;
      var $scan_end;
      $s_addr=$s;
      $cur_match_addr=$cur_match;
      var $0=$s_addr;
      var $max_chain_length=(($0+124)|0);
      var $1=HEAP32[(($max_chain_length)>>2)];
      $chain_length=$1;
      var $2=$s_addr;
      var $window=(($2+56)|0);
      var $3=HEAP32[(($window)>>2)];
      var $4=$s_addr;
      var $strstart=(($4+108)|0);
      var $5=HEAP32[(($strstart)>>2)];
      var $add_ptr=(($3+$5)|0);
      $scan=$add_ptr;
      var $6=$s_addr;
      var $prev_length=(($6+120)|0);
      var $7=HEAP32[(($prev_length)>>2)];
      $best_len=$7;
      var $8=$s_addr;
      var $nice_match1=(($8+144)|0);
      var $9=HEAP32[(($nice_match1)>>2)];
      $nice_match=$9;
      var $10=$s_addr;
      var $strstart2=(($10+108)|0);
      var $11=HEAPU32[(($strstart2)>>2)];
      var $12=$s_addr;
      var $w_size=(($12+44)|0);
      var $13=HEAP32[(($w_size)>>2)];
      var $sub=(($13-262)|0);
      var $cmp=(($11)>>>0) > (($sub)>>>0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $14=$s_addr;
      var $strstart3=(($14+108)|0);
      var $15=HEAP32[(($strstart3)>>2)];
      var $16=$s_addr;
      var $w_size4=(($16+44)|0);
      var $17=HEAP32[(($w_size4)>>2)];
      var $sub5=(($17-262)|0);
      var $sub6=(($15-$sub5)|0);
      var $cond = $sub6;__label__ = 4; break;
    case 3: 
      var $cond = 0;__label__ = 4; break;
    case 4: 
      var $cond;
      $limit=$cond;
      var $18=$s_addr;
      var $prev7=(($18+64)|0);
      var $19=HEAP32[(($prev7)>>2)];
      $prev=$19;
      var $20=$s_addr;
      var $w_mask=(($20+52)|0);
      var $21=HEAP32[(($w_mask)>>2)];
      $wmask=$21;
      var $22=$s_addr;
      var $window8=(($22+56)|0);
      var $23=HEAP32[(($window8)>>2)];
      var $24=$s_addr;
      var $strstart9=(($24+108)|0);
      var $25=HEAP32[(($strstart9)>>2)];
      var $add_ptr10=(($23+$25)|0);
      var $add_ptr11=(($add_ptr10+258)|0);
      $strend=$add_ptr11;
      var $26=$best_len;
      var $sub12=(($26-1)|0);
      var $27=$scan;
      var $arrayidx=(($27+$sub12)|0);
      var $28=HEAP8[($arrayidx)];
      $scan_end1=$28;
      var $29=$best_len;
      var $30=$scan;
      var $arrayidx13=(($30+$29)|0);
      var $31=HEAP8[($arrayidx13)];
      $scan_end=$31;
      var $32=$s_addr;
      var $prev_length14=(($32+120)|0);
      var $33=HEAPU32[(($prev_length14)>>2)];
      var $34=$s_addr;
      var $good_match=(($34+140)|0);
      var $35=HEAPU32[(($good_match)>>2)];
      var $cmp15=(($33)>>>0) >= (($35)>>>0);
      if ($cmp15) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $36=$chain_length;
      var $shr=$36 >>> 2;
      $chain_length=$shr;
      __label__ = 6; break;
    case 6: 
      var $37=$nice_match;
      var $38=$s_addr;
      var $lookahead=(($38+116)|0);
      var $39=HEAPU32[(($lookahead)>>2)];
      var $cmp16=(($37)>>>0) > (($39)>>>0);
      if ($cmp16) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $40=$s_addr;
      var $lookahead18=(($40+116)|0);
      var $41=HEAP32[(($lookahead18)>>2)];
      $nice_match=$41;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $42=$s_addr;
      var $window20=(($42+56)|0);
      var $43=HEAP32[(($window20)>>2)];
      var $44=$cur_match_addr;
      var $add_ptr21=(($43+$44)|0);
      $match=$add_ptr21;
      var $45=$best_len;
      var $46=$match;
      var $arrayidx22=(($46+$45)|0);
      var $47=HEAPU8[($arrayidx22)];
      var $conv=(($47)&255);
      var $48=$scan_end;
      var $conv23=(($48)&255);
      var $cmp24=(($conv)|0)!=(($conv23)|0);
      if ($cmp24) { __label__ = 13; break; } else { __label__ = 10; break; }
    case 10: 
      var $49=$best_len;
      var $sub26=(($49-1)|0);
      var $50=$match;
      var $arrayidx27=(($50+$sub26)|0);
      var $51=HEAPU8[($arrayidx27)];
      var $conv28=(($51)&255);
      var $52=$scan_end1;
      var $conv29=(($52)&255);
      var $cmp30=(($conv28)|0)!=(($conv29)|0);
      if ($cmp30) { __label__ = 13; break; } else { __label__ = 11; break; }
    case 11: 
      var $53=$match;
      var $54=HEAPU8[($53)];
      var $conv33=(($54)&255);
      var $55=$scan;
      var $56=HEAPU8[($55)];
      var $conv34=(($56)&255);
      var $cmp35=(($conv33)|0)!=(($conv34)|0);
      if ($cmp35) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $57=$match;
      var $incdec_ptr=(($57+1)|0);
      $match=$incdec_ptr;
      var $58=HEAPU8[($incdec_ptr)];
      var $conv38=(($58)&255);
      var $59=$scan;
      var $arrayidx39=(($59+1)|0);
      var $60=HEAPU8[($arrayidx39)];
      var $conv40=(($60)&255);
      var $cmp41=(($conv38)|0)!=(($conv40)|0);
      if ($cmp41) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 31; break;
    case 14: 
      var $61=$scan;
      var $add_ptr45=(($61+2)|0);
      $scan=$add_ptr45;
      var $62=$match;
      var $incdec_ptr46=(($62+1)|0);
      $match=$incdec_ptr46;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $63=$scan;
      var $incdec_ptr48=(($63+1)|0);
      $scan=$incdec_ptr48;
      var $64=HEAPU8[($incdec_ptr48)];
      var $conv49=(($64)&255);
      var $65=$match;
      var $incdec_ptr50=(($65+1)|0);
      $match=$incdec_ptr50;
      var $66=HEAPU8[($incdec_ptr50)];
      var $conv51=(($66)&255);
      var $cmp52=(($conv49)|0)==(($conv51)|0);
      if ($cmp52) { __label__ = 17; break; } else { var $97 = 0;__label__ = 25; break; }
    case 17: 
      var $67=$scan;
      var $incdec_ptr54=(($67+1)|0);
      $scan=$incdec_ptr54;
      var $68=HEAPU8[($incdec_ptr54)];
      var $conv55=(($68)&255);
      var $69=$match;
      var $incdec_ptr56=(($69+1)|0);
      $match=$incdec_ptr56;
      var $70=HEAPU8[($incdec_ptr56)];
      var $conv57=(($70)&255);
      var $cmp58=(($conv55)|0)==(($conv57)|0);
      if ($cmp58) { __label__ = 18; break; } else { var $97 = 0;__label__ = 25; break; }
    case 18: 
      var $71=$scan;
      var $incdec_ptr61=(($71+1)|0);
      $scan=$incdec_ptr61;
      var $72=HEAPU8[($incdec_ptr61)];
      var $conv62=(($72)&255);
      var $73=$match;
      var $incdec_ptr63=(($73+1)|0);
      $match=$incdec_ptr63;
      var $74=HEAPU8[($incdec_ptr63)];
      var $conv64=(($74)&255);
      var $cmp65=(($conv62)|0)==(($conv64)|0);
      if ($cmp65) { __label__ = 19; break; } else { var $97 = 0;__label__ = 25; break; }
    case 19: 
      var $75=$scan;
      var $incdec_ptr68=(($75+1)|0);
      $scan=$incdec_ptr68;
      var $76=HEAPU8[($incdec_ptr68)];
      var $conv69=(($76)&255);
      var $77=$match;
      var $incdec_ptr70=(($77+1)|0);
      $match=$incdec_ptr70;
      var $78=HEAPU8[($incdec_ptr70)];
      var $conv71=(($78)&255);
      var $cmp72=(($conv69)|0)==(($conv71)|0);
      if ($cmp72) { __label__ = 20; break; } else { var $97 = 0;__label__ = 25; break; }
    case 20: 
      var $79=$scan;
      var $incdec_ptr75=(($79+1)|0);
      $scan=$incdec_ptr75;
      var $80=HEAPU8[($incdec_ptr75)];
      var $conv76=(($80)&255);
      var $81=$match;
      var $incdec_ptr77=(($81+1)|0);
      $match=$incdec_ptr77;
      var $82=HEAPU8[($incdec_ptr77)];
      var $conv78=(($82)&255);
      var $cmp79=(($conv76)|0)==(($conv78)|0);
      if ($cmp79) { __label__ = 21; break; } else { var $97 = 0;__label__ = 25; break; }
    case 21: 
      var $83=$scan;
      var $incdec_ptr82=(($83+1)|0);
      $scan=$incdec_ptr82;
      var $84=HEAPU8[($incdec_ptr82)];
      var $conv83=(($84)&255);
      var $85=$match;
      var $incdec_ptr84=(($85+1)|0);
      $match=$incdec_ptr84;
      var $86=HEAPU8[($incdec_ptr84)];
      var $conv85=(($86)&255);
      var $cmp86=(($conv83)|0)==(($conv85)|0);
      if ($cmp86) { __label__ = 22; break; } else { var $97 = 0;__label__ = 25; break; }
    case 22: 
      var $87=$scan;
      var $incdec_ptr89=(($87+1)|0);
      $scan=$incdec_ptr89;
      var $88=HEAPU8[($incdec_ptr89)];
      var $conv90=(($88)&255);
      var $89=$match;
      var $incdec_ptr91=(($89+1)|0);
      $match=$incdec_ptr91;
      var $90=HEAPU8[($incdec_ptr91)];
      var $conv92=(($90)&255);
      var $cmp93=(($conv90)|0)==(($conv92)|0);
      if ($cmp93) { __label__ = 23; break; } else { var $97 = 0;__label__ = 25; break; }
    case 23: 
      var $91=$scan;
      var $incdec_ptr96=(($91+1)|0);
      $scan=$incdec_ptr96;
      var $92=HEAPU8[($incdec_ptr96)];
      var $conv97=(($92)&255);
      var $93=$match;
      var $incdec_ptr98=(($93+1)|0);
      $match=$incdec_ptr98;
      var $94=HEAPU8[($incdec_ptr98)];
      var $conv99=(($94)&255);
      var $cmp100=(($conv97)|0)==(($conv99)|0);
      if ($cmp100) { __label__ = 24; break; } else { var $97 = 0;__label__ = 25; break; }
    case 24: 
      var $95=$scan;
      var $96=$strend;
      var $cmp102=(($95)>>>0) < (($96)>>>0);
      var $97 = $cmp102;__label__ = 25; break;
    case 25: 
      var $97;
      if ($97) { __label__ = 15; break; } else { __label__ = 26; break; }
    case 26: 
      var $98=$strend;
      var $99=$scan;
      var $sub_ptr_lhs_cast=$98;
      var $sub_ptr_rhs_cast=$99;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      var $sub104=((258-$sub_ptr_sub)|0);
      $len=$sub104;
      var $100=$strend;
      var $add_ptr105=(($100-258)|0);
      $scan=$add_ptr105;
      var $101=$len;
      var $102=$best_len;
      var $cmp106=(($101)|0) > (($102)|0);
      if ($cmp106) { __label__ = 27; break; } else { __label__ = 30; break; }
    case 27: 
      var $103=$cur_match_addr;
      var $104=$s_addr;
      var $match_start=(($104+112)|0);
      HEAP32[(($match_start)>>2)]=$103;
      var $105=$len;
      $best_len=$105;
      var $106=$len;
      var $107=$nice_match;
      var $cmp109=(($106)|0) >= (($107)|0);
      if ($cmp109) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 34; break;
    case 29: 
      var $108=$best_len;
      var $sub113=(($108-1)|0);
      var $109=$scan;
      var $arrayidx114=(($109+$sub113)|0);
      var $110=HEAP8[($arrayidx114)];
      $scan_end1=$110;
      var $111=$best_len;
      var $112=$scan;
      var $arrayidx115=(($112+$111)|0);
      var $113=HEAP8[($arrayidx115)];
      $scan_end=$113;
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $114=$cur_match_addr;
      var $115=$wmask;
      var $and=$114 & $115;
      var $116=$prev;
      var $arrayidx118=(($116+($and<<1))|0);
      var $117=HEAPU16[(($arrayidx118)>>1)];
      var $conv119=(($117)&65535);
      $cur_match_addr=$conv119;
      var $118=$limit;
      var $cmp120=(($conv119)>>>0) > (($118)>>>0);
      if ($cmp120) { __label__ = 32; break; } else { var $120 = 0;__label__ = 33; break; }
    case 32: 
      var $119=$chain_length;
      var $dec=(($119-1)|0);
      $chain_length=$dec;
      var $cmp123=(($dec)|0)!=0;
      var $120 = $cmp123;__label__ = 33; break;
    case 33: 
      var $120;
      if ($120) { __label__ = 9; break; } else { __label__ = 34; break; }
    case 34: 
      var $121=$best_len;
      var $122=$s_addr;
      var $lookahead127=(($122+116)|0);
      var $123=HEAPU32[(($lookahead127)>>2)];
      var $cmp128=(($121)>>>0) <= (($123)>>>0);
      if ($cmp128) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $124=$best_len;
      $retval=$124;
      __label__ = 37; break;
    case 36: 
      var $125=$s_addr;
      var $lookahead132=(($125+116)|0);
      var $126=HEAP32[(($lookahead132)>>2)];
      $retval=$126;
      __label__ = 37; break;
    case 37: 
      var $127=$retval;
      ;
      return $127;
    default: assert(0, "bad label: " + __label__);
  }
}
_longest_match["X"]=1;

function _inflate_fast($strm, $start) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $strm_addr;
      var $start_addr;
      var $state;
      var $in;
      var $last;
      var $out;
      var $beg;
      var $end;
      var $wsize;
      var $whave;
      var $wnext;
      var $window;
      var $hold;
      var $bits;
      var $lcode;
      var $dcode;
      var $lmask;
      var $dmask;
      var $here=__stackBase__;
      var $op;
      var $len;
      var $dist;
      var $from;
      $strm_addr=$strm;
      $start_addr=$start;
      var $0=$strm_addr;
      var $state1=(($0+28)|0);
      var $1=HEAP32[(($state1)>>2)];
      var $2=$1;
      $state=$2;
      var $3=$strm_addr;
      var $next_in=(($3)|0);
      var $4=HEAP32[(($next_in)>>2)];
      var $add_ptr=(($4-1)|0);
      $in=$add_ptr;
      var $5=$in;
      var $6=$strm_addr;
      var $avail_in=(($6+4)|0);
      var $7=HEAP32[(($avail_in)>>2)];
      var $sub=(($7-5)|0);
      var $add_ptr2=(($5+$sub)|0);
      $last=$add_ptr2;
      var $8=$strm_addr;
      var $next_out=(($8+12)|0);
      var $9=HEAP32[(($next_out)>>2)];
      var $add_ptr3=(($9-1)|0);
      $out=$add_ptr3;
      var $10=$out;
      var $11=$start_addr;
      var $12=$strm_addr;
      var $avail_out=(($12+16)|0);
      var $13=HEAP32[(($avail_out)>>2)];
      var $sub4=(($11-$13)|0);
      var $idx_neg=(((-$sub4))|0);
      var $add_ptr5=(($10+$idx_neg)|0);
      $beg=$add_ptr5;
      var $14=$out;
      var $15=$strm_addr;
      var $avail_out6=(($15+16)|0);
      var $16=HEAP32[(($avail_out6)>>2)];
      var $sub7=(($16-257)|0);
      var $add_ptr8=(($14+$sub7)|0);
      $end=$add_ptr8;
      var $17=$state;
      var $wsize9=(($17+40)|0);
      var $18=HEAP32[(($wsize9)>>2)];
      $wsize=$18;
      var $19=$state;
      var $whave10=(($19+44)|0);
      var $20=HEAP32[(($whave10)>>2)];
      $whave=$20;
      var $21=$state;
      var $wnext11=(($21+48)|0);
      var $22=HEAP32[(($wnext11)>>2)];
      $wnext=$22;
      var $23=$state;
      var $window12=(($23+52)|0);
      var $24=HEAP32[(($window12)>>2)];
      $window=$24;
      var $25=$state;
      var $hold13=(($25+56)|0);
      var $26=HEAP32[(($hold13)>>2)];
      $hold=$26;
      var $27=$state;
      var $bits14=(($27+60)|0);
      var $28=HEAP32[(($bits14)>>2)];
      $bits=$28;
      var $29=$state;
      var $lencode=(($29+76)|0);
      var $30=HEAP32[(($lencode)>>2)];
      $lcode=$30;
      var $31=$state;
      var $distcode=(($31+80)|0);
      var $32=HEAP32[(($distcode)>>2)];
      $dcode=$32;
      var $33=$state;
      var $lenbits=(($33+84)|0);
      var $34=HEAP32[(($lenbits)>>2)];
      var $shl=1 << $34;
      var $sub15=(($shl-1)|0);
      $lmask=$sub15;
      var $35=$state;
      var $distbits=(($35+88)|0);
      var $36=HEAP32[(($distbits)>>2)];
      var $shl16=1 << $36;
      var $sub17=(($shl16-1)|0);
      $dmask=$sub17;
      __label__ = 2; break;
    case 2: 
      var $37=$bits;
      var $cmp=(($37)>>>0) < 15;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $38=$in;
      var $incdec_ptr=(($38+1)|0);
      $in=$incdec_ptr;
      var $39=HEAPU8[($incdec_ptr)];
      var $conv=(($39)&255);
      var $40=$bits;
      var $shl18=$conv << $40;
      var $41=$hold;
      var $add=(($41+$shl18)|0);
      $hold=$add;
      var $42=$bits;
      var $add19=(($42+8)|0);
      $bits=$add19;
      var $43=$in;
      var $incdec_ptr20=(($43+1)|0);
      $in=$incdec_ptr20;
      var $44=HEAPU8[($incdec_ptr20)];
      var $conv21=(($44)&255);
      var $45=$bits;
      var $shl22=$conv21 << $45;
      var $46=$hold;
      var $add23=(($46+$shl22)|0);
      $hold=$add23;
      var $47=$bits;
      var $add24=(($47+8)|0);
      $bits=$add24;
      __label__ = 4; break;
    case 4: 
      var $48=$hold;
      var $49=$lmask;
      var $and=$48 & $49;
      var $50=$lcode;
      var $arrayidx=(($50+($and<<2))|0);
      var $51=$here;
      var $52=$arrayidx;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($51)>>1)]=HEAP16[(($52)>>1)];HEAP16[(($51+2)>>1)]=HEAP16[(($52+2)>>1)];
      __label__ = 5; break;
    case 5: 
      var $bits25=(($here+1)|0);
      var $53=HEAPU8[($bits25)];
      var $conv26=(($53)&255);
      $op=$conv26;
      var $54=$op;
      var $55=$hold;
      var $shr=$55 >>> (($54)>>>0);
      $hold=$shr;
      var $56=$op;
      var $57=$bits;
      var $sub27=(($57-$56)|0);
      $bits=$sub27;
      var $op28=(($here)|0);
      var $58=HEAPU8[($op28)];
      var $conv29=(($58)&255);
      $op=$conv29;
      var $59=$op;
      var $cmp30=(($59)|0)==0;
      if ($cmp30) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $val=(($here+2)|0);
      var $60=HEAP16[(($val)>>1)];
      var $conv33=(($60) & 255);
      var $61=$out;
      var $incdec_ptr34=(($61+1)|0);
      $out=$incdec_ptr34;
      HEAP8[($incdec_ptr34)]=$conv33;
      __label__ = 78; break;
    case 7: 
      var $62=$op;
      var $and35=$62 & 16;
      var $tobool=(($and35)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 72; break; }
    case 8: 
      var $val37=(($here+2)|0);
      var $63=HEAPU16[(($val37)>>1)];
      var $conv38=(($63)&65535);
      $len=$conv38;
      var $64=$op;
      var $and39=$64 & 15;
      $op=$and39;
      var $65=$op;
      var $tobool40=(($65)|0)!=0;
      if ($tobool40) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $66=$bits;
      var $67=$op;
      var $cmp42=(($66)>>>0) < (($67)>>>0);
      if ($cmp42) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $68=$in;
      var $incdec_ptr45=(($68+1)|0);
      $in=$incdec_ptr45;
      var $69=HEAPU8[($incdec_ptr45)];
      var $conv46=(($69)&255);
      var $70=$bits;
      var $shl47=$conv46 << $70;
      var $71=$hold;
      var $add48=(($71+$shl47)|0);
      $hold=$add48;
      var $72=$bits;
      var $add49=(($72+8)|0);
      $bits=$add49;
      __label__ = 11; break;
    case 11: 
      var $73=$hold;
      var $74=$op;
      var $shl51=1 << $74;
      var $sub52=(($shl51-1)|0);
      var $and53=$73 & $sub52;
      var $75=$len;
      var $add54=(($75+$and53)|0);
      $len=$add54;
      var $76=$op;
      var $77=$hold;
      var $shr55=$77 >>> (($76)>>>0);
      $hold=$shr55;
      var $78=$op;
      var $79=$bits;
      var $sub56=(($79-$78)|0);
      $bits=$sub56;
      __label__ = 12; break;
    case 12: 
      var $80=$bits;
      var $cmp58=(($80)>>>0) < 15;
      if ($cmp58) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $81=$in;
      var $incdec_ptr61=(($81+1)|0);
      $in=$incdec_ptr61;
      var $82=HEAPU8[($incdec_ptr61)];
      var $conv62=(($82)&255);
      var $83=$bits;
      var $shl63=$conv62 << $83;
      var $84=$hold;
      var $add64=(($84+$shl63)|0);
      $hold=$add64;
      var $85=$bits;
      var $add65=(($85+8)|0);
      $bits=$add65;
      var $86=$in;
      var $incdec_ptr66=(($86+1)|0);
      $in=$incdec_ptr66;
      var $87=HEAPU8[($incdec_ptr66)];
      var $conv67=(($87)&255);
      var $88=$bits;
      var $shl68=$conv67 << $88;
      var $89=$hold;
      var $add69=(($89+$shl68)|0);
      $hold=$add69;
      var $90=$bits;
      var $add70=(($90+8)|0);
      $bits=$add70;
      __label__ = 14; break;
    case 14: 
      var $91=$hold;
      var $92=$dmask;
      var $and72=$91 & $92;
      var $93=$dcode;
      var $arrayidx73=(($93+($and72<<2))|0);
      var $94=$here;
      var $95=$arrayidx73;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($94)>>1)]=HEAP16[(($95)>>1)];HEAP16[(($94+2)>>1)]=HEAP16[(($95+2)>>1)];
      __label__ = 15; break;
    case 15: 
      var $bits74=(($here+1)|0);
      var $96=HEAPU8[($bits74)];
      var $conv75=(($96)&255);
      $op=$conv75;
      var $97=$op;
      var $98=$hold;
      var $shr76=$98 >>> (($97)>>>0);
      $hold=$shr76;
      var $99=$op;
      var $100=$bits;
      var $sub77=(($100-$99)|0);
      $bits=$sub77;
      var $op78=(($here)|0);
      var $101=HEAPU8[($op78)];
      var $conv79=(($101)&255);
      $op=$conv79;
      var $102=$op;
      var $and80=$102 & 16;
      var $tobool81=(($and80)|0)!=0;
      if ($tobool81) { __label__ = 16; break; } else { __label__ = 68; break; }
    case 16: 
      var $val83=(($here+2)|0);
      var $103=HEAPU16[(($val83)>>1)];
      var $conv84=(($103)&65535);
      $dist=$conv84;
      var $104=$op;
      var $and85=$104 & 15;
      $op=$and85;
      var $105=$bits;
      var $106=$op;
      var $cmp86=(($105)>>>0) < (($106)>>>0);
      if ($cmp86) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $107=$in;
      var $incdec_ptr89=(($107+1)|0);
      $in=$incdec_ptr89;
      var $108=HEAPU8[($incdec_ptr89)];
      var $conv90=(($108)&255);
      var $109=$bits;
      var $shl91=$conv90 << $109;
      var $110=$hold;
      var $add92=(($110+$shl91)|0);
      $hold=$add92;
      var $111=$bits;
      var $add93=(($111+8)|0);
      $bits=$add93;
      var $112=$bits;
      var $113=$op;
      var $cmp94=(($112)>>>0) < (($113)>>>0);
      if ($cmp94) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $114=$in;
      var $incdec_ptr97=(($114+1)|0);
      $in=$incdec_ptr97;
      var $115=HEAPU8[($incdec_ptr97)];
      var $conv98=(($115)&255);
      var $116=$bits;
      var $shl99=$conv98 << $116;
      var $117=$hold;
      var $add100=(($117+$shl99)|0);
      $hold=$add100;
      var $118=$bits;
      var $add101=(($118+8)|0);
      $bits=$add101;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $119=$hold;
      var $120=$op;
      var $shl104=1 << $120;
      var $sub105=(($shl104-1)|0);
      var $and106=$119 & $sub105;
      var $121=$dist;
      var $add107=(($121+$and106)|0);
      $dist=$add107;
      var $122=$op;
      var $123=$hold;
      var $shr108=$123 >>> (($122)>>>0);
      $hold=$shr108;
      var $124=$op;
      var $125=$bits;
      var $sub109=(($125-$124)|0);
      $bits=$sub109;
      var $126=$out;
      var $127=$beg;
      var $sub_ptr_lhs_cast=$126;
      var $sub_ptr_rhs_cast=$127;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      $op=$sub_ptr_sub;
      var $128=$dist;
      var $129=$op;
      var $cmp110=(($128)>>>0) > (($129)>>>0);
      if ($cmp110) { __label__ = 21; break; } else { __label__ = 59; break; }
    case 21: 
      var $130=$dist;
      var $131=$op;
      var $sub113=(($130-$131)|0);
      $op=$sub113;
      var $132=$op;
      var $133=$whave;
      var $cmp114=(($132)>>>0) > (($133)>>>0);
      if ($cmp114) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      var $134=$state;
      var $sane=(($134+7104)|0);
      var $135=HEAP32[(($sane)>>2)];
      var $tobool117=(($135)|0)!=0;
      if ($tobool117) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $136=$strm_addr;
      var $msg=(($136+24)|0);
      HEAP32[(($msg)>>2)]=((STRING_TABLE.__str1277)|0);
      var $137=$state;
      var $mode=(($137)|0);
      HEAP32[(($mode)>>2)]=29;
      __label__ = 82; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $138=$window;
      var $add_ptr121=(($138-1)|0);
      $from=$add_ptr121;
      var $139=$wnext;
      var $cmp122=(($139)|0)==0;
      if ($cmp122) { __label__ = 26; break; } else { __label__ = 32; break; }
    case 26: 
      var $140=$wsize;
      var $141=$op;
      var $sub125=(($140-$141)|0);
      var $142=$from;
      var $add_ptr126=(($142+$sub125)|0);
      $from=$add_ptr126;
      var $143=$op;
      var $144=$len;
      var $cmp127=(($143)>>>0) < (($144)>>>0);
      if ($cmp127) { __label__ = 27; break; } else { __label__ = 31; break; }
    case 27: 
      var $145=$op;
      var $146=$len;
      var $sub130=(($146-$145)|0);
      $len=$sub130;
      __label__ = 28; break;
    case 28: 
      var $147=$from;
      var $incdec_ptr132=(($147+1)|0);
      $from=$incdec_ptr132;
      var $148=HEAP8[($incdec_ptr132)];
      var $149=$out;
      var $incdec_ptr133=(($149+1)|0);
      $out=$incdec_ptr133;
      HEAP8[($incdec_ptr133)]=$148;
      __label__ = 29; break;
    case 29: 
      var $150=$op;
      var $dec=(($150-1)|0);
      $op=$dec;
      var $tobool134=(($dec)|0)!=0;
      if ($tobool134) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 30: 
      var $151=$out;
      var $152=$dist;
      var $idx_neg135=(((-$152))|0);
      var $add_ptr136=(($151+$idx_neg135)|0);
      $from=$add_ptr136;
      __label__ = 31; break;
    case 31: 
      __label__ = 51; break;
    case 32: 
      var $153=$wnext;
      var $154=$op;
      var $cmp139=(($153)>>>0) < (($154)>>>0);
      if ($cmp139) { __label__ = 33; break; } else { __label__ = 44; break; }
    case 33: 
      var $155=$wsize;
      var $156=$wnext;
      var $add142=(($155+$156)|0);
      var $157=$op;
      var $sub143=(($add142-$157)|0);
      var $158=$from;
      var $add_ptr144=(($158+$sub143)|0);
      $from=$add_ptr144;
      var $159=$wnext;
      var $160=$op;
      var $sub145=(($160-$159)|0);
      $op=$sub145;
      var $161=$op;
      var $162=$len;
      var $cmp146=(($161)>>>0) < (($162)>>>0);
      if ($cmp146) { __label__ = 34; break; } else { __label__ = 43; break; }
    case 34: 
      var $163=$op;
      var $164=$len;
      var $sub149=(($164-$163)|0);
      $len=$sub149;
      __label__ = 35; break;
    case 35: 
      var $165=$from;
      var $incdec_ptr151=(($165+1)|0);
      $from=$incdec_ptr151;
      var $166=HEAP8[($incdec_ptr151)];
      var $167=$out;
      var $incdec_ptr152=(($167+1)|0);
      $out=$incdec_ptr152;
      HEAP8[($incdec_ptr152)]=$166;
      __label__ = 36; break;
    case 36: 
      var $168=$op;
      var $dec154=(($168-1)|0);
      $op=$dec154;
      var $tobool155=(($dec154)|0)!=0;
      if ($tobool155) { __label__ = 35; break; } else { __label__ = 37; break; }
    case 37: 
      var $169=$window;
      var $add_ptr157=(($169-1)|0);
      $from=$add_ptr157;
      var $170=$wnext;
      var $171=$len;
      var $cmp158=(($170)>>>0) < (($171)>>>0);
      if ($cmp158) { __label__ = 38; break; } else { __label__ = 42; break; }
    case 38: 
      var $172=$wnext;
      $op=$172;
      var $173=$op;
      var $174=$len;
      var $sub161=(($174-$173)|0);
      $len=$sub161;
      __label__ = 39; break;
    case 39: 
      var $175=$from;
      var $incdec_ptr163=(($175+1)|0);
      $from=$incdec_ptr163;
      var $176=HEAP8[($incdec_ptr163)];
      var $177=$out;
      var $incdec_ptr164=(($177+1)|0);
      $out=$incdec_ptr164;
      HEAP8[($incdec_ptr164)]=$176;
      __label__ = 40; break;
    case 40: 
      var $178=$op;
      var $dec166=(($178-1)|0);
      $op=$dec166;
      var $tobool167=(($dec166)|0)!=0;
      if ($tobool167) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 41: 
      var $179=$out;
      var $180=$dist;
      var $idx_neg169=(((-$180))|0);
      var $add_ptr170=(($179+$idx_neg169)|0);
      $from=$add_ptr170;
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 50; break;
    case 44: 
      var $181=$wnext;
      var $182=$op;
      var $sub174=(($181-$182)|0);
      var $183=$from;
      var $add_ptr175=(($183+$sub174)|0);
      $from=$add_ptr175;
      var $184=$op;
      var $185=$len;
      var $cmp176=(($184)>>>0) < (($185)>>>0);
      if ($cmp176) { __label__ = 45; break; } else { __label__ = 49; break; }
    case 45: 
      var $186=$op;
      var $187=$len;
      var $sub179=(($187-$186)|0);
      $len=$sub179;
      __label__ = 46; break;
    case 46: 
      var $188=$from;
      var $incdec_ptr181=(($188+1)|0);
      $from=$incdec_ptr181;
      var $189=HEAP8[($incdec_ptr181)];
      var $190=$out;
      var $incdec_ptr182=(($190+1)|0);
      $out=$incdec_ptr182;
      HEAP8[($incdec_ptr182)]=$189;
      __label__ = 47; break;
    case 47: 
      var $191=$op;
      var $dec184=(($191-1)|0);
      $op=$dec184;
      var $tobool185=(($dec184)|0)!=0;
      if ($tobool185) { __label__ = 46; break; } else { __label__ = 48; break; }
    case 48: 
      var $192=$out;
      var $193=$dist;
      var $idx_neg187=(((-$193))|0);
      var $add_ptr188=(($192+$idx_neg187)|0);
      $from=$add_ptr188;
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $194=$len;
      var $cmp192=(($194)>>>0) > 2;
      if ($cmp192) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $195=$from;
      var $incdec_ptr194=(($195+1)|0);
      $from=$incdec_ptr194;
      var $196=HEAP8[($incdec_ptr194)];
      var $197=$out;
      var $incdec_ptr195=(($197+1)|0);
      $out=$incdec_ptr195;
      HEAP8[($incdec_ptr195)]=$196;
      var $198=$from;
      var $incdec_ptr196=(($198+1)|0);
      $from=$incdec_ptr196;
      var $199=HEAP8[($incdec_ptr196)];
      var $200=$out;
      var $incdec_ptr197=(($200+1)|0);
      $out=$incdec_ptr197;
      HEAP8[($incdec_ptr197)]=$199;
      var $201=$from;
      var $incdec_ptr198=(($201+1)|0);
      $from=$incdec_ptr198;
      var $202=HEAP8[($incdec_ptr198)];
      var $203=$out;
      var $incdec_ptr199=(($203+1)|0);
      $out=$incdec_ptr199;
      HEAP8[($incdec_ptr199)]=$202;
      var $204=$len;
      var $sub200=(($204-3)|0);
      $len=$sub200;
      __label__ = 52; break;
    case 54: 
      var $205=$len;
      var $tobool201=(($205)|0)!=0;
      if ($tobool201) { __label__ = 55; break; } else { __label__ = 58; break; }
    case 55: 
      var $206=$from;
      var $incdec_ptr203=(($206+1)|0);
      $from=$incdec_ptr203;
      var $207=HEAP8[($incdec_ptr203)];
      var $208=$out;
      var $incdec_ptr204=(($208+1)|0);
      $out=$incdec_ptr204;
      HEAP8[($incdec_ptr204)]=$207;
      var $209=$len;
      var $cmp205=(($209)>>>0) > 1;
      if ($cmp205) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $210=$from;
      var $incdec_ptr208=(($210+1)|0);
      $from=$incdec_ptr208;
      var $211=HEAP8[($incdec_ptr208)];
      var $212=$out;
      var $incdec_ptr209=(($212+1)|0);
      $out=$incdec_ptr209;
      HEAP8[($incdec_ptr209)]=$211;
      __label__ = 57; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 67; break;
    case 59: 
      var $213=$out;
      var $214=$dist;
      var $idx_neg213=(((-$214))|0);
      var $add_ptr214=(($213+$idx_neg213)|0);
      $from=$add_ptr214;
      __label__ = 60; break;
    case 60: 
      var $215=$from;
      var $incdec_ptr216=(($215+1)|0);
      $from=$incdec_ptr216;
      var $216=HEAP8[($incdec_ptr216)];
      var $217=$out;
      var $incdec_ptr217=(($217+1)|0);
      $out=$incdec_ptr217;
      HEAP8[($incdec_ptr217)]=$216;
      var $218=$from;
      var $incdec_ptr218=(($218+1)|0);
      $from=$incdec_ptr218;
      var $219=HEAP8[($incdec_ptr218)];
      var $220=$out;
      var $incdec_ptr219=(($220+1)|0);
      $out=$incdec_ptr219;
      HEAP8[($incdec_ptr219)]=$219;
      var $221=$from;
      var $incdec_ptr220=(($221+1)|0);
      $from=$incdec_ptr220;
      var $222=HEAP8[($incdec_ptr220)];
      var $223=$out;
      var $incdec_ptr221=(($223+1)|0);
      $out=$incdec_ptr221;
      HEAP8[($incdec_ptr221)]=$222;
      var $224=$len;
      var $sub222=(($224-3)|0);
      $len=$sub222;
      __label__ = 61; break;
    case 61: 
      var $225=$len;
      var $cmp224=(($225)>>>0) > 2;
      if ($cmp224) { __label__ = 60; break; } else { __label__ = 62; break; }
    case 62: 
      var $226=$len;
      var $tobool227=(($226)|0)!=0;
      if ($tobool227) { __label__ = 63; break; } else { __label__ = 66; break; }
    case 63: 
      var $227=$from;
      var $incdec_ptr229=(($227+1)|0);
      $from=$incdec_ptr229;
      var $228=HEAP8[($incdec_ptr229)];
      var $229=$out;
      var $incdec_ptr230=(($229+1)|0);
      $out=$incdec_ptr230;
      HEAP8[($incdec_ptr230)]=$228;
      var $230=$len;
      var $cmp231=(($230)>>>0) > 1;
      if ($cmp231) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $231=$from;
      var $incdec_ptr234=(($231+1)|0);
      $from=$incdec_ptr234;
      var $232=HEAP8[($incdec_ptr234)];
      var $233=$out;
      var $incdec_ptr235=(($233+1)|0);
      $out=$incdec_ptr235;
      HEAP8[($incdec_ptr235)]=$232;
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      __label__ = 71; break;
    case 68: 
      var $234=$op;
      var $and240=$234 & 64;
      var $cmp241=(($and240)|0)==0;
      if ($cmp241) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $val244=(($here+2)|0);
      var $235=HEAPU16[(($val244)>>1)];
      var $conv245=(($235)&65535);
      var $236=$hold;
      var $237=$op;
      var $shl246=1 << $237;
      var $sub247=(($shl246-1)|0);
      var $and248=$236 & $sub247;
      var $add249=(($conv245+$and248)|0);
      var $238=$dcode;
      var $arrayidx250=(($238+($add249<<2))|0);
      var $239=$here;
      var $240=$arrayidx250;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($239)>>1)]=HEAP16[(($240)>>1)];HEAP16[(($239+2)>>1)]=HEAP16[(($240+2)>>1)];
      __label__ = 15; break;
    case 70: 
      var $241=$strm_addr;
      var $msg252=(($241+24)|0);
      HEAP32[(($msg252)>>2)]=((STRING_TABLE.__str11278)|0);
      var $242=$state;
      var $mode253=(($242)|0);
      HEAP32[(($mode253)>>2)]=29;
      __label__ = 82; break;
    case 71: 
      __label__ = 77; break;
    case 72: 
      var $243=$op;
      var $and256=$243 & 64;
      var $cmp257=(($and256)|0)==0;
      if ($cmp257) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $val260=(($here+2)|0);
      var $244=HEAPU16[(($val260)>>1)];
      var $conv261=(($244)&65535);
      var $245=$hold;
      var $246=$op;
      var $shl262=1 << $246;
      var $sub263=(($shl262-1)|0);
      var $and264=$245 & $sub263;
      var $add265=(($conv261+$and264)|0);
      var $247=$lcode;
      var $arrayidx266=(($247+($add265<<2))|0);
      var $248=$here;
      var $249=$arrayidx266;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($248)>>1)]=HEAP16[(($249)>>1)];HEAP16[(($248+2)>>1)]=HEAP16[(($249+2)>>1)];
      __label__ = 5; break;
    case 74: 
      var $250=$op;
      var $and268=$250 & 32;
      var $tobool269=(($and268)|0)!=0;
      if ($tobool269) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      var $251=$state;
      var $mode271=(($251)|0);
      HEAP32[(($mode271)>>2)]=11;
      __label__ = 82; break;
    case 76: 
      var $252=$strm_addr;
      var $msg273=(($252+24)|0);
      HEAP32[(($msg273)>>2)]=((STRING_TABLE.__str21279)|0);
      var $253=$state;
      var $mode274=(($253)|0);
      HEAP32[(($mode274)>>2)]=29;
      __label__ = 82; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      var $254=$in;
      var $255=$last;
      var $cmp278=(($254)>>>0) < (($255)>>>0);
      if ($cmp278) { __label__ = 80; break; } else { var $258 = 0;__label__ = 81; break; }
    case 80: 
      var $256=$out;
      var $257=$end;
      var $cmp280=(($256)>>>0) < (($257)>>>0);
      var $258 = $cmp280;__label__ = 81; break;
    case 81: 
      var $258;
      if ($258) { __label__ = 2; break; } else { __label__ = 82; break; }
    case 82: 
      var $259=$bits;
      var $shr283=$259 >>> 3;
      $len=$shr283;
      var $260=$len;
      var $261=$in;
      var $idx_neg284=(((-$260))|0);
      var $add_ptr285=(($261+$idx_neg284)|0);
      $in=$add_ptr285;
      var $262=$len;
      var $shl286=$262 << 3;
      var $263=$bits;
      var $sub287=(($263-$shl286)|0);
      $bits=$sub287;
      var $264=$bits;
      var $shl288=1 << $264;
      var $sub289=(($shl288-1)|0);
      var $265=$hold;
      var $and290=$265 & $sub289;
      $hold=$and290;
      var $266=$in;
      var $add_ptr291=(($266+1)|0);
      var $267=$strm_addr;
      var $next_in292=(($267)|0);
      HEAP32[(($next_in292)>>2)]=$add_ptr291;
      var $268=$out;
      var $add_ptr293=(($268+1)|0);
      var $269=$strm_addr;
      var $next_out294=(($269+12)|0);
      HEAP32[(($next_out294)>>2)]=$add_ptr293;
      var $270=$in;
      var $271=$last;
      var $cmp295=(($270)>>>0) < (($271)>>>0);
      if ($cmp295) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $272=$last;
      var $273=$in;
      var $sub_ptr_lhs_cast297=$272;
      var $sub_ptr_rhs_cast298=$273;
      var $sub_ptr_sub299=(($sub_ptr_lhs_cast297-$sub_ptr_rhs_cast298)|0);
      var $add300=(($sub_ptr_sub299+5)|0);
      var $cond = $add300;__label__ = 85; break;
    case 84: 
      var $274=$in;
      var $275=$last;
      var $sub_ptr_lhs_cast301=$274;
      var $sub_ptr_rhs_cast302=$275;
      var $sub_ptr_sub303=(($sub_ptr_lhs_cast301-$sub_ptr_rhs_cast302)|0);
      var $sub304=((5-$sub_ptr_sub303)|0);
      var $cond = $sub304;__label__ = 85; break;
    case 85: 
      var $cond;
      var $276=$strm_addr;
      var $avail_in305=(($276+4)|0);
      HEAP32[(($avail_in305)>>2)]=$cond;
      var $277=$out;
      var $278=$end;
      var $cmp306=(($277)>>>0) < (($278)>>>0);
      if ($cmp306) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $279=$end;
      var $280=$out;
      var $sub_ptr_lhs_cast309=$279;
      var $sub_ptr_rhs_cast310=$280;
      var $sub_ptr_sub311=(($sub_ptr_lhs_cast309-$sub_ptr_rhs_cast310)|0);
      var $add312=(($sub_ptr_sub311+257)|0);
      var $cond319 = $add312;__label__ = 88; break;
    case 87: 
      var $281=$out;
      var $282=$end;
      var $sub_ptr_lhs_cast314=$281;
      var $sub_ptr_rhs_cast315=$282;
      var $sub_ptr_sub316=(($sub_ptr_lhs_cast314-$sub_ptr_rhs_cast315)|0);
      var $sub317=((257-$sub_ptr_sub316)|0);
      var $cond319 = $sub317;__label__ = 88; break;
    case 88: 
      var $cond319;
      var $283=$strm_addr;
      var $avail_out320=(($283+16)|0);
      HEAP32[(($avail_out320)>>2)]=$cond319;
      var $284=$hold;
      var $285=$state;
      var $hold321=(($285+56)|0);
      HEAP32[(($hold321)>>2)]=$284;
      var $286=$bits;
      var $287=$state;
      var $bits322=(($287+60)|0);
      HEAP32[(($bits322)>>2)]=$286;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_inflate_fast["X"]=1;

function _inflateResetKeep($strm) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $state;
      $strm_addr=$strm;
      var $0=$strm_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$strm_addr;
      var $state1=(($1+28)|0);
      var $2=HEAP32[(($state1)>>2)];
      var $cmp2=(($2)|0)==0;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=-2;
      __label__ = 7; break;
    case 4: 
      var $3=$strm_addr;
      var $state3=(($3+28)|0);
      var $4=HEAP32[(($state3)>>2)];
      var $5=$4;
      $state=$5;
      var $6=$state;
      var $total=(($6+28)|0);
      HEAP32[(($total)>>2)]=0;
      var $7=$strm_addr;
      var $total_out=(($7+20)|0);
      HEAP32[(($total_out)>>2)]=0;
      var $8=$strm_addr;
      var $total_in=(($8+8)|0);
      HEAP32[(($total_in)>>2)]=0;
      var $9=$strm_addr;
      var $msg=(($9+24)|0);
      HEAP32[(($msg)>>2)]=0;
      var $10=$state;
      var $wrap=(($10+8)|0);
      var $11=HEAP32[(($wrap)>>2)];
      var $tobool=(($11)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=$state;
      var $wrap5=(($12+8)|0);
      var $13=HEAP32[(($wrap5)>>2)];
      var $and=$13 & 1;
      var $14=$strm_addr;
      var $adler=(($14+48)|0);
      HEAP32[(($adler)>>2)]=$and;
      __label__ = 6; break;
    case 6: 
      var $15=$state;
      var $mode=(($15)|0);
      HEAP32[(($mode)>>2)]=0;
      var $16=$state;
      var $last=(($16+4)|0);
      HEAP32[(($last)>>2)]=0;
      var $17=$state;
      var $havedict=(($17+12)|0);
      HEAP32[(($havedict)>>2)]=0;
      var $18=$state;
      var $dmax=(($18+20)|0);
      HEAP32[(($dmax)>>2)]=32768;
      var $19=$state;
      var $head=(($19+32)|0);
      HEAP32[(($head)>>2)]=0;
      var $20=$state;
      var $hold=(($20+56)|0);
      HEAP32[(($hold)>>2)]=0;
      var $21=$state;
      var $bits=(($21+60)|0);
      HEAP32[(($bits)>>2)]=0;
      var $22=$state;
      var $codes=(($22+1328)|0);
      var $arraydecay=(($codes)|0);
      var $23=$state;
      var $next=(($23+108)|0);
      HEAP32[(($next)>>2)]=$arraydecay;
      var $24=$state;
      var $distcode=(($24+80)|0);
      HEAP32[(($distcode)>>2)]=$arraydecay;
      var $25=$state;
      var $lencode=(($25+76)|0);
      HEAP32[(($lencode)>>2)]=$arraydecay;
      var $26=$state;
      var $sane=(($26+7104)|0);
      HEAP32[(($sane)>>2)]=1;
      var $27=$state;
      var $back=(($27+7108)|0);
      HEAP32[(($back)>>2)]=-1;
      $retval=0;
      __label__ = 7; break;
    case 7: 
      var $28=$retval;
      ;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}
_inflateResetKeep["X"]=1;

function _inflateReset($strm) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $state;
      $strm_addr=$strm;
      var $0=$strm_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$strm_addr;
      var $state1=(($1+28)|0);
      var $2=HEAP32[(($state1)>>2)];
      var $cmp2=(($2)|0)==0;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=-2;
      __label__ = 5; break;
    case 4: 
      var $3=$strm_addr;
      var $state3=(($3+28)|0);
      var $4=HEAP32[(($state3)>>2)];
      var $5=$4;
      $state=$5;
      var $6=$state;
      var $wsize=(($6+40)|0);
      HEAP32[(($wsize)>>2)]=0;
      var $7=$state;
      var $whave=(($7+44)|0);
      HEAP32[(($whave)>>2)]=0;
      var $8=$state;
      var $wnext=(($8+48)|0);
      HEAP32[(($wnext)>>2)]=0;
      var $9=$strm_addr;
      var $call=_inflateResetKeep($9);
      $retval=$call;
      __label__ = 5; break;
    case 5: 
      var $10=$retval;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _inflateReset2($strm, $windowBits) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $windowBits_addr;
      var $wrap;
      var $state;
      $strm_addr=$strm;
      $windowBits_addr=$windowBits;
      var $0=$strm_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$strm_addr;
      var $state1=(($1+28)|0);
      var $2=HEAP32[(($state1)>>2)];
      var $cmp2=(($2)|0)==0;
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=-2;
      __label__ = 17; break;
    case 4: 
      var $3=$strm_addr;
      var $state3=(($3+28)|0);
      var $4=HEAP32[(($state3)>>2)];
      var $5=$4;
      $state=$5;
      var $6=$windowBits_addr;
      var $cmp4=(($6)|0) < 0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $wrap=0;
      var $7=$windowBits_addr;
      var $sub=(((-$7))|0);
      $windowBits_addr=$sub;
      __label__ = 9; break;
    case 6: 
      var $8=$windowBits_addr;
      var $shr=$8 >> 4;
      var $add=(($shr+1)|0);
      $wrap=$add;
      var $9=$windowBits_addr;
      var $cmp6=(($9)|0) < 48;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $10=$windowBits_addr;
      var $and=$10 & 15;
      $windowBits_addr=$and;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $11=$windowBits_addr;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $12=$windowBits_addr;
      var $cmp10=(($12)|0) < 8;
      if ($cmp10) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $13=$windowBits_addr;
      var $cmp12=(($13)|0) > 15;
      if ($cmp12) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $retval=-2;
      __label__ = 17; break;
    case 13: 
      var $14=$state;
      var $window=(($14+52)|0);
      var $15=HEAP32[(($window)>>2)];
      var $cmp15=(($15)|0)!=0;
      if ($cmp15) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $16=$state;
      var $wbits=(($16+36)|0);
      var $17=HEAP32[(($wbits)>>2)];
      var $18=$windowBits_addr;
      var $cmp17=(($17)|0)!=(($18)|0);
      if ($cmp17) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $19=$strm_addr;
      var $zfree=(($19+36)|0);
      var $20=HEAP32[(($zfree)>>2)];
      var $21=$strm_addr;
      var $opaque=(($21+40)|0);
      var $22=HEAP32[(($opaque)>>2)];
      var $23=$state;
      var $window19=(($23+52)|0);
      var $24=HEAP32[(($window19)>>2)];
      FUNCTION_TABLE[$20]($22, $24);
      var $25=$state;
      var $window20=(($25+52)|0);
      HEAP32[(($window20)>>2)]=0;
      __label__ = 16; break;
    case 16: 
      var $26=$wrap;
      var $27=$state;
      var $wrap22=(($27+8)|0);
      HEAP32[(($wrap22)>>2)]=$26;
      var $28=$windowBits_addr;
      var $29=$state;
      var $wbits23=(($29+36)|0);
      HEAP32[(($wbits23)>>2)]=$28;
      var $30=$strm_addr;
      var $call=_inflateReset($30);
      $retval=$call;
      __label__ = 17; break;
    case 17: 
      var $31=$retval;
      ;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}
_inflateReset2["X"]=1;

function _inflateInit2_($strm, $windowBits, $version, $stream_size) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $windowBits_addr;
      var $version_addr;
      var $stream_size_addr;
      var $ret;
      var $state;
      $strm_addr=$strm;
      $windowBits_addr=$windowBits;
      $version_addr=$version;
      $stream_size_addr=$stream_size;
      var $0=$version_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$version_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2 << 24) >> 24);
      var $3=HEAP8[(((STRING_TABLE.__str1282)|0))];
      var $conv1=(($3 << 24) >> 24);
      var $cmp2=(($conv)|0)!=(($conv1)|0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$stream_size_addr;
      var $cmp5=(($4)|0)!=56;
      if ($cmp5) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=-6;
      __label__ = 16; break;
    case 5: 
      var $5=$strm_addr;
      var $cmp7=(($5)|0)==0;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $retval=-2;
      __label__ = 16; break;
    case 7: 
      var $6=$strm_addr;
      var $msg=(($6+24)|0);
      HEAP32[(($msg)>>2)]=0;
      var $7=$strm_addr;
      var $zalloc=(($7+32)|0);
      var $8=HEAP32[(($zalloc)>>2)];
      var $cmp11=(($8)|0)==0;
      if ($cmp11) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $retval=-2;
      __label__ = 16; break;
    case 9: 
      var $9=$strm_addr;
      var $zfree=(($9+36)|0);
      var $10=HEAP32[(($zfree)>>2)];
      var $cmp15=(($10)|0)==0;
      if ($cmp15) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $retval=-2;
      __label__ = 16; break;
    case 11: 
      var $11=$strm_addr;
      var $zalloc19=(($11+32)|0);
      var $12=HEAP32[(($zalloc19)>>2)];
      var $13=$strm_addr;
      var $opaque=(($13+40)|0);
      var $14=HEAP32[(($opaque)>>2)];
      var $call=FUNCTION_TABLE[$12]($14, 1, 7116);
      var $15=$call;
      $state=$15;
      var $16=$state;
      var $cmp20=(($16)|0)==0;
      if ($cmp20) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $retval=-4;
      __label__ = 16; break;
    case 13: 
      var $17=$state;
      var $18=$17;
      var $19=$strm_addr;
      var $state24=(($19+28)|0);
      HEAP32[(($state24)>>2)]=$18;
      var $20=$state;
      var $window=(($20+52)|0);
      HEAP32[(($window)>>2)]=0;
      var $21=$strm_addr;
      var $22=$windowBits_addr;
      var $call25=_inflateReset2($21, $22);
      $ret=$call25;
      var $23=$ret;
      var $cmp26=(($23)|0)!=0;
      if ($cmp26) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $24=$strm_addr;
      var $zfree29=(($24+36)|0);
      var $25=HEAP32[(($zfree29)>>2)];
      var $26=$strm_addr;
      var $opaque30=(($26+40)|0);
      var $27=HEAP32[(($opaque30)>>2)];
      var $28=$state;
      var $29=$28;
      FUNCTION_TABLE[$25]($27, $29);
      var $30=$strm_addr;
      var $state31=(($30+28)|0);
      HEAP32[(($state31)>>2)]=0;
      __label__ = 15; break;
    case 15: 
      var $31=$ret;
      $retval=$31;
      __label__ = 16; break;
    case 16: 
      var $32=$retval;
      ;
      return $32;
    default: assert(0, "bad label: " + __label__);
  }
}
_inflateInit2_["X"]=1;

function _inflateInit_($strm, $version, $stream_size) {
  ;
  var __label__;

  var $strm_addr;
  var $version_addr;
  var $stream_size_addr;
  $strm_addr=$strm;
  $version_addr=$version;
  $stream_size_addr=$stream_size;
  var $0=$strm_addr;
  var $1=$version_addr;
  var $2=$stream_size_addr;
  var $call=_inflateInit2_($0, 15, $1, $2);
  ;
  return $call;
}


function _inflate($strm, $flush) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $flush_addr;
      var $state;
      var $next;
      var $put;
      var $have;
      var $left;
      var $hold;
      var $bits;
      var $in;
      var $out;
      var $copy;
      var $from;
      var $here=__stackBase__;
      var $last=__stackBase__+4;
      var $len;
      var $ret;
      var $hbuf=__stackBase__+8;
      $strm_addr=$strm;
      $flush_addr=$flush;
      var $0=$strm_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$strm_addr;
      var $state1=(($1+28)|0);
      var $2=HEAP32[(($state1)>>2)];
      var $cmp2=(($2)|0)==0;
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$strm_addr;
      var $next_out=(($3+12)|0);
      var $4=HEAP32[(($next_out)>>2)];
      var $cmp4=(($4)|0)==0;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 4; break; }
    case 4: 
      var $5=$strm_addr;
      var $next_in=(($5)|0);
      var $6=HEAP32[(($next_in)>>2)];
      var $cmp6=(($6)|0)==0;
      if ($cmp6) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $7=$strm_addr;
      var $avail_in=(($7+4)|0);
      var $8=HEAP32[(($avail_in)>>2)];
      var $cmp7=(($8)|0)!=0;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $retval=-2;
      __label__ = 589; break;
    case 7: 
      var $9=$strm_addr;
      var $state8=(($9+28)|0);
      var $10=HEAP32[(($state8)>>2)];
      var $11=$10;
      $state=$11;
      var $12=$state;
      var $mode=(($12)|0);
      var $13=HEAP32[(($mode)>>2)];
      var $cmp9=(($13)|0)==11;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $14=$state;
      var $mode11=(($14)|0);
      HEAP32[(($mode11)>>2)]=12;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $15=$strm_addr;
      var $next_out13=(($15+12)|0);
      var $16=HEAP32[(($next_out13)>>2)];
      $put=$16;
      var $17=$strm_addr;
      var $avail_out=(($17+16)|0);
      var $18=HEAP32[(($avail_out)>>2)];
      $left=$18;
      var $19=$strm_addr;
      var $next_in14=(($19)|0);
      var $20=HEAP32[(($next_in14)>>2)];
      $next=$20;
      var $21=$strm_addr;
      var $avail_in15=(($21+4)|0);
      var $22=HEAP32[(($avail_in15)>>2)];
      $have=$22;
      var $23=$state;
      var $hold16=(($23+56)|0);
      var $24=HEAP32[(($hold16)>>2)];
      $hold=$24;
      var $25=$state;
      var $bits17=(($25+60)|0);
      var $26=HEAP32[(($bits17)>>2)];
      $bits=$26;
      __label__ = 11; break;
    case 11: 
      var $27=$have;
      $in=$27;
      var $28=$left;
      $out=$28;
      $ret=0;
      __label__ = 12; break;
    case 12: 
      var $29=$state;
      var $mode18=(($29)|0);
      var $30=HEAP32[(($mode18)>>2)];
      if ((($30)|0) == 0) {
        __label__ = 13; break;
      }
      else if ((($30)|0) == 1) {
        __label__ = 48; break;
      }
      else if ((($30)|0) == 2) {
        __label__ = 70; break;
      }
      else if ((($30)|0) == 3) {
        __label__ = 88; break;
      }
      else if ((($30)|0) == 4) {
        __label__ = 106; break;
      }
      else if ((($30)|0) == 5) {
        __label__ = 129; break;
      }
      else if ((($30)|0) == 6) {
        __label__ = 146; break;
      }
      else if ((($30)|0) == 7) {
        __label__ = 167; break;
      }
      else if ((($30)|0) == 8) {
        __label__ = 188; break;
      }
      else if ((($30)|0) == 9) {
        __label__ = 206; break;
      }
      else if ((($30)|0) == 10) {
        __label__ = 218; break;
      }
      else if ((($30)|0) == 11) {
        __label__ = 223; break;
      }
      else if ((($30)|0) == 12) {
        __label__ = 227; break;
      }
      else if ((($30)|0) == 13) {
        __label__ = 254; break;
      }
      else if ((($30)|0) == 14) {
        __label__ = 272; break;
      }
      else if ((($30)|0) == 15) {
        __label__ = 273; break;
      }
      else if ((($30)|0) == 16) {
        __label__ = 282; break;
      }
      else if ((($30)|0) == 17) {
        __label__ = 301; break;
      }
      else if ((($30)|0) == 18) {
        __label__ = 321; break;
      }
      else if ((($30)|0) == 19) {
        __label__ = 400; break;
      }
      else if ((($30)|0) == 20) {
        __label__ = 401; break;
      }
      else if ((($30)|0) == 21) {
        __label__ = 440; break;
      }
      else if ((($30)|0) == 22) {
        __label__ = 454; break;
      }
      else if ((($30)|0) == 23) {
        __label__ = 479; break;
      }
      else if ((($30)|0) == 24) {
        __label__ = 493; break;
      }
      else if ((($30)|0) == 25) {
        __label__ = 515; break;
      }
      else if ((($30)|0) == 26) {
        __label__ = 518; break;
      }
      else if ((($30)|0) == 27) {
        __label__ = 542; break;
      }
      else if ((($30)|0) == 28) {
        __label__ = 559; break;
      }
      else if ((($30)|0) == 29) {
        __label__ = 560; break;
      }
      else if ((($30)|0) == 30) {
        __label__ = 561; break;
      }
      else if ((($30)|0) == 31) {
        __label__ = 562; break;
      }
      else {
      __label__ = 563; break;
      }
      
    case 13: 
      var $31=$state;
      var $wrap=(($31+8)|0);
      var $32=HEAP32[(($wrap)>>2)];
      var $cmp19=(($32)|0)==0;
      if ($cmp19) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $33=$state;
      var $mode21=(($33)|0);
      HEAP32[(($mode21)>>2)]=12;
      __label__ = 564; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $34=$bits;
      var $cmp24=(($34)>>>0) < 16;
      if ($cmp24) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $35=$have;
      var $cmp26=(($35)|0)==0;
      if ($cmp26) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 565; break;
    case 21: 
      var $36=$have;
      var $dec=(($36-1)|0);
      $have=$dec;
      var $37=$next;
      var $incdec_ptr=(($37+1)|0);
      $next=$incdec_ptr;
      var $38=HEAPU8[($37)];
      var $conv=(($38)&255);
      var $39=$bits;
      var $shl=$conv << $39;
      var $40=$hold;
      var $add=(($40+$shl)|0);
      $hold=$add;
      var $41=$bits;
      var $add29=(($41+8)|0);
      $bits=$add29;
      __label__ = 22; break;
    case 22: 
      __label__ = 17; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $42=$state;
      var $wrap32=(($42+8)|0);
      var $43=HEAP32[(($wrap32)>>2)];
      var $and=$43 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 25; break; } else { __label__ = 31; break; }
    case 25: 
      var $44=$hold;
      var $cmp34=(($44)|0)==35615;
      if ($cmp34) { __label__ = 26; break; } else { __label__ = 31; break; }
    case 26: 
      var $call=_crc32(0, 0, 0);
      var $45=$state;
      var $check=(($45+24)|0);
      HEAP32[(($check)>>2)]=$call;
      __label__ = 27; break;
    case 27: 
      var $46=$hold;
      var $conv38=(($46) & 255);
      var $arrayidx=(($hbuf)|0);
      HEAP8[($arrayidx)]=$conv38;
      var $47=$hold;
      var $shr=$47 >>> 8;
      var $conv39=(($shr) & 255);
      var $arrayidx40=(($hbuf+1)|0);
      HEAP8[($arrayidx40)]=$conv39;
      var $48=$state;
      var $check41=(($48+24)|0);
      var $49=HEAP32[(($check41)>>2)];
      var $arraydecay=(($hbuf)|0);
      var $call42=_crc32($49, $arraydecay, 2);
      var $50=$state;
      var $check43=(($50+24)|0);
      HEAP32[(($check43)>>2)]=$call42;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      $hold=0;
      $bits=0;
      __label__ = 30; break;
    case 30: 
      var $51=$state;
      var $mode47=(($51)|0);
      HEAP32[(($mode47)>>2)]=1;
      __label__ = 564; break;
    case 31: 
      var $52=$state;
      var $flags=(($52+16)|0);
      HEAP32[(($flags)>>2)]=0;
      var $53=$state;
      var $head=(($53+32)|0);
      var $54=HEAP32[(($head)>>2)];
      var $cmp49=(($54)|0)!=0;
      if ($cmp49) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $55=$state;
      var $head52=(($55+32)|0);
      var $56=HEAP32[(($head52)>>2)];
      var $done=(($56+48)|0);
      HEAP32[(($done)>>2)]=-1;
      __label__ = 33; break;
    case 33: 
      var $57=$state;
      var $wrap54=(($57+8)|0);
      var $58=HEAP32[(($wrap54)>>2)];
      var $and55=$58 & 1;
      var $tobool56=(($and55)|0)!=0;
      if ($tobool56) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $59=$hold;
      var $and58=$59 & 255;
      var $shl59=$and58 << 8;
      var $60=$hold;
      var $shr60=$60 >>> 8;
      var $add61=(($shl59+$shr60)|0);
      var $rem=(($add61)>>>0)%31;
      var $tobool62=(($rem)|0)!=0;
      if ($tobool62) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $61=$strm_addr;
      var $msg=(($61+24)|0);
      HEAP32[(($msg)>>2)]=((STRING_TABLE.__str11283)|0);
      var $62=$state;
      var $mode64=(($62)|0);
      HEAP32[(($mode64)>>2)]=29;
      __label__ = 564; break;
    case 36: 
      var $63=$hold;
      var $and66=$63 & 15;
      var $cmp67=(($and66)|0)!=8;
      if ($cmp67) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $64=$strm_addr;
      var $msg70=(($64+24)|0);
      HEAP32[(($msg70)>>2)]=((STRING_TABLE.__str21284)|0);
      var $65=$state;
      var $mode71=(($65)|0);
      HEAP32[(($mode71)>>2)]=29;
      __label__ = 564; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $66=$hold;
      var $shr74=$66 >>> 4;
      $hold=$shr74;
      var $67=$bits;
      var $sub=(($67-4)|0);
      $bits=$sub;
      __label__ = 40; break;
    case 40: 
      var $68=$hold;
      var $and76=$68 & 15;
      var $add77=(($and76+8)|0);
      $len=$add77;
      var $69=$state;
      var $wbits=(($69+36)|0);
      var $70=HEAP32[(($wbits)>>2)];
      var $cmp78=(($70)|0)==0;
      if ($cmp78) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $71=$len;
      var $72=$state;
      var $wbits81=(($72+36)|0);
      HEAP32[(($wbits81)>>2)]=$71;
      __label__ = 45; break;
    case 42: 
      var $73=$len;
      var $74=$state;
      var $wbits82=(($74+36)|0);
      var $75=HEAPU32[(($wbits82)>>2)];
      var $cmp83=(($73)>>>0) > (($75)>>>0);
      if ($cmp83) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $76=$strm_addr;
      var $msg86=(($76+24)|0);
      HEAP32[(($msg86)>>2)]=((STRING_TABLE.__str31285)|0);
      var $77=$state;
      var $mode87=(($77)|0);
      HEAP32[(($mode87)>>2)]=29;
      __label__ = 564; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $78=$len;
      var $shl90=1 << $78;
      var $79=$state;
      var $dmax=(($79+20)|0);
      HEAP32[(($dmax)>>2)]=$shl90;
      var $call91=_adler32(0, 0, 0);
      var $80=$state;
      var $check92=(($80+24)|0);
      HEAP32[(($check92)>>2)]=$call91;
      var $81=$strm_addr;
      var $adler=(($81+48)|0);
      HEAP32[(($adler)>>2)]=$call91;
      var $82=$hold;
      var $and93=$82 & 512;
      var $tobool94=(($and93)|0)!=0;
      var $cond=$tobool94 ? 9 : 11;
      var $83=$state;
      var $mode95=(($83)|0);
      HEAP32[(($mode95)>>2)]=$cond;
      __label__ = 46; break;
    case 46: 
      $hold=0;
      $bits=0;
      __label__ = 47; break;
    case 47: 
      __label__ = 564; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $84=$bits;
      var $cmp101=(($84)>>>0) < 16;
      if ($cmp101) { __label__ = 51; break; } else { __label__ = 56; break; }
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $85=$have;
      var $cmp105=(($85)|0)==0;
      if ($cmp105) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      __label__ = 565; break;
    case 54: 
      var $86=$have;
      var $dec109=(($86-1)|0);
      $have=$dec109;
      var $87=$next;
      var $incdec_ptr110=(($87+1)|0);
      $next=$incdec_ptr110;
      var $88=HEAPU8[($87)];
      var $conv111=(($88)&255);
      var $89=$bits;
      var $shl112=$conv111 << $89;
      var $90=$hold;
      var $add113=(($90+$shl112)|0);
      $hold=$add113;
      var $91=$bits;
      var $add114=(($91+8)|0);
      $bits=$add114;
      __label__ = 55; break;
    case 55: 
      __label__ = 50; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $92=$hold;
      var $93=$state;
      var $flags118=(($93+16)|0);
      HEAP32[(($flags118)>>2)]=$92;
      var $94=$state;
      var $flags119=(($94+16)|0);
      var $95=HEAP32[(($flags119)>>2)];
      var $and120=$95 & 255;
      var $cmp121=(($and120)|0)!=8;
      if ($cmp121) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $96=$strm_addr;
      var $msg124=(($96+24)|0);
      HEAP32[(($msg124)>>2)]=((STRING_TABLE.__str21284)|0);
      var $97=$state;
      var $mode125=(($97)|0);
      HEAP32[(($mode125)>>2)]=29;
      __label__ = 564; break;
    case 59: 
      var $98=$state;
      var $flags127=(($98+16)|0);
      var $99=HEAP32[(($flags127)>>2)];
      var $and128=$99 & 57344;
      var $tobool129=(($and128)|0)!=0;
      if ($tobool129) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $100=$strm_addr;
      var $msg131=(($100+24)|0);
      HEAP32[(($msg131)>>2)]=((STRING_TABLE.__str41286)|0);
      var $101=$state;
      var $mode132=(($101)|0);
      HEAP32[(($mode132)>>2)]=29;
      __label__ = 564; break;
    case 61: 
      var $102=$state;
      var $head134=(($102+32)|0);
      var $103=HEAP32[(($head134)>>2)];
      var $cmp135=(($103)|0)!=0;
      if ($cmp135) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $104=$hold;
      var $shr138=$104 >>> 8;
      var $and139=$shr138 & 1;
      var $105=$state;
      var $head140=(($105+32)|0);
      var $106=HEAP32[(($head140)>>2)];
      var $text=(($106)|0);
      HEAP32[(($text)>>2)]=$and139;
      __label__ = 63; break;
    case 63: 
      var $107=$state;
      var $flags142=(($107+16)|0);
      var $108=HEAP32[(($flags142)>>2)];
      var $and143=$108 & 512;
      var $tobool144=(($and143)|0)!=0;
      if ($tobool144) { __label__ = 64; break; } else { __label__ = 67; break; }
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $109=$hold;
      var $conv147=(($109) & 255);
      var $arrayidx148=(($hbuf)|0);
      HEAP8[($arrayidx148)]=$conv147;
      var $110=$hold;
      var $shr149=$110 >>> 8;
      var $conv150=(($shr149) & 255);
      var $arrayidx151=(($hbuf+1)|0);
      HEAP8[($arrayidx151)]=$conv150;
      var $111=$state;
      var $check152=(($111+24)|0);
      var $112=HEAP32[(($check152)>>2)];
      var $arraydecay153=(($hbuf)|0);
      var $call154=_crc32($112, $arraydecay153, 2);
      var $113=$state;
      var $check155=(($113+24)|0);
      HEAP32[(($check155)>>2)]=$call154;
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      $hold=0;
      $bits=0;
      __label__ = 69; break;
    case 69: 
      var $114=$state;
      var $mode160=(($114)|0);
      HEAP32[(($mode160)>>2)]=2;
      __label__ = 70; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $115=$bits;
      var $cmp164=(($115)>>>0) < 32;
      if ($cmp164) { __label__ = 73; break; } else { __label__ = 78; break; }
    case 73: 
      __label__ = 74; break;
    case 74: 
      var $116=$have;
      var $cmp168=(($116)|0)==0;
      if ($cmp168) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      __label__ = 565; break;
    case 76: 
      var $117=$have;
      var $dec172=(($117-1)|0);
      $have=$dec172;
      var $118=$next;
      var $incdec_ptr173=(($118+1)|0);
      $next=$incdec_ptr173;
      var $119=HEAPU8[($118)];
      var $conv174=(($119)&255);
      var $120=$bits;
      var $shl175=$conv174 << $120;
      var $121=$hold;
      var $add176=(($121+$shl175)|0);
      $hold=$add176;
      var $122=$bits;
      var $add177=(($122+8)|0);
      $bits=$add177;
      __label__ = 77; break;
    case 77: 
      __label__ = 72; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      var $123=$state;
      var $head181=(($123+32)|0);
      var $124=HEAP32[(($head181)>>2)];
      var $cmp182=(($124)|0)!=0;
      if ($cmp182) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $125=$hold;
      var $126=$state;
      var $head185=(($126+32)|0);
      var $127=HEAP32[(($head185)>>2)];
      var $time=(($127+4)|0);
      HEAP32[(($time)>>2)]=$125;
      __label__ = 81; break;
    case 81: 
      var $128=$state;
      var $flags187=(($128+16)|0);
      var $129=HEAP32[(($flags187)>>2)];
      var $and188=$129 & 512;
      var $tobool189=(($and188)|0)!=0;
      if ($tobool189) { __label__ = 82; break; } else { __label__ = 85; break; }
    case 82: 
      __label__ = 83; break;
    case 83: 
      var $130=$hold;
      var $conv192=(($130) & 255);
      var $arrayidx193=(($hbuf)|0);
      HEAP8[($arrayidx193)]=$conv192;
      var $131=$hold;
      var $shr194=$131 >>> 8;
      var $conv195=(($shr194) & 255);
      var $arrayidx196=(($hbuf+1)|0);
      HEAP8[($arrayidx196)]=$conv195;
      var $132=$hold;
      var $shr197=$132 >>> 16;
      var $conv198=(($shr197) & 255);
      var $arrayidx199=(($hbuf+2)|0);
      HEAP8[($arrayidx199)]=$conv198;
      var $133=$hold;
      var $shr200=$133 >>> 24;
      var $conv201=(($shr200) & 255);
      var $arrayidx202=(($hbuf+3)|0);
      HEAP8[($arrayidx202)]=$conv201;
      var $134=$state;
      var $check203=(($134+24)|0);
      var $135=HEAP32[(($check203)>>2)];
      var $arraydecay204=(($hbuf)|0);
      var $call205=_crc32($135, $arraydecay204, 4);
      var $136=$state;
      var $check206=(($136+24)|0);
      HEAP32[(($check206)>>2)]=$call205;
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      $hold=0;
      $bits=0;
      __label__ = 87; break;
    case 87: 
      var $137=$state;
      var $mode211=(($137)|0);
      HEAP32[(($mode211)>>2)]=3;
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      var $138=$bits;
      var $cmp215=(($138)>>>0) < 16;
      if ($cmp215) { __label__ = 91; break; } else { __label__ = 96; break; }
    case 91: 
      __label__ = 92; break;
    case 92: 
      var $139=$have;
      var $cmp219=(($139)|0)==0;
      if ($cmp219) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      __label__ = 565; break;
    case 94: 
      var $140=$have;
      var $dec223=(($140-1)|0);
      $have=$dec223;
      var $141=$next;
      var $incdec_ptr224=(($141+1)|0);
      $next=$incdec_ptr224;
      var $142=HEAPU8[($141)];
      var $conv225=(($142)&255);
      var $143=$bits;
      var $shl226=$conv225 << $143;
      var $144=$hold;
      var $add227=(($144+$shl226)|0);
      $hold=$add227;
      var $145=$bits;
      var $add228=(($145+8)|0);
      $bits=$add228;
      __label__ = 95; break;
    case 95: 
      __label__ = 90; break;
    case 96: 
      __label__ = 97; break;
    case 97: 
      var $146=$state;
      var $head232=(($146+32)|0);
      var $147=HEAP32[(($head232)>>2)];
      var $cmp233=(($147)|0)!=0;
      if ($cmp233) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      var $148=$hold;
      var $and236=$148 & 255;
      var $149=$state;
      var $head237=(($149+32)|0);
      var $150=HEAP32[(($head237)>>2)];
      var $xflags=(($150+8)|0);
      HEAP32[(($xflags)>>2)]=$and236;
      var $151=$hold;
      var $shr238=$151 >>> 8;
      var $152=$state;
      var $head239=(($152+32)|0);
      var $153=HEAP32[(($head239)>>2)];
      var $os=(($153+12)|0);
      HEAP32[(($os)>>2)]=$shr238;
      __label__ = 99; break;
    case 99: 
      var $154=$state;
      var $flags241=(($154+16)|0);
      var $155=HEAP32[(($flags241)>>2)];
      var $and242=$155 & 512;
      var $tobool243=(($and242)|0)!=0;
      if ($tobool243) { __label__ = 100; break; } else { __label__ = 103; break; }
    case 100: 
      __label__ = 101; break;
    case 101: 
      var $156=$hold;
      var $conv246=(($156) & 255);
      var $arrayidx247=(($hbuf)|0);
      HEAP8[($arrayidx247)]=$conv246;
      var $157=$hold;
      var $shr248=$157 >>> 8;
      var $conv249=(($shr248) & 255);
      var $arrayidx250=(($hbuf+1)|0);
      HEAP8[($arrayidx250)]=$conv249;
      var $158=$state;
      var $check251=(($158+24)|0);
      var $159=HEAP32[(($check251)>>2)];
      var $arraydecay252=(($hbuf)|0);
      var $call253=_crc32($159, $arraydecay252, 2);
      var $160=$state;
      var $check254=(($160+24)|0);
      HEAP32[(($check254)>>2)]=$call253;
      __label__ = 102; break;
    case 102: 
      __label__ = 103; break;
    case 103: 
      __label__ = 104; break;
    case 104: 
      $hold=0;
      $bits=0;
      __label__ = 105; break;
    case 105: 
      var $161=$state;
      var $mode259=(($161)|0);
      HEAP32[(($mode259)>>2)]=4;
      __label__ = 106; break;
    case 106: 
      var $162=$state;
      var $flags261=(($162+16)|0);
      var $163=HEAP32[(($flags261)>>2)];
      var $and262=$163 & 1024;
      var $tobool263=(($and262)|0)!=0;
      if ($tobool263) { __label__ = 107; break; } else { __label__ = 125; break; }
    case 107: 
      __label__ = 108; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      var $164=$bits;
      var $cmp267=(($164)>>>0) < 16;
      if ($cmp267) { __label__ = 110; break; } else { __label__ = 115; break; }
    case 110: 
      __label__ = 111; break;
    case 111: 
      var $165=$have;
      var $cmp271=(($165)|0)==0;
      if ($cmp271) { __label__ = 112; break; } else { __label__ = 113; break; }
    case 112: 
      __label__ = 565; break;
    case 113: 
      var $166=$have;
      var $dec275=(($166-1)|0);
      $have=$dec275;
      var $167=$next;
      var $incdec_ptr276=(($167+1)|0);
      $next=$incdec_ptr276;
      var $168=HEAPU8[($167)];
      var $conv277=(($168)&255);
      var $169=$bits;
      var $shl278=$conv277 << $169;
      var $170=$hold;
      var $add279=(($170+$shl278)|0);
      $hold=$add279;
      var $171=$bits;
      var $add280=(($171+8)|0);
      $bits=$add280;
      __label__ = 114; break;
    case 114: 
      __label__ = 109; break;
    case 115: 
      __label__ = 116; break;
    case 116: 
      var $172=$hold;
      var $173=$state;
      var $length=(($173+64)|0);
      HEAP32[(($length)>>2)]=$172;
      var $174=$state;
      var $head284=(($174+32)|0);
      var $175=HEAP32[(($head284)>>2)];
      var $cmp285=(($175)|0)!=0;
      if ($cmp285) { __label__ = 117; break; } else { __label__ = 118; break; }
    case 117: 
      var $176=$hold;
      var $177=$state;
      var $head288=(($177+32)|0);
      var $178=HEAP32[(($head288)>>2)];
      var $extra_len=(($178+20)|0);
      HEAP32[(($extra_len)>>2)]=$176;
      __label__ = 118; break;
    case 118: 
      var $179=$state;
      var $flags290=(($179+16)|0);
      var $180=HEAP32[(($flags290)>>2)];
      var $and291=$180 & 512;
      var $tobool292=(($and291)|0)!=0;
      if ($tobool292) { __label__ = 119; break; } else { __label__ = 122; break; }
    case 119: 
      __label__ = 120; break;
    case 120: 
      var $181=$hold;
      var $conv295=(($181) & 255);
      var $arrayidx296=(($hbuf)|0);
      HEAP8[($arrayidx296)]=$conv295;
      var $182=$hold;
      var $shr297=$182 >>> 8;
      var $conv298=(($shr297) & 255);
      var $arrayidx299=(($hbuf+1)|0);
      HEAP8[($arrayidx299)]=$conv298;
      var $183=$state;
      var $check300=(($183+24)|0);
      var $184=HEAP32[(($check300)>>2)];
      var $arraydecay301=(($hbuf)|0);
      var $call302=_crc32($184, $arraydecay301, 2);
      var $185=$state;
      var $check303=(($185+24)|0);
      HEAP32[(($check303)>>2)]=$call302;
      __label__ = 121; break;
    case 121: 
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      $hold=0;
      $bits=0;
      __label__ = 124; break;
    case 124: 
      __label__ = 128; break;
    case 125: 
      var $186=$state;
      var $head309=(($186+32)|0);
      var $187=HEAP32[(($head309)>>2)];
      var $cmp310=(($187)|0)!=0;
      if ($cmp310) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      var $188=$state;
      var $head313=(($188+32)|0);
      var $189=HEAP32[(($head313)>>2)];
      var $extra=(($189+16)|0);
      HEAP32[(($extra)>>2)]=0;
      __label__ = 127; break;
    case 127: 
      __label__ = 128; break;
    case 128: 
      var $190=$state;
      var $mode316=(($190)|0);
      HEAP32[(($mode316)>>2)]=5;
      __label__ = 129; break;
    case 129: 
      var $191=$state;
      var $flags318=(($191+16)|0);
      var $192=HEAP32[(($flags318)>>2)];
      var $and319=$192 & 1024;
      var $tobool320=(($and319)|0)!=0;
      if ($tobool320) { __label__ = 130; break; } else { __label__ = 145; break; }
    case 130: 
      var $193=$state;
      var $length322=(($193+64)|0);
      var $194=HEAP32[(($length322)>>2)];
      $copy=$194;
      var $195=$copy;
      var $196=$have;
      var $cmp323=(($195)>>>0) > (($196)>>>0);
      if ($cmp323) { __label__ = 131; break; } else { __label__ = 132; break; }
    case 131: 
      var $197=$have;
      $copy=$197;
      __label__ = 132; break;
    case 132: 
      var $198=$copy;
      var $tobool327=(($198)|0)!=0;
      if ($tobool327) { __label__ = 133; break; } else { __label__ = 142; break; }
    case 133: 
      var $199=$state;
      var $head329=(($199+32)|0);
      var $200=HEAP32[(($head329)>>2)];
      var $cmp330=(($200)|0)!=0;
      if ($cmp330) { __label__ = 134; break; } else { __label__ = 139; break; }
    case 134: 
      var $201=$state;
      var $head333=(($201+32)|0);
      var $202=HEAP32[(($head333)>>2)];
      var $extra334=(($202+16)|0);
      var $203=HEAP32[(($extra334)>>2)];
      var $cmp335=(($203)|0)!=0;
      if ($cmp335) { __label__ = 135; break; } else { __label__ = 139; break; }
    case 135: 
      var $204=$state;
      var $head338=(($204+32)|0);
      var $205=HEAP32[(($head338)>>2)];
      var $extra_len339=(($205+20)|0);
      var $206=HEAP32[(($extra_len339)>>2)];
      var $207=$state;
      var $length340=(($207+64)|0);
      var $208=HEAP32[(($length340)>>2)];
      var $sub341=(($206-$208)|0);
      $len=$sub341;
      var $209=$state;
      var $head342=(($209+32)|0);
      var $210=HEAP32[(($head342)>>2)];
      var $extra343=(($210+16)|0);
      var $211=HEAP32[(($extra343)>>2)];
      var $212=$len;
      var $add_ptr=(($211+$212)|0);
      var $213=$next;
      var $214=$len;
      var $215=$copy;
      var $add344=(($214+$215)|0);
      var $216=$state;
      var $head345=(($216+32)|0);
      var $217=HEAP32[(($head345)>>2)];
      var $extra_max=(($217+24)|0);
      var $218=HEAPU32[(($extra_max)>>2)];
      var $cmp346=(($add344)>>>0) > (($218)>>>0);
      if ($cmp346) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: 
      var $219=$state;
      var $head348=(($219+32)|0);
      var $220=HEAP32[(($head348)>>2)];
      var $extra_max349=(($220+24)|0);
      var $221=HEAP32[(($extra_max349)>>2)];
      var $222=$len;
      var $sub350=(($221-$222)|0);
      var $cond351 = $sub350;__label__ = 138; break;
    case 137: 
      var $223=$copy;
      var $cond351 = $223;__label__ = 138; break;
    case 138: 
      var $cond351;
      _zmemcpy($add_ptr, $213, $cond351);
      __label__ = 139; break;
    case 139: 
      var $224=$state;
      var $flags353=(($224+16)|0);
      var $225=HEAP32[(($flags353)>>2)];
      var $and354=$225 & 512;
      var $tobool355=(($and354)|0)!=0;
      if ($tobool355) { __label__ = 140; break; } else { __label__ = 141; break; }
    case 140: 
      var $226=$state;
      var $check357=(($226+24)|0);
      var $227=HEAP32[(($check357)>>2)];
      var $228=$next;
      var $229=$copy;
      var $call358=_crc32($227, $228, $229);
      var $230=$state;
      var $check359=(($230+24)|0);
      HEAP32[(($check359)>>2)]=$call358;
      __label__ = 141; break;
    case 141: 
      var $231=$copy;
      var $232=$have;
      var $sub361=(($232-$231)|0);
      $have=$sub361;
      var $233=$copy;
      var $234=$next;
      var $add_ptr362=(($234+$233)|0);
      $next=$add_ptr362;
      var $235=$copy;
      var $236=$state;
      var $length363=(($236+64)|0);
      var $237=HEAP32[(($length363)>>2)];
      var $sub364=(($237-$235)|0);
      HEAP32[(($length363)>>2)]=$sub364;
      __label__ = 142; break;
    case 142: 
      var $238=$state;
      var $length366=(($238+64)|0);
      var $239=HEAP32[(($length366)>>2)];
      var $tobool367=(($239)|0)!=0;
      if ($tobool367) { __label__ = 143; break; } else { __label__ = 144; break; }
    case 143: 
      __label__ = 565; break;
    case 144: 
      __label__ = 145; break;
    case 145: 
      var $240=$state;
      var $length371=(($240+64)|0);
      HEAP32[(($length371)>>2)]=0;
      var $241=$state;
      var $mode372=(($241)|0);
      HEAP32[(($mode372)>>2)]=6;
      __label__ = 146; break;
    case 146: 
      var $242=$state;
      var $flags374=(($242+16)|0);
      var $243=HEAP32[(($flags374)>>2)];
      var $and375=$243 & 2048;
      var $tobool376=(($and375)|0)!=0;
      if ($tobool376) { __label__ = 147; break; } else { __label__ = 163; break; }
    case 147: 
      var $244=$have;
      var $cmp378=(($244)|0)==0;
      if ($cmp378) { __label__ = 148; break; } else { __label__ = 149; break; }
    case 148: 
      __label__ = 565; break;
    case 149: 
      $copy=0;
      __label__ = 150; break;
    case 150: 
      var $245=$copy;
      var $inc=(($245+1)|0);
      $copy=$inc;
      var $246=$next;
      var $arrayidx383=(($246+$245)|0);
      var $247=HEAPU8[($arrayidx383)];
      var $conv384=(($247)&255);
      $len=$conv384;
      var $248=$state;
      var $head385=(($248+32)|0);
      var $249=HEAP32[(($head385)>>2)];
      var $cmp386=(($249)|0)!=0;
      if ($cmp386) { __label__ = 151; break; } else { __label__ = 154; break; }
    case 151: 
      var $250=$state;
      var $head389=(($250+32)|0);
      var $251=HEAP32[(($head389)>>2)];
      var $name=(($251+28)|0);
      var $252=HEAP32[(($name)>>2)];
      var $cmp390=(($252)|0)!=0;
      if ($cmp390) { __label__ = 152; break; } else { __label__ = 154; break; }
    case 152: 
      var $253=$state;
      var $length393=(($253+64)|0);
      var $254=HEAPU32[(($length393)>>2)];
      var $255=$state;
      var $head394=(($255+32)|0);
      var $256=HEAP32[(($head394)>>2)];
      var $name_max=(($256+32)|0);
      var $257=HEAPU32[(($name_max)>>2)];
      var $cmp395=(($254)>>>0) < (($257)>>>0);
      if ($cmp395) { __label__ = 153; break; } else { __label__ = 154; break; }
    case 153: 
      var $258=$len;
      var $conv398=(($258) & 255);
      var $259=$state;
      var $length399=(($259+64)|0);
      var $260=HEAPU32[(($length399)>>2)];
      var $inc400=(($260+1)|0);
      HEAP32[(($length399)>>2)]=$inc400;
      var $261=$state;
      var $head401=(($261+32)|0);
      var $262=HEAP32[(($head401)>>2)];
      var $name402=(($262+28)|0);
      var $263=HEAP32[(($name402)>>2)];
      var $arrayidx403=(($263+$260)|0);
      HEAP8[($arrayidx403)]=$conv398;
      __label__ = 154; break;
    case 154: 
      __label__ = 155; break;
    case 155: 
      var $264=$len;
      var $tobool405=(($264)|0)!=0;
      if ($tobool405) { __label__ = 156; break; } else { var $267 = 0;__label__ = 157; break; }
    case 156: 
      var $265=$copy;
      var $266=$have;
      var $cmp406=(($265)>>>0) < (($266)>>>0);
      var $267 = $cmp406;__label__ = 157; break;
    case 157: 
      var $267;
      if ($267) { __label__ = 150; break; } else { __label__ = 158; break; }
    case 158: 
      var $268=$state;
      var $flags409=(($268+16)|0);
      var $269=HEAP32[(($flags409)>>2)];
      var $and410=$269 & 512;
      var $tobool411=(($and410)|0)!=0;
      if ($tobool411) { __label__ = 159; break; } else { __label__ = 160; break; }
    case 159: 
      var $270=$state;
      var $check413=(($270+24)|0);
      var $271=HEAP32[(($check413)>>2)];
      var $272=$next;
      var $273=$copy;
      var $call414=_crc32($271, $272, $273);
      var $274=$state;
      var $check415=(($274+24)|0);
      HEAP32[(($check415)>>2)]=$call414;
      __label__ = 160; break;
    case 160: 
      var $275=$copy;
      var $276=$have;
      var $sub417=(($276-$275)|0);
      $have=$sub417;
      var $277=$copy;
      var $278=$next;
      var $add_ptr418=(($278+$277)|0);
      $next=$add_ptr418;
      var $279=$len;
      var $tobool419=(($279)|0)!=0;
      if ($tobool419) { __label__ = 161; break; } else { __label__ = 162; break; }
    case 161: 
      __label__ = 565; break;
    case 162: 
      __label__ = 166; break;
    case 163: 
      var $280=$state;
      var $head423=(($280+32)|0);
      var $281=HEAP32[(($head423)>>2)];
      var $cmp424=(($281)|0)!=0;
      if ($cmp424) { __label__ = 164; break; } else { __label__ = 165; break; }
    case 164: 
      var $282=$state;
      var $head427=(($282+32)|0);
      var $283=HEAP32[(($head427)>>2)];
      var $name428=(($283+28)|0);
      HEAP32[(($name428)>>2)]=0;
      __label__ = 165; break;
    case 165: 
      __label__ = 166; break;
    case 166: 
      var $284=$state;
      var $length431=(($284+64)|0);
      HEAP32[(($length431)>>2)]=0;
      var $285=$state;
      var $mode432=(($285)|0);
      HEAP32[(($mode432)>>2)]=7;
      __label__ = 167; break;
    case 167: 
      var $286=$state;
      var $flags434=(($286+16)|0);
      var $287=HEAP32[(($flags434)>>2)];
      var $and435=$287 & 4096;
      var $tobool436=(($and435)|0)!=0;
      if ($tobool436) { __label__ = 168; break; } else { __label__ = 184; break; }
    case 168: 
      var $288=$have;
      var $cmp438=(($288)|0)==0;
      if ($cmp438) { __label__ = 169; break; } else { __label__ = 170; break; }
    case 169: 
      __label__ = 565; break;
    case 170: 
      $copy=0;
      __label__ = 171; break;
    case 171: 
      var $289=$copy;
      var $inc443=(($289+1)|0);
      $copy=$inc443;
      var $290=$next;
      var $arrayidx444=(($290+$289)|0);
      var $291=HEAPU8[($arrayidx444)];
      var $conv445=(($291)&255);
      $len=$conv445;
      var $292=$state;
      var $head446=(($292+32)|0);
      var $293=HEAP32[(($head446)>>2)];
      var $cmp447=(($293)|0)!=0;
      if ($cmp447) { __label__ = 172; break; } else { __label__ = 175; break; }
    case 172: 
      var $294=$state;
      var $head450=(($294+32)|0);
      var $295=HEAP32[(($head450)>>2)];
      var $comment=(($295+36)|0);
      var $296=HEAP32[(($comment)>>2)];
      var $cmp451=(($296)|0)!=0;
      if ($cmp451) { __label__ = 173; break; } else { __label__ = 175; break; }
    case 173: 
      var $297=$state;
      var $length454=(($297+64)|0);
      var $298=HEAPU32[(($length454)>>2)];
      var $299=$state;
      var $head455=(($299+32)|0);
      var $300=HEAP32[(($head455)>>2)];
      var $comm_max=(($300+40)|0);
      var $301=HEAPU32[(($comm_max)>>2)];
      var $cmp456=(($298)>>>0) < (($301)>>>0);
      if ($cmp456) { __label__ = 174; break; } else { __label__ = 175; break; }
    case 174: 
      var $302=$len;
      var $conv459=(($302) & 255);
      var $303=$state;
      var $length460=(($303+64)|0);
      var $304=HEAPU32[(($length460)>>2)];
      var $inc461=(($304+1)|0);
      HEAP32[(($length460)>>2)]=$inc461;
      var $305=$state;
      var $head462=(($305+32)|0);
      var $306=HEAP32[(($head462)>>2)];
      var $comment463=(($306+36)|0);
      var $307=HEAP32[(($comment463)>>2)];
      var $arrayidx464=(($307+$304)|0);
      HEAP8[($arrayidx464)]=$conv459;
      __label__ = 175; break;
    case 175: 
      __label__ = 176; break;
    case 176: 
      var $308=$len;
      var $tobool467=(($308)|0)!=0;
      if ($tobool467) { __label__ = 177; break; } else { var $311 = 0;__label__ = 178; break; }
    case 177: 
      var $309=$copy;
      var $310=$have;
      var $cmp469=(($309)>>>0) < (($310)>>>0);
      var $311 = $cmp469;__label__ = 178; break;
    case 178: 
      var $311;
      if ($311) { __label__ = 171; break; } else { __label__ = 179; break; }
    case 179: 
      var $312=$state;
      var $flags473=(($312+16)|0);
      var $313=HEAP32[(($flags473)>>2)];
      var $and474=$313 & 512;
      var $tobool475=(($and474)|0)!=0;
      if ($tobool475) { __label__ = 180; break; } else { __label__ = 181; break; }
    case 180: 
      var $314=$state;
      var $check477=(($314+24)|0);
      var $315=HEAP32[(($check477)>>2)];
      var $316=$next;
      var $317=$copy;
      var $call478=_crc32($315, $316, $317);
      var $318=$state;
      var $check479=(($318+24)|0);
      HEAP32[(($check479)>>2)]=$call478;
      __label__ = 181; break;
    case 181: 
      var $319=$copy;
      var $320=$have;
      var $sub481=(($320-$319)|0);
      $have=$sub481;
      var $321=$copy;
      var $322=$next;
      var $add_ptr482=(($322+$321)|0);
      $next=$add_ptr482;
      var $323=$len;
      var $tobool483=(($323)|0)!=0;
      if ($tobool483) { __label__ = 182; break; } else { __label__ = 183; break; }
    case 182: 
      __label__ = 565; break;
    case 183: 
      __label__ = 187; break;
    case 184: 
      var $324=$state;
      var $head487=(($324+32)|0);
      var $325=HEAP32[(($head487)>>2)];
      var $cmp488=(($325)|0)!=0;
      if ($cmp488) { __label__ = 185; break; } else { __label__ = 186; break; }
    case 185: 
      var $326=$state;
      var $head491=(($326+32)|0);
      var $327=HEAP32[(($head491)>>2)];
      var $comment492=(($327+36)|0);
      HEAP32[(($comment492)>>2)]=0;
      __label__ = 186; break;
    case 186: 
      __label__ = 187; break;
    case 187: 
      var $328=$state;
      var $mode495=(($328)|0);
      HEAP32[(($mode495)>>2)]=8;
      __label__ = 188; break;
    case 188: 
      var $329=$state;
      var $flags497=(($329+16)|0);
      var $330=HEAP32[(($flags497)>>2)];
      var $and498=$330 & 512;
      var $tobool499=(($and498)|0)!=0;
      if ($tobool499) { __label__ = 189; break; } else { __label__ = 203; break; }
    case 189: 
      __label__ = 190; break;
    case 190: 
      __label__ = 191; break;
    case 191: 
      var $331=$bits;
      var $cmp503=(($331)>>>0) < 16;
      if ($cmp503) { __label__ = 192; break; } else { __label__ = 197; break; }
    case 192: 
      __label__ = 193; break;
    case 193: 
      var $332=$have;
      var $cmp507=(($332)|0)==0;
      if ($cmp507) { __label__ = 194; break; } else { __label__ = 195; break; }
    case 194: 
      __label__ = 565; break;
    case 195: 
      var $333=$have;
      var $dec511=(($333-1)|0);
      $have=$dec511;
      var $334=$next;
      var $incdec_ptr512=(($334+1)|0);
      $next=$incdec_ptr512;
      var $335=HEAPU8[($334)];
      var $conv513=(($335)&255);
      var $336=$bits;
      var $shl514=$conv513 << $336;
      var $337=$hold;
      var $add515=(($337+$shl514)|0);
      $hold=$add515;
      var $338=$bits;
      var $add516=(($338+8)|0);
      $bits=$add516;
      __label__ = 196; break;
    case 196: 
      __label__ = 191; break;
    case 197: 
      __label__ = 198; break;
    case 198: 
      var $339=$hold;
      var $340=$state;
      var $check522=(($340+24)|0);
      var $341=HEAP32[(($check522)>>2)];
      var $and523=$341 & 65535;
      var $cmp524=(($339)|0)!=(($and523)|0);
      if ($cmp524) { __label__ = 199; break; } else { __label__ = 200; break; }
    case 199: 
      var $342=$strm_addr;
      var $msg527=(($342+24)|0);
      HEAP32[(($msg527)>>2)]=((STRING_TABLE.__str51287)|0);
      var $343=$state;
      var $mode528=(($343)|0);
      HEAP32[(($mode528)>>2)]=29;
      __label__ = 564; break;
    case 200: 
      __label__ = 201; break;
    case 201: 
      $hold=0;
      $bits=0;
      __label__ = 202; break;
    case 202: 
      __label__ = 203; break;
    case 203: 
      var $344=$state;
      var $head534=(($344+32)|0);
      var $345=HEAP32[(($head534)>>2)];
      var $cmp535=(($345)|0)!=0;
      if ($cmp535) { __label__ = 204; break; } else { __label__ = 205; break; }
    case 204: 
      var $346=$state;
      var $flags538=(($346+16)|0);
      var $347=HEAP32[(($flags538)>>2)];
      var $shr539=$347 >> 9;
      var $and540=$shr539 & 1;
      var $348=$state;
      var $head541=(($348+32)|0);
      var $349=HEAP32[(($head541)>>2)];
      var $hcrc=(($349+44)|0);
      HEAP32[(($hcrc)>>2)]=$and540;
      var $350=$state;
      var $head542=(($350+32)|0);
      var $351=HEAP32[(($head542)>>2)];
      var $done543=(($351+48)|0);
      HEAP32[(($done543)>>2)]=1;
      __label__ = 205; break;
    case 205: 
      var $call545=_crc32(0, 0, 0);
      var $352=$state;
      var $check546=(($352+24)|0);
      HEAP32[(($check546)>>2)]=$call545;
      var $353=$strm_addr;
      var $adler547=(($353+48)|0);
      HEAP32[(($adler547)>>2)]=$call545;
      var $354=$state;
      var $mode548=(($354)|0);
      HEAP32[(($mode548)>>2)]=11;
      __label__ = 564; break;
    case 206: 
      __label__ = 207; break;
    case 207: 
      __label__ = 208; break;
    case 208: 
      var $355=$bits;
      var $cmp552=(($355)>>>0) < 32;
      if ($cmp552) { __label__ = 209; break; } else { __label__ = 214; break; }
    case 209: 
      __label__ = 210; break;
    case 210: 
      var $356=$have;
      var $cmp556=(($356)|0)==0;
      if ($cmp556) { __label__ = 211; break; } else { __label__ = 212; break; }
    case 211: 
      __label__ = 565; break;
    case 212: 
      var $357=$have;
      var $dec560=(($357-1)|0);
      $have=$dec560;
      var $358=$next;
      var $incdec_ptr561=(($358+1)|0);
      $next=$incdec_ptr561;
      var $359=HEAPU8[($358)];
      var $conv562=(($359)&255);
      var $360=$bits;
      var $shl563=$conv562 << $360;
      var $361=$hold;
      var $add564=(($361+$shl563)|0);
      $hold=$add564;
      var $362=$bits;
      var $add565=(($362+8)|0);
      $bits=$add565;
      __label__ = 213; break;
    case 213: 
      __label__ = 208; break;
    case 214: 
      __label__ = 215; break;
    case 215: 
      var $363=$hold;
      var $shr571=$363 >>> 24;
      var $and572=$shr571 & 255;
      var $364=$hold;
      var $shr573=$364 >>> 8;
      var $and574=$shr573 & 65280;
      var $add575=(($and572+$and574)|0);
      var $365=$hold;
      var $and576=$365 & 65280;
      var $shl577=$and576 << 8;
      var $add578=(($add575+$shl577)|0);
      var $366=$hold;
      var $and579=$366 & 255;
      var $shl580=$and579 << 24;
      var $add581=(($add578+$shl580)|0);
      var $367=$state;
      var $check582=(($367+24)|0);
      HEAP32[(($check582)>>2)]=$add581;
      var $368=$strm_addr;
      var $adler583=(($368+48)|0);
      HEAP32[(($adler583)>>2)]=$add581;
      __label__ = 216; break;
    case 216: 
      $hold=0;
      $bits=0;
      __label__ = 217; break;
    case 217: 
      var $369=$state;
      var $mode587=(($369)|0);
      HEAP32[(($mode587)>>2)]=10;
      __label__ = 218; break;
    case 218: 
      var $370=$state;
      var $havedict=(($370+12)|0);
      var $371=HEAP32[(($havedict)>>2)];
      var $cmp589=(($371)|0)==0;
      if ($cmp589) { __label__ = 219; break; } else { __label__ = 222; break; }
    case 219: 
      __label__ = 220; break;
    case 220: 
      var $372=$put;
      var $373=$strm_addr;
      var $next_out593=(($373+12)|0);
      HEAP32[(($next_out593)>>2)]=$372;
      var $374=$left;
      var $375=$strm_addr;
      var $avail_out594=(($375+16)|0);
      HEAP32[(($avail_out594)>>2)]=$374;
      var $376=$next;
      var $377=$strm_addr;
      var $next_in595=(($377)|0);
      HEAP32[(($next_in595)>>2)]=$376;
      var $378=$have;
      var $379=$strm_addr;
      var $avail_in596=(($379+4)|0);
      HEAP32[(($avail_in596)>>2)]=$378;
      var $380=$hold;
      var $381=$state;
      var $hold597=(($381+56)|0);
      HEAP32[(($hold597)>>2)]=$380;
      var $382=$bits;
      var $383=$state;
      var $bits598=(($383+60)|0);
      HEAP32[(($bits598)>>2)]=$382;
      __label__ = 221; break;
    case 221: 
      $retval=2;
      __label__ = 589; break;
    case 222: 
      var $call602=_adler32(0, 0, 0);
      var $384=$state;
      var $check603=(($384+24)|0);
      HEAP32[(($check603)>>2)]=$call602;
      var $385=$strm_addr;
      var $adler604=(($385+48)|0);
      HEAP32[(($adler604)>>2)]=$call602;
      var $386=$state;
      var $mode605=(($386)|0);
      HEAP32[(($mode605)>>2)]=11;
      __label__ = 223; break;
    case 223: 
      var $387=$flush_addr;
      var $cmp607=(($387)|0)==5;
      if ($cmp607) { __label__ = 225; break; } else { __label__ = 224; break; }
    case 224: 
      var $388=$flush_addr;
      var $cmp610=(($388)|0)==6;
      if ($cmp610) { __label__ = 225; break; } else { __label__ = 226; break; }
    case 225: 
      __label__ = 565; break;
    case 226: 
      __label__ = 227; break;
    case 227: 
      var $389=$state;
      var $last615=(($389+4)|0);
      var $390=HEAP32[(($last615)>>2)];
      var $tobool616=(($390)|0)!=0;
      if ($tobool616) { __label__ = 228; break; } else { __label__ = 231; break; }
    case 228: 
      __label__ = 229; break;
    case 229: 
      var $391=$bits;
      var $and619=$391 & 7;
      var $392=$hold;
      var $shr620=$392 >>> (($and619)>>>0);
      $hold=$shr620;
      var $393=$bits;
      var $and621=$393 & 7;
      var $394=$bits;
      var $sub622=(($394-$and621)|0);
      $bits=$sub622;
      __label__ = 230; break;
    case 230: 
      var $395=$state;
      var $mode625=(($395)|0);
      HEAP32[(($mode625)>>2)]=26;
      __label__ = 564; break;
    case 231: 
      __label__ = 232; break;
    case 232: 
      __label__ = 233; break;
    case 233: 
      var $396=$bits;
      var $cmp629=(($396)>>>0) < 3;
      if ($cmp629) { __label__ = 234; break; } else { __label__ = 239; break; }
    case 234: 
      __label__ = 235; break;
    case 235: 
      var $397=$have;
      var $cmp633=(($397)|0)==0;
      if ($cmp633) { __label__ = 236; break; } else { __label__ = 237; break; }
    case 236: 
      __label__ = 565; break;
    case 237: 
      var $398=$have;
      var $dec637=(($398-1)|0);
      $have=$dec637;
      var $399=$next;
      var $incdec_ptr638=(($399+1)|0);
      $next=$incdec_ptr638;
      var $400=HEAPU8[($399)];
      var $conv639=(($400)&255);
      var $401=$bits;
      var $shl640=$conv639 << $401;
      var $402=$hold;
      var $add641=(($402+$shl640)|0);
      $hold=$add641;
      var $403=$bits;
      var $add642=(($403+8)|0);
      $bits=$add642;
      __label__ = 238; break;
    case 238: 
      __label__ = 233; break;
    case 239: 
      __label__ = 240; break;
    case 240: 
      var $404=$hold;
      var $and648=$404 & 1;
      var $405=$state;
      var $last649=(($405+4)|0);
      HEAP32[(($last649)>>2)]=$and648;
      __label__ = 241; break;
    case 241: 
      var $406=$hold;
      var $shr651=$406 >>> 1;
      $hold=$shr651;
      var $407=$bits;
      var $sub652=(($407-1)|0);
      $bits=$sub652;
      __label__ = 242; break;
    case 242: 
      var $408=$hold;
      var $and655=$408 & 3;
      if ((($and655)|0) == 0) {
        __label__ = 243; break;
      }
      else if ((($and655)|0) == 1) {
        __label__ = 244; break;
      }
      else if ((($and655)|0) == 2) {
        __label__ = 249; break;
      }
      else if ((($and655)|0) == 3) {
        __label__ = 250; break;
      }
      else {
      __label__ = 251; break;
      }
      
    case 243: 
      var $409=$state;
      var $mode657=(($409)|0);
      HEAP32[(($mode657)>>2)]=13;
      __label__ = 251; break;
    case 244: 
      var $410=$state;
      _fixedtables1309($410);
      var $411=$state;
      var $mode659=(($411)|0);
      HEAP32[(($mode659)>>2)]=19;
      var $412=$flush_addr;
      var $cmp660=(($412)|0)==6;
      if ($cmp660) { __label__ = 245; break; } else { __label__ = 248; break; }
    case 245: 
      __label__ = 246; break;
    case 246: 
      var $413=$hold;
      var $shr664=$413 >>> 2;
      $hold=$shr664;
      var $414=$bits;
      var $sub665=(($414-2)|0);
      $bits=$sub665;
      __label__ = 247; break;
    case 247: 
      __label__ = 565; break;
    case 248: 
      __label__ = 251; break;
    case 249: 
      var $415=$state;
      var $mode670=(($415)|0);
      HEAP32[(($mode670)>>2)]=16;
      __label__ = 251; break;
    case 250: 
      var $416=$strm_addr;
      var $msg672=(($416+24)|0);
      HEAP32[(($msg672)>>2)]=((STRING_TABLE.__str61288)|0);
      var $417=$state;
      var $mode673=(($417)|0);
      HEAP32[(($mode673)>>2)]=29;
      __label__ = 251; break;
    case 251: 
      __label__ = 252; break;
    case 252: 
      var $418=$hold;
      var $shr675=$418 >>> 2;
      $hold=$shr675;
      var $419=$bits;
      var $sub676=(($419-2)|0);
      $bits=$sub676;
      __label__ = 253; break;
    case 253: 
      __label__ = 564; break;
    case 254: 
      __label__ = 255; break;
    case 255: 
      var $420=$bits;
      var $and681=$420 & 7;
      var $421=$hold;
      var $shr682=$421 >>> (($and681)>>>0);
      $hold=$shr682;
      var $422=$bits;
      var $and683=$422 & 7;
      var $423=$bits;
      var $sub684=(($423-$and683)|0);
      $bits=$sub684;
      __label__ = 256; break;
    case 256: 
      __label__ = 257; break;
    case 257: 
      __label__ = 258; break;
    case 258: 
      var $424=$bits;
      var $cmp689=(($424)>>>0) < 32;
      if ($cmp689) { __label__ = 259; break; } else { __label__ = 264; break; }
    case 259: 
      __label__ = 260; break;
    case 260: 
      var $425=$have;
      var $cmp693=(($425)|0)==0;
      if ($cmp693) { __label__ = 261; break; } else { __label__ = 262; break; }
    case 261: 
      __label__ = 565; break;
    case 262: 
      var $426=$have;
      var $dec697=(($426-1)|0);
      $have=$dec697;
      var $427=$next;
      var $incdec_ptr698=(($427+1)|0);
      $next=$incdec_ptr698;
      var $428=HEAPU8[($427)];
      var $conv699=(($428)&255);
      var $429=$bits;
      var $shl700=$conv699 << $429;
      var $430=$hold;
      var $add701=(($430+$shl700)|0);
      $hold=$add701;
      var $431=$bits;
      var $add702=(($431+8)|0);
      $bits=$add702;
      __label__ = 263; break;
    case 263: 
      __label__ = 258; break;
    case 264: 
      __label__ = 265; break;
    case 265: 
      var $432=$hold;
      var $and708=$432 & 65535;
      var $433=$hold;
      var $shr709=$433 >>> 16;
      var $xor=$shr709 ^ 65535;
      var $cmp710=(($and708)|0)!=(($xor)|0);
      if ($cmp710) { __label__ = 266; break; } else { __label__ = 267; break; }
    case 266: 
      var $434=$strm_addr;
      var $msg713=(($434+24)|0);
      HEAP32[(($msg713)>>2)]=((STRING_TABLE.__str71289)|0);
      var $435=$state;
      var $mode714=(($435)|0);
      HEAP32[(($mode714)>>2)]=29;
      __label__ = 564; break;
    case 267: 
      var $436=$hold;
      var $and716=$436 & 65535;
      var $437=$state;
      var $length717=(($437+64)|0);
      HEAP32[(($length717)>>2)]=$and716;
      __label__ = 268; break;
    case 268: 
      $hold=0;
      $bits=0;
      __label__ = 269; break;
    case 269: 
      var $438=$state;
      var $mode721=(($438)|0);
      HEAP32[(($mode721)>>2)]=14;
      var $439=$flush_addr;
      var $cmp722=(($439)|0)==6;
      if ($cmp722) { __label__ = 270; break; } else { __label__ = 271; break; }
    case 270: 
      __label__ = 565; break;
    case 271: 
      __label__ = 272; break;
    case 272: 
      var $440=$state;
      var $mode727=(($440)|0);
      HEAP32[(($mode727)>>2)]=15;
      __label__ = 273; break;
    case 273: 
      var $441=$state;
      var $length729=(($441+64)|0);
      var $442=HEAP32[(($length729)>>2)];
      $copy=$442;
      var $443=$copy;
      var $tobool730=(($443)|0)!=0;
      if ($tobool730) { __label__ = 274; break; } else { __label__ = 281; break; }
    case 274: 
      var $444=$copy;
      var $445=$have;
      var $cmp732=(($444)>>>0) > (($445)>>>0);
      if ($cmp732) { __label__ = 275; break; } else { __label__ = 276; break; }
    case 275: 
      var $446=$have;
      $copy=$446;
      __label__ = 276; break;
    case 276: 
      var $447=$copy;
      var $448=$left;
      var $cmp736=(($447)>>>0) > (($448)>>>0);
      if ($cmp736) { __label__ = 277; break; } else { __label__ = 278; break; }
    case 277: 
      var $449=$left;
      $copy=$449;
      __label__ = 278; break;
    case 278: 
      var $450=$copy;
      var $cmp740=(($450)|0)==0;
      if ($cmp740) { __label__ = 279; break; } else { __label__ = 280; break; }
    case 279: 
      __label__ = 565; break;
    case 280: 
      var $451=$put;
      var $452=$next;
      var $453=$copy;
      _zmemcpy($451, $452, $453);
      var $454=$copy;
      var $455=$have;
      var $sub744=(($455-$454)|0);
      $have=$sub744;
      var $456=$copy;
      var $457=$next;
      var $add_ptr745=(($457+$456)|0);
      $next=$add_ptr745;
      var $458=$copy;
      var $459=$left;
      var $sub746=(($459-$458)|0);
      $left=$sub746;
      var $460=$copy;
      var $461=$put;
      var $add_ptr747=(($461+$460)|0);
      $put=$add_ptr747;
      var $462=$copy;
      var $463=$state;
      var $length748=(($463+64)|0);
      var $464=HEAP32[(($length748)>>2)];
      var $sub749=(($464-$462)|0);
      HEAP32[(($length748)>>2)]=$sub749;
      __label__ = 564; break;
    case 281: 
      var $465=$state;
      var $mode751=(($465)|0);
      HEAP32[(($mode751)>>2)]=11;
      __label__ = 564; break;
    case 282: 
      __label__ = 283; break;
    case 283: 
      __label__ = 284; break;
    case 284: 
      var $466=$bits;
      var $cmp755=(($466)>>>0) < 14;
      if ($cmp755) { __label__ = 285; break; } else { __label__ = 290; break; }
    case 285: 
      __label__ = 286; break;
    case 286: 
      var $467=$have;
      var $cmp759=(($467)|0)==0;
      if ($cmp759) { __label__ = 287; break; } else { __label__ = 288; break; }
    case 287: 
      __label__ = 565; break;
    case 288: 
      var $468=$have;
      var $dec763=(($468-1)|0);
      $have=$dec763;
      var $469=$next;
      var $incdec_ptr764=(($469+1)|0);
      $next=$incdec_ptr764;
      var $470=HEAPU8[($469)];
      var $conv765=(($470)&255);
      var $471=$bits;
      var $shl766=$conv765 << $471;
      var $472=$hold;
      var $add767=(($472+$shl766)|0);
      $hold=$add767;
      var $473=$bits;
      var $add768=(($473+8)|0);
      $bits=$add768;
      __label__ = 289; break;
    case 289: 
      __label__ = 284; break;
    case 290: 
      __label__ = 291; break;
    case 291: 
      var $474=$hold;
      var $and774=$474 & 31;
      var $add775=(($and774+257)|0);
      var $475=$state;
      var $nlen=(($475+96)|0);
      HEAP32[(($nlen)>>2)]=$add775;
      __label__ = 292; break;
    case 292: 
      var $476=$hold;
      var $shr777=$476 >>> 5;
      $hold=$shr777;
      var $477=$bits;
      var $sub778=(($477-5)|0);
      $bits=$sub778;
      __label__ = 293; break;
    case 293: 
      var $478=$hold;
      var $and781=$478 & 31;
      var $add782=(($and781+1)|0);
      var $479=$state;
      var $ndist=(($479+100)|0);
      HEAP32[(($ndist)>>2)]=$add782;
      __label__ = 294; break;
    case 294: 
      var $480=$hold;
      var $shr784=$480 >>> 5;
      $hold=$shr784;
      var $481=$bits;
      var $sub785=(($481-5)|0);
      $bits=$sub785;
      __label__ = 295; break;
    case 295: 
      var $482=$hold;
      var $and788=$482 & 15;
      var $add789=(($and788+4)|0);
      var $483=$state;
      var $ncode=(($483+92)|0);
      HEAP32[(($ncode)>>2)]=$add789;
      __label__ = 296; break;
    case 296: 
      var $484=$hold;
      var $shr791=$484 >>> 4;
      $hold=$shr791;
      var $485=$bits;
      var $sub792=(($485-4)|0);
      $bits=$sub792;
      __label__ = 297; break;
    case 297: 
      var $486=$state;
      var $nlen795=(($486+96)|0);
      var $487=HEAPU32[(($nlen795)>>2)];
      var $cmp796=(($487)>>>0) > 286;
      if ($cmp796) { __label__ = 299; break; } else { __label__ = 298; break; }
    case 298: 
      var $488=$state;
      var $ndist799=(($488+100)|0);
      var $489=HEAPU32[(($ndist799)>>2)];
      var $cmp800=(($489)>>>0) > 30;
      if ($cmp800) { __label__ = 299; break; } else { __label__ = 300; break; }
    case 299: 
      var $490=$strm_addr;
      var $msg803=(($490+24)|0);
      HEAP32[(($msg803)>>2)]=((STRING_TABLE.__str81290)|0);
      var $491=$state;
      var $mode804=(($491)|0);
      HEAP32[(($mode804)>>2)]=29;
      __label__ = 564; break;
    case 300: 
      var $492=$state;
      var $have806=(($492+104)|0);
      HEAP32[(($have806)>>2)]=0;
      var $493=$state;
      var $mode807=(($493)|0);
      HEAP32[(($mode807)>>2)]=17;
      __label__ = 301; break;
    case 301: 
      __label__ = 302; break;
    case 302: 
      var $494=$state;
      var $have810=(($494+104)|0);
      var $495=HEAPU32[(($have810)>>2)];
      var $496=$state;
      var $ncode811=(($496+92)|0);
      var $497=HEAPU32[(($ncode811)>>2)];
      var $cmp812=(($495)>>>0) < (($497)>>>0);
      if ($cmp812) { __label__ = 303; break; } else { __label__ = 315; break; }
    case 303: 
      __label__ = 304; break;
    case 304: 
      __label__ = 305; break;
    case 305: 
      var $498=$bits;
      var $cmp817=(($498)>>>0) < 3;
      if ($cmp817) { __label__ = 306; break; } else { __label__ = 311; break; }
    case 306: 
      __label__ = 307; break;
    case 307: 
      var $499=$have;
      var $cmp821=(($499)|0)==0;
      if ($cmp821) { __label__ = 308; break; } else { __label__ = 309; break; }
    case 308: 
      __label__ = 565; break;
    case 309: 
      var $500=$have;
      var $dec825=(($500-1)|0);
      $have=$dec825;
      var $501=$next;
      var $incdec_ptr826=(($501+1)|0);
      $next=$incdec_ptr826;
      var $502=HEAPU8[($501)];
      var $conv827=(($502)&255);
      var $503=$bits;
      var $shl828=$conv827 << $503;
      var $504=$hold;
      var $add829=(($504+$shl828)|0);
      $hold=$add829;
      var $505=$bits;
      var $add830=(($505+8)|0);
      $bits=$add830;
      __label__ = 310; break;
    case 310: 
      __label__ = 305; break;
    case 311: 
      __label__ = 312; break;
    case 312: 
      var $506=$hold;
      var $and836=$506 & 7;
      var $conv837=(($and836) & 65535);
      var $507=$state;
      var $have838=(($507+104)|0);
      var $508=HEAP32[(($have838)>>2)];
      var $inc839=(($508+1)|0);
      HEAP32[(($have838)>>2)]=$inc839;
      var $arrayidx840=((_inflate_order+($508<<1))|0);
      var $509=HEAPU16[(($arrayidx840)>>1)];
      var $idxprom=(($509)&65535);
      var $510=$state;
      var $lens=(($510+112)|0);
      var $arrayidx841=(($lens+($idxprom<<1))|0);
      HEAP16[(($arrayidx841)>>1)]=$conv837;
      __label__ = 313; break;
    case 313: 
      var $511=$hold;
      var $shr843=$511 >>> 3;
      $hold=$shr843;
      var $512=$bits;
      var $sub844=(($512-3)|0);
      $bits=$sub844;
      __label__ = 314; break;
    case 314: 
      __label__ = 302; break;
    case 315: 
      __label__ = 316; break;
    case 316: 
      var $513=$state;
      var $have849=(($513+104)|0);
      var $514=HEAPU32[(($have849)>>2)];
      var $cmp850=(($514)>>>0) < 19;
      if ($cmp850) { __label__ = 317; break; } else { __label__ = 318; break; }
    case 317: 
      var $515=$state;
      var $have853=(($515+104)|0);
      var $516=HEAP32[(($have853)>>2)];
      var $inc854=(($516+1)|0);
      HEAP32[(($have853)>>2)]=$inc854;
      var $arrayidx855=((_inflate_order+($516<<1))|0);
      var $517=HEAPU16[(($arrayidx855)>>1)];
      var $idxprom856=(($517)&65535);
      var $518=$state;
      var $lens857=(($518+112)|0);
      var $arrayidx858=(($lens857+($idxprom856<<1))|0);
      HEAP16[(($arrayidx858)>>1)]=0;
      __label__ = 316; break;
    case 318: 
      var $519=$state;
      var $codes=(($519+1328)|0);
      var $arraydecay860=(($codes)|0);
      var $520=$state;
      var $next861=(($520+108)|0);
      HEAP32[(($next861)>>2)]=$arraydecay860;
      var $521=$state;
      var $next862=(($521+108)|0);
      var $522=HEAP32[(($next862)>>2)];
      var $523=$state;
      var $lencode=(($523+76)|0);
      HEAP32[(($lencode)>>2)]=$522;
      var $524=$state;
      var $lenbits=(($524+84)|0);
      HEAP32[(($lenbits)>>2)]=7;
      var $525=$state;
      var $lens863=(($525+112)|0);
      var $arraydecay864=(($lens863)|0);
      var $526=$state;
      var $next865=(($526+108)|0);
      var $527=$state;
      var $lenbits866=(($527+84)|0);
      var $528=$state;
      var $work=(($528+752)|0);
      var $arraydecay867=(($work)|0);
      var $call868=_inflate_table(0, $arraydecay864, 19, $next865, $lenbits866, $arraydecay867);
      $ret=$call868;
      var $529=$ret;
      var $tobool869=(($529)|0)!=0;
      if ($tobool869) { __label__ = 319; break; } else { __label__ = 320; break; }
    case 319: 
      var $530=$strm_addr;
      var $msg871=(($530+24)|0);
      HEAP32[(($msg871)>>2)]=((STRING_TABLE.__str91291)|0);
      var $531=$state;
      var $mode872=(($531)|0);
      HEAP32[(($mode872)>>2)]=29;
      __label__ = 564; break;
    case 320: 
      var $532=$state;
      var $have874=(($532+104)|0);
      HEAP32[(($have874)>>2)]=0;
      var $533=$state;
      var $mode875=(($533)|0);
      HEAP32[(($mode875)>>2)]=18;
      __label__ = 321; break;
    case 321: 
      __label__ = 322; break;
    case 322: 
      var $534=$state;
      var $have878=(($534+104)|0);
      var $535=HEAPU32[(($have878)>>2)];
      var $536=$state;
      var $nlen879=(($536+96)|0);
      var $537=HEAP32[(($nlen879)>>2)];
      var $538=$state;
      var $ndist880=(($538+100)|0);
      var $539=HEAP32[(($ndist880)>>2)];
      var $add881=(($537+$539)|0);
      var $cmp882=(($535)>>>0) < (($add881)>>>0);
      if ($cmp882) { __label__ = 323; break; } else { __label__ = 389; break; }
    case 323: 
      __label__ = 324; break;
    case 324: 
      var $540=$hold;
      var $541=$state;
      var $lenbits886=(($541+84)|0);
      var $542=HEAP32[(($lenbits886)>>2)];
      var $shl887=1 << $542;
      var $sub888=(($shl887-1)|0);
      var $and889=$540 & $sub888;
      var $543=$state;
      var $lencode890=(($543+76)|0);
      var $544=HEAP32[(($lencode890)>>2)];
      var $arrayidx891=(($544+($and889<<2))|0);
      var $545=$here;
      var $546=$arrayidx891;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($545)>>1)]=HEAP16[(($546)>>1)];HEAP16[(($545+2)>>1)]=HEAP16[(($546+2)>>1)];
      var $bits892=(($here+1)|0);
      var $547=HEAPU8[($bits892)];
      var $conv893=(($547)&255);
      var $548=$bits;
      var $cmp894=(($conv893)>>>0) <= (($548)>>>0);
      if ($cmp894) { __label__ = 325; break; } else { __label__ = 326; break; }
    case 325: 
      __label__ = 331; break;
    case 326: 
      __label__ = 327; break;
    case 327: 
      var $549=$have;
      var $cmp899=(($549)|0)==0;
      if ($cmp899) { __label__ = 328; break; } else { __label__ = 329; break; }
    case 328: 
      __label__ = 565; break;
    case 329: 
      var $550=$have;
      var $dec903=(($550-1)|0);
      $have=$dec903;
      var $551=$next;
      var $incdec_ptr904=(($551+1)|0);
      $next=$incdec_ptr904;
      var $552=HEAPU8[($551)];
      var $conv905=(($552)&255);
      var $553=$bits;
      var $shl906=$conv905 << $553;
      var $554=$hold;
      var $add907=(($554+$shl906)|0);
      $hold=$add907;
      var $555=$bits;
      var $add908=(($555+8)|0);
      $bits=$add908;
      __label__ = 330; break;
    case 330: 
      __label__ = 324; break;
    case 331: 
      var $val=(($here+2)|0);
      var $556=HEAPU16[(($val)>>1)];
      var $conv911=(($556)&65535);
      var $cmp912=(($conv911)|0) < 16;
      if ($cmp912) { __label__ = 332; break; } else { __label__ = 335; break; }
    case 332: 
      __label__ = 333; break;
    case 333: 
      var $bits916=(($here+1)|0);
      var $557=HEAPU8[($bits916)];
      var $conv917=(($557)&255);
      var $558=$hold;
      var $shr918=$558 >>> (($conv917)>>>0);
      $hold=$shr918;
      var $bits919=(($here+1)|0);
      var $559=HEAPU8[($bits919)];
      var $conv920=(($559)&255);
      var $560=$bits;
      var $sub921=(($560-$conv920)|0);
      $bits=$sub921;
      __label__ = 334; break;
    case 334: 
      var $val924=(($here+2)|0);
      var $561=HEAP16[(($val924)>>1)];
      var $562=$state;
      var $have925=(($562+104)|0);
      var $563=HEAP32[(($have925)>>2)];
      var $inc926=(($563+1)|0);
      HEAP32[(($have925)>>2)]=$inc926;
      var $564=$state;
      var $lens927=(($564+112)|0);
      var $arrayidx928=(($lens927+($563<<1))|0);
      HEAP16[(($arrayidx928)>>1)]=$561;
      __label__ = 388; break;
    case 335: 
      var $val930=(($here+2)|0);
      var $565=HEAPU16[(($val930)>>1)];
      var $conv931=(($565)&65535);
      var $cmp932=(($conv931)|0)==16;
      if ($cmp932) { __label__ = 336; break; } else { __label__ = 352; break; }
    case 336: 
      __label__ = 337; break;
    case 337: 
      __label__ = 338; break;
    case 338: 
      var $566=$bits;
      var $bits937=(($here+1)|0);
      var $567=HEAPU8[($bits937)];
      var $conv938=(($567)&255);
      var $add939=(($conv938+2)|0);
      var $cmp940=(($566)>>>0) < (($add939)>>>0);
      if ($cmp940) { __label__ = 339; break; } else { __label__ = 344; break; }
    case 339: 
      __label__ = 340; break;
    case 340: 
      var $568=$have;
      var $cmp944=(($568)|0)==0;
      if ($cmp944) { __label__ = 341; break; } else { __label__ = 342; break; }
    case 341: 
      __label__ = 565; break;
    case 342: 
      var $569=$have;
      var $dec948=(($569-1)|0);
      $have=$dec948;
      var $570=$next;
      var $incdec_ptr949=(($570+1)|0);
      $next=$incdec_ptr949;
      var $571=HEAPU8[($570)];
      var $conv950=(($571)&255);
      var $572=$bits;
      var $shl951=$conv950 << $572;
      var $573=$hold;
      var $add952=(($573+$shl951)|0);
      $hold=$add952;
      var $574=$bits;
      var $add953=(($574+8)|0);
      $bits=$add953;
      __label__ = 343; break;
    case 343: 
      __label__ = 338; break;
    case 344: 
      __label__ = 345; break;
    case 345: 
      __label__ = 346; break;
    case 346: 
      var $bits960=(($here+1)|0);
      var $575=HEAPU8[($bits960)];
      var $conv961=(($575)&255);
      var $576=$hold;
      var $shr962=$576 >>> (($conv961)>>>0);
      $hold=$shr962;
      var $bits963=(($here+1)|0);
      var $577=HEAPU8[($bits963)];
      var $conv964=(($577)&255);
      var $578=$bits;
      var $sub965=(($578-$conv964)|0);
      $bits=$sub965;
      __label__ = 347; break;
    case 347: 
      var $579=$state;
      var $have968=(($579+104)|0);
      var $580=HEAP32[(($have968)>>2)];
      var $cmp969=(($580)|0)==0;
      if ($cmp969) { __label__ = 348; break; } else { __label__ = 349; break; }
    case 348: 
      var $581=$strm_addr;
      var $msg972=(($581+24)|0);
      HEAP32[(($msg972)>>2)]=((STRING_TABLE.__str101292)|0);
      var $582=$state;
      var $mode973=(($582)|0);
      HEAP32[(($mode973)>>2)]=29;
      __label__ = 389; break;
    case 349: 
      var $583=$state;
      var $have975=(($583+104)|0);
      var $584=HEAP32[(($have975)>>2)];
      var $sub976=(($584-1)|0);
      var $585=$state;
      var $lens977=(($585+112)|0);
      var $arrayidx978=(($lens977+($sub976<<1))|0);
      var $586=HEAPU16[(($arrayidx978)>>1)];
      var $conv979=(($586)&65535);
      $len=$conv979;
      var $587=$hold;
      var $and980=$587 & 3;
      var $add981=(($and980+3)|0);
      $copy=$add981;
      __label__ = 350; break;
    case 350: 
      var $588=$hold;
      var $shr983=$588 >>> 2;
      $hold=$shr983;
      var $589=$bits;
      var $sub984=(($589-2)|0);
      $bits=$sub984;
      __label__ = 351; break;
    case 351: 
      __label__ = 382; break;
    case 352: 
      var $val988=(($here+2)|0);
      var $590=HEAPU16[(($val988)>>1)];
      var $conv989=(($590)&65535);
      var $cmp990=(($conv989)|0)==17;
      if ($cmp990) { __label__ = 353; break; } else { __label__ = 367; break; }
    case 353: 
      __label__ = 354; break;
    case 354: 
      __label__ = 355; break;
    case 355: 
      var $591=$bits;
      var $bits995=(($here+1)|0);
      var $592=HEAPU8[($bits995)];
      var $conv996=(($592)&255);
      var $add997=(($conv996+3)|0);
      var $cmp998=(($591)>>>0) < (($add997)>>>0);
      if ($cmp998) { __label__ = 356; break; } else { __label__ = 361; break; }
    case 356: 
      __label__ = 357; break;
    case 357: 
      var $593=$have;
      var $cmp1002=(($593)|0)==0;
      if ($cmp1002) { __label__ = 358; break; } else { __label__ = 359; break; }
    case 358: 
      __label__ = 565; break;
    case 359: 
      var $594=$have;
      var $dec1006=(($594-1)|0);
      $have=$dec1006;
      var $595=$next;
      var $incdec_ptr1007=(($595+1)|0);
      $next=$incdec_ptr1007;
      var $596=HEAPU8[($595)];
      var $conv1008=(($596)&255);
      var $597=$bits;
      var $shl1009=$conv1008 << $597;
      var $598=$hold;
      var $add1010=(($598+$shl1009)|0);
      $hold=$add1010;
      var $599=$bits;
      var $add1011=(($599+8)|0);
      $bits=$add1011;
      __label__ = 360; break;
    case 360: 
      __label__ = 355; break;
    case 361: 
      __label__ = 362; break;
    case 362: 
      __label__ = 363; break;
    case 363: 
      var $bits1018=(($here+1)|0);
      var $600=HEAPU8[($bits1018)];
      var $conv1019=(($600)&255);
      var $601=$hold;
      var $shr1020=$601 >>> (($conv1019)>>>0);
      $hold=$shr1020;
      var $bits1021=(($here+1)|0);
      var $602=HEAPU8[($bits1021)];
      var $conv1022=(($602)&255);
      var $603=$bits;
      var $sub1023=(($603-$conv1022)|0);
      $bits=$sub1023;
      __label__ = 364; break;
    case 364: 
      $len=0;
      var $604=$hold;
      var $and1026=$604 & 7;
      var $add1027=(($and1026+3)|0);
      $copy=$add1027;
      __label__ = 365; break;
    case 365: 
      var $605=$hold;
      var $shr1029=$605 >>> 3;
      $hold=$shr1029;
      var $606=$bits;
      var $sub1030=(($606-3)|0);
      $bits=$sub1030;
      __label__ = 366; break;
    case 366: 
      __label__ = 381; break;
    case 367: 
      __label__ = 368; break;
    case 368: 
      __label__ = 369; break;
    case 369: 
      var $607=$bits;
      var $bits1036=(($here+1)|0);
      var $608=HEAPU8[($bits1036)];
      var $conv1037=(($608)&255);
      var $add1038=(($conv1037+7)|0);
      var $cmp1039=(($607)>>>0) < (($add1038)>>>0);
      if ($cmp1039) { __label__ = 370; break; } else { __label__ = 375; break; }
    case 370: 
      __label__ = 371; break;
    case 371: 
      var $609=$have;
      var $cmp1043=(($609)|0)==0;
      if ($cmp1043) { __label__ = 372; break; } else { __label__ = 373; break; }
    case 372: 
      __label__ = 565; break;
    case 373: 
      var $610=$have;
      var $dec1047=(($610-1)|0);
      $have=$dec1047;
      var $611=$next;
      var $incdec_ptr1048=(($611+1)|0);
      $next=$incdec_ptr1048;
      var $612=HEAPU8[($611)];
      var $conv1049=(($612)&255);
      var $613=$bits;
      var $shl1050=$conv1049 << $613;
      var $614=$hold;
      var $add1051=(($614+$shl1050)|0);
      $hold=$add1051;
      var $615=$bits;
      var $add1052=(($615+8)|0);
      $bits=$add1052;
      __label__ = 374; break;
    case 374: 
      __label__ = 369; break;
    case 375: 
      __label__ = 376; break;
    case 376: 
      __label__ = 377; break;
    case 377: 
      var $bits1059=(($here+1)|0);
      var $616=HEAPU8[($bits1059)];
      var $conv1060=(($616)&255);
      var $617=$hold;
      var $shr1061=$617 >>> (($conv1060)>>>0);
      $hold=$shr1061;
      var $bits1062=(($here+1)|0);
      var $618=HEAPU8[($bits1062)];
      var $conv1063=(($618)&255);
      var $619=$bits;
      var $sub1064=(($619-$conv1063)|0);
      $bits=$sub1064;
      __label__ = 378; break;
    case 378: 
      $len=0;
      var $620=$hold;
      var $and1067=$620 & 127;
      var $add1068=(($and1067+11)|0);
      $copy=$add1068;
      __label__ = 379; break;
    case 379: 
      var $621=$hold;
      var $shr1070=$621 >>> 7;
      $hold=$shr1070;
      var $622=$bits;
      var $sub1071=(($622-7)|0);
      $bits=$sub1071;
      __label__ = 380; break;
    case 380: 
      __label__ = 381; break;
    case 381: 
      __label__ = 382; break;
    case 382: 
      var $623=$state;
      var $have1076=(($623+104)|0);
      var $624=HEAP32[(($have1076)>>2)];
      var $625=$copy;
      var $add1077=(($624+$625)|0);
      var $626=$state;
      var $nlen1078=(($626+96)|0);
      var $627=HEAP32[(($nlen1078)>>2)];
      var $628=$state;
      var $ndist1079=(($628+100)|0);
      var $629=HEAP32[(($ndist1079)>>2)];
      var $add1080=(($627+$629)|0);
      var $cmp1081=(($add1077)>>>0) > (($add1080)>>>0);
      if ($cmp1081) { __label__ = 383; break; } else { __label__ = 384; break; }
    case 383: 
      var $630=$strm_addr;
      var $msg1084=(($630+24)|0);
      HEAP32[(($msg1084)>>2)]=((STRING_TABLE.__str101292)|0);
      var $631=$state;
      var $mode1085=(($631)|0);
      HEAP32[(($mode1085)>>2)]=29;
      __label__ = 389; break;
    case 384: 
      __label__ = 385; break;
    case 385: 
      var $632=$copy;
      var $dec1088=(($632-1)|0);
      $copy=$dec1088;
      var $tobool1089=(($632)|0)!=0;
      if ($tobool1089) { __label__ = 386; break; } else { __label__ = 387; break; }
    case 386: 
      var $633=$len;
      var $conv1091=(($633) & 65535);
      var $634=$state;
      var $have1092=(($634+104)|0);
      var $635=HEAP32[(($have1092)>>2)];
      var $inc1093=(($635+1)|0);
      HEAP32[(($have1092)>>2)]=$inc1093;
      var $636=$state;
      var $lens1094=(($636+112)|0);
      var $arrayidx1095=(($lens1094+($635<<1))|0);
      HEAP16[(($arrayidx1095)>>1)]=$conv1091;
      __label__ = 385; break;
    case 387: 
      __label__ = 388; break;
    case 388: 
      __label__ = 322; break;
    case 389: 
      var $637=$state;
      var $mode1099=(($637)|0);
      var $638=HEAP32[(($mode1099)>>2)];
      var $cmp1100=(($638)|0)==29;
      if ($cmp1100) { __label__ = 390; break; } else { __label__ = 391; break; }
    case 390: 
      __label__ = 564; break;
    case 391: 
      var $639=$state;
      var $lens1104=(($639+112)|0);
      var $arrayidx1105=(($lens1104+512)|0);
      var $640=HEAPU16[(($arrayidx1105)>>1)];
      var $conv1106=(($640)&65535);
      var $cmp1107=(($conv1106)|0)==0;
      if ($cmp1107) { __label__ = 392; break; } else { __label__ = 393; break; }
    case 392: 
      var $641=$strm_addr;
      var $msg1110=(($641+24)|0);
      HEAP32[(($msg1110)>>2)]=((STRING_TABLE.__str111293)|0);
      var $642=$state;
      var $mode1111=(($642)|0);
      HEAP32[(($mode1111)>>2)]=29;
      __label__ = 564; break;
    case 393: 
      var $643=$state;
      var $codes1113=(($643+1328)|0);
      var $arraydecay1114=(($codes1113)|0);
      var $644=$state;
      var $next1115=(($644+108)|0);
      HEAP32[(($next1115)>>2)]=$arraydecay1114;
      var $645=$state;
      var $next1116=(($645+108)|0);
      var $646=HEAP32[(($next1116)>>2)];
      var $647=$state;
      var $lencode1117=(($647+76)|0);
      HEAP32[(($lencode1117)>>2)]=$646;
      var $648=$state;
      var $lenbits1118=(($648+84)|0);
      HEAP32[(($lenbits1118)>>2)]=9;
      var $649=$state;
      var $lens1119=(($649+112)|0);
      var $arraydecay1120=(($lens1119)|0);
      var $650=$state;
      var $nlen1121=(($650+96)|0);
      var $651=HEAP32[(($nlen1121)>>2)];
      var $652=$state;
      var $next1122=(($652+108)|0);
      var $653=$state;
      var $lenbits1123=(($653+84)|0);
      var $654=$state;
      var $work1124=(($654+752)|0);
      var $arraydecay1125=(($work1124)|0);
      var $call1126=_inflate_table(1, $arraydecay1120, $651, $next1122, $lenbits1123, $arraydecay1125);
      $ret=$call1126;
      var $655=$ret;
      var $tobool1127=(($655)|0)!=0;
      if ($tobool1127) { __label__ = 394; break; } else { __label__ = 395; break; }
    case 394: 
      var $656=$strm_addr;
      var $msg1129=(($656+24)|0);
      HEAP32[(($msg1129)>>2)]=((STRING_TABLE.__str121294)|0);
      var $657=$state;
      var $mode1130=(($657)|0);
      HEAP32[(($mode1130)>>2)]=29;
      __label__ = 564; break;
    case 395: 
      var $658=$state;
      var $next1132=(($658+108)|0);
      var $659=HEAP32[(($next1132)>>2)];
      var $660=$state;
      var $distcode=(($660+80)|0);
      HEAP32[(($distcode)>>2)]=$659;
      var $661=$state;
      var $distbits=(($661+88)|0);
      HEAP32[(($distbits)>>2)]=6;
      var $662=$state;
      var $lens1133=(($662+112)|0);
      var $arraydecay1134=(($lens1133)|0);
      var $663=$state;
      var $nlen1135=(($663+96)|0);
      var $664=HEAP32[(($nlen1135)>>2)];
      var $add_ptr1136=(($arraydecay1134+($664<<1))|0);
      var $665=$state;
      var $ndist1137=(($665+100)|0);
      var $666=HEAP32[(($ndist1137)>>2)];
      var $667=$state;
      var $next1138=(($667+108)|0);
      var $668=$state;
      var $distbits1139=(($668+88)|0);
      var $669=$state;
      var $work1140=(($669+752)|0);
      var $arraydecay1141=(($work1140)|0);
      var $call1142=_inflate_table(2, $add_ptr1136, $666, $next1138, $distbits1139, $arraydecay1141);
      $ret=$call1142;
      var $670=$ret;
      var $tobool1143=(($670)|0)!=0;
      if ($tobool1143) { __label__ = 396; break; } else { __label__ = 397; break; }
    case 396: 
      var $671=$strm_addr;
      var $msg1145=(($671+24)|0);
      HEAP32[(($msg1145)>>2)]=((STRING_TABLE.__str131295)|0);
      var $672=$state;
      var $mode1146=(($672)|0);
      HEAP32[(($mode1146)>>2)]=29;
      __label__ = 564; break;
    case 397: 
      var $673=$state;
      var $mode1148=(($673)|0);
      HEAP32[(($mode1148)>>2)]=19;
      var $674=$flush_addr;
      var $cmp1149=(($674)|0)==6;
      if ($cmp1149) { __label__ = 398; break; } else { __label__ = 399; break; }
    case 398: 
      __label__ = 565; break;
    case 399: 
      __label__ = 400; break;
    case 400: 
      var $675=$state;
      var $mode1154=(($675)|0);
      HEAP32[(($mode1154)>>2)]=20;
      __label__ = 401; break;
    case 401: 
      var $676=$have;
      var $cmp1156=(($676)>>>0) >= 6;
      if ($cmp1156) { __label__ = 402; break; } else { __label__ = 410; break; }
    case 402: 
      var $677=$left;
      var $cmp1159=(($677)>>>0) >= 258;
      if ($cmp1159) { __label__ = 403; break; } else { __label__ = 410; break; }
    case 403: 
      __label__ = 404; break;
    case 404: 
      var $678=$put;
      var $679=$strm_addr;
      var $next_out1163=(($679+12)|0);
      HEAP32[(($next_out1163)>>2)]=$678;
      var $680=$left;
      var $681=$strm_addr;
      var $avail_out1164=(($681+16)|0);
      HEAP32[(($avail_out1164)>>2)]=$680;
      var $682=$next;
      var $683=$strm_addr;
      var $next_in1165=(($683)|0);
      HEAP32[(($next_in1165)>>2)]=$682;
      var $684=$have;
      var $685=$strm_addr;
      var $avail_in1166=(($685+4)|0);
      HEAP32[(($avail_in1166)>>2)]=$684;
      var $686=$hold;
      var $687=$state;
      var $hold1167=(($687+56)|0);
      HEAP32[(($hold1167)>>2)]=$686;
      var $688=$bits;
      var $689=$state;
      var $bits1168=(($689+60)|0);
      HEAP32[(($bits1168)>>2)]=$688;
      __label__ = 405; break;
    case 405: 
      var $690=$strm_addr;
      var $691=$out;
      _inflate_fast($690, $691);
      __label__ = 406; break;
    case 406: 
      var $692=$strm_addr;
      var $next_out1172=(($692+12)|0);
      var $693=HEAP32[(($next_out1172)>>2)];
      $put=$693;
      var $694=$strm_addr;
      var $avail_out1173=(($694+16)|0);
      var $695=HEAP32[(($avail_out1173)>>2)];
      $left=$695;
      var $696=$strm_addr;
      var $next_in1174=(($696)|0);
      var $697=HEAP32[(($next_in1174)>>2)];
      $next=$697;
      var $698=$strm_addr;
      var $avail_in1175=(($698+4)|0);
      var $699=HEAP32[(($avail_in1175)>>2)];
      $have=$699;
      var $700=$state;
      var $hold1176=(($700+56)|0);
      var $701=HEAP32[(($hold1176)>>2)];
      $hold=$701;
      var $702=$state;
      var $bits1177=(($702+60)|0);
      var $703=HEAP32[(($bits1177)>>2)];
      $bits=$703;
      __label__ = 407; break;
    case 407: 
      var $704=$state;
      var $mode1180=(($704)|0);
      var $705=HEAP32[(($mode1180)>>2)];
      var $cmp1181=(($705)|0)==11;
      if ($cmp1181) { __label__ = 408; break; } else { __label__ = 409; break; }
    case 408: 
      var $706=$state;
      var $back=(($706+7108)|0);
      HEAP32[(($back)>>2)]=-1;
      __label__ = 409; break;
    case 409: 
      __label__ = 564; break;
    case 410: 
      var $707=$state;
      var $back1186=(($707+7108)|0);
      HEAP32[(($back1186)>>2)]=0;
      __label__ = 411; break;
    case 411: 
      var $708=$hold;
      var $709=$state;
      var $lenbits1188=(($709+84)|0);
      var $710=HEAP32[(($lenbits1188)>>2)];
      var $shl1189=1 << $710;
      var $sub1190=(($shl1189-1)|0);
      var $and1191=$708 & $sub1190;
      var $711=$state;
      var $lencode1192=(($711+76)|0);
      var $712=HEAP32[(($lencode1192)>>2)];
      var $arrayidx1193=(($712+($and1191<<2))|0);
      var $713=$here;
      var $714=$arrayidx1193;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($713)>>1)]=HEAP16[(($714)>>1)];HEAP16[(($713+2)>>1)]=HEAP16[(($714+2)>>1)];
      var $bits1194=(($here+1)|0);
      var $715=HEAPU8[($bits1194)];
      var $conv1195=(($715)&255);
      var $716=$bits;
      var $cmp1196=(($conv1195)>>>0) <= (($716)>>>0);
      if ($cmp1196) { __label__ = 412; break; } else { __label__ = 413; break; }
    case 412: 
      __label__ = 418; break;
    case 413: 
      __label__ = 414; break;
    case 414: 
      var $717=$have;
      var $cmp1201=(($717)|0)==0;
      if ($cmp1201) { __label__ = 415; break; } else { __label__ = 416; break; }
    case 415: 
      __label__ = 565; break;
    case 416: 
      var $718=$have;
      var $dec1205=(($718-1)|0);
      $have=$dec1205;
      var $719=$next;
      var $incdec_ptr1206=(($719+1)|0);
      $next=$incdec_ptr1206;
      var $720=HEAPU8[($719)];
      var $conv1207=(($720)&255);
      var $721=$bits;
      var $shl1208=$conv1207 << $721;
      var $722=$hold;
      var $add1209=(($722+$shl1208)|0);
      $hold=$add1209;
      var $723=$bits;
      var $add1210=(($723+8)|0);
      $bits=$add1210;
      __label__ = 417; break;
    case 417: 
      __label__ = 411; break;
    case 418: 
      var $op=(($here)|0);
      var $724=HEAPU8[($op)];
      var $conv1214=(($724)&255);
      var $tobool1215=(($conv1214)|0)!=0;
      if ($tobool1215) { __label__ = 419; break; } else { __label__ = 431; break; }
    case 419: 
      var $op1217=(($here)|0);
      var $725=HEAPU8[($op1217)];
      var $conv1218=(($725)&255);
      var $and1219=$conv1218 & 240;
      var $cmp1220=(($and1219)|0)==0;
      if ($cmp1220) { __label__ = 420; break; } else { __label__ = 431; break; }
    case 420: 
      var $726=$last;
      var $727=$here;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($726)>>1)]=HEAP16[(($727)>>1)];HEAP16[(($726+2)>>1)]=HEAP16[(($727+2)>>1)];
      __label__ = 421; break;
    case 421: 
      var $val1224=(($last+2)|0);
      var $728=HEAPU16[(($val1224)>>1)];
      var $conv1225=(($728)&65535);
      var $729=$hold;
      var $bits1226=(($last+1)|0);
      var $730=HEAPU8[($bits1226)];
      var $conv1227=(($730)&255);
      var $op1228=(($last)|0);
      var $731=HEAPU8[($op1228)];
      var $conv1229=(($731)&255);
      var $add1230=(($conv1227+$conv1229)|0);
      var $shl1231=1 << $add1230;
      var $sub1232=(($shl1231-1)|0);
      var $and1233=$729 & $sub1232;
      var $bits1234=(($last+1)|0);
      var $732=HEAPU8[($bits1234)];
      var $conv1235=(($732)&255);
      var $shr1236=$and1233 >>> (($conv1235)>>>0);
      var $add1237=(($conv1225+$shr1236)|0);
      var $733=$state;
      var $lencode1238=(($733+76)|0);
      var $734=HEAP32[(($lencode1238)>>2)];
      var $arrayidx1239=(($734+($add1237<<2))|0);
      var $735=$here;
      var $736=$arrayidx1239;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($735)>>1)]=HEAP16[(($736)>>1)];HEAP16[(($735+2)>>1)]=HEAP16[(($736+2)>>1)];
      var $bits1240=(($last+1)|0);
      var $737=HEAPU8[($bits1240)];
      var $conv1241=(($737)&255);
      var $bits1242=(($here+1)|0);
      var $738=HEAPU8[($bits1242)];
      var $conv1243=(($738)&255);
      var $add1244=(($conv1241+$conv1243)|0);
      var $739=$bits;
      var $cmp1245=(($add1244)>>>0) <= (($739)>>>0);
      if ($cmp1245) { __label__ = 422; break; } else { __label__ = 423; break; }
    case 422: 
      __label__ = 428; break;
    case 423: 
      __label__ = 424; break;
    case 424: 
      var $740=$have;
      var $cmp1250=(($740)|0)==0;
      if ($cmp1250) { __label__ = 425; break; } else { __label__ = 426; break; }
    case 425: 
      __label__ = 565; break;
    case 426: 
      var $741=$have;
      var $dec1254=(($741-1)|0);
      $have=$dec1254;
      var $742=$next;
      var $incdec_ptr1255=(($742+1)|0);
      $next=$incdec_ptr1255;
      var $743=HEAPU8[($742)];
      var $conv1256=(($743)&255);
      var $744=$bits;
      var $shl1257=$conv1256 << $744;
      var $745=$hold;
      var $add1258=(($745+$shl1257)|0);
      $hold=$add1258;
      var $746=$bits;
      var $add1259=(($746+8)|0);
      $bits=$add1259;
      __label__ = 427; break;
    case 427: 
      __label__ = 421; break;
    case 428: 
      __label__ = 429; break;
    case 429: 
      var $bits1264=(($last+1)|0);
      var $747=HEAPU8[($bits1264)];
      var $conv1265=(($747)&255);
      var $748=$hold;
      var $shr1266=$748 >>> (($conv1265)>>>0);
      $hold=$shr1266;
      var $bits1267=(($last+1)|0);
      var $749=HEAPU8[($bits1267)];
      var $conv1268=(($749)&255);
      var $750=$bits;
      var $sub1269=(($750-$conv1268)|0);
      $bits=$sub1269;
      __label__ = 430; break;
    case 430: 
      var $bits1272=(($last+1)|0);
      var $751=HEAPU8[($bits1272)];
      var $conv1273=(($751)&255);
      var $752=$state;
      var $back1274=(($752+7108)|0);
      var $753=HEAP32[(($back1274)>>2)];
      var $add1275=(($753+$conv1273)|0);
      HEAP32[(($back1274)>>2)]=$add1275;
      __label__ = 431; break;
    case 431: 
      __label__ = 432; break;
    case 432: 
      var $bits1278=(($here+1)|0);
      var $754=HEAPU8[($bits1278)];
      var $conv1279=(($754)&255);
      var $755=$hold;
      var $shr1280=$755 >>> (($conv1279)>>>0);
      $hold=$shr1280;
      var $bits1281=(($here+1)|0);
      var $756=HEAPU8[($bits1281)];
      var $conv1282=(($756)&255);
      var $757=$bits;
      var $sub1283=(($757-$conv1282)|0);
      $bits=$sub1283;
      __label__ = 433; break;
    case 433: 
      var $bits1286=(($here+1)|0);
      var $758=HEAPU8[($bits1286)];
      var $conv1287=(($758)&255);
      var $759=$state;
      var $back1288=(($759+7108)|0);
      var $760=HEAP32[(($back1288)>>2)];
      var $add1289=(($760+$conv1287)|0);
      HEAP32[(($back1288)>>2)]=$add1289;
      var $val1290=(($here+2)|0);
      var $761=HEAPU16[(($val1290)>>1)];
      var $conv1291=(($761)&65535);
      var $762=$state;
      var $length1292=(($762+64)|0);
      HEAP32[(($length1292)>>2)]=$conv1291;
      var $op1293=(($here)|0);
      var $763=HEAPU8[($op1293)];
      var $conv1294=(($763)&255);
      var $cmp1295=(($conv1294)|0)==0;
      if ($cmp1295) { __label__ = 434; break; } else { __label__ = 435; break; }
    case 434: 
      var $764=$state;
      var $mode1298=(($764)|0);
      HEAP32[(($mode1298)>>2)]=25;
      __label__ = 564; break;
    case 435: 
      var $op1300=(($here)|0);
      var $765=HEAPU8[($op1300)];
      var $conv1301=(($765)&255);
      var $and1302=$conv1301 & 32;
      var $tobool1303=(($and1302)|0)!=0;
      if ($tobool1303) { __label__ = 436; break; } else { __label__ = 437; break; }
    case 436: 
      var $766=$state;
      var $back1305=(($766+7108)|0);
      HEAP32[(($back1305)>>2)]=-1;
      var $767=$state;
      var $mode1306=(($767)|0);
      HEAP32[(($mode1306)>>2)]=11;
      __label__ = 564; break;
    case 437: 
      var $op1308=(($here)|0);
      var $768=HEAPU8[($op1308)];
      var $conv1309=(($768)&255);
      var $and1310=$conv1309 & 64;
      var $tobool1311=(($and1310)|0)!=0;
      if ($tobool1311) { __label__ = 438; break; } else { __label__ = 439; break; }
    case 438: 
      var $769=$strm_addr;
      var $msg1313=(($769+24)|0);
      HEAP32[(($msg1313)>>2)]=((STRING_TABLE.__str141296)|0);
      var $770=$state;
      var $mode1314=(($770)|0);
      HEAP32[(($mode1314)>>2)]=29;
      __label__ = 564; break;
    case 439: 
      var $op1316=(($here)|0);
      var $771=HEAPU8[($op1316)];
      var $conv1317=(($771)&255);
      var $and1318=$conv1317 & 15;
      var $772=$state;
      var $extra1319=(($772+72)|0);
      HEAP32[(($extra1319)>>2)]=$and1318;
      var $773=$state;
      var $mode1320=(($773)|0);
      HEAP32[(($mode1320)>>2)]=21;
      __label__ = 440; break;
    case 440: 
      var $774=$state;
      var $extra1322=(($774+72)|0);
      var $775=HEAP32[(($extra1322)>>2)];
      var $tobool1323=(($775)|0)!=0;
      if ($tobool1323) { __label__ = 441; break; } else { __label__ = 453; break; }
    case 441: 
      __label__ = 442; break;
    case 442: 
      __label__ = 443; break;
    case 443: 
      var $776=$bits;
      var $777=$state;
      var $extra1327=(($777+72)|0);
      var $778=HEAPU32[(($extra1327)>>2)];
      var $cmp1328=(($776)>>>0) < (($778)>>>0);
      if ($cmp1328) { __label__ = 444; break; } else { __label__ = 449; break; }
    case 444: 
      __label__ = 445; break;
    case 445: 
      var $779=$have;
      var $cmp1332=(($779)|0)==0;
      if ($cmp1332) { __label__ = 446; break; } else { __label__ = 447; break; }
    case 446: 
      __label__ = 565; break;
    case 447: 
      var $780=$have;
      var $dec1336=(($780-1)|0);
      $have=$dec1336;
      var $781=$next;
      var $incdec_ptr1337=(($781+1)|0);
      $next=$incdec_ptr1337;
      var $782=HEAPU8[($781)];
      var $conv1338=(($782)&255);
      var $783=$bits;
      var $shl1339=$conv1338 << $783;
      var $784=$hold;
      var $add1340=(($784+$shl1339)|0);
      $hold=$add1340;
      var $785=$bits;
      var $add1341=(($785+8)|0);
      $bits=$add1341;
      __label__ = 448; break;
    case 448: 
      __label__ = 443; break;
    case 449: 
      __label__ = 450; break;
    case 450: 
      var $786=$hold;
      var $787=$state;
      var $extra1347=(($787+72)|0);
      var $788=HEAP32[(($extra1347)>>2)];
      var $shl1348=1 << $788;
      var $sub1349=(($shl1348-1)|0);
      var $and1350=$786 & $sub1349;
      var $789=$state;
      var $length1351=(($789+64)|0);
      var $790=HEAP32[(($length1351)>>2)];
      var $add1352=(($790+$and1350)|0);
      HEAP32[(($length1351)>>2)]=$add1352;
      __label__ = 451; break;
    case 451: 
      var $791=$state;
      var $extra1354=(($791+72)|0);
      var $792=HEAPU32[(($extra1354)>>2)];
      var $793=$hold;
      var $shr1355=$793 >>> (($792)>>>0);
      $hold=$shr1355;
      var $794=$state;
      var $extra1356=(($794+72)|0);
      var $795=HEAP32[(($extra1356)>>2)];
      var $796=$bits;
      var $sub1357=(($796-$795)|0);
      $bits=$sub1357;
      __label__ = 452; break;
    case 452: 
      var $797=$state;
      var $extra1360=(($797+72)|0);
      var $798=HEAP32[(($extra1360)>>2)];
      var $799=$state;
      var $back1361=(($799+7108)|0);
      var $800=HEAP32[(($back1361)>>2)];
      var $add1362=(($800+$798)|0);
      HEAP32[(($back1361)>>2)]=$add1362;
      __label__ = 453; break;
    case 453: 
      var $801=$state;
      var $length1364=(($801+64)|0);
      var $802=HEAP32[(($length1364)>>2)];
      var $803=$state;
      var $was=(($803+7112)|0);
      HEAP32[(($was)>>2)]=$802;
      var $804=$state;
      var $mode1365=(($804)|0);
      HEAP32[(($mode1365)>>2)]=22;
      __label__ = 454; break;
    case 454: 
      __label__ = 455; break;
    case 455: 
      var $805=$hold;
      var $806=$state;
      var $distbits1368=(($806+88)|0);
      var $807=HEAP32[(($distbits1368)>>2)];
      var $shl1369=1 << $807;
      var $sub1370=(($shl1369-1)|0);
      var $and1371=$805 & $sub1370;
      var $808=$state;
      var $distcode1372=(($808+80)|0);
      var $809=HEAP32[(($distcode1372)>>2)];
      var $arrayidx1373=(($809+($and1371<<2))|0);
      var $810=$here;
      var $811=$arrayidx1373;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($810)>>1)]=HEAP16[(($811)>>1)];HEAP16[(($810+2)>>1)]=HEAP16[(($811+2)>>1)];
      var $bits1374=(($here+1)|0);
      var $812=HEAPU8[($bits1374)];
      var $conv1375=(($812)&255);
      var $813=$bits;
      var $cmp1376=(($conv1375)>>>0) <= (($813)>>>0);
      if ($cmp1376) { __label__ = 456; break; } else { __label__ = 457; break; }
    case 456: 
      __label__ = 462; break;
    case 457: 
      __label__ = 458; break;
    case 458: 
      var $814=$have;
      var $cmp1381=(($814)|0)==0;
      if ($cmp1381) { __label__ = 459; break; } else { __label__ = 460; break; }
    case 459: 
      __label__ = 565; break;
    case 460: 
      var $815=$have;
      var $dec1385=(($815-1)|0);
      $have=$dec1385;
      var $816=$next;
      var $incdec_ptr1386=(($816+1)|0);
      $next=$incdec_ptr1386;
      var $817=HEAPU8[($816)];
      var $conv1387=(($817)&255);
      var $818=$bits;
      var $shl1388=$conv1387 << $818;
      var $819=$hold;
      var $add1389=(($819+$shl1388)|0);
      $hold=$add1389;
      var $820=$bits;
      var $add1390=(($820+8)|0);
      $bits=$add1390;
      __label__ = 461; break;
    case 461: 
      __label__ = 455; break;
    case 462: 
      var $op1394=(($here)|0);
      var $821=HEAPU8[($op1394)];
      var $conv1395=(($821)&255);
      var $and1396=$conv1395 & 240;
      var $cmp1397=(($and1396)|0)==0;
      if ($cmp1397) { __label__ = 463; break; } else { __label__ = 474; break; }
    case 463: 
      var $822=$last;
      var $823=$here;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($822)>>1)]=HEAP16[(($823)>>1)];HEAP16[(($822+2)>>1)]=HEAP16[(($823+2)>>1)];
      __label__ = 464; break;
    case 464: 
      var $val1401=(($last+2)|0);
      var $824=HEAPU16[(($val1401)>>1)];
      var $conv1402=(($824)&65535);
      var $825=$hold;
      var $bits1403=(($last+1)|0);
      var $826=HEAPU8[($bits1403)];
      var $conv1404=(($826)&255);
      var $op1405=(($last)|0);
      var $827=HEAPU8[($op1405)];
      var $conv1406=(($827)&255);
      var $add1407=(($conv1404+$conv1406)|0);
      var $shl1408=1 << $add1407;
      var $sub1409=(($shl1408-1)|0);
      var $and1410=$825 & $sub1409;
      var $bits1411=(($last+1)|0);
      var $828=HEAPU8[($bits1411)];
      var $conv1412=(($828)&255);
      var $shr1413=$and1410 >>> (($conv1412)>>>0);
      var $add1414=(($conv1402+$shr1413)|0);
      var $829=$state;
      var $distcode1415=(($829+80)|0);
      var $830=HEAP32[(($distcode1415)>>2)];
      var $arrayidx1416=(($830+($add1414<<2))|0);
      var $831=$here;
      var $832=$arrayidx1416;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($831)>>1)]=HEAP16[(($832)>>1)];HEAP16[(($831+2)>>1)]=HEAP16[(($832+2)>>1)];
      var $bits1417=(($last+1)|0);
      var $833=HEAPU8[($bits1417)];
      var $conv1418=(($833)&255);
      var $bits1419=(($here+1)|0);
      var $834=HEAPU8[($bits1419)];
      var $conv1420=(($834)&255);
      var $add1421=(($conv1418+$conv1420)|0);
      var $835=$bits;
      var $cmp1422=(($add1421)>>>0) <= (($835)>>>0);
      if ($cmp1422) { __label__ = 465; break; } else { __label__ = 466; break; }
    case 465: 
      __label__ = 471; break;
    case 466: 
      __label__ = 467; break;
    case 467: 
      var $836=$have;
      var $cmp1427=(($836)|0)==0;
      if ($cmp1427) { __label__ = 468; break; } else { __label__ = 469; break; }
    case 468: 
      __label__ = 565; break;
    case 469: 
      var $837=$have;
      var $dec1431=(($837-1)|0);
      $have=$dec1431;
      var $838=$next;
      var $incdec_ptr1432=(($838+1)|0);
      $next=$incdec_ptr1432;
      var $839=HEAPU8[($838)];
      var $conv1433=(($839)&255);
      var $840=$bits;
      var $shl1434=$conv1433 << $840;
      var $841=$hold;
      var $add1435=(($841+$shl1434)|0);
      $hold=$add1435;
      var $842=$bits;
      var $add1436=(($842+8)|0);
      $bits=$add1436;
      __label__ = 470; break;
    case 470: 
      __label__ = 464; break;
    case 471: 
      __label__ = 472; break;
    case 472: 
      var $bits1441=(($last+1)|0);
      var $843=HEAPU8[($bits1441)];
      var $conv1442=(($843)&255);
      var $844=$hold;
      var $shr1443=$844 >>> (($conv1442)>>>0);
      $hold=$shr1443;
      var $bits1444=(($last+1)|0);
      var $845=HEAPU8[($bits1444)];
      var $conv1445=(($845)&255);
      var $846=$bits;
      var $sub1446=(($846-$conv1445)|0);
      $bits=$sub1446;
      __label__ = 473; break;
    case 473: 
      var $bits1449=(($last+1)|0);
      var $847=HEAPU8[($bits1449)];
      var $conv1450=(($847)&255);
      var $848=$state;
      var $back1451=(($848+7108)|0);
      var $849=HEAP32[(($back1451)>>2)];
      var $add1452=(($849+$conv1450)|0);
      HEAP32[(($back1451)>>2)]=$add1452;
      __label__ = 474; break;
    case 474: 
      __label__ = 475; break;
    case 475: 
      var $bits1455=(($here+1)|0);
      var $850=HEAPU8[($bits1455)];
      var $conv1456=(($850)&255);
      var $851=$hold;
      var $shr1457=$851 >>> (($conv1456)>>>0);
      $hold=$shr1457;
      var $bits1458=(($here+1)|0);
      var $852=HEAPU8[($bits1458)];
      var $conv1459=(($852)&255);
      var $853=$bits;
      var $sub1460=(($853-$conv1459)|0);
      $bits=$sub1460;
      __label__ = 476; break;
    case 476: 
      var $bits1463=(($here+1)|0);
      var $854=HEAPU8[($bits1463)];
      var $conv1464=(($854)&255);
      var $855=$state;
      var $back1465=(($855+7108)|0);
      var $856=HEAP32[(($back1465)>>2)];
      var $add1466=(($856+$conv1464)|0);
      HEAP32[(($back1465)>>2)]=$add1466;
      var $op1467=(($here)|0);
      var $857=HEAPU8[($op1467)];
      var $conv1468=(($857)&255);
      var $and1469=$conv1468 & 64;
      var $tobool1470=(($and1469)|0)!=0;
      if ($tobool1470) { __label__ = 477; break; } else { __label__ = 478; break; }
    case 477: 
      var $858=$strm_addr;
      var $msg1472=(($858+24)|0);
      HEAP32[(($msg1472)>>2)]=((STRING_TABLE.__str151297)|0);
      var $859=$state;
      var $mode1473=(($859)|0);
      HEAP32[(($mode1473)>>2)]=29;
      __label__ = 564; break;
    case 478: 
      var $val1475=(($here+2)|0);
      var $860=HEAPU16[(($val1475)>>1)];
      var $conv1476=(($860)&65535);
      var $861=$state;
      var $offset=(($861+68)|0);
      HEAP32[(($offset)>>2)]=$conv1476;
      var $op1477=(($here)|0);
      var $862=HEAPU8[($op1477)];
      var $conv1478=(($862)&255);
      var $and1479=$conv1478 & 15;
      var $863=$state;
      var $extra1480=(($863+72)|0);
      HEAP32[(($extra1480)>>2)]=$and1479;
      var $864=$state;
      var $mode1481=(($864)|0);
      HEAP32[(($mode1481)>>2)]=23;
      __label__ = 479; break;
    case 479: 
      var $865=$state;
      var $extra1483=(($865+72)|0);
      var $866=HEAP32[(($extra1483)>>2)];
      var $tobool1484=(($866)|0)!=0;
      if ($tobool1484) { __label__ = 480; break; } else { __label__ = 492; break; }
    case 480: 
      __label__ = 481; break;
    case 481: 
      __label__ = 482; break;
    case 482: 
      var $867=$bits;
      var $868=$state;
      var $extra1488=(($868+72)|0);
      var $869=HEAPU32[(($extra1488)>>2)];
      var $cmp1489=(($867)>>>0) < (($869)>>>0);
      if ($cmp1489) { __label__ = 483; break; } else { __label__ = 488; break; }
    case 483: 
      __label__ = 484; break;
    case 484: 
      var $870=$have;
      var $cmp1493=(($870)|0)==0;
      if ($cmp1493) { __label__ = 485; break; } else { __label__ = 486; break; }
    case 485: 
      __label__ = 565; break;
    case 486: 
      var $871=$have;
      var $dec1497=(($871-1)|0);
      $have=$dec1497;
      var $872=$next;
      var $incdec_ptr1498=(($872+1)|0);
      $next=$incdec_ptr1498;
      var $873=HEAPU8[($872)];
      var $conv1499=(($873)&255);
      var $874=$bits;
      var $shl1500=$conv1499 << $874;
      var $875=$hold;
      var $add1501=(($875+$shl1500)|0);
      $hold=$add1501;
      var $876=$bits;
      var $add1502=(($876+8)|0);
      $bits=$add1502;
      __label__ = 487; break;
    case 487: 
      __label__ = 482; break;
    case 488: 
      __label__ = 489; break;
    case 489: 
      var $877=$hold;
      var $878=$state;
      var $extra1508=(($878+72)|0);
      var $879=HEAP32[(($extra1508)>>2)];
      var $shl1509=1 << $879;
      var $sub1510=(($shl1509-1)|0);
      var $and1511=$877 & $sub1510;
      var $880=$state;
      var $offset1512=(($880+68)|0);
      var $881=HEAP32[(($offset1512)>>2)];
      var $add1513=(($881+$and1511)|0);
      HEAP32[(($offset1512)>>2)]=$add1513;
      __label__ = 490; break;
    case 490: 
      var $882=$state;
      var $extra1515=(($882+72)|0);
      var $883=HEAPU32[(($extra1515)>>2)];
      var $884=$hold;
      var $shr1516=$884 >>> (($883)>>>0);
      $hold=$shr1516;
      var $885=$state;
      var $extra1517=(($885+72)|0);
      var $886=HEAP32[(($extra1517)>>2)];
      var $887=$bits;
      var $sub1518=(($887-$886)|0);
      $bits=$sub1518;
      __label__ = 491; break;
    case 491: 
      var $888=$state;
      var $extra1521=(($888+72)|0);
      var $889=HEAP32[(($extra1521)>>2)];
      var $890=$state;
      var $back1522=(($890+7108)|0);
      var $891=HEAP32[(($back1522)>>2)];
      var $add1523=(($891+$889)|0);
      HEAP32[(($back1522)>>2)]=$add1523;
      __label__ = 492; break;
    case 492: 
      var $892=$state;
      var $mode1525=(($892)|0);
      HEAP32[(($mode1525)>>2)]=24;
      __label__ = 493; break;
    case 493: 
      var $893=$left;
      var $cmp1527=(($893)|0)==0;
      if ($cmp1527) { __label__ = 494; break; } else { __label__ = 495; break; }
    case 494: 
      __label__ = 565; break;
    case 495: 
      var $894=$out;
      var $895=$left;
      var $sub1531=(($894-$895)|0);
      $copy=$sub1531;
      var $896=$state;
      var $offset1532=(($896+68)|0);
      var $897=HEAPU32[(($offset1532)>>2)];
      var $898=$copy;
      var $cmp1533=(($897)>>>0) > (($898)>>>0);
      if ($cmp1533) { __label__ = 496; break; } else { __label__ = 506; break; }
    case 496: 
      var $899=$state;
      var $offset1536=(($899+68)|0);
      var $900=HEAP32[(($offset1536)>>2)];
      var $901=$copy;
      var $sub1537=(($900-$901)|0);
      $copy=$sub1537;
      var $902=$copy;
      var $903=$state;
      var $whave=(($903+44)|0);
      var $904=HEAPU32[(($whave)>>2)];
      var $cmp1538=(($902)>>>0) > (($904)>>>0);
      if ($cmp1538) { __label__ = 497; break; } else { __label__ = 500; break; }
    case 497: 
      var $905=$state;
      var $sane=(($905+7104)|0);
      var $906=HEAP32[(($sane)>>2)];
      var $tobool1541=(($906)|0)!=0;
      if ($tobool1541) { __label__ = 498; break; } else { __label__ = 499; break; }
    case 498: 
      var $907=$strm_addr;
      var $msg1543=(($907+24)|0);
      HEAP32[(($msg1543)>>2)]=((STRING_TABLE.__str161298)|0);
      var $908=$state;
      var $mode1544=(($908)|0);
      HEAP32[(($mode1544)>>2)]=29;
      __label__ = 564; break;
    case 499: 
      __label__ = 500; break;
    case 500: 
      var $909=$copy;
      var $910=$state;
      var $wnext=(($910+48)|0);
      var $911=HEAPU32[(($wnext)>>2)];
      var $cmp1547=(($909)>>>0) > (($911)>>>0);
      if ($cmp1547) { __label__ = 501; break; } else { __label__ = 502; break; }
    case 501: 
      var $912=$state;
      var $wnext1550=(($912+48)|0);
      var $913=HEAP32[(($wnext1550)>>2)];
      var $914=$copy;
      var $sub1551=(($914-$913)|0);
      $copy=$sub1551;
      var $915=$state;
      var $window=(($915+52)|0);
      var $916=HEAP32[(($window)>>2)];
      var $917=$state;
      var $wsize=(($917+40)|0);
      var $918=HEAP32[(($wsize)>>2)];
      var $919=$copy;
      var $sub1552=(($918-$919)|0);
      var $add_ptr1553=(($916+$sub1552)|0);
      $from=$add_ptr1553;
      __label__ = 503; break;
    case 502: 
      var $920=$state;
      var $window1555=(($920+52)|0);
      var $921=HEAP32[(($window1555)>>2)];
      var $922=$state;
      var $wnext1556=(($922+48)|0);
      var $923=HEAP32[(($wnext1556)>>2)];
      var $924=$copy;
      var $sub1557=(($923-$924)|0);
      var $add_ptr1558=(($921+$sub1557)|0);
      $from=$add_ptr1558;
      __label__ = 503; break;
    case 503: 
      var $925=$copy;
      var $926=$state;
      var $length1560=(($926+64)|0);
      var $927=HEAPU32[(($length1560)>>2)];
      var $cmp1561=(($925)>>>0) > (($927)>>>0);
      if ($cmp1561) { __label__ = 504; break; } else { __label__ = 505; break; }
    case 504: 
      var $928=$state;
      var $length1564=(($928+64)|0);
      var $929=HEAP32[(($length1564)>>2)];
      $copy=$929;
      __label__ = 505; break;
    case 505: 
      __label__ = 507; break;
    case 506: 
      var $930=$put;
      var $931=$state;
      var $offset1567=(($931+68)|0);
      var $932=HEAP32[(($offset1567)>>2)];
      var $idx_neg=(((-$932))|0);
      var $add_ptr1568=(($930+$idx_neg)|0);
      $from=$add_ptr1568;
      var $933=$state;
      var $length1569=(($933+64)|0);
      var $934=HEAP32[(($length1569)>>2)];
      $copy=$934;
      __label__ = 507; break;
    case 507: 
      var $935=$copy;
      var $936=$left;
      var $cmp1571=(($935)>>>0) > (($936)>>>0);
      if ($cmp1571) { __label__ = 508; break; } else { __label__ = 509; break; }
    case 508: 
      var $937=$left;
      $copy=$937;
      __label__ = 509; break;
    case 509: 
      var $938=$copy;
      var $939=$left;
      var $sub1575=(($939-$938)|0);
      $left=$sub1575;
      var $940=$copy;
      var $941=$state;
      var $length1576=(($941+64)|0);
      var $942=HEAP32[(($length1576)>>2)];
      var $sub1577=(($942-$940)|0);
      HEAP32[(($length1576)>>2)]=$sub1577;
      __label__ = 510; break;
    case 510: 
      var $943=$from;
      var $incdec_ptr1579=(($943+1)|0);
      $from=$incdec_ptr1579;
      var $944=HEAP8[($943)];
      var $945=$put;
      var $incdec_ptr1580=(($945+1)|0);
      $put=$incdec_ptr1580;
      HEAP8[($945)]=$944;
      __label__ = 511; break;
    case 511: 
      var $946=$copy;
      var $dec1582=(($946-1)|0);
      $copy=$dec1582;
      var $tobool1583=(($dec1582)|0)!=0;
      if ($tobool1583) { __label__ = 510; break; } else { __label__ = 512; break; }
    case 512: 
      var $947=$state;
      var $length1585=(($947+64)|0);
      var $948=HEAP32[(($length1585)>>2)];
      var $cmp1586=(($948)|0)==0;
      if ($cmp1586) { __label__ = 513; break; } else { __label__ = 514; break; }
    case 513: 
      var $949=$state;
      var $mode1589=(($949)|0);
      HEAP32[(($mode1589)>>2)]=20;
      __label__ = 514; break;
    case 514: 
      __label__ = 564; break;
    case 515: 
      var $950=$left;
      var $cmp1592=(($950)|0)==0;
      if ($cmp1592) { __label__ = 516; break; } else { __label__ = 517; break; }
    case 516: 
      __label__ = 565; break;
    case 517: 
      var $951=$state;
      var $length1596=(($951+64)|0);
      var $952=HEAP32[(($length1596)>>2)];
      var $conv1597=(($952) & 255);
      var $953=$put;
      var $incdec_ptr1598=(($953+1)|0);
      $put=$incdec_ptr1598;
      HEAP8[($953)]=$conv1597;
      var $954=$left;
      var $dec1599=(($954-1)|0);
      $left=$dec1599;
      var $955=$state;
      var $mode1600=(($955)|0);
      HEAP32[(($mode1600)>>2)]=20;
      __label__ = 564; break;
    case 518: 
      var $956=$state;
      var $wrap1602=(($956+8)|0);
      var $957=HEAP32[(($wrap1602)>>2)];
      var $tobool1603=(($957)|0)!=0;
      if ($tobool1603) { __label__ = 519; break; } else { __label__ = 541; break; }
    case 519: 
      __label__ = 520; break;
    case 520: 
      __label__ = 521; break;
    case 521: 
      var $958=$bits;
      var $cmp1607=(($958)>>>0) < 32;
      if ($cmp1607) { __label__ = 522; break; } else { __label__ = 527; break; }
    case 522: 
      __label__ = 523; break;
    case 523: 
      var $959=$have;
      var $cmp1611=(($959)|0)==0;
      if ($cmp1611) { __label__ = 524; break; } else { __label__ = 525; break; }
    case 524: 
      __label__ = 565; break;
    case 525: 
      var $960=$have;
      var $dec1615=(($960-1)|0);
      $have=$dec1615;
      var $961=$next;
      var $incdec_ptr1616=(($961+1)|0);
      $next=$incdec_ptr1616;
      var $962=HEAPU8[($961)];
      var $conv1617=(($962)&255);
      var $963=$bits;
      var $shl1618=$conv1617 << $963;
      var $964=$hold;
      var $add1619=(($964+$shl1618)|0);
      $hold=$add1619;
      var $965=$bits;
      var $add1620=(($965+8)|0);
      $bits=$add1620;
      __label__ = 526; break;
    case 526: 
      __label__ = 521; break;
    case 527: 
      __label__ = 528; break;
    case 528: 
      var $966=$left;
      var $967=$out;
      var $sub1626=(($967-$966)|0);
      $out=$sub1626;
      var $968=$out;
      var $969=$strm_addr;
      var $total_out=(($969+20)|0);
      var $970=HEAP32[(($total_out)>>2)];
      var $add1627=(($970+$968)|0);
      HEAP32[(($total_out)>>2)]=$add1627;
      var $971=$out;
      var $972=$state;
      var $total=(($972+28)|0);
      var $973=HEAP32[(($total)>>2)];
      var $add1628=(($973+$971)|0);
      HEAP32[(($total)>>2)]=$add1628;
      var $974=$out;
      var $tobool1629=(($974)|0)!=0;
      if ($tobool1629) { __label__ = 529; break; } else { __label__ = 533; break; }
    case 529: 
      var $975=$state;
      var $flags1631=(($975+16)|0);
      var $976=HEAP32[(($flags1631)>>2)];
      var $tobool1632=(($976)|0)!=0;
      if ($tobool1632) { __label__ = 530; break; } else { __label__ = 531; break; }
    case 530: 
      var $977=$state;
      var $check1634=(($977+24)|0);
      var $978=HEAP32[(($check1634)>>2)];
      var $979=$put;
      var $980=$out;
      var $idx_neg1635=(((-$980))|0);
      var $add_ptr1636=(($979+$idx_neg1635)|0);
      var $981=$out;
      var $call1637=_crc32($978, $add_ptr1636, $981);
      var $cond1644 = $call1637;__label__ = 532; break;
    case 531: 
      var $982=$state;
      var $check1639=(($982+24)|0);
      var $983=HEAP32[(($check1639)>>2)];
      var $984=$put;
      var $985=$out;
      var $idx_neg1640=(((-$985))|0);
      var $add_ptr1641=(($984+$idx_neg1640)|0);
      var $986=$out;
      var $call1642=_adler32($983, $add_ptr1641, $986);
      var $cond1644 = $call1642;__label__ = 532; break;
    case 532: 
      var $cond1644;
      var $987=$state;
      var $check1645=(($987+24)|0);
      HEAP32[(($check1645)>>2)]=$cond1644;
      var $988=$strm_addr;
      var $adler1646=(($988+48)|0);
      HEAP32[(($adler1646)>>2)]=$cond1644;
      __label__ = 533; break;
    case 533: 
      var $989=$left;
      $out=$989;
      var $990=$state;
      var $flags1648=(($990+16)|0);
      var $991=HEAP32[(($flags1648)>>2)];
      var $tobool1649=(($991)|0)!=0;
      if ($tobool1649) { __label__ = 534; break; } else { __label__ = 535; break; }
    case 534: 
      var $992=$hold;
      var $cond1664 = $992;__label__ = 536; break;
    case 535: 
      var $993=$hold;
      var $shr1652=$993 >>> 24;
      var $and1653=$shr1652 & 255;
      var $994=$hold;
      var $shr1654=$994 >>> 8;
      var $and1655=$shr1654 & 65280;
      var $add1656=(($and1653+$and1655)|0);
      var $995=$hold;
      var $and1657=$995 & 65280;
      var $shl1658=$and1657 << 8;
      var $add1659=(($add1656+$shl1658)|0);
      var $996=$hold;
      var $and1660=$996 & 255;
      var $shl1661=$and1660 << 24;
      var $add1662=(($add1659+$shl1661)|0);
      var $cond1664 = $add1662;__label__ = 536; break;
    case 536: 
      var $cond1664;
      var $997=$state;
      var $check1665=(($997+24)|0);
      var $998=HEAP32[(($check1665)>>2)];
      var $cmp1666=(($cond1664)|0)!=(($998)|0);
      if ($cmp1666) { __label__ = 537; break; } else { __label__ = 538; break; }
    case 537: 
      var $999=$strm_addr;
      var $msg1669=(($999+24)|0);
      HEAP32[(($msg1669)>>2)]=((STRING_TABLE.__str171299)|0);
      var $1000=$state;
      var $mode1670=(($1000)|0);
      HEAP32[(($mode1670)>>2)]=29;
      __label__ = 564; break;
    case 538: 
      __label__ = 539; break;
    case 539: 
      $hold=0;
      $bits=0;
      __label__ = 540; break;
    case 540: 
      __label__ = 541; break;
    case 541: 
      var $1001=$state;
      var $mode1676=(($1001)|0);
      HEAP32[(($mode1676)>>2)]=27;
      __label__ = 542; break;
    case 542: 
      var $1002=$state;
      var $wrap1678=(($1002+8)|0);
      var $1003=HEAP32[(($wrap1678)>>2)];
      var $tobool1679=(($1003)|0)!=0;
      if ($tobool1679) { __label__ = 543; break; } else { __label__ = 558; break; }
    case 543: 
      var $1004=$state;
      var $flags1681=(($1004+16)|0);
      var $1005=HEAP32[(($flags1681)>>2)];
      var $tobool1682=(($1005)|0)!=0;
      if ($tobool1682) { __label__ = 544; break; } else { __label__ = 558; break; }
    case 544: 
      __label__ = 545; break;
    case 545: 
      __label__ = 546; break;
    case 546: 
      var $1006=$bits;
      var $cmp1686=(($1006)>>>0) < 32;
      if ($cmp1686) { __label__ = 547; break; } else { __label__ = 552; break; }
    case 547: 
      __label__ = 548; break;
    case 548: 
      var $1007=$have;
      var $cmp1690=(($1007)|0)==0;
      if ($cmp1690) { __label__ = 549; break; } else { __label__ = 550; break; }
    case 549: 
      __label__ = 565; break;
    case 550: 
      var $1008=$have;
      var $dec1694=(($1008-1)|0);
      $have=$dec1694;
      var $1009=$next;
      var $incdec_ptr1695=(($1009+1)|0);
      $next=$incdec_ptr1695;
      var $1010=HEAPU8[($1009)];
      var $conv1696=(($1010)&255);
      var $1011=$bits;
      var $shl1697=$conv1696 << $1011;
      var $1012=$hold;
      var $add1698=(($1012+$shl1697)|0);
      $hold=$add1698;
      var $1013=$bits;
      var $add1699=(($1013+8)|0);
      $bits=$add1699;
      __label__ = 551; break;
    case 551: 
      __label__ = 546; break;
    case 552: 
      __label__ = 553; break;
    case 553: 
      var $1014=$hold;
      var $1015=$state;
      var $total1705=(($1015+28)|0);
      var $1016=HEAP32[(($total1705)>>2)];
      var $cmp1706=(($1014)|0)!=(($1016)|0);
      if ($cmp1706) { __label__ = 554; break; } else { __label__ = 555; break; }
    case 554: 
      var $1017=$strm_addr;
      var $msg1709=(($1017+24)|0);
      HEAP32[(($msg1709)>>2)]=((STRING_TABLE.__str181300)|0);
      var $1018=$state;
      var $mode1710=(($1018)|0);
      HEAP32[(($mode1710)>>2)]=29;
      __label__ = 564; break;
    case 555: 
      __label__ = 556; break;
    case 556: 
      $hold=0;
      $bits=0;
      __label__ = 557; break;
    case 557: 
      __label__ = 558; break;
    case 558: 
      var $1019=$state;
      var $mode1716=(($1019)|0);
      HEAP32[(($mode1716)>>2)]=28;
      __label__ = 559; break;
    case 559: 
      $ret=1;
      __label__ = 565; break;
    case 560: 
      $ret=-3;
      __label__ = 565; break;
    case 561: 
      $retval=-4;
      __label__ = 589; break;
    case 562: 
      __label__ = 563; break;
    case 563: 
      $retval=-2;
      __label__ = 589; break;
    case 564: 
      __label__ = 12; break;
    case 565: 
      __label__ = 566; break;
    case 566: 
      var $1020=$put;
      var $1021=$strm_addr;
      var $next_out1723=(($1021+12)|0);
      HEAP32[(($next_out1723)>>2)]=$1020;
      var $1022=$left;
      var $1023=$strm_addr;
      var $avail_out1724=(($1023+16)|0);
      HEAP32[(($avail_out1724)>>2)]=$1022;
      var $1024=$next;
      var $1025=$strm_addr;
      var $next_in1725=(($1025)|0);
      HEAP32[(($next_in1725)>>2)]=$1024;
      var $1026=$have;
      var $1027=$strm_addr;
      var $avail_in1726=(($1027+4)|0);
      HEAP32[(($avail_in1726)>>2)]=$1026;
      var $1028=$hold;
      var $1029=$state;
      var $hold1727=(($1029+56)|0);
      HEAP32[(($hold1727)>>2)]=$1028;
      var $1030=$bits;
      var $1031=$state;
      var $bits1728=(($1031+60)|0);
      HEAP32[(($bits1728)>>2)]=$1030;
      __label__ = 567; break;
    case 567: 
      var $1032=$state;
      var $wsize1731=(($1032+40)|0);
      var $1033=HEAP32[(($wsize1731)>>2)];
      var $tobool1732=(($1033)|0)!=0;
      if ($tobool1732) { __label__ = 572; break; } else { __label__ = 568; break; }
    case 568: 
      var $1034=$out;
      var $1035=$strm_addr;
      var $avail_out1734=(($1035+16)|0);
      var $1036=HEAP32[(($avail_out1734)>>2)];
      var $cmp1735=(($1034)|0)!=(($1036)|0);
      if ($cmp1735) { __label__ = 569; break; } else { __label__ = 575; break; }
    case 569: 
      var $1037=$state;
      var $mode1738=(($1037)|0);
      var $1038=HEAPU32[(($mode1738)>>2)];
      var $cmp1739=(($1038)>>>0) < 29;
      if ($cmp1739) { __label__ = 570; break; } else { __label__ = 575; break; }
    case 570: 
      var $1039=$state;
      var $mode1742=(($1039)|0);
      var $1040=HEAPU32[(($mode1742)>>2)];
      var $cmp1743=(($1040)>>>0) < 26;
      if ($cmp1743) { __label__ = 572; break; } else { __label__ = 571; break; }
    case 571: 
      var $1041=$flush_addr;
      var $cmp1746=(($1041)|0)!=4;
      if ($cmp1746) { __label__ = 572; break; } else { __label__ = 575; break; }
    case 572: 
      var $1042=$strm_addr;
      var $1043=$out;
      var $call1749=_updatewindow($1042, $1043);
      var $tobool1750=(($call1749)|0)!=0;
      if ($tobool1750) { __label__ = 573; break; } else { __label__ = 574; break; }
    case 573: 
      var $1044=$state;
      var $mode1752=(($1044)|0);
      HEAP32[(($mode1752)>>2)]=30;
      $retval=-4;
      __label__ = 589; break;
    case 574: 
      __label__ = 575; break;
    case 575: 
      var $1045=$strm_addr;
      var $avail_in1755=(($1045+4)|0);
      var $1046=HEAP32[(($avail_in1755)>>2)];
      var $1047=$in;
      var $sub1756=(($1047-$1046)|0);
      $in=$sub1756;
      var $1048=$strm_addr;
      var $avail_out1757=(($1048+16)|0);
      var $1049=HEAP32[(($avail_out1757)>>2)];
      var $1050=$out;
      var $sub1758=(($1050-$1049)|0);
      $out=$sub1758;
      var $1051=$in;
      var $1052=$strm_addr;
      var $total_in=(($1052+8)|0);
      var $1053=HEAP32[(($total_in)>>2)];
      var $add1759=(($1053+$1051)|0);
      HEAP32[(($total_in)>>2)]=$add1759;
      var $1054=$out;
      var $1055=$strm_addr;
      var $total_out1760=(($1055+20)|0);
      var $1056=HEAP32[(($total_out1760)>>2)];
      var $add1761=(($1056+$1054)|0);
      HEAP32[(($total_out1760)>>2)]=$add1761;
      var $1057=$out;
      var $1058=$state;
      var $total1762=(($1058+28)|0);
      var $1059=HEAP32[(($total1762)>>2)];
      var $add1763=(($1059+$1057)|0);
      HEAP32[(($total1762)>>2)]=$add1763;
      var $1060=$state;
      var $wrap1764=(($1060+8)|0);
      var $1061=HEAP32[(($wrap1764)>>2)];
      var $tobool1765=(($1061)|0)!=0;
      if ($tobool1765) { __label__ = 576; break; } else { __label__ = 581; break; }
    case 576: 
      var $1062=$out;
      var $tobool1767=(($1062)|0)!=0;
      if ($tobool1767) { __label__ = 577; break; } else { __label__ = 581; break; }
    case 577: 
      var $1063=$state;
      var $flags1769=(($1063+16)|0);
      var $1064=HEAP32[(($flags1769)>>2)];
      var $tobool1770=(($1064)|0)!=0;
      if ($tobool1770) { __label__ = 578; break; } else { __label__ = 579; break; }
    case 578: 
      var $1065=$state;
      var $check1772=(($1065+24)|0);
      var $1066=HEAP32[(($check1772)>>2)];
      var $1067=$strm_addr;
      var $next_out1773=(($1067+12)|0);
      var $1068=HEAP32[(($next_out1773)>>2)];
      var $1069=$out;
      var $idx_neg1774=(((-$1069))|0);
      var $add_ptr1775=(($1068+$idx_neg1774)|0);
      var $1070=$out;
      var $call1776=_crc32($1066, $add_ptr1775, $1070);
      var $cond1784 = $call1776;__label__ = 580; break;
    case 579: 
      var $1071=$state;
      var $check1778=(($1071+24)|0);
      var $1072=HEAP32[(($check1778)>>2)];
      var $1073=$strm_addr;
      var $next_out1779=(($1073+12)|0);
      var $1074=HEAP32[(($next_out1779)>>2)];
      var $1075=$out;
      var $idx_neg1780=(((-$1075))|0);
      var $add_ptr1781=(($1074+$idx_neg1780)|0);
      var $1076=$out;
      var $call1782=_adler32($1072, $add_ptr1781, $1076);
      var $cond1784 = $call1782;__label__ = 580; break;
    case 580: 
      var $cond1784;
      var $1077=$state;
      var $check1785=(($1077+24)|0);
      HEAP32[(($check1785)>>2)]=$cond1784;
      var $1078=$strm_addr;
      var $adler1786=(($1078+48)|0);
      HEAP32[(($adler1786)>>2)]=$cond1784;
      __label__ = 581; break;
    case 581: 
      var $1079=$state;
      var $bits1788=(($1079+60)|0);
      var $1080=HEAP32[(($bits1788)>>2)];
      var $1081=$state;
      var $last1789=(($1081+4)|0);
      var $1082=HEAP32[(($last1789)>>2)];
      var $tobool1790=(($1082)|0)!=0;
      var $cond1791=$tobool1790 ? 64 : 0;
      var $add1792=(($1080+$cond1791)|0);
      var $1083=$state;
      var $mode1793=(($1083)|0);
      var $1084=HEAP32[(($mode1793)>>2)];
      var $cmp1794=(($1084)|0)==11;
      var $cond1796=$cmp1794 ? 128 : 0;
      var $add1797=(($add1792+$cond1796)|0);
      var $1085=$state;
      var $mode1798=(($1085)|0);
      var $1086=HEAP32[(($mode1798)>>2)];
      var $cmp1799=(($1086)|0)==19;
      if ($cmp1799) { var $1089 = 1;__label__ = 583; break; } else { __label__ = 582; break; }
    case 582: 
      var $1087=$state;
      var $mode1801=(($1087)|0);
      var $1088=HEAP32[(($mode1801)>>2)];
      var $cmp1802=(($1088)|0)==14;
      var $1089 = $cmp1802;__label__ = 583; break;
    case 583: 
      var $1089;
      var $cond1804=$1089 ? 256 : 0;
      var $add1805=(($add1797+$cond1804)|0);
      var $1090=$strm_addr;
      var $data_type=(($1090+44)|0);
      HEAP32[(($data_type)>>2)]=$add1805;
      var $1091=$in;
      var $cmp1806=(($1091)|0)==0;
      if ($cmp1806) { __label__ = 584; break; } else { __label__ = 585; break; }
    case 584: 
      var $1092=$out;
      var $cmp1809=(($1092)|0)==0;
      if ($cmp1809) { __label__ = 586; break; } else { __label__ = 585; break; }
    case 585: 
      var $1093=$flush_addr;
      var $cmp1812=(($1093)|0)==4;
      if ($cmp1812) { __label__ = 586; break; } else { __label__ = 588; break; }
    case 586: 
      var $1094=$ret;
      var $cmp1815=(($1094)|0)==0;
      if ($cmp1815) { __label__ = 587; break; } else { __label__ = 588; break; }
    case 587: 
      $ret=-5;
      __label__ = 588; break;
    case 588: 
      var $1095=$ret;
      $retval=$1095;
      __label__ = 589; break;
    case 589: 
      var $1096=$retval;
      STACKTOP = __stackBase__;
      return $1096;
    default: assert(0, "bad label: " + __label__);
  }
}
_inflate["X"]=1;

function _fixedtables1309($state) {
  ;
  var __label__;

  var $state_addr;
  $state_addr=$state;
  var $0=$state_addr;
  var $lencode=(($0+76)|0);
  HEAP32[(($lencode)>>2)]=((_fixedtables_lenfix1301)|0);
  var $1=$state_addr;
  var $lenbits=(($1+84)|0);
  HEAP32[(($lenbits)>>2)]=9;
  var $2=$state_addr;
  var $distcode=(($2+80)|0);
  HEAP32[(($distcode)>>2)]=((_fixedtables_distfix1302)|0);
  var $3=$state_addr;
  var $distbits=(($3+88)|0);
  HEAP32[(($distbits)>>2)]=5;
  ;
  return;
}


function _updatewindow($strm, $out) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $out_addr;
      var $state;
      var $copy;
      var $dist;
      $strm_addr=$strm;
      $out_addr=$out;
      var $0=$strm_addr;
      var $state1=(($0+28)|0);
      var $1=HEAP32[(($state1)>>2)];
      var $2=$1;
      $state=$2;
      var $3=$state;
      var $window=(($3+52)|0);
      var $4=HEAP32[(($window)>>2)];
      var $cmp=(($4)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 5; break; }
    case 2: 
      var $5=$strm_addr;
      var $zalloc=(($5+32)|0);
      var $6=HEAP32[(($zalloc)>>2)];
      var $7=$strm_addr;
      var $opaque=(($7+40)|0);
      var $8=HEAP32[(($opaque)>>2)];
      var $9=$state;
      var $wbits=(($9+36)|0);
      var $10=HEAP32[(($wbits)>>2)];
      var $shl=1 << $10;
      var $call=FUNCTION_TABLE[$6]($8, $shl, 1);
      var $11=$state;
      var $window2=(($11+52)|0);
      HEAP32[(($window2)>>2)]=$call;
      var $12=$state;
      var $window3=(($12+52)|0);
      var $13=HEAP32[(($window3)>>2)];
      var $cmp4=(($13)|0)==0;
      if ($cmp4) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=1;
      __label__ = 20; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $14=$state;
      var $wsize=(($14+40)|0);
      var $15=HEAP32[(($wsize)>>2)];
      var $cmp7=(($15)|0)==0;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $16=$state;
      var $wbits9=(($16+36)|0);
      var $17=HEAP32[(($wbits9)>>2)];
      var $shl10=1 << $17;
      var $18=$state;
      var $wsize11=(($18+40)|0);
      HEAP32[(($wsize11)>>2)]=$shl10;
      var $19=$state;
      var $wnext=(($19+48)|0);
      HEAP32[(($wnext)>>2)]=0;
      var $20=$state;
      var $whave=(($20+44)|0);
      HEAP32[(($whave)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      var $21=$out_addr;
      var $22=$strm_addr;
      var $avail_out=(($22+16)|0);
      var $23=HEAP32[(($avail_out)>>2)];
      var $sub=(($21-$23)|0);
      $copy=$sub;
      var $24=$copy;
      var $25=$state;
      var $wsize13=(($25+40)|0);
      var $26=HEAPU32[(($wsize13)>>2)];
      var $cmp14=(($24)>>>0) >= (($26)>>>0);
      if ($cmp14) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $27=$state;
      var $window16=(($27+52)|0);
      var $28=HEAP32[(($window16)>>2)];
      var $29=$strm_addr;
      var $next_out=(($29+12)|0);
      var $30=HEAP32[(($next_out)>>2)];
      var $31=$state;
      var $wsize17=(($31+40)|0);
      var $32=HEAP32[(($wsize17)>>2)];
      var $idx_neg=(((-$32))|0);
      var $add_ptr=(($30+$idx_neg)|0);
      var $33=$state;
      var $wsize18=(($33+40)|0);
      var $34=HEAP32[(($wsize18)>>2)];
      _zmemcpy($28, $add_ptr, $34);
      var $35=$state;
      var $wnext19=(($35+48)|0);
      HEAP32[(($wnext19)>>2)]=0;
      var $36=$state;
      var $wsize20=(($36+40)|0);
      var $37=HEAP32[(($wsize20)>>2)];
      var $38=$state;
      var $whave21=(($38+44)|0);
      HEAP32[(($whave21)>>2)]=$37;
      __label__ = 19; break;
    case 9: 
      var $39=$state;
      var $wsize22=(($39+40)|0);
      var $40=HEAP32[(($wsize22)>>2)];
      var $41=$state;
      var $wnext23=(($41+48)|0);
      var $42=HEAP32[(($wnext23)>>2)];
      var $sub24=(($40-$42)|0);
      $dist=$sub24;
      var $43=$dist;
      var $44=$copy;
      var $cmp25=(($43)>>>0) > (($44)>>>0);
      if ($cmp25) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $45=$copy;
      $dist=$45;
      __label__ = 11; break;
    case 11: 
      var $46=$state;
      var $window28=(($46+52)|0);
      var $47=HEAP32[(($window28)>>2)];
      var $48=$state;
      var $wnext29=(($48+48)|0);
      var $49=HEAP32[(($wnext29)>>2)];
      var $add_ptr30=(($47+$49)|0);
      var $50=$strm_addr;
      var $next_out31=(($50+12)|0);
      var $51=HEAP32[(($next_out31)>>2)];
      var $52=$copy;
      var $idx_neg32=(((-$52))|0);
      var $add_ptr33=(($51+$idx_neg32)|0);
      var $53=$dist;
      _zmemcpy($add_ptr30, $add_ptr33, $53);
      var $54=$dist;
      var $55=$copy;
      var $sub34=(($55-$54)|0);
      $copy=$sub34;
      var $56=$copy;
      var $tobool=(($56)|0)!=0;
      if ($tobool) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $57=$state;
      var $window36=(($57+52)|0);
      var $58=HEAP32[(($window36)>>2)];
      var $59=$strm_addr;
      var $next_out37=(($59+12)|0);
      var $60=HEAP32[(($next_out37)>>2)];
      var $61=$copy;
      var $idx_neg38=(((-$61))|0);
      var $add_ptr39=(($60+$idx_neg38)|0);
      var $62=$copy;
      _zmemcpy($58, $add_ptr39, $62);
      var $63=$copy;
      var $64=$state;
      var $wnext40=(($64+48)|0);
      HEAP32[(($wnext40)>>2)]=$63;
      var $65=$state;
      var $wsize41=(($65+40)|0);
      var $66=HEAP32[(($wsize41)>>2)];
      var $67=$state;
      var $whave42=(($67+44)|0);
      HEAP32[(($whave42)>>2)]=$66;
      __label__ = 18; break;
    case 13: 
      var $68=$dist;
      var $69=$state;
      var $wnext44=(($69+48)|0);
      var $70=HEAP32[(($wnext44)>>2)];
      var $add=(($70+$68)|0);
      HEAP32[(($wnext44)>>2)]=$add;
      var $71=$state;
      var $wnext45=(($71+48)|0);
      var $72=HEAP32[(($wnext45)>>2)];
      var $73=$state;
      var $wsize46=(($73+40)|0);
      var $74=HEAP32[(($wsize46)>>2)];
      var $cmp47=(($72)|0)==(($74)|0);
      if ($cmp47) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $75=$state;
      var $wnext49=(($75+48)|0);
      HEAP32[(($wnext49)>>2)]=0;
      __label__ = 15; break;
    case 15: 
      var $76=$state;
      var $whave51=(($76+44)|0);
      var $77=HEAPU32[(($whave51)>>2)];
      var $78=$state;
      var $wsize52=(($78+40)|0);
      var $79=HEAPU32[(($wsize52)>>2)];
      var $cmp53=(($77)>>>0) < (($79)>>>0);
      if ($cmp53) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $80=$dist;
      var $81=$state;
      var $whave55=(($81+44)|0);
      var $82=HEAP32[(($whave55)>>2)];
      var $add56=(($82+$80)|0);
      HEAP32[(($whave55)>>2)]=$add56;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      $retval=0;
      __label__ = 20; break;
    case 20: 
      var $83=$retval;
      ;
      return $83;
    default: assert(0, "bad label: " + __label__);
  }
}
_updatewindow["X"]=1;

function _inflateEnd($strm) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $strm_addr;
      var $state;
      $strm_addr=$strm;
      var $0=$strm_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 2; break; }
    case 2: 
      var $1=$strm_addr;
      var $state1=(($1+28)|0);
      var $2=HEAP32[(($state1)>>2)];
      var $cmp2=(($2)|0)==0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$strm_addr;
      var $zfree=(($3+36)|0);
      var $4=HEAP32[(($zfree)>>2)];
      var $cmp4=(($4)|0)==0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=-2;
      __label__ = 8; break;
    case 5: 
      var $5=$strm_addr;
      var $state5=(($5+28)|0);
      var $6=HEAP32[(($state5)>>2)];
      var $7=$6;
      $state=$7;
      var $8=$state;
      var $window=(($8+52)|0);
      var $9=HEAP32[(($window)>>2)];
      var $cmp6=(($9)|0)!=0;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$strm_addr;
      var $zfree8=(($10+36)|0);
      var $11=HEAP32[(($zfree8)>>2)];
      var $12=$strm_addr;
      var $opaque=(($12+40)|0);
      var $13=HEAP32[(($opaque)>>2)];
      var $14=$state;
      var $window9=(($14+52)|0);
      var $15=HEAP32[(($window9)>>2)];
      FUNCTION_TABLE[$11]($13, $15);
      __label__ = 7; break;
    case 7: 
      var $16=$strm_addr;
      var $zfree11=(($16+36)|0);
      var $17=HEAP32[(($zfree11)>>2)];
      var $18=$strm_addr;
      var $opaque12=(($18+40)|0);
      var $19=HEAP32[(($opaque12)>>2)];
      var $20=$strm_addr;
      var $state13=(($20+28)|0);
      var $21=HEAP32[(($state13)>>2)];
      var $22=$21;
      FUNCTION_TABLE[$17]($19, $22);
      var $23=$strm_addr;
      var $state14=(($23+28)|0);
      HEAP32[(($state14)>>2)]=0;
      $retval=0;
      __label__ = 8; break;
    case 8: 
      var $24=$retval;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}
_inflateEnd["X"]=1;

function _tr_static_init() {
  ;
  var __label__;

  ;
  return;
}


function _init_block($s) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $n;
      $s_addr=$s;
      $n=0;
      __label__ = 2; break;
    case 2: 
      var $0=$n;
      var $cmp=(($0)|0) < 286;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $1=$n;
      var $2=$s_addr;
      var $dyn_ltree=(($2+148)|0);
      var $arrayidx=(($dyn_ltree+($1<<2))|0);
      var $fc=(($arrayidx)|0);
      var $freq=$fc;
      HEAP16[(($freq)>>1)]=0;
      __label__ = 4; break;
    case 4: 
      var $3=$n;
      var $inc=(($3+1)|0);
      $n=$inc;
      __label__ = 2; break;
    case 5: 
      $n=0;
      __label__ = 6; break;
    case 6: 
      var $4=$n;
      var $cmp2=(($4)|0) < 30;
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $5=$n;
      var $6=$s_addr;
      var $dyn_dtree=(($6+2440)|0);
      var $arrayidx4=(($dyn_dtree+($5<<2))|0);
      var $fc5=(($arrayidx4)|0);
      var $freq6=$fc5;
      HEAP16[(($freq6)>>1)]=0;
      __label__ = 8; break;
    case 8: 
      var $7=$n;
      var $inc8=(($7+1)|0);
      $n=$inc8;
      __label__ = 6; break;
    case 9: 
      $n=0;
      __label__ = 10; break;
    case 10: 
      var $8=$n;
      var $cmp11=(($8)|0) < 19;
      if ($cmp11) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $9=$n;
      var $10=$s_addr;
      var $bl_tree=(($10+2684)|0);
      var $arrayidx13=(($bl_tree+($9<<2))|0);
      var $fc14=(($arrayidx13)|0);
      var $freq15=$fc14;
      HEAP16[(($freq15)>>1)]=0;
      __label__ = 12; break;
    case 12: 
      var $11=$n;
      var $inc17=(($11+1)|0);
      $n=$inc17;
      __label__ = 10; break;
    case 13: 
      var $12=$s_addr;
      var $dyn_ltree19=(($12+148)|0);
      var $arrayidx20=(($dyn_ltree19+1024)|0);
      var $fc21=(($arrayidx20)|0);
      var $freq22=$fc21;
      HEAP16[(($freq22)>>1)]=1;
      var $13=$s_addr;
      var $static_len=(($13+5804)|0);
      HEAP32[(($static_len)>>2)]=0;
      var $14=$s_addr;
      var $opt_len=(($14+5800)|0);
      HEAP32[(($opt_len)>>2)]=0;
      var $15=$s_addr;
      var $matches=(($15+5808)|0);
      HEAP32[(($matches)>>2)]=0;
      var $16=$s_addr;
      var $last_lit=(($16+5792)|0);
      HEAP32[(($last_lit)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_init_block["X"]=1;

function _inflate_table($type, $lens, $codes, $table, $bits, $work) {
  var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $type_addr;
      var $lens_addr;
      var $codes_addr;
      var $table_addr;
      var $bits_addr;
      var $work_addr;
      var $len;
      var $sym;
      var $min;
      var $max;
      var $root;
      var $curr;
      var $drop;
      var $left;
      var $used;
      var $huff;
      var $incr;
      var $fill;
      var $low;
      var $mask;
      var $here=__stackBase__;
      var $next;
      var $base;
      var $extra;
      var $end;
      var $count=__stackBase__+4;
      var $offs=__stackBase__+36;
      $type_addr=$type;
      $lens_addr=$lens;
      $codes_addr=$codes;
      $table_addr=$table;
      $bits_addr=$bits;
      $work_addr=$work;
      $len=0;
      __label__ = 2; break;
    case 2: 
      var $0=$len;
      var $cmp=(($0)>>>0) <= 15;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $1=$len;
      var $arrayidx=(($count+($1<<1))|0);
      HEAP16[(($arrayidx)>>1)]=0;
      __label__ = 4; break;
    case 4: 
      var $2=$len;
      var $inc=(($2+1)|0);
      $len=$inc;
      __label__ = 2; break;
    case 5: 
      $sym=0;
      __label__ = 6; break;
    case 6: 
      var $3=$sym;
      var $4=$codes_addr;
      var $cmp2=(($3)>>>0) < (($4)>>>0);
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $5=$sym;
      var $6=$lens_addr;
      var $arrayidx4=(($6+($5<<1))|0);
      var $7=HEAPU16[(($arrayidx4)>>1)];
      var $idxprom=(($7)&65535);
      var $arrayidx5=(($count+($idxprom<<1))|0);
      var $8=HEAP16[(($arrayidx5)>>1)];
      var $inc6=(($8+1)&65535);
      HEAP16[(($arrayidx5)>>1)]=$inc6;
      __label__ = 8; break;
    case 8: 
      var $9=$sym;
      var $inc8=(($9+1)|0);
      $sym=$inc8;
      __label__ = 6; break;
    case 9: 
      var $10=$bits_addr;
      var $11=HEAP32[(($10)>>2)];
      $root=$11;
      $max=15;
      __label__ = 10; break;
    case 10: 
      var $12=$max;
      var $cmp11=(($12)>>>0) >= 1;
      if ($cmp11) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $13=$max;
      var $arrayidx13=(($count+($13<<1))|0);
      var $14=HEAPU16[(($arrayidx13)>>1)];
      var $conv=(($14)&65535);
      var $cmp14=(($conv)|0)!=0;
      if ($cmp14) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 15; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $15=$max;
      var $dec=(($15-1)|0);
      $max=$dec;
      __label__ = 10; break;
    case 15: 
      var $16=$root;
      var $17=$max;
      var $cmp18=(($16)>>>0) > (($17)>>>0);
      if ($cmp18) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $18=$max;
      $root=$18;
      __label__ = 17; break;
    case 17: 
      var $19=$max;
      var $cmp22=(($19)|0)==0;
      if ($cmp22) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $op=(($here)|0);
      HEAP8[($op)]=64;
      var $bits25=(($here+1)|0);
      HEAP8[($bits25)]=1;
      var $val=(($here+2)|0);
      HEAP16[(($val)>>1)]=0;
      var $20=$table_addr;
      var $21=HEAP32[(($20)>>2)];
      var $incdec_ptr=(($21+4)|0);
      HEAP32[(($20)>>2)]=$incdec_ptr;
      var $22=$21;
      var $23=$here;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($22)>>1)]=HEAP16[(($23)>>1)];HEAP16[(($22+2)>>1)]=HEAP16[(($23+2)>>1)];
      var $24=$table_addr;
      var $25=HEAP32[(($24)>>2)];
      var $incdec_ptr26=(($25+4)|0);
      HEAP32[(($24)>>2)]=$incdec_ptr26;
      var $26=$25;
      var $27=$here;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($26)>>1)]=HEAP16[(($27)>>1)];HEAP16[(($26+2)>>1)]=HEAP16[(($27+2)>>1)];
      var $28=$bits_addr;
      HEAP32[(($28)>>2)]=1;
      $retval=0;
      __label__ = 95; break;
    case 19: 
      $min=1;
      __label__ = 20; break;
    case 20: 
      var $29=$min;
      var $30=$max;
      var $cmp29=(($29)>>>0) < (($30)>>>0);
      if ($cmp29) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $31=$min;
      var $arrayidx32=(($count+($31<<1))|0);
      var $32=HEAPU16[(($arrayidx32)>>1)];
      var $conv33=(($32)&65535);
      var $cmp34=(($conv33)|0)!=0;
      if ($cmp34) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 25; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $33=$min;
      var $inc39=(($33+1)|0);
      $min=$inc39;
      __label__ = 20; break;
    case 25: 
      var $34=$root;
      var $35=$min;
      var $cmp41=(($34)>>>0) < (($35)>>>0);
      if ($cmp41) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $36=$min;
      $root=$36;
      __label__ = 27; break;
    case 27: 
      $left=1;
      $len=1;
      __label__ = 28; break;
    case 28: 
      var $37=$len;
      var $cmp46=(($37)>>>0) <= 15;
      if ($cmp46) { __label__ = 29; break; } else { __label__ = 33; break; }
    case 29: 
      var $38=$left;
      var $shl=$38 << 1;
      $left=$shl;
      var $39=$len;
      var $arrayidx49=(($count+($39<<1))|0);
      var $40=HEAPU16[(($arrayidx49)>>1)];
      var $conv50=(($40)&65535);
      var $41=$left;
      var $sub=(($41-$conv50)|0);
      $left=$sub;
      var $42=$left;
      var $cmp51=(($42)|0) < 0;
      if ($cmp51) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      $retval=-1;
      __label__ = 95; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      var $43=$len;
      var $inc56=(($43+1)|0);
      $len=$inc56;
      __label__ = 28; break;
    case 33: 
      var $44=$left;
      var $cmp58=(($44)|0) > 0;
      if ($cmp58) { __label__ = 34; break; } else { __label__ = 37; break; }
    case 34: 
      var $45=$type_addr;
      var $cmp60=(($45)|0)==0;
      if ($cmp60) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $46=$max;
      var $cmp62=(($46)|0)!=1;
      if ($cmp62) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      $retval=-1;
      __label__ = 95; break;
    case 37: 
      var $arrayidx66=(($offs+2)|0);
      HEAP16[(($arrayidx66)>>1)]=0;
      $len=1;
      __label__ = 38; break;
    case 38: 
      var $47=$len;
      var $cmp68=(($47)>>>0) < 15;
      if ($cmp68) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 39: 
      var $48=$len;
      var $arrayidx71=(($offs+($48<<1))|0);
      var $49=HEAPU16[(($arrayidx71)>>1)];
      var $conv72=(($49)&65535);
      var $50=$len;
      var $arrayidx73=(($count+($50<<1))|0);
      var $51=HEAPU16[(($arrayidx73)>>1)];
      var $conv74=(($51)&65535);
      var $add=(($conv72+$conv74)|0);
      var $conv75=(($add) & 65535);
      var $52=$len;
      var $add76=(($52+1)|0);
      var $arrayidx77=(($offs+($add76<<1))|0);
      HEAP16[(($arrayidx77)>>1)]=$conv75;
      __label__ = 40; break;
    case 40: 
      var $53=$len;
      var $inc79=(($53+1)|0);
      $len=$inc79;
      __label__ = 38; break;
    case 41: 
      $sym=0;
      __label__ = 42; break;
    case 42: 
      var $54=$sym;
      var $55=$codes_addr;
      var $cmp82=(($54)>>>0) < (($55)>>>0);
      if ($cmp82) { __label__ = 43; break; } else { __label__ = 47; break; }
    case 43: 
      var $56=$sym;
      var $57=$lens_addr;
      var $arrayidx85=(($57+($56<<1))|0);
      var $58=HEAPU16[(($arrayidx85)>>1)];
      var $conv86=(($58)&65535);
      var $cmp87=(($conv86)|0)!=0;
      if ($cmp87) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $59=$sym;
      var $conv90=(($59) & 65535);
      var $60=$sym;
      var $61=$lens_addr;
      var $arrayidx91=(($61+($60<<1))|0);
      var $62=HEAPU16[(($arrayidx91)>>1)];
      var $idxprom92=(($62)&65535);
      var $arrayidx93=(($offs+($idxprom92<<1))|0);
      var $63=HEAPU16[(($arrayidx93)>>1)];
      var $inc94=(($63+1)&65535);
      HEAP16[(($arrayidx93)>>1)]=$inc94;
      var $idxprom95=(($63)&65535);
      var $64=$work_addr;
      var $arrayidx96=(($64+($idxprom95<<1))|0);
      HEAP16[(($arrayidx96)>>1)]=$conv90;
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      var $65=$sym;
      var $inc99=(($65+1)|0);
      $sym=$inc99;
      __label__ = 42; break;
    case 47: 
      var $66=$type_addr;
      if ((($66)|0) == 0) {
        __label__ = 48; break;
      }
      else if ((($66)|0) == 1) {
        __label__ = 49; break;
      }
      else {
      __label__ = 50; break;
      }
      
    case 48: 
      var $67=$work_addr;
      $extra=$67;
      $base=$67;
      $end=19;
      __label__ = 51; break;
    case 49: 
      $base=((_inflate_table_lbase)|0);
      var $68=$base;
      var $add_ptr=(($68-514)|0);
      $base=$add_ptr;
      $extra=((_inflate_table_lext)|0);
      var $69=$extra;
      var $add_ptr102=(($69-514)|0);
      $extra=$add_ptr102;
      $end=256;
      __label__ = 51; break;
    case 50: 
      $base=((_inflate_table_dbase)|0);
      $extra=((_inflate_table_dext)|0);
      $end=-1;
      __label__ = 51; break;
    case 51: 
      $huff=0;
      $sym=0;
      var $70=$min;
      $len=$70;
      var $71=$table_addr;
      var $72=HEAP32[(($71)>>2)];
      $next=$72;
      var $73=$root;
      $curr=$73;
      $drop=0;
      $low=-1;
      var $74=$root;
      var $shl103=1 << $74;
      $used=$shl103;
      var $75=$used;
      var $sub104=(($75-1)|0);
      $mask=$sub104;
      var $76=$type_addr;
      var $cmp105=(($76)|0)==1;
      if ($cmp105) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $77=$used;
      var $cmp108=(($77)>>>0) >= 852;
      if ($cmp108) { __label__ = 55; break; } else { __label__ = 53; break; }
    case 53: 
      var $78=$type_addr;
      var $cmp111=(($78)|0)==2;
      if ($cmp111) { __label__ = 54; break; } else { __label__ = 56; break; }
    case 54: 
      var $79=$used;
      var $cmp114=(($79)>>>0) >= 592;
      if ($cmp114) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      $retval=1;
      __label__ = 95; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $80=$len;
      var $81=$drop;
      var $sub119=(($80-$81)|0);
      var $conv120=(($sub119) & 255);
      var $bits121=(($here+1)|0);
      HEAP8[($bits121)]=$conv120;
      var $82=$sym;
      var $83=$work_addr;
      var $arrayidx122=(($83+($82<<1))|0);
      var $84=HEAPU16[(($arrayidx122)>>1)];
      var $conv123=(($84)&65535);
      var $85=$end;
      var $cmp124=(($conv123)|0) < (($85)|0);
      if ($cmp124) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $op127=(($here)|0);
      HEAP8[($op127)]=0;
      var $86=$sym;
      var $87=$work_addr;
      var $arrayidx128=(($87+($86<<1))|0);
      var $88=HEAP16[(($arrayidx128)>>1)];
      var $val129=(($here+2)|0);
      HEAP16[(($val129)>>1)]=$88;
      __label__ = 63; break;
    case 59: 
      var $89=$sym;
      var $90=$work_addr;
      var $arrayidx130=(($90+($89<<1))|0);
      var $91=HEAPU16[(($arrayidx130)>>1)];
      var $conv131=(($91)&65535);
      var $92=$end;
      var $cmp132=(($conv131)|0) > (($92)|0);
      if ($cmp132) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $93=$sym;
      var $94=$work_addr;
      var $arrayidx135=(($94+($93<<1))|0);
      var $95=HEAPU16[(($arrayidx135)>>1)];
      var $idxprom136=(($95)&65535);
      var $96=$extra;
      var $arrayidx137=(($96+($idxprom136<<1))|0);
      var $97=HEAP16[(($arrayidx137)>>1)];
      var $conv138=(($97) & 255);
      var $op139=(($here)|0);
      HEAP8[($op139)]=$conv138;
      var $98=$sym;
      var $99=$work_addr;
      var $arrayidx140=(($99+($98<<1))|0);
      var $100=HEAPU16[(($arrayidx140)>>1)];
      var $idxprom141=(($100)&65535);
      var $101=$base;
      var $arrayidx142=(($101+($idxprom141<<1))|0);
      var $102=HEAP16[(($arrayidx142)>>1)];
      var $val143=(($here+2)|0);
      HEAP16[(($val143)>>1)]=$102;
      __label__ = 62; break;
    case 61: 
      var $op145=(($here)|0);
      HEAP8[($op145)]=96;
      var $val146=(($here+2)|0);
      HEAP16[(($val146)>>1)]=0;
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $103=$len;
      var $104=$drop;
      var $sub149=(($103-$104)|0);
      var $shl150=1 << $sub149;
      $incr=$shl150;
      var $105=$curr;
      var $shl151=1 << $105;
      $fill=$shl151;
      var $106=$fill;
      $min=$106;
      __label__ = 64; break;
    case 64: 
      var $107=$incr;
      var $108=$fill;
      var $sub152=(($108-$107)|0);
      $fill=$sub152;
      var $109=$huff;
      var $110=$drop;
      var $shr=$109 >>> (($110)>>>0);
      var $111=$fill;
      var $add153=(($shr+$111)|0);
      var $112=$next;
      var $arrayidx154=(($112+($add153<<2))|0);
      var $113=$arrayidx154;
      var $114=$here;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($113)>>1)]=HEAP16[(($114)>>1)];HEAP16[(($113+2)>>1)]=HEAP16[(($114+2)>>1)];
      __label__ = 65; break;
    case 65: 
      var $115=$fill;
      var $cmp155=(($115)|0)!=0;
      if ($cmp155) { __label__ = 64; break; } else { __label__ = 66; break; }
    case 66: 
      var $116=$len;
      var $sub157=(($116-1)|0);
      var $shl158=1 << $sub157;
      $incr=$shl158;
      __label__ = 67; break;
    case 67: 
      var $117=$huff;
      var $118=$incr;
      var $and=$117 & $118;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $119=$incr;
      var $shr159=$119 >>> 1;
      $incr=$shr159;
      __label__ = 67; break;
    case 69: 
      var $120=$incr;
      var $cmp160=(($120)|0)!=0;
      if ($cmp160) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $121=$incr;
      var $sub163=(($121-1)|0);
      var $122=$huff;
      var $and164=$122 & $sub163;
      $huff=$and164;
      var $123=$incr;
      var $124=$huff;
      var $add165=(($124+$123)|0);
      $huff=$add165;
      __label__ = 72; break;
    case 71: 
      $huff=0;
      __label__ = 72; break;
    case 72: 
      var $125=$sym;
      var $inc168=(($125+1)|0);
      $sym=$inc168;
      var $126=$len;
      var $arrayidx169=(($count+($126<<1))|0);
      var $127=HEAP16[(($arrayidx169)>>1)];
      var $dec170=(($127-1)&65535);
      HEAP16[(($arrayidx169)>>1)]=$dec170;
      var $conv171=(($dec170)&65535);
      var $cmp172=(($conv171)|0)==0;
      if ($cmp172) { __label__ = 73; break; } else { __label__ = 76; break; }
    case 73: 
      var $128=$len;
      var $129=$max;
      var $cmp175=(($128)|0)==(($129)|0);
      if ($cmp175) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: 
      __label__ = 92; break;
    case 75: 
      var $130=$sym;
      var $131=$work_addr;
      var $arrayidx179=(($131+($130<<1))|0);
      var $132=HEAPU16[(($arrayidx179)>>1)];
      var $idxprom180=(($132)&65535);
      var $133=$lens_addr;
      var $arrayidx181=(($133+($idxprom180<<1))|0);
      var $134=HEAPU16[(($arrayidx181)>>1)];
      var $conv182=(($134)&65535);
      $len=$conv182;
      __label__ = 76; break;
    case 76: 
      var $135=$len;
      var $136=$root;
      var $cmp184=(($135)>>>0) > (($136)>>>0);
      if ($cmp184) { __label__ = 77; break; } else { __label__ = 91; break; }
    case 77: 
      var $137=$huff;
      var $138=$mask;
      var $and187=$137 & $138;
      var $139=$low;
      var $cmp188=(($and187)|0)!=(($139)|0);
      if ($cmp188) { __label__ = 78; break; } else { __label__ = 91; break; }
    case 78: 
      var $140=$drop;
      var $cmp191=(($140)|0)==0;
      if ($cmp191) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $141=$root;
      $drop=$141;
      __label__ = 80; break;
    case 80: 
      var $142=$min;
      var $143=$next;
      var $add_ptr195=(($143+($142<<2))|0);
      $next=$add_ptr195;
      var $144=$len;
      var $145=$drop;
      var $sub196=(($144-$145)|0);
      $curr=$sub196;
      var $146=$curr;
      var $shl197=1 << $146;
      $left=$shl197;
      __label__ = 81; break;
    case 81: 
      var $147=$curr;
      var $148=$drop;
      var $add199=(($147+$148)|0);
      var $149=$max;
      var $cmp200=(($add199)>>>0) < (($149)>>>0);
      if ($cmp200) { __label__ = 82; break; } else { __label__ = 85; break; }
    case 82: 
      var $150=$curr;
      var $151=$drop;
      var $add203=(($150+$151)|0);
      var $arrayidx204=(($count+($add203<<1))|0);
      var $152=HEAPU16[(($arrayidx204)>>1)];
      var $conv205=(($152)&65535);
      var $153=$left;
      var $sub206=(($153-$conv205)|0);
      $left=$sub206;
      var $154=$left;
      var $cmp207=(($154)|0) <= 0;
      if ($cmp207) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      __label__ = 85; break;
    case 84: 
      var $155=$curr;
      var $inc211=(($155+1)|0);
      $curr=$inc211;
      var $156=$left;
      var $shl212=$156 << 1;
      $left=$shl212;
      __label__ = 81; break;
    case 85: 
      var $157=$curr;
      var $shl214=1 << $157;
      var $158=$used;
      var $add215=(($158+$shl214)|0);
      $used=$add215;
      var $159=$type_addr;
      var $cmp216=(($159)|0)==1;
      if ($cmp216) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $160=$used;
      var $cmp219=(($160)>>>0) >= 852;
      if ($cmp219) { __label__ = 89; break; } else { __label__ = 87; break; }
    case 87: 
      var $161=$type_addr;
      var $cmp222=(($161)|0)==2;
      if ($cmp222) { __label__ = 88; break; } else { __label__ = 90; break; }
    case 88: 
      var $162=$used;
      var $cmp225=(($162)>>>0) >= 592;
      if ($cmp225) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: 
      $retval=1;
      __label__ = 95; break;
    case 90: 
      var $163=$huff;
      var $164=$mask;
      var $and229=$163 & $164;
      $low=$and229;
      var $165=$curr;
      var $conv230=(($165) & 255);
      var $166=$low;
      var $167=$table_addr;
      var $168=HEAP32[(($167)>>2)];
      var $arrayidx231=(($168+($166<<2))|0);
      var $op232=(($arrayidx231)|0);
      HEAP8[($op232)]=$conv230;
      var $169=$root;
      var $conv233=(($169) & 255);
      var $170=$low;
      var $171=$table_addr;
      var $172=HEAP32[(($171)>>2)];
      var $arrayidx234=(($172+($170<<2))|0);
      var $bits235=(($arrayidx234+1)|0);
      HEAP8[($bits235)]=$conv233;
      var $173=$next;
      var $174=$table_addr;
      var $175=HEAP32[(($174)>>2)];
      var $sub_ptr_lhs_cast=$173;
      var $sub_ptr_rhs_cast=$175;
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0);
      var $sub_ptr_div=(((($sub_ptr_sub)|0)/4)&-1);
      var $conv236=(($sub_ptr_div) & 65535);
      var $176=$low;
      var $177=$table_addr;
      var $178=HEAP32[(($177)>>2)];
      var $arrayidx237=(($178+($176<<2))|0);
      var $val238=(($arrayidx237+2)|0);
      HEAP16[(($val238)>>1)]=$conv236;
      __label__ = 91; break;
    case 91: 
      __label__ = 57; break;
    case 92: 
      var $179=$huff;
      var $cmp241=(($179)|0)!=0;
      if ($cmp241) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      var $op244=(($here)|0);
      HEAP8[($op244)]=64;
      var $180=$len;
      var $181=$drop;
      var $sub245=(($180-$181)|0);
      var $conv246=(($sub245) & 255);
      var $bits247=(($here+1)|0);
      HEAP8[($bits247)]=$conv246;
      var $val248=(($here+2)|0);
      HEAP16[(($val248)>>1)]=0;
      var $182=$huff;
      var $183=$next;
      var $arrayidx249=(($183+($182<<2))|0);
      var $184=$arrayidx249;
      var $185=$here;
      assert(4 % 1 === 0, 'memcpy given ' + 4 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP16[(($184)>>1)]=HEAP16[(($185)>>1)];HEAP16[(($184+2)>>1)]=HEAP16[(($185+2)>>1)];
      __label__ = 94; break;
    case 94: 
      var $186=$used;
      var $187=$table_addr;
      var $188=HEAP32[(($187)>>2)];
      var $add_ptr251=(($188+($186<<2))|0);
      HEAP32[(($187)>>2)]=$add_ptr251;
      var $189=$root;
      var $190=$bits_addr;
      HEAP32[(($190)>>2)]=$189;
      $retval=0;
      __label__ = 95; break;
    case 95: 
      var $191=$retval;
      STACKTOP = __stackBase__;
      return $191;
    default: assert(0, "bad label: " + __label__);
  }
}
_inflate_table["X"]=1;

function __tr_init($s) {
  ;
  var __label__;

  var $s_addr;
  $s_addr=$s;
  _tr_static_init();
  var $0=$s_addr;
  var $dyn_ltree=(($0+148)|0);
  var $arraydecay=(($dyn_ltree)|0);
  var $1=$s_addr;
  var $l_desc=(($1+2840)|0);
  var $dyn_tree=(($l_desc)|0);
  HEAP32[(($dyn_tree)>>2)]=$arraydecay;
  var $2=$s_addr;
  var $l_desc1=(($2+2840)|0);
  var $stat_desc=(($l_desc1+8)|0);
  HEAP32[(($stat_desc)>>2)]=_static_l_desc;
  var $3=$s_addr;
  var $dyn_dtree=(($3+2440)|0);
  var $arraydecay2=(($dyn_dtree)|0);
  var $4=$s_addr;
  var $d_desc=(($4+2852)|0);
  var $dyn_tree3=(($d_desc)|0);
  HEAP32[(($dyn_tree3)>>2)]=$arraydecay2;
  var $5=$s_addr;
  var $d_desc4=(($5+2852)|0);
  var $stat_desc5=(($d_desc4+8)|0);
  HEAP32[(($stat_desc5)>>2)]=_static_d_desc;
  var $6=$s_addr;
  var $bl_tree=(($6+2684)|0);
  var $arraydecay6=(($bl_tree)|0);
  var $7=$s_addr;
  var $bl_desc=(($7+2864)|0);
  var $dyn_tree7=(($bl_desc)|0);
  HEAP32[(($dyn_tree7)>>2)]=$arraydecay6;
  var $8=$s_addr;
  var $bl_desc8=(($8+2864)|0);
  var $stat_desc9=(($bl_desc8+8)|0);
  HEAP32[(($stat_desc9)>>2)]=_static_bl_desc;
  var $9=$s_addr;
  var $bi_buf=(($9+5816)|0);
  HEAP16[(($bi_buf)>>1)]=0;
  var $10=$s_addr;
  var $bi_valid=(($10+5820)|0);
  HEAP32[(($bi_valid)>>2)]=0;
  var $11=$s_addr;
  _init_block($11);
  ;
  return;
}


function _bi_flush($s) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      $s_addr=$s;
      var $0=$s_addr;
      var $bi_valid=(($0+5820)|0);
      var $1=HEAP32[(($bi_valid)>>2)];
      var $cmp=(($1)|0)==16;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$s_addr;
      var $bi_buf=(($2+5816)|0);
      var $3=HEAPU16[(($bi_buf)>>1)];
      var $conv=(($3)&65535);
      var $and=$conv & 255;
      var $conv1=(($and) & 255);
      var $4=$s_addr;
      var $pending=(($4+20)|0);
      var $5=HEAPU32[(($pending)>>2)];
      var $inc=(($5+1)|0);
      HEAP32[(($pending)>>2)]=$inc;
      var $6=$s_addr;
      var $pending_buf=(($6+8)|0);
      var $7=HEAP32[(($pending_buf)>>2)];
      var $arrayidx=(($7+$5)|0);
      HEAP8[($arrayidx)]=$conv1;
      var $8=$s_addr;
      var $bi_buf2=(($8+5816)|0);
      var $9=HEAPU16[(($bi_buf2)>>1)];
      var $conv3=(($9)&65535);
      var $shr=$conv3 >> 8;
      var $conv4=(($shr) & 255);
      var $10=$s_addr;
      var $pending5=(($10+20)|0);
      var $11=HEAPU32[(($pending5)>>2)];
      var $inc6=(($11+1)|0);
      HEAP32[(($pending5)>>2)]=$inc6;
      var $12=$s_addr;
      var $pending_buf7=(($12+8)|0);
      var $13=HEAP32[(($pending_buf7)>>2)];
      var $arrayidx8=(($13+$11)|0);
      HEAP8[($arrayidx8)]=$conv4;
      var $14=$s_addr;
      var $bi_buf9=(($14+5816)|0);
      HEAP16[(($bi_buf9)>>1)]=0;
      var $15=$s_addr;
      var $bi_valid10=(($15+5820)|0);
      HEAP32[(($bi_valid10)>>2)]=0;
      __label__ = 6; break;
    case 3: 
      var $16=$s_addr;
      var $bi_valid11=(($16+5820)|0);
      var $17=HEAP32[(($bi_valid11)>>2)];
      var $cmp12=(($17)|0) >= 8;
      if ($cmp12) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $18=$s_addr;
      var $bi_buf15=(($18+5816)|0);
      var $19=HEAP16[(($bi_buf15)>>1)];
      var $conv16=(($19) & 255);
      var $20=$s_addr;
      var $pending17=(($20+20)|0);
      var $21=HEAP32[(($pending17)>>2)];
      var $inc18=(($21+1)|0);
      HEAP32[(($pending17)>>2)]=$inc18;
      var $22=$s_addr;
      var $pending_buf19=(($22+8)|0);
      var $23=HEAP32[(($pending_buf19)>>2)];
      var $arrayidx20=(($23+$21)|0);
      HEAP8[($arrayidx20)]=$conv16;
      var $24=$s_addr;
      var $bi_buf21=(($24+5816)|0);
      var $25=HEAPU16[(($bi_buf21)>>1)];
      var $conv22=(($25)&65535);
      var $shr23=$conv22 >> 8;
      var $conv24=(($shr23) & 65535);
      HEAP16[(($bi_buf21)>>1)]=$conv24;
      var $26=$s_addr;
      var $bi_valid25=(($26+5820)|0);
      var $27=HEAP32[(($bi_valid25)>>2)];
      var $sub=(($27-8)|0);
      HEAP32[(($bi_valid25)>>2)]=$sub;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_bi_flush["X"]=1;

function __tr_stored_block($s, $buf, $stored_len, $last) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $buf_addr;
      var $stored_len_addr;
      var $last_addr;
      var $len;
      var $val;
      $s_addr=$s;
      $buf_addr=$buf;
      $stored_len_addr=$stored_len;
      $last_addr=$last;
      $len=3;
      var $0=$s_addr;
      var $bi_valid=(($0+5820)|0);
      var $1=HEAP32[(($bi_valid)>>2)];
      var $2=$len;
      var $sub=((16-$2)|0);
      var $cmp=(($1)|0) > (($sub)|0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $3=$last_addr;
      var $add=(($3)|0);
      $val=$add;
      var $4=$val;
      var $conv=(($4) & 65535);
      var $conv1=(($conv)&65535);
      var $5=$s_addr;
      var $bi_valid2=(($5+5820)|0);
      var $6=HEAP32[(($bi_valid2)>>2)];
      var $shl=$conv1 << $6;
      var $7=$s_addr;
      var $bi_buf=(($7+5816)|0);
      var $8=HEAPU16[(($bi_buf)>>1)];
      var $conv3=(($8)&65535);
      var $or=$conv3 | $shl;
      var $conv4=(($or) & 65535);
      HEAP16[(($bi_buf)>>1)]=$conv4;
      var $9=$s_addr;
      var $bi_buf5=(($9+5816)|0);
      var $10=HEAPU16[(($bi_buf5)>>1)];
      var $conv6=(($10)&65535);
      var $and=$conv6 & 255;
      var $conv7=(($and) & 255);
      var $11=$s_addr;
      var $pending=(($11+20)|0);
      var $12=HEAPU32[(($pending)>>2)];
      var $inc=(($12+1)|0);
      HEAP32[(($pending)>>2)]=$inc;
      var $13=$s_addr;
      var $pending_buf=(($13+8)|0);
      var $14=HEAP32[(($pending_buf)>>2)];
      var $arrayidx=(($14+$12)|0);
      HEAP8[($arrayidx)]=$conv7;
      var $15=$s_addr;
      var $bi_buf8=(($15+5816)|0);
      var $16=HEAPU16[(($bi_buf8)>>1)];
      var $conv9=(($16)&65535);
      var $shr=$conv9 >> 8;
      var $conv10=(($shr) & 255);
      var $17=$s_addr;
      var $pending11=(($17+20)|0);
      var $18=HEAPU32[(($pending11)>>2)];
      var $inc12=(($18+1)|0);
      HEAP32[(($pending11)>>2)]=$inc12;
      var $19=$s_addr;
      var $pending_buf13=(($19+8)|0);
      var $20=HEAP32[(($pending_buf13)>>2)];
      var $arrayidx14=(($20+$18)|0);
      HEAP8[($arrayidx14)]=$conv10;
      var $21=$val;
      var $conv15=(($21) & 65535);
      var $conv16=(($conv15)&65535);
      var $22=$s_addr;
      var $bi_valid17=(($22+5820)|0);
      var $23=HEAP32[(($bi_valid17)>>2)];
      var $sub18=((16-$23)|0);
      var $shr19=$conv16 >> (($sub18)|0);
      var $conv20=(($shr19) & 65535);
      var $24=$s_addr;
      var $bi_buf21=(($24+5816)|0);
      HEAP16[(($bi_buf21)>>1)]=$conv20;
      var $25=$len;
      var $sub22=(($25-16)|0);
      var $26=$s_addr;
      var $bi_valid23=(($26+5820)|0);
      var $27=HEAP32[(($bi_valid23)>>2)];
      var $add24=(($27+$sub22)|0);
      HEAP32[(($bi_valid23)>>2)]=$add24;
      __label__ = 4; break;
    case 3: 
      var $28=$last_addr;
      var $add25=(($28)|0);
      var $conv26=(($add25) & 65535);
      var $conv27=(($conv26)&65535);
      var $29=$s_addr;
      var $bi_valid28=(($29+5820)|0);
      var $30=HEAP32[(($bi_valid28)>>2)];
      var $shl29=$conv27 << $30;
      var $31=$s_addr;
      var $bi_buf30=(($31+5816)|0);
      var $32=HEAPU16[(($bi_buf30)>>1)];
      var $conv31=(($32)&65535);
      var $or32=$conv31 | $shl29;
      var $conv33=(($or32) & 65535);
      HEAP16[(($bi_buf30)>>1)]=$conv33;
      var $33=$len;
      var $34=$s_addr;
      var $bi_valid34=(($34+5820)|0);
      var $35=HEAP32[(($bi_valid34)>>2)];
      var $add35=(($35+$33)|0);
      HEAP32[(($bi_valid34)>>2)]=$add35;
      __label__ = 4; break;
    case 4: 
      var $36=$s_addr;
      var $37=$buf_addr;
      var $38=$stored_len_addr;
      _copy_block($36, $37, $38, 1);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
__tr_stored_block["X"]=1;

function _copy_block($s, $buf, $len, $header) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $buf_addr;
      var $len_addr;
      var $header_addr;
      $s_addr=$s;
      $buf_addr=$buf;
      $len_addr=$len;
      $header_addr=$header;
      var $0=$s_addr;
      _bi_windup($0);
      var $1=$header_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$len_addr;
      var $conv=(($2) & 65535);
      var $conv1=(($conv)&65535);
      var $and=$conv1 & 255;
      var $conv2=(($and) & 255);
      var $3=$s_addr;
      var $pending=(($3+20)|0);
      var $4=HEAPU32[(($pending)>>2)];
      var $inc=(($4+1)|0);
      HEAP32[(($pending)>>2)]=$inc;
      var $5=$s_addr;
      var $pending_buf=(($5+8)|0);
      var $6=HEAP32[(($pending_buf)>>2)];
      var $arrayidx=(($6+$4)|0);
      HEAP8[($arrayidx)]=$conv2;
      var $7=$len_addr;
      var $conv3=(($7) & 65535);
      var $conv4=(($conv3)&65535);
      var $shr=$conv4 >> 8;
      var $conv5=(($shr) & 255);
      var $8=$s_addr;
      var $pending6=(($8+20)|0);
      var $9=HEAPU32[(($pending6)>>2)];
      var $inc7=(($9+1)|0);
      HEAP32[(($pending6)>>2)]=$inc7;
      var $10=$s_addr;
      var $pending_buf8=(($10+8)|0);
      var $11=HEAP32[(($pending_buf8)>>2)];
      var $arrayidx9=(($11+$9)|0);
      HEAP8[($arrayidx9)]=$conv5;
      var $12=$len_addr;
      var $neg=$12 ^ -1;
      var $conv10=(($neg) & 65535);
      var $conv11=(($conv10)&65535);
      var $and12=$conv11 & 255;
      var $conv13=(($and12) & 255);
      var $13=$s_addr;
      var $pending14=(($13+20)|0);
      var $14=HEAPU32[(($pending14)>>2)];
      var $inc15=(($14+1)|0);
      HEAP32[(($pending14)>>2)]=$inc15;
      var $15=$s_addr;
      var $pending_buf16=(($15+8)|0);
      var $16=HEAP32[(($pending_buf16)>>2)];
      var $arrayidx17=(($16+$14)|0);
      HEAP8[($arrayidx17)]=$conv13;
      var $17=$len_addr;
      var $neg18=$17 ^ -1;
      var $conv19=(($neg18) & 65535);
      var $conv20=(($conv19)&65535);
      var $shr21=$conv20 >> 8;
      var $conv22=(($shr21) & 255);
      var $18=$s_addr;
      var $pending23=(($18+20)|0);
      var $19=HEAPU32[(($pending23)>>2)];
      var $inc24=(($19+1)|0);
      HEAP32[(($pending23)>>2)]=$inc24;
      var $20=$s_addr;
      var $pending_buf25=(($20+8)|0);
      var $21=HEAP32[(($pending_buf25)>>2)];
      var $arrayidx26=(($21+$19)|0);
      HEAP8[($arrayidx26)]=$conv22;
      __label__ = 3; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $22=$len_addr;
      var $dec=(($22-1)|0);
      $len_addr=$dec;
      var $tobool27=(($22)|0)!=0;
      if ($tobool27) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $23=$buf_addr;
      var $incdec_ptr=(($23+1)|0);
      $buf_addr=$incdec_ptr;
      var $24=HEAP8[($23)];
      var $25=$s_addr;
      var $pending28=(($25+20)|0);
      var $26=HEAP32[(($pending28)>>2)];
      var $inc29=(($26+1)|0);
      HEAP32[(($pending28)>>2)]=$inc29;
      var $27=$s_addr;
      var $pending_buf30=(($27+8)|0);
      var $28=HEAP32[(($pending_buf30)>>2)];
      var $arrayidx31=(($28+$26)|0);
      HEAP8[($arrayidx31)]=$24;
      __label__ = 4; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_copy_block["X"]=1;

function __tr_flush_bits($s) {
  ;
  var __label__;

  var $s_addr;
  $s_addr=$s;
  var $0=$s_addr;
  _bi_flush($0);
  ;
  return;
}


function __tr_align($s) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $len;
      var $val;
      var $len32;
      var $val39;
      $s_addr=$s;
      $len=3;
      var $0=$s_addr;
      var $bi_valid=(($0+5820)|0);
      var $1=HEAP32[(($bi_valid)>>2)];
      var $2=$len;
      var $sub=((16-$2)|0);
      var $cmp=(($1)|0) > (($sub)|0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $val=2;
      var $3=$val;
      var $conv=(($3) & 65535);
      var $conv1=(($conv)&65535);
      var $4=$s_addr;
      var $bi_valid2=(($4+5820)|0);
      var $5=HEAP32[(($bi_valid2)>>2)];
      var $shl=$conv1 << $5;
      var $6=$s_addr;
      var $bi_buf=(($6+5816)|0);
      var $7=HEAPU16[(($bi_buf)>>1)];
      var $conv3=(($7)&65535);
      var $or=$conv3 | $shl;
      var $conv4=(($or) & 65535);
      HEAP16[(($bi_buf)>>1)]=$conv4;
      var $8=$s_addr;
      var $bi_buf5=(($8+5816)|0);
      var $9=HEAPU16[(($bi_buf5)>>1)];
      var $conv6=(($9)&65535);
      var $and=$conv6 & 255;
      var $conv7=(($and) & 255);
      var $10=$s_addr;
      var $pending=(($10+20)|0);
      var $11=HEAPU32[(($pending)>>2)];
      var $inc=(($11+1)|0);
      HEAP32[(($pending)>>2)]=$inc;
      var $12=$s_addr;
      var $pending_buf=(($12+8)|0);
      var $13=HEAP32[(($pending_buf)>>2)];
      var $arrayidx=(($13+$11)|0);
      HEAP8[($arrayidx)]=$conv7;
      var $14=$s_addr;
      var $bi_buf8=(($14+5816)|0);
      var $15=HEAPU16[(($bi_buf8)>>1)];
      var $conv9=(($15)&65535);
      var $shr=$conv9 >> 8;
      var $conv10=(($shr) & 255);
      var $16=$s_addr;
      var $pending11=(($16+20)|0);
      var $17=HEAPU32[(($pending11)>>2)];
      var $inc12=(($17+1)|0);
      HEAP32[(($pending11)>>2)]=$inc12;
      var $18=$s_addr;
      var $pending_buf13=(($18+8)|0);
      var $19=HEAP32[(($pending_buf13)>>2)];
      var $arrayidx14=(($19+$17)|0);
      HEAP8[($arrayidx14)]=$conv10;
      var $20=$val;
      var $conv15=(($20) & 65535);
      var $conv16=(($conv15)&65535);
      var $21=$s_addr;
      var $bi_valid17=(($21+5820)|0);
      var $22=HEAP32[(($bi_valid17)>>2)];
      var $sub18=((16-$22)|0);
      var $shr19=$conv16 >> (($sub18)|0);
      var $conv20=(($shr19) & 65535);
      var $23=$s_addr;
      var $bi_buf21=(($23+5816)|0);
      HEAP16[(($bi_buf21)>>1)]=$conv20;
      var $24=$len;
      var $sub22=(($24-16)|0);
      var $25=$s_addr;
      var $bi_valid23=(($25+5820)|0);
      var $26=HEAP32[(($bi_valid23)>>2)];
      var $add=(($26+$sub22)|0);
      HEAP32[(($bi_valid23)>>2)]=$add;
      __label__ = 4; break;
    case 3: 
      var $27=$s_addr;
      var $bi_valid24=(($27+5820)|0);
      var $28=HEAP32[(($bi_valid24)>>2)];
      var $shl25=2 << $28;
      var $29=$s_addr;
      var $bi_buf26=(($29+5816)|0);
      var $30=HEAPU16[(($bi_buf26)>>1)];
      var $conv27=(($30)&65535);
      var $or28=$conv27 | $shl25;
      var $conv29=(($or28) & 65535);
      HEAP16[(($bi_buf26)>>1)]=$conv29;
      var $31=$len;
      var $32=$s_addr;
      var $bi_valid30=(($32+5820)|0);
      var $33=HEAP32[(($bi_valid30)>>2)];
      var $add31=(($33+$31)|0);
      HEAP32[(($bi_valid30)>>2)]=$add31;
      __label__ = 4; break;
    case 4: 
      var $34=HEAPU16[((((_static_ltree+1026)|0))>>1)];
      var $conv33=(($34)&65535);
      $len32=$conv33;
      var $35=$s_addr;
      var $bi_valid34=(($35+5820)|0);
      var $36=HEAP32[(($bi_valid34)>>2)];
      var $37=$len32;
      var $sub35=((16-$37)|0);
      var $cmp36=(($36)|0) > (($sub35)|0);
      if ($cmp36) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $38=HEAPU16[((((_static_ltree+1024)|0))>>1)];
      var $conv40=(($38)&65535);
      $val39=$conv40;
      var $39=$val39;
      var $conv41=(($39) & 65535);
      var $conv42=(($conv41)&65535);
      var $40=$s_addr;
      var $bi_valid43=(($40+5820)|0);
      var $41=HEAP32[(($bi_valid43)>>2)];
      var $shl44=$conv42 << $41;
      var $42=$s_addr;
      var $bi_buf45=(($42+5816)|0);
      var $43=HEAPU16[(($bi_buf45)>>1)];
      var $conv46=(($43)&65535);
      var $or47=$conv46 | $shl44;
      var $conv48=(($or47) & 65535);
      HEAP16[(($bi_buf45)>>1)]=$conv48;
      var $44=$s_addr;
      var $bi_buf49=(($44+5816)|0);
      var $45=HEAPU16[(($bi_buf49)>>1)];
      var $conv50=(($45)&65535);
      var $and51=$conv50 & 255;
      var $conv52=(($and51) & 255);
      var $46=$s_addr;
      var $pending53=(($46+20)|0);
      var $47=HEAPU32[(($pending53)>>2)];
      var $inc54=(($47+1)|0);
      HEAP32[(($pending53)>>2)]=$inc54;
      var $48=$s_addr;
      var $pending_buf55=(($48+8)|0);
      var $49=HEAP32[(($pending_buf55)>>2)];
      var $arrayidx56=(($49+$47)|0);
      HEAP8[($arrayidx56)]=$conv52;
      var $50=$s_addr;
      var $bi_buf57=(($50+5816)|0);
      var $51=HEAPU16[(($bi_buf57)>>1)];
      var $conv58=(($51)&65535);
      var $shr59=$conv58 >> 8;
      var $conv60=(($shr59) & 255);
      var $52=$s_addr;
      var $pending61=(($52+20)|0);
      var $53=HEAPU32[(($pending61)>>2)];
      var $inc62=(($53+1)|0);
      HEAP32[(($pending61)>>2)]=$inc62;
      var $54=$s_addr;
      var $pending_buf63=(($54+8)|0);
      var $55=HEAP32[(($pending_buf63)>>2)];
      var $arrayidx64=(($55+$53)|0);
      HEAP8[($arrayidx64)]=$conv60;
      var $56=$val39;
      var $conv65=(($56) & 65535);
      var $conv66=(($conv65)&65535);
      var $57=$s_addr;
      var $bi_valid67=(($57+5820)|0);
      var $58=HEAP32[(($bi_valid67)>>2)];
      var $sub68=((16-$58)|0);
      var $shr69=$conv66 >> (($sub68)|0);
      var $conv70=(($shr69) & 65535);
      var $59=$s_addr;
      var $bi_buf71=(($59+5816)|0);
      HEAP16[(($bi_buf71)>>1)]=$conv70;
      var $60=$len32;
      var $sub72=(($60-16)|0);
      var $61=$s_addr;
      var $bi_valid73=(($61+5820)|0);
      var $62=HEAP32[(($bi_valid73)>>2)];
      var $add74=(($62+$sub72)|0);
      HEAP32[(($bi_valid73)>>2)]=$add74;
      __label__ = 7; break;
    case 6: 
      var $63=HEAPU16[((((_static_ltree+1024)|0))>>1)];
      var $conv76=(($63)&65535);
      var $64=$s_addr;
      var $bi_valid77=(($64+5820)|0);
      var $65=HEAP32[(($bi_valid77)>>2)];
      var $shl78=$conv76 << $65;
      var $66=$s_addr;
      var $bi_buf79=(($66+5816)|0);
      var $67=HEAPU16[(($bi_buf79)>>1)];
      var $conv80=(($67)&65535);
      var $or81=$conv80 | $shl78;
      var $conv82=(($or81) & 65535);
      HEAP16[(($bi_buf79)>>1)]=$conv82;
      var $68=$len32;
      var $69=$s_addr;
      var $bi_valid83=(($69+5820)|0);
      var $70=HEAP32[(($bi_valid83)>>2)];
      var $add84=(($70+$68)|0);
      HEAP32[(($bi_valid83)>>2)]=$add84;
      __label__ = 7; break;
    case 7: 
      var $71=$s_addr;
      _bi_flush($71);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
__tr_align["X"]=1;

function __tr_flush_block($s, $buf, $stored_len, $last) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $buf_addr;
      var $stored_len_addr;
      var $last_addr;
      var $opt_lenb;
      var $static_lenb;
      var $max_blindex;
      var $len;
      var $val;
      var $len65;
      var $val71;
      $s_addr=$s;
      $buf_addr=$buf;
      $stored_len_addr=$stored_len;
      $last_addr=$last;
      $max_blindex=0;
      var $0=$s_addr;
      var $level=(($0+132)|0);
      var $1=HEAP32[(($level)>>2)];
      var $cmp=(($1)|0) > 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 7; break; }
    case 2: 
      var $2=$s_addr;
      var $strm=(($2)|0);
      var $3=HEAP32[(($strm)>>2)];
      var $data_type=(($3+44)|0);
      var $4=HEAP32[(($data_type)>>2)];
      var $cmp1=(($4)|0)==2;
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$s_addr;
      var $call=_detect_data_type($5);
      var $6=$s_addr;
      var $strm3=(($6)|0);
      var $7=HEAP32[(($strm3)>>2)];
      var $data_type4=(($7+44)|0);
      HEAP32[(($data_type4)>>2)]=$call;
      __label__ = 4; break;
    case 4: 
      var $8=$s_addr;
      var $9=$s_addr;
      var $l_desc=(($9+2840)|0);
      _build_tree($8, $l_desc);
      var $10=$s_addr;
      var $11=$s_addr;
      var $d_desc=(($11+2852)|0);
      _build_tree($10, $d_desc);
      var $12=$s_addr;
      var $call5=_build_bl_tree($12);
      $max_blindex=$call5;
      var $13=$s_addr;
      var $opt_len=(($13+5800)|0);
      var $14=HEAP32[(($opt_len)>>2)];
      var $add=(($14+3)|0);
      var $add6=(($add+7)|0);
      var $shr=$add6 >>> 3;
      $opt_lenb=$shr;
      var $15=$s_addr;
      var $static_len=(($15+5804)|0);
      var $16=HEAP32[(($static_len)>>2)];
      var $add7=(($16+3)|0);
      var $add8=(($add7+7)|0);
      var $shr9=$add8 >>> 3;
      $static_lenb=$shr9;
      var $17=$static_lenb;
      var $18=$opt_lenb;
      var $cmp10=(($17)>>>0) <= (($18)>>>0);
      if ($cmp10) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$static_lenb;
      $opt_lenb=$19;
      __label__ = 6; break;
    case 6: 
      __label__ = 8; break;
    case 7: 
      var $20=$stored_len_addr;
      var $add13=(($20+5)|0);
      $static_lenb=$add13;
      $opt_lenb=$add13;
      __label__ = 8; break;
    case 8: 
      var $21=$stored_len_addr;
      var $add15=(($21+4)|0);
      var $22=$opt_lenb;
      var $cmp16=(($add15)>>>0) <= (($22)>>>0);
      if ($cmp16) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $23=$buf_addr;
      var $cmp17=(($23)|0)!=0;
      if ($cmp17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $24=$s_addr;
      var $25=$buf_addr;
      var $26=$stored_len_addr;
      var $27=$last_addr;
      __tr_stored_block($24, $25, $26, $27);
      __label__ = 22; break;
    case 11: 
      var $28=$s_addr;
      var $strategy=(($28+136)|0);
      var $29=HEAP32[(($strategy)>>2)];
      var $cmp20=(($29)|0)==4;
      if ($cmp20) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $30=$static_lenb;
      var $31=$opt_lenb;
      var $cmp21=(($30)|0)==(($31)|0);
      if ($cmp21) { __label__ = 13; break; } else { __label__ = 17; break; }
    case 13: 
      $len=3;
      var $32=$s_addr;
      var $bi_valid=(($32+5820)|0);
      var $33=HEAP32[(($bi_valid)>>2)];
      var $34=$len;
      var $sub=((16-$34)|0);
      var $cmp23=(($33)|0) > (($sub)|0);
      if ($cmp23) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $35=$last_addr;
      var $add25=(($35+2)|0);
      $val=$add25;
      var $36=$val;
      var $conv=(($36) & 65535);
      var $conv26=(($conv)&65535);
      var $37=$s_addr;
      var $bi_valid27=(($37+5820)|0);
      var $38=HEAP32[(($bi_valid27)>>2)];
      var $shl=$conv26 << $38;
      var $39=$s_addr;
      var $bi_buf=(($39+5816)|0);
      var $40=HEAPU16[(($bi_buf)>>1)];
      var $conv28=(($40)&65535);
      var $or=$conv28 | $shl;
      var $conv29=(($or) & 65535);
      HEAP16[(($bi_buf)>>1)]=$conv29;
      var $41=$s_addr;
      var $bi_buf30=(($41+5816)|0);
      var $42=HEAPU16[(($bi_buf30)>>1)];
      var $conv31=(($42)&65535);
      var $and=$conv31 & 255;
      var $conv32=(($and) & 255);
      var $43=$s_addr;
      var $pending=(($43+20)|0);
      var $44=HEAPU32[(($pending)>>2)];
      var $inc=(($44+1)|0);
      HEAP32[(($pending)>>2)]=$inc;
      var $45=$s_addr;
      var $pending_buf=(($45+8)|0);
      var $46=HEAP32[(($pending_buf)>>2)];
      var $arrayidx=(($46+$44)|0);
      HEAP8[($arrayidx)]=$conv32;
      var $47=$s_addr;
      var $bi_buf33=(($47+5816)|0);
      var $48=HEAPU16[(($bi_buf33)>>1)];
      var $conv34=(($48)&65535);
      var $shr35=$conv34 >> 8;
      var $conv36=(($shr35) & 255);
      var $49=$s_addr;
      var $pending37=(($49+20)|0);
      var $50=HEAPU32[(($pending37)>>2)];
      var $inc38=(($50+1)|0);
      HEAP32[(($pending37)>>2)]=$inc38;
      var $51=$s_addr;
      var $pending_buf39=(($51+8)|0);
      var $52=HEAP32[(($pending_buf39)>>2)];
      var $arrayidx40=(($52+$50)|0);
      HEAP8[($arrayidx40)]=$conv36;
      var $53=$val;
      var $conv41=(($53) & 65535);
      var $conv42=(($conv41)&65535);
      var $54=$s_addr;
      var $bi_valid43=(($54+5820)|0);
      var $55=HEAP32[(($bi_valid43)>>2)];
      var $sub44=((16-$55)|0);
      var $shr45=$conv42 >> (($sub44)|0);
      var $conv46=(($shr45) & 65535);
      var $56=$s_addr;
      var $bi_buf47=(($56+5816)|0);
      HEAP16[(($bi_buf47)>>1)]=$conv46;
      var $57=$len;
      var $sub48=(($57-16)|0);
      var $58=$s_addr;
      var $bi_valid49=(($58+5820)|0);
      var $59=HEAP32[(($bi_valid49)>>2)];
      var $add50=(($59+$sub48)|0);
      HEAP32[(($bi_valid49)>>2)]=$add50;
      __label__ = 16; break;
    case 15: 
      var $60=$last_addr;
      var $add52=(($60+2)|0);
      var $conv53=(($add52) & 65535);
      var $conv54=(($conv53)&65535);
      var $61=$s_addr;
      var $bi_valid55=(($61+5820)|0);
      var $62=HEAP32[(($bi_valid55)>>2)];
      var $shl56=$conv54 << $62;
      var $63=$s_addr;
      var $bi_buf57=(($63+5816)|0);
      var $64=HEAPU16[(($bi_buf57)>>1)];
      var $conv58=(($64)&65535);
      var $or59=$conv58 | $shl56;
      var $conv60=(($or59) & 65535);
      HEAP16[(($bi_buf57)>>1)]=$conv60;
      var $65=$len;
      var $66=$s_addr;
      var $bi_valid61=(($66+5820)|0);
      var $67=HEAP32[(($bi_valid61)>>2)];
      var $add62=(($67+$65)|0);
      HEAP32[(($bi_valid61)>>2)]=$add62;
      __label__ = 16; break;
    case 16: 
      var $68=$s_addr;
      _compress_block($68, ((_static_ltree)|0), ((_static_dtree)|0));
      __label__ = 21; break;
    case 17: 
      $len65=3;
      var $69=$s_addr;
      var $bi_valid66=(($69+5820)|0);
      var $70=HEAP32[(($bi_valid66)>>2)];
      var $71=$len65;
      var $sub67=((16-$71)|0);
      var $cmp68=(($70)|0) > (($sub67)|0);
      if ($cmp68) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $72=$last_addr;
      var $add72=(($72+4)|0);
      $val71=$add72;
      var $73=$val71;
      var $conv73=(($73) & 65535);
      var $conv74=(($conv73)&65535);
      var $74=$s_addr;
      var $bi_valid75=(($74+5820)|0);
      var $75=HEAP32[(($bi_valid75)>>2)];
      var $shl76=$conv74 << $75;
      var $76=$s_addr;
      var $bi_buf77=(($76+5816)|0);
      var $77=HEAPU16[(($bi_buf77)>>1)];
      var $conv78=(($77)&65535);
      var $or79=$conv78 | $shl76;
      var $conv80=(($or79) & 65535);
      HEAP16[(($bi_buf77)>>1)]=$conv80;
      var $78=$s_addr;
      var $bi_buf81=(($78+5816)|0);
      var $79=HEAPU16[(($bi_buf81)>>1)];
      var $conv82=(($79)&65535);
      var $and83=$conv82 & 255;
      var $conv84=(($and83) & 255);
      var $80=$s_addr;
      var $pending85=(($80+20)|0);
      var $81=HEAPU32[(($pending85)>>2)];
      var $inc86=(($81+1)|0);
      HEAP32[(($pending85)>>2)]=$inc86;
      var $82=$s_addr;
      var $pending_buf87=(($82+8)|0);
      var $83=HEAP32[(($pending_buf87)>>2)];
      var $arrayidx88=(($83+$81)|0);
      HEAP8[($arrayidx88)]=$conv84;
      var $84=$s_addr;
      var $bi_buf89=(($84+5816)|0);
      var $85=HEAPU16[(($bi_buf89)>>1)];
      var $conv90=(($85)&65535);
      var $shr91=$conv90 >> 8;
      var $conv92=(($shr91) & 255);
      var $86=$s_addr;
      var $pending93=(($86+20)|0);
      var $87=HEAPU32[(($pending93)>>2)];
      var $inc94=(($87+1)|0);
      HEAP32[(($pending93)>>2)]=$inc94;
      var $88=$s_addr;
      var $pending_buf95=(($88+8)|0);
      var $89=HEAP32[(($pending_buf95)>>2)];
      var $arrayidx96=(($89+$87)|0);
      HEAP8[($arrayidx96)]=$conv92;
      var $90=$val71;
      var $conv97=(($90) & 65535);
      var $conv98=(($conv97)&65535);
      var $91=$s_addr;
      var $bi_valid99=(($91+5820)|0);
      var $92=HEAP32[(($bi_valid99)>>2)];
      var $sub100=((16-$92)|0);
      var $shr101=$conv98 >> (($sub100)|0);
      var $conv102=(($shr101) & 65535);
      var $93=$s_addr;
      var $bi_buf103=(($93+5816)|0);
      HEAP16[(($bi_buf103)>>1)]=$conv102;
      var $94=$len65;
      var $sub104=(($94-16)|0);
      var $95=$s_addr;
      var $bi_valid105=(($95+5820)|0);
      var $96=HEAP32[(($bi_valid105)>>2)];
      var $add106=(($96+$sub104)|0);
      HEAP32[(($bi_valid105)>>2)]=$add106;
      __label__ = 20; break;
    case 19: 
      var $97=$last_addr;
      var $add108=(($97+4)|0);
      var $conv109=(($add108) & 65535);
      var $conv110=(($conv109)&65535);
      var $98=$s_addr;
      var $bi_valid111=(($98+5820)|0);
      var $99=HEAP32[(($bi_valid111)>>2)];
      var $shl112=$conv110 << $99;
      var $100=$s_addr;
      var $bi_buf113=(($100+5816)|0);
      var $101=HEAPU16[(($bi_buf113)>>1)];
      var $conv114=(($101)&65535);
      var $or115=$conv114 | $shl112;
      var $conv116=(($or115) & 65535);
      HEAP16[(($bi_buf113)>>1)]=$conv116;
      var $102=$len65;
      var $103=$s_addr;
      var $bi_valid117=(($103+5820)|0);
      var $104=HEAP32[(($bi_valid117)>>2)];
      var $add118=(($104+$102)|0);
      HEAP32[(($bi_valid117)>>2)]=$add118;
      __label__ = 20; break;
    case 20: 
      var $105=$s_addr;
      var $106=$s_addr;
      var $l_desc120=(($106+2840)|0);
      var $max_code=(($l_desc120+4)|0);
      var $107=HEAP32[(($max_code)>>2)];
      var $add121=(($107+1)|0);
      var $108=$s_addr;
      var $d_desc122=(($108+2852)|0);
      var $max_code123=(($d_desc122+4)|0);
      var $109=HEAP32[(($max_code123)>>2)];
      var $add124=(($109+1)|0);
      var $110=$max_blindex;
      var $add125=(($110+1)|0);
      _send_all_trees($105, $add121, $add124, $add125);
      var $111=$s_addr;
      var $112=$s_addr;
      var $dyn_ltree=(($112+148)|0);
      var $arraydecay=(($dyn_ltree)|0);
      var $113=$s_addr;
      var $dyn_dtree=(($113+2440)|0);
      var $arraydecay126=(($dyn_dtree)|0);
      _compress_block($111, $arraydecay, $arraydecay126);
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $114=$s_addr;
      _init_block($114);
      var $115=$last_addr;
      var $tobool=(($115)|0)!=0;
      if ($tobool) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $116=$s_addr;
      _bi_windup($116);
      __label__ = 24; break;
    case 24: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
__tr_flush_block["X"]=1;

function _detect_data_type($s) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $s_addr;
      var $black_mask;
      var $n;
      $s_addr=$s;
      $black_mask=-201342849;
      $n=0;
      __label__ = 2; break;
    case 2: 
      var $0=$n;
      var $cmp=(($0)|0) <= 31;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $1=$black_mask;
      var $and=$1 & 1;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $2=$n;
      var $3=$s_addr;
      var $dyn_ltree=(($3+148)|0);
      var $arrayidx=(($dyn_ltree+($2<<2))|0);
      var $fc=(($arrayidx)|0);
      var $freq=$fc;
      var $4=HEAPU16[(($freq)>>1)];
      var $conv=(($4)&65535);
      var $cmp1=(($conv)|0)!=0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=0;
      __label__ = 19; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $5=$n;
      var $inc=(($5+1)|0);
      $n=$inc;
      var $6=$black_mask;
      var $shr=$6 >>> 1;
      $black_mask=$shr;
      __label__ = 2; break;
    case 8: 
      var $7=$s_addr;
      var $dyn_ltree3=(($7+148)|0);
      var $arrayidx4=(($dyn_ltree3+36)|0);
      var $fc5=(($arrayidx4)|0);
      var $freq6=$fc5;
      var $8=HEAPU16[(($freq6)>>1)];
      var $conv7=(($8)&65535);
      var $cmp8=(($conv7)|0)!=0;
      if ($cmp8) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $9=$s_addr;
      var $dyn_ltree10=(($9+148)|0);
      var $arrayidx11=(($dyn_ltree10+40)|0);
      var $fc12=(($arrayidx11)|0);
      var $freq13=$fc12;
      var $10=HEAPU16[(($freq13)>>1)];
      var $conv14=(($10)&65535);
      var $cmp15=(($conv14)|0)!=0;
      if ($cmp15) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $11=$s_addr;
      var $dyn_ltree18=(($11+148)|0);
      var $arrayidx19=(($dyn_ltree18+52)|0);
      var $fc20=(($arrayidx19)|0);
      var $freq21=$fc20;
      var $12=HEAPU16[(($freq21)>>1)];
      var $conv22=(($12)&65535);
      var $cmp23=(($conv22)|0)!=0;
      if ($cmp23) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $retval=1;
      __label__ = 19; break;
    case 12: 
      $n=32;
      __label__ = 13; break;
    case 13: 
      var $13=$n;
      var $cmp28=(($13)|0) < 256;
      if ($cmp28) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $14=$n;
      var $15=$s_addr;
      var $dyn_ltree31=(($15+148)|0);
      var $arrayidx32=(($dyn_ltree31+($14<<2))|0);
      var $fc33=(($arrayidx32)|0);
      var $freq34=$fc33;
      var $16=HEAPU16[(($freq34)>>1)];
      var $conv35=(($16)&65535);
      var $cmp36=(($conv35)|0)!=0;
      if ($cmp36) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $retval=1;
      __label__ = 19; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $17=$n;
      var $inc41=(($17+1)|0);
      $n=$inc41;
      __label__ = 13; break;
    case 18: 
      $retval=0;
      __label__ = 19; break;
    case 19: 
      var $18=$retval;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}
_detect_data_type["X"]=1;

function _build_tree($s, $desc) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $desc_addr;
      var $tree;
      var $stree;
      var $elems;
      var $n;
      var $m;
      var $max_code;
      var $node;
      $s_addr=$s;
      $desc_addr=$desc;
      var $0=$desc_addr;
      var $dyn_tree=(($0)|0);
      var $1=HEAP32[(($dyn_tree)>>2)];
      $tree=$1;
      var $2=$desc_addr;
      var $stat_desc=(($2+8)|0);
      var $3=HEAP32[(($stat_desc)>>2)];
      var $static_tree=(($3)|0);
      var $4=HEAP32[(($static_tree)>>2)];
      $stree=$4;
      var $5=$desc_addr;
      var $stat_desc1=(($5+8)|0);
      var $6=HEAP32[(($stat_desc1)>>2)];
      var $elems2=(($6+12)|0);
      var $7=HEAP32[(($elems2)>>2)];
      $elems=$7;
      $max_code=-1;
      var $8=$s_addr;
      var $heap_len=(($8+5200)|0);
      HEAP32[(($heap_len)>>2)]=0;
      var $9=$s_addr;
      var $heap_max=(($9+5204)|0);
      HEAP32[(($heap_max)>>2)]=573;
      $n=0;
      __label__ = 2; break;
    case 2: 
      var $10=$n;
      var $11=$elems;
      var $cmp=(($10)|0) < (($11)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $12=$n;
      var $13=$tree;
      var $arrayidx=(($13+($12<<2))|0);
      var $fc=(($arrayidx)|0);
      var $freq=$fc;
      var $14=HEAPU16[(($freq)>>1)];
      var $conv=(($14)&65535);
      var $cmp3=(($conv)|0)!=0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $15=$n;
      $max_code=$15;
      var $16=$s_addr;
      var $heap_len5=(($16+5200)|0);
      var $17=HEAP32[(($heap_len5)>>2)];
      var $inc=(($17+1)|0);
      HEAP32[(($heap_len5)>>2)]=$inc;
      var $18=$s_addr;
      var $heap=(($18+2908)|0);
      var $arrayidx6=(($heap+($inc<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$15;
      var $19=$n;
      var $20=$s_addr;
      var $depth=(($20+5208)|0);
      var $arrayidx7=(($depth+$19)|0);
      HEAP8[($arrayidx7)]=0;
      __label__ = 6; break;
    case 5: 
      var $21=$n;
      var $22=$tree;
      var $arrayidx8=(($22+($21<<2))|0);
      var $dl=(($arrayidx8+2)|0);
      var $len=$dl;
      HEAP16[(($len)>>1)]=0;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $23=$n;
      var $inc9=(($23+1)|0);
      $n=$inc9;
      __label__ = 2; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $24=$s_addr;
      var $heap_len10=(($24+5200)|0);
      var $25=HEAP32[(($heap_len10)>>2)];
      var $cmp11=(($25)|0) < 2;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 16; break; }
    case 10: 
      var $26=$max_code;
      var $cmp13=(($26)|0) < 2;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $27=$max_code;
      var $inc15=(($27+1)|0);
      $max_code=$inc15;
      var $cond = $inc15;__label__ = 13; break;
    case 12: 
      var $cond = 0;__label__ = 13; break;
    case 13: 
      var $cond;
      var $28=$s_addr;
      var $heap_len16=(($28+5200)|0);
      var $29=HEAP32[(($heap_len16)>>2)];
      var $inc17=(($29+1)|0);
      HEAP32[(($heap_len16)>>2)]=$inc17;
      var $30=$s_addr;
      var $heap18=(($30+2908)|0);
      var $arrayidx19=(($heap18+($inc17<<2))|0);
      HEAP32[(($arrayidx19)>>2)]=$cond;
      $node=$cond;
      var $31=$node;
      var $32=$tree;
      var $arrayidx20=(($32+($31<<2))|0);
      var $fc21=(($arrayidx20)|0);
      var $freq22=$fc21;
      HEAP16[(($freq22)>>1)]=1;
      var $33=$node;
      var $34=$s_addr;
      var $depth23=(($34+5208)|0);
      var $arrayidx24=(($depth23+$33)|0);
      HEAP8[($arrayidx24)]=0;
      var $35=$s_addr;
      var $opt_len=(($35+5800)|0);
      var $36=HEAP32[(($opt_len)>>2)];
      var $dec=(($36-1)|0);
      HEAP32[(($opt_len)>>2)]=$dec;
      var $37=$stree;
      var $tobool=(($37)|0)!=0;
      if ($tobool) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $38=$node;
      var $39=$stree;
      var $arrayidx26=(($39+($38<<2))|0);
      var $dl27=(($arrayidx26+2)|0);
      var $len28=$dl27;
      var $40=HEAPU16[(($len28)>>1)];
      var $conv29=(($40)&65535);
      var $41=$s_addr;
      var $static_len=(($41+5804)|0);
      var $42=HEAP32[(($static_len)>>2)];
      var $sub=(($42-$conv29)|0);
      HEAP32[(($static_len)>>2)]=$sub;
      __label__ = 15; break;
    case 15: 
      __label__ = 9; break;
    case 16: 
      var $43=$max_code;
      var $44=$desc_addr;
      var $max_code31=(($44+4)|0);
      HEAP32[(($max_code31)>>2)]=$43;
      var $45=$s_addr;
      var $heap_len32=(($45+5200)|0);
      var $46=HEAP32[(($heap_len32)>>2)];
      var $div=(((($46)|0)/2)&-1);
      $n=$div;
      __label__ = 17; break;
    case 17: 
      var $47=$n;
      var $cmp34=(($47)|0) >= 1;
      if ($cmp34) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $48=$s_addr;
      var $49=$tree;
      var $50=$n;
      _pqdownheap($48, $49, $50);
      __label__ = 19; break;
    case 19: 
      var $51=$n;
      var $dec38=(($51-1)|0);
      $n=$dec38;
      __label__ = 17; break;
    case 20: 
      var $52=$elems;
      $node=$52;
      __label__ = 21; break;
    case 21: 
      var $53=$s_addr;
      var $heap40=(($53+2908)|0);
      var $arrayidx41=(($heap40+4)|0);
      var $54=HEAP32[(($arrayidx41)>>2)];
      $n=$54;
      var $55=$s_addr;
      var $heap_len42=(($55+5200)|0);
      var $56=HEAP32[(($heap_len42)>>2)];
      var $dec43=(($56-1)|0);
      HEAP32[(($heap_len42)>>2)]=$dec43;
      var $57=$s_addr;
      var $heap44=(($57+2908)|0);
      var $arrayidx45=(($heap44+($56<<2))|0);
      var $58=HEAP32[(($arrayidx45)>>2)];
      var $59=$s_addr;
      var $heap46=(($59+2908)|0);
      var $arrayidx47=(($heap46+4)|0);
      HEAP32[(($arrayidx47)>>2)]=$58;
      var $60=$s_addr;
      var $61=$tree;
      _pqdownheap($60, $61, 1);
      var $62=$s_addr;
      var $heap48=(($62+2908)|0);
      var $arrayidx49=(($heap48+4)|0);
      var $63=HEAP32[(($arrayidx49)>>2)];
      $m=$63;
      var $64=$n;
      var $65=$s_addr;
      var $heap_max50=(($65+5204)|0);
      var $66=HEAP32[(($heap_max50)>>2)];
      var $dec51=(($66-1)|0);
      HEAP32[(($heap_max50)>>2)]=$dec51;
      var $67=$s_addr;
      var $heap52=(($67+2908)|0);
      var $arrayidx53=(($heap52+($dec51<<2))|0);
      HEAP32[(($arrayidx53)>>2)]=$64;
      var $68=$m;
      var $69=$s_addr;
      var $heap_max54=(($69+5204)|0);
      var $70=HEAP32[(($heap_max54)>>2)];
      var $dec55=(($70-1)|0);
      HEAP32[(($heap_max54)>>2)]=$dec55;
      var $71=$s_addr;
      var $heap56=(($71+2908)|0);
      var $arrayidx57=(($heap56+($dec55<<2))|0);
      HEAP32[(($arrayidx57)>>2)]=$68;
      var $72=$n;
      var $73=$tree;
      var $arrayidx58=(($73+($72<<2))|0);
      var $fc59=(($arrayidx58)|0);
      var $freq60=$fc59;
      var $74=HEAPU16[(($freq60)>>1)];
      var $conv61=(($74)&65535);
      var $75=$m;
      var $76=$tree;
      var $arrayidx62=(($76+($75<<2))|0);
      var $fc63=(($arrayidx62)|0);
      var $freq64=$fc63;
      var $77=HEAPU16[(($freq64)>>1)];
      var $conv65=(($77)&65535);
      var $add=(($conv61+$conv65)|0);
      var $conv66=(($add) & 65535);
      var $78=$node;
      var $79=$tree;
      var $arrayidx67=(($79+($78<<2))|0);
      var $fc68=(($arrayidx67)|0);
      var $freq69=$fc68;
      HEAP16[(($freq69)>>1)]=$conv66;
      var $80=$n;
      var $81=$s_addr;
      var $depth70=(($81+5208)|0);
      var $arrayidx71=(($depth70+$80)|0);
      var $82=HEAPU8[($arrayidx71)];
      var $conv72=(($82)&255);
      var $83=$m;
      var $84=$s_addr;
      var $depth73=(($84+5208)|0);
      var $arrayidx74=(($depth73+$83)|0);
      var $85=HEAPU8[($arrayidx74)];
      var $conv75=(($85)&255);
      var $cmp76=(($conv72)|0) >= (($conv75)|0);
      if ($cmp76) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $86=$n;
      var $87=$s_addr;
      var $depth79=(($87+5208)|0);
      var $arrayidx80=(($depth79+$86)|0);
      var $88=HEAPU8[($arrayidx80)];
      var $conv81=(($88)&255);
      var $cond87 = $conv81;__label__ = 24; break;
    case 23: 
      var $89=$m;
      var $90=$s_addr;
      var $depth83=(($90+5208)|0);
      var $arrayidx84=(($depth83+$89)|0);
      var $91=HEAPU8[($arrayidx84)];
      var $conv85=(($91)&255);
      var $cond87 = $conv85;__label__ = 24; break;
    case 24: 
      var $cond87;
      var $add88=(($cond87+1)|0);
      var $conv89=(($add88) & 255);
      var $92=$node;
      var $93=$s_addr;
      var $depth90=(($93+5208)|0);
      var $arrayidx91=(($depth90+$92)|0);
      HEAP8[($arrayidx91)]=$conv89;
      var $94=$node;
      var $conv92=(($94) & 65535);
      var $95=$m;
      var $96=$tree;
      var $arrayidx93=(($96+($95<<2))|0);
      var $dl94=(($arrayidx93+2)|0);
      var $dad=$dl94;
      HEAP16[(($dad)>>1)]=$conv92;
      var $97=$n;
      var $98=$tree;
      var $arrayidx95=(($98+($97<<2))|0);
      var $dl96=(($arrayidx95+2)|0);
      var $dad97=$dl96;
      HEAP16[(($dad97)>>1)]=$conv92;
      var $99=$node;
      var $inc98=(($99+1)|0);
      $node=$inc98;
      var $100=$s_addr;
      var $heap99=(($100+2908)|0);
      var $arrayidx100=(($heap99+4)|0);
      HEAP32[(($arrayidx100)>>2)]=$99;
      var $101=$s_addr;
      var $102=$tree;
      _pqdownheap($101, $102, 1);
      __label__ = 25; break;
    case 25: 
      var $103=$s_addr;
      var $heap_len101=(($103+5200)|0);
      var $104=HEAP32[(($heap_len101)>>2)];
      var $cmp102=(($104)|0) >= 2;
      if ($cmp102) { __label__ = 21; break; } else { __label__ = 26; break; }
    case 26: 
      var $105=$s_addr;
      var $heap104=(($105+2908)|0);
      var $arrayidx105=(($heap104+4)|0);
      var $106=HEAP32[(($arrayidx105)>>2)];
      var $107=$s_addr;
      var $heap_max106=(($107+5204)|0);
      var $108=HEAP32[(($heap_max106)>>2)];
      var $dec107=(($108-1)|0);
      HEAP32[(($heap_max106)>>2)]=$dec107;
      var $109=$s_addr;
      var $heap108=(($109+2908)|0);
      var $arrayidx109=(($heap108+($dec107<<2))|0);
      HEAP32[(($arrayidx109)>>2)]=$106;
      var $110=$s_addr;
      var $111=$desc_addr;
      _gen_bitlen($110, $111);
      var $112=$tree;
      var $113=$max_code;
      var $114=$s_addr;
      var $bl_count=(($114+2876)|0);
      var $arraydecay=(($bl_count)|0);
      _gen_codes($112, $113, $arraydecay);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_build_tree["X"]=1;

function _build_bl_tree($s) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $max_blindex;
      $s_addr=$s;
      var $0=$s_addr;
      var $1=$s_addr;
      var $dyn_ltree=(($1+148)|0);
      var $arraydecay=(($dyn_ltree)|0);
      var $2=$s_addr;
      var $l_desc=(($2+2840)|0);
      var $max_code=(($l_desc+4)|0);
      var $3=HEAP32[(($max_code)>>2)];
      _scan_tree($0, $arraydecay, $3);
      var $4=$s_addr;
      var $5=$s_addr;
      var $dyn_dtree=(($5+2440)|0);
      var $arraydecay1=(($dyn_dtree)|0);
      var $6=$s_addr;
      var $d_desc=(($6+2852)|0);
      var $max_code2=(($d_desc+4)|0);
      var $7=HEAP32[(($max_code2)>>2)];
      _scan_tree($4, $arraydecay1, $7);
      var $8=$s_addr;
      var $9=$s_addr;
      var $bl_desc=(($9+2864)|0);
      _build_tree($8, $bl_desc);
      $max_blindex=18;
      __label__ = 2; break;
    case 2: 
      var $10=$max_blindex;
      var $cmp=(($10)|0) >= 3;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $11=$max_blindex;
      var $arrayidx=((STRING_TABLE._bl_order+$11)|0);
      var $12=HEAPU8[($arrayidx)];
      var $idxprom=(($12)&255);
      var $13=$s_addr;
      var $bl_tree=(($13+2684)|0);
      var $arrayidx3=(($bl_tree+($idxprom<<2))|0);
      var $dl=(($arrayidx3+2)|0);
      var $len=$dl;
      var $14=HEAPU16[(($len)>>1)];
      var $conv=(($14)&65535);
      var $cmp4=(($conv)|0)!=0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 7; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $15=$max_blindex;
      var $dec=(($15-1)|0);
      $max_blindex=$dec;
      __label__ = 2; break;
    case 7: 
      var $16=$max_blindex;
      var $add=(($16+1)|0);
      var $mul=(($add*3)|0);
      var $add6=(($mul+5)|0);
      var $add7=(($add6+5)|0);
      var $add8=(($add7+4)|0);
      var $17=$s_addr;
      var $opt_len=(($17+5800)|0);
      var $18=HEAP32[(($opt_len)>>2)];
      var $add9=(($18+$add8)|0);
      HEAP32[(($opt_len)>>2)]=$add9;
      var $19=$max_blindex;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}
_build_bl_tree["X"]=1;

function _compress_block($s, $ltree, $dtree) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $ltree_addr;
      var $dtree_addr;
      var $dist;
      var $lc;
      var $lx;
      var $code;
      var $extra;
      var $len;
      var $val;
      var $len56;
      var $val68;
      var $len131;
      var $val137;
      var $len193;
      var $val203;
      var $len262;
      var $val268;
      var $len321;
      var $val331;
      $s_addr=$s;
      $ltree_addr=$ltree;
      $dtree_addr=$dtree;
      $lx=0;
      var $0=$s_addr;
      var $last_lit=(($0+5792)|0);
      var $1=HEAP32[(($last_lit)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 31; break; }
    case 2: 
      __label__ = 3; break;
    case 3: 
      var $2=$lx;
      var $3=$s_addr;
      var $d_buf=(($3+5796)|0);
      var $4=HEAP32[(($d_buf)>>2)];
      var $arrayidx=(($4+($2<<1))|0);
      var $5=HEAPU16[(($arrayidx)>>1)];
      var $conv=(($5)&65535);
      $dist=$conv;
      var $6=$lx;
      var $inc=(($6+1)|0);
      $lx=$inc;
      var $7=$s_addr;
      var $l_buf=(($7+5784)|0);
      var $8=HEAP32[(($l_buf)>>2)];
      var $arrayidx1=(($8+$6)|0);
      var $9=HEAPU8[($arrayidx1)];
      var $conv2=(($9)&255);
      $lc=$conv2;
      var $10=$dist;
      var $cmp3=(($10)|0)==0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $11=$lc;
      var $12=$ltree_addr;
      var $arrayidx6=(($12+($11<<2))|0);
      var $dl=(($arrayidx6+2)|0);
      var $len7=$dl;
      var $13=HEAPU16[(($len7)>>1)];
      var $conv8=(($13)&65535);
      $len=$conv8;
      var $14=$s_addr;
      var $bi_valid=(($14+5820)|0);
      var $15=HEAP32[(($bi_valid)>>2)];
      var $16=$len;
      var $sub=((16-$16)|0);
      var $cmp9=(($15)|0) > (($sub)|0);
      if ($cmp9) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $17=$lc;
      var $18=$ltree_addr;
      var $arrayidx12=(($18+($17<<2))|0);
      var $fc=(($arrayidx12)|0);
      var $code13=$fc;
      var $19=HEAPU16[(($code13)>>1)];
      var $conv14=(($19)&65535);
      $val=$conv14;
      var $20=$val;
      var $conv15=(($20) & 65535);
      var $conv16=(($conv15)&65535);
      var $21=$s_addr;
      var $bi_valid17=(($21+5820)|0);
      var $22=HEAP32[(($bi_valid17)>>2)];
      var $shl=$conv16 << $22;
      var $23=$s_addr;
      var $bi_buf=(($23+5816)|0);
      var $24=HEAPU16[(($bi_buf)>>1)];
      var $conv18=(($24)&65535);
      var $or=$conv18 | $shl;
      var $conv19=(($or) & 65535);
      HEAP16[(($bi_buf)>>1)]=$conv19;
      var $25=$s_addr;
      var $bi_buf20=(($25+5816)|0);
      var $26=HEAPU16[(($bi_buf20)>>1)];
      var $conv21=(($26)&65535);
      var $and=$conv21 & 255;
      var $conv22=(($and) & 255);
      var $27=$s_addr;
      var $pending=(($27+20)|0);
      var $28=HEAPU32[(($pending)>>2)];
      var $inc23=(($28+1)|0);
      HEAP32[(($pending)>>2)]=$inc23;
      var $29=$s_addr;
      var $pending_buf=(($29+8)|0);
      var $30=HEAP32[(($pending_buf)>>2)];
      var $arrayidx24=(($30+$28)|0);
      HEAP8[($arrayidx24)]=$conv22;
      var $31=$s_addr;
      var $bi_buf25=(($31+5816)|0);
      var $32=HEAPU16[(($bi_buf25)>>1)];
      var $conv26=(($32)&65535);
      var $shr=$conv26 >> 8;
      var $conv27=(($shr) & 255);
      var $33=$s_addr;
      var $pending28=(($33+20)|0);
      var $34=HEAPU32[(($pending28)>>2)];
      var $inc29=(($34+1)|0);
      HEAP32[(($pending28)>>2)]=$inc29;
      var $35=$s_addr;
      var $pending_buf30=(($35+8)|0);
      var $36=HEAP32[(($pending_buf30)>>2)];
      var $arrayidx31=(($36+$34)|0);
      HEAP8[($arrayidx31)]=$conv27;
      var $37=$val;
      var $conv32=(($37) & 65535);
      var $conv33=(($conv32)&65535);
      var $38=$s_addr;
      var $bi_valid34=(($38+5820)|0);
      var $39=HEAP32[(($bi_valid34)>>2)];
      var $sub35=((16-$39)|0);
      var $shr36=$conv33 >> (($sub35)|0);
      var $conv37=(($shr36) & 65535);
      var $40=$s_addr;
      var $bi_buf38=(($40+5816)|0);
      HEAP16[(($bi_buf38)>>1)]=$conv37;
      var $41=$len;
      var $sub39=(($41-16)|0);
      var $42=$s_addr;
      var $bi_valid40=(($42+5820)|0);
      var $43=HEAP32[(($bi_valid40)>>2)];
      var $add=(($43+$sub39)|0);
      HEAP32[(($bi_valid40)>>2)]=$add;
      __label__ = 7; break;
    case 6: 
      var $44=$lc;
      var $45=$ltree_addr;
      var $arrayidx41=(($45+($44<<2))|0);
      var $fc42=(($arrayidx41)|0);
      var $code43=$fc42;
      var $46=HEAPU16[(($code43)>>1)];
      var $conv44=(($46)&65535);
      var $47=$s_addr;
      var $bi_valid45=(($47+5820)|0);
      var $48=HEAP32[(($bi_valid45)>>2)];
      var $shl46=$conv44 << $48;
      var $49=$s_addr;
      var $bi_buf47=(($49+5816)|0);
      var $50=HEAPU16[(($bi_buf47)>>1)];
      var $conv48=(($50)&65535);
      var $or49=$conv48 | $shl46;
      var $conv50=(($or49) & 65535);
      HEAP16[(($bi_buf47)>>1)]=$conv50;
      var $51=$len;
      var $52=$s_addr;
      var $bi_valid51=(($52+5820)|0);
      var $53=HEAP32[(($bi_valid51)>>2)];
      var $add52=(($53+$51)|0);
      HEAP32[(($bi_valid51)>>2)]=$add52;
      __label__ = 7; break;
    case 7: 
      __label__ = 28; break;
    case 8: 
      var $54=$lc;
      var $arrayidx54=((STRING_TABLE.__length_code+$54)|0);
      var $55=HEAPU8[($arrayidx54)];
      var $conv55=(($55)&255);
      $code=$conv55;
      var $56=$code;
      var $add57=(($56+256)|0);
      var $add58=(($add57+1)|0);
      var $57=$ltree_addr;
      var $arrayidx59=(($57+($add58<<2))|0);
      var $dl60=(($arrayidx59+2)|0);
      var $len61=$dl60;
      var $58=HEAPU16[(($len61)>>1)];
      var $conv62=(($58)&65535);
      $len56=$conv62;
      var $59=$s_addr;
      var $bi_valid63=(($59+5820)|0);
      var $60=HEAP32[(($bi_valid63)>>2)];
      var $61=$len56;
      var $sub64=((16-$61)|0);
      var $cmp65=(($60)|0) > (($sub64)|0);
      if ($cmp65) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $62=$code;
      var $add69=(($62+256)|0);
      var $add70=(($add69+1)|0);
      var $63=$ltree_addr;
      var $arrayidx71=(($63+($add70<<2))|0);
      var $fc72=(($arrayidx71)|0);
      var $code73=$fc72;
      var $64=HEAPU16[(($code73)>>1)];
      var $conv74=(($64)&65535);
      $val68=$conv74;
      var $65=$val68;
      var $conv75=(($65) & 65535);
      var $conv76=(($conv75)&65535);
      var $66=$s_addr;
      var $bi_valid77=(($66+5820)|0);
      var $67=HEAP32[(($bi_valid77)>>2)];
      var $shl78=$conv76 << $67;
      var $68=$s_addr;
      var $bi_buf79=(($68+5816)|0);
      var $69=HEAPU16[(($bi_buf79)>>1)];
      var $conv80=(($69)&65535);
      var $or81=$conv80 | $shl78;
      var $conv82=(($or81) & 65535);
      HEAP16[(($bi_buf79)>>1)]=$conv82;
      var $70=$s_addr;
      var $bi_buf83=(($70+5816)|0);
      var $71=HEAPU16[(($bi_buf83)>>1)];
      var $conv84=(($71)&65535);
      var $and85=$conv84 & 255;
      var $conv86=(($and85) & 255);
      var $72=$s_addr;
      var $pending87=(($72+20)|0);
      var $73=HEAPU32[(($pending87)>>2)];
      var $inc88=(($73+1)|0);
      HEAP32[(($pending87)>>2)]=$inc88;
      var $74=$s_addr;
      var $pending_buf89=(($74+8)|0);
      var $75=HEAP32[(($pending_buf89)>>2)];
      var $arrayidx90=(($75+$73)|0);
      HEAP8[($arrayidx90)]=$conv86;
      var $76=$s_addr;
      var $bi_buf91=(($76+5816)|0);
      var $77=HEAPU16[(($bi_buf91)>>1)];
      var $conv92=(($77)&65535);
      var $shr93=$conv92 >> 8;
      var $conv94=(($shr93) & 255);
      var $78=$s_addr;
      var $pending95=(($78+20)|0);
      var $79=HEAPU32[(($pending95)>>2)];
      var $inc96=(($79+1)|0);
      HEAP32[(($pending95)>>2)]=$inc96;
      var $80=$s_addr;
      var $pending_buf97=(($80+8)|0);
      var $81=HEAP32[(($pending_buf97)>>2)];
      var $arrayidx98=(($81+$79)|0);
      HEAP8[($arrayidx98)]=$conv94;
      var $82=$val68;
      var $conv99=(($82) & 65535);
      var $conv100=(($conv99)&65535);
      var $83=$s_addr;
      var $bi_valid101=(($83+5820)|0);
      var $84=HEAP32[(($bi_valid101)>>2)];
      var $sub102=((16-$84)|0);
      var $shr103=$conv100 >> (($sub102)|0);
      var $conv104=(($shr103) & 65535);
      var $85=$s_addr;
      var $bi_buf105=(($85+5816)|0);
      HEAP16[(($bi_buf105)>>1)]=$conv104;
      var $86=$len56;
      var $sub106=(($86-16)|0);
      var $87=$s_addr;
      var $bi_valid107=(($87+5820)|0);
      var $88=HEAP32[(($bi_valid107)>>2)];
      var $add108=(($88+$sub106)|0);
      HEAP32[(($bi_valid107)>>2)]=$add108;
      __label__ = 11; break;
    case 10: 
      var $89=$code;
      var $add110=(($89+256)|0);
      var $add111=(($add110+1)|0);
      var $90=$ltree_addr;
      var $arrayidx112=(($90+($add111<<2))|0);
      var $fc113=(($arrayidx112)|0);
      var $code114=$fc113;
      var $91=HEAPU16[(($code114)>>1)];
      var $conv115=(($91)&65535);
      var $92=$s_addr;
      var $bi_valid116=(($92+5820)|0);
      var $93=HEAP32[(($bi_valid116)>>2)];
      var $shl117=$conv115 << $93;
      var $94=$s_addr;
      var $bi_buf118=(($94+5816)|0);
      var $95=HEAPU16[(($bi_buf118)>>1)];
      var $conv119=(($95)&65535);
      var $or120=$conv119 | $shl117;
      var $conv121=(($or120) & 65535);
      HEAP16[(($bi_buf118)>>1)]=$conv121;
      var $96=$len56;
      var $97=$s_addr;
      var $bi_valid122=(($97+5820)|0);
      var $98=HEAP32[(($bi_valid122)>>2)];
      var $add123=(($98+$96)|0);
      HEAP32[(($bi_valid122)>>2)]=$add123;
      __label__ = 11; break;
    case 11: 
      var $99=$code;
      var $arrayidx125=((_extra_lbits+($99<<2))|0);
      var $100=HEAP32[(($arrayidx125)>>2)];
      $extra=$100;
      var $101=$extra;
      var $cmp126=(($101)|0)!=0;
      if ($cmp126) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $102=$code;
      var $arrayidx129=((_base_length+($102<<2))|0);
      var $103=HEAP32[(($arrayidx129)>>2)];
      var $104=$lc;
      var $sub130=(($104-$103)|0);
      $lc=$sub130;
      var $105=$extra;
      $len131=$105;
      var $106=$s_addr;
      var $bi_valid132=(($106+5820)|0);
      var $107=HEAP32[(($bi_valid132)>>2)];
      var $108=$len131;
      var $sub133=((16-$108)|0);
      var $cmp134=(($107)|0) > (($sub133)|0);
      if ($cmp134) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $109=$lc;
      $val137=$109;
      var $110=$val137;
      var $conv138=(($110) & 65535);
      var $conv139=(($conv138)&65535);
      var $111=$s_addr;
      var $bi_valid140=(($111+5820)|0);
      var $112=HEAP32[(($bi_valid140)>>2)];
      var $shl141=$conv139 << $112;
      var $113=$s_addr;
      var $bi_buf142=(($113+5816)|0);
      var $114=HEAPU16[(($bi_buf142)>>1)];
      var $conv143=(($114)&65535);
      var $or144=$conv143 | $shl141;
      var $conv145=(($or144) & 65535);
      HEAP16[(($bi_buf142)>>1)]=$conv145;
      var $115=$s_addr;
      var $bi_buf146=(($115+5816)|0);
      var $116=HEAPU16[(($bi_buf146)>>1)];
      var $conv147=(($116)&65535);
      var $and148=$conv147 & 255;
      var $conv149=(($and148) & 255);
      var $117=$s_addr;
      var $pending150=(($117+20)|0);
      var $118=HEAPU32[(($pending150)>>2)];
      var $inc151=(($118+1)|0);
      HEAP32[(($pending150)>>2)]=$inc151;
      var $119=$s_addr;
      var $pending_buf152=(($119+8)|0);
      var $120=HEAP32[(($pending_buf152)>>2)];
      var $arrayidx153=(($120+$118)|0);
      HEAP8[($arrayidx153)]=$conv149;
      var $121=$s_addr;
      var $bi_buf154=(($121+5816)|0);
      var $122=HEAPU16[(($bi_buf154)>>1)];
      var $conv155=(($122)&65535);
      var $shr156=$conv155 >> 8;
      var $conv157=(($shr156) & 255);
      var $123=$s_addr;
      var $pending158=(($123+20)|0);
      var $124=HEAPU32[(($pending158)>>2)];
      var $inc159=(($124+1)|0);
      HEAP32[(($pending158)>>2)]=$inc159;
      var $125=$s_addr;
      var $pending_buf160=(($125+8)|0);
      var $126=HEAP32[(($pending_buf160)>>2)];
      var $arrayidx161=(($126+$124)|0);
      HEAP8[($arrayidx161)]=$conv157;
      var $127=$val137;
      var $conv162=(($127) & 65535);
      var $conv163=(($conv162)&65535);
      var $128=$s_addr;
      var $bi_valid164=(($128+5820)|0);
      var $129=HEAP32[(($bi_valid164)>>2)];
      var $sub165=((16-$129)|0);
      var $shr166=$conv163 >> (($sub165)|0);
      var $conv167=(($shr166) & 65535);
      var $130=$s_addr;
      var $bi_buf168=(($130+5816)|0);
      HEAP16[(($bi_buf168)>>1)]=$conv167;
      var $131=$len131;
      var $sub169=(($131-16)|0);
      var $132=$s_addr;
      var $bi_valid170=(($132+5820)|0);
      var $133=HEAP32[(($bi_valid170)>>2)];
      var $add171=(($133+$sub169)|0);
      HEAP32[(($bi_valid170)>>2)]=$add171;
      __label__ = 15; break;
    case 14: 
      var $134=$lc;
      var $conv173=(($134) & 65535);
      var $conv174=(($conv173)&65535);
      var $135=$s_addr;
      var $bi_valid175=(($135+5820)|0);
      var $136=HEAP32[(($bi_valid175)>>2)];
      var $shl176=$conv174 << $136;
      var $137=$s_addr;
      var $bi_buf177=(($137+5816)|0);
      var $138=HEAPU16[(($bi_buf177)>>1)];
      var $conv178=(($138)&65535);
      var $or179=$conv178 | $shl176;
      var $conv180=(($or179) & 65535);
      HEAP16[(($bi_buf177)>>1)]=$conv180;
      var $139=$len131;
      var $140=$s_addr;
      var $bi_valid181=(($140+5820)|0);
      var $141=HEAP32[(($bi_valid181)>>2)];
      var $add182=(($141+$139)|0);
      HEAP32[(($bi_valid181)>>2)]=$add182;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $142=$dist;
      var $dec=(($142-1)|0);
      $dist=$dec;
      var $143=$dist;
      var $cmp185=(($143)>>>0) < 256;
      if ($cmp185) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $144=$dist;
      var $arrayidx187=((STRING_TABLE.__dist_code+$144)|0);
      var $145=HEAPU8[($arrayidx187)];
      var $conv188=(($145)&255);
      var $cond = $conv188;__label__ = 19; break;
    case 18: 
      var $146=$dist;
      var $shr189=$146 >>> 7;
      var $add190=(($shr189+256)|0);
      var $arrayidx191=((STRING_TABLE.__dist_code+$add190)|0);
      var $147=HEAPU8[($arrayidx191)];
      var $conv192=(($147)&255);
      var $cond = $conv192;__label__ = 19; break;
    case 19: 
      var $cond;
      $code=$cond;
      var $148=$code;
      var $149=$dtree_addr;
      var $arrayidx194=(($149+($148<<2))|0);
      var $dl195=(($arrayidx194+2)|0);
      var $len196=$dl195;
      var $150=HEAPU16[(($len196)>>1)];
      var $conv197=(($150)&65535);
      $len193=$conv197;
      var $151=$s_addr;
      var $bi_valid198=(($151+5820)|0);
      var $152=HEAP32[(($bi_valid198)>>2)];
      var $153=$len193;
      var $sub199=((16-$153)|0);
      var $cmp200=(($152)|0) > (($sub199)|0);
      if ($cmp200) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $154=$code;
      var $155=$dtree_addr;
      var $arrayidx204=(($155+($154<<2))|0);
      var $fc205=(($arrayidx204)|0);
      var $code206=$fc205;
      var $156=HEAPU16[(($code206)>>1)];
      var $conv207=(($156)&65535);
      $val203=$conv207;
      var $157=$val203;
      var $conv208=(($157) & 65535);
      var $conv209=(($conv208)&65535);
      var $158=$s_addr;
      var $bi_valid210=(($158+5820)|0);
      var $159=HEAP32[(($bi_valid210)>>2)];
      var $shl211=$conv209 << $159;
      var $160=$s_addr;
      var $bi_buf212=(($160+5816)|0);
      var $161=HEAPU16[(($bi_buf212)>>1)];
      var $conv213=(($161)&65535);
      var $or214=$conv213 | $shl211;
      var $conv215=(($or214) & 65535);
      HEAP16[(($bi_buf212)>>1)]=$conv215;
      var $162=$s_addr;
      var $bi_buf216=(($162+5816)|0);
      var $163=HEAPU16[(($bi_buf216)>>1)];
      var $conv217=(($163)&65535);
      var $and218=$conv217 & 255;
      var $conv219=(($and218) & 255);
      var $164=$s_addr;
      var $pending220=(($164+20)|0);
      var $165=HEAPU32[(($pending220)>>2)];
      var $inc221=(($165+1)|0);
      HEAP32[(($pending220)>>2)]=$inc221;
      var $166=$s_addr;
      var $pending_buf222=(($166+8)|0);
      var $167=HEAP32[(($pending_buf222)>>2)];
      var $arrayidx223=(($167+$165)|0);
      HEAP8[($arrayidx223)]=$conv219;
      var $168=$s_addr;
      var $bi_buf224=(($168+5816)|0);
      var $169=HEAPU16[(($bi_buf224)>>1)];
      var $conv225=(($169)&65535);
      var $shr226=$conv225 >> 8;
      var $conv227=(($shr226) & 255);
      var $170=$s_addr;
      var $pending228=(($170+20)|0);
      var $171=HEAPU32[(($pending228)>>2)];
      var $inc229=(($171+1)|0);
      HEAP32[(($pending228)>>2)]=$inc229;
      var $172=$s_addr;
      var $pending_buf230=(($172+8)|0);
      var $173=HEAP32[(($pending_buf230)>>2)];
      var $arrayidx231=(($173+$171)|0);
      HEAP8[($arrayidx231)]=$conv227;
      var $174=$val203;
      var $conv232=(($174) & 65535);
      var $conv233=(($conv232)&65535);
      var $175=$s_addr;
      var $bi_valid234=(($175+5820)|0);
      var $176=HEAP32[(($bi_valid234)>>2)];
      var $sub235=((16-$176)|0);
      var $shr236=$conv233 >> (($sub235)|0);
      var $conv237=(($shr236) & 65535);
      var $177=$s_addr;
      var $bi_buf238=(($177+5816)|0);
      HEAP16[(($bi_buf238)>>1)]=$conv237;
      var $178=$len193;
      var $sub239=(($178-16)|0);
      var $179=$s_addr;
      var $bi_valid240=(($179+5820)|0);
      var $180=HEAP32[(($bi_valid240)>>2)];
      var $add241=(($180+$sub239)|0);
      HEAP32[(($bi_valid240)>>2)]=$add241;
      __label__ = 22; break;
    case 21: 
      var $181=$code;
      var $182=$dtree_addr;
      var $arrayidx243=(($182+($181<<2))|0);
      var $fc244=(($arrayidx243)|0);
      var $code245=$fc244;
      var $183=HEAPU16[(($code245)>>1)];
      var $conv246=(($183)&65535);
      var $184=$s_addr;
      var $bi_valid247=(($184+5820)|0);
      var $185=HEAP32[(($bi_valid247)>>2)];
      var $shl248=$conv246 << $185;
      var $186=$s_addr;
      var $bi_buf249=(($186+5816)|0);
      var $187=HEAPU16[(($bi_buf249)>>1)];
      var $conv250=(($187)&65535);
      var $or251=$conv250 | $shl248;
      var $conv252=(($or251) & 65535);
      HEAP16[(($bi_buf249)>>1)]=$conv252;
      var $188=$len193;
      var $189=$s_addr;
      var $bi_valid253=(($189+5820)|0);
      var $190=HEAP32[(($bi_valid253)>>2)];
      var $add254=(($190+$188)|0);
      HEAP32[(($bi_valid253)>>2)]=$add254;
      __label__ = 22; break;
    case 22: 
      var $191=$code;
      var $arrayidx256=((_extra_dbits+($191<<2))|0);
      var $192=HEAP32[(($arrayidx256)>>2)];
      $extra=$192;
      var $193=$extra;
      var $cmp257=(($193)|0)!=0;
      if ($cmp257) { __label__ = 23; break; } else { __label__ = 27; break; }
    case 23: 
      var $194=$code;
      var $arrayidx260=((_base_dist+($194<<2))|0);
      var $195=HEAP32[(($arrayidx260)>>2)];
      var $196=$dist;
      var $sub261=(($196-$195)|0);
      $dist=$sub261;
      var $197=$extra;
      $len262=$197;
      var $198=$s_addr;
      var $bi_valid263=(($198+5820)|0);
      var $199=HEAP32[(($bi_valid263)>>2)];
      var $200=$len262;
      var $sub264=((16-$200)|0);
      var $cmp265=(($199)|0) > (($sub264)|0);
      if ($cmp265) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $201=$dist;
      $val268=$201;
      var $202=$val268;
      var $conv269=(($202) & 65535);
      var $conv270=(($conv269)&65535);
      var $203=$s_addr;
      var $bi_valid271=(($203+5820)|0);
      var $204=HEAP32[(($bi_valid271)>>2)];
      var $shl272=$conv270 << $204;
      var $205=$s_addr;
      var $bi_buf273=(($205+5816)|0);
      var $206=HEAPU16[(($bi_buf273)>>1)];
      var $conv274=(($206)&65535);
      var $or275=$conv274 | $shl272;
      var $conv276=(($or275) & 65535);
      HEAP16[(($bi_buf273)>>1)]=$conv276;
      var $207=$s_addr;
      var $bi_buf277=(($207+5816)|0);
      var $208=HEAPU16[(($bi_buf277)>>1)];
      var $conv278=(($208)&65535);
      var $and279=$conv278 & 255;
      var $conv280=(($and279) & 255);
      var $209=$s_addr;
      var $pending281=(($209+20)|0);
      var $210=HEAPU32[(($pending281)>>2)];
      var $inc282=(($210+1)|0);
      HEAP32[(($pending281)>>2)]=$inc282;
      var $211=$s_addr;
      var $pending_buf283=(($211+8)|0);
      var $212=HEAP32[(($pending_buf283)>>2)];
      var $arrayidx284=(($212+$210)|0);
      HEAP8[($arrayidx284)]=$conv280;
      var $213=$s_addr;
      var $bi_buf285=(($213+5816)|0);
      var $214=HEAPU16[(($bi_buf285)>>1)];
      var $conv286=(($214)&65535);
      var $shr287=$conv286 >> 8;
      var $conv288=(($shr287) & 255);
      var $215=$s_addr;
      var $pending289=(($215+20)|0);
      var $216=HEAPU32[(($pending289)>>2)];
      var $inc290=(($216+1)|0);
      HEAP32[(($pending289)>>2)]=$inc290;
      var $217=$s_addr;
      var $pending_buf291=(($217+8)|0);
      var $218=HEAP32[(($pending_buf291)>>2)];
      var $arrayidx292=(($218+$216)|0);
      HEAP8[($arrayidx292)]=$conv288;
      var $219=$val268;
      var $conv293=(($219) & 65535);
      var $conv294=(($conv293)&65535);
      var $220=$s_addr;
      var $bi_valid295=(($220+5820)|0);
      var $221=HEAP32[(($bi_valid295)>>2)];
      var $sub296=((16-$221)|0);
      var $shr297=$conv294 >> (($sub296)|0);
      var $conv298=(($shr297) & 65535);
      var $222=$s_addr;
      var $bi_buf299=(($222+5816)|0);
      HEAP16[(($bi_buf299)>>1)]=$conv298;
      var $223=$len262;
      var $sub300=(($223-16)|0);
      var $224=$s_addr;
      var $bi_valid301=(($224+5820)|0);
      var $225=HEAP32[(($bi_valid301)>>2)];
      var $add302=(($225+$sub300)|0);
      HEAP32[(($bi_valid301)>>2)]=$add302;
      __label__ = 26; break;
    case 25: 
      var $226=$dist;
      var $conv304=(($226) & 65535);
      var $conv305=(($conv304)&65535);
      var $227=$s_addr;
      var $bi_valid306=(($227+5820)|0);
      var $228=HEAP32[(($bi_valid306)>>2)];
      var $shl307=$conv305 << $228;
      var $229=$s_addr;
      var $bi_buf308=(($229+5816)|0);
      var $230=HEAPU16[(($bi_buf308)>>1)];
      var $conv309=(($230)&65535);
      var $or310=$conv309 | $shl307;
      var $conv311=(($or310) & 65535);
      HEAP16[(($bi_buf308)>>1)]=$conv311;
      var $231=$len262;
      var $232=$s_addr;
      var $bi_valid312=(($232+5820)|0);
      var $233=HEAP32[(($bi_valid312)>>2)];
      var $add313=(($233+$231)|0);
      HEAP32[(($bi_valid312)>>2)]=$add313;
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $234=$lx;
      var $235=$s_addr;
      var $last_lit317=(($235+5792)|0);
      var $236=HEAPU32[(($last_lit317)>>2)];
      var $cmp318=(($234)>>>0) < (($236)>>>0);
      if ($cmp318) { __label__ = 3; break; } else { __label__ = 30; break; }
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $237=$ltree_addr;
      var $arrayidx322=(($237+1024)|0);
      var $dl323=(($arrayidx322+2)|0);
      var $len324=$dl323;
      var $238=HEAPU16[(($len324)>>1)];
      var $conv325=(($238)&65535);
      $len321=$conv325;
      var $239=$s_addr;
      var $bi_valid326=(($239+5820)|0);
      var $240=HEAP32[(($bi_valid326)>>2)];
      var $241=$len321;
      var $sub327=((16-$241)|0);
      var $cmp328=(($240)|0) > (($sub327)|0);
      if ($cmp328) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $242=$ltree_addr;
      var $arrayidx332=(($242+1024)|0);
      var $fc333=(($arrayidx332)|0);
      var $code334=$fc333;
      var $243=HEAPU16[(($code334)>>1)];
      var $conv335=(($243)&65535);
      $val331=$conv335;
      var $244=$val331;
      var $conv336=(($244) & 65535);
      var $conv337=(($conv336)&65535);
      var $245=$s_addr;
      var $bi_valid338=(($245+5820)|0);
      var $246=HEAP32[(($bi_valid338)>>2)];
      var $shl339=$conv337 << $246;
      var $247=$s_addr;
      var $bi_buf340=(($247+5816)|0);
      var $248=HEAPU16[(($bi_buf340)>>1)];
      var $conv341=(($248)&65535);
      var $or342=$conv341 | $shl339;
      var $conv343=(($or342) & 65535);
      HEAP16[(($bi_buf340)>>1)]=$conv343;
      var $249=$s_addr;
      var $bi_buf344=(($249+5816)|0);
      var $250=HEAPU16[(($bi_buf344)>>1)];
      var $conv345=(($250)&65535);
      var $and346=$conv345 & 255;
      var $conv347=(($and346) & 255);
      var $251=$s_addr;
      var $pending348=(($251+20)|0);
      var $252=HEAPU32[(($pending348)>>2)];
      var $inc349=(($252+1)|0);
      HEAP32[(($pending348)>>2)]=$inc349;
      var $253=$s_addr;
      var $pending_buf350=(($253+8)|0);
      var $254=HEAP32[(($pending_buf350)>>2)];
      var $arrayidx351=(($254+$252)|0);
      HEAP8[($arrayidx351)]=$conv347;
      var $255=$s_addr;
      var $bi_buf352=(($255+5816)|0);
      var $256=HEAPU16[(($bi_buf352)>>1)];
      var $conv353=(($256)&65535);
      var $shr354=$conv353 >> 8;
      var $conv355=(($shr354) & 255);
      var $257=$s_addr;
      var $pending356=(($257+20)|0);
      var $258=HEAPU32[(($pending356)>>2)];
      var $inc357=(($258+1)|0);
      HEAP32[(($pending356)>>2)]=$inc357;
      var $259=$s_addr;
      var $pending_buf358=(($259+8)|0);
      var $260=HEAP32[(($pending_buf358)>>2)];
      var $arrayidx359=(($260+$258)|0);
      HEAP8[($arrayidx359)]=$conv355;
      var $261=$val331;
      var $conv360=(($261) & 65535);
      var $conv361=(($conv360)&65535);
      var $262=$s_addr;
      var $bi_valid362=(($262+5820)|0);
      var $263=HEAP32[(($bi_valid362)>>2)];
      var $sub363=((16-$263)|0);
      var $shr364=$conv361 >> (($sub363)|0);
      var $conv365=(($shr364) & 65535);
      var $264=$s_addr;
      var $bi_buf366=(($264+5816)|0);
      HEAP16[(($bi_buf366)>>1)]=$conv365;
      var $265=$len321;
      var $sub367=(($265-16)|0);
      var $266=$s_addr;
      var $bi_valid368=(($266+5820)|0);
      var $267=HEAP32[(($bi_valid368)>>2)];
      var $add369=(($267+$sub367)|0);
      HEAP32[(($bi_valid368)>>2)]=$add369;
      __label__ = 34; break;
    case 33: 
      var $268=$ltree_addr;
      var $arrayidx371=(($268+1024)|0);
      var $fc372=(($arrayidx371)|0);
      var $code373=$fc372;
      var $269=HEAPU16[(($code373)>>1)];
      var $conv374=(($269)&65535);
      var $270=$s_addr;
      var $bi_valid375=(($270+5820)|0);
      var $271=HEAP32[(($bi_valid375)>>2)];
      var $shl376=$conv374 << $271;
      var $272=$s_addr;
      var $bi_buf377=(($272+5816)|0);
      var $273=HEAPU16[(($bi_buf377)>>1)];
      var $conv378=(($273)&65535);
      var $or379=$conv378 | $shl376;
      var $conv380=(($or379) & 65535);
      HEAP16[(($bi_buf377)>>1)]=$conv380;
      var $274=$len321;
      var $275=$s_addr;
      var $bi_valid381=(($275+5820)|0);
      var $276=HEAP32[(($bi_valid381)>>2)];
      var $add382=(($276+$274)|0);
      HEAP32[(($bi_valid381)>>2)]=$add382;
      __label__ = 34; break;
    case 34: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_compress_block["X"]=1;

function _bi_windup($s) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      $s_addr=$s;
      var $0=$s_addr;
      var $bi_valid=(($0+5820)|0);
      var $1=HEAP32[(($bi_valid)>>2)];
      var $cmp=(($1)|0) > 8;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $2=$s_addr;
      var $bi_buf=(($2+5816)|0);
      var $3=HEAPU16[(($bi_buf)>>1)];
      var $conv=(($3)&65535);
      var $and=$conv & 255;
      var $conv1=(($and) & 255);
      var $4=$s_addr;
      var $pending=(($4+20)|0);
      var $5=HEAPU32[(($pending)>>2)];
      var $inc=(($5+1)|0);
      HEAP32[(($pending)>>2)]=$inc;
      var $6=$s_addr;
      var $pending_buf=(($6+8)|0);
      var $7=HEAP32[(($pending_buf)>>2)];
      var $arrayidx=(($7+$5)|0);
      HEAP8[($arrayidx)]=$conv1;
      var $8=$s_addr;
      var $bi_buf2=(($8+5816)|0);
      var $9=HEAPU16[(($bi_buf2)>>1)];
      var $conv3=(($9)&65535);
      var $shr=$conv3 >> 8;
      var $conv4=(($shr) & 255);
      var $10=$s_addr;
      var $pending5=(($10+20)|0);
      var $11=HEAPU32[(($pending5)>>2)];
      var $inc6=(($11+1)|0);
      HEAP32[(($pending5)>>2)]=$inc6;
      var $12=$s_addr;
      var $pending_buf7=(($12+8)|0);
      var $13=HEAP32[(($pending_buf7)>>2)];
      var $arrayidx8=(($13+$11)|0);
      HEAP8[($arrayidx8)]=$conv4;
      __label__ = 6; break;
    case 3: 
      var $14=$s_addr;
      var $bi_valid9=(($14+5820)|0);
      var $15=HEAP32[(($bi_valid9)>>2)];
      var $cmp10=(($15)|0) > 0;
      if ($cmp10) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $16=$s_addr;
      var $bi_buf13=(($16+5816)|0);
      var $17=HEAP16[(($bi_buf13)>>1)];
      var $conv14=(($17) & 255);
      var $18=$s_addr;
      var $pending15=(($18+20)|0);
      var $19=HEAP32[(($pending15)>>2)];
      var $inc16=(($19+1)|0);
      HEAP32[(($pending15)>>2)]=$inc16;
      var $20=$s_addr;
      var $pending_buf17=(($20+8)|0);
      var $21=HEAP32[(($pending_buf17)>>2)];
      var $arrayidx18=(($21+$19)|0);
      HEAP8[($arrayidx18)]=$conv14;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $22=$s_addr;
      var $bi_buf20=(($22+5816)|0);
      HEAP16[(($bi_buf20)>>1)]=0;
      var $23=$s_addr;
      var $bi_valid21=(($23+5820)|0);
      HEAP32[(($bi_valid21)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_bi_windup["X"]=1;

function _send_all_trees($s, $lcodes, $dcodes, $blcodes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $lcodes_addr;
      var $dcodes_addr;
      var $blcodes_addr;
      var $rank;
      var $len;
      var $val;
      var $len36;
      var $val42;
      var $len91;
      var $val97;
      var $len148;
      var $val154;
      $s_addr=$s;
      $lcodes_addr=$lcodes;
      $dcodes_addr=$dcodes;
      $blcodes_addr=$blcodes;
      $len=5;
      var $0=$s_addr;
      var $bi_valid=(($0+5820)|0);
      var $1=HEAP32[(($bi_valid)>>2)];
      var $2=$len;
      var $sub=((16-$2)|0);
      var $cmp=(($1)|0) > (($sub)|0);
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      var $3=$lcodes_addr;
      var $sub1=(($3-257)|0);
      $val=$sub1;
      var $4=$val;
      var $conv=(($4) & 65535);
      var $conv2=(($conv)&65535);
      var $5=$s_addr;
      var $bi_valid3=(($5+5820)|0);
      var $6=HEAP32[(($bi_valid3)>>2)];
      var $shl=$conv2 << $6;
      var $7=$s_addr;
      var $bi_buf=(($7+5816)|0);
      var $8=HEAPU16[(($bi_buf)>>1)];
      var $conv4=(($8)&65535);
      var $or=$conv4 | $shl;
      var $conv5=(($or) & 65535);
      HEAP16[(($bi_buf)>>1)]=$conv5;
      var $9=$s_addr;
      var $bi_buf6=(($9+5816)|0);
      var $10=HEAPU16[(($bi_buf6)>>1)];
      var $conv7=(($10)&65535);
      var $and=$conv7 & 255;
      var $conv8=(($and) & 255);
      var $11=$s_addr;
      var $pending=(($11+20)|0);
      var $12=HEAPU32[(($pending)>>2)];
      var $inc=(($12+1)|0);
      HEAP32[(($pending)>>2)]=$inc;
      var $13=$s_addr;
      var $pending_buf=(($13+8)|0);
      var $14=HEAP32[(($pending_buf)>>2)];
      var $arrayidx=(($14+$12)|0);
      HEAP8[($arrayidx)]=$conv8;
      var $15=$s_addr;
      var $bi_buf9=(($15+5816)|0);
      var $16=HEAPU16[(($bi_buf9)>>1)];
      var $conv10=(($16)&65535);
      var $shr=$conv10 >> 8;
      var $conv11=(($shr) & 255);
      var $17=$s_addr;
      var $pending12=(($17+20)|0);
      var $18=HEAPU32[(($pending12)>>2)];
      var $inc13=(($18+1)|0);
      HEAP32[(($pending12)>>2)]=$inc13;
      var $19=$s_addr;
      var $pending_buf14=(($19+8)|0);
      var $20=HEAP32[(($pending_buf14)>>2)];
      var $arrayidx15=(($20+$18)|0);
      HEAP8[($arrayidx15)]=$conv11;
      var $21=$val;
      var $conv16=(($21) & 65535);
      var $conv17=(($conv16)&65535);
      var $22=$s_addr;
      var $bi_valid18=(($22+5820)|0);
      var $23=HEAP32[(($bi_valid18)>>2)];
      var $sub19=((16-$23)|0);
      var $shr20=$conv17 >> (($sub19)|0);
      var $conv21=(($shr20) & 65535);
      var $24=$s_addr;
      var $bi_buf22=(($24+5816)|0);
      HEAP16[(($bi_buf22)>>1)]=$conv21;
      var $25=$len;
      var $sub23=(($25-16)|0);
      var $26=$s_addr;
      var $bi_valid24=(($26+5820)|0);
      var $27=HEAP32[(($bi_valid24)>>2)];
      var $add=(($27+$sub23)|0);
      HEAP32[(($bi_valid24)>>2)]=$add;
      __label__ = 4; break;
    case 3: 
      var $28=$lcodes_addr;
      var $sub25=(($28-257)|0);
      var $conv26=(($sub25) & 65535);
      var $conv27=(($conv26)&65535);
      var $29=$s_addr;
      var $bi_valid28=(($29+5820)|0);
      var $30=HEAP32[(($bi_valid28)>>2)];
      var $shl29=$conv27 << $30;
      var $31=$s_addr;
      var $bi_buf30=(($31+5816)|0);
      var $32=HEAPU16[(($bi_buf30)>>1)];
      var $conv31=(($32)&65535);
      var $or32=$conv31 | $shl29;
      var $conv33=(($or32) & 65535);
      HEAP16[(($bi_buf30)>>1)]=$conv33;
      var $33=$len;
      var $34=$s_addr;
      var $bi_valid34=(($34+5820)|0);
      var $35=HEAP32[(($bi_valid34)>>2)];
      var $add35=(($35+$33)|0);
      HEAP32[(($bi_valid34)>>2)]=$add35;
      __label__ = 4; break;
    case 4: 
      $len36=5;
      var $36=$s_addr;
      var $bi_valid37=(($36+5820)|0);
      var $37=HEAP32[(($bi_valid37)>>2)];
      var $38=$len36;
      var $sub38=((16-$38)|0);
      var $cmp39=(($37)|0) > (($sub38)|0);
      if ($cmp39) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $39=$dcodes_addr;
      var $sub43=(($39-1)|0);
      $val42=$sub43;
      var $40=$val42;
      var $conv44=(($40) & 65535);
      var $conv45=(($conv44)&65535);
      var $41=$s_addr;
      var $bi_valid46=(($41+5820)|0);
      var $42=HEAP32[(($bi_valid46)>>2)];
      var $shl47=$conv45 << $42;
      var $43=$s_addr;
      var $bi_buf48=(($43+5816)|0);
      var $44=HEAPU16[(($bi_buf48)>>1)];
      var $conv49=(($44)&65535);
      var $or50=$conv49 | $shl47;
      var $conv51=(($or50) & 65535);
      HEAP16[(($bi_buf48)>>1)]=$conv51;
      var $45=$s_addr;
      var $bi_buf52=(($45+5816)|0);
      var $46=HEAPU16[(($bi_buf52)>>1)];
      var $conv53=(($46)&65535);
      var $and54=$conv53 & 255;
      var $conv55=(($and54) & 255);
      var $47=$s_addr;
      var $pending56=(($47+20)|0);
      var $48=HEAPU32[(($pending56)>>2)];
      var $inc57=(($48+1)|0);
      HEAP32[(($pending56)>>2)]=$inc57;
      var $49=$s_addr;
      var $pending_buf58=(($49+8)|0);
      var $50=HEAP32[(($pending_buf58)>>2)];
      var $arrayidx59=(($50+$48)|0);
      HEAP8[($arrayidx59)]=$conv55;
      var $51=$s_addr;
      var $bi_buf60=(($51+5816)|0);
      var $52=HEAPU16[(($bi_buf60)>>1)];
      var $conv61=(($52)&65535);
      var $shr62=$conv61 >> 8;
      var $conv63=(($shr62) & 255);
      var $53=$s_addr;
      var $pending64=(($53+20)|0);
      var $54=HEAPU32[(($pending64)>>2)];
      var $inc65=(($54+1)|0);
      HEAP32[(($pending64)>>2)]=$inc65;
      var $55=$s_addr;
      var $pending_buf66=(($55+8)|0);
      var $56=HEAP32[(($pending_buf66)>>2)];
      var $arrayidx67=(($56+$54)|0);
      HEAP8[($arrayidx67)]=$conv63;
      var $57=$val42;
      var $conv68=(($57) & 65535);
      var $conv69=(($conv68)&65535);
      var $58=$s_addr;
      var $bi_valid70=(($58+5820)|0);
      var $59=HEAP32[(($bi_valid70)>>2)];
      var $sub71=((16-$59)|0);
      var $shr72=$conv69 >> (($sub71)|0);
      var $conv73=(($shr72) & 65535);
      var $60=$s_addr;
      var $bi_buf74=(($60+5816)|0);
      HEAP16[(($bi_buf74)>>1)]=$conv73;
      var $61=$len36;
      var $sub75=(($61-16)|0);
      var $62=$s_addr;
      var $bi_valid76=(($62+5820)|0);
      var $63=HEAP32[(($bi_valid76)>>2)];
      var $add77=(($63+$sub75)|0);
      HEAP32[(($bi_valid76)>>2)]=$add77;
      __label__ = 7; break;
    case 6: 
      var $64=$dcodes_addr;
      var $sub79=(($64-1)|0);
      var $conv80=(($sub79) & 65535);
      var $conv81=(($conv80)&65535);
      var $65=$s_addr;
      var $bi_valid82=(($65+5820)|0);
      var $66=HEAP32[(($bi_valid82)>>2)];
      var $shl83=$conv81 << $66;
      var $67=$s_addr;
      var $bi_buf84=(($67+5816)|0);
      var $68=HEAPU16[(($bi_buf84)>>1)];
      var $conv85=(($68)&65535);
      var $or86=$conv85 | $shl83;
      var $conv87=(($or86) & 65535);
      HEAP16[(($bi_buf84)>>1)]=$conv87;
      var $69=$len36;
      var $70=$s_addr;
      var $bi_valid88=(($70+5820)|0);
      var $71=HEAP32[(($bi_valid88)>>2)];
      var $add89=(($71+$69)|0);
      HEAP32[(($bi_valid88)>>2)]=$add89;
      __label__ = 7; break;
    case 7: 
      $len91=4;
      var $72=$s_addr;
      var $bi_valid92=(($72+5820)|0);
      var $73=HEAP32[(($bi_valid92)>>2)];
      var $74=$len91;
      var $sub93=((16-$74)|0);
      var $cmp94=(($73)|0) > (($sub93)|0);
      if ($cmp94) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $75=$blcodes_addr;
      var $sub98=(($75-4)|0);
      $val97=$sub98;
      var $76=$val97;
      var $conv99=(($76) & 65535);
      var $conv100=(($conv99)&65535);
      var $77=$s_addr;
      var $bi_valid101=(($77+5820)|0);
      var $78=HEAP32[(($bi_valid101)>>2)];
      var $shl102=$conv100 << $78;
      var $79=$s_addr;
      var $bi_buf103=(($79+5816)|0);
      var $80=HEAPU16[(($bi_buf103)>>1)];
      var $conv104=(($80)&65535);
      var $or105=$conv104 | $shl102;
      var $conv106=(($or105) & 65535);
      HEAP16[(($bi_buf103)>>1)]=$conv106;
      var $81=$s_addr;
      var $bi_buf107=(($81+5816)|0);
      var $82=HEAPU16[(($bi_buf107)>>1)];
      var $conv108=(($82)&65535);
      var $and109=$conv108 & 255;
      var $conv110=(($and109) & 255);
      var $83=$s_addr;
      var $pending111=(($83+20)|0);
      var $84=HEAPU32[(($pending111)>>2)];
      var $inc112=(($84+1)|0);
      HEAP32[(($pending111)>>2)]=$inc112;
      var $85=$s_addr;
      var $pending_buf113=(($85+8)|0);
      var $86=HEAP32[(($pending_buf113)>>2)];
      var $arrayidx114=(($86+$84)|0);
      HEAP8[($arrayidx114)]=$conv110;
      var $87=$s_addr;
      var $bi_buf115=(($87+5816)|0);
      var $88=HEAPU16[(($bi_buf115)>>1)];
      var $conv116=(($88)&65535);
      var $shr117=$conv116 >> 8;
      var $conv118=(($shr117) & 255);
      var $89=$s_addr;
      var $pending119=(($89+20)|0);
      var $90=HEAPU32[(($pending119)>>2)];
      var $inc120=(($90+1)|0);
      HEAP32[(($pending119)>>2)]=$inc120;
      var $91=$s_addr;
      var $pending_buf121=(($91+8)|0);
      var $92=HEAP32[(($pending_buf121)>>2)];
      var $arrayidx122=(($92+$90)|0);
      HEAP8[($arrayidx122)]=$conv118;
      var $93=$val97;
      var $conv123=(($93) & 65535);
      var $conv124=(($conv123)&65535);
      var $94=$s_addr;
      var $bi_valid125=(($94+5820)|0);
      var $95=HEAP32[(($bi_valid125)>>2)];
      var $sub126=((16-$95)|0);
      var $shr127=$conv124 >> (($sub126)|0);
      var $conv128=(($shr127) & 65535);
      var $96=$s_addr;
      var $bi_buf129=(($96+5816)|0);
      HEAP16[(($bi_buf129)>>1)]=$conv128;
      var $97=$len91;
      var $sub130=(($97-16)|0);
      var $98=$s_addr;
      var $bi_valid131=(($98+5820)|0);
      var $99=HEAP32[(($bi_valid131)>>2)];
      var $add132=(($99+$sub130)|0);
      HEAP32[(($bi_valid131)>>2)]=$add132;
      __label__ = 10; break;
    case 9: 
      var $100=$blcodes_addr;
      var $sub134=(($100-4)|0);
      var $conv135=(($sub134) & 65535);
      var $conv136=(($conv135)&65535);
      var $101=$s_addr;
      var $bi_valid137=(($101+5820)|0);
      var $102=HEAP32[(($bi_valid137)>>2)];
      var $shl138=$conv136 << $102;
      var $103=$s_addr;
      var $bi_buf139=(($103+5816)|0);
      var $104=HEAPU16[(($bi_buf139)>>1)];
      var $conv140=(($104)&65535);
      var $or141=$conv140 | $shl138;
      var $conv142=(($or141) & 65535);
      HEAP16[(($bi_buf139)>>1)]=$conv142;
      var $105=$len91;
      var $106=$s_addr;
      var $bi_valid143=(($106+5820)|0);
      var $107=HEAP32[(($bi_valid143)>>2)];
      var $add144=(($107+$105)|0);
      HEAP32[(($bi_valid143)>>2)]=$add144;
      __label__ = 10; break;
    case 10: 
      $rank=0;
      __label__ = 11; break;
    case 11: 
      var $108=$rank;
      var $109=$blcodes_addr;
      var $cmp146=(($108)|0) < (($109)|0);
      if ($cmp146) { __label__ = 12; break; } else { __label__ = 17; break; }
    case 12: 
      $len148=3;
      var $110=$s_addr;
      var $bi_valid149=(($110+5820)|0);
      var $111=HEAP32[(($bi_valid149)>>2)];
      var $112=$len148;
      var $sub150=((16-$112)|0);
      var $cmp151=(($111)|0) > (($sub150)|0);
      if ($cmp151) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $113=$rank;
      var $arrayidx155=((STRING_TABLE._bl_order+$113)|0);
      var $114=HEAPU8[($arrayidx155)];
      var $idxprom=(($114)&255);
      var $115=$s_addr;
      var $bl_tree=(($115+2684)|0);
      var $arrayidx156=(($bl_tree+($idxprom<<2))|0);
      var $dl=(($arrayidx156+2)|0);
      var $len157=$dl;
      var $116=HEAPU16[(($len157)>>1)];
      var $conv158=(($116)&65535);
      $val154=$conv158;
      var $117=$val154;
      var $conv159=(($117) & 65535);
      var $conv160=(($conv159)&65535);
      var $118=$s_addr;
      var $bi_valid161=(($118+5820)|0);
      var $119=HEAP32[(($bi_valid161)>>2)];
      var $shl162=$conv160 << $119;
      var $120=$s_addr;
      var $bi_buf163=(($120+5816)|0);
      var $121=HEAPU16[(($bi_buf163)>>1)];
      var $conv164=(($121)&65535);
      var $or165=$conv164 | $shl162;
      var $conv166=(($or165) & 65535);
      HEAP16[(($bi_buf163)>>1)]=$conv166;
      var $122=$s_addr;
      var $bi_buf167=(($122+5816)|0);
      var $123=HEAPU16[(($bi_buf167)>>1)];
      var $conv168=(($123)&65535);
      var $and169=$conv168 & 255;
      var $conv170=(($and169) & 255);
      var $124=$s_addr;
      var $pending171=(($124+20)|0);
      var $125=HEAPU32[(($pending171)>>2)];
      var $inc172=(($125+1)|0);
      HEAP32[(($pending171)>>2)]=$inc172;
      var $126=$s_addr;
      var $pending_buf173=(($126+8)|0);
      var $127=HEAP32[(($pending_buf173)>>2)];
      var $arrayidx174=(($127+$125)|0);
      HEAP8[($arrayidx174)]=$conv170;
      var $128=$s_addr;
      var $bi_buf175=(($128+5816)|0);
      var $129=HEAPU16[(($bi_buf175)>>1)];
      var $conv176=(($129)&65535);
      var $shr177=$conv176 >> 8;
      var $conv178=(($shr177) & 255);
      var $130=$s_addr;
      var $pending179=(($130+20)|0);
      var $131=HEAPU32[(($pending179)>>2)];
      var $inc180=(($131+1)|0);
      HEAP32[(($pending179)>>2)]=$inc180;
      var $132=$s_addr;
      var $pending_buf181=(($132+8)|0);
      var $133=HEAP32[(($pending_buf181)>>2)];
      var $arrayidx182=(($133+$131)|0);
      HEAP8[($arrayidx182)]=$conv178;
      var $134=$val154;
      var $conv183=(($134) & 65535);
      var $conv184=(($conv183)&65535);
      var $135=$s_addr;
      var $bi_valid185=(($135+5820)|0);
      var $136=HEAP32[(($bi_valid185)>>2)];
      var $sub186=((16-$136)|0);
      var $shr187=$conv184 >> (($sub186)|0);
      var $conv188=(($shr187) & 65535);
      var $137=$s_addr;
      var $bi_buf189=(($137+5816)|0);
      HEAP16[(($bi_buf189)>>1)]=$conv188;
      var $138=$len148;
      var $sub190=(($138-16)|0);
      var $139=$s_addr;
      var $bi_valid191=(($139+5820)|0);
      var $140=HEAP32[(($bi_valid191)>>2)];
      var $add192=(($140+$sub190)|0);
      HEAP32[(($bi_valid191)>>2)]=$add192;
      __label__ = 15; break;
    case 14: 
      var $141=$rank;
      var $arrayidx194=((STRING_TABLE._bl_order+$141)|0);
      var $142=HEAPU8[($arrayidx194)];
      var $idxprom195=(($142)&255);
      var $143=$s_addr;
      var $bl_tree196=(($143+2684)|0);
      var $arrayidx197=(($bl_tree196+($idxprom195<<2))|0);
      var $dl198=(($arrayidx197+2)|0);
      var $len199=$dl198;
      var $144=HEAPU16[(($len199)>>1)];
      var $conv200=(($144)&65535);
      var $145=$s_addr;
      var $bi_valid201=(($145+5820)|0);
      var $146=HEAP32[(($bi_valid201)>>2)];
      var $shl202=$conv200 << $146;
      var $147=$s_addr;
      var $bi_buf203=(($147+5816)|0);
      var $148=HEAPU16[(($bi_buf203)>>1)];
      var $conv204=(($148)&65535);
      var $or205=$conv204 | $shl202;
      var $conv206=(($or205) & 65535);
      HEAP16[(($bi_buf203)>>1)]=$conv206;
      var $149=$len148;
      var $150=$s_addr;
      var $bi_valid207=(($150+5820)|0);
      var $151=HEAP32[(($bi_valid207)>>2)];
      var $add208=(($151+$149)|0);
      HEAP32[(($bi_valid207)>>2)]=$add208;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $152=$rank;
      var $inc210=(($152+1)|0);
      $rank=$inc210;
      __label__ = 11; break;
    case 17: 
      var $153=$s_addr;
      var $154=$s_addr;
      var $dyn_ltree=(($154+148)|0);
      var $arraydecay=(($dyn_ltree)|0);
      var $155=$lcodes_addr;
      var $sub211=(($155-1)|0);
      _send_tree($153, $arraydecay, $sub211);
      var $156=$s_addr;
      var $157=$s_addr;
      var $dyn_dtree=(($157+2440)|0);
      var $arraydecay212=(($dyn_dtree)|0);
      var $158=$dcodes_addr;
      var $sub213=(($158-1)|0);
      _send_tree($156, $arraydecay212, $sub213);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_send_all_trees["X"]=1;

function _send_tree($s, $tree, $max_code) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $tree_addr;
      var $max_code_addr;
      var $n;
      var $prevlen;
      var $curlen;
      var $nextlen;
      var $count;
      var $max_count;
      var $min_count;
      var $len16;
      var $val;
      var $len78;
      var $val89;
      var $len146;
      var $val157;
      var $len212;
      var $val218;
      var $len271;
      var $val282;
      var $len337;
      var $val343;
      var $len393;
      var $val404;
      var $len459;
      var $val465;
      $s_addr=$s;
      $tree_addr=$tree;
      $max_code_addr=$max_code;
      $prevlen=-1;
      var $0=$tree_addr;
      var $arrayidx=(($0)|0);
      var $dl=(($arrayidx+2)|0);
      var $len=$dl;
      var $1=HEAPU16[(($len)>>1)];
      var $conv=(($1)&65535);
      $nextlen=$conv;
      $count=0;
      $max_count=7;
      $min_count=4;
      var $2=$nextlen;
      var $cmp=(($2)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $max_count=138;
      $min_count=3;
      __label__ = 3; break;
    case 3: 
      $n=0;
      __label__ = 4; break;
    case 4: 
      var $3=$n;
      var $4=$max_code_addr;
      var $cmp2=(($3)|0) <= (($4)|0);
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 55; break; }
    case 5: 
      var $5=$nextlen;
      $curlen=$5;
      var $6=$n;
      var $add=(($6+1)|0);
      var $7=$tree_addr;
      var $arrayidx4=(($7+($add<<2))|0);
      var $dl5=(($arrayidx4+2)|0);
      var $len6=$dl5;
      var $8=HEAPU16[(($len6)>>1)];
      var $conv7=(($8)&65535);
      $nextlen=$conv7;
      var $9=$count;
      var $inc=(($9+1)|0);
      $count=$inc;
      var $10=$max_count;
      var $cmp8=(($inc)|0) < (($10)|0);
      if ($cmp8) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $11=$curlen;
      var $12=$nextlen;
      var $cmp10=(($11)|0)==(($12)|0);
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 54; break;
    case 8: 
      var $13=$count;
      var $14=$min_count;
      var $cmp13=(($13)|0) < (($14)|0);
      if ($cmp13) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $15=$curlen;
      var $16=$s_addr;
      var $bl_tree=(($16+2684)|0);
      var $arrayidx17=(($bl_tree+($15<<2))|0);
      var $dl18=(($arrayidx17+2)|0);
      var $len19=$dl18;
      var $17=HEAPU16[(($len19)>>1)];
      var $conv20=(($17)&65535);
      $len16=$conv20;
      var $18=$s_addr;
      var $bi_valid=(($18+5820)|0);
      var $19=HEAP32[(($bi_valid)>>2)];
      var $20=$len16;
      var $sub=((16-$20)|0);
      var $cmp21=(($19)|0) > (($sub)|0);
      if ($cmp21) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $21=$curlen;
      var $22=$s_addr;
      var $bl_tree24=(($22+2684)|0);
      var $arrayidx25=(($bl_tree24+($21<<2))|0);
      var $fc=(($arrayidx25)|0);
      var $code=$fc;
      var $23=HEAPU16[(($code)>>1)];
      var $conv26=(($23)&65535);
      $val=$conv26;
      var $24=$val;
      var $conv27=(($24) & 65535);
      var $conv28=(($conv27)&65535);
      var $25=$s_addr;
      var $bi_valid29=(($25+5820)|0);
      var $26=HEAP32[(($bi_valid29)>>2)];
      var $shl=$conv28 << $26;
      var $27=$s_addr;
      var $bi_buf=(($27+5816)|0);
      var $28=HEAPU16[(($bi_buf)>>1)];
      var $conv30=(($28)&65535);
      var $or=$conv30 | $shl;
      var $conv31=(($or) & 65535);
      HEAP16[(($bi_buf)>>1)]=$conv31;
      var $29=$s_addr;
      var $bi_buf32=(($29+5816)|0);
      var $30=HEAPU16[(($bi_buf32)>>1)];
      var $conv33=(($30)&65535);
      var $and=$conv33 & 255;
      var $conv34=(($and) & 255);
      var $31=$s_addr;
      var $pending=(($31+20)|0);
      var $32=HEAPU32[(($pending)>>2)];
      var $inc35=(($32+1)|0);
      HEAP32[(($pending)>>2)]=$inc35;
      var $33=$s_addr;
      var $pending_buf=(($33+8)|0);
      var $34=HEAP32[(($pending_buf)>>2)];
      var $arrayidx36=(($34+$32)|0);
      HEAP8[($arrayidx36)]=$conv34;
      var $35=$s_addr;
      var $bi_buf37=(($35+5816)|0);
      var $36=HEAPU16[(($bi_buf37)>>1)];
      var $conv38=(($36)&65535);
      var $shr=$conv38 >> 8;
      var $conv39=(($shr) & 255);
      var $37=$s_addr;
      var $pending40=(($37+20)|0);
      var $38=HEAPU32[(($pending40)>>2)];
      var $inc41=(($38+1)|0);
      HEAP32[(($pending40)>>2)]=$inc41;
      var $39=$s_addr;
      var $pending_buf42=(($39+8)|0);
      var $40=HEAP32[(($pending_buf42)>>2)];
      var $arrayidx43=(($40+$38)|0);
      HEAP8[($arrayidx43)]=$conv39;
      var $41=$val;
      var $conv44=(($41) & 65535);
      var $conv45=(($conv44)&65535);
      var $42=$s_addr;
      var $bi_valid46=(($42+5820)|0);
      var $43=HEAP32[(($bi_valid46)>>2)];
      var $sub47=((16-$43)|0);
      var $shr48=$conv45 >> (($sub47)|0);
      var $conv49=(($shr48) & 65535);
      var $44=$s_addr;
      var $bi_buf50=(($44+5816)|0);
      HEAP16[(($bi_buf50)>>1)]=$conv49;
      var $45=$len16;
      var $sub51=(($45-16)|0);
      var $46=$s_addr;
      var $bi_valid52=(($46+5820)|0);
      var $47=HEAP32[(($bi_valid52)>>2)];
      var $add53=(($47+$sub51)|0);
      HEAP32[(($bi_valid52)>>2)]=$add53;
      __label__ = 13; break;
    case 12: 
      var $48=$curlen;
      var $49=$s_addr;
      var $bl_tree55=(($49+2684)|0);
      var $arrayidx56=(($bl_tree55+($48<<2))|0);
      var $fc57=(($arrayidx56)|0);
      var $code58=$fc57;
      var $50=HEAPU16[(($code58)>>1)];
      var $conv59=(($50)&65535);
      var $51=$s_addr;
      var $bi_valid60=(($51+5820)|0);
      var $52=HEAP32[(($bi_valid60)>>2)];
      var $shl61=$conv59 << $52;
      var $53=$s_addr;
      var $bi_buf62=(($53+5816)|0);
      var $54=HEAPU16[(($bi_buf62)>>1)];
      var $conv63=(($54)&65535);
      var $or64=$conv63 | $shl61;
      var $conv65=(($or64) & 65535);
      HEAP16[(($bi_buf62)>>1)]=$conv65;
      var $55=$len16;
      var $56=$s_addr;
      var $bi_valid66=(($56+5820)|0);
      var $57=HEAP32[(($bi_valid66)>>2)];
      var $add67=(($57+$55)|0);
      HEAP32[(($bi_valid66)>>2)]=$add67;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $58=$count;
      var $dec=(($58-1)|0);
      $count=$dec;
      var $cmp69=(($dec)|0)!=0;
      if ($cmp69) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 15: 
      __label__ = 46; break;
    case 16: 
      var $59=$curlen;
      var $cmp72=(($59)|0)!=0;
      if ($cmp72) { __label__ = 17; break; } else { __label__ = 29; break; }
    case 17: 
      var $60=$curlen;
      var $61=$prevlen;
      var $cmp75=(($60)|0)!=(($61)|0);
      if ($cmp75) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: 
      var $62=$curlen;
      var $63=$s_addr;
      var $bl_tree79=(($63+2684)|0);
      var $arrayidx80=(($bl_tree79+($62<<2))|0);
      var $dl81=(($arrayidx80+2)|0);
      var $len82=$dl81;
      var $64=HEAPU16[(($len82)>>1)];
      var $conv83=(($64)&65535);
      $len78=$conv83;
      var $65=$s_addr;
      var $bi_valid84=(($65+5820)|0);
      var $66=HEAP32[(($bi_valid84)>>2)];
      var $67=$len78;
      var $sub85=((16-$67)|0);
      var $cmp86=(($66)|0) > (($sub85)|0);
      if ($cmp86) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $68=$curlen;
      var $69=$s_addr;
      var $bl_tree90=(($69+2684)|0);
      var $arrayidx91=(($bl_tree90+($68<<2))|0);
      var $fc92=(($arrayidx91)|0);
      var $code93=$fc92;
      var $70=HEAPU16[(($code93)>>1)];
      var $conv94=(($70)&65535);
      $val89=$conv94;
      var $71=$val89;
      var $conv95=(($71) & 65535);
      var $conv96=(($conv95)&65535);
      var $72=$s_addr;
      var $bi_valid97=(($72+5820)|0);
      var $73=HEAP32[(($bi_valid97)>>2)];
      var $shl98=$conv96 << $73;
      var $74=$s_addr;
      var $bi_buf99=(($74+5816)|0);
      var $75=HEAPU16[(($bi_buf99)>>1)];
      var $conv100=(($75)&65535);
      var $or101=$conv100 | $shl98;
      var $conv102=(($or101) & 65535);
      HEAP16[(($bi_buf99)>>1)]=$conv102;
      var $76=$s_addr;
      var $bi_buf103=(($76+5816)|0);
      var $77=HEAPU16[(($bi_buf103)>>1)];
      var $conv104=(($77)&65535);
      var $and105=$conv104 & 255;
      var $conv106=(($and105) & 255);
      var $78=$s_addr;
      var $pending107=(($78+20)|0);
      var $79=HEAPU32[(($pending107)>>2)];
      var $inc108=(($79+1)|0);
      HEAP32[(($pending107)>>2)]=$inc108;
      var $80=$s_addr;
      var $pending_buf109=(($80+8)|0);
      var $81=HEAP32[(($pending_buf109)>>2)];
      var $arrayidx110=(($81+$79)|0);
      HEAP8[($arrayidx110)]=$conv106;
      var $82=$s_addr;
      var $bi_buf111=(($82+5816)|0);
      var $83=HEAPU16[(($bi_buf111)>>1)];
      var $conv112=(($83)&65535);
      var $shr113=$conv112 >> 8;
      var $conv114=(($shr113) & 255);
      var $84=$s_addr;
      var $pending115=(($84+20)|0);
      var $85=HEAPU32[(($pending115)>>2)];
      var $inc116=(($85+1)|0);
      HEAP32[(($pending115)>>2)]=$inc116;
      var $86=$s_addr;
      var $pending_buf117=(($86+8)|0);
      var $87=HEAP32[(($pending_buf117)>>2)];
      var $arrayidx118=(($87+$85)|0);
      HEAP8[($arrayidx118)]=$conv114;
      var $88=$val89;
      var $conv119=(($88) & 65535);
      var $conv120=(($conv119)&65535);
      var $89=$s_addr;
      var $bi_valid121=(($89+5820)|0);
      var $90=HEAP32[(($bi_valid121)>>2)];
      var $sub122=((16-$90)|0);
      var $shr123=$conv120 >> (($sub122)|0);
      var $conv124=(($shr123) & 65535);
      var $91=$s_addr;
      var $bi_buf125=(($91+5816)|0);
      HEAP16[(($bi_buf125)>>1)]=$conv124;
      var $92=$len78;
      var $sub126=(($92-16)|0);
      var $93=$s_addr;
      var $bi_valid127=(($93+5820)|0);
      var $94=HEAP32[(($bi_valid127)>>2)];
      var $add128=(($94+$sub126)|0);
      HEAP32[(($bi_valid127)>>2)]=$add128;
      __label__ = 21; break;
    case 20: 
      var $95=$curlen;
      var $96=$s_addr;
      var $bl_tree130=(($96+2684)|0);
      var $arrayidx131=(($bl_tree130+($95<<2))|0);
      var $fc132=(($arrayidx131)|0);
      var $code133=$fc132;
      var $97=HEAPU16[(($code133)>>1)];
      var $conv134=(($97)&65535);
      var $98=$s_addr;
      var $bi_valid135=(($98+5820)|0);
      var $99=HEAP32[(($bi_valid135)>>2)];
      var $shl136=$conv134 << $99;
      var $100=$s_addr;
      var $bi_buf137=(($100+5816)|0);
      var $101=HEAPU16[(($bi_buf137)>>1)];
      var $conv138=(($101)&65535);
      var $or139=$conv138 | $shl136;
      var $conv140=(($or139) & 65535);
      HEAP16[(($bi_buf137)>>1)]=$conv140;
      var $102=$len78;
      var $103=$s_addr;
      var $bi_valid141=(($103+5820)|0);
      var $104=HEAP32[(($bi_valid141)>>2)];
      var $add142=(($104+$102)|0);
      HEAP32[(($bi_valid141)>>2)]=$add142;
      __label__ = 21; break;
    case 21: 
      var $105=$count;
      var $dec144=(($105-1)|0);
      $count=$dec144;
      __label__ = 22; break;
    case 22: 
      var $106=$s_addr;
      var $bl_tree147=(($106+2684)|0);
      var $arrayidx148=(($bl_tree147+64)|0);
      var $dl149=(($arrayidx148+2)|0);
      var $len150=$dl149;
      var $107=HEAPU16[(($len150)>>1)];
      var $conv151=(($107)&65535);
      $len146=$conv151;
      var $108=$s_addr;
      var $bi_valid152=(($108+5820)|0);
      var $109=HEAP32[(($bi_valid152)>>2)];
      var $110=$len146;
      var $sub153=((16-$110)|0);
      var $cmp154=(($109)|0) > (($sub153)|0);
      if ($cmp154) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $111=$s_addr;
      var $bl_tree158=(($111+2684)|0);
      var $arrayidx159=(($bl_tree158+64)|0);
      var $fc160=(($arrayidx159)|0);
      var $code161=$fc160;
      var $112=HEAPU16[(($code161)>>1)];
      var $conv162=(($112)&65535);
      $val157=$conv162;
      var $113=$val157;
      var $conv163=(($113) & 65535);
      var $conv164=(($conv163)&65535);
      var $114=$s_addr;
      var $bi_valid165=(($114+5820)|0);
      var $115=HEAP32[(($bi_valid165)>>2)];
      var $shl166=$conv164 << $115;
      var $116=$s_addr;
      var $bi_buf167=(($116+5816)|0);
      var $117=HEAPU16[(($bi_buf167)>>1)];
      var $conv168=(($117)&65535);
      var $or169=$conv168 | $shl166;
      var $conv170=(($or169) & 65535);
      HEAP16[(($bi_buf167)>>1)]=$conv170;
      var $118=$s_addr;
      var $bi_buf171=(($118+5816)|0);
      var $119=HEAPU16[(($bi_buf171)>>1)];
      var $conv172=(($119)&65535);
      var $and173=$conv172 & 255;
      var $conv174=(($and173) & 255);
      var $120=$s_addr;
      var $pending175=(($120+20)|0);
      var $121=HEAPU32[(($pending175)>>2)];
      var $inc176=(($121+1)|0);
      HEAP32[(($pending175)>>2)]=$inc176;
      var $122=$s_addr;
      var $pending_buf177=(($122+8)|0);
      var $123=HEAP32[(($pending_buf177)>>2)];
      var $arrayidx178=(($123+$121)|0);
      HEAP8[($arrayidx178)]=$conv174;
      var $124=$s_addr;
      var $bi_buf179=(($124+5816)|0);
      var $125=HEAPU16[(($bi_buf179)>>1)];
      var $conv180=(($125)&65535);
      var $shr181=$conv180 >> 8;
      var $conv182=(($shr181) & 255);
      var $126=$s_addr;
      var $pending183=(($126+20)|0);
      var $127=HEAPU32[(($pending183)>>2)];
      var $inc184=(($127+1)|0);
      HEAP32[(($pending183)>>2)]=$inc184;
      var $128=$s_addr;
      var $pending_buf185=(($128+8)|0);
      var $129=HEAP32[(($pending_buf185)>>2)];
      var $arrayidx186=(($129+$127)|0);
      HEAP8[($arrayidx186)]=$conv182;
      var $130=$val157;
      var $conv187=(($130) & 65535);
      var $conv188=(($conv187)&65535);
      var $131=$s_addr;
      var $bi_valid189=(($131+5820)|0);
      var $132=HEAP32[(($bi_valid189)>>2)];
      var $sub190=((16-$132)|0);
      var $shr191=$conv188 >> (($sub190)|0);
      var $conv192=(($shr191) & 65535);
      var $133=$s_addr;
      var $bi_buf193=(($133+5816)|0);
      HEAP16[(($bi_buf193)>>1)]=$conv192;
      var $134=$len146;
      var $sub194=(($134-16)|0);
      var $135=$s_addr;
      var $bi_valid195=(($135+5820)|0);
      var $136=HEAP32[(($bi_valid195)>>2)];
      var $add196=(($136+$sub194)|0);
      HEAP32[(($bi_valid195)>>2)]=$add196;
      __label__ = 25; break;
    case 24: 
      var $137=$s_addr;
      var $bl_tree198=(($137+2684)|0);
      var $arrayidx199=(($bl_tree198+64)|0);
      var $fc200=(($arrayidx199)|0);
      var $code201=$fc200;
      var $138=HEAPU16[(($code201)>>1)];
      var $conv202=(($138)&65535);
      var $139=$s_addr;
      var $bi_valid203=(($139+5820)|0);
      var $140=HEAP32[(($bi_valid203)>>2)];
      var $shl204=$conv202 << $140;
      var $141=$s_addr;
      var $bi_buf205=(($141+5816)|0);
      var $142=HEAPU16[(($bi_buf205)>>1)];
      var $conv206=(($142)&65535);
      var $or207=$conv206 | $shl204;
      var $conv208=(($or207) & 65535);
      HEAP16[(($bi_buf205)>>1)]=$conv208;
      var $143=$len146;
      var $144=$s_addr;
      var $bi_valid209=(($144+5820)|0);
      var $145=HEAP32[(($bi_valid209)>>2)];
      var $add210=(($145+$143)|0);
      HEAP32[(($bi_valid209)>>2)]=$add210;
      __label__ = 25; break;
    case 25: 
      $len212=2;
      var $146=$s_addr;
      var $bi_valid213=(($146+5820)|0);
      var $147=HEAP32[(($bi_valid213)>>2)];
      var $148=$len212;
      var $sub214=((16-$148)|0);
      var $cmp215=(($147)|0) > (($sub214)|0);
      if ($cmp215) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $149=$count;
      var $sub219=(($149-3)|0);
      $val218=$sub219;
      var $150=$val218;
      var $conv220=(($150) & 65535);
      var $conv221=(($conv220)&65535);
      var $151=$s_addr;
      var $bi_valid222=(($151+5820)|0);
      var $152=HEAP32[(($bi_valid222)>>2)];
      var $shl223=$conv221 << $152;
      var $153=$s_addr;
      var $bi_buf224=(($153+5816)|0);
      var $154=HEAPU16[(($bi_buf224)>>1)];
      var $conv225=(($154)&65535);
      var $or226=$conv225 | $shl223;
      var $conv227=(($or226) & 65535);
      HEAP16[(($bi_buf224)>>1)]=$conv227;
      var $155=$s_addr;
      var $bi_buf228=(($155+5816)|0);
      var $156=HEAPU16[(($bi_buf228)>>1)];
      var $conv229=(($156)&65535);
      var $and230=$conv229 & 255;
      var $conv231=(($and230) & 255);
      var $157=$s_addr;
      var $pending232=(($157+20)|0);
      var $158=HEAPU32[(($pending232)>>2)];
      var $inc233=(($158+1)|0);
      HEAP32[(($pending232)>>2)]=$inc233;
      var $159=$s_addr;
      var $pending_buf234=(($159+8)|0);
      var $160=HEAP32[(($pending_buf234)>>2)];
      var $arrayidx235=(($160+$158)|0);
      HEAP8[($arrayidx235)]=$conv231;
      var $161=$s_addr;
      var $bi_buf236=(($161+5816)|0);
      var $162=HEAPU16[(($bi_buf236)>>1)];
      var $conv237=(($162)&65535);
      var $shr238=$conv237 >> 8;
      var $conv239=(($shr238) & 255);
      var $163=$s_addr;
      var $pending240=(($163+20)|0);
      var $164=HEAPU32[(($pending240)>>2)];
      var $inc241=(($164+1)|0);
      HEAP32[(($pending240)>>2)]=$inc241;
      var $165=$s_addr;
      var $pending_buf242=(($165+8)|0);
      var $166=HEAP32[(($pending_buf242)>>2)];
      var $arrayidx243=(($166+$164)|0);
      HEAP8[($arrayidx243)]=$conv239;
      var $167=$val218;
      var $conv244=(($167) & 65535);
      var $conv245=(($conv244)&65535);
      var $168=$s_addr;
      var $bi_valid246=(($168+5820)|0);
      var $169=HEAP32[(($bi_valid246)>>2)];
      var $sub247=((16-$169)|0);
      var $shr248=$conv245 >> (($sub247)|0);
      var $conv249=(($shr248) & 65535);
      var $170=$s_addr;
      var $bi_buf250=(($170+5816)|0);
      HEAP16[(($bi_buf250)>>1)]=$conv249;
      var $171=$len212;
      var $sub251=(($171-16)|0);
      var $172=$s_addr;
      var $bi_valid252=(($172+5820)|0);
      var $173=HEAP32[(($bi_valid252)>>2)];
      var $add253=(($173+$sub251)|0);
      HEAP32[(($bi_valid252)>>2)]=$add253;
      __label__ = 28; break;
    case 27: 
      var $174=$count;
      var $sub255=(($174-3)|0);
      var $conv256=(($sub255) & 65535);
      var $conv257=(($conv256)&65535);
      var $175=$s_addr;
      var $bi_valid258=(($175+5820)|0);
      var $176=HEAP32[(($bi_valid258)>>2)];
      var $shl259=$conv257 << $176;
      var $177=$s_addr;
      var $bi_buf260=(($177+5816)|0);
      var $178=HEAPU16[(($bi_buf260)>>1)];
      var $conv261=(($178)&65535);
      var $or262=$conv261 | $shl259;
      var $conv263=(($or262) & 65535);
      HEAP16[(($bi_buf260)>>1)]=$conv263;
      var $179=$len212;
      var $180=$s_addr;
      var $bi_valid264=(($180+5820)|0);
      var $181=HEAP32[(($bi_valid264)>>2)];
      var $add265=(($181+$179)|0);
      HEAP32[(($bi_valid264)>>2)]=$add265;
      __label__ = 28; break;
    case 28: 
      __label__ = 45; break;
    case 29: 
      var $182=$count;
      var $cmp268=(($182)|0) <= 10;
      if ($cmp268) { __label__ = 30; break; } else { __label__ = 37; break; }
    case 30: 
      var $183=$s_addr;
      var $bl_tree272=(($183+2684)|0);
      var $arrayidx273=(($bl_tree272+68)|0);
      var $dl274=(($arrayidx273+2)|0);
      var $len275=$dl274;
      var $184=HEAPU16[(($len275)>>1)];
      var $conv276=(($184)&65535);
      $len271=$conv276;
      var $185=$s_addr;
      var $bi_valid277=(($185+5820)|0);
      var $186=HEAP32[(($bi_valid277)>>2)];
      var $187=$len271;
      var $sub278=((16-$187)|0);
      var $cmp279=(($186)|0) > (($sub278)|0);
      if ($cmp279) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $188=$s_addr;
      var $bl_tree283=(($188+2684)|0);
      var $arrayidx284=(($bl_tree283+68)|0);
      var $fc285=(($arrayidx284)|0);
      var $code286=$fc285;
      var $189=HEAPU16[(($code286)>>1)];
      var $conv287=(($189)&65535);
      $val282=$conv287;
      var $190=$val282;
      var $conv288=(($190) & 65535);
      var $conv289=(($conv288)&65535);
      var $191=$s_addr;
      var $bi_valid290=(($191+5820)|0);
      var $192=HEAP32[(($bi_valid290)>>2)];
      var $shl291=$conv289 << $192;
      var $193=$s_addr;
      var $bi_buf292=(($193+5816)|0);
      var $194=HEAPU16[(($bi_buf292)>>1)];
      var $conv293=(($194)&65535);
      var $or294=$conv293 | $shl291;
      var $conv295=(($or294) & 65535);
      HEAP16[(($bi_buf292)>>1)]=$conv295;
      var $195=$s_addr;
      var $bi_buf296=(($195+5816)|0);
      var $196=HEAPU16[(($bi_buf296)>>1)];
      var $conv297=(($196)&65535);
      var $and298=$conv297 & 255;
      var $conv299=(($and298) & 255);
      var $197=$s_addr;
      var $pending300=(($197+20)|0);
      var $198=HEAPU32[(($pending300)>>2)];
      var $inc301=(($198+1)|0);
      HEAP32[(($pending300)>>2)]=$inc301;
      var $199=$s_addr;
      var $pending_buf302=(($199+8)|0);
      var $200=HEAP32[(($pending_buf302)>>2)];
      var $arrayidx303=(($200+$198)|0);
      HEAP8[($arrayidx303)]=$conv299;
      var $201=$s_addr;
      var $bi_buf304=(($201+5816)|0);
      var $202=HEAPU16[(($bi_buf304)>>1)];
      var $conv305=(($202)&65535);
      var $shr306=$conv305 >> 8;
      var $conv307=(($shr306) & 255);
      var $203=$s_addr;
      var $pending308=(($203+20)|0);
      var $204=HEAPU32[(($pending308)>>2)];
      var $inc309=(($204+1)|0);
      HEAP32[(($pending308)>>2)]=$inc309;
      var $205=$s_addr;
      var $pending_buf310=(($205+8)|0);
      var $206=HEAP32[(($pending_buf310)>>2)];
      var $arrayidx311=(($206+$204)|0);
      HEAP8[($arrayidx311)]=$conv307;
      var $207=$val282;
      var $conv312=(($207) & 65535);
      var $conv313=(($conv312)&65535);
      var $208=$s_addr;
      var $bi_valid314=(($208+5820)|0);
      var $209=HEAP32[(($bi_valid314)>>2)];
      var $sub315=((16-$209)|0);
      var $shr316=$conv313 >> (($sub315)|0);
      var $conv317=(($shr316) & 65535);
      var $210=$s_addr;
      var $bi_buf318=(($210+5816)|0);
      HEAP16[(($bi_buf318)>>1)]=$conv317;
      var $211=$len271;
      var $sub319=(($211-16)|0);
      var $212=$s_addr;
      var $bi_valid320=(($212+5820)|0);
      var $213=HEAP32[(($bi_valid320)>>2)];
      var $add321=(($213+$sub319)|0);
      HEAP32[(($bi_valid320)>>2)]=$add321;
      __label__ = 33; break;
    case 32: 
      var $214=$s_addr;
      var $bl_tree323=(($214+2684)|0);
      var $arrayidx324=(($bl_tree323+68)|0);
      var $fc325=(($arrayidx324)|0);
      var $code326=$fc325;
      var $215=HEAPU16[(($code326)>>1)];
      var $conv327=(($215)&65535);
      var $216=$s_addr;
      var $bi_valid328=(($216+5820)|0);
      var $217=HEAP32[(($bi_valid328)>>2)];
      var $shl329=$conv327 << $217;
      var $218=$s_addr;
      var $bi_buf330=(($218+5816)|0);
      var $219=HEAPU16[(($bi_buf330)>>1)];
      var $conv331=(($219)&65535);
      var $or332=$conv331 | $shl329;
      var $conv333=(($or332) & 65535);
      HEAP16[(($bi_buf330)>>1)]=$conv333;
      var $220=$len271;
      var $221=$s_addr;
      var $bi_valid334=(($221+5820)|0);
      var $222=HEAP32[(($bi_valid334)>>2)];
      var $add335=(($222+$220)|0);
      HEAP32[(($bi_valid334)>>2)]=$add335;
      __label__ = 33; break;
    case 33: 
      $len337=3;
      var $223=$s_addr;
      var $bi_valid338=(($223+5820)|0);
      var $224=HEAP32[(($bi_valid338)>>2)];
      var $225=$len337;
      var $sub339=((16-$225)|0);
      var $cmp340=(($224)|0) > (($sub339)|0);
      if ($cmp340) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $226=$count;
      var $sub344=(($226-3)|0);
      $val343=$sub344;
      var $227=$val343;
      var $conv345=(($227) & 65535);
      var $conv346=(($conv345)&65535);
      var $228=$s_addr;
      var $bi_valid347=(($228+5820)|0);
      var $229=HEAP32[(($bi_valid347)>>2)];
      var $shl348=$conv346 << $229;
      var $230=$s_addr;
      var $bi_buf349=(($230+5816)|0);
      var $231=HEAPU16[(($bi_buf349)>>1)];
      var $conv350=(($231)&65535);
      var $or351=$conv350 | $shl348;
      var $conv352=(($or351) & 65535);
      HEAP16[(($bi_buf349)>>1)]=$conv352;
      var $232=$s_addr;
      var $bi_buf353=(($232+5816)|0);
      var $233=HEAPU16[(($bi_buf353)>>1)];
      var $conv354=(($233)&65535);
      var $and355=$conv354 & 255;
      var $conv356=(($and355) & 255);
      var $234=$s_addr;
      var $pending357=(($234+20)|0);
      var $235=HEAPU32[(($pending357)>>2)];
      var $inc358=(($235+1)|0);
      HEAP32[(($pending357)>>2)]=$inc358;
      var $236=$s_addr;
      var $pending_buf359=(($236+8)|0);
      var $237=HEAP32[(($pending_buf359)>>2)];
      var $arrayidx360=(($237+$235)|0);
      HEAP8[($arrayidx360)]=$conv356;
      var $238=$s_addr;
      var $bi_buf361=(($238+5816)|0);
      var $239=HEAPU16[(($bi_buf361)>>1)];
      var $conv362=(($239)&65535);
      var $shr363=$conv362 >> 8;
      var $conv364=(($shr363) & 255);
      var $240=$s_addr;
      var $pending365=(($240+20)|0);
      var $241=HEAPU32[(($pending365)>>2)];
      var $inc366=(($241+1)|0);
      HEAP32[(($pending365)>>2)]=$inc366;
      var $242=$s_addr;
      var $pending_buf367=(($242+8)|0);
      var $243=HEAP32[(($pending_buf367)>>2)];
      var $arrayidx368=(($243+$241)|0);
      HEAP8[($arrayidx368)]=$conv364;
      var $244=$val343;
      var $conv369=(($244) & 65535);
      var $conv370=(($conv369)&65535);
      var $245=$s_addr;
      var $bi_valid371=(($245+5820)|0);
      var $246=HEAP32[(($bi_valid371)>>2)];
      var $sub372=((16-$246)|0);
      var $shr373=$conv370 >> (($sub372)|0);
      var $conv374=(($shr373) & 65535);
      var $247=$s_addr;
      var $bi_buf375=(($247+5816)|0);
      HEAP16[(($bi_buf375)>>1)]=$conv374;
      var $248=$len337;
      var $sub376=(($248-16)|0);
      var $249=$s_addr;
      var $bi_valid377=(($249+5820)|0);
      var $250=HEAP32[(($bi_valid377)>>2)];
      var $add378=(($250+$sub376)|0);
      HEAP32[(($bi_valid377)>>2)]=$add378;
      __label__ = 36; break;
    case 35: 
      var $251=$count;
      var $sub380=(($251-3)|0);
      var $conv381=(($sub380) & 65535);
      var $conv382=(($conv381)&65535);
      var $252=$s_addr;
      var $bi_valid383=(($252+5820)|0);
      var $253=HEAP32[(($bi_valid383)>>2)];
      var $shl384=$conv382 << $253;
      var $254=$s_addr;
      var $bi_buf385=(($254+5816)|0);
      var $255=HEAPU16[(($bi_buf385)>>1)];
      var $conv386=(($255)&65535);
      var $or387=$conv386 | $shl384;
      var $conv388=(($or387) & 65535);
      HEAP16[(($bi_buf385)>>1)]=$conv388;
      var $256=$len337;
      var $257=$s_addr;
      var $bi_valid389=(($257+5820)|0);
      var $258=HEAP32[(($bi_valid389)>>2)];
      var $add390=(($258+$256)|0);
      HEAP32[(($bi_valid389)>>2)]=$add390;
      __label__ = 36; break;
    case 36: 
      __label__ = 44; break;
    case 37: 
      var $259=$s_addr;
      var $bl_tree394=(($259+2684)|0);
      var $arrayidx395=(($bl_tree394+72)|0);
      var $dl396=(($arrayidx395+2)|0);
      var $len397=$dl396;
      var $260=HEAPU16[(($len397)>>1)];
      var $conv398=(($260)&65535);
      $len393=$conv398;
      var $261=$s_addr;
      var $bi_valid399=(($261+5820)|0);
      var $262=HEAP32[(($bi_valid399)>>2)];
      var $263=$len393;
      var $sub400=((16-$263)|0);
      var $cmp401=(($262)|0) > (($sub400)|0);
      if ($cmp401) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $264=$s_addr;
      var $bl_tree405=(($264+2684)|0);
      var $arrayidx406=(($bl_tree405+72)|0);
      var $fc407=(($arrayidx406)|0);
      var $code408=$fc407;
      var $265=HEAPU16[(($code408)>>1)];
      var $conv409=(($265)&65535);
      $val404=$conv409;
      var $266=$val404;
      var $conv410=(($266) & 65535);
      var $conv411=(($conv410)&65535);
      var $267=$s_addr;
      var $bi_valid412=(($267+5820)|0);
      var $268=HEAP32[(($bi_valid412)>>2)];
      var $shl413=$conv411 << $268;
      var $269=$s_addr;
      var $bi_buf414=(($269+5816)|0);
      var $270=HEAPU16[(($bi_buf414)>>1)];
      var $conv415=(($270)&65535);
      var $or416=$conv415 | $shl413;
      var $conv417=(($or416) & 65535);
      HEAP16[(($bi_buf414)>>1)]=$conv417;
      var $271=$s_addr;
      var $bi_buf418=(($271+5816)|0);
      var $272=HEAPU16[(($bi_buf418)>>1)];
      var $conv419=(($272)&65535);
      var $and420=$conv419 & 255;
      var $conv421=(($and420) & 255);
      var $273=$s_addr;
      var $pending422=(($273+20)|0);
      var $274=HEAPU32[(($pending422)>>2)];
      var $inc423=(($274+1)|0);
      HEAP32[(($pending422)>>2)]=$inc423;
      var $275=$s_addr;
      var $pending_buf424=(($275+8)|0);
      var $276=HEAP32[(($pending_buf424)>>2)];
      var $arrayidx425=(($276+$274)|0);
      HEAP8[($arrayidx425)]=$conv421;
      var $277=$s_addr;
      var $bi_buf426=(($277+5816)|0);
      var $278=HEAPU16[(($bi_buf426)>>1)];
      var $conv427=(($278)&65535);
      var $shr428=$conv427 >> 8;
      var $conv429=(($shr428) & 255);
      var $279=$s_addr;
      var $pending430=(($279+20)|0);
      var $280=HEAPU32[(($pending430)>>2)];
      var $inc431=(($280+1)|0);
      HEAP32[(($pending430)>>2)]=$inc431;
      var $281=$s_addr;
      var $pending_buf432=(($281+8)|0);
      var $282=HEAP32[(($pending_buf432)>>2)];
      var $arrayidx433=(($282+$280)|0);
      HEAP8[($arrayidx433)]=$conv429;
      var $283=$val404;
      var $conv434=(($283) & 65535);
      var $conv435=(($conv434)&65535);
      var $284=$s_addr;
      var $bi_valid436=(($284+5820)|0);
      var $285=HEAP32[(($bi_valid436)>>2)];
      var $sub437=((16-$285)|0);
      var $shr438=$conv435 >> (($sub437)|0);
      var $conv439=(($shr438) & 65535);
      var $286=$s_addr;
      var $bi_buf440=(($286+5816)|0);
      HEAP16[(($bi_buf440)>>1)]=$conv439;
      var $287=$len393;
      var $sub441=(($287-16)|0);
      var $288=$s_addr;
      var $bi_valid442=(($288+5820)|0);
      var $289=HEAP32[(($bi_valid442)>>2)];
      var $add443=(($289+$sub441)|0);
      HEAP32[(($bi_valid442)>>2)]=$add443;
      __label__ = 40; break;
    case 39: 
      var $290=$s_addr;
      var $bl_tree445=(($290+2684)|0);
      var $arrayidx446=(($bl_tree445+72)|0);
      var $fc447=(($arrayidx446)|0);
      var $code448=$fc447;
      var $291=HEAPU16[(($code448)>>1)];
      var $conv449=(($291)&65535);
      var $292=$s_addr;
      var $bi_valid450=(($292+5820)|0);
      var $293=HEAP32[(($bi_valid450)>>2)];
      var $shl451=$conv449 << $293;
      var $294=$s_addr;
      var $bi_buf452=(($294+5816)|0);
      var $295=HEAPU16[(($bi_buf452)>>1)];
      var $conv453=(($295)&65535);
      var $or454=$conv453 | $shl451;
      var $conv455=(($or454) & 65535);
      HEAP16[(($bi_buf452)>>1)]=$conv455;
      var $296=$len393;
      var $297=$s_addr;
      var $bi_valid456=(($297+5820)|0);
      var $298=HEAP32[(($bi_valid456)>>2)];
      var $add457=(($298+$296)|0);
      HEAP32[(($bi_valid456)>>2)]=$add457;
      __label__ = 40; break;
    case 40: 
      $len459=7;
      var $299=$s_addr;
      var $bi_valid460=(($299+5820)|0);
      var $300=HEAP32[(($bi_valid460)>>2)];
      var $301=$len459;
      var $sub461=((16-$301)|0);
      var $cmp462=(($300)|0) > (($sub461)|0);
      if ($cmp462) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $302=$count;
      var $sub466=(($302-11)|0);
      $val465=$sub466;
      var $303=$val465;
      var $conv467=(($303) & 65535);
      var $conv468=(($conv467)&65535);
      var $304=$s_addr;
      var $bi_valid469=(($304+5820)|0);
      var $305=HEAP32[(($bi_valid469)>>2)];
      var $shl470=$conv468 << $305;
      var $306=$s_addr;
      var $bi_buf471=(($306+5816)|0);
      var $307=HEAPU16[(($bi_buf471)>>1)];
      var $conv472=(($307)&65535);
      var $or473=$conv472 | $shl470;
      var $conv474=(($or473) & 65535);
      HEAP16[(($bi_buf471)>>1)]=$conv474;
      var $308=$s_addr;
      var $bi_buf475=(($308+5816)|0);
      var $309=HEAPU16[(($bi_buf475)>>1)];
      var $conv476=(($309)&65535);
      var $and477=$conv476 & 255;
      var $conv478=(($and477) & 255);
      var $310=$s_addr;
      var $pending479=(($310+20)|0);
      var $311=HEAPU32[(($pending479)>>2)];
      var $inc480=(($311+1)|0);
      HEAP32[(($pending479)>>2)]=$inc480;
      var $312=$s_addr;
      var $pending_buf481=(($312+8)|0);
      var $313=HEAP32[(($pending_buf481)>>2)];
      var $arrayidx482=(($313+$311)|0);
      HEAP8[($arrayidx482)]=$conv478;
      var $314=$s_addr;
      var $bi_buf483=(($314+5816)|0);
      var $315=HEAPU16[(($bi_buf483)>>1)];
      var $conv484=(($315)&65535);
      var $shr485=$conv484 >> 8;
      var $conv486=(($shr485) & 255);
      var $316=$s_addr;
      var $pending487=(($316+20)|0);
      var $317=HEAPU32[(($pending487)>>2)];
      var $inc488=(($317+1)|0);
      HEAP32[(($pending487)>>2)]=$inc488;
      var $318=$s_addr;
      var $pending_buf489=(($318+8)|0);
      var $319=HEAP32[(($pending_buf489)>>2)];
      var $arrayidx490=(($319+$317)|0);
      HEAP8[($arrayidx490)]=$conv486;
      var $320=$val465;
      var $conv491=(($320) & 65535);
      var $conv492=(($conv491)&65535);
      var $321=$s_addr;
      var $bi_valid493=(($321+5820)|0);
      var $322=HEAP32[(($bi_valid493)>>2)];
      var $sub494=((16-$322)|0);
      var $shr495=$conv492 >> (($sub494)|0);
      var $conv496=(($shr495) & 65535);
      var $323=$s_addr;
      var $bi_buf497=(($323+5816)|0);
      HEAP16[(($bi_buf497)>>1)]=$conv496;
      var $324=$len459;
      var $sub498=(($324-16)|0);
      var $325=$s_addr;
      var $bi_valid499=(($325+5820)|0);
      var $326=HEAP32[(($bi_valid499)>>2)];
      var $add500=(($326+$sub498)|0);
      HEAP32[(($bi_valid499)>>2)]=$add500;
      __label__ = 43; break;
    case 42: 
      var $327=$count;
      var $sub502=(($327-11)|0);
      var $conv503=(($sub502) & 65535);
      var $conv504=(($conv503)&65535);
      var $328=$s_addr;
      var $bi_valid505=(($328+5820)|0);
      var $329=HEAP32[(($bi_valid505)>>2)];
      var $shl506=$conv504 << $329;
      var $330=$s_addr;
      var $bi_buf507=(($330+5816)|0);
      var $331=HEAPU16[(($bi_buf507)>>1)];
      var $conv508=(($331)&65535);
      var $or509=$conv508 | $shl506;
      var $conv510=(($or509) & 65535);
      HEAP16[(($bi_buf507)>>1)]=$conv510;
      var $332=$len459;
      var $333=$s_addr;
      var $bi_valid511=(($333+5820)|0);
      var $334=HEAP32[(($bi_valid511)>>2)];
      var $add512=(($334+$332)|0);
      HEAP32[(($bi_valid511)>>2)]=$add512;
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      $count=0;
      var $335=$curlen;
      $prevlen=$335;
      var $336=$nextlen;
      var $cmp518=(($336)|0)==0;
      if ($cmp518) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      $max_count=138;
      $min_count=3;
      __label__ = 53; break;
    case 49: 
      var $337=$curlen;
      var $338=$nextlen;
      var $cmp522=(($337)|0)==(($338)|0);
      if ($cmp522) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      $max_count=6;
      $min_count=3;
      __label__ = 52; break;
    case 51: 
      $max_count=7;
      $min_count=4;
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $339=$n;
      var $inc528=(($339+1)|0);
      $n=$inc528;
      __label__ = 4; break;
    case 55: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_send_tree["X"]=1;

function _bi_reverse($code, $len) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $code_addr;
      var $len_addr;
      var $res;
      $code_addr=$code;
      $len_addr=$len;
      $res=0;
      __label__ = 2; break;
    case 2: 
      var $0=$code_addr;
      var $and=$0 & 1;
      var $1=$res;
      var $or=$1 | $and;
      $res=$or;
      var $2=$code_addr;
      var $shr=$2 >>> 1;
      $code_addr=$shr;
      var $3=$res;
      var $shl=$3 << 1;
      $res=$shl;
      __label__ = 3; break;
    case 3: 
      var $4=$len_addr;
      var $dec=(($4-1)|0);
      $len_addr=$dec;
      var $cmp=(($dec)|0) > 0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 4; break; }
    case 4: 
      var $5=$res;
      var $shr1=$5 >>> 1;
      ;
      return $shr1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _scan_tree($s, $tree, $max_code) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $tree_addr;
      var $max_code_addr;
      var $n;
      var $prevlen;
      var $curlen;
      var $nextlen;
      var $count;
      var $max_count;
      var $min_count;
      $s_addr=$s;
      $tree_addr=$tree;
      $max_code_addr=$max_code;
      $prevlen=-1;
      var $0=$tree_addr;
      var $arrayidx=(($0)|0);
      var $dl=(($arrayidx+2)|0);
      var $len=$dl;
      var $1=HEAPU16[(($len)>>1)];
      var $conv=(($1)&65535);
      $nextlen=$conv;
      $count=0;
      $max_count=7;
      $min_count=4;
      var $2=$nextlen;
      var $cmp=(($2)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      $max_count=138;
      $min_count=3;
      __label__ = 3; break;
    case 3: 
      var $3=$max_code_addr;
      var $add=(($3+1)|0);
      var $4=$tree_addr;
      var $arrayidx2=(($4+($add<<2))|0);
      var $dl3=(($arrayidx2+2)|0);
      var $len4=$dl3;
      HEAP16[(($len4)>>1)]=-1;
      $n=0;
      __label__ = 4; break;
    case 4: 
      var $5=$n;
      var $6=$max_code_addr;
      var $cmp5=(($5)|0) <= (($6)|0);
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 28; break; }
    case 5: 
      var $7=$nextlen;
      $curlen=$7;
      var $8=$n;
      var $add7=(($8+1)|0);
      var $9=$tree_addr;
      var $arrayidx8=(($9+($add7<<2))|0);
      var $dl9=(($arrayidx8+2)|0);
      var $len10=$dl9;
      var $10=HEAPU16[(($len10)>>1)];
      var $conv11=(($10)&65535);
      $nextlen=$conv11;
      var $11=$count;
      var $inc=(($11+1)|0);
      $count=$inc;
      var $12=$max_count;
      var $cmp12=(($inc)|0) < (($12)|0);
      if ($cmp12) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $13=$curlen;
      var $14=$nextlen;
      var $cmp14=(($13)|0)==(($14)|0);
      if ($cmp14) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 27; break;
    case 8: 
      var $15=$count;
      var $16=$min_count;
      var $cmp17=(($15)|0) < (($16)|0);
      if ($cmp17) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $17=$count;
      var $18=$curlen;
      var $19=$s_addr;
      var $bl_tree=(($19+2684)|0);
      var $arrayidx20=(($bl_tree+($18<<2))|0);
      var $fc=(($arrayidx20)|0);
      var $freq=$fc;
      var $20=HEAPU16[(($freq)>>1)];
      var $conv21=(($20)&65535);
      var $add22=(($conv21+$17)|0);
      var $conv23=(($add22) & 65535);
      HEAP16[(($freq)>>1)]=$conv23;
      __label__ = 19; break;
    case 10: 
      var $21=$curlen;
      var $cmp25=(($21)|0)!=0;
      if ($cmp25) { __label__ = 11; break; } else { __label__ = 14; break; }
    case 11: 
      var $22=$curlen;
      var $23=$prevlen;
      var $cmp28=(($22)|0)!=(($23)|0);
      if ($cmp28) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $24=$curlen;
      var $25=$s_addr;
      var $bl_tree31=(($25+2684)|0);
      var $arrayidx32=(($bl_tree31+($24<<2))|0);
      var $fc33=(($arrayidx32)|0);
      var $freq34=$fc33;
      var $26=HEAP16[(($freq34)>>1)];
      var $inc35=(($26+1)&65535);
      HEAP16[(($freq34)>>1)]=$inc35;
      __label__ = 13; break;
    case 13: 
      var $27=$s_addr;
      var $bl_tree37=(($27+2684)|0);
      var $arrayidx38=(($bl_tree37+64)|0);
      var $fc39=(($arrayidx38)|0);
      var $freq40=$fc39;
      var $28=HEAP16[(($freq40)>>1)];
      var $inc41=(($28+1)&65535);
      HEAP16[(($freq40)>>1)]=$inc41;
      __label__ = 18; break;
    case 14: 
      var $29=$count;
      var $cmp43=(($29)|0) <= 10;
      if ($cmp43) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $30=$s_addr;
      var $bl_tree46=(($30+2684)|0);
      var $arrayidx47=(($bl_tree46+68)|0);
      var $fc48=(($arrayidx47)|0);
      var $freq49=$fc48;
      var $31=HEAP16[(($freq49)>>1)];
      var $inc50=(($31+1)&65535);
      HEAP16[(($freq49)>>1)]=$inc50;
      __label__ = 17; break;
    case 16: 
      var $32=$s_addr;
      var $bl_tree52=(($32+2684)|0);
      var $arrayidx53=(($bl_tree52+72)|0);
      var $fc54=(($arrayidx53)|0);
      var $freq55=$fc54;
      var $33=HEAP16[(($freq55)>>1)];
      var $inc56=(($33+1)&65535);
      HEAP16[(($freq55)>>1)]=$inc56;
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      $count=0;
      var $34=$curlen;
      $prevlen=$34;
      var $35=$nextlen;
      var $cmp61=(($35)|0)==0;
      if ($cmp61) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      $max_count=138;
      $min_count=3;
      __label__ = 26; break;
    case 22: 
      var $36=$curlen;
      var $37=$nextlen;
      var $cmp65=(($36)|0)==(($37)|0);
      if ($cmp65) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      $max_count=6;
      $min_count=3;
      __label__ = 25; break;
    case 24: 
      $max_count=7;
      $min_count=4;
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $38=$n;
      var $inc71=(($38+1)|0);
      $n=$inc71;
      __label__ = 4; break;
    case 28: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_scan_tree["X"]=1;

function _pqdownheap($s, $tree, $k) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $tree_addr;
      var $k_addr;
      var $v;
      var $j;
      $s_addr=$s;
      $tree_addr=$tree;
      $k_addr=$k;
      var $0=$k_addr;
      var $1=$s_addr;
      var $heap=(($1+2908)|0);
      var $arrayidx=(($heap+($0<<2))|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      $v=$2;
      var $3=$k_addr;
      var $shl=$3 << 1;
      $j=$shl;
      __label__ = 2; break;
    case 2: 
      var $4=$j;
      var $5=$s_addr;
      var $heap_len=(($5+5200)|0);
      var $6=HEAP32[(($heap_len)>>2)];
      var $cmp=(($4)|0) <= (($6)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      var $7=$j;
      var $8=$s_addr;
      var $heap_len1=(($8+5200)|0);
      var $9=HEAP32[(($heap_len1)>>2)];
      var $cmp2=(($7)|0) < (($9)|0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $10=$j;
      var $add=(($10+1)|0);
      var $11=$s_addr;
      var $heap3=(($11+2908)|0);
      var $arrayidx4=(($heap3+($add<<2))|0);
      var $12=HEAP32[(($arrayidx4)>>2)];
      var $13=$tree_addr;
      var $arrayidx5=(($13+($12<<2))|0);
      var $fc=(($arrayidx5)|0);
      var $freq=$fc;
      var $14=HEAPU16[(($freq)>>1)];
      var $conv=(($14)&65535);
      var $15=$j;
      var $16=$s_addr;
      var $heap6=(($16+2908)|0);
      var $arrayidx7=(($heap6+($15<<2))|0);
      var $17=HEAP32[(($arrayidx7)>>2)];
      var $18=$tree_addr;
      var $arrayidx8=(($18+($17<<2))|0);
      var $fc9=(($arrayidx8)|0);
      var $freq10=$fc9;
      var $19=HEAPU16[(($freq10)>>1)];
      var $conv11=(($19)&65535);
      var $cmp12=(($conv)|0) < (($conv11)|0);
      if ($cmp12) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $20=$j;
      var $add14=(($20+1)|0);
      var $21=$s_addr;
      var $heap15=(($21+2908)|0);
      var $arrayidx16=(($heap15+($add14<<2))|0);
      var $22=HEAP32[(($arrayidx16)>>2)];
      var $23=$tree_addr;
      var $arrayidx17=(($23+($22<<2))|0);
      var $fc18=(($arrayidx17)|0);
      var $freq19=$fc18;
      var $24=HEAPU16[(($freq19)>>1)];
      var $conv20=(($24)&65535);
      var $25=$j;
      var $26=$s_addr;
      var $heap21=(($26+2908)|0);
      var $arrayidx22=(($heap21+($25<<2))|0);
      var $27=HEAP32[(($arrayidx22)>>2)];
      var $28=$tree_addr;
      var $arrayidx23=(($28+($27<<2))|0);
      var $fc24=(($arrayidx23)|0);
      var $freq25=$fc24;
      var $29=HEAPU16[(($freq25)>>1)];
      var $conv26=(($29)&65535);
      var $cmp27=(($conv20)|0)==(($conv26)|0);
      if ($cmp27) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $30=$j;
      var $add30=(($30+1)|0);
      var $31=$s_addr;
      var $heap31=(($31+2908)|0);
      var $arrayidx32=(($heap31+($add30<<2))|0);
      var $32=HEAP32[(($arrayidx32)>>2)];
      var $33=$s_addr;
      var $depth=(($33+5208)|0);
      var $arrayidx33=(($depth+$32)|0);
      var $34=HEAPU8[($arrayidx33)];
      var $conv34=(($34)&255);
      var $35=$j;
      var $36=$s_addr;
      var $heap35=(($36+2908)|0);
      var $arrayidx36=(($heap35+($35<<2))|0);
      var $37=HEAP32[(($arrayidx36)>>2)];
      var $38=$s_addr;
      var $depth37=(($38+5208)|0);
      var $arrayidx38=(($depth37+$37)|0);
      var $39=HEAPU8[($arrayidx38)];
      var $conv39=(($39)&255);
      var $cmp40=(($conv34)|0) <= (($conv39)|0);
      if ($cmp40) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $40=$j;
      var $inc=(($40+1)|0);
      $j=$inc;
      __label__ = 8; break;
    case 8: 
      var $41=$v;
      var $42=$tree_addr;
      var $arrayidx42=(($42+($41<<2))|0);
      var $fc43=(($arrayidx42)|0);
      var $freq44=$fc43;
      var $43=HEAPU16[(($freq44)>>1)];
      var $conv45=(($43)&65535);
      var $44=$j;
      var $45=$s_addr;
      var $heap46=(($45+2908)|0);
      var $arrayidx47=(($heap46+($44<<2))|0);
      var $46=HEAP32[(($arrayidx47)>>2)];
      var $47=$tree_addr;
      var $arrayidx48=(($47+($46<<2))|0);
      var $fc49=(($arrayidx48)|0);
      var $freq50=$fc49;
      var $48=HEAPU16[(($freq50)>>1)];
      var $conv51=(($48)&65535);
      var $cmp52=(($conv45)|0) < (($conv51)|0);
      if ($cmp52) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $49=$v;
      var $50=$tree_addr;
      var $arrayidx55=(($50+($49<<2))|0);
      var $fc56=(($arrayidx55)|0);
      var $freq57=$fc56;
      var $51=HEAPU16[(($freq57)>>1)];
      var $conv58=(($51)&65535);
      var $52=$j;
      var $53=$s_addr;
      var $heap59=(($53+2908)|0);
      var $arrayidx60=(($heap59+($52<<2))|0);
      var $54=HEAP32[(($arrayidx60)>>2)];
      var $55=$tree_addr;
      var $arrayidx61=(($55+($54<<2))|0);
      var $fc62=(($arrayidx61)|0);
      var $freq63=$fc62;
      var $56=HEAPU16[(($freq63)>>1)];
      var $conv64=(($56)&65535);
      var $cmp65=(($conv58)|0)==(($conv64)|0);
      if ($cmp65) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $57=$v;
      var $58=$s_addr;
      var $depth68=(($58+5208)|0);
      var $arrayidx69=(($depth68+$57)|0);
      var $59=HEAPU8[($arrayidx69)];
      var $conv70=(($59)&255);
      var $60=$j;
      var $61=$s_addr;
      var $heap71=(($61+2908)|0);
      var $arrayidx72=(($heap71+($60<<2))|0);
      var $62=HEAP32[(($arrayidx72)>>2)];
      var $63=$s_addr;
      var $depth73=(($63+5208)|0);
      var $arrayidx74=(($depth73+$62)|0);
      var $64=HEAPU8[($arrayidx74)];
      var $conv75=(($64)&255);
      var $cmp76=(($conv70)|0) <= (($conv75)|0);
      if ($cmp76) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __label__ = 13; break;
    case 12: 
      var $65=$j;
      var $66=$s_addr;
      var $heap80=(($66+2908)|0);
      var $arrayidx81=(($heap80+($65<<2))|0);
      var $67=HEAP32[(($arrayidx81)>>2)];
      var $68=$k_addr;
      var $69=$s_addr;
      var $heap82=(($69+2908)|0);
      var $arrayidx83=(($heap82+($68<<2))|0);
      HEAP32[(($arrayidx83)>>2)]=$67;
      var $70=$j;
      $k_addr=$70;
      var $71=$j;
      var $shl84=$71 << 1;
      $j=$shl84;
      __label__ = 2; break;
    case 13: 
      var $72=$v;
      var $73=$k_addr;
      var $74=$s_addr;
      var $heap85=(($74+2908)|0);
      var $arrayidx86=(($heap85+($73<<2))|0);
      HEAP32[(($arrayidx86)>>2)]=$72;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_pqdownheap["X"]=1;

function _gen_bitlen($s, $desc) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $s_addr;
      var $desc_addr;
      var $tree;
      var $max_code;
      var $stree;
      var $extra;
      var $base;
      var $max_length;
      var $h;
      var $n;
      var $m;
      var $bits;
      var $xbits;
      var $f;
      var $overflow;
      $s_addr=$s;
      $desc_addr=$desc;
      var $0=$desc_addr;
      var $dyn_tree=(($0)|0);
      var $1=HEAP32[(($dyn_tree)>>2)];
      $tree=$1;
      var $2=$desc_addr;
      var $max_code1=(($2+4)|0);
      var $3=HEAP32[(($max_code1)>>2)];
      $max_code=$3;
      var $4=$desc_addr;
      var $stat_desc=(($4+8)|0);
      var $5=HEAP32[(($stat_desc)>>2)];
      var $static_tree=(($5)|0);
      var $6=HEAP32[(($static_tree)>>2)];
      $stree=$6;
      var $7=$desc_addr;
      var $stat_desc2=(($7+8)|0);
      var $8=HEAP32[(($stat_desc2)>>2)];
      var $extra_bits=(($8+4)|0);
      var $9=HEAP32[(($extra_bits)>>2)];
      $extra=$9;
      var $10=$desc_addr;
      var $stat_desc3=(($10+8)|0);
      var $11=HEAP32[(($stat_desc3)>>2)];
      var $extra_base=(($11+8)|0);
      var $12=HEAP32[(($extra_base)>>2)];
      $base=$12;
      var $13=$desc_addr;
      var $stat_desc4=(($13+8)|0);
      var $14=HEAP32[(($stat_desc4)>>2)];
      var $max_length5=(($14+16)|0);
      var $15=HEAP32[(($max_length5)>>2)];
      $max_length=$15;
      $overflow=0;
      $bits=0;
      __label__ = 2; break;
    case 2: 
      var $16=$bits;
      var $cmp=(($16)|0) <= 15;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $17=$bits;
      var $18=$s_addr;
      var $bl_count=(($18+2876)|0);
      var $arrayidx=(($bl_count+($17<<1))|0);
      HEAP16[(($arrayidx)>>1)]=0;
      __label__ = 4; break;
    case 4: 
      var $19=$bits;
      var $inc=(($19+1)|0);
      $bits=$inc;
      __label__ = 2; break;
    case 5: 
      var $20=$s_addr;
      var $heap_max=(($20+5204)|0);
      var $21=HEAP32[(($heap_max)>>2)];
      var $22=$s_addr;
      var $heap=(($22+2908)|0);
      var $arrayidx6=(($heap+($21<<2))|0);
      var $23=HEAP32[(($arrayidx6)>>2)];
      var $24=$tree;
      var $arrayidx7=(($24+($23<<2))|0);
      var $dl=(($arrayidx7+2)|0);
      var $len=$dl;
      HEAP16[(($len)>>1)]=0;
      var $25=$s_addr;
      var $heap_max8=(($25+5204)|0);
      var $26=HEAP32[(($heap_max8)>>2)];
      var $add=(($26+1)|0);
      $h=$add;
      __label__ = 6; break;
    case 6: 
      var $27=$h;
      var $cmp10=(($27)|0) < 573;
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 17; break; }
    case 7: 
      var $28=$h;
      var $29=$s_addr;
      var $heap12=(($29+2908)|0);
      var $arrayidx13=(($heap12+($28<<2))|0);
      var $30=HEAP32[(($arrayidx13)>>2)];
      $n=$30;
      var $31=$n;
      var $32=$tree;
      var $arrayidx14=(($32+($31<<2))|0);
      var $dl15=(($arrayidx14+2)|0);
      var $dad=$dl15;
      var $33=HEAPU16[(($dad)>>1)];
      var $idxprom=(($33)&65535);
      var $34=$tree;
      var $arrayidx16=(($34+($idxprom<<2))|0);
      var $dl17=(($arrayidx16+2)|0);
      var $len18=$dl17;
      var $35=HEAPU16[(($len18)>>1)];
      var $conv=(($35)&65535);
      var $add19=(($conv+1)|0);
      $bits=$add19;
      var $36=$bits;
      var $37=$max_length;
      var $cmp20=(($36)|0) > (($37)|0);
      if ($cmp20) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $38=$max_length;
      $bits=$38;
      var $39=$overflow;
      var $inc22=(($39+1)|0);
      $overflow=$inc22;
      __label__ = 9; break;
    case 9: 
      var $40=$bits;
      var $conv23=(($40) & 65535);
      var $41=$n;
      var $42=$tree;
      var $arrayidx24=(($42+($41<<2))|0);
      var $dl25=(($arrayidx24+2)|0);
      var $len26=$dl25;
      HEAP16[(($len26)>>1)]=$conv23;
      var $43=$n;
      var $44=$max_code;
      var $cmp27=(($43)|0) > (($44)|0);
      if ($cmp27) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 16; break;
    case 11: 
      var $45=$bits;
      var $46=$s_addr;
      var $bl_count31=(($46+2876)|0);
      var $arrayidx32=(($bl_count31+($45<<1))|0);
      var $47=HEAP16[(($arrayidx32)>>1)];
      var $inc33=(($47+1)&65535);
      HEAP16[(($arrayidx32)>>1)]=$inc33;
      $xbits=0;
      var $48=$n;
      var $49=$base;
      var $cmp34=(($48)|0) >= (($49)|0);
      if ($cmp34) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $50=$n;
      var $51=$base;
      var $sub=(($50-$51)|0);
      var $52=$extra;
      var $arrayidx37=(($52+($sub<<2))|0);
      var $53=HEAP32[(($arrayidx37)>>2)];
      $xbits=$53;
      __label__ = 13; break;
    case 13: 
      var $54=$n;
      var $55=$tree;
      var $arrayidx39=(($55+($54<<2))|0);
      var $fc=(($arrayidx39)|0);
      var $freq=$fc;
      var $56=HEAP16[(($freq)>>1)];
      $f=$56;
      var $57=$f;
      var $conv40=(($57)&65535);
      var $58=$bits;
      var $59=$xbits;
      var $add41=(($58+$59)|0);
      var $mul=(($conv40*$add41)|0);
      var $60=$s_addr;
      var $opt_len=(($60+5800)|0);
      var $61=HEAP32[(($opt_len)>>2)];
      var $add42=(($61+$mul)|0);
      HEAP32[(($opt_len)>>2)]=$add42;
      var $62=$stree;
      var $tobool=(($62)|0)!=0;
      if ($tobool) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $63=$f;
      var $conv44=(($63)&65535);
      var $64=$n;
      var $65=$stree;
      var $arrayidx45=(($65+($64<<2))|0);
      var $dl46=(($arrayidx45+2)|0);
      var $len47=$dl46;
      var $66=HEAPU16[(($len47)>>1)];
      var $conv48=(($66)&65535);
      var $67=$xbits;
      var $add49=(($conv48+$67)|0);
      var $mul50=(($conv44*$add49)|0);
      var $68=$s_addr;
      var $static_len=(($68+5804)|0);
      var $69=HEAP32[(($static_len)>>2)];
      var $add51=(($69+$mul50)|0);
      HEAP32[(($static_len)>>2)]=$add51;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $70=$h;
      var $inc54=(($70+1)|0);
      $h=$inc54;
      __label__ = 6; break;
    case 17: 
      var $71=$overflow;
      var $cmp56=(($71)|0)==0;
      if ($cmp56) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 36; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $72=$max_length;
      var $sub60=(($72-1)|0);
      $bits=$sub60;
      __label__ = 21; break;
    case 21: 
      var $73=$bits;
      var $74=$s_addr;
      var $bl_count61=(($74+2876)|0);
      var $arrayidx62=(($bl_count61+($73<<1))|0);
      var $75=HEAPU16[(($arrayidx62)>>1)];
      var $conv63=(($75)&65535);
      var $cmp64=(($conv63)|0)==0;
      if ($cmp64) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $76=$bits;
      var $dec=(($76-1)|0);
      $bits=$dec;
      __label__ = 21; break;
    case 23: 
      var $77=$bits;
      var $78=$s_addr;
      var $bl_count66=(($78+2876)|0);
      var $arrayidx67=(($bl_count66+($77<<1))|0);
      var $79=HEAP16[(($arrayidx67)>>1)];
      var $dec68=(($79-1)&65535);
      HEAP16[(($arrayidx67)>>1)]=$dec68;
      var $80=$bits;
      var $add69=(($80+1)|0);
      var $81=$s_addr;
      var $bl_count70=(($81+2876)|0);
      var $arrayidx71=(($bl_count70+($add69<<1))|0);
      var $82=HEAPU16[(($arrayidx71)>>1)];
      var $conv72=(($82)&65535);
      var $add73=(($conv72+2)|0);
      var $conv74=(($add73) & 65535);
      HEAP16[(($arrayidx71)>>1)]=$conv74;
      var $83=$max_length;
      var $84=$s_addr;
      var $bl_count75=(($84+2876)|0);
      var $arrayidx76=(($bl_count75+($83<<1))|0);
      var $85=HEAP16[(($arrayidx76)>>1)];
      var $dec77=(($85-1)&65535);
      HEAP16[(($arrayidx76)>>1)]=$dec77;
      var $86=$overflow;
      var $sub78=(($86-2)|0);
      $overflow=$sub78;
      __label__ = 24; break;
    case 24: 
      var $87=$overflow;
      var $cmp79=(($87)|0) > 0;
      if ($cmp79) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 25: 
      var $88=$max_length;
      $bits=$88;
      __label__ = 26; break;
    case 26: 
      var $89=$bits;
      var $cmp82=(($89)|0)!=0;
      if ($cmp82) { __label__ = 27; break; } else { __label__ = 36; break; }
    case 27: 
      var $90=$bits;
      var $91=$s_addr;
      var $bl_count85=(($91+2876)|0);
      var $arrayidx86=(($bl_count85+($90<<1))|0);
      var $92=HEAPU16[(($arrayidx86)>>1)];
      var $conv87=(($92)&65535);
      $n=$conv87;
      __label__ = 28; break;
    case 28: 
      var $93=$n;
      var $cmp89=(($93)|0)!=0;
      if ($cmp89) { __label__ = 29; break; } else { __label__ = 34; break; }
    case 29: 
      var $94=$h;
      var $dec92=(($94-1)|0);
      $h=$dec92;
      var $95=$s_addr;
      var $heap93=(($95+2908)|0);
      var $arrayidx94=(($heap93+($dec92<<2))|0);
      var $96=HEAP32[(($arrayidx94)>>2)];
      $m=$96;
      var $97=$m;
      var $98=$max_code;
      var $cmp95=(($97)|0) > (($98)|0);
      if ($cmp95) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      __label__ = 28; break;
    case 31: 
      var $99=$m;
      var $100=$tree;
      var $arrayidx99=(($100+($99<<2))|0);
      var $dl100=(($arrayidx99+2)|0);
      var $len101=$dl100;
      var $101=HEAPU16[(($len101)>>1)];
      var $conv102=(($101)&65535);
      var $102=$bits;
      var $cmp103=(($conv102)|0)!=(($102)|0);
      if ($cmp103) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $103=$bits;
      var $104=$m;
      var $105=$tree;
      var $arrayidx106=(($105+($104<<2))|0);
      var $dl107=(($arrayidx106+2)|0);
      var $len108=$dl107;
      var $106=HEAPU16[(($len108)>>1)];
      var $conv109=(($106)&65535);
      var $sub110=(($103-$conv109)|0);
      var $107=$m;
      var $108=$tree;
      var $arrayidx111=(($108+($107<<2))|0);
      var $fc112=(($arrayidx111)|0);
      var $freq113=$fc112;
      var $109=HEAPU16[(($freq113)>>1)];
      var $conv114=(($109)&65535);
      var $mul115=(($sub110*$conv114)|0);
      var $110=$s_addr;
      var $opt_len116=(($110+5800)|0);
      var $111=HEAP32[(($opt_len116)>>2)];
      var $add117=(($111+$mul115)|0);
      HEAP32[(($opt_len116)>>2)]=$add117;
      var $112=$bits;
      var $conv118=(($112) & 65535);
      var $113=$m;
      var $114=$tree;
      var $arrayidx119=(($114+($113<<2))|0);
      var $dl120=(($arrayidx119+2)|0);
      var $len121=$dl120;
      HEAP16[(($len121)>>1)]=$conv118;
      __label__ = 33; break;
    case 33: 
      var $115=$n;
      var $dec123=(($115-1)|0);
      $n=$dec123;
      __label__ = 28; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $116=$bits;
      var $dec126=(($116-1)|0);
      $bits=$dec126;
      __label__ = 26; break;
    case 36: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_gen_bitlen["X"]=1;

function _gen_codes($tree, $max_code, $bl_count) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $tree_addr;
      var $max_code_addr;
      var $bl_count_addr;
      var $next_code=__stackBase__;
      var $code;
      var $bits;
      var $n;
      var $len;
      $tree_addr=$tree;
      $max_code_addr=$max_code;
      $bl_count_addr=$bl_count;
      $code=0;
      $bits=1;
      __label__ = 2; break;
    case 2: 
      var $0=$bits;
      var $cmp=(($0)|0) <= 15;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $1=$code;
      var $conv=(($1)&65535);
      var $2=$bits;
      var $sub=(($2-1)|0);
      var $3=$bl_count_addr;
      var $arrayidx=(($3+($sub<<1))|0);
      var $4=HEAPU16[(($arrayidx)>>1)];
      var $conv1=(($4)&65535);
      var $add=(($conv+$conv1)|0);
      var $shl=$add << 1;
      var $conv2=(($shl) & 65535);
      $code=$conv2;
      var $5=$bits;
      var $arrayidx3=(($next_code+($5<<1))|0);
      HEAP16[(($arrayidx3)>>1)]=$conv2;
      __label__ = 4; break;
    case 4: 
      var $6=$bits;
      var $inc=(($6+1)|0);
      $bits=$inc;
      __label__ = 2; break;
    case 5: 
      $n=0;
      __label__ = 6; break;
    case 6: 
      var $7=$n;
      var $8=$max_code_addr;
      var $cmp5=(($7)|0) <= (($8)|0);
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $9=$n;
      var $10=$tree_addr;
      var $arrayidx8=(($10+($9<<2))|0);
      var $dl=(($arrayidx8+2)|0);
      var $len9=$dl;
      var $11=HEAPU16[(($len9)>>1)];
      var $conv10=(($11)&65535);
      $len=$conv10;
      var $12=$len;
      var $cmp11=(($12)|0)==0;
      if ($cmp11) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 10; break;
    case 9: 
      var $13=$len;
      var $arrayidx13=(($next_code+($13<<1))|0);
      var $14=HEAPU16[(($arrayidx13)>>1)];
      var $inc14=(($14+1)&65535);
      HEAP16[(($arrayidx13)>>1)]=$inc14;
      var $conv15=(($14)&65535);
      var $15=$len;
      var $call=_bi_reverse($conv15, $15);
      var $conv16=(($call) & 65535);
      var $16=$n;
      var $17=$tree_addr;
      var $arrayidx17=(($17+($16<<2))|0);
      var $fc=(($arrayidx17)|0);
      var $code18=$fc;
      HEAP16[(($code18)>>1)]=$conv16;
      __label__ = 10; break;
    case 10: 
      var $18=$n;
      var $inc20=(($18+1)|0);
      $n=$inc20;
      __label__ = 6; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_gen_codes["X"]=1;

function _zmemcpy($dest, $source, $len) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $dest_addr;
      var $source_addr;
      var $len_addr;
      $dest_addr=$dest;
      $source_addr=$source;
      $len_addr=$len;
      var $0=$len_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $1=$source_addr;
      var $incdec_ptr=(($1+1)|0);
      $source_addr=$incdec_ptr;
      var $2=HEAP8[($1)];
      var $3=$dest_addr;
      var $incdec_ptr1=(($3+1)|0);
      $dest_addr=$incdec_ptr1;
      HEAP8[($3)]=$2;
      __label__ = 5; break;
    case 5: 
      var $4=$len_addr;
      var $dec=(($4-1)|0);
      $len_addr=$dec;
      var $cmp2=(($dec)|0)!=0;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _zmemzero($dest, $len) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $dest_addr;
      var $len_addr;
      $dest_addr=$dest;
      $len_addr=$len;
      var $0=$len_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; }
    case 2: 
      __label__ = 6; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $1=$dest_addr;
      var $incdec_ptr=(($1+1)|0);
      $dest_addr=$incdec_ptr;
      HEAP8[($1)]=0;
      __label__ = 5; break;
    case 5: 
      var $2=$len_addr;
      var $dec=(($2-1)|0);
      $len_addr=$dec;
      var $cmp1=(($dec)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc($bytes) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $bytes_addr;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b33;
      var $p34;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F68;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F102;
      var $rsize157;
      var $p159;
      var $r163;
      var $dvs;
      var $rsize185;
      var $p187;
      var $r188;
      $bytes_addr=$bytes;
      var $0=$bytes_addr; //@line 4628 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) <= 244; //@line 4628 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 2; break; } else { __label__ = 37; break; } //@line 4628 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $1=$bytes_addr; //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($1)>>>0) < 11; //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $cond = 16;__label__ = 5; break; //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $2=$bytes_addr; //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($2+4)|0); //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add2=(($add+7)|0); //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$add2 & -8; //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $and;__label__ = 5; break; //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond; //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nb=$cond; //@line 4631 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=$nb; //@line 4632 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr=$3 >>> 3; //@line 4632 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $idx=$shr; //@line 4632 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=HEAPU32[((((__gm_)|0))>>2)]; //@line 4633 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$idx; //@line 4633 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr3=$4 >>> (($5)>>>0); //@line 4633 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $smallbits=$shr3; //@line 4633 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=$smallbits; //@line 4635 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and4=$6 & 3; //@line 4635 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp5=(($and4)|0)!=0; //@line 4635 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 13; break; } //@line 4635 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $7=$smallbits; //@line 4637 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg=$7 ^ -1; //@line 4637 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and7=$neg & 1; //@line 4637 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=$idx; //@line 4637 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add8=(($8+$and7)|0); //@line 4637 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $idx=$add8; //@line 4637 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=$idx; //@line 4638 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl=$9 << 1; //@line 4638 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=((((__gm_+40)|0)+($shl<<2))|0); //@line 4638 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$arrayidx; //@line 4638 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$10; //@line 4638 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $b=$11; //@line 4638 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$b; //@line 4639 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd=(($12+8)|0); //@line 4639 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($fd)>>2)]; //@line 4639 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$13; //@line 4639 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$p; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd9=(($14+8)|0); //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($fd9)>>2)]; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F=$15; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$b; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$F; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp10=(($16)|0)==(($17)|0); //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $18=$idx; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl12=1 << $18; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg13=$shl12 ^ -1; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[((((__gm_)|0))>>2)]; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and14=$19 & $neg13; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and14; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $20=$F; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=$20; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $22=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp15=(($21)>>>0) >= (($22)>>>0); //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp15)&1); //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $23=$F; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $24=$b; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd17=(($24+8)|0); //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd17)>>2)]=$23; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $25=$b; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=$F; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk=(($26+12)|0); //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$25; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      _abort(); //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4641 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $27=$idx; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl20=$27 << 3; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$shl20 | 1; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or21=$or | 2; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=$p; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($28+4)|0); //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or21; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=$p; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $30=$29; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=$idx; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl22=$31 << 3; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($30+$shl22)|0); //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $32=$add_ptr; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head23=(($32+4)|0); //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $33=HEAP32[(($head23)>>2)]; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or24=$33 | 1; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head23)>>2)]=$or24; //@line 4642 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $34=$p; //@line 4643 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $35=$34; //@line 4643 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr25=(($35+8)|0); //@line 4643 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr25; //@line 4643 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4645 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $36=$nb; //@line 4648 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $37=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4648 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($36)>>>0) > (($37)>>>0); //@line 4648 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 14; break; } else { __label__ = 35; break; } //@line 4648 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $38=$smallbits; //@line 4649 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp30=(($38)|0)!=0; //@line 4649 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp30) { __label__ = 15; break; } else { __label__ = 30; break; } //@line 4649 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $39=$smallbits; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $40=$idx; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl35=$39 << $40; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$idx; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl36=1 << $41; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl37=$shl36 << 1; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $42=$idx; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl38=1 << $42; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl39=$shl38 << 1; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$shl39))|0); //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or40=$shl37 | $sub; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and41=$shl35 & $or40; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $leftbits=$and41; //@line 4653 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $43=$leftbits; //@line 4654 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $44=$leftbits; //@line 4654 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub42=(((-$44))|0); //@line 4654 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and43=$43 & $sub42; //@line 4654 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and43; //@line 4654 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $45=$leastbit; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub44=(($45-1)|0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$sub44; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $46=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr45=$46 >>> 12; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and46=$shr45 & 16; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and46; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$K; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$47; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=$K; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $49=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr47=$49 >>> (($48)>>>0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr47; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $50=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr48=$50 >>> 5; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and49=$shr48 & 8; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and49; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $51=$N; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add50=(($51+$and49)|0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add50; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $52=$K; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $53=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr51=$53 >>> (($52)>>>0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr51; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $54=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr52=$54 >>> 2; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and53=$shr52 & 4; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and53; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $55=$N; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add54=(($55+$and53)|0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add54; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $56=$K; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $57=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr55=$57 >>> (($56)>>>0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr55; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $58=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr56=$58 >>> 1; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and57=$shr56 & 2; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and57; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $59=$N; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add58=(($59+$and57)|0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add58; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $60=$K; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $61=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr59=$61 >>> (($60)>>>0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr59; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $62=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr60=$62 >>> 1; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and61=$shr60 & 1; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and61; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $63=$N; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add62=(($63+$and61)|0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add62; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $64=$K; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $65=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr63=$65 >>> (($64)>>>0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr63; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $66=$N; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $67=$Y; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add64=(($66+$67)|0); //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $i=$add64; //@line 4655 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $68=$i; //@line 4656 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl65=$68 << 1; //@line 4656 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx66=((((__gm_+40)|0)+($shl65<<2))|0); //@line 4656 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $69=$arrayidx66; //@line 4656 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 4656 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $b33=$70; //@line 4656 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $71=$b33; //@line 4657 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd67=(($71+8)|0); //@line 4657 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($fd67)>>2)]; //@line 4657 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p34=$72; //@line 4657 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $73=$p34; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd69=(($73+8)|0); //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[(($fd69)>>2)]; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F68=$74; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $75=$b33; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $76=$F68; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp70=(($75)|0)==(($76)|0); //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp70) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $77=$i; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl73=1 << $77; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg74=$shl73 ^ -1; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[((((__gm_)|0))>>2)]; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and75=$78 & $neg74; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and75; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $79=$F68; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $80=$79; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $81=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp77=(($80)>>>0) >= (($81)>>>0); //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv78=(($cmp77)&1); //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval79=(($conv78)==(1)); //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool80=(($expval79)|0)!=0; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool80) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $82=$F68; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $83=$b33; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd82=(($83+8)|0); //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd82)>>2)]=$82; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $84=$b33; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $85=$F68; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk83=(($85+12)|0); //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk83)>>2)]=$84; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 19: 
      _abort(); //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4659 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $86=$i; //@line 4660 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl87=$86 << 3; //@line 4660 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $87=$nb; //@line 4660 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub88=(($shl87-$87)|0); //@line 4660 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub88; //@line 4660 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $88=$nb; //@line 4665 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or89=$88 | 1; //@line 4665 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or90=$or89 | 2; //@line 4665 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $89=$p34; //@line 4665 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head91=(($89+4)|0); //@line 4665 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head91)>>2)]=$or90; //@line 4665 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $90=$p34; //@line 4666 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $91=$90; //@line 4666 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $92=$nb; //@line 4666 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr92=(($91+$92)|0); //@line 4666 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $93=$add_ptr92; //@line 4666 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $r=$93; //@line 4666 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $94=$rsize; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or93=$94 | 1; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $95=$r; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head94=(($95+4)|0); //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head94)>>2)]=$or93; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $96=$rsize; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $97=$r; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $98=$97; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $99=$rsize; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr95=(($98+$99)|0); //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $100=$add_ptr95; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($100)|0); //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$96; //@line 4667 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $DVS=$101; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $102=$DVS; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($102)|0)!=0; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp96) { __label__ = 22; break; } else { __label__ = 29; break; } //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $103=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $DV=$103; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $104=$DVS; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr99=$104 >>> 3; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I=$shr99; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $105=$I; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl100=$105 << 1; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx101=((((__gm_+40)|0)+($shl100<<2))|0); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $106=$arrayidx101; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B=$107; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $108=$B; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F102=$108; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $109=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $110=$I; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl103=1 << $110; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and104=$109 & $shl103; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool105=(($and104)|0)!=0; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool105) { __label__ = 24; break; } else { __label__ = 23; break; } //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $111=$I; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl107=1 << $111; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or108=$112 | $shl107; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$or108; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $113=$B; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd110=(($113+8)|0); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($fd110)>>2)]; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $116=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp111=(($115)>>>0) >= (($116)>>>0); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv112=(($cmp111)&1); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval113=(($conv112)==(1)); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool114=(($expval113)|0)!=0; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool114) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $117=$B; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd116=(($117+8)|0); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $118=HEAP32[(($fd116)>>2)]; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F102=$118; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $119=$DV; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $120=$B; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd120=(($120+8)|0); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd120)>>2)]=$119; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $121=$DV; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $122=$F102; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk121=(($122+12)|0); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk121)>>2)]=$121; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $123=$F102; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $124=$DV; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd122=(($124+8)|0); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd122)>>2)]=$123; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $125=$B; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $126=$DV; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk123=(($126+12)|0); //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk123)>>2)]=$125; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $127=$rsize; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$127; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $128=$r; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$128; //@line 4668 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $129=$p34; //@line 4670 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $130=$129; //@line 4670 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr125=(($130+8)|0); //@line 4670 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr125; //@line 4670 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $131=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($131)|0)!=0; //@line 4675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 4675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $132=$nb; //@line 4675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call=_tmalloc_small(__gm_, $132); //@line 4675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mem=$call; //@line 4675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp129=(($call)|0)!=0; //@line 4675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp129) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 32: 
      __label__ = 53; break; //@line 4677 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break; //@line 4679 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 44; break; //@line 4680 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $133=$bytes_addr; //@line 4681 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp137=(($133)>>>0) >= 4294967232; //@line 4681 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp137) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 4681 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 38: 
      $nb=-1; //@line 4682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 43; break; //@line 4682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $134=$bytes_addr; //@line 4684 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add141=(($134+4)|0); //@line 4684 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add142=(($add141+7)|0); //@line 4684 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and143=$add142 & -8; //@line 4684 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nb=$and143; //@line 4684 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($135)|0)!=0; //@line 4685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 4685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $136=$nb; //@line 4685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call147=_tmalloc_large(__gm_, $136); //@line 4685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mem=$call147; //@line 4685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($call147)|0)!=0; //@line 4685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 4685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 53; break; //@line 4687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $137=$nb; //@line 4691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $138=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp154=(($137)>>>0) <= (($138)>>>0); //@line 4691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp154) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 4691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $139=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4692 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $140=$nb; //@line 4692 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub158=(($139-$140)|0); //@line 4692 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize157=$sub158; //@line 4692 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4693 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p159=$141; //@line 4693 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $142=$rsize157; //@line 4694 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp160=(($142)>>>0) >= 16; //@line 4694 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp160) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 4694 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $143=$p159; //@line 4695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $144=$143; //@line 4695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $145=$nb; //@line 4695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr164=(($144+$145)|0); //@line 4695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $146=$add_ptr164; //@line 4695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$146; //@line 4695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $r163=$146; //@line 4695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $147=$rsize157; //@line 4696 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$147; //@line 4696 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $148=$rsize157; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or165=$148 | 1; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $149=$r163; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head166=(($149+4)|0); //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head166)>>2)]=$or165; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $150=$rsize157; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $151=$r163; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $152=$151; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $153=$rsize157; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr167=(($152+$153)|0); //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $154=$add_ptr167; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot168=(($154)|0); //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot168)>>2)]=$150; //@line 4697 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $155=$nb; //@line 4698 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or169=$155 | 1; //@line 4698 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or170=$or169 | 2; //@line 4698 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $156=$p159; //@line 4698 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head171=(($156+4)|0); //@line 4698 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head171)>>2)]=$or170; //@line 4698 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4699 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $157=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4701 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $dvs=$157; //@line 4701 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4702 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4703 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $158=$dvs; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or173=$158 | 1; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or174=$or173 | 2; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $159=$p159; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head175=(($159+4)|0); //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head175)>>2)]=$or174; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $160=$p159; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $162=$dvs; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr176=(($161+$162)|0); //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $163=$add_ptr176; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head177=(($163+4)|0); //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $164=HEAP32[(($head177)>>2)]; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or178=$164 | 1; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head177)>>2)]=$or178; //@line 4704 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break;
    case 48: 
      var $165=$p159; //@line 4706 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $166=$165; //@line 4706 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr180=(($166+8)|0); //@line 4706 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr180; //@line 4706 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4708 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $167=$nb; //@line 4711 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $168=HEAPU32[((((__gm_+12)|0))>>2)]; //@line 4711 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp182=(($167)>>>0) < (($168)>>>0); //@line 4711 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp182) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4711 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $169=$nb; //@line 4712 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $170=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4712 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub186=(($170-$169)|0); //@line 4712 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$sub186; //@line 4712 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize185=$sub186; //@line 4712 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4713 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p187=$171; //@line 4713 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $172=$p187; //@line 4714 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $173=$172; //@line 4714 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $174=$nb; //@line 4714 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr189=(($173+$174)|0); //@line 4714 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $175=$add_ptr189; //@line 4714 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$175; //@line 4714 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $r188=$175; //@line 4714 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $176=$rsize185; //@line 4715 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or190=$176 | 1; //@line 4715 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $177=$r188; //@line 4715 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head191=(($177+4)|0); //@line 4715 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head191)>>2)]=$or190; //@line 4715 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $178=$nb; //@line 4716 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or192=$178 | 1; //@line 4716 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or193=$or192 | 2; //@line 4716 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $179=$p187; //@line 4716 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head194=(($179+4)|0); //@line 4716 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head194)>>2)]=$or193; //@line 4716 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $180=$p187; //@line 4717 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $181=$180; //@line 4717 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr195=(($181+8)|0); //@line 4717 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr195; //@line 4717 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4720 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $182=$nb; //@line 4723 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call198=_sys_alloc(__gm_, $182); //@line 4723 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mem=$call198; //@line 4723 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4723 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $183=$mem; //@line 4727 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $183; //@line 4727 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_malloc"] = _malloc;_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $m_addr;
      var $nb_addr;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F191;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$m_addr; //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($0+4)|0); //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[(($treemap)>>2)]; //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap1=(($2+4)|0); //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[(($treemap1)>>2)]; //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$3))|0); //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$1 & $sub; //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and; //@line 4268 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=$leastbit; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub2=(($4-1)|0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$sub2; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr=$5 >>> 12; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and3=$shr & 16; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and3; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=$K; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$6; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$K; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr4=$8 >>> (($7)>>>0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr4; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr5=$9 >>> 5; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and6=$shr5 & 8; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and6; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$N; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($10+$and6)|0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$K; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr7=$12 >>> (($11)>>>0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr7; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr8=$13 >>> 2; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and9=$shr8 & 4; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and9; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$N; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add10=(($14+$and9)|0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add10; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=$K; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr11=$16 >>> (($15)>>>0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr11; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr12=$17 >>> 1; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and13=$shr12 & 2; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and13; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=$N; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add14=(($18+$and13)|0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add14; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=$K; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr15=$20 >>> (($19)>>>0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr15; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr16=$21 >>> 1; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and17=$shr16 & 1; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and17; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $22=$N; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add18=(($22+$and17)|0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add18; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=$K; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $24=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr19=$24 >>> (($23)>>>0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shr19; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $25=$N; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=$Y; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add20=(($25+$26)|0); //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $i=$add20; //@line 4269 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $27=$i; //@line 4270 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=$m_addr; //@line 4270 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($28+304)|0); //@line 4270 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($treebins+($27<<2))|0); //@line 4270 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($arrayidx)>>2)]; //@line 4270 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $t=$29; //@line 4270 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $v=$29; //@line 4270 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $30=$t; //@line 4271 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($30+4)|0); //@line 4271 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($head)>>2)]; //@line 4271 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and21=$31 & -8; //@line 4271 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $32=$nb_addr; //@line 4271 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub22=(($and21-$32)|0); //@line 4271 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub22; //@line 4271 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $33=$t; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child=(($33+16)|0); //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx23=(($child)|0); //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[(($arrayidx23)>>2)]; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($34)|0)!=0; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $35=$t; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child24=(($35+16)|0); //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx25=(($child24)|0); //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($arrayidx25)>>2)]; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $36;__label__ = 5; break; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $37=$t; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child26=(($37+16)|0); //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx27=(($child26+4)|0); //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($arrayidx27)>>2)]; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $38;__label__ = 5; break; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $t=$cond; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($cond)|0)!=0; //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 4273 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $39=$t; //@line 4274 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head29=(($39+4)|0); //@line 4274 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($head29)>>2)]; //@line 4274 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and30=$40 & -8; //@line 4274 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$nb_addr; //@line 4274 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub31=(($and30-$41)|0); //@line 4274 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $trem=$sub31; //@line 4274 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $42=$trem; //@line 4275 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $43=$rsize; //@line 4275 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp32=(($42)>>>0) < (($43)>>>0); //@line 4275 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4275 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $44=$trem; //@line 4276 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize=$44; //@line 4276 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $45=$t; //@line 4277 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $v=$45; //@line 4277 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4278 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 2; break; //@line 4279 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $46=$v; //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$46; //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($48+16)|0); //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $49=HEAPU32[(($least_addr)>>2)]; //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp33=(($47)>>>0) >= (($49)>>>0); //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp33)&1); //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 10; break; } else { __label__ = 69; break; } //@line 4281 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $50=$v; //@line 4282 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4282 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $52=$nb_addr; //@line 4282 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($51+$52)|0); //@line 4282 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $53=$add_ptr; //@line 4282 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $r=$53; //@line 4282 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $54=$v; //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $55=$54; //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $56=$r; //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp35=(($55)>>>0) < (($57)>>>0); //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv36=(($cmp35)&1); //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval37=(($conv36)==(1)); //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool38=(($expval37)|0)!=0; //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool38) { __label__ = 11; break; } else { __label__ = 68; break; } //@line 4284 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $58=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent=(($58+24)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($parent)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $XP=$59; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $60=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk=(($60+12)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[(($bk)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $62=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp40=(($61)|0)!=(($62)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp40) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $63=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd=(($63+8)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($fd)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F=$64; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $65=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk43=(($65+12)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $66=HEAP32[(($bk43)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$66; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $67=$F; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $68=$67; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $69=$m_addr; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr44=(($69+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $70=HEAPU32[(($least_addr44)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp45=(($68)>>>0) >= (($70)>>>0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv46=(($cmp45)&1); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval47=(($conv46)==(1)); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool48=(($expval47)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $71=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $72=$F; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk50=(($72+12)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk50)>>2)]=$71; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $73=$F; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $74=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd51=(($74+8)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd51)>>2)]=$73; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      _abort(); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 28; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $75=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child54=(($75+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx55=(($child54+4)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx55; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($arrayidx55)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$76; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp56=(($76)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp56) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $77=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child58=(($77+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx59=(($child58)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx59; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($arrayidx59)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$78; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp60=(($78)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp60) { __label__ = 18; break; } else { __label__ = 27; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 18: 
      __label__ = 19; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $79=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child64=(($79+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx65=(($child64+4)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx65; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($arrayidx65)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp66=(($80)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp66) { var $83 = 1;__label__ = 21; break; } else { __label__ = 20; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $81=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child68=(($81+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx69=(($child68)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx69; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $82=HEAP32[(($arrayidx69)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp70=(($82)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $83 = $cmp70;__label__ = 21; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $83;
      if ($83) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $84=$CP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$84; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $85=HEAP32[(($84)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$85; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 19; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $86=$RP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $87=$86; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $88=$m_addr; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr74=(($88+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $89=HEAPU32[(($least_addr74)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($87)>>>0) >= (($89)>>>0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv76=(($cmp75)&1); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval77=(($conv76)==(1)); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool78=(($expval77)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool78) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $90=$RP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($90)>>2)]=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      _abort(); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 26: 
      __label__ = 27; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $91=$XP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp84=(($91)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp84) { __label__ = 29; break; } else { __label__ = 56; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $92=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index=(($92+28)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($index)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $94=$m_addr; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins87=(($94+304)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx88=(($treebins87+($93<<2))|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx88; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $95=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $96=$H; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp89=(($95)|0)==(($97)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp89) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $98=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $99=$H; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($99)>>2)]=$98; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($98)|0)==0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp92) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $100=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index95=(($100+28)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($index95)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $101; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $102=$m_addr; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap96=(($102+4)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($treemap96)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and97=$103 & $neg; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap96)>>2)]=$and97; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 32: 
      __label__ = 40; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $104=$XP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $105=$104; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $106=$m_addr; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr100=(($106+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $107=HEAPU32[(($least_addr100)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($105)>>>0) >= (($107)>>>0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv102=(($cmp101)&1); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval103=(($conv102)==(1)); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool104=(($expval103)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool104) { __label__ = 34; break; } else { __label__ = 38; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $108=$XP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child106=(($108+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx107=(($child106)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $109=HEAP32[(($arrayidx107)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $110=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp108=(($109)|0)==(($110)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp108) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $111=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $112=$XP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child111=(($112+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx112=(($child111)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx112)>>2)]=$111; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 37; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $113=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $114=$XP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child114=(($114+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx115=(($child114+4)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx115)>>2)]=$113; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 37; break;
    case 37: 
      __label__ = 39; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 38: 
      _abort(); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $115=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($115)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp120) { __label__ = 41; break; } else { __label__ = 55; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $116=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $117=$116; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $118=$m_addr; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr123=(($118+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $119=HEAPU32[(($least_addr123)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp124=(($117)>>>0) >= (($119)>>>0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv125=(($cmp124)&1); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval126=(($conv125)==(1)); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool127=(($expval126)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool127) { __label__ = 42; break; } else { __label__ = 53; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $120=$XP; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $121=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent129=(($121+24)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent129)>>2)]=$120; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $122=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child130=(($122+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx131=(($child130)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $123=HEAP32[(($arrayidx131)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C0=$123; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($123)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp132) { __label__ = 43; break; } else { __label__ = 47; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $124=$C0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $125=$124; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr135=(($126+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $127=HEAPU32[(($least_addr135)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($125)>>>0) >= (($127)>>>0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv137=(($cmp136)&1); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval138=(($conv137)==(1)); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool139=(($expval138)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool139) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $128=$C0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $129=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child141=(($129+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx142=(($child141)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx142)>>2)]=$128; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $130=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $131=$C0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent143=(($131+24)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent143)>>2)]=$130; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 45: 
      _abort(); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 47; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $132=$v; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child147=(($132+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx148=(($child147+4)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($arrayidx148)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C1=$133; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp149=(($133)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp149) { __label__ = 48; break; } else { __label__ = 52; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $134=$C1; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $135=$134; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $136=$m_addr; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr152=(($136+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $137=HEAPU32[(($least_addr152)>>2)]; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp153=(($135)>>>0) >= (($137)>>>0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv154=(($cmp153)&1); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval155=(($conv154)==(1)); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool156=(($expval155)|0)!=0; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool156) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $138=$C1; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $139=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child158=(($139+16)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx159=(($child158+4)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx159)>>2)]=$138; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $140=$R; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $141=$C1; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent160=(($141+24)|0); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent160)>>2)]=$140; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 51; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 50: 
      _abort(); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 54; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 53: 
      _abort(); //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 55; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4285 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $142=$rsize; //@line 4286 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp168=(($142)>>>0) < 16; //@line 4286 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp168) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4286 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $143=$rsize; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $144=$nb_addr; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add171=(($143+$144)|0); //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$add171 | 1; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or172=$or | 2; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $145=$v; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head173=(($145+4)|0); //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head173)>>2)]=$or172; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $146=$v; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $148=$rsize; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $149=$nb_addr; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add174=(($148+$149)|0); //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr175=(($147+$add174)|0); //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $150=$add_ptr175; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head176=(($150+4)|0); //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($head176)>>2)]; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or177=$151 | 1; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head176)>>2)]=$or177; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4287 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $152=$nb_addr; //@line 4289 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or179=$152 | 1; //@line 4289 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or180=$or179 | 2; //@line 4289 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $153=$v; //@line 4289 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head181=(($153+4)|0); //@line 4289 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head181)>>2)]=$or180; //@line 4289 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $154=$rsize; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or182=$154 | 1; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $155=$r; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head183=(($155+4)|0); //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head183)>>2)]=$or182; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $156=$rsize; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $157=$r; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $159=$rsize; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr184=(($158+$159)|0); //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $160=$add_ptr184; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($160)|0); //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$156; //@line 4290 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $161=$m_addr; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($161+8)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($dvsize)>>2)]; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $DVS=$162; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $163=$DVS; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp185=(($163)|0)!=0; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp185) { __label__ = 59; break; } else { __label__ = 66; break; } //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $164=$m_addr; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dv=(($164+20)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($dv)>>2)]; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $DV=$165; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $166=$DVS; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr188=$166 >>> 3; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I=$shr188; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $167=$I; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl189=$167 << 1; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($168+40)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx190=(($smallbins+($shl189<<2))|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $169=$arrayidx190; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $170=$169; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B=$170; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $171=$B; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F191=$171; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $172=$m_addr; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($172)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $173=HEAP32[(($smallmap)>>2)]; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $174=$I; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl192=1 << $174; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and193=$173 & $shl192; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool194=(($and193)|0)!=0; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool194) { __label__ = 61; break; } else { __label__ = 60; break; } //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $175=$I; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl196=1 << $175; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $176=$m_addr; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap197=(($176)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($smallmap197)>>2)]; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or198=$177 | $shl196; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap197)>>2)]=$or198; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $178=$B; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd200=(($178+8)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $179=HEAP32[(($fd200)>>2)]; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $180=$179; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $181=$m_addr; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr201=(($181+16)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $182=HEAPU32[(($least_addr201)>>2)]; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp202=(($180)>>>0) >= (($182)>>>0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv203=(($cmp202)&1); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval204=(($conv203)==(1)); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool205=(($expval204)|0)!=0; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool205) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $183=$B; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd207=(($183+8)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $184=HEAP32[(($fd207)>>2)]; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F191=$184; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 63: 
      _abort(); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $185=$DV; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $186=$B; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd211=(($186+8)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd211)>>2)]=$185; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $187=$DV; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $188=$F191; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk212=(($188+12)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk212)>>2)]=$187; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $189=$F191; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $190=$DV; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd213=(($190+8)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd213)>>2)]=$189; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $191=$B; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $192=$DV; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk214=(($192+12)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk214)>>2)]=$191; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $193=$rsize; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $194=$m_addr; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dvsize216=(($194+8)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize216)>>2)]=$193; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $195=$r; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $196=$m_addr; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dv217=(($196+20)|0); //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv217)>>2)]=$195; //@line 4291 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break;
    case 67: 
      var $197=$v; //@line 4293 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $198=$197; //@line 4293 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr219=(($198+8)|0); //@line 4293 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $add_ptr219; //@line 4293 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break; //@line 4295 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 69: 
      _abort(); //@line 4297 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4297 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y68;
      var $K70;
      var $N73;
      var $trem97;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F282;
      var $TP;
      var $H307;
      var $I308;
      var $X309;
      var $Y319;
      var $N320;
      var $K324;
      var $T;
      var $K365;
      var $C;
      var $F404;
      $m_addr=$m;
      $nb_addr=$nb;
      $v=0; //@line 4194 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $0=$nb_addr; //@line 4195 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$0))|0); //@line 4195 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub; //@line 4195 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1=$nb_addr; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr=$1 >>> 8; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $X=$shr; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$X; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($2)|0)==0; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      $idx=0; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $3=$X; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($3)>>>0) > 65535; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $idx=31; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $4=$X; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$4; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$Y; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub4=(($5-256)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr5=$sub4 >>> 16; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$shr5 & 8; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$and; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=$N; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$Y; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl=$7 << $6; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub6=(($shl-4096)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr7=$sub6 >>> 16; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and8=$shr7 & 4; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and8; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=$K; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=$N; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($9+$8)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$K; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$Y; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl9=$11 << $10; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl9; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub10=(($shl9-16384)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr11=$sub10 >>> 16; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and12=$shr11 & 2; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and12; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$N; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add13=(($12+$and12)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add13; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=$N; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub14=((14-$13)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$K; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=$Y; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl15=$15 << $14; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl15; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr16=$shl15 >>> 15; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add17=(($sub14+$shr16)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$add17; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$K; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl18=$16 << 1; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$nb_addr; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=$K; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add19=(($18+7)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr20=$17 >>> (($add19)>>>0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and21=$shr20 & 1; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add22=(($shl18+$and21)|0); //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $idx=$add22; //@line 4198 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $19=$idx; //@line 4199 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=$m_addr; //@line 4199 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($20+304)|0); //@line 4199 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($treebins+($19<<2))|0); //@line 4199 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[(($arrayidx)>>2)]; //@line 4199 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $t=$21; //@line 4199 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($21)|0)!=0; //@line 4199 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 8; break; } else { __label__ = 23; break; } //@line 4199 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $22=$nb_addr; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=$idx; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($23)|0)==31; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $cond = 0;__label__ = 11; break; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $24=$idx; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr27=$24 >>> 1; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add28=(($shr27+8)|0); //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub29=(($add28-2)|0); //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub30=((31-$sub29)|0); //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $sub30;__label__ = 11; break; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $cond; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl31=$22 << $cond; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sizebits=$shl31; //@line 4201 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rst=0; //@line 4202 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4203 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $25=$t; //@line 4205 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($25+4)|0); //@line 4205 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($head)>>2)]; //@line 4205 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and32=$26 & -8; //@line 4205 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $27=$nb_addr; //@line 4205 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub33=(($and32-$27)|0); //@line 4205 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $trem=$sub33; //@line 4205 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=$trem; //@line 4206 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=$rsize; //@line 4206 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($28)>>>0) < (($29)>>>0); //@line 4206 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 4206 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $30=$t; //@line 4207 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $v=$30; //@line 4207 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=$trem; //@line 4208 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize=$31; //@line 4208 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($31)|0)==0; //@line 4208 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4208 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      __label__ = 22; break; //@line 4209 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 16; break; //@line 4210 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $32=$t; //@line 4211 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child=(($32+16)|0); //@line 4211 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx40=(($child+4)|0); //@line 4211 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $33=HEAP32[(($arrayidx40)>>2)]; //@line 4211 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rt=$33; //@line 4211 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $34=$sizebits; //@line 4212 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr41=$34 >>> 31; //@line 4212 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and42=$shr41 & 1; //@line 4212 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $35=$t; //@line 4212 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child43=(($35+16)|0); //@line 4212 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx44=(($child43+($and42<<2))|0); //@line 4212 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($arrayidx44)>>2)]; //@line 4212 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $t=$36; //@line 4212 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $37=$rt; //@line 4213 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp45=(($37)|0)!=0; //@line 4213 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp45) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 4213 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $38=$rt; //@line 4213 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $39=$t; //@line 4213 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($38)|0)!=(($39)|0); //@line 4213 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp46) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4213 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $40=$rt; //@line 4214 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rst=$40; //@line 4214 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 19; break; //@line 4214 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $41=$t; //@line 4215 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp49=(($41)|0)==0; //@line 4215 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp49) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4215 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $42=$rst; //@line 4216 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $t=$42; //@line 4216 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4217 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $43=$sizebits; //@line 4219 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl52=$43 << 1; //@line 4219 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sizebits=$shl52; //@line 4219 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4220 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 23; break; //@line 4221 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $44=$t; //@line 4222 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp54=(($44)|0)==0; //@line 4222 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp54) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 4222 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $45=$v; //@line 4222 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp56=(($45)|0)==0; //@line 4222 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp56) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 4222 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $46=$idx; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl58=1 << $46; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl59=$shl58 << 1; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$idx; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl60=1 << $47; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl61=$shl60 << 1; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub62=(((-$shl61))|0); //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$shl59 | $sub62; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($48+4)|0); //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($treemap)>>2)]; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and63=$or & $49; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $leftbits=$and63; //@line 4223 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $50=$leftbits; //@line 4224 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp64=(($50)|0)!=0; //@line 4224 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp64) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4224 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $51=$leftbits; //@line 4226 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $52=$leftbits; //@line 4226 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub66=(((-$52))|0); //@line 4226 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and67=$51 & $sub66; //@line 4226 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and67; //@line 4226 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $53=$leastbit; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub69=(($53-1)|0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y68=$sub69; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $54=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr71=$54 >>> 12; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and72=$shr71 & 16; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K70=$and72; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $55=$K70; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N73=$55; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $56=$K70; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $57=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr74=$57 >>> (($56)>>>0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr74; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $58=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr75=$58 >>> 5; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and76=$shr75 & 8; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K70=$and76; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $59=$N73; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add77=(($59+$and76)|0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N73=$add77; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $60=$K70; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $61=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr78=$61 >>> (($60)>>>0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr78; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $62=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr79=$62 >>> 2; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and80=$shr79 & 4; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K70=$and80; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $63=$N73; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add81=(($63+$and80)|0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N73=$add81; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $64=$K70; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $65=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr82=$65 >>> (($64)>>>0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr82; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $66=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr83=$66 >>> 1; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and84=$shr83 & 2; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K70=$and84; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $67=$N73; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add85=(($67+$and84)|0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N73=$add85; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $68=$K70; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $69=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr86=$69 >>> (($68)>>>0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr86; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $70=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr87=$70 >>> 1; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and88=$shr87 & 1; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K70=$and88; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $71=$N73; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add89=(($71+$and88)|0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N73=$add89; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $72=$K70; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $73=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr90=$73 >>> (($72)>>>0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr90; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $74=$N73; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $75=$Y68; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add91=(($74+$75)|0); //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $i=$add91; //@line 4227 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $76=$i; //@line 4228 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $77=$m_addr; //@line 4228 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins92=(($77+304)|0); //@line 4228 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx93=(($treebins92+($76<<2))|0); //@line 4228 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($arrayidx93)>>2)]; //@line 4228 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $t=$78; //@line 4228 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4229 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break; //@line 4230 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4232 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $79=$t; //@line 4232 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($79)|0)!=0; //@line 4232 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp96) { __label__ = 30; break; } else { __label__ = 36; break; } //@line 4232 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $80=$t; //@line 4233 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head98=(($80+4)|0); //@line 4233 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($head98)>>2)]; //@line 4233 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and99=$81 & -8; //@line 4233 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $82=$nb_addr; //@line 4233 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub100=(($and99-$82)|0); //@line 4233 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $trem97=$sub100; //@line 4233 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $83=$trem97; //@line 4234 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $84=$rsize; //@line 4234 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($83)>>>0) < (($84)>>>0); //@line 4234 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp101) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4234 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $85=$trem97; //@line 4235 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize=$85; //@line 4235 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $86=$t; //@line 4236 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $v=$86; //@line 4236 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4237 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $87=$t; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child104=(($87+16)|0); //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx105=(($child104)|0); //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx105)>>2)]; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp106=(($88)|0)!=0; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp106) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $89=$t; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child108=(($89+16)|0); //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx109=(($child108)|0); //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($arrayidx109)>>2)]; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond114 = $90;__label__ = 35; break; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $91=$t; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child111=(($91+16)|0); //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx112=(($child111+4)|0); //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $92=HEAP32[(($arrayidx112)>>2)]; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond114 = $92;__label__ = 35; break; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $cond114; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $t=$cond114; //@line 4238 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4239 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $93=$v; //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp115=(($93)|0)!=0; //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp115) { __label__ = 37; break; } else { __label__ = 126; break; } //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $94=$rsize; //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $95=$m_addr; //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($95+8)|0); //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($dvsize)>>2)]; //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $97=$nb_addr; //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub117=(($96-$97)|0); //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp118=(($94)>>>0) < (($sub117)>>>0); //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp118) { __label__ = 38; break; } else { __label__ = 126; break; } //@line 4242 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $98=$v; //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $100=$m_addr; //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($100+16)|0); //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $101=HEAPU32[(($least_addr)>>2)]; //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($99)>>>0) >= (($101)>>>0); //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp120)&1); //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 39; break; } else { __label__ = 125; break; } //@line 4243 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $102=$v; //@line 4244 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 4244 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $104=$nb_addr; //@line 4244 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($103+$104)|0); //@line 4244 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $105=$add_ptr; //@line 4244 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $r=$105; //@line 4244 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $106=$v; //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $108=$r; //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $109=$108; //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp122=(($107)>>>0) < (($109)>>>0); //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv123=(($cmp122)&1); //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval124=(($conv123)==(1)); //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool125=(($expval124)|0)!=0; //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool125) { __label__ = 40; break; } else { __label__ = 124; break; } //@line 4246 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $110=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent=(($110+24)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $111=HEAP32[(($parent)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $XP=$111; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $112=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk=(($112+12)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($bk)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $114=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($113)|0)!=(($114)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 41; break; } else { __label__ = 45; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $115=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd=(($115+8)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[(($fd)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F=$116; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $117=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk130=(($117+12)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $118=HEAP32[(($bk130)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$118; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $119=$F; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $121=$m_addr; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr131=(($121+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $122=HEAPU32[(($least_addr131)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($120)>>>0) >= (($122)>>>0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv133=(($cmp132)&1); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval134=(($conv133)==(1)); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool135=(($expval134)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool135) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $123=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $124=$F; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk137=(($124+12)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk137)>>2)]=$123; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $125=$F; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $126=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd138=(($126+8)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd138)>>2)]=$125; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 43: 
      _abort(); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 44: 
      __label__ = 57; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $127=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child142=(($127+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx143=(($child142+4)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx143; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $128=HEAP32[(($arrayidx143)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$128; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($128)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 47; break; } else { __label__ = 46; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $129=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child146=(($129+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx147=(($child146)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx147; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $130=HEAP32[(($arrayidx147)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$130; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($130)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 47; break; } else { __label__ = 56; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $131=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child152=(($131+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx153=(($child152+4)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx153; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $132=HEAP32[(($arrayidx153)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp154=(($132)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp154) { var $135 = 1;__label__ = 50; break; } else { __label__ = 49; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $133=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child156=(($133+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx157=(($child156)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx157; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $134=HEAP32[(($arrayidx157)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp158=(($134)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $135 = $cmp158;__label__ = 50; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $135;
      if ($135) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $136=$CP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$136; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$137; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 52: 
      var $138=$RP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $139=$138; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $140=$m_addr; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr162=(($140+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $141=HEAPU32[(($least_addr162)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp163=(($139)>>>0) >= (($141)>>>0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv164=(($cmp163)&1); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval165=(($conv164)==(1)); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool166=(($expval165)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool166) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $142=$RP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($142)>>2)]=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 55; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 54: 
      _abort(); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $143=$XP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp172=(($143)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp172) { __label__ = 58; break; } else { __label__ = 85; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $144=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index=(($144+28)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $145=HEAP32[(($index)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $146=$m_addr; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins175=(($146+304)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx176=(($treebins175+($145<<2))|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx176; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $147=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $148=$H; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $149=HEAP32[(($148)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp177=(($147)|0)==(($149)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp177) { __label__ = 59; break; } else { __label__ = 62; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $150=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $151=$H; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($151)>>2)]=$150; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp180=(($150)|0)==0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp180) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $152=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index183=(($152+28)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($index183)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl184=1 << $153; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl184 ^ -1; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $154=$m_addr; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap185=(($154+4)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $155=HEAP32[(($treemap185)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and186=$155 & $neg; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap185)>>2)]=$and186; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 61; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 61: 
      __label__ = 69; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $156=$XP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $158=$m_addr; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr189=(($158+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $159=HEAPU32[(($least_addr189)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp190=(($157)>>>0) >= (($159)>>>0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv191=(($cmp190)&1); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval192=(($conv191)==(1)); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool193=(($expval192)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool193) { __label__ = 63; break; } else { __label__ = 67; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $160=$XP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child195=(($160+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx196=(($child195)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $161=HEAP32[(($arrayidx196)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $162=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp197=(($161)|0)==(($162)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp197) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $163=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $164=$XP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child200=(($164+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx201=(($child200)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx201)>>2)]=$163; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $165=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $166=$XP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child203=(($166+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx204=(($child203+4)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx204)>>2)]=$165; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break;
    case 66: 
      __label__ = 68; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 67: 
      _abort(); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break;
    case 69: 
      var $167=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp209=(($167)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp209) { __label__ = 70; break; } else { __label__ = 84; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $168=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $169=$168; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $170=$m_addr; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr212=(($170+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $171=HEAPU32[(($least_addr212)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp213=(($169)>>>0) >= (($171)>>>0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv214=(($cmp213)&1); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval215=(($conv214)==(1)); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool216=(($expval215)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool216) { __label__ = 71; break; } else { __label__ = 82; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $172=$XP; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $173=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent218=(($173+24)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent218)>>2)]=$172; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $174=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child219=(($174+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx220=(($child219)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $175=HEAP32[(($arrayidx220)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C0=$175; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp221=(($175)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp221) { __label__ = 72; break; } else { __label__ = 76; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $176=$C0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $177=$176; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $178=$m_addr; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr224=(($178+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $179=HEAPU32[(($least_addr224)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp225=(($177)>>>0) >= (($179)>>>0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv226=(($cmp225)&1); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval227=(($conv226)==(1)); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool228=(($expval227)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool228) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $180=$C0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $181=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child230=(($181+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx231=(($child230)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx231)>>2)]=$180; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $182=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $183=$C0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent232=(($183+24)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent232)>>2)]=$182; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 75; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 74: 
      _abort(); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 75: 
      __label__ = 76; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $184=$v; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child236=(($184+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx237=(($child236+4)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $185=HEAP32[(($arrayidx237)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C1=$185; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp238=(($185)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp238) { __label__ = 77; break; } else { __label__ = 81; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $186=$C1; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $187=$186; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $188=$m_addr; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr241=(($188+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $189=HEAPU32[(($least_addr241)>>2)]; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp242=(($187)>>>0) >= (($189)>>>0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv243=(($cmp242)&1); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval244=(($conv243)==(1)); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool245=(($expval244)|0)!=0; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool245) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $190=$C1; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $191=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child247=(($191+16)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx248=(($child247+4)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx248)>>2)]=$190; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $192=$R; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $193=$C1; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent249=(($193+24)|0); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent249)>>2)]=$192; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 80; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 79: 
      _abort(); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 80: 
      __label__ = 81; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 81: 
      __label__ = 83; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 82: 
      _abort(); //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 83: 
      __label__ = 84; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break; //@line 4247 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $194=$rsize; //@line 4248 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp257=(($194)>>>0) < 16; //@line 4248 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp257) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 4248 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $195=$rsize; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $196=$nb_addr; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add260=(($195+$196)|0); //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or261=$add260 | 1; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or262=$or261 | 2; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $197=$v; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head263=(($197+4)|0); //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head263)>>2)]=$or262; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $198=$v; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $199=$198; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $200=$rsize; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $201=$nb_addr; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add264=(($200+$201)|0); //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr265=(($199+$add264)|0); //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $202=$add_ptr265; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head266=(($202+4)|0); //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($head266)>>2)]; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or267=$203 | 1; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head266)>>2)]=$or267; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 123; break; //@line 4249 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $204=$nb_addr; //@line 4251 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or269=$204 | 1; //@line 4251 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or270=$or269 | 2; //@line 4251 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $205=$v; //@line 4251 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head271=(($205+4)|0); //@line 4251 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head271)>>2)]=$or270; //@line 4251 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $206=$rsize; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or272=$206 | 1; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $207=$r; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head273=(($207+4)|0); //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head273)>>2)]=$or272; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $208=$rsize; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $209=$r; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $210=$209; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $211=$rsize; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr274=(($210+$211)|0); //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $212=$add_ptr274; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($212)|0); //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$208; //@line 4252 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $213=$rsize; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr275=$213 >>> 3; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp276=(($shr275)>>>0) < 32; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp276) { __label__ = 88; break; } else { __label__ = 95; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $214=$rsize; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr279=$214 >>> 3; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I=$shr279; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $215=$I; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl280=$215 << 1; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $216=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($216+40)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx281=(($smallbins+($shl280<<2))|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $217=$arrayidx281; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B=$218; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $219=$B; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F282=$219; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $220=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($220)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $221=HEAP32[(($smallmap)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $222=$I; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl283=1 << $222; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and284=$221 & $shl283; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool285=(($and284)|0)!=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool285) { __label__ = 90; break; } else { __label__ = 89; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $223=$I; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl287=1 << $223; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $224=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap288=(($224)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $225=HEAP32[(($smallmap288)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or289=$225 | $shl287; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap288)>>2)]=$or289; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 94; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $226=$B; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd291=(($226+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $227=HEAP32[(($fd291)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $228=$227; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $229=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr292=(($229+16)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $230=HEAPU32[(($least_addr292)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp293=(($228)>>>0) >= (($230)>>>0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv294=(($cmp293)&1); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval295=(($conv294)==(1)); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool296=(($expval295)|0)!=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool296) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $231=$B; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd298=(($231+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $232=HEAP32[(($fd298)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F282=$232; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 92: 
      _abort(); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 93: 
      __label__ = 94; break;
    case 94: 
      var $233=$r; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $234=$B; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd302=(($234+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd302)>>2)]=$233; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $235=$r; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $236=$F282; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk303=(($236+12)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk303)>>2)]=$235; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $237=$F282; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $238=$r; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd304=(($238+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd304)>>2)]=$237; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $239=$B; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $240=$r; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk305=(($240+12)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk305)>>2)]=$239; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 122; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $241=$r; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $242=$241; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $TP=$242; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $243=$rsize; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr310=$243 >>> 8; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $X309=$shr310; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $244=$X309; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp311=(($244)|0)==0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp311) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 96: 
      $I308=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $245=$X309; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp315=(($245)>>>0) > 65535; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp315) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 98: 
      $I308=31; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 100; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 99: 
      var $246=$X309; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y319=$246; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $247=$Y319; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub321=(($247-256)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr322=$sub321 >>> 16; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and323=$shr322 & 8; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N320=$and323; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $248=$N320; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $249=$Y319; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl325=$249 << $248; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl325; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub326=(($shl325-4096)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr327=$sub326 >>> 16; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and328=$shr327 & 4; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K324=$and328; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $250=$K324; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $251=$N320; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add329=(($251+$250)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N320=$add329; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $252=$K324; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $253=$Y319; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl330=$253 << $252; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl330; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub331=(($shl330-16384)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr332=$sub331 >>> 16; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and333=$shr332 & 2; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K324=$and333; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $254=$N320; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add334=(($254+$and333)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N320=$add334; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $255=$N320; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub335=((14-$255)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $256=$K324; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $257=$Y319; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl336=$257 << $256; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl336; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr337=$shl336 >>> 15; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add338=(($sub335+$shr337)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K324=$add338; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $258=$K324; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl339=$258 << 1; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $259=$rsize; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $260=$K324; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add340=(($260+7)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr341=$259 >>> (($add340)>>>0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and342=$shr341 & 1; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add343=(($shl339+$and342)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I308=$add343; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 100; break;
    case 100: 
      __label__ = 101; break;
    case 101: 
      var $261=$I308; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $262=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins346=(($262+304)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx347=(($treebins346+($261<<2))|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H307=$arrayidx347; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $263=$I308; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $264=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index348=(($264+28)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index348)>>2)]=$263; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $265=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child349=(($265+16)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx350=(($child349+4)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx350)>>2)]=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $266=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child351=(($266+16)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx352=(($child351)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx352)>>2)]=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $267=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap353=(($267+4)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $268=HEAP32[(($treemap353)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $269=$I308; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl354=1 << $269; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and355=$268 & $shl354; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool356=(($and355)|0)!=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool356) { __label__ = 103; break; } else { __label__ = 102; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 102: 
      var $270=$I308; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl358=1 << $270; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $271=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap359=(($271+4)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($treemap359)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or360=$272 | $shl358; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap359)>>2)]=$or360; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $273=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $274=$H307; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($274)>>2)]=$273; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $275=$H307; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $276=$275; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $277=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent361=(($277+24)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent361)>>2)]=$276; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $278=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $279=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk362=(($279+12)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk362)>>2)]=$278; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $280=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd363=(($280+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd363)>>2)]=$278; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $281=$H307; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($281)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$282; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $283=$rsize; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $284=$I308; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp366=(($284)|0)==31; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp366) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $cond375 = 0;__label__ = 106; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $285=$I308; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr370=$285 >>> 1; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add371=(($shr370+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub372=(($add371-2)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub373=((31-$sub372)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond375 = $sub373;__label__ = 106; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 106: 
      var $cond375; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl376=$283 << $cond375; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K365=$shl376; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 107: 
      var $286=$T; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head378=(($286+4)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $287=HEAP32[(($head378)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and379=$287 & -8; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $288=$rsize; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp380=(($and379)|0)!=(($288)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp380) { __label__ = 108; break; } else { __label__ = 114; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $289=$K365; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr383=$289 >>> 31; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and384=$shr383 & 1; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $290=$T; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child385=(($290+16)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx386=(($child385+($and384<<2))|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx386; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $291=$K365; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl387=$291 << 1; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K365=$shl387; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $292=$C; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $293=HEAP32[(($292)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp388=(($293)|0)!=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp388) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $294=$C; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $295=HEAP32[(($294)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$295; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 113; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 110: 
      var $296=$C; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $297=$296; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $298=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr392=(($298+16)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $299=HEAPU32[(($least_addr392)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp393=(($297)>>>0) >= (($299)>>>0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv394=(($cmp393)&1); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval395=(($conv394)==(1)); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool396=(($expval395)|0)!=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool396) { __label__ = 111; break; } else { __label__ = 112; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $300=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $301=$C; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($301)>>2)]=$300; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $302=$T; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $303=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent398=(($303+24)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent398)>>2)]=$302; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $304=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $305=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk399=(($305+12)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk399)>>2)]=$304; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $306=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd400=(($306+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd400)>>2)]=$304; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 120; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 112: 
      _abort(); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 113: 
      __label__ = 119; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 114: 
      var $307=$T; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd405=(($307+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $308=HEAP32[(($fd405)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F404=$308; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $309=$T; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $310=$309; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $311=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr406=(($311+16)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $312=HEAPU32[(($least_addr406)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp407=(($310)>>>0) >= (($312)>>>0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp407) { __label__ = 115; break; } else { var $317 = 0;__label__ = 116; break; } //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $313=$F404; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $314=$313; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $315=$m_addr; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr409=(($315+16)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $316=HEAPU32[(($least_addr409)>>2)]; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp410=(($314)>>>0) >= (($316)>>>0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $317 = $cmp410;__label__ = 116; break;
    case 116: 
      var $317;
      var $land_ext=(($317)&1);
      var $expval412=(($land_ext)==(1));
      var $tobool413=(($expval412)|0)!=0;
      if ($tobool413) { __label__ = 117; break; } else { __label__ = 118; break; }
    case 117: 
      var $318=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $319=$F404; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk415=(($319+12)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk415)>>2)]=$318; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $320=$T; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd416=(($320+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd416)>>2)]=$318; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $321=$F404; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $322=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd417=(($322+8)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd417)>>2)]=$321; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $323=$T; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $324=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk418=(($324+12)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk418)>>2)]=$323; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $325=$TP; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent419=(($325+24)|0); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent419)>>2)]=0; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 120; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 118: 
      _abort(); //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 119: 
      __label__ = 107; break; //@line 4253 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 120: 
      __label__ = 121; break;
    case 121: 
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      var $326=$v; //@line 4255 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $327=$326; //@line 4255 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr426=(($327+8)|0); //@line 4255 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr426; //@line 4255 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 127; break; //@line 4255 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 124: 
      __label__ = 125; break; //@line 4257 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 125: 
      _abort(); //@line 4258 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4258 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 126: 
      $retval=0; //@line 4260 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 127; break; //@line 4260 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 127: 
      var $328=$retval; //@line 4261 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $328; //@line 4261 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize97;
      var $br106;
      var $end107;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $m_addr=$m;
      $nb_addr=$nb;
      $tbase=-1; //@line 3876 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tsize=0; //@line 3877 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mmap_flag=0; //@line 3878 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 3880 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 3880 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 3880 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $call=_init_mparams(); //@line 3880 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 3880 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 3; break; //@line 3880 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1;
      var $lor_ext=(($1)&1); //@line 3880 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $mflags=(($2+440)|0); //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[(($mflags)>>2)]; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$3 & 0; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool1=(($and)|0)!=0; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $4=$nb_addr; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=HEAPU32[((((_mparams+12)|0))>>2)]; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)>>>0) >= (($5)>>>0); //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $6=$m_addr; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($6+12)|0); //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($topsize)>>2)]; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($7)|0)!=0; //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3883 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $8=$m_addr; //@line 3884 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=$nb_addr; //@line 3884 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call5=_mmap_alloc($8, $9); //@line 3884 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mem=$call5; //@line 3884 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$mem; //@line 3885 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp6=(($10)|0)!=0; //@line 3885 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3885 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $11=$mem; //@line 3886 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $retval=$11; //@line 3886 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 3886 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 9; break; //@line 3887 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $12=$m_addr; //@line 3911 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $mflags9=(($12+440)|0); //@line 3911 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($mflags9)>>2)]; //@line 3911 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and10=$13 & 4; //@line 3911 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool11=(($and10)|0)!=0; //@line 3911 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool11) { __label__ = 42; break; } else { __label__ = 10; break; } //@line 3911 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      $br=-1; //@line 3912 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$m_addr; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top=(($14+24)|0); //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($top)>>2)]; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp13=(($15)|0)==0; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $cond = 0;__label__ = 13; break; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $16=$m_addr; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$m_addr; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top14=(($17+24)|0); //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($top14)>>2)]; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call15=_segment_holding($16, $19); //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $call15;__label__ = 13; break; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $cond; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $ss=$cond; //@line 3913 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $asize=0; //@line 3914 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=$ss; //@line 3917 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp16=(($20)|0)==0; //@line 3917 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp16) { __label__ = 14; break; } else { __label__ = 22; break; } //@line 3917 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $call18=_sbrk(0); //@line 3918 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $base=$call18; //@line 3918 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=$base; //@line 3919 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp19=(($21)|0)!=-1; //@line 3919 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp19) { __label__ = 15; break; } else { __label__ = 21; break; } //@line 3919 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $22=$nb_addr; //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($22+48)|0); //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=(($23-1)|0); //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add21=(($add+$sub)|0); //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub22=(($24-1)|0); //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub22 ^ -1; //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and23=$add21 & $neg; //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $asize=$and23; //@line 3920 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $25=$base; //@line 3922 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 3922 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $27=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3922 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub24=(($27-1)|0); //@line 3922 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and25=$26 & $sub24; //@line 3922 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($and25)|0)==0; //@line 3922 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3922 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $28=$base; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub28=(($30-1)|0); //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add29=(($29+$sub28)|0); //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub30=(($31-1)|0); //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg31=$sub30 ^ -1; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and32=$add29 & $neg31; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $32=$base; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub33=(($and32-$33)|0); //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $34=$asize; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add34=(($34+$sub33)|0); //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $asize=$add34; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 3923 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $35=$asize; //@line 3925 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($35)>>>0) < 2147483647; //@line 3925 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 3925 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $36=$asize; //@line 3926 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call38=_sbrk($36); //@line 3926 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $br=$call38; //@line 3926 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $37=$base; //@line 3926 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp39=(($call38)|0)==(($37)|0); //@line 3926 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp39) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 3926 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $38=$base; //@line 3927 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tbase=$38; //@line 3927 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $39=$asize; //@line 3928 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tsize=$39; //@line 3928 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3929 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 3930 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 26; break; //@line 3931 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $40=$nb_addr; //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize43=(($41+12)|0); //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $42=HEAP32[(($topsize43)>>2)]; //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub44=(($40-$42)|0); //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add45=(($sub44+48)|0); //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub46=(($43-1)|0); //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add47=(($add45+$sub46)|0); //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub48=(($44-1)|0); //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg49=$sub48 ^ -1; //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and50=$add47 & $neg49; //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $asize=$and50; //@line 3934 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $45=$asize; //@line 3936 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($45)>>>0) < 2147483647; //@line 3936 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp51) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 3936 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $46=$asize; //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call53=_sbrk($46); //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $br=$call53; //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$ss; //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base54=(($47)|0); //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=HEAP32[(($base54)>>2)]; //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $49=$ss; //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size=(($49+4)|0); //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $50=HEAP32[(($size)>>2)]; //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($48+$50)|0); //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp55=(($call53)|0)==(($add_ptr)|0); //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp55) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3937 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $51=$br; //@line 3938 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tbase=$51; //@line 3938 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $52=$asize; //@line 3939 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tsize=$52; //@line 3939 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 3940 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $53=$tbase; //@line 3943 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp59=(($53)|0)==-1; //@line 3943 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp59) { __label__ = 27; break; } else { __label__ = 41; break; } //@line 3943 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $54=$br; //@line 3944 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp61=(($54)|0)!=-1; //@line 3944 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp61) { __label__ = 28; break; } else { __label__ = 37; break; } //@line 3944 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $55=$asize; //@line 3945 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($55)>>>0) < 2147483647; //@line 3945 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp63) { __label__ = 29; break; } else { __label__ = 36; break; } //@line 3945 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $56=$asize; //@line 3945 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $57=$nb_addr; //@line 3945 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add65=(($57+48)|0); //@line 3945 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp66=(($56)>>>0) < (($add65)>>>0); //@line 3945 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp66) { __label__ = 30; break; } else { __label__ = 36; break; } //@line 3945 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $58=$nb_addr; //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add68=(($58+48)|0); //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $59=$asize; //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub69=(($add68-$59)|0); //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $60=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub70=(($60-1)|0); //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add71=(($sub69+$sub70)|0); //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub72=(($61-1)|0); //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg73=$sub72 ^ -1; //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and74=$add71 & $neg73; //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $esize=$and74; //@line 3947 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $62=$esize; //@line 3948 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($62)>>>0) < 2147483647; //@line 3948 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp75) { __label__ = 31; break; } else { __label__ = 35; break; } //@line 3948 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $63=$esize; //@line 3949 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call77=_sbrk($63); //@line 3949 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $end=$call77; //@line 3949 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $64=$end; //@line 3950 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp78=(($64)|0)!=-1; //@line 3950 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp78) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 3950 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $65=$esize; //@line 3951 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $66=$asize; //@line 3951 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add80=(($66+$65)|0); //@line 3951 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $asize=$add80; //@line 3951 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3951 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $67=$asize; //@line 3953 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub82=(((-$67))|0); //@line 3953 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call83=_sbrk($sub82); //@line 3953 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $br=-1; //@line 3954 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break; //@line 3956 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 35: 
      __label__ = 36; break; //@line 3957 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break; //@line 3958 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $68=$br; //@line 3959 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp88=(($68)|0)!=-1; //@line 3959 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp88) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3959 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $69=$br; //@line 3960 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tbase=$69; //@line 3960 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $70=$asize; //@line 3961 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tsize=$70; //@line 3961 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break; //@line 3962 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $71=$m_addr; //@line 3964 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $mflags91=(($71+440)|0); //@line 3964 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($mflags91)>>2)]; //@line 3964 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$72 | 4; //@line 3964 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($mflags91)>>2)]=$or; //@line 3964 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break; //@line 3965 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break; //@line 3968 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $73=$tbase; //@line 3982 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp95=(($73)|0)==-1; //@line 3982 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp95) { __label__ = 43; break; } else { __label__ = 52; break; } //@line 3982 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $74=$nb_addr; //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add98=(($74+48)|0); //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $75=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub99=(($75-1)|0); //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add100=(($add98+$sub99)|0); //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub101=(($76-1)|0); //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg102=$sub101 ^ -1; //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and103=$add100 & $neg102; //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $asize97=$and103; //@line 3983 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $77=$asize97; //@line 3984 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp104=(($77)>>>0) < 2147483647; //@line 3984 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp104) { __label__ = 44; break; } else { __label__ = 51; break; } //@line 3984 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 44: 
      $br106=-1; //@line 3985 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $end107=-1; //@line 3986 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $78=$asize97; //@line 3988 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call108=_sbrk($78); //@line 3988 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $br106=$call108; //@line 3988 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call109=_sbrk(0); //@line 3989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $end107=$call109; //@line 3989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $79=$br106; //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp110=(($79)|0)!=-1; //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp110) { __label__ = 45; break; } else { __label__ = 50; break; } //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $80=$end107; //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp112=(($80)|0)!=-1; //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp112) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $81=$br106; //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $82=$end107; //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp114=(($81)>>>0) < (($82)>>>0); //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp114) { __label__ = 47; break; } else { __label__ = 50; break; } //@line 3991 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $83=$end107; //@line 3992 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $84=$br106; //@line 3992 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$83; //@line 3992 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$84; //@line 3992 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0); //@line 3992 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $ssize=$sub_ptr_sub; //@line 3992 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $85=$ssize; //@line 3993 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $86=$nb_addr; //@line 3993 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add116=(($86+40)|0); //@line 3993 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp117=(($85)>>>0) > (($add116)>>>0); //@line 3993 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp117) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 3993 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $87=$br106; //@line 3994 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tbase=$87; //@line 3994 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $88=$ssize; //@line 3995 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tsize=$88; //@line 3995 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 3996 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 49: 
      __label__ = 50; break; //@line 3997 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 50: 
      __label__ = 51; break; //@line 3998 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break; //@line 3999 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 52: 
      var $89=$tbase; //@line 4001 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp123=(($89)|0)!=-1; //@line 4001 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp123) { __label__ = 53; break; } else { __label__ = 91; break; } //@line 4001 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $90=$tsize; //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $91=$m_addr; //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($91+432)|0); //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $92=HEAP32[(($footprint)>>2)]; //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add125=(($92+$90)|0); //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$add125; //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $93=$m_addr; //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($93+436)|0); //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $94=HEAPU32[(($max_footprint)>>2)]; //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp126=(($add125)>>>0) > (($94)>>>0); //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp126) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4003 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $95=$m_addr; //@line 4004 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $footprint128=(($95+432)|0); //@line 4004 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($footprint128)>>2)]; //@line 4004 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $97=$m_addr; //@line 4004 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $max_footprint129=(($97+436)|0); //@line 4004 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($max_footprint129)>>2)]=$96; //@line 4004 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 55; break; //@line 4004 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $98=$m_addr; //@line 4006 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top131=(($98+24)|0); //@line 4006 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $99=HEAP32[(($top131)>>2)]; //@line 4006 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($99)|0)!=0; //@line 4006 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp132) { __label__ = 63; break; } else { __label__ = 56; break; } //@line 4006 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $100=$m_addr; //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($100+16)|0); //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($least_addr)>>2)]; //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp134=(($101)|0)==0; //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp134) { __label__ = 58; break; } else { __label__ = 57; break; } //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $102=$tbase; //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $103=$m_addr; //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr135=(($103+16)|0); //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $104=HEAPU32[(($least_addr135)>>2)]; //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($102)>>>0) < (($104)>>>0); //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp136) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 4007 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $105=$tbase; //@line 4008 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $106=$m_addr; //@line 4008 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr138=(($106+16)|0); //@line 4008 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr138)>>2)]=$105; //@line 4008 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4008 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $107=$tbase; //@line 4009 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $108=$m_addr; //@line 4009 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg=(($108+444)|0); //@line 4009 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base140=(($seg)|0); //@line 4009 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base140)>>2)]=$107; //@line 4009 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $109=$tsize; //@line 4010 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $110=$m_addr; //@line 4010 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg141=(($110+444)|0); //@line 4010 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size142=(($seg141+4)|0); //@line 4010 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size142)>>2)]=$109; //@line 4010 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $111=$mmap_flag; //@line 4011 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $112=$m_addr; //@line 4011 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg143=(($112+444)|0); //@line 4011 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($seg143+12)|0); //@line 4011 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($sflags)>>2)]=$111; //@line 4011 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[((((_mparams)|0))>>2)]; //@line 4012 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $114=$m_addr; //@line 4012 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $magic=(($114+36)|0); //@line 4012 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($magic)>>2)]=$113; //@line 4012 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $115=$m_addr; //@line 4013 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $release_checks=(($115+32)|0); //@line 4013 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($release_checks)>>2)]=-1; //@line 4013 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $116=$m_addr; //@line 4014 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      _init_bins($116); //@line 4014 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $117=$m_addr; //@line 4016 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($117)|0)==((__gm_)|0); //@line 4016 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4016 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $118=$m_addr; //@line 4017 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $119=$tbase; //@line 4017 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4017 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $121=$tsize; //@line 4017 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub146=(($121-40)|0); //@line 4017 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      _init_top($118, $120, $sub146); //@line 4017 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 62; break; //@line 4017 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $122=$m_addr; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $123=$122; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr148=(($123-8)|0); //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $124=$add_ptr148; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $125=$124; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $127=$126; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr149=(($127-8)|0); //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $128=$add_ptr149; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($128+4)|0); //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($head)>>2)]; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and150=$129 & -8; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr151=(($125+$and150)|0); //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $130=$add_ptr151; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mn=$130; //@line 4022 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $131=$m_addr; //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $132=$mn; //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $133=$tbase; //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $134=$tsize; //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr152=(($133+$134)|0); //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $135=$mn; //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $136=$135; //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast153=$add_ptr152; //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast154=$136; //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub155=(($sub_ptr_lhs_cast153-$sub_ptr_rhs_cast154)|0); //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub156=(($sub_ptr_sub155-40)|0); //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      _init_top($131, $132, $sub156); //@line 4023 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 62; break;
    case 62: 
      __label__ = 88; break; //@line 4025 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $137=$m_addr; //@line 4029 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg159=(($137+444)|0); //@line 4029 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$seg159; //@line 4029 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $138=$sp; //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp160=(($138)|0)!=0; //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp160) { __label__ = 65; break; } else { var $144 = 0;__label__ = 66; break; } //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $139=$tbase; //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $140=$sp; //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base161=(($140)|0); //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($base161)>>2)]; //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $142=$sp; //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size162=(($142+4)|0); //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $143=HEAP32[(($size162)>>2)]; //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr163=(($141+$143)|0); //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp164=(($139)|0)!=(($add_ptr163)|0); //@line 4031 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $144 = $cmp164;__label__ = 66; break;
    case 66: 
      var $144;
      if ($144) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $145=$sp; //@line 4032 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $next=(($145+8)|0); //@line 4032 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($next)>>2)]; //@line 4032 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$146; //@line 4032 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4032 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 68: 
      var $147=$sp; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp165=(($147)|0)!=0; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp165) { __label__ = 69; break; } else { __label__ = 74; break; } //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $148=$sp; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags167=(($148+12)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $149=HEAP32[(($sflags167)>>2)]; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and168=$149 & 8; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool169=(($and168)|0)!=0; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool169) { __label__ = 74; break; } else { __label__ = 70; break; } //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $150=$sp; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags171=(($150+12)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($sflags171)>>2)]; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and172=$151 & 0; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $152=$mmap_flag; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp173=(($and172)|0)==(($152)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp173) { __label__ = 71; break; } else { __label__ = 74; break; } //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $153=$m_addr; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top175=(($153+24)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $154=HEAP32[(($top175)>>2)]; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $155=$154; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $156=$sp; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base176=(($156)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $157=HEAPU32[(($base176)>>2)]; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp177=(($155)>>>0) >= (($157)>>>0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp177) { __label__ = 72; break; } else { __label__ = 74; break; } //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $158=$m_addr; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top179=(($158+24)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[(($top179)>>2)]; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $160=$159; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $161=$sp; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base180=(($161)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($base180)>>2)]; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $163=$sp; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size181=(($163+4)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $164=HEAP32[(($size181)>>2)]; //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr182=(($162+$164)|0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp183=(($160)>>>0) < (($add_ptr182)>>>0); //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp183) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $165=$tsize; //@line 4037 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $166=$sp; //@line 4037 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size185=(($166+4)|0); //@line 4037 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[(($size185)>>2)]; //@line 4037 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add186=(($167+$165)|0); //@line 4037 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size185)>>2)]=$add186; //@line 4037 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $169=$m_addr; //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top187=(($169+24)|0); //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $170=HEAP32[(($top187)>>2)]; //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $171=$m_addr; //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize188=(($171+12)|0); //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($topsize188)>>2)]; //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $173=$tsize; //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add189=(($172+$173)|0); //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      _init_top($168, $170, $add189); //@line 4038 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 4039 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $174=$tbase; //@line 4041 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $175=$m_addr; //@line 4041 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr191=(($175+16)|0); //@line 4041 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $176=HEAPU32[(($least_addr191)>>2)]; //@line 4041 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp192=(($174)>>>0) < (($176)>>>0); //@line 4041 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp192) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 4041 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $177=$tbase; //@line 4042 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $178=$m_addr; //@line 4042 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr194=(($178+16)|0); //@line 4042 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr194)>>2)]=$177; //@line 4042 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 76; break; //@line 4042 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $179=$m_addr; //@line 4043 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg196=(($179+444)|0); //@line 4043 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$seg196; //@line 4043 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $180=$sp; //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp198=(($180)|0)!=0; //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp198) { __label__ = 78; break; } else { var $185 = 0;__label__ = 79; break; } //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $181=$sp; //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base200=(($181)|0); //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $182=HEAP32[(($base200)>>2)]; //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $183=$tbase; //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $184=$tsize; //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr201=(($183+$184)|0); //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp202=(($182)|0)!=(($add_ptr201)|0); //@line 4044 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $185 = $cmp202;__label__ = 79; break;
    case 79: 
      var $185;
      if ($185) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $186=$sp; //@line 4045 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $next205=(($186+8)|0); //@line 4045 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $187=HEAP32[(($next205)>>2)]; //@line 4045 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$187; //@line 4045 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4045 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 81: 
      var $188=$sp; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp207=(($188)|0)!=0; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp207) { __label__ = 82; break; } else { __label__ = 85; break; } //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $189=$sp; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags209=(($189+12)|0); //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($sflags209)>>2)]; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and210=$190 & 8; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool211=(($and210)|0)!=0; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool211) { __label__ = 85; break; } else { __label__ = 83; break; } //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $191=$sp; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags213=(($191+12)|0); //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $192=HEAP32[(($sflags213)>>2)]; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and214=$192 & 0; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $193=$mmap_flag; //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp215=(($and214)|0)==(($193)|0); //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp215) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 4046 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $194=$sp; //@line 4049 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base217=(($194)|0); //@line 4049 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($base217)>>2)]; //@line 4049 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $oldbase=$195; //@line 4049 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $196=$tbase; //@line 4050 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $197=$sp; //@line 4050 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base218=(($197)|0); //@line 4050 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base218)>>2)]=$196; //@line 4050 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $198=$tsize; //@line 4051 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $199=$sp; //@line 4051 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size219=(($199+4)|0); //@line 4051 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[(($size219)>>2)]; //@line 4051 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add220=(($200+$198)|0); //@line 4051 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size219)>>2)]=$add220; //@line 4051 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $201=$m_addr; //@line 4052 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $202=$tbase; //@line 4052 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $203=$oldbase; //@line 4052 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $204=$nb_addr; //@line 4052 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call221=_prepend_alloc($201, $202, $203, $204); //@line 4052 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $retval=$call221; //@line 4052 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 4052 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $205=$m_addr; //@line 4055 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $206=$tbase; //@line 4055 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $207=$tsize; //@line 4055 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $208=$mmap_flag; //@line 4055 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      _add_segment($205, $206, $207, $208); //@line 4055 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      var $209=$nb_addr; //@line 4059 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $210=$m_addr; //@line 4059 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize226=(($210+12)|0); //@line 4059 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $211=HEAPU32[(($topsize226)>>2)]; //@line 4059 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp227=(($209)>>>0) < (($211)>>>0); //@line 4059 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp227) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4059 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $212=$nb_addr; //@line 4060 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $213=$m_addr; //@line 4060 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize229=(($213+12)|0); //@line 4060 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $214=HEAP32[(($topsize229)>>2)]; //@line 4060 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub230=(($214-$212)|0); //@line 4060 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize229)>>2)]=$sub230; //@line 4060 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub230; //@line 4060 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $215=$m_addr; //@line 4061 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top231=(($215+24)|0); //@line 4061 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $216=HEAP32[(($top231)>>2)]; //@line 4061 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$216; //@line 4061 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $217=$p; //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $219=$nb_addr; //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr232=(($218+$219)|0); //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $220=$add_ptr232; //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $221=$m_addr; //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top233=(($221+24)|0); //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top233)>>2)]=$220; //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $r=$220; //@line 4062 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $222=$rsize; //@line 4063 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or234=$222 | 1; //@line 4063 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $223=$r; //@line 4063 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head235=(($223+4)|0); //@line 4063 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head235)>>2)]=$or234; //@line 4063 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $224=$nb_addr; //@line 4064 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or236=$224 | 1; //@line 4064 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or237=$or236 | 2; //@line 4064 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $225=$p; //@line 4064 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head238=(($225+4)|0); //@line 4064 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head238)>>2)]=$or237; //@line 4064 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $226=$p; //@line 4067 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4067 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr239=(($227+8)|0); //@line 4067 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr239; //@line 4067 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 4067 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 90: 
      __label__ = 91; break; //@line 4069 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $call242=___errno(); //@line 4071 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($call242)>>2)]=12; //@line 4071 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $retval=0; //@line 4072 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 4072 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $228=$retval; //@line 4073 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $228; //@line 4073 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_alloc["X"]=1;

function _free($mem) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F60;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F245;
      var $B247;
      var $I249;
      var $TP285;
      var $XP286;
      var $R288;
      var $F293;
      var $RP306;
      var $CP317;
      var $H343;
      var $C0385;
      var $C1386;
      var $I447;
      var $B449;
      var $F452;
      var $tp;
      var $H475;
      var $I476;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K525;
      var $C;
      var $F558;
      $mem_addr=$mem;
      var $0=$mem_addr; //@line 4740 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4740 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 2; break; } else { __label__ = 196; break; } //@line 4740 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $1=$mem_addr; //@line 4741 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($1-8)|0); //@line 4741 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 4741 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$2; //@line 4741 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=$p; //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($4)>>>0) >= (($5)>>>0); //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 3; break; } else { var $8 = 0;__label__ = 4; break; } //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $6=$p; //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($6+4)|0); //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($head)>>2)]; //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$7 & 3; //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($and)|0)!=1; //@line 4753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8 = $cmp2;__label__ = 4; break;
    case 4: 
      var $8;
      var $land_ext=(($8)&1);
      var $expval=(($land_ext)==(1));
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 193; break; }
    case 5: 
      var $9=$p; //@line 4754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head4=(($9+4)|0); //@line 4754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[(($head4)>>2)]; //@line 4754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and5=$10 & -8; //@line 4754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$and5; //@line 4754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$p; //@line 4755 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 4755 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=$psize; //@line 4755 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr6=(($12+$13)|0); //@line 4755 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr6; //@line 4755 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $next=$14; //@line 4755 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=$p; //@line 4756 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head7=(($15+4)|0); //@line 4756 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($head7)>>2)]; //@line 4756 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and8=$16 & 1; //@line 4756 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool9=(($and8)|0)!=0; //@line 4756 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool9) { __label__ = 77; break; } else { __label__ = 6; break; } //@line 4756 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $17=$p; //@line 4757 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($17)|0); //@line 4757 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($prev_foot)>>2)]; //@line 4757 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $prevsize=$18; //@line 4757 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=$p; //@line 4758 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head11=(($19+4)|0); //@line 4758 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=HEAP32[(($head11)>>2)]; //@line 4758 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and12=$20 & 3; //@line 4758 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp13=(($and12)|0)==0; //@line 4758 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp13) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4758 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $21=$prevsize; //@line 4759 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($21+16)|0); //@line 4759 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $22=$psize; //@line 4759 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add15=(($22+$add)|0); //@line 4759 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$add15; //@line 4759 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 195; break; //@line 4762 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $23=$p; //@line 4765 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 4765 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $25=$prevsize; //@line 4765 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $idx_neg=(((-$25))|0); //@line 4765 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr16=(($24+$idx_neg)|0); //@line 4765 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=$add_ptr16; //@line 4765 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $prev=$26; //@line 4765 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $27=$prevsize; //@line 4766 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=$psize; //@line 4766 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add17=(($28+$27)|0); //@line 4766 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$add17; //@line 4766 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=$prev; //@line 4767 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$29; //@line 4767 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $30=$prev; //@line 4768 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=$30; //@line 4768 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $32=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4768 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp18=(($31)>>>0) >= (($32)>>>0); //@line 4768 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp18)&1); //@line 4768 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval19=(($conv)==(1)); //@line 4768 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool20=(($expval19)|0)!=0; //@line 4768 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool20) { __label__ = 9; break; } else { __label__ = 74; break; } //@line 4768 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $33=$p; //@line 4769 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4769 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($33)|0)!=(($34)|0); //@line 4769 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 10; break; } else { __label__ = 70; break; } //@line 4769 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $35=$prevsize; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr=$35 >>> 3; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp25=(($shr)>>>0) < 32; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp25) { __label__ = 11; break; } else { __label__ = 23; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $36=$p; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd=(($36+8)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $37=HEAP32[(($fd)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F=$37; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $38=$p; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk=(($38+12)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($bk)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B=$39; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $40=$prevsize; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr28=$40 >>> 3; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I=$shr28; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$F; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $42=$B; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp29=(($41)|0)==(($42)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp29) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $43=$I; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $43; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[((((__gm_)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and32=$44 & $neg; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and32; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $45=$F; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $46=$I; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl34=$46 << 1; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=((((__gm_+40)|0)+($shl34<<2))|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$arrayidx; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=$47; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp35=(($45)|0)==(($48)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp35) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $49=$F; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $51=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp37=(($50)>>>0) >= (($51)>>>0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp37) { __label__ = 15; break; } else { var $60 = 0;__label__ = 18; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $52=$B; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $53=$I; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl40=$53 << 1; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx41=((((__gm_+40)|0)+($shl40<<2))|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $54=$arrayidx41; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $55=$54; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp42=(($52)|0)==(($55)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp42) { var $59 = 1;__label__ = 17; break; } else { __label__ = 16; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $56=$B; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $58=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($57)>>>0) >= (($58)>>>0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $59 = $cmp44;__label__ = 17; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $59;
      var $60 = $59;__label__ = 18; break;
    case 18: 
      var $60;
      var $land_ext47=(($60)&1);
      var $expval48=(($land_ext47)==(1));
      var $tobool49=(($expval48)|0)!=0;
      if ($tobool49) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $61=$B; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $62=$F; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk51=(($62+12)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk51)>>2)]=$61; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $63=$F; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $64=$B; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd52=(($64+8)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd52)>>2)]=$63; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 20: 
      _abort(); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 69; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $65=$p; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $TP=$66; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $67=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent=(($67+24)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $68=HEAP32[(($parent)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $XP=$68; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $69=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk56=(($69+12)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($bk56)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $71=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp57=(($70)|0)!=(($71)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp57) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $72=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd61=(($72+8)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $73=HEAP32[(($fd61)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F60=$73; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $74=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk62=(($74+12)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $75=HEAP32[(($bk62)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$75; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $76=$F60; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $77=$76; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $78=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($77)>>>0) >= (($78)>>>0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv64=(($cmp63)&1); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval65=(($conv64)==(1)); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool66=(($expval65)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool66) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $79=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $80=$F60; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk68=(($80+12)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk68)>>2)]=$79; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $81=$F60; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $82=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd69=(($82+8)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd69)>>2)]=$81; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 40; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $83=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child=(($83+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx73=(($child+4)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx73; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[(($arrayidx73)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$84; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp74=(($84)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp74) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $85=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child77=(($85+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx78=(($child77)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx78; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $86=HEAP32[(($arrayidx78)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$86; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp79=(($86)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp79) { __label__ = 30; break; } else { __label__ = 39; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 30: 
      __label__ = 31; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $87=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child82=(($87+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx83=(($child82+4)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx83; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx83)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp84=(($88)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp84) { var $91 = 1;__label__ = 33; break; } else { __label__ = 32; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $89=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child87=(($89+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx88=(($child87)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx88; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($arrayidx88)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp89=(($90)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $91 = $cmp89;__label__ = 33; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $91;
      if ($91) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $92=$CP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$92; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($92)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$93; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 31; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $94=$RP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $95=$94; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $96=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($95)>>>0) >= (($96)>>>0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv93=(($cmp92)&1); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval94=(($conv93)==(1)); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool95=(($expval94)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool95) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $97=$RP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 37: 
      _abort(); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 38: 
      __label__ = 39; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $98=$XP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($98)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp101) { __label__ = 41; break; } else { __label__ = 68; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $99=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index=(($99+28)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $100=HEAP32[(($index)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx104=((((__gm_+304)|0)+($100<<2))|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx104; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $101=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $102=$H; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($102)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp105=(($101)|0)==(($103)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp105) { __label__ = 42; break; } else { __label__ = 45; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $104=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $105=$H; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($105)>>2)]=$104; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp108=(($104)|0)==0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp108) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $106=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index111=(($106+28)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $107=HEAP32[(($index111)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl112=1 << $107; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg113=$shl112 ^ -1; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and114=$108 & $neg113; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$and114; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 44: 
      __label__ = 52; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $109=$XP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $110=$109; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $111=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp117=(($110)>>>0) >= (($111)>>>0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv118=(($cmp117)&1); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval119=(($conv118)==(1)); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool120=(($expval119)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool120) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $112=$XP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child122=(($112+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx123=(($child122)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($arrayidx123)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $114=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp124=(($113)|0)==(($114)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp124) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $115=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $116=$XP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child127=(($116+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx128=(($child127)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx128)>>2)]=$115; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $117=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $118=$XP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child130=(($118+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx131=(($child130+4)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx131)>>2)]=$117; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break;
    case 49: 
      __label__ = 51; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 50: 
      _abort(); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $119=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($119)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp136) { __label__ = 53; break; } else { __label__ = 67; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $120=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $121=$120; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $122=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp139=(($121)>>>0) >= (($122)>>>0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv140=(($cmp139)&1); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval141=(($conv140)==(1)); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool142=(($expval141)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool142) { __label__ = 54; break; } else { __label__ = 65; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $123=$XP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $124=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent144=(($124+24)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent144)>>2)]=$123; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $125=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child145=(($125+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx146=(($child145)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $126=HEAP32[(($arrayidx146)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C0=$126; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp147=(($126)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp147) { __label__ = 55; break; } else { __label__ = 59; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $127=$C0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $128=$127; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $129=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp150=(($128)>>>0) >= (($129)>>>0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv151=(($cmp150)&1); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval152=(($conv151)==(1)); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool153=(($expval152)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool153) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $130=$C0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $131=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child155=(($131+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx156=(($child155)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx156)>>2)]=$130; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $132=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $133=$C0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent157=(($133+24)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent157)>>2)]=$132; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 58; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 57: 
      _abort(); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 58: 
      __label__ = 59; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $134=$TP; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child161=(($134+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx162=(($child161+4)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($arrayidx162)>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C1=$135; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp163=(($135)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp163) { __label__ = 60; break; } else { __label__ = 64; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $136=$C1; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $137=$136; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $138=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp166=(($137)>>>0) >= (($138)>>>0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv167=(($cmp166)&1); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval168=(($conv167)==(1)); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool169=(($expval168)|0)!=0; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool169) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $139=$C1; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $140=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child171=(($140+16)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx172=(($child171+4)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx172)>>2)]=$139; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $141=$R; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $142=$C1; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent173=(($142+24)|0); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent173)>>2)]=$141; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 62: 
      _abort(); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 63: 
      __label__ = 64; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 64: 
      __label__ = 66; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 65: 
      _abort(); //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 66: 
      __label__ = 67; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 68; break; //@line 4770 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break;
    case 69: 
      __label__ = 73; break; //@line 4771 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $143=$next; //@line 4772 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head183=(($143+4)|0); //@line 4772 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $144=HEAP32[(($head183)>>2)]; //@line 4772 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and184=$144 & 3; //@line 4772 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp185=(($and184)|0)==3; //@line 4772 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp185) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 4772 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $145=$psize; //@line 4773 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$145; //@line 4773 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $146=$next; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head188=(($146+4)|0); //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($head188)>>2)]; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and189=$147 & -2; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head188)>>2)]=$and189; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $148=$psize; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$148 | 1; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $149=$p; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head190=(($149+4)|0); //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head190)>>2)]=$or; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $150=$psize; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $151=$p; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $152=$151; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $153=$psize; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr191=(($152+$153)|0); //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $154=$add_ptr191; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot192=(($154)|0); //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot192)>>2)]=$150; //@line 4774 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 195; break; //@line 4775 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 72: 
      __label__ = 73; break;
    case 73: 
      __label__ = 75; break; //@line 4777 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 74: 
      __label__ = 194; break; //@line 4779 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break; //@line 4781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $155=$p; //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $156=$155; //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $157=$next; //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp199=(($156)>>>0) < (($158)>>>0); //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp199) { __label__ = 78; break; } else { var $161 = 0;__label__ = 79; break; } //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $159=$next; //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head202=(($159+4)|0); //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($head202)>>2)]; //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and203=$160 & 1; //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool204=(($and203)|0)!=0; //@line 4783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $161 = $tobool204;__label__ = 79; break;
    case 79: 
      var $161;
      var $land_ext206=(($161)&1);
      var $expval207=(($land_ext206)==(1));
      var $tobool208=(($expval207)|0)!=0;
      if ($tobool208) { __label__ = 80; break; } else { __label__ = 192; break; }
    case 80: 
      var $162=$next; //@line 4784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head210=(($162+4)|0); //@line 4784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $163=HEAP32[(($head210)>>2)]; //@line 4784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and211=$163 & 2; //@line 4784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool212=(($and211)|0)!=0; //@line 4784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool212) { __label__ = 153; break; } else { __label__ = 81; break; } //@line 4784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 81: 
      var $164=$next; //@line 4785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp214=(($164)|0)==(($165)|0); //@line 4785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp214) { __label__ = 82; break; } else { __label__ = 87; break; } //@line 4785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $166=$psize; //@line 4786 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4786 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add217=(($167+$166)|0); //@line 4786 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$add217; //@line 4786 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tsize=$add217; //@line 4786 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $168=$p; //@line 4787 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$168; //@line 4787 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $169=$tsize; //@line 4788 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or218=$169 | 1; //@line 4788 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $170=$p; //@line 4788 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head219=(($170+4)|0); //@line 4788 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head219)>>2)]=$or218; //@line 4788 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $171=$p; //@line 4789 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4789 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp220=(($171)|0)==(($172)|0); //@line 4789 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp220) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 4789 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 83: 
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4790 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4791 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4792 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $173=$tsize; //@line 4793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $174=HEAPU32[((((__gm_+28)|0))>>2)]; //@line 4793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp224=(($173)>>>0) > (($174)>>>0); //@line 4793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp224) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 4793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $call=_sys_trim(__gm_, 0); //@line 4794 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break; //@line 4794 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 86: 
      __label__ = 195; break; //@line 4795 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $175=$next; //@line 4797 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $176=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4797 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp229=(($175)|0)==(($176)|0); //@line 4797 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp229) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 4797 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $177=$psize; //@line 4798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $178=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add232=(($178+$177)|0); //@line 4798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$add232; //@line 4798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $dsize=$add232; //@line 4798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $179=$p; //@line 4799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$179; //@line 4799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $180=$dsize; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or233=$180 | 1; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $181=$p; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head234=(($181+4)|0); //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head234)>>2)]=$or233; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $182=$dsize; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $183=$p; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $184=$183; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $185=$dsize; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr235=(($184+$185)|0); //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $186=$add_ptr235; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot236=(($186)|0); //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot236)>>2)]=$182; //@line 4800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 195; break; //@line 4801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $187=$next; //@line 4804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head238=(($187+4)|0); //@line 4804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $188=HEAP32[(($head238)>>2)]; //@line 4804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and239=$188 & -8; //@line 4804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nsize=$and239; //@line 4804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $189=$nsize; //@line 4805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $190=$psize; //@line 4805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add240=(($190+$189)|0); //@line 4805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$add240; //@line 4805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $191=$nsize; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr241=$191 >>> 3; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp242=(($shr241)>>>0) < 32; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp242) { __label__ = 90; break; } else { __label__ = 102; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $192=$next; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd246=(($192+8)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $193=HEAP32[(($fd246)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F245=$193; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $194=$next; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk248=(($194+12)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($bk248)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B247=$195; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $196=$nsize; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr250=$196 >>> 3; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I249=$shr250; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $197=$F245; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $198=$B247; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp251=(($197)|0)==(($198)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp251) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $199=$I249; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl254=1 << $199; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg255=$shl254 ^ -1; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[((((__gm_)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and256=$200 & $neg255; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and256; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $201=$F245; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $202=$I249; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl258=$202 << 1; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx259=((((__gm_+40)|0)+($shl258<<2))|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $203=$arrayidx259; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp260=(($201)|0)==(($204)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp260) { __label__ = 94; break; } else { __label__ = 93; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $205=$F245; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $206=$205; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $207=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp263=(($206)>>>0) >= (($207)>>>0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp263) { __label__ = 94; break; } else { var $216 = 0;__label__ = 97; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $208=$B247; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $209=$I249; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl266=$209 << 1; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx267=((((__gm_+40)|0)+($shl266<<2))|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $210=$arrayidx267; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $211=$210; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp268=(($208)|0)==(($211)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp268) { var $215 = 1;__label__ = 96; break; } else { __label__ = 95; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $212=$B247; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $213=$212; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $214=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp271=(($213)>>>0) >= (($214)>>>0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $215 = $cmp271;__label__ = 96; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $215;
      var $216 = $215;__label__ = 97; break;
    case 97: 
      var $216;
      var $land_ext275=(($216)&1);
      var $expval276=(($land_ext275)==(1));
      var $tobool277=(($expval276)|0)!=0;
      if ($tobool277) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      var $217=$B247; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $218=$F245; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk279=(($218+12)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk279)>>2)]=$217; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $219=$F245; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $220=$B247; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd280=(($220+8)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd280)>>2)]=$219; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 100; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 99: 
      _abort(); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 100: 
      __label__ = 101; break;
    case 101: 
      __label__ = 148; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 102: 
      var $221=$next; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $222=$221; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $TP285=$222; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $223=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent287=(($223+24)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $224=HEAP32[(($parent287)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $XP286=$224; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $225=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk289=(($225+12)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $226=HEAP32[(($bk289)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $227=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp290=(($226)|0)!=(($227)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp290) { __label__ = 103; break; } else { __label__ = 107; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $228=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd294=(($228+8)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $229=HEAP32[(($fd294)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F293=$229; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $230=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk295=(($230+12)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $231=HEAP32[(($bk295)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R288=$231; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $232=$F293; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $233=$232; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $234=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp296=(($233)>>>0) >= (($234)>>>0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv297=(($cmp296)&1); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval298=(($conv297)==(1)); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool299=(($expval298)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool299) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $235=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $236=$F293; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk301=(($236+12)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk301)>>2)]=$235; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $237=$F293; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $238=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd302=(($238+8)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd302)>>2)]=$237; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 105: 
      _abort(); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 106: 
      __label__ = 119; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 107: 
      var $239=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child307=(($239+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx308=(($child307+4)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP306=$arrayidx308; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $240=HEAP32[(($arrayidx308)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R288=$240; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp309=(($240)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp309) { __label__ = 109; break; } else { __label__ = 108; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $241=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child312=(($241+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx313=(($child312)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP306=$arrayidx313; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($arrayidx313)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R288=$242; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp314=(($242)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp314) { __label__ = 109; break; } else { __label__ = 118; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 109: 
      __label__ = 110; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 110: 
      var $243=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child319=(($243+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx320=(($child319+4)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP317=$arrayidx320; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $244=HEAP32[(($arrayidx320)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp321=(($244)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp321) { var $247 = 1;__label__ = 112; break; } else { __label__ = 111; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $245=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child324=(($245+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx325=(($child324)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP317=$arrayidx325; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $246=HEAP32[(($arrayidx325)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp326=(($246)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $247 = $cmp326;__label__ = 112; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $247;
      if ($247) { __label__ = 113; break; } else { __label__ = 114; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 113: 
      var $248=$CP317; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP306=$248; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $249=HEAP32[(($248)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R288=$249; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 110; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 114: 
      var $250=$RP306; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $251=$250; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $252=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp331=(($251)>>>0) >= (($252)>>>0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv332=(($cmp331)&1); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval333=(($conv332)==(1)); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool334=(($expval333)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool334) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $253=$RP306; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($253)>>2)]=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 117; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 116: 
      _abort(); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 117: 
      __label__ = 118; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 118: 
      __label__ = 119; break;
    case 119: 
      var $254=$XP286; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp340=(($254)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp340) { __label__ = 120; break; } else { __label__ = 147; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 120: 
      var $255=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index344=(($255+28)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $256=HEAP32[(($index344)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx345=((((__gm_+304)|0)+($256<<2))|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H343=$arrayidx345; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $257=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $258=$H343; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $259=HEAP32[(($258)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp346=(($257)|0)==(($259)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp346) { __label__ = 121; break; } else { __label__ = 124; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 121: 
      var $260=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $261=$H343; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$260; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp349=(($260)|0)==0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp349) { __label__ = 122; break; } else { __label__ = 123; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 122: 
      var $262=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index352=(($262+28)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $263=HEAP32[(($index352)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl353=1 << $263; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg354=$shl353 ^ -1; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $264=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and355=$264 & $neg354; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$and355; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 123; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 123: 
      __label__ = 131; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 124: 
      var $265=$XP286; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $266=$265; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $267=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp358=(($266)>>>0) >= (($267)>>>0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv359=(($cmp358)&1); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval360=(($conv359)==(1)); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool361=(($expval360)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool361) { __label__ = 125; break; } else { __label__ = 129; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 125: 
      var $268=$XP286; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child363=(($268+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx364=(($child363)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($arrayidx364)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $270=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp365=(($269)|0)==(($270)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp365) { __label__ = 126; break; } else { __label__ = 127; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 126: 
      var $271=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $272=$XP286; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child368=(($272+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx369=(($child368)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx369)>>2)]=$271; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 127: 
      var $273=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $274=$XP286; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child371=(($274+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx372=(($child371+4)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx372)>>2)]=$273; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break;
    case 128: 
      __label__ = 130; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 129: 
      _abort(); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 130: 
      __label__ = 131; break;
    case 131: 
      var $275=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp377=(($275)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp377) { __label__ = 132; break; } else { __label__ = 146; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 132: 
      var $276=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $277=$276; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $278=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp380=(($277)>>>0) >= (($278)>>>0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv381=(($cmp380)&1); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval382=(($conv381)==(1)); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool383=(($expval382)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool383) { __label__ = 133; break; } else { __label__ = 144; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 133: 
      var $279=$XP286; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $280=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent387=(($280+24)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent387)>>2)]=$279; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $281=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child388=(($281+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx389=(($child388)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($arrayidx389)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C0385=$282; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp390=(($282)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp390) { __label__ = 134; break; } else { __label__ = 138; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 134: 
      var $283=$C0385; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $284=$283; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $285=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp393=(($284)>>>0) >= (($285)>>>0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv394=(($cmp393)&1); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval395=(($conv394)==(1)); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool396=(($expval395)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool396) { __label__ = 135; break; } else { __label__ = 136; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 135: 
      var $286=$C0385; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $287=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child398=(($287+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx399=(($child398)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx399)>>2)]=$286; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $288=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $289=$C0385; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent400=(($289+24)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent400)>>2)]=$288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 137; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 136: 
      _abort(); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 137: 
      __label__ = 138; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 138: 
      var $290=$TP285; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child404=(($290+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx405=(($child404+4)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $291=HEAP32[(($arrayidx405)>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C1386=$291; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp406=(($291)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp406) { __label__ = 139; break; } else { __label__ = 143; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 139: 
      var $292=$C1386; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $293=$292; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $294=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp409=(($293)>>>0) >= (($294)>>>0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv410=(($cmp409)&1); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval411=(($conv410)==(1)); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool412=(($expval411)|0)!=0; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool412) { __label__ = 140; break; } else { __label__ = 141; break; } //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 140: 
      var $295=$C1386; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $296=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child414=(($296+16)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx415=(($child414+4)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx415)>>2)]=$295; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $297=$R288; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $298=$C1386; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent416=(($298+24)|0); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent416)>>2)]=$297; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 142; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 141: 
      _abort(); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 142: 
      __label__ = 143; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 143: 
      __label__ = 145; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 144: 
      _abort(); //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 145: 
      __label__ = 146; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 146: 
      __label__ = 147; break; //@line 4806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 147: 
      __label__ = 148; break;
    case 148: 
      var $299=$psize; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or425=$299 | 1; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $300=$p; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head426=(($300+4)|0); //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head426)>>2)]=$or425; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $301=$psize; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $302=$p; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $303=$302; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $304=$psize; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr427=(($303+$304)|0); //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $305=$add_ptr427; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot428=(($305)|0); //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot428)>>2)]=$301; //@line 4807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $306=$p; //@line 4808 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $307=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4808 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp429=(($306)|0)==(($307)|0); //@line 4808 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp429) { __label__ = 149; break; } else { __label__ = 150; break; } //@line 4808 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 149: 
      var $308=$psize; //@line 4809 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$308; //@line 4809 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 195; break; //@line 4810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 150: 
      __label__ = 151; break;
    case 151: 
      __label__ = 152; break;
    case 152: 
      __label__ = 154; break; //@line 4813 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 153: 
      var $309=$next; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head436=(($309+4)|0); //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $310=HEAP32[(($head436)>>2)]; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and437=$310 & -2; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head436)>>2)]=$and437; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $311=$psize; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or438=$311 | 1; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $312=$p; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head439=(($312+4)|0); //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head439)>>2)]=$or438; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $313=$psize; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $314=$p; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $315=$314; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $316=$psize; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr440=(($315+$316)|0); //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $317=$add_ptr440; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot441=(($317)|0); //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot441)>>2)]=$313; //@line 4815 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 154; break;
    case 154: 
      var $318=$psize; //@line 4817 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr443=$318 >>> 3; //@line 4817 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp444=(($shr443)>>>0) < 32; //@line 4817 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp444) { __label__ = 155; break; } else { __label__ = 162; break; } //@line 4817 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 155: 
      var $319=$psize; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr448=$319 >>> 3; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I447=$shr448; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $320=$I447; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl450=$320 << 1; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx451=((((__gm_+40)|0)+($shl450<<2))|0); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $321=$arrayidx451; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $322=$321; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B449=$322; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $323=$B449; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F452=$323; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $324=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $325=$I447; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl453=1 << $325; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and454=$324 & $shl453; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool455=(($and454)|0)!=0; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool455) { __label__ = 157; break; } else { __label__ = 156; break; } //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 156: 
      var $326=$I447; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl457=1 << $326; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $327=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or458=$327 | $shl457; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$or458; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 161; break; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 157: 
      var $328=$B449; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd460=(($328+8)|0); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $329=HEAP32[(($fd460)>>2)]; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $330=$329; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $331=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp461=(($330)>>>0) >= (($331)>>>0); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv462=(($cmp461)&1); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval463=(($conv462)==(1)); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool464=(($expval463)|0)!=0; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool464) { __label__ = 158; break; } else { __label__ = 159; break; } //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 158: 
      var $332=$B449; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd466=(($332+8)|0); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $333=HEAP32[(($fd466)>>2)]; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F452=$333; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 160; break; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 159: 
      _abort(); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 160: 
      __label__ = 161; break;
    case 161: 
      var $334=$p; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $335=$B449; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd470=(($335+8)|0); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd470)>>2)]=$334; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $336=$p; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $337=$F452; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk471=(($337+12)|0); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk471)>>2)]=$336; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $338=$F452; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $339=$p; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd472=(($339+8)|0); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd472)>>2)]=$338; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $340=$B449; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $341=$p; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk473=(($341+12)|0); //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk473)>>2)]=$340; //@line 4818 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 191; break; //@line 4820 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 162: 
      var $342=$p; //@line 4822 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $343=$342; //@line 4822 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tp=$343; //@line 4822 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $344=$psize; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr477=$344 >>> 8; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $X=$shr477; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $345=$X; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp478=(($345)|0)==0; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp478) { __label__ = 163; break; } else { __label__ = 164; break; } //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 163: 
      $I476=0; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 164: 
      var $346=$X; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp482=(($346)>>>0) > 65535; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp482) { __label__ = 165; break; } else { __label__ = 166; break; } //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 165: 
      $I476=31; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 167; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 166: 
      var $347=$X; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$347; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $348=$Y; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=(($348-256)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr486=$sub >>> 16; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and487=$shr486 & 8; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$and487; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $349=$N; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $350=$Y; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl488=$350 << $349; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl488; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub489=(($shl488-4096)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr490=$sub489 >>> 16; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and491=$shr490 & 4; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and491; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $351=$K; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $352=$N; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add492=(($352+$351)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add492; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $353=$K; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $354=$Y; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl493=$354 << $353; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl493; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub494=(($shl493-16384)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr495=$sub494 >>> 16; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and496=$shr495 & 2; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and496; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $355=$N; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add497=(($355+$and496)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add497; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $356=$N; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub498=((14-$356)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $357=$K; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $358=$Y; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl499=$358 << $357; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl499; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr500=$shl499 >>> 15; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add501=(($sub498+$shr500)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$add501; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $359=$K; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl502=$359 << 1; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $360=$psize; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $361=$K; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add503=(($361+7)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr504=$360 >>> (($add503)>>>0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and505=$shr504 & 1; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add506=(($shl502+$and505)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I476=$add506; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 167; break;
    case 167: 
      __label__ = 168; break;
    case 168: 
      var $362=$I476; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx509=((((__gm_+304)|0)+($362<<2))|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H475=$arrayidx509; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $363=$I476; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $364=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index510=(($364+28)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index510)>>2)]=$363; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $365=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child511=(($365+16)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx512=(($child511+4)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx512)>>2)]=0; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $366=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child513=(($366+16)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx514=(($child513)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx514)>>2)]=0; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $367=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $368=$I476; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl515=1 << $368; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and516=$367 & $shl515; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool517=(($and516)|0)!=0; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool517) { __label__ = 170; break; } else { __label__ = 169; break; } //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 169: 
      var $369=$I476; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl519=1 << $369; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $370=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or520=$370 | $shl519; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$or520; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $371=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $372=$H475; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($372)>>2)]=$371; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $373=$H475; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $374=$373; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $375=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent521=(($375+24)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent521)>>2)]=$374; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $376=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $377=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk522=(($377+12)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk522)>>2)]=$376; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $378=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd523=(($378+8)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd523)>>2)]=$376; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 170: 
      var $379=$H475; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $380=HEAP32[(($379)>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$380; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $381=$psize; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $382=$I476; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp526=(($382)|0)==31; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp526) { __label__ = 171; break; } else { __label__ = 172; break; } //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 171: 
      var $cond = 0;__label__ = 173; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 172: 
      var $383=$I476; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr528=$383 >>> 1; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add529=(($shr528+8)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub530=(($add529-2)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub531=((31-$sub530)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $sub531;__label__ = 173; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 173: 
      var $cond; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl532=$381 << $cond; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K525=$shl532; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 174; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 174: 
      var $384=$T; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head533=(($384+4)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($head533)>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and534=$385 & -8; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $386=$psize; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp535=(($and534)|0)!=(($386)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp535) { __label__ = 175; break; } else { __label__ = 181; break; } //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 175: 
      var $387=$K525; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr538=$387 >>> 31; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and539=$shr538 & 1; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $388=$T; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child540=(($388+16)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx541=(($child540+($and539<<2))|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx541; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $389=$K525; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl542=$389 << 1; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K525=$shl542; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $390=$C; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $391=HEAP32[(($390)>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp543=(($391)|0)!=0; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp543) { __label__ = 176; break; } else { __label__ = 177; break; } //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 176: 
      var $392=$C; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $393=HEAP32[(($392)>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$393; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 180; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 177: 
      var $394=$C; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $395=$394; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $396=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp547=(($395)>>>0) >= (($396)>>>0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv548=(($cmp547)&1); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval549=(($conv548)==(1)); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool550=(($expval549)|0)!=0; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool550) { __label__ = 178; break; } else { __label__ = 179; break; } //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 178: 
      var $397=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $398=$C; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($398)>>2)]=$397; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $399=$T; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $400=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent552=(($400+24)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent552)>>2)]=$399; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $401=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $402=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk553=(($402+12)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk553)>>2)]=$401; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $403=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd554=(($403+8)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd554)>>2)]=$401; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 187; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 179: 
      _abort(); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 180: 
      __label__ = 186; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 181: 
      var $404=$T; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd559=(($404+8)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $405=HEAP32[(($fd559)>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F558=$405; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $406=$T; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $407=$406; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $408=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp560=(($407)>>>0) >= (($408)>>>0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp560) { __label__ = 182; break; } else { var $412 = 0;__label__ = 183; break; } //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 182: 
      var $409=$F558; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $410=$409; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $411=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp563=(($410)>>>0) >= (($411)>>>0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $412 = $cmp563;__label__ = 183; break;
    case 183: 
      var $412;
      var $land_ext566=(($412)&1);
      var $expval567=(($land_ext566)==(1));
      var $tobool568=(($expval567)|0)!=0;
      if ($tobool568) { __label__ = 184; break; } else { __label__ = 185; break; }
    case 184: 
      var $413=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $414=$F558; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk570=(($414+12)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk570)>>2)]=$413; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $415=$T; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd571=(($415+8)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd571)>>2)]=$413; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $416=$F558; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $417=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd572=(($417+8)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd572)>>2)]=$416; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $418=$T; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $419=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk573=(($419+12)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk573)>>2)]=$418; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $420=$tp; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent574=(($420+24)|0); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent574)>>2)]=0; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 187; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 185: 
      _abort(); //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 186: 
      __label__ = 174; break; //@line 4823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 187: 
      __label__ = 188; break;
    case 188: 
      var $421=HEAP32[((((__gm_+32)|0))>>2)]; //@line 4825 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dec=(($421-1)|0); //@line 4825 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+32)|0))>>2)]=$dec; //@line 4825 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp578=(($dec)|0)==0; //@line 4825 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp578) { __label__ = 189; break; } else { __label__ = 190; break; } //@line 4825 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 189: 
      var $call581=_release_unused_segments(__gm_); //@line 4826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 190; break; //@line 4826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 190: 
      __label__ = 191; break;
    case 191: 
      __label__ = 195; break; //@line 4828 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 192: 
      __label__ = 193; break; //@line 4830 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 193: 
      __label__ = 194; break; //@line 4830 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 194: 
      _abort(); //@line 4832 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4832 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 195: 
      __label__ = 196; break; //@line 4836 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 196: 
      ;
      return; //@line 4840 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_free"] = _free;_free["X"]=1;

function _sys_trim($m, $pad) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0; //@line 4126 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 4127 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4127 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 3; break; } else { __label__ = 2; break; } //@line 4127 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $call=_init_mparams(); //@line 4127 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 4127 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 3; break; //@line 4127 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1;
      var $lor_ext=(($1)&1); //@line 4127 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$pad_addr; //@line 4128 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($2)>>>0) < 4294967232; //@line 4128 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 25; break; } //@line 4128 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$m_addr; //@line 4128 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top=(($3+24)|0); //@line 4128 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[(($top)>>2)]; //@line 4128 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)|0)!=0; //@line 4128 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 25; break; } //@line 4128 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $5=$pad_addr; //@line 4129 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($5+40)|0); //@line 4129 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $pad_addr=$add; //@line 4129 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=$m_addr; //@line 4131 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($6+12)|0); //@line 4131 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=HEAPU32[(($topsize)>>2)]; //@line 4131 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=$pad_addr; //@line 4131 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp3=(($7)>>>0) > (($8)>>>0); //@line 4131 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 21; break; } //@line 4131 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $9=HEAP32[((((_mparams+8)|0))>>2)]; //@line 4133 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $unit=$9; //@line 4133 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$m_addr; //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize5=(($10+12)|0); //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($topsize5)>>2)]; //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$pad_addr; //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=(($11-$12)|0); //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=$unit; //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub6=(($13-1)|0); //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add7=(($sub+$sub6)|0); //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$unit; //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $div=Math.floor((($add7)>>>0)/(($14)>>>0)); //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub8=(($div-1)|0); //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=$unit; //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $mul=(($sub8*$15)|0); //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $extra=$mul; //@line 4135 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$m_addr; //@line 4136 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$m_addr; //@line 4136 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top9=(($17+24)|0); //@line 4136 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($top9)>>2)]; //@line 4136 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 4136 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call10=_segment_holding($16, $19); //@line 4136 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$call10; //@line 4136 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=$sp; //@line 4138 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($20+12)|0); //@line 4138 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[(($sflags)>>2)]; //@line 4138 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$21 & 8; //@line 4138 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool11=(($and)|0)!=0; //@line 4138 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool11) { __label__ = 18; break; } else { __label__ = 7; break; } //@line 4138 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $22=$sp; //@line 4139 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags13=(($22+12)|0); //@line 4139 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=HEAP32[(($sflags13)>>2)]; //@line 4139 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and14=$23 & 0; //@line 4139 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool15=(($and14)|0)!=0; //@line 4139 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool15) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4139 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 17; break; //@line 4150 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $24=$extra; //@line 4152 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp17=(($24)>>>0) >= 2147483647; //@line 4152 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp17) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4152 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $25=$unit; //@line 4153 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub19=((-2147483648-$25)|0); //@line 4153 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $extra=$sub19; //@line 4153 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 4153 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $call20=_sbrk(0); //@line 4157 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $old_br=$call20; //@line 4157 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=$old_br; //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $27=$sp; //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base=(($27)|0); //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=HEAP32[(($base)>>2)]; //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=$sp; //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size=(($29+4)|0); //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($size)>>2)]; //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($28+$30)|0); //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp21=(($26)|0)==(($add_ptr)|0); //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 4158 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $31=$extra; //@line 4159 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub23=(((-$31))|0); //@line 4159 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call24=_sbrk($sub23); //@line 4159 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rel_br=$call24; //@line 4159 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call25=_sbrk(0); //@line 4160 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $new_br=$call25; //@line 4160 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $32=$rel_br; //@line 4161 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($32)|0)!=-1; //@line 4161 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 4161 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $33=$new_br; //@line 4161 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $34=$old_br; //@line 4161 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($33)>>>0) < (($34)>>>0); //@line 4161 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4161 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $35=$old_br; //@line 4162 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $36=$new_br; //@line 4162 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$35; //@line 4162 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$36; //@line 4162 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0); //@line 4162 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $released=$sub_ptr_sub; //@line 4162 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 4162 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 16; break; //@line 4163 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break; //@line 4167 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $37=$released; //@line 4169 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($37)|0)!=0; //@line 4169 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4169 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $38=$released; //@line 4170 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $39=$sp; //@line 4170 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size36=(($39+4)|0); //@line 4170 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($size36)>>2)]; //@line 4170 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub37=(($40-$38)|0); //@line 4170 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size36)>>2)]=$sub37; //@line 4170 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$released; //@line 4171 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $42=$m_addr; //@line 4171 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($42+432)|0); //@line 4171 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($footprint)>>2)]; //@line 4171 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub38=(($43-$41)|0); //@line 4171 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$sub38; //@line 4171 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $44=$m_addr; //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $45=$m_addr; //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top39=(($45+24)|0); //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $46=HEAP32[(($top39)>>2)]; //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$m_addr; //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize40=(($47+12)|0); //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=HEAP32[(($topsize40)>>2)]; //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $49=$released; //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub41=(($48-$49)|0); //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      _init_top($44, $46, $sub41); //@line 4172 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4174 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 4175 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $50=$released; //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($50)|0)==0; //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp44) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $51=$m_addr; //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize46=(($51+12)|0); //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $52=HEAPU32[(($topsize46)>>2)]; //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $53=$m_addr; //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $trim_check=(($53+28)|0); //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $54=HEAPU32[(($trim_check)>>2)]; //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($52)>>>0) > (($54)>>>0); //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4182 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $55=$m_addr; //@line 4183 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $trim_check49=(($55+28)|0); //@line 4183 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($trim_check49)>>2)]=-1; //@line 4183 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 4183 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 24: 
      __label__ = 25; break; //@line 4184 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $56=$released; //@line 4186 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp52=(($56)|0)!=0; //@line 4186 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond=$cmp52 ? 1 : 0; //@line 4186 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $cond; //@line 4186 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_trim["X"]=1;

function _segment_holding($m, $addr) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr; //@line 2562 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg=(($0+444)|0); //@line 2562 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$seg; //@line 2562 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 2563 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $1=$addr_addr; //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$sp; //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base=(($2)|0); //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=HEAPU32[(($base)>>2)]; //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($1)>>>0) >= (($3)>>>0); //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $4=$addr_addr; //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$sp; //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base1=(($5)|0); //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($base1)>>2)]; //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$sp; //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size=(($7+4)|0); //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($size)>>2)]; //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+$8)|0); //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)>>>0) < (($add_ptr)>>>0); //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2564 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $9=$sp; //@line 2565 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $retval=$9; //@line 2565 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 2565 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $10=$sp; //@line 2566 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $next=(($10+8)|0); //@line 2566 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($next)>>2)]; //@line 2566 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$11; //@line 2566 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp3=(($11)|0)==0; //@line 2566 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2566 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      $retval=0; //@line 2567 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 2567 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      __label__ = 2; break; //@line 2568 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $12=$retval; //@line 2569 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $12; //@line 2569 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _release_unused_segments($m) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0; //@line 4079 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nsegs=0; //@line 4080 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $0=$m_addr; //@line 4081 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg=(($0+444)|0); //@line 4081 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $pred=$seg; //@line 4081 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1=$pred; //@line 4082 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $next=(($1+8)|0); //@line 4082 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[(($next)>>2)]; //@line 4082 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$2; //@line 4082 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 4083 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $3=$sp; //@line 4083 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($3)|0)!=0; //@line 4083 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 87; break; } //@line 4083 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $4=$sp; //@line 4084 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base1=(($4)|0); //@line 4084 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=HEAP32[(($base1)>>2)]; //@line 4084 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $base=$5; //@line 4084 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=$sp; //@line 4085 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size2=(($6+4)|0); //@line 4085 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($size2)>>2)]; //@line 4085 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $size=$7; //@line 4085 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=$sp; //@line 4086 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $next4=(($8+8)|0); //@line 4086 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=HEAP32[(($next4)>>2)]; //@line 4086 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $next3=$9; //@line 4086 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$nsegs; //@line 4087 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $inc=(($10+1)|0); //@line 4087 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nsegs=$inc; //@line 4087 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$sp; //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($11+12)|0); //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=HEAP32[(($sflags)>>2)]; //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$12 & 0; //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and)|0)!=0; //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 4; break; } else { __label__ = 86; break; } //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$sp; //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags5=(($13+12)|0); //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($sflags5)>>2)]; //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and6=$14 & 8; //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool7=(($and6)|0)!=0; //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool7) { __label__ = 86; break; } else { __label__ = 5; break; } //@line 4088 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $15=$base; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$base; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($16+8)|0); //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$add_ptr; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and8=$17 & 7; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp9=(($and8)|0)==0; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $cond = 0;__label__ = 8; break; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $18=$base; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr10=(($18+8)|0); //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr10; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and11=$19 & 7; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=((8-$and11)|0); //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and12=$sub & 7; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $and12;__label__ = 8; break; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $cond; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr13=(($15+$cond)|0); //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=$add_ptr13; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$20; //@line 4089 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=$p; //@line 4090 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($21+4)|0); //@line 4090 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[(($head)>>2)]; //@line 4090 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and14=$22 & -8; //@line 4090 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$and14; //@line 4090 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head15=(($23+4)|0); //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($head15)>>2)]; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and16=$24 & 3; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp17=(($and16)|0)!=1; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp17) { __label__ = 85; break; } else { __label__ = 9; break; } //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $25=$p; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $27=$psize; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr19=(($26+$27)|0); //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=$base; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=$size; //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr20=(($28+$29)|0); //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr21=(($add_ptr20-40)|0); //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($add_ptr19)>>>0) >= (($add_ptr21)>>>0); //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 10; break; } else { __label__ = 85; break; } //@line 4092 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $30=$p; //@line 4093 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=$30; //@line 4093 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tp=$31; //@line 4093 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $32=$p; //@line 4095 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 4095 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dv=(($33+20)|0); //@line 4095 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[(($dv)>>2)]; //@line 4095 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($32)|0)==(($34)|0); //@line 4095 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4095 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $35=$m_addr; //@line 4096 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dv26=(($35+20)|0); //@line 4096 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv26)>>2)]=0; //@line 4096 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $36=$m_addr; //@line 4097 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($36+8)|0); //@line 4097 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize)>>2)]=0; //@line 4097 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 58; break; //@line 4098 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $37=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent=(($37+24)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($parent)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $XP=$38; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $39=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk=(($39+12)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($bk)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($40)|0)!=(($41)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $42=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd=(($42+8)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($fd)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F=$43; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $44=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk29=(($44+12)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $45=HEAP32[(($bk29)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$45; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $46=$F; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$46; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($48+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $49=HEAPU32[(($least_addr)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp30=(($47)>>>0) >= (($49)>>>0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp30)&1); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool31=(($expval)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool31) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $50=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $51=$F; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk33=(($51+12)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk33)>>2)]=$50; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $52=$F; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $53=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd34=(($53+8)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd34)>>2)]=$52; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      _abort(); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 29; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $54=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child=(($54+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($child+4)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($arrayidx)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$55; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp37=(($55)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp37) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $56=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child39=(($56+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx40=(($child39)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx40; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $57=HEAP32[(($arrayidx40)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$57; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp41=(($57)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp41) { __label__ = 19; break; } else { __label__ = 28; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $58=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child45=(($58+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx46=(($child45+4)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx46; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($arrayidx46)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($59)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { var $62 = 1;__label__ = 22; break; } else { __label__ = 21; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $60=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child49=(($60+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx50=(($child49)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx50; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[(($arrayidx50)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($61)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $62 = $cmp51;__label__ = 22; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $62;
      if ($62) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $63=$CP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$63; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$64; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $65=$RP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $67=$m_addr; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr54=(($67+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $68=HEAPU32[(($least_addr54)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp55=(($66)>>>0) >= (($68)>>>0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv56=(($cmp55)&1); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval57=(($conv56)==(1)); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool58=(($expval57)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool58) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $69=$RP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($69)>>2)]=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $70=$XP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp64=(($70)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp64) { __label__ = 30; break; } else { __label__ = 57; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $71=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index=(($71+28)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($index)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $73=$m_addr; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($73+304)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx67=(($treebins+($72<<2))|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx67; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $74=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $75=$H; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp68=(($74)|0)==(($76)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp68) { __label__ = 31; break; } else { __label__ = 34; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $77=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $78=$H; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($78)>>2)]=$77; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp71=(($77)|0)==0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp71) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $79=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index74=(($79+28)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($index74)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $80; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $81=$m_addr; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($81+4)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $82=HEAP32[(($treemap)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and75=$82 & $neg; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap)>>2)]=$and75; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 41; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $83=$XP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $84=$83; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $85=$m_addr; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr78=(($85+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $86=HEAPU32[(($least_addr78)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp79=(($84)>>>0) >= (($86)>>>0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv80=(($cmp79)&1); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval81=(($conv80)==(1)); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool82=(($expval81)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool82) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $87=$XP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child84=(($87+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx85=(($child84)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx85)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $89=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp86=(($88)|0)==(($89)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp86) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $90=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $91=$XP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child89=(($91+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx90=(($child89)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx90)>>2)]=$90; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $92=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $93=$XP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child92=(($93+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx93=(($child92+4)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx93)>>2)]=$92; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break;
    case 38: 
      __label__ = 40; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $94=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp98=(($94)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp98) { __label__ = 42; break; } else { __label__ = 56; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $95=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $96=$95; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $97=$m_addr; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr101=(($97+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $98=HEAPU32[(($least_addr101)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp102=(($96)>>>0) >= (($98)>>>0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv103=(($cmp102)&1); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval104=(($conv103)==(1)); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool105=(($expval104)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool105) { __label__ = 43; break; } else { __label__ = 54; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $99=$XP; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $100=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent107=(($100+24)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent107)>>2)]=$99; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $101=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child108=(($101+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx109=(($child108)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $102=HEAP32[(($arrayidx109)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C0=$102; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp110=(($102)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp110) { __label__ = 44; break; } else { __label__ = 48; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $103=$C0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $104=$103; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $105=$m_addr; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr113=(($105+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $106=HEAPU32[(($least_addr113)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp114=(($104)>>>0) >= (($106)>>>0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv115=(($cmp114)&1); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval116=(($conv115)==(1)); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool117=(($expval116)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool117) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $107=$C0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $108=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child119=(($108+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx120=(($child119)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx120)>>2)]=$107; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $109=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $110=$C0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent121=(($110+24)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent121)>>2)]=$109; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 46: 
      _abort(); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $111=$tp; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child125=(($111+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx126=(($child125+4)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[(($arrayidx126)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C1=$112; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($112)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $113=$C1; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $115=$m_addr; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr130=(($115+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $116=HEAPU32[(($least_addr130)>>2)]; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp131=(($114)>>>0) >= (($116)>>>0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv132=(($cmp131)&1); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval133=(($conv132)==(1)); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool134=(($expval133)|0)!=0; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool134) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $117=$C1; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $118=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child136=(($118+16)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx137=(($child136+4)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx137)>>2)]=$117; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $119=$R; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $120=$C1; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent138=(($120+24)|0); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent138)>>2)]=$119; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 55; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 54: 
      _abort(); //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4100 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $121=$psize; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr=$121 >>> 8; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $X=$shr; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $122=$X; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($122)|0)==0; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 59: 
      $I=0; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $123=$X; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp152=(($123)>>>0) > 65535; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp152) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 61: 
      $I=31; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $124=$X; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$124; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $125=$Y; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub156=(($125-256)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr157=$sub156 >>> 16; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and158=$shr157 & 8; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$and158; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $126=$N; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $127=$Y; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl159=$127 << $126; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl159; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub160=(($shl159-4096)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr161=$sub160 >>> 16; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and162=$shr161 & 4; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and162; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $128=$K; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $129=$N; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($129+$128)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $130=$K; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $131=$Y; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl163=$131 << $130; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl163; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub164=(($shl163-16384)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr165=$sub164 >>> 16; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and166=$shr165 & 2; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and166; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $132=$N; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add167=(($132+$and166)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add167; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $133=$N; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub168=((14-$133)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $134=$K; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $135=$Y; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl169=$135 << $134; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl169; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr170=$shl169 >>> 15; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add171=(($sub168+$shr170)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$add171; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $136=$K; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl172=$136 << 1; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $137=$psize; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $138=$K; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add173=(($138+7)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr174=$137 >>> (($add173)>>>0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and175=$shr174 & 1; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add176=(($shl172+$and175)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I=$add176; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $139=$I; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $140=$m_addr; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins179=(($140+304)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx180=(($treebins179+($139<<2))|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H147=$arrayidx180; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $141=$I; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $142=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index181=(($142+28)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index181)>>2)]=$141; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $143=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child182=(($143+16)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx183=(($child182+4)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx183)>>2)]=0; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $144=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child184=(($144+16)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx185=(($child184)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx185)>>2)]=0; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $145=$m_addr; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap186=(($145+4)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($treemap186)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $147=$I; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl187=1 << $147; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and188=$146 & $shl187; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool189=(($and188)|0)!=0; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool189) { __label__ = 66; break; } else { __label__ = 65; break; } //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $148=$I; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl191=1 << $148; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $149=$m_addr; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap192=(($149+4)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $150=HEAP32[(($treemap192)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$150 | $shl191; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap192)>>2)]=$or; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $151=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $152=$H147; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($152)>>2)]=$151; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $153=$H147; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $154=$153; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $155=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent193=(($155+24)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent193)>>2)]=$154; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $156=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $157=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk194=(($157+12)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk194)>>2)]=$156; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $158=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd195=(($158+8)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd195)>>2)]=$156; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $159=$H147; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($159)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$160; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $161=$psize; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $162=$I; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp198=(($162)|0)==31; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp198) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $cond207 = 0;__label__ = 69; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 68: 
      var $163=$I; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr202=$163 >>> 1; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add203=(($shr202+8)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub204=(($add203-2)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub205=((31-$sub204)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond207 = $sub205;__label__ = 69; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $cond207; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl208=$161 << $cond207; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K197=$shl208; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 70; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $164=$T; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head209=(($164+4)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($head209)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and210=$165 & -8; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $166=$psize; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp211=(($and210)|0)!=(($166)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp211) { __label__ = 71; break; } else { __label__ = 77; break; } //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $167=$K197; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr214=$167 >>> 31; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and215=$shr214 & 1; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $168=$T; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child216=(($168+16)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx217=(($child216+($and215<<2))|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx217; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $169=$K197; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl218=$169 << 1; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K197=$shl218; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $170=$C; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[(($170)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp219=(($171)|0)!=0; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp219) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $172=$C; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $173=HEAP32[(($172)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$173; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 76; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $174=$C; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $176=$m_addr; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr223=(($176+16)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $177=HEAPU32[(($least_addr223)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp224=(($175)>>>0) >= (($177)>>>0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv225=(($cmp224)&1); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval226=(($conv225)==(1)); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool227=(($expval226)|0)!=0; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool227) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $178=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $179=$C; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($179)>>2)]=$178; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $180=$T; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $181=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent229=(($181+24)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent229)>>2)]=$180; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $182=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $183=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk230=(($183+12)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk230)>>2)]=$182; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $184=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd231=(($184+8)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd231)>>2)]=$182; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 83; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 75: 
      _abort(); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 82; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $185=$T; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd236=(($185+8)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $186=HEAP32[(($fd236)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F235=$186; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $187=$T; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $188=$187; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $189=$m_addr; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr237=(($189+16)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $190=HEAPU32[(($least_addr237)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp238=(($188)>>>0) >= (($190)>>>0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp238) { __label__ = 78; break; } else { var $195 = 0;__label__ = 79; break; } //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $191=$F235; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $192=$191; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $193=$m_addr; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr240=(($193+16)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $194=HEAPU32[(($least_addr240)>>2)]; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp241=(($192)>>>0) >= (($194)>>>0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $195 = $cmp241;__label__ = 79; break;
    case 79: 
      var $195;
      var $land_ext=(($195)&1);
      var $expval243=(($land_ext)==(1));
      var $tobool244=(($expval243)|0)!=0;
      if ($tobool244) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $196=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $197=$F235; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk246=(($197+12)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk246)>>2)]=$196; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $198=$T; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd247=(($198+8)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd247)>>2)]=$196; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $199=$F235; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $200=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd248=(($200+8)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd248)>>2)]=$199; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $201=$T; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $202=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk249=(($202+12)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk249)>>2)]=$201; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $203=$tp; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent250=(($203+24)|0); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent250)>>2)]=0; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 83; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 81: 
      _abort(); //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 82: 
      __label__ = 70; break; //@line 4110 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 83: 
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break; //@line 4112 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 85: 
      __label__ = 86; break; //@line 4113 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $204=$sp; //@line 4116 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $pred=$204; //@line 4116 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $205=$next3; //@line 4117 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$205; //@line 4117 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 4118 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $206=$nsegs; //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp257=(($206)>>>0) > 4294967295; //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp257) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $207=$nsegs; //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond262 = $207;__label__ = 90; break; //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $cond262 = -1;__label__ = 90; break; //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $cond262; //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $208=$m_addr; //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $release_checks=(($208+32)|0); //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($release_checks)>>2)]=$cond262; //@line 4120 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $209=$released; //@line 4122 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $209; //@line 4122 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_release_unused_segments["X"]=1;

function _init_mparams() {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 2965 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)==0; //@line 2965 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 2965 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $call=_sysconf(8); //@line 2971 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$call; //@line 2971 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1=$psize; //@line 2972 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $gsize=$1; //@line 2972 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$gsize; //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=$gsize; //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=(($3-1)|0); //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & $sub; //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($and)|0)!=0; //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $4=$psize; //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$psize; //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub2=(($5-1)|0); //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and3=$4 & $sub2; //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($and3)|0)!=0; //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2989 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      _abort(); //@line 2997 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 2997 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $6=$gsize; //@line 2999 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$6; //@line 2999 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$psize; //@line 3000 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+4)|0))>>2)]=$7; //@line 3000 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=-1; //@line 3001 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=2097152; //@line 3002 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+20)|0))>>2)]=0; //@line 3004 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[((((_mparams+20)|0))>>2)]; //@line 3011 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+440)|0))>>2)]=$8; //@line 3011 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call6=_time(0); //@line 3030 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $xor=$call6 ^ 1431655765; //@line 3030 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $magic=$xor; //@line 3030 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=$magic; //@line 3032 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$9 | 8; //@line 3032 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $magic=$or; //@line 3032 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$magic; //@line 3033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and7=$10 & -8; //@line 3033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $magic=$and7; //@line 3033 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$magic; //@line 3034 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams)|0))>>2)]=$11; //@line 3034 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3036 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      ;
      return 1; //@line 3039 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_top($m, $p, $psize) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1=$0; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($1+8)|0); //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & 7; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $cond = 0;__label__ = 4; break; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $3=$p_addr; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr1=(($4+8)|0); //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$add_ptr1; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and2=$5 & 7; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=((8-$and2)|0); //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and3=$sub & 7; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $and3;__label__ = 4; break; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $cond; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3736 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=$p_addr; //@line 3737 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 3737 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=$offset; //@line 3737 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($7+$8)|0); //@line 3737 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=$add_ptr4; //@line 3737 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p_addr=$9; //@line 3737 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$offset; //@line 3738 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$psize_addr; //@line 3738 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub5=(($11-$10)|0); //@line 3738 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize_addr=$sub5; //@line 3738 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$p_addr; //@line 3740 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=$m_addr; //@line 3740 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top=(($13+24)|0); //@line 3740 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top)>>2)]=$12; //@line 3740 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$psize_addr; //@line 3741 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=$m_addr; //@line 3741 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($15+12)|0); //@line 3741 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize)>>2)]=$14; //@line 3741 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$psize_addr; //@line 3742 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$16 | 1; //@line 3742 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$p_addr; //@line 3742 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($17+4)|0); //@line 3742 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or; //@line 3742 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=$p_addr; //@line 3744 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 3744 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=$psize_addr; //@line 3744 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr6=(($19+$20)|0); //@line 3744 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=$add_ptr6; //@line 3744 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head7=(($21+4)|0); //@line 3744 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head7)>>2)]=40; //@line 3744 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[((((_mparams+16)|0))>>2)]; //@line 3745 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=$m_addr; //@line 3745 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $trim_check=(($23+28)|0); //@line 3745 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($trim_check)>>2)]=$22; //@line 3745 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return; //@line 3746 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$nb_addr; //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($0+24)|0); //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add1=(($add+7)|0); //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=(($1-1)|0); //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add2=(($add1+$sub)|0); //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub3=(($2-1)|0); //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub3 ^ -1; //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$add2 & $neg; //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $mmsize=$and; //@line 3672 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=$mmsize; //@line 3673 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=$nb_addr; //@line 3673 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($3)>>>0) > (($4)>>>0); //@line 3673 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 2; break; } else { __label__ = 13; break; } //@line 3673 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      $mm=-1; //@line 3674 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$mm; //@line 3675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($5)|0)!=-1; //@line 3675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 3675 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $6=$mm; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+8)|0); //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$add_ptr; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and6=$7 & 7; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($and6)|0)==0; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $cond = 0;__label__ = 6; break; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $8=$mm; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr8=(($8+8)|0); //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=$add_ptr8; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and9=$9 & 7; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub10=((8-$and9)|0); //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and11=$sub10 & 7; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $and11;__label__ = 6; break; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $cond; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3676 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$mmsize; //@line 3677 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$offset; //@line 3677 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub12=(($10-$11)|0); //@line 3677 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub13=(($sub12-16)|0); //@line 3677 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$sub13; //@line 3677 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$mm; //@line 3678 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=$offset; //@line 3678 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr14=(($12+$13)|0); //@line 3678 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr14; //@line 3678 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$14; //@line 3678 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=$offset; //@line 3679 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$p; //@line 3679 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($16)|0); //@line 3679 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$15; //@line 3679 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$psize; //@line 3680 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=$p; //@line 3680 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($18+4)|0); //@line 3680 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$17; //@line 3680 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=$p; //@line 3682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=$19; //@line 3682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=$psize; //@line 3682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr15=(($20+$21)|0); //@line 3682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $22=$add_ptr15; //@line 3682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head16=(($22+4)|0); //@line 3682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head16)>>2)]=7; //@line 3682 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 3683 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 3683 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $25=$psize; //@line 3683 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add17=(($25+4)|0); //@line 3683 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr18=(($24+$add17)|0); //@line 3683 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=$add_ptr18; //@line 3683 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head19=(($26+4)|0); //@line 3683 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head19)>>2)]=0; //@line 3683 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $27=$m_addr; //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($27+16)|0); //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=HEAP32[(($least_addr)>>2)]; //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($28)|0)==0; //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp20) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $29=$mm; //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $30=$m_addr; //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr21=(($30+16)|0); //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=HEAPU32[(($least_addr21)>>2)]; //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($29)>>>0) < (($31)>>>0); //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3685 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $32=$mm; //@line 3686 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 3686 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr24=(($33+16)|0); //@line 3686 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr24)>>2)]=$32; //@line 3686 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 3686 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $34=$mmsize; //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $35=$m_addr; //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($35+432)|0); //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($footprint)>>2)]; //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add25=(($36+$34)|0); //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$add25; //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $37=$m_addr; //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($37+436)|0); //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $38=HEAPU32[(($max_footprint)>>2)]; //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($add25)>>>0) > (($38)>>>0); //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3687 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $39=$m_addr; //@line 3688 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $footprint28=(($39+432)|0); //@line 3688 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($footprint28)>>2)]; //@line 3688 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3688 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $max_footprint29=(($41+436)|0); //@line 3688 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($max_footprint29)>>2)]=$40; //@line 3688 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3688 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $42=$p; //@line 3691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr31=(($43+8)|0); //@line 3691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr31; //@line 3691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3691 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 13; break; //@line 3693 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      $retval=0; //@line 3694 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 3694 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $44=$retval; //@line 3695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $44; //@line 3695 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $m_addr;
      var $i;
      var $bin;
      $m_addr=$m;
      $i=0; //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $0=$i; //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) < 32; //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$i; //@line 3753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl=$1 << 1; //@line 3753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 3753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($2+40)|0); //@line 3753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl<<2))|0); //@line 3753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=$arrayidx; //@line 3753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 3753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $bin=$4; //@line 3753 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$bin; //@line 3754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=$bin; //@line 3754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk=(($6+12)|0); //@line 3754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$5; //@line 3754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$bin; //@line 3754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd=(($7+8)|0); //@line 3754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd)>>2)]=$5; //@line 3754 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 4; break; //@line 3755 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $8=$i; //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $inc=(($8+1)|0); //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $i=$inc; //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 2; break; //@line 3752 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      ;
      return; //@line 3756 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $m_addr;
      var $newbase_addr;
      var $oldbase_addr;
      var $nb_addr;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F63;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I203;
      var $B205;
      var $F209;
      var $TP235;
      var $H236;
      var $I237;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K290;
      var $C;
      var $F328;
      $m_addr=$m;
      $newbase_addr=$newbase;
      $oldbase_addr=$oldbase;
      $nb_addr=$nb;
      var $0=$newbase_addr; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1=$newbase_addr; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($1+8)|0); //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & 7; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $cond = 0;__label__ = 4; break; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $3=$newbase_addr; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr1=(($3+8)|0); //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=$add_ptr1; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and2=$4 & 7; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=((8-$and2)|0); //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and3=$sub & 7; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $and3;__label__ = 4; break; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $cond; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($0+$cond)|0); //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$add_ptr4; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$5; //@line 3780 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=$oldbase_addr; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$oldbase_addr; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr5=(($7+8)|0); //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=$add_ptr5; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and6=$8 & 7; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($and6)|0)==0; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond15 = 0;__label__ = 7; break; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $9=$oldbase_addr; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr10=(($9+8)|0); //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$add_ptr10; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and11=$10 & 7; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub12=((8-$and11)|0); //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and13=$sub12 & 7; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond15 = $and13;__label__ = 7; break; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $cond15; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr16=(($6+$cond15)|0); //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$add_ptr16; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$11; //@line 3781 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$oldfirst; //@line 3782 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $13=$12; //@line 3782 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$p; //@line 3782 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3782 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$13; //@line 3782 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$15; //@line 3782 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0); //@line 3782 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$sub_ptr_sub; //@line 3782 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$p; //@line 3783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$16; //@line 3783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=$nb_addr; //@line 3783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr17=(($17+$18)|0); //@line 3783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr17; //@line 3783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $q=$19; //@line 3783 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $20=$psize; //@line 3784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=$nb_addr; //@line 3784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub18=(($20-$21)|0); //@line 3784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $qsize=$sub18; //@line 3784 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $22=$nb_addr; //@line 3785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$22 | 1; //@line 3785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or19=$or | 2; //@line 3785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 3785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($23+4)|0); //@line 3785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or19; //@line 3785 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $24=$oldfirst; //@line 3792 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $25=$m_addr; //@line 3792 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top=(($25+24)|0); //@line 3792 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($top)>>2)]; //@line 3792 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($24)|0)==(($26)|0); //@line 3792 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp20) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3792 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $27=$qsize; //@line 3793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=$m_addr; //@line 3793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($28+12)|0); //@line 3793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($topsize)>>2)]; //@line 3793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($29+$27)|0); //@line 3793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize)>>2)]=$add; //@line 3793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tsize=$add; //@line 3793 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $30=$q; //@line 3794 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=$m_addr; //@line 3794 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top21=(($31+24)|0); //@line 3794 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top21)>>2)]=$30; //@line 3794 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $32=$tsize; //@line 3795 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or22=$32 | 1; //@line 3795 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $33=$q; //@line 3795 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head23=(($33+4)|0); //@line 3795 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head23)>>2)]=$or22; //@line 3795 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 109; break; //@line 3797 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $34=$oldfirst; //@line 3798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $35=$m_addr; //@line 3798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dv=(($35+20)|0); //@line 3798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($dv)>>2)]; //@line 3798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($34)|0)==(($36)|0); //@line 3798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3798 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $37=$qsize; //@line 3799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $38=$m_addr; //@line 3799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($38+8)|0); //@line 3799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($dvsize)>>2)]; //@line 3799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add26=(($39+$37)|0); //@line 3799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize)>>2)]=$add26; //@line 3799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $dsize=$add26; //@line 3799 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $40=$q; //@line 3800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $dv27=(($41+20)|0); //@line 3800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv27)>>2)]=$40; //@line 3800 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $42=$dsize; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or28=$42 | 1; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $43=$q; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head29=(($43+4)|0); //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head29)>>2)]=$or28; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $44=$dsize; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $45=$q; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $46=$45; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$dsize; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr30=(($46+$47)|0); //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=$add_ptr30; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($48)|0); //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$44; //@line 3801 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 3802 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $49=$oldfirst; //@line 3804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head32=(($49+4)|0); //@line 3804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $50=HEAP32[(($head32)>>2)]; //@line 3804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and33=$50 & 3; //@line 3804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($and33)|0)!=1; //@line 3804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 72; break; } else { __label__ = 12; break; } //@line 3804 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $51=$oldfirst; //@line 3805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head36=(($51+4)|0); //@line 3805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $52=HEAP32[(($head36)>>2)]; //@line 3805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and37=$52 & -8; //@line 3805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nsize=$and37; //@line 3805 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $53=$nsize; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr=$53 >>> 3; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp38=(($shr)>>>0) < 32; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp38) { __label__ = 13; break; } else { __label__ = 25; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $54=$oldfirst; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd=(($54+8)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($fd)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F=$55; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $56=$oldfirst; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk=(($56+12)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $57=HEAP32[(($bk)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B=$57; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $58=$nsize; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr40=$58 >>> 3; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I=$shr40; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $59=$F; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $60=$B; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp41=(($59)|0)==(($60)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp41) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $61=$I; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $61; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $62=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($62)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $63=HEAP32[(($smallmap)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and43=$63 & $neg; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap)>>2)]=$and43; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $64=$F; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $65=$I; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl45=$65 << 1; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $66=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($66+40)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl45<<2))|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $67=$arrayidx; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $68=$67; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($64)|0)==(($68)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp46) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $69=$F; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $71=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($71+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $72=HEAPU32[(($least_addr)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($70)>>>0) >= (($72)>>>0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { __label__ = 17; break; } else { var $83 = 0;__label__ = 20; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $73=$B; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $74=$I; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl48=$74 << 1; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $75=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallbins49=(($75+40)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx50=(($smallbins49+($shl48<<2))|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $76=$arrayidx50; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $77=$76; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($73)|0)==(($77)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp51) { var $82 = 1;__label__ = 19; break; } else { __label__ = 18; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $78=$B; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $79=$78; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $80=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr52=(($80+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $81=HEAPU32[(($least_addr52)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp53=(($79)>>>0) >= (($81)>>>0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $82 = $cmp53;__label__ = 19; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $82;
      var $83 = $82;__label__ = 20; break;
    case 20: 
      var $83;
      var $land_ext=(($83)&1);
      var $expval=(($land_ext)==(1));
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $84=$B; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $85=$F; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk55=(($85+12)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk55)>>2)]=$84; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $86=$F; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $87=$B; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd56=(($87+8)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd56)>>2)]=$86; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 22: 
      _abort(); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 71; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $88=$oldfirst; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $89=$88; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $TP=$89; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $90=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent=(($90+24)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($parent)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $XP=$91; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $92=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk60=(($92+12)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($bk60)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $94=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp61=(($93)|0)!=(($94)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp61) { __label__ = 26; break; } else { __label__ = 30; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $95=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd64=(($95+8)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($fd64)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F63=$96; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $97=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk65=(($97+12)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $98=HEAP32[(($bk65)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$98; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $99=$F63; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $101=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr66=(($101+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $102=HEAPU32[(($least_addr66)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp67=(($100)>>>0) >= (($102)>>>0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp67)&1); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval68=(($conv)==(1)); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool69=(($expval68)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool69) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $103=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $104=$F63; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk71=(($104+12)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk71)>>2)]=$103; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $105=$F63; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $106=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd72=(($106+8)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd72)>>2)]=$105; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 28: 
      _abort(); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 42; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $107=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child=(($107+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx76=(($child+4)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx76; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($arrayidx76)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$108; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp77=(($108)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp77) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $109=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child80=(($109+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx81=(($child80)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx81; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $110=HEAP32[(($arrayidx81)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$110; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp82=(($110)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp82) { __label__ = 32; break; } else { __label__ = 41; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 32: 
      __label__ = 33; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $111=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child85=(($111+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx86=(($child85+4)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx86; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[(($arrayidx86)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp87=(($112)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp87) { var $115 = 1;__label__ = 35; break; } else { __label__ = 34; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $113=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child90=(($113+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx91=(($child90)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx91; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($arrayidx91)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($114)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $115 = $cmp92;__label__ = 35; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $115;
      if ($115) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $116=$CP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $RP=$116; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $117=HEAP32[(($116)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $R=$117; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $118=$RP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $119=$118; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $120=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr95=(($120+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $121=HEAPU32[(($least_addr95)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($119)>>>0) >= (($121)>>>0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv97=(($cmp96)&1); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval98=(($conv97)==(1)); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool99=(($expval98)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool99) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $122=$RP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($122)>>2)]=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $123=$XP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp105=(($123)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp105) { __label__ = 43; break; } else { __label__ = 70; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $124=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index=(($124+28)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $125=HEAP32[(($index)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($126+304)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx108=(($treebins+($125<<2))|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx108; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $127=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $128=$H; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($128)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp109=(($127)|0)==(($129)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp109) { __label__ = 44; break; } else { __label__ = 47; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $130=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $131=$H; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($131)>>2)]=$130; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp112=(($130)|0)==0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp112) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $132=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index115=(($132+28)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($index115)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl116=1 << $133; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $neg117=$shl116 ^ -1; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $134=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($134+4)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($treemap)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and118=$135 & $neg117; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap)>>2)]=$and118; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 54; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $136=$XP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $137=$136; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $138=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr121=(($138+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $139=HEAPU32[(($least_addr121)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp122=(($137)>>>0) >= (($139)>>>0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv123=(($cmp122)&1); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval124=(($conv123)==(1)); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool125=(($expval124)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool125) { __label__ = 48; break; } else { __label__ = 52; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $140=$XP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child127=(($140+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx128=(($child127)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($arrayidx128)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp129=(($141)|0)==(($142)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp129) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $143=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $144=$XP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child132=(($144+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx133=(($child132)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx133)>>2)]=$143; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 51; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $145=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $146=$XP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child135=(($146+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx136=(($child135+4)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx136)>>2)]=$145; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 51; break;
    case 51: 
      __label__ = 53; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 52: 
      _abort(); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $147=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp141=(($147)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp141) { __label__ = 55; break; } else { __label__ = 69; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $148=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $149=$148; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $150=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr144=(($150+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $151=HEAPU32[(($least_addr144)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp145=(($149)>>>0) >= (($151)>>>0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv146=(($cmp145)&1); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval147=(($conv146)==(1)); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool148=(($expval147)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool148) { __label__ = 56; break; } else { __label__ = 67; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $152=$XP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $153=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent150=(($153+24)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent150)>>2)]=$152; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $154=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child151=(($154+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx152=(($child151)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $155=HEAP32[(($arrayidx152)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C0=$155; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp153=(($155)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp153) { __label__ = 57; break; } else { __label__ = 61; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $156=$C0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $158=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr156=(($158+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $159=HEAPU32[(($least_addr156)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp157=(($157)>>>0) >= (($159)>>>0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv158=(($cmp157)&1); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval159=(($conv158)==(1)); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool160=(($expval159)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool160) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $160=$C0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $161=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child162=(($161+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx163=(($child162)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx163)>>2)]=$160; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $162=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $163=$C0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent164=(($163+24)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent164)>>2)]=$162; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 60; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 59: 
      _abort(); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 60: 
      __label__ = 61; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $164=$TP; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child168=(($164+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx169=(($child168+4)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($arrayidx169)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C1=$165; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp170=(($165)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp170) { __label__ = 62; break; } else { __label__ = 66; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $166=$C1; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $167=$166; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr173=(($168+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $169=HEAPU32[(($least_addr173)>>2)]; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp174=(($167)>>>0) >= (($169)>>>0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv175=(($cmp174)&1); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval176=(($conv175)==(1)); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool177=(($expval176)|0)!=0; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool177) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $170=$C1; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $171=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child179=(($171+16)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx180=(($child179+4)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx180)>>2)]=$170; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $172=$R; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $173=$C1; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent181=(($173+24)|0); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent181)>>2)]=$172; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 64: 
      _abort(); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 66; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 66: 
      __label__ = 68; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 67: 
      _abort(); //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 3806 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 70: 
      __label__ = 71; break;
    case 71: 
      var $174=$oldfirst; //@line 3807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 3807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $176=$nsize; //@line 3807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr190=(($175+$176)|0); //@line 3807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $177=$add_ptr190; //@line 3807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$177; //@line 3807 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $178=$nsize; //@line 3808 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $179=$qsize; //@line 3808 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add191=(($179+$178)|0); //@line 3808 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $qsize=$add191; //@line 3808 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 72; break; //@line 3809 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $180=$oldfirst; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head193=(($180+4)|0); //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $181=HEAP32[(($head193)>>2)]; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and194=$181 & -2; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head193)>>2)]=$and194; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $182=$qsize; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or195=$182 | 1; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $183=$q; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head196=(($183+4)|0); //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head196)>>2)]=$or195; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $184=$qsize; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $185=$q; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $186=$185; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $187=$qsize; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr197=(($186+$187)|0); //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $188=$add_ptr197; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot198=(($188)|0); //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot198)>>2)]=$184; //@line 3810 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $189=$qsize; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr199=$189 >>> 3; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp200=(($shr199)>>>0) < 32; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp200) { __label__ = 73; break; } else { __label__ = 80; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $190=$qsize; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr204=$190 >>> 3; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I203=$shr204; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $191=$I203; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl206=$191 << 1; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $192=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallbins207=(($192+40)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx208=(($smallbins207+($shl206<<2))|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $193=$arrayidx208; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $194=$193; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B205=$194; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $195=$B205; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F209=$195; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $196=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap210=(($196)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $197=HEAP32[(($smallmap210)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $198=$I203; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl211=1 << $198; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and212=$197 & $shl211; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool213=(($and212)|0)!=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool213) { __label__ = 75; break; } else { __label__ = 74; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $199=$I203; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl215=1 << $199; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $200=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap216=(($200)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $201=HEAP32[(($smallmap216)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or217=$201 | $shl215; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap216)>>2)]=$or217; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 79; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $202=$B205; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd219=(($202+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($fd219)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $205=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr220=(($205+16)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $206=HEAPU32[(($least_addr220)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp221=(($204)>>>0) >= (($206)>>>0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv222=(($cmp221)&1); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval223=(($conv222)==(1)); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool224=(($expval223)|0)!=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool224) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $207=$B205; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd226=(($207+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $208=HEAP32[(($fd226)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F209=$208; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 77: 
      _abort(); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 78: 
      __label__ = 79; break;
    case 79: 
      var $209=$q; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $210=$B205; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd230=(($210+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd230)>>2)]=$209; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $211=$q; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $212=$F209; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk231=(($212+12)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk231)>>2)]=$211; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $213=$F209; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $214=$q; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd232=(($214+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd232)>>2)]=$213; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $215=$B205; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $216=$q; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk233=(($216+12)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk233)>>2)]=$215; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 80: 
      var $217=$q; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $TP235=$218; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $219=$qsize; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr238=$219 >>> 8; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $X=$shr238; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $220=$X; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp239=(($220)|0)==0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp239) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 81: 
      $I237=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $221=$X; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp243=(($221)>>>0) > 65535; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp243) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 83: 
      $I237=31; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $222=$X; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$222; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $223=$Y; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub247=(($223-256)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr248=$sub247 >>> 16; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and249=$shr248 & 8; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$and249; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $224=$N; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $225=$Y; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl250=$225 << $224; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl250; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub251=(($shl250-4096)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr252=$sub251 >>> 16; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and253=$shr252 & 4; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and253; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $226=$K; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $227=$N; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add254=(($227+$226)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add254; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $228=$K; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $229=$Y; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl255=$229 << $228; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl255; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub256=(($shl255-16384)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr257=$sub256 >>> 16; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and258=$shr257 & 2; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and258; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $230=$N; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add259=(($230+$and258)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add259; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $231=$N; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub260=((14-$231)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $232=$K; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $233=$Y; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl261=$233 << $232; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl261; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr262=$shl261 >>> 15; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add263=(($sub260+$shr262)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$add263; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $234=$K; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl264=$234 << 1; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $235=$qsize; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $236=$K; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add265=(($236+7)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr266=$235 >>> (($add265)>>>0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and267=$shr266 & 1; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add268=(($shl264+$and267)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I237=$add268; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      var $237=$I237; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $238=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins271=(($238+304)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx272=(($treebins271+($237<<2))|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H236=$arrayidx272; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $239=$I237; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $240=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index273=(($240+28)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index273)>>2)]=$239; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $241=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child274=(($241+16)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx275=(($child274+4)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx275)>>2)]=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $242=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child276=(($242+16)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx277=(($child276)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx277)>>2)]=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $243=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap278=(($243+4)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $244=HEAP32[(($treemap278)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $245=$I237; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl279=1 << $245; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and280=$244 & $shl279; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool281=(($and280)|0)!=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool281) { __label__ = 88; break; } else { __label__ = 87; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $246=$I237; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl283=1 << $246; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $247=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap284=(($247+4)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $248=HEAP32[(($treemap284)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or285=$248 | $shl283; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap284)>>2)]=$or285; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $249=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $250=$H236; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($250)>>2)]=$249; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $251=$H236; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $252=$251; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $253=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent286=(($253+24)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent286)>>2)]=$252; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $254=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $255=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk287=(($255+12)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk287)>>2)]=$254; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $256=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd288=(($256+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd288)>>2)]=$254; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $257=$H236; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $258=HEAP32[(($257)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$258; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $259=$qsize; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $260=$I237; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp291=(($260)|0)==31; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp291) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $cond300 = 0;__label__ = 91; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $261=$I237; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr295=$261 >>> 1; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add296=(($shr295+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub297=(($add296-2)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub298=((31-$sub297)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond300 = $sub298;__label__ = 91; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $cond300; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl301=$259 << $cond300; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K290=$shl301; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 92; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $262=$T; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head302=(($262+4)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $263=HEAP32[(($head302)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and303=$263 & -8; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $264=$qsize; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp304=(($and303)|0)!=(($264)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp304) { __label__ = 93; break; } else { __label__ = 99; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $265=$K290; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr307=$265 >>> 31; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and308=$shr307 & 1; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $266=$T; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child309=(($266+16)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx310=(($child309+($and308<<2))|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx310; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $267=$K290; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl311=$267 << 1; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K290=$shl311; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $268=$C; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($268)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp312=(($269)|0)!=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp312) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $270=$C; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $271=HEAP32[(($270)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$271; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 98; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $272=$C; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $273=$272; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $274=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr316=(($274+16)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $275=HEAPU32[(($least_addr316)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp317=(($273)>>>0) >= (($275)>>>0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv318=(($cmp317)&1); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval319=(($conv318)==(1)); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool320=(($expval319)|0)!=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool320) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $276=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $277=$C; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($277)>>2)]=$276; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $278=$T; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $279=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent322=(($279+24)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent322)>>2)]=$278; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $280=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $281=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk323=(($281+12)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk323)>>2)]=$280; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $282=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd324=(($282+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd324)>>2)]=$280; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 105; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 97: 
      _abort(); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 98: 
      __label__ = 104; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 99: 
      var $283=$T; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd329=(($283+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $284=HEAP32[(($fd329)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F328=$284; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $285=$T; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $286=$285; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $287=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr330=(($287+16)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $288=HEAPU32[(($least_addr330)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp331=(($286)>>>0) >= (($288)>>>0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp331) { __label__ = 100; break; } else { var $293 = 0;__label__ = 101; break; } //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $289=$F328; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $290=$289; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $291=$m_addr; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr334=(($291+16)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $292=HEAPU32[(($least_addr334)>>2)]; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp335=(($290)>>>0) >= (($292)>>>0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $293 = $cmp335;__label__ = 101; break;
    case 101: 
      var $293;
      var $land_ext338=(($293)&1);
      var $expval339=(($land_ext338)==(1));
      var $tobool340=(($expval339)|0)!=0;
      if ($tobool340) { __label__ = 102; break; } else { __label__ = 103; break; }
    case 102: 
      var $294=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $295=$F328; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk342=(($295+12)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk342)>>2)]=$294; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $296=$T; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd343=(($296+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd343)>>2)]=$294; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $297=$F328; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $298=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd344=(($298+8)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd344)>>2)]=$297; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $299=$T; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $300=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk345=(($300+12)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk345)>>2)]=$299; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $301=$TP235; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent346=(($301+24)|0); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent346)>>2)]=0; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 105; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 103: 
      _abort(); //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 104: 
      __label__ = 92; break; //@line 3811 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 105: 
      __label__ = 106; break;
    case 106: 
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      var $302=$p; //@line 3816 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $303=$302; //@line 3816 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr353=(($303+8)|0); //@line 3816 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      ;
      return $add_ptr353; //@line 3816 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_prepend_alloc["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  ;
  var __label__;
  __label__ = 1; 
  while(1) switch(__label__) {
    case 1: 
      var $m_addr;
      var $tbase_addr;
      var $tsize_addr;
      var $mmapped_addr;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I57;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K105;
      var $C;
      var $F144;
      $m_addr=$m;
      $tbase_addr=$tbase;
      $tsize_addr=$tsize;
      $mmapped_addr=$mmapped;
      var $0=$m_addr; //@line 3822 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $top=(($0+24)|0); //@line 3822 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[(($top)>>2)]; //@line 3822 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $2=$1; //@line 3822 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $old_top=$2; //@line 3822 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $3=$m_addr; //@line 3823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $4=$old_top; //@line 3823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $call=_segment_holding($3, $4); //@line 3823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $oldsp=$call; //@line 3823 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $5=$oldsp; //@line 3824 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base=(($5)|0); //@line 3824 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($base)>>2)]; //@line 3824 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $7=$oldsp; //@line 3824 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size=(($7+4)|0); //@line 3824 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($size)>>2)]; //@line 3824 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+$8)|0); //@line 3824 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $old_end=$add_ptr; //@line 3824 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $ssize=24; //@line 3825 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $9=$old_end; //@line 3826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $10=$ssize; //@line 3826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add=(($10+16)|0); //@line 3826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add1=(($add+7)|0); //@line 3826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $idx_neg=(((-$add1))|0); //@line 3826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr2=(($9+$idx_neg)|0); //@line 3826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $rawsp=$add_ptr2; //@line 3826 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $11=$rawsp; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr3=(($11+8)|0); //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $12=$add_ptr3; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and=$12 & 7; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 2: 
      var $cond = 0;__label__ = 4; break; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $13=$rawsp; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($13+8)|0); //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr4; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and5=$14 & 7; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub=((8-$and5)|0); //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and6=$sub & 7; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond = $and6;__label__ = 4; break; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $cond; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3827 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $15=$rawsp; //@line 3828 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $16=$offset; //@line 3828 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr7=(($15+$16)|0); //@line 3828 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $asp=$add_ptr7; //@line 3828 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $17=$asp; //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $18=$old_top; //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr8=(($18+16)|0); //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp9=(($17)>>>0) < (($add_ptr8)>>>0); //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $19=$old_top; //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond13 = $19;__label__ = 7; break; //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $20=$asp; //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond13 = $20;__label__ = 7; break; //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $cond13; //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $csp=$cond13; //@line 3829 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $21=$csp; //@line 3830 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3830 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $sp=$22; //@line 3830 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $23=$sp; //@line 3831 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 3831 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr14=(($24+8)|0); //@line 3831 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $25=$add_ptr14; //@line 3831 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $ss=$25; //@line 3831 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $26=$sp; //@line 3832 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $27=$26; //@line 3832 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $28=$ssize; //@line 3832 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr15=(($27+$28)|0); //@line 3832 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $29=$add_ptr15; //@line 3832 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tnext=$29; //@line 3832 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $30=$tnext; //@line 3833 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$30; //@line 3833 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nfences=0; //@line 3834 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $31=$m_addr; //@line 3837 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $32=$tbase_addr; //@line 3837 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3837 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $34=$tsize_addr; //@line 3837 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub16=(($34-40)|0); //@line 3837 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      _init_top($31, $33, $sub16); //@line 3837 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $35=$ssize; //@line 3841 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or=$35 | 1; //@line 3841 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or17=$or | 2; //@line 3841 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $36=$sp; //@line 3841 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head=(($36+4)|0); //@line 3841 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or17; //@line 3841 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $37=$ss; //@line 3842 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $38=$m_addr; //@line 3842 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg=(($38+444)|0); //@line 3842 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $39=$37; //@line 3842 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $40=$seg; //@line 3842 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[(($39+4)>>2)]=HEAP32[(($40+4)>>2)];HEAP32[(($39+8)>>2)]=HEAP32[(($40+8)>>2)];HEAP32[(($39+12)>>2)]=HEAP32[(($40+12)>>2)]; //@line 3842 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $41=$tbase_addr; //@line 3843 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $42=$m_addr; //@line 3843 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg18=(($42+444)|0); //@line 3843 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $base19=(($seg18)|0); //@line 3843 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base19)>>2)]=$41; //@line 3843 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $43=$tsize_addr; //@line 3844 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $44=$m_addr; //@line 3844 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg20=(($44+444)|0); //@line 3844 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $size21=(($seg20+4)|0); //@line 3844 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size21)>>2)]=$43; //@line 3844 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $45=$mmapped_addr; //@line 3845 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $46=$m_addr; //@line 3845 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg22=(($46+444)|0); //@line 3845 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($seg22+12)|0); //@line 3845 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($sflags)>>2)]=$45; //@line 3845 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $47=$ss; //@line 3846 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 3846 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $seg23=(($48+444)|0); //@line 3846 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $next=(($seg23+8)|0); //@line 3846 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($next)>>2)]=$47; //@line 3846 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 3849 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $49=$p; //@line 3850 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 3850 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr24=(($50+4)|0); //@line 3850 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $51=$add_ptr24; //@line 3850 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nextp=$51; //@line 3850 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $52=$p; //@line 3851 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head25=(($52+4)|0); //@line 3851 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head25)>>2)]=7; //@line 3851 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $53=$nfences; //@line 3852 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $inc=(($53+1)|0); //@line 3852 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $nfences=$inc; //@line 3852 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $54=$nextp; //@line 3853 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head26=(($54+4)|0); //@line 3853 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $55=$head26; //@line 3853 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $56=$old_end; //@line 3853 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($55)>>>0) < (($56)>>>0); //@line 3853 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3853 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $57=$nextp; //@line 3854 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $p=$57; //@line 3854 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3854 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 10: 
      __label__ = 12; break; //@line 3856 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 11: 
      __label__ = 8; break; //@line 3857 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $58=$csp; //@line 3861 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $59=$old_top; //@line 3861 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($58)|0)!=(($59)|0); //@line 3861 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 13; break; } else { __label__ = 49; break; } //@line 3861 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $60=$old_top; //@line 3862 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $61=$60; //@line 3862 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $q=$61; //@line 3862 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $62=$csp; //@line 3863 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $63=$old_top; //@line 3863 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$62; //@line 3863 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$63; //@line 3863 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=(($sub_ptr_lhs_cast-$sub_ptr_rhs_cast)|0); //@line 3863 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $psize=$sub_ptr_sub; //@line 3863 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $64=$q; //@line 3864 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $65=$64; //@line 3864 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $66=$psize; //@line 3864 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr30=(($65+$66)|0); //@line 3864 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $67=$add_ptr30; //@line 3864 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $tn=$67; //@line 3864 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $68=$tn; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head31=(($68+4)|0); //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $69=HEAP32[(($head31)>>2)]; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and32=$69 & -2; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head31)>>2)]=$and32; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $70=$psize; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or33=$70 | 1; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $71=$q; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head34=(($71+4)|0); //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head34)>>2)]=$or33; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $72=$psize; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $73=$q; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $74=$73; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $75=$psize; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add_ptr35=(($74+$75)|0); //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $76=$add_ptr35; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($76)|0); //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$72; //@line 3865 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $77=$psize; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr=$77 >>> 3; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($shr)>>>0) < 32; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 14; break; } else { __label__ = 21; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $78=$psize; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr38=$78 >>> 3; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I=$shr38; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $79=$I; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl=$79 << 1; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $80=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($80+40)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl<<2))|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $81=$arrayidx; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $82=$81; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $B=$82; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $83=$B; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F=$83; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $84=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($84)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $85=HEAP32[(($smallmap)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $86=$I; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl39=1 << $86; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and40=$85 & $shl39; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and40)|0)!=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $87=$I; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl42=1 << $87; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $88=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $smallmap43=(($88)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $89=HEAP32[(($smallmap43)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or44=$89 | $shl42; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap43)>>2)]=$or44; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $90=$B; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd=(($90+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($fd)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $92=$91; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $93=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($93+16)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $94=HEAPU32[(($least_addr)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($92)>>>0) >= (($94)>>>0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp46)&1); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool47=(($expval)|0)!=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool47) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $95=$B; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd49=(($95+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($fd49)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F=$96; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 19; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 18: 
      _abort(); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $97=$q; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $98=$B; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd53=(($98+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd53)>>2)]=$97; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $99=$q; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $100=$F; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk=(($100+12)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$99; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $101=$F; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $102=$q; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd54=(($102+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd54)>>2)]=$101; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $103=$B; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $104=$q; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk55=(($104+12)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk55)>>2)]=$103; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $105=$q; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $106=$105; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $TP=$106; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $107=$psize; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr58=$107 >>> 8; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $X=$shr58; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $108=$X; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp59=(($108)|0)==0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp59) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 22: 
      $I57=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $109=$X; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($109)>>>0) > 65535; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp63) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 24: 
      $I57=31; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $110=$X; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$110; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $111=$Y; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub67=(($111-256)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr68=$sub67 >>> 16; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and69=$shr68 & 8; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$and69; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $112=$N; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $113=$Y; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl70=$113 << $112; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl70; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub71=(($shl70-4096)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr72=$sub71 >>> 16; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and73=$shr72 & 4; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and73; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $114=$K; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $115=$N; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add74=(($115+$114)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add74; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $116=$K; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $117=$Y; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl75=$117 << $116; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl75; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub76=(($shl75-16384)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr77=$sub76 >>> 16; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and78=$shr77 & 2; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$and78; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $118=$N; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add79=(($118+$and78)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $N=$add79; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $119=$N; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub80=((14-$119)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $120=$K; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $121=$Y; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl81=$121 << $120; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $Y=$shl81; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr82=$shl81 >>> 15; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add83=(($sub80+$shr82)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K=$add83; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $122=$K; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl84=$122 << 1; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $123=$psize; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $124=$K; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add85=(($124+7)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr86=$123 >>> (($add85)>>>0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and87=$shr86 & 1; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add88=(($shl84+$and87)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $I57=$add88; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $125=$I57; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($126+304)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx91=(($treebins+($125<<2))|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx91; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $127=$I57; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $128=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $index=(($128+28)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index)>>2)]=$127; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $129=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child=(($129+16)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx92=(($child+4)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx92)>>2)]=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $130=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child93=(($130+16)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx94=(($child93)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx94)>>2)]=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $131=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($131+4)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $132=HEAP32[(($treemap)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $133=$I57; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl95=1 << $133; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and96=$132 & $shl95; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool97=(($and96)|0)!=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool97) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $134=$I57; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl99=1 << $134; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $135=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $treemap100=(($135+4)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $136=HEAP32[(($treemap100)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $or101=$136 | $shl99; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap100)>>2)]=$or101; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $137=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $138=$H; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($138)>>2)]=$137; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $139=$H; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $140=$139; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $141=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent=(($141+24)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent)>>2)]=$140; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $143=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk102=(($143+12)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk102)>>2)]=$142; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $144=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd103=(($144+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd103)>>2)]=$142; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $145=$H; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($145)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$146; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $147=$psize; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $148=$I57; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp106=(($148)|0)==31; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp106) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $cond115 = 0;__label__ = 32; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $149=$I57; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr110=$149 >>> 1; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $add111=(($shr110+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub112=(($add111-2)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $sub113=((31-$sub112)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cond115 = $sub113;__label__ = 32; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $cond115; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl116=$147 << $cond115; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K105=$shl116; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $150=$T; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $head118=(($150+4)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($head118)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and119=$151 & -8; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $152=$psize; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($and119)|0)!=(($152)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp120) { __label__ = 34; break; } else { __label__ = 40; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $153=$K105; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shr123=$153 >>> 31; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $and124=$shr123 & 1; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $154=$T; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $child125=(($154+16)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $arrayidx126=(($child125+($and124<<2))|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx126; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $155=$K105; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $shl127=$155 << 1; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $K105=$shl127; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $156=$C; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $157=HEAP32[(($156)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp128=(($157)|0)!=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp128) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $158=$C; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[(($158)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $T=$159; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $160=$C; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $162=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr132=(($162+16)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $163=HEAPU32[(($least_addr132)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp133=(($161)>>>0) >= (($163)>>>0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $conv134=(($cmp133)&1); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $expval135=(($conv134)==(1)); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $tobool136=(($expval135)|0)!=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($tobool136) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $164=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $165=$C; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($165)>>2)]=$164; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $166=$T; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $167=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent138=(($167+24)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent138)>>2)]=$166; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $168=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $169=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk139=(($169+12)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk139)>>2)]=$168; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $170=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd140=(($170+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd140)>>2)]=$168; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 38: 
      _abort(); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 45; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $171=$T; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd145=(($171+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($fd145)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      $F144=$172; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $173=$T; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $174=$173; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $175=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr146=(($175+16)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $176=HEAPU32[(($least_addr146)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp147=(($174)>>>0) >= (($176)>>>0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      if ($cmp147) { __label__ = 41; break; } else { var $181 = 0;__label__ = 42; break; } //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $177=$F144; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $178=$177; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $179=$m_addr; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $least_addr149=(($179+16)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $180=HEAPU32[(($least_addr149)>>2)]; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $cmp150=(($178)>>>0) >= (($180)>>>0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $181 = $cmp150;__label__ = 42; break;
    case 42: 
      var $181;
      var $land_ext=(($181)&1);
      var $expval152=(($land_ext)==(1));
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $182=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $183=$F144; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk155=(($183+12)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk155)>>2)]=$182; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $184=$T; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd156=(($184+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd156)>>2)]=$182; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $185=$F144; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $186=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $fd157=(($186+8)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd157)>>2)]=$185; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $187=$T; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $188=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $bk158=(($188+12)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk158)>>2)]=$187; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $189=$TP; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      var $parent159=(($189+24)|0); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent159)>>2)]=0; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      __label__ = 46; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 44: 
      _abort(); //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 33; break; //@line 3866 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break; //@line 3867 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    case 49: 
      ;
      return; //@line 3870 "/home/The_Fly/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_add_segment["X"]=1;
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;
  
  var __impure_ptr=0;var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {isDevice: false, contents: data};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        var properties = {isDevice: false, url: url};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          // Browser.
          assert('Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc');
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(String.fromCharCode(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder.
        FS.createFolder('/', 'tmp', true, true);
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        _stdin = allocate([1], 'void*', ALLOC_STATIC);
        _stdout = allocate([2], 'void*', ALLOC_STATIC);
        _stderr = allocate([3], 'void*', ALLOC_STATIC);
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        __impure_ptr = allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_STATIC);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        var path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  
  
  
  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        for (var i = 0; i < size; i++) {
          HEAP8[(buf+i)]=contents[offset + i]
          bytesRead++;
        }
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(buf+i)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  
  
  
  
  
  
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(buf+i)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(buf+i)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  
  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }var _llvm_memset_p0i8_i32=_memset;

  
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (tempDoubleI32[0]=HEAP32[((varargs+argIndex)>>2)],tempDoubleI32[1]=HEAP32[((varargs+argIndex+4)>>2)],tempDoubleF64[0]);
        } else if (type == 'i64') {
          ret = [HEAP32[((varargs+argIndex)>>2)],
                 HEAP32[((varargs+argIndex+4)>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[((varargs+argIndex)>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*');
            var copiedString;
            if (arg) {
              copiedString = String_copy(arg);
              if (precisionSet && copiedString.length > precision) {
                copiedString = copiedString.slice(0, precision);
              }
            } else {
              copiedString = intArrayFromString('(null)', true);
            }
            if (!flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            ret = ret.concat(copiedString);
            if (flagLeftAlign) {
              while (copiedString.length < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!(stream in FS.streams)) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAP8[(_fgetc.ret)];
      }
    }
  
  var _getc=_fgetc;

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAP8[(px+i)];
        var y = HEAP8[(py+i)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000/1000));
    }

  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[(psrc+i)];
        HEAP8[(pdest+i)]=curr
        padding = padding || HEAP8[(psrc+i)] == 0;
      }
      return pdest;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _atoi(s) {
      var c;
      while ((c = HEAP8[(s)]) && _isspace(c)) s++;
      if (!c || !_isdigit(c)) return 0;
      var e = s;
      while ((c = HEAP8[(e)]) && _isdigit(c)) e++;
      return Math.floor(Number(Pointer_stringify(s).substr(0, e-s)));
    }

  function _strlen(ptr) {
      return String_len(ptr);
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[(psrc+i-1)] != 0);
      return pdest;
    }

  
  
  
  
  
  
  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length;
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  var ___stat_struct_layout={__size__:72,st_dev:0,st_ino:4,st_mode:8,st_nlink:12,st_uid:16,st_gid:20,st_rdev:24,st_size:28,st_atime:32,st_spare1:36,st_mtime:40,st_spare2:44,st_ctime:48,st_spare3:52,st_blksize:56,st_blocks:60,st_spare4:64};function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
      if (obj === null || !FS.forceLoadFile(obj)) return -1;
  
      var offsets = ___stat_struct_layout;
  
      // Constants.
      HEAP32[((buf+offsets.st_nlink)>>2)]=1
      HEAP32[((buf+offsets.st_uid)>>2)]=0
      HEAP32[((buf+offsets.st_gid)>>2)]=0
      HEAP32[((buf+offsets.st_blksize)>>2)]=4096
  
      // Variables.
      HEAP32[((buf+offsets.st_ino)>>2)]=obj.inodeNumber
      var time = Math.floor(obj.timestamp / 1000);
      if (offsets.st_atime === undefined) {
        offsets.st_atime = offsets.st_atim.tv_sec;
        offsets.st_mtime = offsets.st_mtim.tv_sec;
        offsets.st_ctime = offsets.st_ctim.tv_sec;
        var nanosec = (obj.timestamp % 1000) * 1000;
        HEAP32[((buf+offsets.st_atim.tv_nsec)>>2)]=nanosec
        HEAP32[((buf+offsets.st_mtim.tv_nsec)>>2)]=nanosec
        HEAP32[((buf+offsets.st_ctim.tv_nsec)>>2)]=nanosec
      }
      HEAP32[((buf+offsets.st_atime)>>2)]=time
      HEAP32[((buf+offsets.st_mtime)>>2)]=time
      HEAP32[((buf+offsets.st_ctime)>>2)]=time
      var mode = 0;
      var size = 0;
      var blocks = 0;
      var dev = 0;
      var rdev = 0;
      if (obj.isDevice) {
        //  Device numbers reuse inode numbers.
        dev = rdev = obj.inodeNumber;
        size = blocks = 0;
        mode = 0x2000;  // S_IFCHR.
      } else {
        dev = 1;
        rdev = 0;
        // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
        //       but this is not required by the standard.
        if (obj.isFolder) {
          size = 4096;
          blocks = 1;
          mode = 0x4000;  // S_IFDIR.
        } else {
          var data = obj.contents || obj.link;
          size = data.length;
          blocks = Math.ceil(data.length / 4096);
          mode = obj.link === undefined ? 0x8000 : 0xA000;  // S_IFREG, S_IFLNK.
        }
      }
      HEAP32[((buf+offsets.st_dev)>>2)]=dev;
      HEAP32[((buf+offsets.st_rdev)>>2)]=rdev;
      HEAP32[((buf+offsets.st_size)>>2)]=size
      HEAP32[((buf+offsets.st_blocks)>>2)]=blocks
      if (obj.read) mode |= 0x16D;  // S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH.
      if (obj.write) mode |= 0x92;  // S_IWUSR | S_IWGRP | S_IWOTH.
      HEAP32[((buf+offsets.st_mode)>>2)]=mode
  
      return 0;
    }

  
  
  
  function _mknod(path, mode, dev) {
      // int mknod(const char *path, mode_t mode, dev_t dev);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
      if (dev !== 0 || !(mode & 0xC000)) {  // S_IFREG | S_IFDIR.
        // Can't create devices or pipes through mknod().
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var properties = {contents: [], isFolder: Boolean(mode & 0x4000)};  // S_IFDIR.
        path = FS.analyzePath(Pointer_stringify(path));
        try {
          FS.createObject(path.parentObject, path.name, properties,
                          mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
          return 0;
        } catch (e) {
          return -1;
        }
      }
    }function _mkdir(path, mode) {
      // int mkdir(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
      return _mknod(path, 0x4000 | (mode & 0x180), 0);  // S_IFDIR, S_IRUSR | S_IWUSR.
    }

  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[(psrc+i-1)] != 0);
      return pdest;
    }

  
  
  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        delete FS.streams[fildes];
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (filedes in FS.streams && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i in FS.streams) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
var _setjmp; // stub for _setjmp

  function _longjmp(env, value) {
      throw { longjmp: true, label: HEAP32[((env)>>2)], value: value || 1 };
    }

  
  function _memcpy(dest, src, num, align) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with quantum=1 corrections perhaps?');
      if (num >= 20 && src % 2 == dest % 2) {
        // This is unaligned, but quite large, and potentially alignable, so work hard to get to aligned settings
        if (src % 4 == dest % 4) {
          var stop = src + num;
          while (src % 4) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
          while (src4 < stop4) {
            HEAP32[dest4++] = HEAP32[src4++];
          }
          src = src4 << 2;
          dest = dest4 << 2;
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        } else {
          var stop = src + num;
          if (src % 2) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
          while (src2 < stop2) {
            HEAP16[dest2++] = HEAP16[src2++];
          }
          src = src2 << 1;
          dest = dest2 << 1;
          if (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } else {
        while (num--) {
          HEAP8[dest++] = HEAP8[src++];
        }
      }
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAP8[(p1+i)];
        var v2 = HEAP8[(p2+i)];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  function _rename(old, new_) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      var oldObj = FS.analyzePath(Pointer_stringify(old));
      var newObj = FS.analyzePath(Pointer_stringify(new_));
      if (newObj.path == oldObj.path) {
        return 0;
      } else if (!oldObj.exists) {
        ___setErrNo(oldObj.error);
        return -1;
      } else if (oldObj.isRoot || oldObj.path == FS.currentPath) {
        ___setErrNo(ERRNO_CODES.EBUSY);
        return -1;
      } else if (newObj.path && newObj.path.indexOf(oldObj.path) == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else if (newObj.exists && newObj.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else {
        delete oldObj.parentObject.contents[oldObj.name];
        newObj.parentObject.contents[newObj.name] = oldObj.object;
        return 0;
      }
    }

  
  
  
  
  var ___utimbuf_struct_layout={__size__:8,actime:0,modtime:4};function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = ___utimbuf_struct_layout.modtime;
        time = HEAP32[((times+offset)>>2)]
        time *= 1000;
      } else {
        time = Date.now();
      }
      var file = FS.findObject(Pointer_stringify(path));
      if (file === null) return -1;
      if (!file.write) {
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
      file.timestamp = time;
      return 0;
    }

  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }

  function _modf(x, intpart) {
      (tempDoubleF64[0]=Math.floor(x),HEAP32[((intpart)>>2)]=tempDoubleI32[0],HEAP32[((intpart+4)>>2)]=tempDoubleI32[1])
      return x - (tempDoubleI32[0]=HEAP32[((intpart)>>2)],tempDoubleI32[1]=HEAP32[((intpart+4)>>2)],tempDoubleF64[0]);
    }

  var _floor=Math.floor;

  var _llvm_pow_f64=Math.pow;

  function _atof(ptr) {
      var str = Pointer_stringify(ptr);
      var ret = parseFloat(str);
      return isNaN(ret) ? 0 : ret;
    }
var _llvm_dbg_declare; // stub for _llvm_dbg_declare
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }
  var ___errno=___errno_location;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }




__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}


var _iccp_length;


var _current_allocation;
var _maximum_allocation;
var _pinformation;
var _verbose;
var _stdout;





var _pauses;

var _stdin;

var _remove_chunks;
























var _first_trial;



























var _things_have_changed;


var _total_output_length;
var _total_input_length;



var _t_stop;
var _t_start;
var _t_misc;

var _t_decode;

var _t_encode;




var _found_acTL_chunk;

var _row_buf;
var _number_of_open_files;
var _do_color_count;




var _prog_string;
var _progname;
var _method;
var _names;


var _methods_specified;




var _crushed_idat_size;


var _have_bkgd;
var _bkgd_red;
var _bkgd_green;
var _bkgd_blue;

var _brute_force;
var _brute_force_filter;
var _brute_force_filters;
var _brute_force_level;
var _brute_force_levels;
var _brute_force_strategy;
var _brute_force_strategies;

var _force_output_bit_depth;



var _force_output_color_type;

var _double_gamma;
var _found_gAMA;
var _global_things_have_changed;

var _pngcrush_mode;
var _directory_name;

var _pngcrush_must_exit;

var _extension;


var _fix;


var _do_loco;


var _intent;
var _specified_gamma;


var _iccp_text;
var _iccp_name;
var _iccp_file;


var _buffer;

var _found_any_chunk;

var _max_idat_size;

var _mngname;
var _new_mng;



var _nofilecheck;

var _no_limits;

var _nosave;

var _new_time_stamp;

var _overwrite;

var _premultiply;

var _plte_len;

var _do_pplt;
var _pplt_string;



var _reduction_ok;

var _force_specified_gamma;

var _resolution;

var _image_is_immutable;

var _all_chunks_are_safe;








var _ster_mode;









var _text_inputs;

var _text_compression;



var _text_where;

var _text_keyword;
var _text_lang;
var _text_lang_key;
var _text_text;







var _num_trans_in;
var _trns_index;
var _have_trns;
var _ia;
var _trans_in;


var _trns_red;
var _trns_green;
var _trns_blue;
var _trns_gray;










var _default_compression_window;
var _force_compression_window;

var _compression_mem_level;

var _inname;
var _outname;
var _trns_array;
var _png_row_filters;
var _image_specified_gamma;


var _out_string;



var _in_string;
var _op;
var _ip;


var _dot;
var _in_extension;
var _read_ptr;

var _save_apng_chunks;

var _fpin;
var _already_crushed;
var _mng_ptr;


var _mng_out;

var _idat_length;







var _output_color_type;
var _output_bit_depth;
var _best_of_three;

var _trial;
var _best;
var _final_method;


var _fpout;



var _filter_type;
var _zlib_level;
var _z_strategy;







var _the_exception_context;


var _write_ptr;


var _read_info_ptr;

var _end_info_ptr;

var _write_info_ptr;

var _write_end_info_ptr;











var _input_format;


var _found_CgBI;

var _width;
var _height;
var _input_color_type;
var _input_bit_depth;

















var _output_format;
var _found_cHRM;

















var _num_palette;




var _palette;














































var _msg;
var _stderr;






















var _measured_idat_length;















































var __str360;


















































































































































































var _pngcrush_options;
var _pngcrush_legal;
var _pngcrush_usage;





















































































































































































































































var _png_combine_row_row_mask;
var _png_combine_row_display_mask;

var _png_do_read_interlace_png_pass_inc;











































































































































var _crc_table;

var _configuration_table;




var _inflate_order;


















var _fixedtables_lenfix1301;
var _fixedtables_distfix1302;
var _inflate_table_lbase;
var _inflate_table_lext;
var _inflate_table_dbase;
var _inflate_table_dext;


var _static_l_desc;
var _static_d_desc;
var _static_bl_desc;
var _static_ltree;
var _static_dtree;
var _extra_lbits;
var _base_length;
var _extra_dbits;
var _base_dist;

var _extra_blbits;


var __str21331;






var _z_errmsg;
var __gm_;
var _mparams;
_iccp_length=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str=allocate([82,101,97,100,32,69,114,114,111,114,0] /* Read Error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1=allocate([87,114,105,116,101,32,69,114,114,111,114,0] /* Write Error\00 */, "i8", ALLOC_STATIC);
_current_allocation=allocate(1, "i32", ALLOC_STATIC);
_maximum_allocation=allocate(1, "i32", ALLOC_STATIC);
_pinformation=allocate(1, "%struct.memory_information*", ALLOC_STATIC);
_verbose=allocate([1], ["i32",0,0,0,0], ALLOC_STATIC);
STRING_TABLE.__str2=allocate([80,111,105,110,116,101,114,32,37,108,117,120,32,97,108,108,111,99,97,116,101,100,32,37,108,117,32,98,121,116,101,115,10,0] /* Pointer %lux allocat */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3=allocate([78,85,76,76,32,112,111,105,110,116,101,114,32,116,111,32,112,110,103,95,100,101,98,117,103,95,102,114,101,101,46,10,0] /* NULL pointer to png_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4=allocate([68,117,112,108,105,99,97,116,101,32,102,114,101,101,32,111,102,32,109,101,109,111,114,121,10,0] /* Duplicate free of me */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5=allocate([80,111,105,110,116,101,114,32,37,108,117,120,32,102,114,101,101,100,32,37,108,117,32,98,121,116,101,115,10,0] /* Pointer %lux freed % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6=allocate([80,111,105,110,116,101,114,32,37,108,117,120,32,110,111,116,32,102,111,117,110,100,10,0] /* Pointer %lux not fou */, "i8", ALLOC_STATIC);
_pauses=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str7=allocate([80,114,101,115,115,32,91,69,78,84,69,82,93,32,107,101,121,32,116,111,32,99,111,110,116,105,110,117,101,46,10,0] /* Press [ENTER] key to */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8=allocate([83,107,105,112,112,105,110,103,32,37,99,37,99,37,99,37,99,32,99,104,117,110,107,46,10,0] /* Skipping %c%c%c%c ch */, "i8", ALLOC_STATIC);
_remove_chunks=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str9=allocate([45,114,101,109,0] /* -rem\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10=allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11=allocate([99,72,82,77,0] /* cHRM\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12=allocate([99,104,114,109,0] /* chrm\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13=allocate([100,83,73,71,0] /* dSIG\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14=allocate([100,115,105,103,0] /* dsig\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15=allocate([103,73,70,103,0] /* gIFg\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16=allocate([103,105,102,103,0] /* gifg\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17=allocate([103,73,70,116,0] /* gIFt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18=allocate([103,105,102,116,0] /* gift\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19=allocate([103,73,70,120,0] /* gIFx\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20=allocate([103,105,102,120,0] /* gifx\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21=allocate([104,73,83,84,0] /* hIST\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22=allocate([104,105,115,116,0] /* hist\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23=allocate([105,67,67,80,0] /* iCCP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24=allocate([105,99,99,112,0] /* iccp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25=allocate([112,67,65,76,0] /* pCAL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26=allocate([112,99,97,108,0] /* pcal\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27=allocate([115,67,65,76,0] /* sCAL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28=allocate([115,99,97,108,0] /* scal\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29=allocate([115,80,76,84,0] /* sPLT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30=allocate([115,112,108,116,0] /* splt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31=allocate([116,73,77,69,0] /* tIME\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32=allocate([116,105,109,101,0] /* time\00 */, "i8", ALLOC_STATIC);
_first_trial=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str33=allocate([32,32,32,82,101,97,100,32,116,104,101,32,37,115,32,99,104,117,110,107,46,10,0] /*    Read the %s chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34=allocate([32,32,32,32,32,67,104,101,99,107,32,102,111,114,32,114,101,109,111,118,97,108,32,111,102,32,116,104,101,32,37,115,32,99,104,117,110,107,46,10,0] /*      Check for remov */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35=allocate([97,108,108,97,0] /* alla\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36=allocate([116,101,120,116,0] /* text\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37=allocate([80,76,84,69,0] /* PLTE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38=allocate([112,108,116,101,0] /* plte\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39=allocate([98,75,71,68,0] /* bKGD\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40=allocate([98,107,103,100,0] /* bkgd\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41=allocate([103,65,77,65,0] /* gAMA\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42=allocate([103,97,109,97,0] /* gama\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43=allocate([105,84,88,116,0] /* iTXt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44=allocate([105,116,120,116,0] /* itxt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45=allocate([111,70,70,115,0] /* oFFs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46=allocate([111,102,102,115,0] /* offs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47=allocate([112,72,89,115,0] /* pHYs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48=allocate([112,104,121,115,0] /* phys\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49=allocate([115,66,73,84,0] /* sBIT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50=allocate([115,98,105,116,0] /* sbit\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51=allocate([115,82,71,66,0] /* sRGB\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52=allocate([115,114,103,98,0] /* srgb\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53=allocate([115,84,69,82,0] /* sTER\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54=allocate([115,116,101,114,0] /* ster\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55=allocate([116,69,88,116,0] /* tEXt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56=allocate([116,82,78,83,0] /* tRNS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57=allocate([116,114,110,115,0] /* trns\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58=allocate([122,84,88,116,0] /* zTXt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59=allocate([122,116,120,116,0] /* ztxt\00 */, "i8", ALLOC_STATIC);
_things_have_changed=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str60=allocate([32,32,32,82,101,109,111,118,101,100,32,116,104,101,32,37,115,32,99,104,117,110,107,46,10,0] /*    Removed the %s ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61=allocate([32,32,32,80,114,101,115,101,114,118,105,110,103,32,116,104,101,32,37,115,32,99,104,117,110,107,46,10,0] /*    Preserving the %s */, "i8", ALLOC_STATIC);
_total_output_length=allocate(1, "i32", ALLOC_STATIC);
_total_input_length=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str62=allocate([32,32,32,79,118,101,114,97,108,108,32,114,101,115,117,108,116,58,32,110,111,32,99,104,97,110,103,101,10,0] /*    Overall result: n */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63=allocate([32,32,32,79,118,101,114,97,108,108,32,114,101,115,117,108,116,58,32,37,52,46,50,102,37,37,32,114,101,100,117,99,116,105,111,110,44,32,37,108,117,32,98,121,116,101,115,10,0] /*    Overall result: % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64=allocate([32,32,32,79,118,101,114,97,108,108,32,114,101,115,117,108,116,58,32,37,52,46,50,102,37,37,32,105,110,99,114,101,97,115,101,44,32,37,108,117,32,98,121,116,101,115,10,0] /*    Overall result: % */, "i8", ALLOC_STATIC);
_t_stop=allocate(1, "float", ALLOC_STATIC);
_t_start=allocate(1, "float", ALLOC_STATIC);
_t_misc=allocate(1, "float", ALLOC_STATIC);
STRING_TABLE.__str65=allocate([32,32,32,67,80,85,32,116,105,109,101,32,100,101,99,111,100,105,110,103,32,37,46,51,102,44,0] /*    CPU time decoding */, "i8", ALLOC_STATIC);
_t_decode=allocate(1, "float", ALLOC_STATIC);
STRING_TABLE.__str66=allocate([32,101,110,99,111,100,105,110,103,32,37,46,51,102,44,0] /*  encoding %.3f,\00 */, "i8", ALLOC_STATIC);
_t_encode=allocate(1, "float", ALLOC_STATIC);
STRING_TABLE.__str67=allocate([32,111,116,104,101,114,32,37,46,51,102,44,0] /*  other %.3f,\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str68=allocate([32,116,111,116,97,108,32,37,46,51,102,32,115,101,99,111,110,100,115,10,10,0] /*  total %.3f seconds\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str69=allocate([77,69,77,79,82,89,32,69,82,82,79,82,58,32,37,100,32,98,121,116,101,115,32,115,116,105,108,108,32,97,108,108,111,99,97,116,101,100,10,0] /* MEMORY ERROR: %d byt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str70=allocate([32,37,56,108,117,32,98,121,116,101,115,32,97,116,32,37,108,117,120,10,0] /*  %8lu bytes at %lux\ */, "i8", ALLOC_STATIC);
_found_acTL_chunk=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str71=allocate([32,32,32,42,42,42,42,32,68,105,115,99,97,114,100,101,100,32,65,80,78,71,32,99,104,117,110,107,115,46,32,42,42,42,42,10,0] /*    ____ Discarded AP */, "i8", ALLOC_STATIC);
_row_buf=allocate(1, "i8*", ALLOC_STATIC);
_number_of_open_files=allocate(1, "i32", ALLOC_STATIC);
_do_color_count=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str72=allocate([49,46,53,46,49,48,0] /* 1.5.10\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str73=allocate([87,97,114,110,105,110,103,58,32,118,101,114,115,105,111,110,115,32,97,114,101,32,100,105,102,102,101,114,101,110,116,32,98,101,116,119,101,101,110,32,112,110,103,46,104,32,97,110,100,32,112,110,103,46,99,10,0] /* Warning: versions ar */, "i8", ALLOC_STATIC);
STRING_TABLE.__str74=allocate([32,32,112,110,103,46,104,32,118,101,114,115,105,111,110,58,32,37,115,10,0] /*   png.h version: %s\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str75=allocate([32,32,112,110,103,46,99,32,118,101,114,115,105,111,110,58,32,37,115,10,10,0] /*   png.c version: %s\ */, "i8", ALLOC_STATIC);
_prog_string=allocate(256, "i8", ALLOC_STATIC);
_progname=allocate(1, "i8*", ALLOC_STATIC);
_method=allocate([10], ["i32",0,0,0,0], ALLOC_STATIC);
_names=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str76=allocate([45,0] /* -\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str77=allocate([45,102,97,115,116,0] /* -fast\00 */, "i8", ALLOC_STATIC);
_methods_specified=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str78=allocate([45,104,117,102,102,109,97,110,0] /* -huffman\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str79=allocate([45,114,108,101,0] /* -rle\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str80=allocate([45,97,108,114,101,97,100,121,0] /* -already\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81=allocate([105,110,115,117,102,102,105,99,105,101,110,116,32,112,97,114,97,109,101,116,101,114,115,10,0] /* insufficient paramet */, "i8", ALLOC_STATIC);
_crushed_idat_size=allocate([67108863], ["i32",0,0,0,0], ALLOC_STATIC);
STRING_TABLE.__str82=allocate([45,98,107,103,100,0] /* -bkgd\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str83=allocate([45,98,75,71,68,0] /* -bKGD\00 */, "i8", ALLOC_STATIC);
_have_bkgd=allocate(1, "i32", ALLOC_STATIC);
_bkgd_red=allocate(1, "i16", ALLOC_STATIC);
_bkgd_green=allocate(1, "i16", ALLOC_STATIC);
_bkgd_blue=allocate(1, "i16", ALLOC_STATIC);
STRING_TABLE.__str84=allocate([45,98,114,117,116,101,0] /* -brute\00 */, "i8", ALLOC_STATIC);
_brute_force=allocate(1, "i32", ALLOC_STATIC);
_brute_force_filter=allocate(1, "i32", ALLOC_STATIC);
_brute_force_filters=allocate([1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_brute_force_level=allocate(1, "i32", ALLOC_STATIC);
_brute_force_levels=allocate([1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_brute_force_strategy=allocate(1, "i32", ALLOC_STATIC);
_brute_force_strategies=allocate([1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str85=allocate([45,98,105,116,95,100,101,112,116,104,0] /* -bit_depth\00 */, "i8", ALLOC_STATIC);
_force_output_bit_depth=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str86=allocate([45,99,99,0] /* -cc\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str87=allocate([45,110,111,95,99,99,0] /* -no_cc\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str88=allocate([45,99,0] /* -c\00 */, "i8", ALLOC_STATIC);
_force_output_color_type=allocate([8], ["i32",0,0,0,0], ALLOC_STATIC);
STRING_TABLE.__str89=allocate([45,100,111,117,0] /* -dou\00 */, "i8", ALLOC_STATIC);
_double_gamma=allocate(1, "i32", ALLOC_STATIC);
_found_gAMA=allocate(1, "i32", ALLOC_STATIC);
_global_things_have_changed=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str90=allocate([45,100,0] /* -d\00 */, "i8", ALLOC_STATIC);
_pngcrush_mode=allocate(1, "i32", ALLOC_STATIC);
_directory_name=allocate(1, "i8*", ALLOC_STATIC);
STRING_TABLE.__str91=allocate([45,101,120,105,116,0] /* -exit\00 */, "i8", ALLOC_STATIC);
_pngcrush_must_exit=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str92=allocate([45,101,0] /* -e\00 */, "i8", ALLOC_STATIC);
_extension=allocate(1, "i8*", ALLOC_STATIC);
STRING_TABLE.__str93=allocate([45,102,111,114,99,101,0] /* -force\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str94=allocate([45,102,105,120,0] /* -fix\00 */, "i8", ALLOC_STATIC);
_fix=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str95=allocate([45,102,0] /* -f\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str96=allocate([45,108,111,99,111,0] /* -loco\00 */, "i8", ALLOC_STATIC);
_do_loco=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str97=allocate([45,108,0] /* -l\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str98=allocate([45,103,0] /* -g\00 */, "i8", ALLOC_STATIC);
_intent=allocate([-1], ["i32",0,0,0,0], ALLOC_STATIC);
_specified_gamma=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str99=allocate([45,104,0] /* -h\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str100=allocate([45,105,99,99,112,0] /* -iccp\00 */, "i8", ALLOC_STATIC);
_iccp_text=allocate(1, "i8*", ALLOC_STATIC);
_iccp_name=allocate(80, "i8", ALLOC_STATIC);
_iccp_file=allocate(1, "i8*", ALLOC_STATIC);
STRING_TABLE.__str101=allocate([114,98,0] /* rb\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str102=allocate([67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,102,105,108,101,58,32,37,115,10,0] /* Could not find file: */, "i8", ALLOC_STATIC);
_buffer=allocate(256, "i8", ALLOC_STATIC);
STRING_TABLE.__str103=allocate([45,107,101,101,112,0] /* -keep\00 */, "i8", ALLOC_STATIC);
_found_any_chunk=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str104=allocate([45,109,97,120,0] /* -max\00 */, "i8", ALLOC_STATIC);
_max_idat_size=allocate([524288], ["i32",0,0,0,0], ALLOC_STATIC);
STRING_TABLE.__str105=allocate([45,109,110,103,0] /* -mng\00 */, "i8", ALLOC_STATIC);
_mngname=allocate(1, "i8*", ALLOC_STATIC);
_new_mng=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str106=allocate([45,109,0] /* -m\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str107=allocate([10,32,32,73,103,110,111,114,105,110,103,32,105,110,118,97,108,105,100,32,109,101,116,104,111,100,58,32,37,100,10,0] /* \0A  Ignoring invali */, "i8", ALLOC_STATIC);
STRING_TABLE.__str108=allocate([45,110,111,102,105,108,101,99,104,101,99,107,0] /* -nofilecheck\00 */, "i8", ALLOC_STATIC);
_nofilecheck=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str109=allocate([45,110,111,108,105,109,105,116,115,0] /* -nolimits\00 */, "i8", ALLOC_STATIC);
_no_limits=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str110=allocate([45,110,111,115,97,118,101,0] /* -nosave\00 */, "i8", ALLOC_STATIC);
_nosave=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str111=allocate([45,111,108,100,116,105,109,101,115,116,97,109,112,0] /* -oldtimestamp\00 */, "i8", ALLOC_STATIC);
_new_time_stamp=allocate([1], ["i32",0,0,0,0], ALLOC_STATIC);
STRING_TABLE.__str112=allocate([45,111,119,0] /* -ow\00 */, "i8", ALLOC_STATIC);
_overwrite=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str113=allocate([45,112,114,101,109,117,108,116,105,112,108,121,0] /* -premultiply\00 */, "i8", ALLOC_STATIC);
_premultiply=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str114=allocate([45,112,108,116,101,95,108,101,110,0] /* -plte_len\00 */, "i8", ALLOC_STATIC);
_plte_len=allocate([-1], ["i32",0,0,0,0], ALLOC_STATIC);
STRING_TABLE.__str115=allocate([45,112,112,108,116,0] /* -pplt\00 */, "i8", ALLOC_STATIC);
_do_pplt=allocate(1, "i32", ALLOC_STATIC);
_pplt_string=allocate(1024, "i8", ALLOC_STATIC);
STRING_TABLE.__str116=allocate([45,112,0] /* -p\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str117=allocate([45,113,0] /* -q\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str118=allocate([45,114,101,100,117,99,101,0] /* -reduce\00 */, "i8", ALLOC_STATIC);
_reduction_ok=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str119=allocate([45,114,101,112,108,97,99,101,95,103,97,109,109,97,0] /* -replace_gamma\00 */, "i8", ALLOC_STATIC);
_force_specified_gamma=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str120=allocate([45,114,101,115,0] /* -res\00 */, "i8", ALLOC_STATIC);
_resolution=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str121=allocate([45,114,0] /* -r\00 */, "i8", ALLOC_STATIC);
_image_is_immutable=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str122=allocate([45,115,97,118,101,0] /* -save\00 */, "i8", ALLOC_STATIC);
_all_chunks_are_safe=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str123=allocate([45,115,114,103,98,0] /* -srgb\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str124=allocate([45,115,82,71,66,0] /* -sRGB\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str125=allocate([48,0] /* 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str126=allocate([49,0] /* 1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str127=allocate([50,0] /* 2\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str128=allocate([51,0] /* 3\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str129=allocate([45,115,116,101,114,0] /* -ster\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str130=allocate([45,115,84,69,82,0] /* -sTER\00 */, "i8", ALLOC_STATIC);
_ster_mode=allocate([-1], ["i32",0,0,0,0], ALLOC_STATIC);
STRING_TABLE.__str131=allocate([45,115,0] /* -s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str132=allocate([45,116,101,120,116,0] /* -text\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str133=allocate([45,116,69,88,116,0] /* -tEXt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str134=allocate([45,105,116,120,116,0] /* -itxt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str135=allocate([45,105,84,88,116,0] /* -iTXt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str136=allocate([45,122,105,116,120,116,0] /* -zitxt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str137=allocate([45,122,105,84,88,116,0] /* -ziTXt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str138=allocate([45,122,116,120,116,0] /* -ztxt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str139=allocate([45,122,84,88,116,0] /* -zTXt\00 */, "i8", ALLOC_STATIC);
_text_inputs=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str140=allocate([45,122,105,0] /* -zi\00 */, "i8", ALLOC_STATIC);
_text_compression=allocate(40, "i32", ALLOC_STATIC);
STRING_TABLE.__str141=allocate([45,122,0] /* -z\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str142=allocate([45,116,0] /* -t\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str143=allocate([98,0] /* b\00 */, "i8", ALLOC_STATIC);
_text_where=allocate(40, "i32", ALLOC_STATIC);
STRING_TABLE.__str144=allocate([97,0] /* a\00 */, "i8", ALLOC_STATIC);
_text_keyword=allocate(800, "i8", ALLOC_STATIC);
_text_lang=allocate(800, "i8", ALLOC_STATIC);
_text_lang_key=allocate(800, "i8", ALLOC_STATIC);
_text_text=allocate(20480, "i8", ALLOC_STATIC);
STRING_TABLE.__str145=allocate([116,111,111,32,109,97,110,121,32,116,101,120,116,47,122,84,88,116,32,105,110,112,117,116,115,59,32,111,110,108,121,32,49,48,32,97,108,108,111,119,101,100,10,0] /* too many text/zTXt i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str146=allocate([107,101,121,119,111,114,100,32,101,120,99,101,101,100,115,32,55,57,32,99,104,97,114,97,99,116,101,114,115,32,111,114,32,116,101,120,116,32,101,120,99,101,101,100,115,32,50,48,52,55,32,99,104,97,114,97,99,116,101,114,115,10,0] /* keyword exceeds 79 c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str147=allocate([45,105,0] /* -i\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str148=allocate([45,116,105,109,101,95,115,116,97,109,112,0] /* -time_stamp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str149=allocate([45,110,101,119,116,105,109,101,115,116,97,109,112,0] /* -newtimestamp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str150=allocate([45,116,114,110,115,95,97,0] /* -trns_a\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str151=allocate([45,116,82,78,83,95,97,0] /* -tRNS_a\00 */, "i8", ALLOC_STATIC);
_num_trans_in=allocate(1, "i16", ALLOC_STATIC);
_trns_index=allocate(1, "i16", ALLOC_STATIC);
_have_trns=allocate(1, "i32", ALLOC_STATIC);
_ia=allocate(1, "i32", ALLOC_STATIC);
_trans_in=allocate(256, "i8", ALLOC_STATIC);
STRING_TABLE.__str152=allocate([45,116,114,110,115,0] /* -trns\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str153=allocate([45,116,82,78,83,0] /* -tRNS\00 */, "i8", ALLOC_STATIC);
_trns_red=allocate(1, "i16", ALLOC_STATIC);
_trns_green=allocate(1, "i16", ALLOC_STATIC);
_trns_blue=allocate(1, "i16", ALLOC_STATIC);
_trns_gray=allocate(1, "i16", ALLOC_STATIC);
STRING_TABLE.__str154=allocate([45,118,101,114,115,105,111,110,0] /* -version\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str155=allocate([32,112,110,103,99,114,117,115,104,32,0] /*  pngcrush \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str156=allocate([49,46,55,46,50,55,0] /* 1.7.27\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str157=allocate([44,32,117,115,101,115,32,108,105,98,112,110,103,32,0] /* , uses libpng \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str158=allocate([32,97,110,100,32,122,108,105,98,32,0] /*  and zlib \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str159=allocate([49,46,50,46,54,0] /* 1.2.6\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str160=allocate([10,32,67,104,101,99,107,32,104,116,116,112,58,47,47,112,109,116,46,115,102,46,110,101,116,47,10,0] /* \0A Check http://pmt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str161=allocate([32,102,111,114,32,116,104,101,32,109,111,115,116,32,114,101,99,101,110,116,32,118,101,114,115,105,111,110,46,10,0] /*  for the most recent */, "i8", ALLOC_STATIC);
STRING_TABLE.__str162=allocate([45,118,0] /* -v\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str163=allocate([45,119,0] /* -w\00 */, "i8", ALLOC_STATIC);
_default_compression_window=allocate([15], ["i32",0,0,0,0], ALLOC_STATIC);
_force_compression_window=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str164=allocate([45,122,109,0] /* -zm\00 */, "i8", ALLOC_STATIC);
_compression_mem_level=allocate([9], ["i32",0,0,0,0], ALLOC_STATIC);
STRING_TABLE.__str165=allocate([73,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,32,40,37,100,41,59,32,117,115,105,110,103,32,119,105,110,100,111,119,32,115,105,122,101,61,52,10,0] /* Invalid window size  */, "i8", ALLOC_STATIC);
_inname=allocate(1, "i8*", ALLOC_STATIC);
_outname=allocate(1, "i8*", ALLOC_STATIC);
_trns_array=allocate(256, "i8", ALLOC_STATIC);
_png_row_filters=allocate(1, "i8*", ALLOC_STATIC);
_image_specified_gamma=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str166=allocate([99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,100,105,114,101,99,116,111,114,121,32,37,115,10,0] /* could not create dir */, "i8", ALLOC_STATIC);
STRING_TABLE.__str167=allocate([100,105,114,101,99,116,111,114,121,32,37,115,32,105,115,32,116,111,111,32,108,111,110,103,32,102,111,114,32,98,117,102,102,101,114,10,0] /* directory %s is too  */, "i8", ALLOC_STATIC);
_out_string=allocate(256, "i8", ALLOC_STATIC);
STRING_TABLE.__str168=allocate([47,0] /* /\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str169=allocate([92,0] /* \5C\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str170=allocate([102,105,108,101,110,97,109,101,32,37,115,32,105,115,32,116,111,111,32,108,111,110,103,32,102,111,114,32,98,117,102,102,101,114,10,0] /* filename %s is too l */, "i8", ALLOC_STATIC);
_in_string=allocate(256, "i8", ALLOC_STATIC);
_op=allocate(1, "i8*", ALLOC_STATIC);
_ip=allocate(1, "i8*", ALLOC_STATIC);
STRING_TABLE.__str171=allocate([102,117,108,108,32,112,97,116,104,32,105,115,32,116,111,111,32,108,111,110,103,32,102,111,114,32,98,117,102,102,101,114,10,0] /* full path is too lon */, "i8", ALLOC_STATIC);
STRING_TABLE.__str172=allocate([73,103,110,111,114,105,110,103,32,34,45,111,119,34,59,32,99,97,110,110,111,116,32,117,115,101,32,105,116,32,119,105,116,104,32,34,45,100,34,32,111,114,32,34,45,101,34,0] /* Ignoring \22-ow\22;  */, "i8", ALLOC_STATIC);
_dot=allocate(1, "i8*", ALLOC_STATIC);
_in_extension=allocate(256, "i8", ALLOC_STATIC);
_read_ptr=allocate(1, "%struct.png_struct_def*", ALLOC_STATIC);
STRING_TABLE.__str173=allocate([80,114,101,109,117,108,116,105,112,108,105,101,100,32,97,108,112,104,97,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* Premultiplied alpha  */, "i8", ALLOC_STATIC);
_save_apng_chunks=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str174=allocate([79,112,101,110,105,110,103,32,102,105,108,101,32,37,115,32,102,111,114,32,108,101,110,103,116,104,32,109,101,97,115,117,114,101,109,101,110,116,10,0] /* Opening file %s for  */, "i8", ALLOC_STATIC);
_fpin=allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
_already_crushed=allocate(1, "i32", ALLOC_STATIC);
_mng_ptr=allocate(1, "%struct.png_struct_def*", ALLOC_STATIC);
STRING_TABLE.__str175=allocate([112,110,103,99,114,117,115,104,32,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,109,110,103,95,112,116,114,0] /* pngcrush could not c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str176=allocate([119,98,0] /* wb\00 */, "i8", ALLOC_STATIC);
_mng_out=allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
STRING_TABLE.__str177=allocate([67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,111,117,116,112,117,116,32,102,105,108,101,32,37,115,10,0] /* Could not open outpu */, "i8", ALLOC_STATIC);
_idat_length=allocate(804, "i32", ALLOC_STATIC);
STRING_TABLE.__str178=allocate([32,32,32,82,101,99,111,109,112,114,101,115,115,105,110,103,32,37,115,10,0] /*    Recompressing %s\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str179=allocate([32,32,32,84,111,116,97,108,32,108,101,110,103,116,104,32,111,102,32,100,97,116,97,32,102,111,117,110,100,32,105,110,32,73,68,65,84,32,99,104,117,110,107,115,32,32,32,32,61,32,37,56,108,117,10,0] /*    Total length of d */, "i8", ALLOC_STATIC);
STRING_TABLE.__str180=allocate([32,32,32,70,105,108,101,32,37,115,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,99,114,117,115,104,101,100,46,10,0] /*    File %s has alrea */, "i8", ALLOC_STATIC);
STRING_TABLE.__str181=allocate([32,32,32,73,109,97,103,101,32,37,115,32,104,97,115,32,97,32,100,83,73,71,32,99,104,117,110,107,32,97,110,100,32,105,115,32,105,109,109,117,116,97,98,108,101,46,10,0] /*    Image %s has a dS */, "i8", ALLOC_STATIC);
STRING_TABLE.__str182=allocate([32,32,32,99,111,108,111,114,32,99,111,117,110,116,105,110,103,32,40,45,99,99,32,111,112,116,105,111,110,41,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10,0] /*    color counting (- */, "i8", ALLOC_STATIC);
STRING_TABLE.__str183=allocate([10,32,32,73,103,110,111,114,105,110,103,32,105,110,118,97,108,105,100,32,98,105,116,95,100,101,112,116,104,58,32,37,100,10,0] /* \0A  Ignoring invali */, "i8", ALLOC_STATIC);
STRING_TABLE.__str184=allocate([10,32,32,73,103,110,111,114,105,110,103,32,105,110,118,97,108,105,100,32,99,111,108,111,114,95,116,121,112,101,58,32,37,100,10,0] /* \0A  Ignoring invali */, "i8", ALLOC_STATIC);
_output_color_type=allocate(1, "i32", ALLOC_STATIC);
_output_bit_depth=allocate(1, "i32", ALLOC_STATIC);
_best_of_three=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str185=allocate([10,10,69,78,84,69,82,73,78,71,32,77,65,73,78,32,76,79,79,80,32,79,86,69,82,32,37,100,32,77,69,84,72,79,68,83,10,0] /* \0A\0AENTERING MAIN  */, "i8", ALLOC_STATIC);
_trial=allocate(1, "i32", ALLOC_STATIC);
_best=allocate(1, "i32", ALLOC_STATIC);
_final_method=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str186=allocate([112,114,101,112,97,114,101,32,116,111,32,99,111,112,121,32,105,110,112,117,116,32,116,111,32,111,117,116,112,117,116,10,0] /* prepare to copy inpu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str187=allocate([67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,105,110,112,117,116,32,102,105,108,101,32,37,115,10,0] /* Could not find input */, "i8", ALLOC_STATIC);
_fpout=allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
STRING_TABLE.__str188=allocate([99,111,112,121,105,110,103,32,105,110,112,117,116,32,116,111,32,111,117,116,112,117,116,46,46,46,32,116,99,61,37,100,32,46,46,46,0] /* copying input to out */, "i8", ALLOC_STATIC);
STRING_TABLE.__str189=allocate([99,111,112,121,32,101,114,114,111,114,46,10,0] /* copy error.\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str190=allocate([99,111,112,121,32,99,111,109,112,108,101,116,101,46,10,0] /* copy complete.\0A\00 */, "i8", ALLOC_STATIC);
_filter_type=allocate(1, "i32", ALLOC_STATIC);
_zlib_level=allocate(1, "i32", ALLOC_STATIC);
_z_strategy=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str191=allocate([115,107,105,112,112,105,110,103,32,34,108,97,116,101,34,32,116,114,105,97,108,32,37,100,10,0] /* skipping \22late\22  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str192=allocate([115,107,105,112,112,105,110,103,32,34,101,97,114,108,121,34,32,116,114,105,97,108,32,37,100,10,0] /* skipping \22early\22 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str193=allocate([10,10,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,66,101,103,105,110,32,116,114,105,97,108,32,37,100,44,32,102,105,108,116,101,114,32,37,100,44,32,115,116,114,97,116,101,103,121,32,37,100,44,32,108,101,118,101,108,32,37,100,10,0] /* \0A\0A-------------- */, "i8", ALLOC_STATIC);
STRING_TABLE.__str194=allocate([112,114,101,112,97,114,101,32,116,111,32,111,112,101,110,32,102,105,108,101,115,46,10,0] /* prepare to open file */, "i8", ALLOC_STATIC);
STRING_TABLE.__str195=allocate([10,32,32,32,67,97,110,110,111,116,32,111,118,101,114,119,114,105,116,101,32,105,110,112,117,116,32,102,105,108,101,32,37,115,10,0] /* \0A   Cannot overwri */, "i8", ALLOC_STATIC);
STRING_TABLE.__str196=allocate([32,32,32,115,116,95,105,110,111,61,37,100,44,32,115,116,95,115,105,122,101,61,37,100,10,10,0] /*    st_ino=%d, st_siz */, "i8", ALLOC_STATIC);
STRING_TABLE.__str197=allocate([102,105,108,101,115,32,97,114,101,32,111,112,101,110,101,100,46,10,0] /* files are opened.\0A */, "i8", ALLOC_STATIC);
_the_exception_context=allocate(12, ["*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str198=allocate([65,108,108,111,99,97,116,105,110,103,32,114,101,97,100,32,97,110,100,32,119,114,105,116,101,32,115,116,114,117,99,116,117,114,101,115,10,0] /* Allocating read and  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str199=allocate([112,110,103,99,114,117,115,104,32,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,114,101,97,100,95,112,116,114,0] /* pngcrush could not c */, "i8", ALLOC_STATIC);
_write_ptr=allocate(1, "%struct.png_struct_def*", ALLOC_STATIC);
STRING_TABLE.__str200=allocate([112,110,103,99,114,117,115,104,32,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,119,114,105,116,101,95,112,116,114,0] /* pngcrush could not c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str201=allocate([65,108,108,111,99,97,116,105,110,103,32,114,101,97,100,95,105,110,102,111,44,32,119,114,105,116,101,95,105,110,102,111,44,32,101,110,100,95,105,110,102,111,32,115,116,114,117,99,116,117,114,101,115,10,0] /* Allocating read_info */, "i8", ALLOC_STATIC);
_read_info_ptr=allocate(1, "%struct.png_info_def*", ALLOC_STATIC);
STRING_TABLE.__str202=allocate([112,110,103,99,114,117,115,104,32,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,114,101,97,100,95,105,110,102,111,95,112,116,114,0] /* pngcrush could not c */, "i8", ALLOC_STATIC);
_end_info_ptr=allocate(1, "%struct.png_info_def*", ALLOC_STATIC);
STRING_TABLE.__str203=allocate([112,110,103,99,114,117,115,104,32,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,101,110,100,95,105,110,102,111,95,112,116,114,0] /* pngcrush could not c */, "i8", ALLOC_STATIC);
_write_info_ptr=allocate(1, "%struct.png_info_def*", ALLOC_STATIC);
STRING_TABLE.__str204=allocate([112,110,103,99,114,117,115,104,32,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,119,114,105,116,101,95,105,110,102,111,95,112,116,114,0] /* pngcrush could not c */, "i8", ALLOC_STATIC);
_write_end_info_ptr=allocate(1, "%struct.png_info_def*", ALLOC_STATIC);
STRING_TABLE.__str205=allocate([112,110,103,99,114,117,115,104,32,99,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,119,114,105,116,101,95,101,110,100,95,105,110,102,111,95,112,116,114,0] /* pngcrush could not c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str206=allocate([115,116,114,117,99,116,117,114,101,115,32,99,114,101,97,116,101,100,46,10,0] /* structures created.\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str207=allocate([73,110,105,116,105,97,108,105,122,105,110,103,32,105,110,112,117,116,32,97,110,100,32,111,117,116,112,117,116,32,115,116,114,101,97,109,115,10,0] /* Initializing input a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str208=allocate([105,111,32,104,97,115,32,98,101,101,110,32,105,110,105,116,105,97,108,105,122,101,100,46,10,0] /* io has been initiali */, "i8", ALLOC_STATIC);
STRING_TABLE.__str209=allocate([97,99,84,76,0] /* acTL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str210=allocate([102,99,84,76,0] /* fcTL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str211=allocate([102,100,65,84,0] /* fdAT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str212=allocate([97,108,108,98,0] /* allb\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str213=allocate([82,101,97,100,105,110,103,32,105,110,102,111,32,115,116,114,117,99,116,10,0] /* Reading info struct\ */, "i8", ALLOC_STATIC);
STRING_TABLE._main_mng_signature=allocate([138,77,78,71,13,10,26,10] /* \8AMNG\0D\0A\1A\0A */, "i8", ALLOC_STATIC);
STRING_TABLE._main_png_signature=allocate([137,80,78,71,13,10,26,10] /* \89PNG\0D\0A\1A\0A */, "i8", ALLOC_STATIC);
_input_format=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str214=allocate([78,111,116,32,97,32,80,78,71,32,102,105,108,101,33,0] /* Not a PNG file!\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str215=allocate([80,78,71,32,102,105,108,101,32,99,111,114,114,117,112,116,101,100,32,98,121,32,65,83,67,73,73,32,99,111,110,118,101,114,115,105,111,110,0] /* PNG file corrupted b */, "i8", ALLOC_STATIC);
_found_CgBI=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str216=allocate([84,114,97,110,115,102,101,114,114,105,110,103,32,105,110,102,111,32,115,116,114,117,99,116,10,0] /* Transferring info st */, "i8", ALLOC_STATIC);
_width=allocate(1, "i32", ALLOC_STATIC);
_height=allocate(1, "i32", ALLOC_STATIC);
_input_color_type=allocate(1, "i32", ALLOC_STATIC);
_input_bit_depth=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str217=allocate([32,32,32,73,72,68,82,32,99,104,117,110,107,32,100,97,116,97,58,10,0] /*    IHDR chunk data:\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str218=allocate([32,32,32,32,32,32,87,105,100,116,104,61,37,108,117,44,32,104,101,105,103,104,116,61,37,108,117,10,0] /*       Width=%lu, hei */, "i8", ALLOC_STATIC);
STRING_TABLE.__str219=allocate([32,32,32,32,32,32,66,105,116,32,100,101,112,116,104,32,61,37,100,10,0] /*       Bit depth =%d\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str220=allocate([32,32,32,32,32,32,67,111,108,111,114,32,116,121,112,101,61,37,100,10,0] /*       Color type=%d\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str221=allocate([32,32,32,32,32,32,79,117,116,112,117,116,32,99,111,108,111,114,32,116,121,112,101,61,37,100,10,0] /*       Output color t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str222=allocate([32,32,32,32,32,32,73,110,116,101,114,108,97,99,101,32,61,37,100,10,0] /*       Interlace =%d\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str223=allocate([32,32,32,82,101,100,117,99,105,110,103,32,116,114,117,101,99,111,108,111,114,32,105,109,97,103,101,32,116,111,32,103,114,97,121,115,99,97,108,101,46,10,0] /*    Reducing truecolo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str224=allocate([32,32,67,97,110,110,111,116,32,99,104,97,110,103,101,32,116,111,32,105,110,100,101,120,101,100,32,99,111,108,111,114,32,40,99,111,108,111,114,95,116,121,112,101,32,51,41,10,0] /*   Cannot change to i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str225=allocate([32,32,32,83,116,114,105,112,112,105,110,103,32,101,120,105,115,116,105,110,103,32,97,108,112,104,97,32,99,104,97,110,110,101,108,46,10,0] /*    Stripping existin */, "i8", ALLOC_STATIC);
STRING_TABLE.__str226=allocate([32,32,32,65,100,100,105,110,103,32,97,110,32,111,112,97,113,117,101,32,97,108,112,104,97,32,99,104,97,110,110,101,108,46,10,0] /*    Adding an opaque  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str227=allocate([32,32,32,69,120,112,97,110,100,105,110,103,32,105,110,100,101,120,101,100,32,99,111,108,111,114,32,102,105,108,101,46,10,0] /*    Expanding indexed */, "i8", ALLOC_STATIC);
STRING_TABLE.__str228=allocate([32,32,32,112,110,103,99,114,117,115,104,32,119,105,108,108,32,111,110,108,121,32,115,97,118,101,32,65,80,78,71,32,99,104,117,110,107,115,32,105,110,32,97,110,10,0] /*    pngcrush will onl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str229=allocate([32,32,32,111,117,116,112,117,116,32,102,105,108,101,32,119,105,116,104,32,116,104,101,32,34,46,97,112,110,103,34,32,101,120,116,101,110,115,105,111,110,10,0] /*    output file with  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str230=allocate([32,32,32,67,97,110,110,111,116,32,115,97,118,101,32,65,80,78,71,32,99,104,117,110,107,115,32,119,105,116,104,32,97,32,99,111,108,111,114,95,116,121,112,101,10,0] /*    Cannot save APNG  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str231=allocate([32,32,32,100,105,102,102,101,114,101,110,116,32,102,114,111,109,32,116,104,97,116,32,111,102,32,116,104,101,32,109,97,105,110,32,105,109,97,103,101,46,10,0] /*    different from th */, "i8", ALLOC_STATIC);
STRING_TABLE.__str232=allocate([32,32,32,67,97,110,110,111,116,32,115,97,118,101,32,65,80,78,71,32,99,104,117,110,107,115,32,119,105,116,104,32,97,32,98,105,116,95,100,101,112,116,104,10,0] /*    Cannot save APNG  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str233=allocate([32,32,32,83,101,116,116,105,110,103,32,73,72,68,82,10,0] /*    Setting IHDR\0A\0 */, "i8", ALLOC_STATIC);
_output_format=allocate(1, "i32", ALLOC_STATIC);
_found_cHRM=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str234=allocate([32,32,32,73,110,115,101,114,116,105,110,103,32,103,65,77,65,32,99,104,117,110,107,32,119,105,116,104,32,103,97,109,109,97,61,40,37,100,47,49,48,48,48,48,48,41,10,0] /*    Inserting gAMA ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str235=allocate([32,32,32,103,97,109,109,97,61,40,37,100,47,49,48,48,48,48,48,41,10,0] /*    gamma=(%d/100000) */, "i8", ALLOC_STATIC);
STRING_TABLE.__str236=allocate([32,32,32,73,110,115,101,114,116,105,110,103,32,115,82,71,66,32,99,104,117,110,107,32,119,105,116,104,32,105,110,116,101,110,116,61,37,100,10,0] /*    Inserting sRGB ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str237=allocate([32,32,32,73,103,110,111,114,105,110,103,32,115,82,71,66,32,114,101,113,117,101,115,116,59,32,103,97,109,109,97,61,40,37,108,117,47,49,48,48,48,48,48,41,32,105,115,32,110,111,116,32,97,112,112,114,111,120,46,32,48,46,52,53,53,10,0] /*    Ignoring sRGB req */, "i8", ALLOC_STATIC);
STRING_TABLE.__str238=allocate([71,111,116,32,105,67,67,80,32,99,104,117,110,107,44,32,112,114,111,102,108,101,110,61,37,108,117,10,0] /* Got iCCP chunk, prof */, "i8", ALLOC_STATIC);
STRING_TABLE.__str239=allocate([87,105,108,108,32,110,111,116,32,114,101,112,108,97,99,101,32,101,120,105,115,116,105,110,103,32,105,67,67,80,32,99,104,117,110,107,46,10,0] /* Will not replace exi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str240=allocate([87,114,111,116,101,32,105,67,67,80,32,99,104,117,110,107,44,32,112,114,111,102,108,101,110,61,37,100,10,0] /* Wrote iCCP chunk, pr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str241=allocate([32,32,32,68,101,108,101,116,105,110,103,32,117,115,101,108,101,115,115,32,111,70,70,115,32,48,32,48,32,99,104,117,110,107,10,0] /*    Deleting useless  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str242=allocate([32,32,32,68,101,108,101,116,105,110,103,32,117,115,101,108,101,115,115,32,112,72,89,115,32,48,32,48,32,99,104,117,110,107,10,0] /*    Deleting useless  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str243=allocate([32,32,32,65,100,100,101,100,32,112,72,89,115,32,37,108,117,32,37,108,117,32,49,32,99,104,117,110,107,10,0] /*    Added pHYs %lu %l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str244=allocate([32,32,70,111,117,110,100,32,116,82,78,83,32,99,104,117,110,107,32,105,110,32,105,110,112,117,116,32,102,105,108,101,46,10,0] /*   Found tRNS chunk i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str245=allocate([32,32,87,105,108,108,32,110,111,116,32,111,118,101,114,119,114,105,116,101,32,101,120,105,115,116,105,110,103,32,116,82,78,83,32,99,104,117,110,107,46,10,0] /*   Will not overwrite */, "i8", ALLOC_STATIC);
STRING_TABLE.__str246=allocate([32,32,32,68,101,108,101,116,105,110,103,32,97,108,108,45,111,112,97,113,117,101,32,116,82,78,83,32,99,104,117,110,107,46,10,0] /*    Deleting all-opaq */, "i8", ALLOC_STATIC);
STRING_TABLE.__str247=allocate([32,32,32,84,114,117,110,99,97,116,105,110,103,32,116,114,97,105,108,105,110,103,32,111,112,97,113,117,101,32,101,110,116,114,105,101,115,32,102,114,111,109,32,116,82,78,83,32,99,104,117,110,107,46,10,0] /*    Truncating traili */, "i8", ALLOC_STATIC);
STRING_TABLE.__str248=allocate([32,32,32,112,110,103,95,115,101,116,95,116,82,78,83,44,32,110,117,109,95,116,114,97,110,115,61,37,100,10,0] /*    png_set_tRNS, num */, "i8", ALLOC_STATIC);
STRING_TABLE.__str249=allocate([72,97,118,101,95,116,82,78,83,44,32,110,117,109,95,116,114,97,110,115,61,37,100,10,0] /* Have_tRNS, num_trans */, "i8", ALLOC_STATIC);
STRING_TABLE.__str250=allocate([32,32,65,100,100,105,110,103,32,97,32,116,82,78,83,32,99,104,117,110,107,10,0] /*   Adding a tRNS chun */, "i8", ALLOC_STATIC);
_num_palette=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str251=allocate([32,32,32,84,114,97,110,115,112,97,114,101,110,99,121,58,10,0] /*    Transparency:\0A\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str252=allocate([32,32,32,32,32,32,37,52,100,32,37,52,100,10,0] /*       %4d %4d\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str253=allocate([32,32,32,32,32,32,37,100,10,0] /*       %d\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str254=allocate([32,32,32,32,32,32,37,100,32,37,100,32,37,100,10,0] /*       %d %d %d\0A\00 */, "i8", ALLOC_STATIC);
_palette=allocate(1, "%struct.png_color_struct*", ALLOC_STATIC);
STRING_TABLE.__str255=allocate([80,80,76,84,58,32,37,115,10,0] /* PPLT: %s\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str256=allocate([83,111,114,114,121,44,32,80,80,76,84,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,46,10,0] /* Sorry, PPLT is not i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str257=allocate([32,32,32,80,97,108,101,116,116,101,58,10,0] /*    Palette:\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str258=allocate([32,32,32,32,32,32,73,32,32,32,32,82,32,32,32,32,71,32,32,32,32,66,32,40,32,99,111,108,111,114,32,41,32,32,32,32,65,10,0] /*       I    R    G    */, "i8", ALLOC_STATIC);
STRING_TABLE.__str259=allocate([32,32,32,37,52,100,32,37,52,100,32,37,52,100,32,37,52,100,32,40,35,37,50,46,50,120,37,50,46,50,120,37,50,46,50,120,41,32,37,52,100,10,0] /*    %4d %4d %4d %4d ( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str260=allocate([72,97,110,100,108,105,110,103,32,37,100,32,116,69,88,116,47,122,84,88,116,32,99,104,117,110,107,115,32,98,101,102,111,114,101,32,73,68,65,84,10,0] /* Handling %d tEXt/zTX */, "i8", ALLOC_STATIC);
STRING_TABLE.__str261=allocate([37,100,32,32,37,115,0] /* %d  %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str262=allocate([58,32,37,115,10,0] /* : %s\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str263=allocate([32,40,37,115,58,32,37,115,41,58,32,10,0] /*  (%s: %s): \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str264=allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str265=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str266=allocate([84,101,120,116,32,99,104,117,110,107,32,98,101,102,111,114,101,32,73,68,65,84,44,32,99,111,109,112,114,101,115,115,105,111,110,61,37,100,10,0] /* Text chunk before ID */, "i8", ALLOC_STATIC);
STRING_TABLE.__str267=allocate([32,32,32,65,100,100,101,100,32,97,32,116,69,88,116,32,99,104,117,110,107,46,10,0] /*    Added a tEXt chun */, "i8", ALLOC_STATIC);
STRING_TABLE.__str268=allocate([32,32,32,65,100,100,101,100,32,97,32,122,84,88,116,32,99,104,117,110,107,46,10,0] /*    Added a zTXt chun */, "i8", ALLOC_STATIC);
STRING_TABLE.__str269=allocate([32,32,32,65,100,100,101,100,32,97,37,115,99,111,109,112,114,101,115,115,101,100,32,105,84,88,116,32,99,104,117,110,107,46,10,0] /*    Added a%scompress */, "i8", ALLOC_STATIC);
STRING_TABLE.__str270=allocate([110,32,117,110,0] /* n un\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str271=allocate([32,0] /*  \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str272=allocate([72,97,110,100,108,105,110,103,32,115,84,69,82,32,97,115,32,117,110,107,110,111,119,110,32,99,104,117,110,107,32,37,100,10,0] /* Handling sTER as unk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str273=allocate([70,111,117,110,100,32,37,100,32,117,110,107,110,111,119,110,32,99,104,117,110,107,115,10,0] /* Found %d unknown chu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str274=allocate([109,97,108,108,111,99,32,102,111,114,32,37,100,32,117,110,107,110,111,119,110,32,99,104,117,110,107,115,10,0] /* malloc for %d unknow */, "i8", ALLOC_STATIC);
STRING_TABLE.__str275=allocate([72,97,110,100,108,105,110,103,32,117,110,107,110,111,119,110,32,99,104,117,110,107,32,37,100,32,37,115,10,0] /* Handling unknown chu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str276=allocate([32,32,32,117,110,107,110,111,119,110,91,37,100,93,32,61,32,37,115,32,40,37,108,117,32,98,121,116,101,115,44,32,108,111,99,97,116,105,111,110,32,37,100,41,10,0] /*    unknown[%d] = %s  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str277=allocate([75,101,101,112,105,110,103,32,37,100,32,117,110,107,110,111,119,110,32,99,104,117,110,107,115,10,0] /* Keeping %d unknown c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str278=allocate([117,110,107,110,111,119,110,32,99,104,117,110,107,32,104,97,110,100,108,105,110,103,32,100,111,110,101,46,10,0] /* unknown chunk handli */, "i8", ALLOC_STATIC);
STRING_TABLE._main_png_MHDR=allocate([77,72,68,82,0] /* MHDR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._main_mng_signature279=allocate([138,77,78,71,13,10,26,10] /* \8AMNG\0D\0A\1A\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str280=allocate([32,32,87,114,105,116,105,110,103,32,97,32,77,78,71,32,102,105,108,101,32,119,105,116,104,32,97,32,46,112,110,103,32,101,120,116,101,110,115,105,111,110,0] /*   Writing a MNG file */, "i8", ALLOC_STATIC);
STRING_TABLE.__str281=allocate([67,97,110,110,111,116,32,114,101,97,100,32,88,99,111,100,101,32,67,103,66,73,32,80,78,71,46,32,69,118,101,110,32,105,102,32,119,101,32,99,111,117,108,100,44,0] /* Cannot read Xcode Cg */, "i8", ALLOC_STATIC);
STRING_TABLE.__str282=allocate([116,104,101,32,111,114,105,103,105,110,97,108,32,80,78,71,32,99,111,117,108,100,32,110,111,116,32,98,101,32,114,101,99,111,118,101,114,101,100,46,0] /* the original PNG cou */, "i8", ALLOC_STATIC);
STRING_TABLE.__str283=allocate([10,87,114,105,116,105,110,103,32,105,110,102,111,32,115,116,114,117,99,116,10,0] /* \0AWriting info stru */, "i8", ALLOC_STATIC);
STRING_TABLE.__str284=allocate([114,101,105,110,105,116,105,97,108,105,122,105,110,103,32,119,114,105,116,101,32,122,98,117,102,32,116,111,32,37,108,117,46,10,0] /* reinitializing write */, "i8", ALLOC_STATIC);
STRING_TABLE.__str285=allocate([32,32,32,67,111,109,112,114,101,115,115,105,111,110,32,119,105,110,100,111,119,32,102,111,114,32,111,117,116,112,117,116,61,32,37,100,10,0] /*    Compression windo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str286=allocate([10,87,114,111,116,101,32,105,110,102,111,32,115,116,114,117,99,116,10,0] /* \0AWrote info struct */, "i8", ALLOC_STATIC);
STRING_TABLE.__str287=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,114,111,119,32,98,117,102,102,101,114,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str288=allocate([97,108,108,111,99,97,116,101,100,32,114,111,119,98,117,102,46,10,0] /* allocated rowbuf.\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str289=allocate([10,66,101,103,105,110,32,105,110,116,101,114,108,97,99,101,32,112,97,115,115,32,37,100,10,0] /* \0ABegin interlace p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str290=allocate([69,110,100,32,105,110,116,101,114,108,97,99,101,32,112,97,115,115,32,37,100,10,10,0] /* End interlace pass % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str291=allocate([32,32,32,42,42,42,42,32,67,111,110,118,101,114,116,101,100,32,110,111,110,45,103,114,97,121,32,105,109,97,103,101,32,116,111,32,103,114,97,121,46,32,42,42,42,42,32,10,0] /*    ____ Converted no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str292=allocate([82,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,32,101,110,100,95,105,110,102,111,32,100,97,116,97,10,0] /* Reading and writing  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str293=allocate([72,97,110,100,108,105,110,103,32,37,100,32,116,69,88,116,47,122,84,88,116,47,105,84,88,116,32,99,104,117,110,107,115,32,97,102,116,101,114,32,73,68,65,84,10,0] /* Handling %d tEXt/zTX */, "i8", ALLOC_STATIC);
STRING_TABLE.__str294=allocate([84,101,120,116,32,99,104,117,110,107,32,97,102,116,101,114,32,73,68,65,84,44,32,99,111,109,112,114,101,115,115,105,111,110,61,37,100,10,0] /* Text chunk after IDA */, "i8", ALLOC_STATIC);
STRING_TABLE.__str295=allocate([32,32,32,65,100,100,101,100,32,97,110,32,117,110,99,111,109,112,114,101,115,115,101,100,32,105,84,88,116,32,99,104,117,110,107,46,10,0] /*    Added an uncompre */, "i8", ALLOC_STATIC);
STRING_TABLE.__str296=allocate([32,32,32,65,100,100,101,100,32,97,32,99,111,109,112,114,101,115,115,101,100,32,105,84,88,116,32,99,104,117,110,107,46,10,0] /*    Added a compresse */, "i8", ALLOC_STATIC);
STRING_TABLE.__str297=allocate([115,101,116,116,105,110,103,32,37,100,32,117,110,107,110,111,119,110,32,99,104,117,110,107,115,32,97,102,116,101,114,32,73,68,65,84,10,0] /* setting %d unknown c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str298=allocate([68,101,115,116,114,111,121,105,110,103,32,100,97,116,97,32,115,116,114,117,99,116,115,10,0] /* Destroying data stru */, "i8", ALLOC_STATIC);
STRING_TABLE._main_png_MEND=allocate([77,69,78,68,0] /* MEND\00 */, "i8", ALLOC_STATIC);
_msg=allocate(1, "i8*", ALLOC_STATIC);
STRING_TABLE.__str299=allocate([87,104,105,108,101,32,99,111,110,118,101,114,116,105,110,103,32,37,115,32,116,111,32,37,115,58,10,0] /* While converting %s  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str300=allocate([87,104,105,108,101,32,114,101,97,100,105,110,103,32,37,115,58,10,0] /* While reading %s:\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str301=allocate([32,32,112,110,103,99,114,117,115,104,32,99,97,117,103,104,116,32,108,105,98,112,110,103,32,101,114,114,111,114,58,10,32,32,32,37,115,10,10,0] /*   pngcrush caught li */, "i8", ALLOC_STATIC);
STRING_TABLE.__str302=allocate([114,101,116,117,114,110,105,110,103,32,97,102,116,101,114,32,99,108,101,97,110,117,112,10,0] /* returning after clea */, "i8", ALLOC_STATIC);
STRING_TABLE.__str303=allocate([79,112,101,110,105,110,103,32,102,105,108,101,32,102,111,114,32,108,101,110,103,116,104,32,109,101,97,115,117,114,101,109,101,110,116,10,0] /* Opening file for len */, "i8", ALLOC_STATIC);
STRING_TABLE.__str304=allocate([67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,111,117,116,112,117,116,32,102,105,108,101,32,37,115,10,0] /* Could not find outpu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str305=allocate([32,32,32,73,68,65,84,32,108,101,110,103,116,104,32,119,105,116,104,32,109,101,116,104,111,100,32,37,51,100,32,40,102,109,32,37,100,32,122,108,32,37,100,32,122,115,32,37,100,41,32,61,32,37,56,108,117,10,0] /*    IDAT length with  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str306=allocate([10,10,70,73,78,73,83,72,69,68,32,77,65,73,78,32,76,79,79,80,32,79,86,69,82,32,37,100,32,77,69,84,72,79,68,83,10,10,10,0] /* \0A\0AFINISHED MAIN  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str307=allocate([101,114,114,111,114,32,119,104,105,108,101,32,114,101,110,97,109,105,110,103,32,34,37,115,34,32,116,111,32,34,37,115,34,32,10,0] /* error while renaming */, "i8", ALLOC_STATIC);
STRING_TABLE.__str308=allocate([114,101,110,97,109,101,32,37,115,32,116,111,32,37,115,32,99,111,109,112,108,101,116,101,46,10,0] /* rename %s to %s comp */, "i8", ALLOC_STATIC);
STRING_TABLE.__str309=allocate([32,32,32,66,101,115,116,32,112,110,103,99,114,117,115,104,32,109,101,116,104,111,100,32,61,32,48,32,40,115,101,116,116,105,110,103,115,32,117,110,100,101,116,101,114,109,105,110,101,100,41,32,102,111,114,32,37,115,10,0] /*    Best pngcrush met */, "i8", ALLOC_STATIC);
STRING_TABLE.__str310=allocate([32,32,32,66,101,115,116,32,112,110,103,99,114,117,115,104,32,109,101,116,104,111,100,32,61,32,37,100,32,40,102,109,32,37,100,32,122,108,32,37,100,32,122,115,32,37,100,41,10,102,111,114,32,37,115,10,0] /*    Best pngcrush met */, "i8", ALLOC_STATIC);
STRING_TABLE.__str311=allocate([32,32,32,32,32,40,110,111,32,73,68,65,84,32,99,104,97,110,103,101,41,10,0] /*      (no IDAT change */, "i8", ALLOC_STATIC);
STRING_TABLE.__str312=allocate([32,32,32,32,32,40,37,52,46,50,102,37,37,32,73,68,65,84,32,114,101,100,117,99,116,105,111,110,41,10,0] /*      (%4.2f%% IDAT r */, "i8", ALLOC_STATIC);
STRING_TABLE.__str313=allocate([32,32,32,32,32,40,37,52,46,50,102,37,37,32,73,68,65,84,32,105,110,99,114,101,97,115,101,41,10,0] /*      (%4.2f%% IDAT i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str314=allocate([32,32,32,32,32,40,110,111,32,102,105,108,101,115,105,122,101,32,99,104,97,110,103,101,41,10,10,0] /*      (no filesize ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str315=allocate([32,32,32,32,32,40,37,52,46,50,102,37,37,32,102,105,108,101,115,105,122,101,32,114,101,100,117,99,116,105,111,110,41,10,10,0] /*      (%4.2f%% filesi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str316=allocate([32,32,32,32,32,40,37,52,46,50,102,37,37,32,102,105,108,101,115,105,122,101,32,105,110,99,114,101,97,115,101,41,10,10,0] /*      (%4.2f%% filesi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str317=allocate([32,32,32,78,117,109,98,101,114,32,111,102,32,111,112,101,110,32,102,105,108,101,115,61,37,100,10,0] /*    Number of open fi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str318=allocate([10,109,101,97,115,117,114,101,95,105,100,97,116,115,58,10,0] /* \0Ameasure_idats:\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str319=allocate([65,108,108,111,99,97,116,105,110,103,32,114,101,97,100,32,115,116,114,117,99,116,117,114,101,10,0] /* Allocating read stru */, "i8", ALLOC_STATIC);
STRING_TABLE.__str320=allocate([65,108,108,111,99,97,116,105,110,103,32,114,101,97,100,95,105,110,102,111,44,32,32,101,110,100,95,105,110,102,111,32,115,116,114,117,99,116,117,114,101,115,10,0] /* Allocating read_info */, "i8", ALLOC_STATIC);
_measured_idat_length=allocate(1, "i32", ALLOC_STATIC);
STRING_TABLE.__str321=allocate([109,101,97,115,117,114,101,95,105,100,97,116,115,58,32,73,68,65,84,32,108,101,110,103,116,104,61,37,108,117,10,0] /* measure_idats: IDAT  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str322=allocate([10,87,104,105,108,101,32,109,101,97,115,117,114,105,110,103,32,73,68,65,84,115,32,105,110,32,37,115,32,0] /* \0AWhile measuring I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str323=allocate([112,110,103,99,114,117,115,104,32,99,97,117,103,104,116,32,108,105,98,112,110,103,32,101,114,114,111,114,58,10,32,32,32,37,115,10,10,0] /* pngcrush caught libp */, "i8", ALLOC_STATIC);
STRING_TABLE.__str324=allocate([68,101,115,116,114,111,121,101,100,32,100,97,116,97,32,115,116,114,117,99,116,115,10,0] /* Destroyed data struc */, "i8", ALLOC_STATIC);
STRING_TABLE._png_measure_idat_png_signature=allocate([137,80,78,71,13,10,26,10] /* \89PNG\0D\0A\1A\0A */, "i8", ALLOC_STATIC);
STRING_TABLE._png_measure_idat_mng_signature=allocate([138,77,78,71,13,10,26,10] /* \8AMNG\0D\0A\1A\0A */, "i8", ALLOC_STATIC);
STRING_TABLE._png_measure_idat_png_MHDR=allocate([77,72,68,82,0] /* MHDR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str325=allocate([82,101,97,100,105,110,103,32,37,99,37,99,37,99,37,99,32,99,104,117,110,107,46,10,0] /* Reading %c%c%c%c chu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str326=allocate([32,32,119,105,100,116,104,61,37,108,117,10,0] /*   width=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str327=allocate([32,32,104,101,105,103,104,116,61,37,108,117,10,0] /*   height=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str328=allocate([32,32,116,105,99,107,115,112,115,61,37,108,117,10,0] /*   ticksps=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str329=allocate([32,32,110,111,109,108,97,121,99,61,37,108,117,10,0] /*   nomlayc=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str330=allocate([32,32,110,111,109,102,114,97,109,61,37,108,117,10,0] /*   nomfram=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str331=allocate([32,32,110,111,109,112,108,97,121,61,37,108,117,10,0] /*   nomplay=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str332=allocate([32,32,112,114,111,102,105,108,101,61,37,108,117,10,0] /*   profile=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str333=allocate([78,111,116,32,97,32,80,78,71,32,102,105,108,101,46,46,0] /* Not a PNG file..\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_measure_idat_png_DHDR=allocate([68,72,68,82,0] /* DHDR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_measure_idat_png_DEFI=allocate([68,69,70,73,0] /* DEFI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_measure_idat_png_FRAM=allocate([70,82,65,77,0] /* FRAM\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_measure_idat_png_nEED=allocate([110,69,69,68,0] /* nEED\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str334=allocate([32,32,115,107,105,112,112,105,110,103,32,77,78,71,32,37,99,37,99,37,99,37,99,32,99,104,117,110,107,44,32,37,108,117,32,98,121,116,101,115,10,0] /*   skipping MNG %c%c% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str335=allocate([32,32,114,101,97,100,105,110,103,32,77,78,71,32,37,99,37,99,37,99,37,99,32,99,104,117,110,107,44,32,37,108,117,32,98,121,116,101,115,10,0] /*   reading MNG %c%c%c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str336=allocate([32,32,112,110,103,95,109,97,108,108,111,99,32,37,108,117,32,98,121,116,101,115,46,10,0] /*   png_malloc %lu byt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str337=allocate([32,32,111,98,106,105,100,61,37,108,117,10,0] /*   objid=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str338=allocate([32,32,105,116,121,112,101,61,37,108,117,10,0] /*   itype=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str339=allocate([32,32,100,116,121,112,101,61,37,108,117,10,0] /*   dtype=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str340=allocate([32,32,120,108,111,99,61,37,108,117,10,0] /*   xloc=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str341=allocate([32,32,121,108,111,99,61,37,108,117,10,0] /*   yloc=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str342=allocate([32,32,100,111,95,110,111,116,95,115,104,111,119,61,37,108,117,10,0] /*   do_not_show=%lu\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str343=allocate([32,32,99,111,110,99,114,101,116,101,61,37,108,117,10,0] /*   concrete=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str344=allocate([32,32,108,95,99,98,61,37,108,117,10,0] /*   l_cb=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str345=allocate([32,32,114,95,99,98,61,37,108,117,10,0] /*   r_cb=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str346=allocate([32,32,109,111,100,101,61,37,108,117,10,0] /*   mode=%lu\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str347=allocate([32,32,110,97,109,101,32,61,32,0] /*   name = \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str348=allocate([37,99,0] /* %c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str349=allocate([82,101,97,100,105,110,103,32,37,115,32,99,104,117,110,107,44,32,108,101,110,103,116,104,32,61,32,37,108,117,46,10,0] /* Reading %s chunk, le */, "i8", ALLOC_STATIC);
STRING_TABLE.__str350=allocate([32,84,104,105,115,32,105,115,32,97,110,32,88,99,111,100,101,32,67,71,66,73,32,102,105,108,101,44,32,110,111,116,32,97,32,80,78,71,32,102,105,108,101,46,10,0] /*  This is an Xcode CG */, "i8", ALLOC_STATIC);
STRING_TABLE.__str351=allocate([32,82,101,109,111,118,105,110,103,32,116,104,101,32,67,103,66,73,32,99,104,117,110,107,46,10,0] /*  Removing the CgBI c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str352=allocate([32,84,114,121,32,34,112,110,103,99,114,117,115,104,32,45,102,105,120,32,46,46,46,34,32,116,111,32,97,116,116,101,109,112,116,32,116,111,32,114,101,97,100,32,105,116,46,10,0] /*  Try \22pngcrush -fi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str353=allocate([80,104,111,116,111,115,104,111,112,32,73,67,67,32,112,114,111,102,105,108,101,0] /* Photoshop ICC profil */, "i8", ALLOC_STATIC);
STRING_TABLE.__str354=allocate([32,32,32,82,101,112,108,97,99,105,110,103,32,98,97,100,32,80,104,111,116,111,115,104,111,112,32,73,67,67,80,32,99,104,117,110,107,32,119,105,116,104,32,97,110,32,115,82,71,66,32,99,104,117,110,107,10,0] /*    Replacing bad Pho */, "i8", ALLOC_STATIC);
STRING_TABLE._png_measure_idat_png_MEND=allocate([77,69,78,68,0] /* MEND\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str355=allocate([10,32,124,32,112,110,103,99,114,117,115,104,32,37,115,10,32,124,32,32,32,32,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,56,45,50,48,48,50,44,50,48,48,54,45,50,48,49,50,32,71,108,101,110,110,32,82,97,110,100,101,114,115,45,80,101,104,114,115,111,110,10,32,124,32,32,32,32,80,111,114,116,105,111,110,115,32,99,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,48,53,32,32,32,32,32,32,32,71,114,101,103,32,82,111,101,108,111,102,115,10,32,124,32,84,104,105,115,32,105,115,32,97,32,102,114,101,101,44,32,111,112,101,110,45,115,111,117,114,99,101,32,112,114,111,103,114,97,109,46,32,32,80,101,114,109,105,115,115,105,111,110,32,105,115,32,105,114,114,101,118,111,99,97,98,108,121,10,32,124,32,103,114,97,110,116,101,100,32,116,111,32,101,118,101,114,121,111,110,101,32,116,111,32,117,115,101,32,116,104,105,115,32,118,101,114,115,105,111,110,32,111,102,32,112,110,103,99,114,117,115,104,32,119,105,116,104,111,117,116,10,32,124,32,112,97,121,109,101,110,116,32,111,102,32,97,110,121,32,102,101,101,46,10,32,124,32,69,120,101,99,117,116,97,98,108,101,32,110,97,109,101,32,105,115,32,37,115,10,32,124,32,73,116,32,119,97,115,32,98,117,105,108,116,32,119,105,116,104,32,108,105,98,112,110,103,32,118,101,114,115,105,111,110,32,37,115,44,32,97,110,100,32,105,115,10,32,124,32,114,117,110,110,105,110,103,32,119,105,116,104,32,37,115,32,124,32,32,32,32,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,56,45,50,48,48,52,44,32,50,48,48,54,45,50,48,49,50,32,71,108,101,110,110,32,82,97,110,100,101,114,115,45,80,101,104,114,115,111,110,44,10,32,124,32,32,32,32,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,54,44,32,49,57,57,55,32,65,110,100,114,101,97,115,32,68,105,108,103,101,114,44,10,32,124,32,32,32,32,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,53,44,32,71,117,121,32,69,114,105,99,32,83,99,104,97,108,110,97,116,44,32,71,114,111,117,112,32,52,50,32,73,110,99,46,44,10,32,124,32,97,110,100,32,122,108,105,98,32,118,101,114,115,105,111,110,32,37,115,44,32,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,53,45,50,48,49,48,32,40,111,114,32,108,97,116,101,114,41,44,10,32,124,32,32,32,32,74,101,97,110,45,108,111,117,112,32,71,97,105,108,108,121,32,97,110,100,32,77,97,114,107,32,65,100,108,101,114,46,10,0] /* \0A | pngcrush %s\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str356=allocate([32,124,32,73,116,32,119,97,115,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,103,99,99,32,118,101,114,115,105,111,110,32,37,115,0] /*  | It was compiled w */, "i8", ALLOC_STATIC);
STRING_TABLE.__str357=allocate([52,46,50,46,49,32,67,111,109,112,97,116,105,98,108,101,32,67,108,97,110,103,32,51,46,48,32,40,116,97,103,115,47,82,69,76,69,65,83,69,95,51,48,47,114,99,51,41,0] /* 4.2.1 Compatible Cla */, "i8", ALLOC_STATIC);
STRING_TABLE.__str358=allocate([46,10,0] /* .\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str359=allocate([32,32,32,32,32,32,45,97,108,114,101,97,100,121,32,97,108,114,101,97,100,121,95,99,114,117,115,104,101,100,95,115,105,122,101,32,91,101,46,103,46,44,32,56,49,57,50,93,0] /*       -already alrea */, "i8", ALLOC_STATIC);
__str360=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str361=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,73,102,32,102,105,108,101,32,104,97,115,32,97,110,32,73,68,65,84,32,103,114,101,97,116,101,114,32,116,104,97,110,32,116,104,105,115,32,115,105,122,101,44,32,105,116,0] /*                If fi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str362=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,105,108,108,32,98,101,32,99,111,110,115,105,100,101,114,101,100,32,116,111,32,98,101,32,97,108,114,101,97,100,121,32,99,114,117,115,104,101,100,32,97,110,100,32,119,105,108,108,0] /*                will  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str363=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,111,116,32,98,101,32,112,114,111,99,101,115,115,101,100,44,32,117,110,108,101,115,115,32,121,111,117,32,97,114,101,32,109,97,107,105,110,103,32,111,116,104,101,114,32,99,104,97,110,103,101,115,0] /*                not b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str364=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,114,32,116,104,101,32,34,45,102,111,114,99,101,34,32,111,112,116,105,111,110,32,105,115,32,112,114,101,115,101,110,116,46,0] /*                or th */, "i8", ALLOC_STATIC);
STRING_TABLE.__str365=allocate([32,32,32,32,45,98,105,116,95,100,101,112,116,104,32,100,101,112,116,104,32,40,98,105,116,95,100,101,112,116,104,32,116,111,32,117,115,101,32,105,110,32,111,117,116,112,117,116,32,102,105,108,101,41,0] /*     -bit_depth depth */, "i8", ALLOC_STATIC);
STRING_TABLE.__str366=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,101,102,97,117,108,116,32,111,117,116,112,117,116,32,100,101,112,116,104,32,105,115,32,115,97,109,101,32,97,115,32,105,110,112,117,116,32,100,101,112,116,104,46,0] /*                Defau */, "i8", ALLOC_STATIC);
STRING_TABLE.__str367=allocate([32,32,32,32,32,32,32,32,45,98,114,117,116,101,32,40,117,115,101,32,98,114,117,116,101,45,102,111,114,99,101,58,32,116,114,121,32,49,50,54,32,100,105,102,102,101,114,101,110,116,32,109,101,116,104,111,100,115,32,91,49,49,45,49,51,54,93,41,0] /*         -brute (use  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str368=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,86,101,114,121,32,116,105,109,101,45,99,111,110,115,117,109,105,110,103,32,97,110,100,32,103,101,110,101,114,97,108,108,121,32,110,111,116,32,119,111,114,116,104,119,104,105,108,101,46,0] /*                Very  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str369=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,89,111,117,32,99,97,110,32,114,101,115,116,114,105,99,116,32,116,104,105,115,32,111,112,116,105,111,110,32,116,111,32,99,101,114,116,97,105,110,32,102,105,108,116,101,114,32,116,121,112,101,115,44,0] /*                You c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str370=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,109,112,114,101,115,115,105,111,110,32,108,101,118,101,108,115,44,32,111,114,32,115,116,114,97,116,101,103,105,101,115,32,98,121,32,102,111,108,108,111,119,105,110,103,32,105,116,0] /*                compr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str371=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,105,116,104,32,34,45,102,32,102,105,108,116,101,114,34,44,32,34,45,108,32,108,101,118,101,108,34,44,32,111,114,32,34,45,122,32,115,116,114,97,116,101,103,121,34,46,0] /*                with  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str372=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,99,32,99,111,108,111,114,95,116,121,112,101,32,111,102,32,111,117,116,112,117,116,32,102,105,108,101,32,91,48,44,32,50,44,32,52,44,32,111,114,32,54,93,0] /*             -c color */, "i8", ALLOC_STATIC);
STRING_TABLE.__str373=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,111,108,111,114,32,116,121,112,101,32,102,111,114,32,116,104,101,32,111,117,116,112,117,116,32,102,105,108,101,46,32,32,70,117,116,117,114,101,32,118,101,114,115,105,111,110,115,0] /*                Color */, "i8", ALLOC_STATIC);
STRING_TABLE.__str374=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,105,108,108,32,97,108,115,111,32,97,108,108,111,119,32,99,111,108,111,114,95,116,121,112,101,32,51,44,32,105,102,32,116,104,101,114,101,32,97,114,101,32,50,53,54,32,111,114,0] /*                will  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str375=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,101,119,101,114,32,99,111,108,111,114,115,32,112,114,101,115,101,110,116,32,105,110,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,46,32,32,67,111,108,111,114,32,116,121,112,101,115,0] /*                fewer */, "i8", ALLOC_STATIC);
STRING_TABLE.__str376=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,52,32,97,110,100,32,54,32,97,114,101,32,112,97,100,100,101,100,32,119,105,116,104,32,97,110,32,111,112,97,113,117,101,32,97,108,112,104,97,32,99,104,97,110,110,101,108,32,105,102,0] /*                4 and */, "i8", ALLOC_STATIC);
STRING_TABLE.__str377=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,108,112,104,97,32,105,110,102,111,114,109,97,116,105,111,110,46,0] /*                the i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str378=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,89,111,117,32,99,97,110,32,117,115,101,32,48,32,111,114,32,52,32,116,111,32,99,111,110,118,101,114,116,32,99,111,108,111,114,32,116,111,32,103,114,97,121,115,99,97,108,101,46,0] /*                You c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str379=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,115,101,32,48,32,111,114,32,50,32,116,111,32,100,101,108,101,116,101,32,97,110,32,117,110,119,97,110,116,101,100,32,97,108,112,104,97,32,99,104,97,110,110,101,108,46,0] /*                Use 0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str380=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,101,102,97,117,108,116,32,105,115,32,116,111,32,117,115,101,32,115,97,109,101,32,99,111,108,111,114,32,116,121,112,101,32,97,115,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,46,0] /*                Defau */, "i8", ALLOC_STATIC);
STRING_TABLE.__str381=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,100,32,100,105,114,101,99,116,111,114,121,95,110,97,109,101,47,32,40,119,104,101,114,101,32,111,117,116,112,117,116,32,102,105,108,101,115,32,119,105,108,108,32,103,111,41,0] /*             -d direc */, "i8", ALLOC_STATIC);
STRING_TABLE.__str382=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,73,102,32,97,32,100,105,114,101,99,116,111,114,121,32,110,97,109,101,32,105,115,32,103,105,118,101,110,44,32,116,104,101,110,32,116,104,101,32,111,117,116,112,117,116,0] /*                If a  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str383=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,105,108,101,115,32,97,114,101,32,112,108,97,99,101,100,32,105,110,32,105,116,44,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,102,105,108,101,110,97,109,101,115,32,97,115,0] /*                files */, "i8", ALLOC_STATIC);
STRING_TABLE.__str384=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,111,115,101,32,111,102,32,116,104,101,32,111,114,105,103,105,110,97,108,32,102,105,108,101,115,46,32,70,111,114,32,101,120,97,109,112,108,101,44,0] /*                those */, "i8", ALLOC_STATIC);
STRING_TABLE.__str385=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,121,111,117,32,119,111,117,108,100,32,116,121,112,101,32,39,112,110,103,99,114,117,115,104,32,45,100,105,114,101,99,116,111,114,121,32,67,82,85,83,72,69,68,47,32,42,46,112,110,103,39,0] /*                you w */, "i8", ALLOC_STATIC);
STRING_TABLE.__str386=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,111,32,103,101,116,32,42,46,112,110,103,32,61,62,32,67,82,85,83,72,69,68,47,42,46,112,110,103,46,32,32,84,104,101,32,116,114,97,105,108,105,110,103,32,115,108,97,115,104,32,105,115,0] /*                to ge */, "i8", ALLOC_STATIC);
STRING_TABLE.__str387=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,112,116,105,111,110,97,108,44,32,98,117,116,32,105,102,32,112,110,103,99,114,117,115,104,32,97,112,112,101,110,100,115,32,116,104,101,32,119,114,111,110,103,32,107,105,110,100,32,111,102,0] /*                optio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str388=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,108,97,115,104,32,111,114,32,98,97,99,107,115,108,97,115,104,44,32,112,108,101,97,115,101,32,105,110,99,108,117,100,101,32,116,104,101,32,99,111,114,114,101,99,116,32,111,110,101,0] /*                slash */, "i8", ALLOC_STATIC);
STRING_TABLE.__str389=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,100,105,114,101,99,116,111,114,121,95,110,97,109,101,44,32,97,115,32,115,104,111,119,110,46,0] /*                at th */, "i8", ALLOC_STATIC);
STRING_TABLE.__str390=allocate([80,0] /* P\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str391=allocate([32,45,100,111,117,98,108,101,95,103,97,109,109,97,32,40,117,115,101,100,32,102,111,114,32,102,105,120,105,110,103,32,103,97,109,109,97,32,105,110,32,80,104,111,116,111,83,104,111,112,32,53,46,48,47,53,46,48,50,32,102,105,108,101,115,41,0] /*  -double_gamma (used */, "i8", ALLOC_STATIC);
STRING_TABLE.__str392=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,73,116,32,104,97,115,32,98,101,101,110,32,99,108,97,105,109,101,100,32,116,104,97,116,32,116,104,101,32,80,83,53,32,98,117,103,32,105,115,32,97,99,116,117,97,108,108,121,0] /*                It ha */, "i8", ALLOC_STATIC);
STRING_TABLE.__str393=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,109,111,114,101,32,99,111,109,112,108,101,120,32,116,104,97,110,32,116,104,97,116,44,32,105,110,32,115,111,109,101,32,117,110,115,112,101,99,105,102,105,101,100,32,119,97,121,46,0] /*                more  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str394=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,101,32,101,120,116,101,110,115,105,111,110,32,32,40,117,115,101,100,32,102,111,114,32,99,114,101,97,116,105,110,103,32,111,117,116,112,117,116,32,102,105,108,101,110,97,109,101,41,0] /*             -e exten */, "i8", ALLOC_STATIC);
STRING_TABLE.__str395=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,46,103,46,44,32,45,101,120,116,32,46,110,101,119,32,109,101,97,110,115,32,42,46,112,110,103,32,61,62,32,42,46,110,101,119,0] /*                e.g., */, "i8", ALLOC_STATIC);
STRING_TABLE.__str396=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,110,100,32,45,101,32,95,67,46,112,110,103,32,109,101,97,110,115,32,42,46,112,110,103,32,61,62,32,42,95,67,46,112,110,103,0] /*                and - */, "i8", ALLOC_STATIC);
STRING_TABLE.__str397=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,102,32,117,115,101,114,95,102,105,108,116,101,114,32,91,48,45,53,93,0] /*             -f user_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str398=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,105,108,116,101,114,32,116,111,32,117,115,101,32,119,105,116,104,32,116,104,101,32,109,101,116,104,111,100,32,115,112,101,99,105,102,105,101,100,32,105,110,32,116,104,101,0] /*                filte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str399=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,114,101,99,101,100,105,110,103,32,39,45,109,32,109,101,116,104,111,100,39,32,111,114,32,39,45,98,114,117,116,101,95,102,111,114,99,101,39,32,97,114,103,117,109,101,110,116,46,0] /*                prece */, "i8", ALLOC_STATIC);
STRING_TABLE.__str400=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,58,32,110,111,110,101,59,32,49,45,52,58,32,117,115,101,32,115,112,101,99,105,102,105,101,100,32,102,105,108,116,101,114,59,32,53,58,32,97,100,97,112,116,105,118,101,46,0] /*                0: no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str401=allocate([32,32,32,32,32,32,32,32,32,32,45,102,105,120,32,40,102,105,120,32,111,116,104,101,114,119,105,115,101,32,102,97,116,97,108,32,99,111,110,100,105,116,105,111,110,115,32,115,117,99,104,32,97,115,32,98,97,100,32,67,82,67,115,41,0] /*           -fix (fix  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str402=allocate([32,32,32,32,32,32,32,32,45,102,111,114,99,101,32,40,119,114,105,116,101,32,97,32,110,101,119,32,111,117,116,112,117,116,32,102,105,108,101,32,101,118,101,110,32,105,102,32,108,97,114,103,101,114,32,116,104,97,110,32,105,110,112,117,116,41,0] /*         -force (writ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str403=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,79,116,104,101,114,119,105,115,101,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,32,119,105,108,108,32,98,101,32,99,111,112,105,101,100,32,116,111,32,111,117,116,112,117,116,0] /*                Other */, "i8", ALLOC_STATIC);
STRING_TABLE.__str404=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,105,116,32,105,115,32,115,109,97,108,108,101,114,32,116,104,97,110,32,97,110,121,32,103,101,110,101,114,97,116,101,100,32,102,105,108,101,32,97,110,100,32,110,111,32,99,104,117,110,107,0] /*                if it */, "i8", ALLOC_STATIC);
STRING_TABLE.__str405=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,100,100,105,116,105,111,110,115,44,32,114,101,109,111,118,97,108,115,44,32,111,114,32,99,104,97,110,103,101,115,32,119,101,114,101,32,114,101,113,117,101,115,116,101,100,46,0] /*                addit */, "i8", ALLOC_STATIC);
STRING_TABLE.__str406=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,103,32,103,97,109,109,97,32,40,102,108,111,97,116,32,111,114,32,102,105,120,101,100,42,49,48,48,48,48,48,44,32,101,46,103,46,44,32,48,46,52,53,52,53,53,32,111,114,32,52,53,52,53,53,41,0] /*             -g gamma */, "i8", ALLOC_STATIC);
STRING_TABLE.__str407=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,86,97,108,117,101,32,116,111,32,105,110,115,101,114,116,32,105,110,32,103,65,77,65,32,99,104,117,110,107,44,32,111,110,108,121,32,105,102,32,116,104,101,32,105,110,112,117,116,0] /*                Value */, "i8", ALLOC_STATIC);
STRING_TABLE.__str408=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,105,108,101,32,104,97,115,32,110,111,32,103,65,77,65,32,99,104,117,110,107,46,32,32,84,111,32,114,101,112,108,97,99,101,32,97,110,32,101,120,105,115,116,105,110,103,0] /*                file  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str409=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,65,77,65,32,99,104,117,110,107,44,32,117,115,101,32,116,104,101,32,39,45,114,101,112,108,97,99,101,95,103,97,109,109,97,39,32,111,112,116,105,111,110,46,0] /*                gAMA  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str410=allocate([32,32,32,32,32,32,45,104,117,102,102,109,97,110,32,40,117,115,101,32,111,110,108,121,32,122,108,105,98,32,115,116,114,97,116,101,103,121,32,50,44,32,72,117,102,102,109,97,110,45,111,110,108,121,41,0] /*       -huffman (use  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str411=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,70,97,115,116,44,32,98,117,116,32,97,108,109,111,115,116,32,110,101,118,101,114,32,118,101,114,121,32,101,102,102,101,99,116,105,118,101,32,101,120,99,101,112,116,32,102,111,114,0] /*                Fast, */, "i8", ALLOC_STATIC);
STRING_TABLE.__str412=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,101,114,116,97,105,110,32,114,97,114,101,32,105,109,97,103,101,32,116,121,112,101,115,46,0] /*                certa */, "i8", ALLOC_STATIC);
STRING_TABLE.__str413=allocate([32,32,32,32,32,32,32,32,32,45,105,99,99,112,32,108,101,110,103,116,104,32,34,80,114,111,102,105,108,101,32,78,97,109,101,34,32,105,99,99,112,95,102,105,108,101,0] /*          -iccp lengt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str414=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,105,108,101,32,119,105,116,104,32,73,67,67,32,112,114,111,102,105,108,101,32,116,111,32,105,110,115,101,114,116,32,105,110,32,97,110,32,105,67,67,80,32,99,104,117,110,107,46,0] /*                file  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str415=allocate([32,32,32,32,32,32,32,32,32,45,105,116,120,116,32,98,91,101,102,111,114,101,95,73,68,65,84,93,124,97,91,102,116,101,114,95,73,68,65,84,93,32,34,107,101,121,119,111,114,100,34,0] /*          -itxt b[efo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str416=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,108,97,110,103,117,97,103,101,95,99,111,100,101,34,32,34,116,114,97,110,115,108,97,116,101,100,95,107,101,121,119,111,114,100,34,32,34,116,101,120,116,34,0] /*                \22la */, "i8", ALLOC_STATIC);
STRING_TABLE.__str417=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,110,99,111,109,112,114,101,115,115,101,100,32,105,84,88,116,32,99,104,117,110,107,32,116,111,32,105,110,115,101,114,116,32,40,115,101,101,32,45,116,101,120,116,41,46,0] /*                Uncom */, "i8", ALLOC_STATIC);
STRING_TABLE.__str418=allocate([32,32,32,32,32,32,32,32,32,45,107,101,101,112,32,99,104,117,110,107,95,110,97,109,101,0] /*          -keep chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str419=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,107,101,101,112,32,110,97,109,101,100,32,99,104,117,110,107,32,101,118,101,110,32,119,104,101,110,32,112,110,103,99,114,117,115,104,32,109,97,107,101,115,0] /*                keep  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str420=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,104,97,110,103,101,115,32,116,111,32,116,104,101,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,32,116,104,97,116,32,99,97,117,115,101,32,105,116,0] /*                chang */, "i8", ALLOC_STATIC);
STRING_TABLE.__str421=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,111,32,98,101,99,111,109,101,32,105,110,118,97,108,105,100,46,32,32,67,117,114,114,101,110,116,108,121,32,111,110,108,121,32,100,83,73,71,32,105,115,0] /*                to be */, "i8", ALLOC_STATIC);
STRING_TABLE.__str422=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,99,111,103,110,105,122,101,100,32,97,115,32,97,32,99,104,117,110,107,32,116,111,32,98,101,32,107,101,112,116,46,0] /*                recog */, "i8", ALLOC_STATIC);
STRING_TABLE.__str423=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,108,32,122,108,105,98,95,99,111,109,112,114,101,115,115,105,111,110,95,108,101,118,101,108,32,91,48,45,57,93,0] /*             -l zlib_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str424=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,122,108,105,98,32,99,111,109,112,114,101,115,115,105,111,110,32,108,101,118,101,108,32,116,111,32,117,115,101,32,119,105,116,104,32,109,101,116,104,111,100,32,115,112,101,99,105,102,105,101,100,0] /*                zlib  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str425=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,105,116,104,32,116,104,101,32,112,114,101,99,101,100,105,110,103,32,39,45,109,32,109,101,116,104,111,100,39,32,111,114,32,39,45,98,114,117,116,101,95,102,111,114,99,101,39,0] /*                with  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str426=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,114,103,117,109,101,110,116,46,0] /*                argum */, "i8", ALLOC_STATIC);
STRING_TABLE.__str427=allocate([32,32,32,32,32,32,32,32,32,45,108,111,99,111,32,40,34,108,111,99,111,32,99,114,117,115,104,34,32,116,114,117,101,99,111,108,111,114,32,80,78,71,115,41,0] /*          -loco (\22l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str428=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,77,97,107,101,32,116,104,101,32,102,105,108,101,32,109,111,114,101,32,99,111,109,112,114,101,115,115,105,98,108,101,32,98,121,32,112,101,114,102,111,114,109,105,110,103,32,97,0] /*                Make  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str429=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,111,115,115,108,101,115,115,44,32,114,101,118,101,114,115,105,98,108,101,44,32,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,46,0] /*                lossl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str430=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,104,101,32,114,101,115,117,108,116,105,110,103,32,102,105,108,101,32,105,115,32,97,32,77,78,71,44,32,110,111,116,32,97,32,80,78,71,44,32,97,110,100,32,115,104,111,117,108,100,0] /*                The r */, "i8", ALLOC_STATIC);
STRING_TABLE.__str431=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,101,32,103,105,118,101,110,32,116,104,101,32,34,46,109,110,103,34,32,102,105,108,101,32,101,120,116,101,110,115,105,111,110,46,32,32,84,104,101,0] /*                be gi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str432=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,108,111,99,111,34,32,111,112,116,105,111,110,32,104,97,115,32,110,111,32,101,102,102,101,99,116,32,111,110,32,103,114,97,121,115,99,97,108,101,32,111,114,0] /*                \22lo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str433=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,110,100,101,120,101,100,45,99,111,108,111,114,32,80,78,71,32,102,105,108,101,115,46,0] /*                index */, "i8", ALLOC_STATIC);
STRING_TABLE.__str434=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,109,32,109,101,116,104,111,100,32,91,48,32,116,104,114,111,117,103,104,32,50,48,48,93,0] /*             -m metho */, "i8", ALLOC_STATIC);
STRING_TABLE.__str435=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,110,103,99,114,117,115,104,32,109,101,116,104,111,100,32,116,111,32,116,114,121,32,40,48,32,109,101,97,110,115,32,116,114,121,32,97,108,108,32,111,102,32,49,45,49,48,41,46,0] /*                pngcr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str436=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,97,110,32,98,101,32,114,101,112,101,97,116,101,100,32,97,115,32,105,110,32,39,45,109,32,49,32,45,109,32,52,32,45,109,32,55,39,46,0] /*                Can b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str437=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,104,105,115,32,99,97,110,32,98,101,32,117,115,101,102,117,108,32,105,102,32,112,110,103,99,114,117,115,104,32,114,117,110,115,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0] /*                This  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str438=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,119,104,101,110,32,105,116,32,116,114,105,101,115,32,109,101,116,104,111,100,115,32,50,44,32,51,44,32,53,44,32,54,44,32,56,44,32,57,44,32,111,114,32,49,48,32,119,104,105,99,104,0] /*                when  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str439=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,117,115,101,32,102,105,108,116,101,114,105,110,103,32,97,110,100,32,97,114,101,32,109,101,109,111,114,121,45,105,110,116,101,110,115,105,118,101,46,32,32,77,101,116,104,111,100,115,0] /*                use f */, "i8", ALLOC_STATIC);
STRING_TABLE.__str440=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,49,44,32,52,44,32,97,110,100,32,55,32,117,115,101,32,110,111,32,102,105,108,116,101,114,105,110,103,59,32,109,101,116,104,111,100,115,32,49,49,32,97,110,100,32,117,112,32,117,115,101,0] /*                1, 4, */, "i8", ALLOC_STATIC);
STRING_TABLE.__str441=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,112,101,99,105,102,105,101,100,32,102,105,108,116,101,114,44,32,99,111,109,112,114,101,115,115,105,111,110,32,108,101,118,101,108,44,32,97,110,100,32,115,116,114,97,116,101,103,121,46,0] /*                speci */, "i8", ALLOC_STATIC);
STRING_TABLE.__str442=allocate([32,32,32,32,32,32,32,32,32,32,45,109,97,120,32,109,97,120,105,109,117,109,95,73,68,65,84,95,115,105,122,101,32,91,100,101,102,97,117,108,116,32,56,49,57,50,93,0] /*           -max maxim */, "i8", ALLOC_STATIC);
STRING_TABLE.__str443=allocate([32,32,32,32,32,32,32,32,32,32,45,109,110,103,32,40,119,114,105,116,101,32,97,32,110,101,119,32,77,78,71,44,32,100,111,32,110,111,116,32,99,114,117,115,104,32,101,109,98,101,100,100,101,100,32,80,78,71,115,41,0] /*           -mng (writ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str444=allocate([32,45,110,101,119,116,105,109,101,115,116,97,109,112,0] /*  -newtimestamp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str445=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,101,115,101,116,32,102,105,108,101,32,109,111,100,105,102,105,99,97,116,105,111,110,32,116,105,109,101,32,91,100,101,102,97,117,108,116,93,46,0] /*                Reset */, "i8", ALLOC_STATIC);
STRING_TABLE.__str446=allocate([32,32,45,110,111,102,105,108,101,99,104,101,99,107,32,40,100,111,32,110,111,116,32,99,104,101,99,107,32,102,111,114,32,105,110,102,105,108,101,46,112,110,103,32,61,61,32,111,117,116,102,105,108,101,46,112,110,103,41,0] /*   -nofilecheck (do n */, "i8", ALLOC_STATIC);
STRING_TABLE.__str447=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,111,32,97,118,111,105,100,32,102,97,108,115,101,32,104,105,116,115,32,102,114,111,109,32,77,83,86,67,45,99,111,109,112,105,108,101,100,32,99,111,100,101,46,32,32,78,111,116,101,0] /*                To av */, "i8", ALLOC_STATIC);
STRING_TABLE.__str448=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,97,116,32,105,102,32,121,111,117,32,117,115,101,32,116,104,105,115,32,111,112,116,105,111,110,44,32,121,111,117,32,97,114,101,32,114,101,115,112,111,110,115,105,98,108,101,32,102,111,114,0] /*                that  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str449=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,115,117,114,105,110,103,32,116,104,97,116,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,32,105,115,32,110,111,116,32,116,104,101,32,111,117,116,112,117,116,32,102,105,108,101,46,0] /*                ensur */, "i8", ALLOC_STATIC);
STRING_TABLE.__str450=allocate([32,32,32,32,32,45,110,111,108,105,109,105,116,115,32,40,116,117,114,110,115,32,111,102,102,32,108,105,109,105,116,115,32,111,110,32,119,105,100,116,104,44,32,104,101,105,103,104,116,44,32,99,97,99,104,101,44,32,109,97,108,108,111,99,41,0] /*      -nolimits (turn */, "i8", ALLOC_STATIC);
STRING_TABLE.__str451=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,73,110,115,116,101,97,100,44,32,116,104,101,32,117,115,101,114,32,108,105,109,105,116,115,32,97,114,101,32,105,110,104,101,114,105,116,101,100,32,102,114,111,109,32,108,105,98,112,110,103,46,0] /*                Inste */, "i8", ALLOC_STATIC);
STRING_TABLE.__str452=allocate([32,45,111,108,100,116,105,109,101,115,116,97,109,112,0] /*  -oldtimestamp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str453=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,111,110,39,116,32,114,101,115,101,116,32,102,105,108,101,32,109,111,100,105,102,105,99,97,116,105,111,110,32,116,105,109,101,46,0] /*                Don't */, "i8", ALLOC_STATIC);
STRING_TABLE.__str454=allocate([32,32,32,32,32,32,32,32,32,32,32,45,111,119,32,40,79,118,101,114,119,114,105,116,101,41,0] /*            -ow (Over */, "i8", ALLOC_STATIC);
STRING_TABLE.__str455=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,79,118,101,114,119,114,105,116,101,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,46,32,32,84,104,101,32,105,110,112,117,116,32,102,105,108,101,32,105,115,32,0] /*                Overw */, "i8", ALLOC_STATIC);
STRING_TABLE.__str456=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,109,111,118,101,100,32,97,110,100,32,116,104,101,32,111,117,116,112,117,116,32,102,105,108,101,32,40,100,101,102,97,117,108,116,32,34,112,110,103,111,117,116,46,112,110,103,34,41,0] /*                remov */, "i8", ALLOC_STATIC);
STRING_TABLE.__str457=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,115,32,114,101,110,97,109,101,100,32,116,111,32,116,104,101,32,105,110,112,117,116,32,102,105,108,101,32,97,102,116,101,114,32,114,101,99,111,109,112,114,101,115,115,105,111,110,0] /*                is re */, "i8", ALLOC_STATIC);
STRING_TABLE.__str458=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,110,100,32,116,104,101,114,101,102,111,114,101,32,116,104,101,121,32,109,117,115,116,32,114,101,115,105,100,101,32,111,110,32,116,104,101,32,115,97,109,101,32,102,105,108,101,115,121,115,116,101,109,0] /*                and t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str459=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,110,32,40,110,111,32,115,97,118,101,59,32,100,111,101,115,110,39,116,32,100,111,32,99,111,109,112,114,101,115,115,105,111,110,32,111,114,32,119,114,105,116,101,32,111,117,116,112,117,116,32,80,78,71,41,0] /*             -n (no s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str460=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,115,101,102,117,108,32,105,110,32,99,111,110,106,117,110,99,116,105,111,110,32,119,105,116,104,32,45,118,32,111,112,116,105,111,110,32,116,111,32,103,101,116,32,105,110,102,111,46,0] /*                Usefu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str461=allocate([32,32,32,32,32,45,112,108,116,101,95,108,101,110,32,110,32,40,116,114,117,110,99,97,116,101,32,117,110,117,115,101,100,32,101,110,116,114,105,101,115,32,102,114,111,109,32,116,104,101,32,116,111,112,32,111,102,32,80,76,84,69,41,0] /*      -plte_len n (tr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str462=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,114,117,110,99,97,116,101,115,32,116,104,101,32,80,76,84,69,46,32,32,66,101,32,115,117,114,101,32,110,111,116,32,116,111,32,116,114,117,110,99,97,116,101,32,105,116,32,116,111,0] /*                Trunc */, "i8", ALLOC_STATIC);
STRING_TABLE.__str463=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,101,115,115,32,116,104,97,110,32,116,104,101,32,103,114,101,97,116,101,115,116,32,105,110,100,101,120,32,112,114,101,115,101,110,116,32,105,110,32,73,68,65,84,46,0] /*                less  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str464=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,113,32,40,113,117,105,101,116,41,0] /*             -q (quie */, "i8", ALLOC_STATIC);
STRING_TABLE.__str465=allocate([32,32,32,32,32,32,32,45,114,101,100,117,99,101,32,40,100,111,32,108,111,115,115,108,101,115,115,32,99,111,108,111,114,45,116,121,112,101,32,111,114,32,98,105,116,45,100,101,112,116,104,32,114,101,100,117,99,116,105,111,110,41,0] /*        -reduce (do l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str466=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,105,102,32,112,111,115,115,105,98,108,101,41,0] /*                (if p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str467=allocate([32,32,32,32,32,32,32,32,32,32,45,114,101,109,32,99,104,117,110,107,110,97,109,101,32,40,111,114,32,34,97,108,108,97,34,32,111,114,32,34,97,108,108,98,34,41,0] /*           -rem chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str468=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,97,109,101,32,111,102,32,97,110,32,97,110,99,105,108,108,97,114,121,32,99,104,117,110,107,32,111,114,32,111,112,116,105,111,110,97,108,32,80,76,84,69,32,116,111,32,98,101,0] /*                Name  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str469=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,109,111,118,101,100,46,32,32,66,101,32,99,97,114,101,102,117,108,32,119,105,116,104,32,116,104,105,115,46,32,32,68,111,110,39,116,32,117,115,101,32,116,104,105,115,0] /*                remov */, "i8", ALLOC_STATIC);
STRING_TABLE.__str470=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,101,97,116,117,114,101,32,116,111,32,114,101,109,111,118,101,32,116,114,97,110,115,112,97,114,101,110,99,121,44,32,103,97,109,109,97,44,32,99,111,112,121,114,105,103,104,116,44,0] /*                featu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str471=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,114,32,111,116,104,101,114,32,118,97,108,117,97,98,108,101,32,105,110,102,111,114,109,97,116,105,111,110,46,32,32,84,111,32,114,101,109,111,118,101,32,115,101,118,101,114,97,108,0] /*                or ot */, "i8", ALLOC_STATIC);
STRING_TABLE.__str472=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,105,102,102,101,114,101,110,116,32,99,104,117,110,107,115,44,32,114,101,112,101,97,116,58,32,45,114,101,109,32,116,69,88,116,32,45,114,101,109,32,112,72,89,115,46,0] /*                diffe */, "i8", ALLOC_STATIC);
STRING_TABLE.__str473=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,75,110,111,119,110,32,99,104,117,110,107,115,32,40,116,104,111,115,101,32,105,110,32,116,104,101,32,80,78,71,32,49,46,49,32,115,112,101,99,32,111,114,32,101,120,116,101,110,115,105,111,110,115,0] /*                Known */, "i8", ALLOC_STATIC);
STRING_TABLE.__str474=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,111,99,117,109,101,110,116,41,32,99,97,110,32,98,101,32,110,97,109,101,100,32,119,105,116,104,32,97,108,108,32,108,111,119,101,114,45,99,97,115,101,32,108,101,116,116,101,114,115,44,0] /*                docum */, "i8", ALLOC_STATIC);
STRING_TABLE.__str475=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,111,32,34,45,114,101,109,32,98,107,103,100,34,32,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,111,32,34,45,114,101,109,32,98,75,71,68,34,46,32,32,66,117,116,0] /*                so \2 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str476=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,111,116,101,58,32,34,45,114,101,109,32,116,101,120,116,34,32,114,101,109,111,118,101,115,32,97,108,108,32,102,111,114,109,115,32,111,102,32,116,101,120,116,32,99,104,117,110,107,115,59,0] /*                note: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str477=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,69,120,97,99,116,32,99,97,115,101,32,105,115,32,114,101,113,117,105,114,101,100,32,116,111,32,114,101,109,111,118,101,32,117,110,107,110,111,119,110,32,99,104,117,110,107,115,46,0] /*                Exact */, "i8", ALLOC_STATIC);
STRING_TABLE.__str478=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,111,32,100,111,32,115,117,114,103,101,114,121,32,119,105,116,104,32,97,32,99,104,97,105,110,45,115,97,119,44,32,34,45,114,101,109,32,97,108,108,97,34,32,114,101,109,111,118,101,115,0] /*                To do */, "i8", ALLOC_STATIC);
STRING_TABLE.__str479=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,108,108,32,107,110,111,119,110,32,97,110,99,105,108,108,97,114,121,32,99,104,117,110,107,115,32,101,120,99,101,112,116,32,102,111,114,32,116,82,78,83,44,32,97,110,100,0] /*                all k */, "i8", ALLOC_STATIC);
STRING_TABLE.__str480=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,45,114,101,109,32,97,108,108,98,34,32,114,101,109,111,118,101,115,32,97,108,108,32,98,117,116,32,116,82,78,83,32,97,110,100,32,103,65,77,65,46,0] /*                \22-r */, "i8", ALLOC_STATIC);
STRING_TABLE.__str481=allocate([45,114,101,112,108,97,99,101,95,103,97,109,109,97,32,103,97,109,109,97,32,40,102,108,111,97,116,32,111,114,32,102,105,120,101,100,42,49,48,48,48,48,48,41,32,101,118,101,110,32,105,102,32,105,116,32,105,115,32,112,114,101,115,101,110,116,46,0] /* -replace_gamma gamma */, "i8", ALLOC_STATIC);
STRING_TABLE.__str482=allocate([32,32,32,32,32,32,32,32,32,32,45,114,101,115,32,100,112,105,0] /*           -res dpi\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str483=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,87,114,105,116,101,32,97,32,112,72,89,115,32,99,104,117,110,107,32,119,105,116,104,32,116,104,101,32,103,105,118,101,110,32,114,101,115,111,108,117,116,105,111,110,46,0] /*                Write */, "i8", ALLOC_STATIC);
STRING_TABLE.__str484=allocate([32,32,32,32,32,32,32,32,32,32,45,114,108,101,32,40,117,115,101,32,111,110,108,121,32,122,108,105,98,32,115,116,114,97,116,101,103,121,32,51,44,32,82,76,69,45,111,110,108,121,41,0] /*           -rle (use  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str485=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,65,32,114,101,108,97,116,105,118,101,108,121,32,102,97,115,116,32,115,117,98,115,101,116,32,111,102,32,116,104,101,32,34,45,98,114,117,116,101,34,32,109,101,116,104,111,100,115,44,0] /*                A rel */, "i8", ALLOC_STATIC);
STRING_TABLE.__str486=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,101,110,101,114,97,108,108,121,32,109,111,114,101,32,101,102,102,101,99,116,105,118,101,32,116,104,97,110,32,34,45,104,117,102,102,109,97,110,34,32,111,110,32,80,78,71,44,0] /*                gener */, "i8", ALLOC_STATIC);
STRING_TABLE.__str487=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,109,97,103,101,115,32,40,97,110,100,32,113,117,105,116,101,32,101,102,102,101,99,116,105,118,101,32,111,110,32,98,108,97,99,107,45,97,110,100,45,119,104,105,116,101,0] /*                image */, "i8", ALLOC_STATIC);
STRING_TABLE.__str488=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,109,97,103,101,115,41,32,98,117,116,32,110,111,116,32,110,101,99,101,115,115,97,114,105,108,121,32,119,111,114,116,104,32,116,104,101,32,98,111,116,104,101,114,0] /*                image */, "i8", ALLOC_STATIC);
STRING_TABLE.__str489=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,116,104,101,114,119,105,115,101,46,0] /*                other */, "i8", ALLOC_STATIC);
STRING_TABLE.__str490=allocate([32,32,32,32,32,32,32,32,32,45,115,97,118,101,32,40,107,101,101,112,32,97,108,108,32,99,111,112,121,45,117,110,115,97,102,101,32,80,78,71,32,99,104,117,110,107,115,41,0] /*          -save (keep */, "i8", ALLOC_STATIC);
STRING_TABLE.__str491=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,97,118,101,32,111,116,104,101,114,119,105,115,101,32,117,110,107,110,111,119,110,32,97,110,99,105,108,108,97,114,121,32,99,104,117,110,107,115,32,116,104,97,116,32,119,111,117,108,100,0] /*                Save  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str492=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,101,32,99,111,110,115,105,100,101,114,101,100,32,99,111,112,121,45,117,110,115,97,102,101,46,32,32,84,104,105,115,32,111,112,116,105,111,110,32,109,97,107,101,115,0] /*                be co */, "i8", ALLOC_STATIC);
STRING_TABLE.__str493=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,104,117,110,107,115,32,39,107,110,111,119,110,39,32,116,111,32,112,110,103,99,114,117,115,104,44,32,115,111,32,116,104,101,121,32,99,97,110,32,98,101,32,99,111,112,105,101,100,46,0] /*                chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str494=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,73,116,32,97,108,115,111,32,99,97,117,115,101,115,32,116,104,101,32,100,83,73,71,32,99,104,117,110,107,32,116,111,32,98,101,32,115,97,118,101,100,44,32,101,118,101,110,32,119,104,101,110,0] /*                It al */, "i8", ALLOC_STATIC);
STRING_TABLE.__str495=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,116,32,98,101,99,111,109,101,115,32,105,110,118,97,108,105,100,32,100,117,101,32,116,111,32,100,97,116,97,115,116,114,101,97,109,32,99,104,97,110,103,101,115,46,0] /*                it be */, "i8", ALLOC_STATIC);
STRING_TABLE.__str496=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,104,105,115,32,111,112,116,105,111,110,32,100,111,101,115,32,110,111,116,32,97,102,102,101,99,116,32,65,80,78,71,32,99,104,117,110,107,115,46,32,84,104,101,115,101,0] /*                This  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str497=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,104,117,110,107,115,32,40,97,99,84,76,44,32,102,99,84,76,44,32,97,110,100,32,102,100,65,84,41,32,119,105,108,108,32,98,101,32,115,97,118,101,100,32,111,110,108,121,0] /*                chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str498=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,116,104,101,32,111,117,116,112,117,116,32,102,105,108,101,32,104,97,115,32,116,104,101,32,34,46,97,112,110,103,34,32,101,120,116,101,110,115,105,111,110,0] /*                if th */, "i8", ALLOC_STATIC);
STRING_TABLE.__str499=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,110,100,32,116,104,101,32,99,111,108,111,114,95,116,121,112,101,32,97,110,100,32,98,105,116,95,100,101,112,116,104,32,97,114,101,32,110,111,116,32,99,104,97,110,103,101,100,46,0] /*                and t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str500=allocate([32,32,32,32,32,32,32,32,32,45,115,114,103,98,32,91,48,44,32,49,44,32,50,44,32,111,114,32,51,93,0] /*          -srgb [0, 1 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str501=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,86,97,108,117,101,32,111,102,32,39,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,39,32,102,111,114,32,115,82,71,66,32,99,104,117,110,107,46,0] /*                Value */, "i8", ALLOC_STATIC);
STRING_TABLE.__str502=allocate([32,32,32,32,32,32,32,32,32,45,115,116,101,114,32,91,48,32,111,114,32,49,93,0] /*          -ster [0 or */, "i8", ALLOC_STATIC);
STRING_TABLE.__str503=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,86,97,108,117,101,32,111,102,32,39,115,116,101,114,101,111,32,109,111,100,101,39,32,102,111,114,32,115,84,69,82,32,99,104,117,110,107,46,0] /*                Value */, "i8", ALLOC_STATIC);
STRING_TABLE.__str504=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,48,58,32,99,114,111,115,115,45,102,117,115,101,100,59,32,49,58,32,100,105,118,101,114,103,101,110,116,45,102,117,115,101,100,0] /*                0: cr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str505=allocate([32,32,32,32,32,32,32,32,32,45,116,101,120,116,32,98,91,101,102,111,114,101,95,73,68,65,84,93,124,97,91,102,116,101,114,95,73,68,65,84,93,32,34,107,101,121,119,111,114,100,34,32,34,116,101,120,116,34,0] /*          -text b[efo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str506=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,69,88,116,32,99,104,117,110,107,32,116,111,32,105,110,115,101,114,116,46,32,32,107,101,121,119,111,114,100,32,60,32,56,48,32,99,104,97,114,115,44,0] /*                tEXt  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str507=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,120,116,32,60,32,50,48,52,56,32,99,104,97,114,115,46,32,70,111,114,32,110,111,119,44,32,121,111,117,32,99,97,110,32,97,100,100,32,110,111,32,109,111,114,101,32,116,104,97,110,0] /*                text  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str508=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,110,32,116,69,88,116,44,32,105,84,88,116,44,32,111,114,32,122,84,88,116,32,99,104,117,110,107,115,32,112,101,114,32,112,110,103,99,114,117,115,104,32,114,117,110,46,0] /*                ten t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str509=allocate([32,32,32,45,116,114,110,115,95,97,114,114,97,121,32,110,32,116,114,110,115,91,48,93,32,116,114,110,115,91,49,93,32,46,46,32,116,114,110,115,91,110,45,49,93,0] /*    -trns_array n trn */, "i8", ALLOC_STATIC);
STRING_TABLE.__str510=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,73,110,115,101,114,116,32,97,32,116,82,78,83,32,99,104,117,110,107,44,32,105,102,32,110,111,32,116,82,78,83,32,99,104,117,110,107,32,102,111,117,110,100,32,105,110,32,102,105,108,101,46,0] /*                Inser */, "i8", ALLOC_STATIC);
STRING_TABLE.__str511=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,86,97,108,117,101,115,32,97,114,101,32,102,111,114,32,116,104,101,32,116,82,78,83,32,97,114,114,97,121,32,105,110,32,105,110,100,101,120,101,100,45,99,111,108,111,114,32,80,78,71,46,0] /*                Value */, "i8", ALLOC_STATIC);
STRING_TABLE.__str512=allocate([32,32,32,32,32,32,32,32,32,45,116,114,110,115,32,105,110,100,101,120,32,114,101,100,32,103,114,101,101,110,32,98,108,117,101,32,103,114,97,121,0] /*          -trns index */, "i8", ALLOC_STATIC);
STRING_TABLE.__str513=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,89,111,117,32,109,117,115,116,32,103,105,118,101,32,97,108,108,32,102,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,114,101,103,97,114,100,108,101,115,115,32,111,102,32,116,104,101,0] /*                You m */, "i8", ALLOC_STATIC);
STRING_TABLE.__str514=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,108,111,114,32,116,121,112,101,44,32,115,99,97,108,101,100,32,116,111,32,116,104,101,32,111,117,116,112,117,116,32,98,105,116,32,100,101,112,116,104,46,0] /*                color */, "i8", ALLOC_STATIC);
STRING_TABLE.__str515=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,118,32,40,100,105,115,112,108,97,121,32,109,111,114,101,32,100,101,116,97,105,108,101,100,32,105,110,102,111,114,109,97,116,105,111,110,41,0] /*             -v (disp */, "i8", ALLOC_STATIC);
STRING_TABLE.__str516=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,101,112,101,97,116,32,116,104,101,32,111,112,116,105,111,110,32,40,117,115,101,32,34,45,118,32,45,118,34,41,32,102,111,114,32,101,118,101,110,32,109,111,114,101,46,0] /*                Repea */, "i8", ALLOC_STATIC);
STRING_TABLE.__str517=allocate([32,32,32,32,32,32,45,118,101,114,115,105,111,110,32,40,100,105,115,112,108,97,121,32,116,104,101,32,112,110,103,99,114,117,115,104,32,118,101,114,115,105,111,110,41,0] /*       -version (disp */, "i8", ALLOC_STATIC);
STRING_TABLE.__str518=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,76,111,111,107,32,102,111,114,32,116,104,101,32,109,111,115,116,32,114,101,99,101,110,116,32,118,101,114,115,105,111,110,32,111,102,32,112,110,103,99,114,117,115,104,32,97,116,0] /*                Look  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str519=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,104,116,116,112,58,47,47,112,109,116,46,115,102,46,110,101,116,0] /*                http: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str520=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,119,32,99,111,109,112,114,101,115,115,105,111,110,95,119,105,110,100,111,119,95,115,105,122,101,32,91,51,50,44,32,49,54,44,32,56,44,32,52,44,32,50,44,32,49,44,32,53,49,50,93,0] /*             -w compr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str521=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,105,122,101,32,111,102,32,116,104,101,32,115,108,105,100,105,110,103,32,99,111,109,112,114,101,115,115,105,111,110,32,119,105,110,100,111,119,44,32,105,110,32,107,98,121,116,101,115,0] /*                Size  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str522=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,111,114,32,98,121,116,101,115,44,32,105,110,32,99,97,115,101,32,111,102,32,53,49,50,41,46,32,32,73,116,39,115,32,98,101,115,116,32,116,111,0] /*                (or b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str523=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,117,115,101,32,116,104,101,32,100,101,102,97,117,108,116,32,40,51,50,41,32,117,110,108,101,115,115,32,121,111,117,32,114,117,110,32,111,117,116,32,111,102,32,109,101,109,111,114,121,46,0] /*                use t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str524=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,104,101,32,112,114,111,103,114,97,109,32,119,105,108,108,32,117,115,101,32,97,32,115,109,97,108,108,101,114,32,119,105,110,100,111,119,32,97,110,121,119,97,121,32,119,104,101,110,0] /*                The p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str525=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,101,32,117,110,99,111,109,112,114,101,115,115,101,100,32,102,105,108,101,32,105,115,32,115,109,97,108,108,101,114,32,116,104,97,110,32,49,54,107,46,0] /*                the u */, "i8", ALLOC_STATIC);
STRING_TABLE.__str526=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,122,32,122,108,105,98,95,115,116,114,97,116,101,103,121,32,91,48,44,32,49,44,32,50,44,32,111,114,32,51,93,0] /*             -z zlib_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str527=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,122,108,105,98,32,99,111,109,112,114,101,115,115,105,111,110,32,115,116,114,97,116,101,103,121,32,116,111,32,117,115,101,32,119,105,116,104,32,116,104,101,32,112,114,101,99,101,100,105,110,103,0] /*                zlib  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str528=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,39,45,109,32,109,101,116,104,111,100,39,32,97,114,103,117,109,101,110,116,46,0] /*                '-m m */, "i8", ALLOC_STATIC);
STRING_TABLE.__str529=allocate([32,32,32,32,32,32,32,32,32,45,122,109,101,109,32,122,108,105,98,95,99,111,109,112,114,101,115,115,105,111,110,95,109,101,109,95,108,101,118,101,108,32,91,49,45,57,44,32,100,101,102,97,117,108,116,32,57,93,0] /*          -zmem zlib_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str530=allocate([32,32,32,32,32,32,32,32,45,122,105,116,120,116,32,98,124,97,32,34,107,101,121,119,111,114,100,34,32,34,108,99,111,100,101,34,32,34,116,107,101,121,34,32,34,116,101,120,116,34,0] /*         -zitxt b|a \ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str531=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,119,104,101,114,101,32,34,108,99,111,100,101,34,61,61,108,97,110,103,117,97,103,101,95,99,111,100,101,32,97,110,100,0] /*                (wher */, "i8", ALLOC_STATIC);
STRING_TABLE.__str532=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,116,107,101,121,34,61,61,116,114,97,110,115,108,97,116,101,100,95,107,101,121,119,111,114,100,41,34,0] /*                 \22t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str533=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,111,109,112,114,101,115,115,101,100,32,105,84,88,116,32,99,104,117,110,107,32,116,111,32,105,110,115,101,114,116,32,40,115,101,101,32,45,116,101,120,116,41,46,0] /*                Compr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str534=allocate([32,32,32,32,32,32,32,32,32,45,122,116,120,116,32,98,91,101,102,111,114,101,95,73,68,65,84,93,124,97,91,102,116,101,114,95,73,68,65,84,93,32,34,107,101,121,119,111,114,100,34,32,34,116,101,120,116,34,0] /*          -ztxt b[efo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str535=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,122,84,88,116,32,99,104,117,110,107,32,116,111,32,105,110,115,101,114,116,32,40,115,101,101,32,45,116,101,120,116,41,46,0] /*                zTXt  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str536=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,104,32,40,104,101,108,112,32,97,110,100,32,108,101,103,97,108,32,110,111,116,105,99,101,115,41,0] /*             -h (help */, "i8", ALLOC_STATIC);
STRING_TABLE.__str537=allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,105,115,112,108,97,121,32,116,104,105,115,32,105,110,102,111,114,109,97,116,105,111,110,46,0] /*                Displ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str538=allocate([32,32,32,32,32,32,32,32,32,32,32,32,45,112,32,40,112,97,117,115,101,41,0] /*             -p (paus */, "i8", ALLOC_STATIC);
_pngcrush_options=allocate([0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
_pngcrush_legal=allocate(128, "*", ALLOC_STATIC);
_pngcrush_usage=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__str539=allocate([10,111,112,116,105,111,110,115,32,40,78,111,116,101,58,32,97,110,121,32,111,112,116,105,111,110,32,99,97,110,32,98,101,32,115,112,101,108,108,101,100,32,111,117,116,32,102,111,114,32,99,108,97,114,105,116,121,44,32,101,46,103,46,44,10,32,32,32,32,32,32,32,32,32,32,34,112,110,103,99,114,117,115,104,32,45,100,105,114,32,78,101,119,32,45,109,101,116,104,111,100,32,55,32,45,114,101,109,111,118,101,32,98,107,103,100,32,42,46,112,110,103,34,10,32,32,32,32,32,32,32,32,32,32,105,115,32,116,104,101,32,115,97,109,101,32,97,115,32,34,112,110,103,99,114,117,115,104,32,45,100,32,78,101,119,47,32,45,109,32,55,32,45,114,101,109,32,98,107,103,100,32,42,46,112,110,103,34,41,58,10,10,0] /* \0Aoptions (Note: an */, "i8", ALLOC_STATIC);
STRING_TABLE.__str540=allocate([111,112,116,105,111,110,115,58,10,0] /* options:\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str541=allocate([10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,87,97,105,116,32,102,111,114,32,91,101,110,116,101,114,93,32,107,101,121,32,98,101,102,111,114,101,32,99,111,110,116,105,110,117,105,110,103,32,100,105,115,112,108,97,121,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,46,103,46,44,32,116,121,112,101,32,39,37,115,32,45,112,97,117,115,101,32,45,104,101,108,112,39,44,32,105,102,32,116,104,101,32,104,101,108,112,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,99,114,101,101,110,32,115,99,114,111,108,108,115,32,111,117,116,32,111,102,32,115,105,103,104,116,46,10,10,0] /* \0A               Wa */, "i8", ALLOC_STATIC);
STRING_TABLE.__str542=allocate([10,117,115,97,103,101,58,32,37,115,32,91,111,112,116,105,111,110,115,93,32,105,110,102,105,108,101,46,112,110,103,32,111,117,116,102,105,108,101,46,112,110,103,10,0] /* \0Ausage: %s [option */, "i8", ALLOC_STATIC);
STRING_TABLE.__str543=allocate([32,32,32,32,32,32,32,37,115,32,45,101,32,101,120,116,32,91,111,116,104,101,114,32,111,112,116,105,111,110,115,93,32,102,105,108,101,115,46,112,110,103,32,46,46,46,10,0] /*        %s -e ext [ot */, "i8", ALLOC_STATIC);
STRING_TABLE.__str544=allocate([32,32,32,32,32,32,32,37,115,32,45,100,32,100,105,114,47,32,91,111,116,104,101,114,32,111,112,116,105,111,110,115,93,32,102,105,108,101,115,46,112,110,103,32,46,46,46,10,0] /*        %s -d dir/ [o */, "i8", ALLOC_STATIC);
STRING_TABLE.__str545=allocate([73,102,32,121,111,117,32,104,97,118,101,32,109,111,100,105,102,105,101,100,32,116,104,105,115,32,115,111,117,114,99,101,44,32,121,111,117,32,109,97,121,32,105,110,115,101,114,116,32,97,100,100,105,116,105,111,110,97,108,32,110,111,116,105,99,101,115,0] /* If you have modified */, "i8", ALLOC_STATIC);
STRING_TABLE.__str546=allocate([105,109,109,101,100,105,97,116,101,108,121,32,97,102,116,101,114,32,116,104,105,115,32,115,101,110,116,101,110,99,101,46,0] /* immediately after th */, "i8", ALLOC_STATIC);
STRING_TABLE.__str547=allocate([67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,56,45,50,48,48,50,44,50,48,48,54,45,50,48,49,50,32,71,108,101,110,110,32,82,97,110,100,101,114,115,45,80,101,104,114,115,111,110,0] /* Copyright (C) 1998-2 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str548=allocate([80,111,114,116,105,111,110,115,32,99,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,48,53,32,32,32,32,32,32,32,71,114,101,103,32,82,111,101,108,111,102,115,0] /* Portions copyright ( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str549=allocate([68,73,83,67,76,65,73,77,69,82,58,32,84,104,101,32,112,110,103,99,114,117,115,104,32,99,111,109,112,117,116,101,114,32,112,114,111,103,114,97,109,32,105,115,32,115,117,112,112,108,105,101,100,32,34,65,83,32,73,83,34,46,0] /* DISCLAIMER: The pngc */, "i8", ALLOC_STATIC);
STRING_TABLE.__str550=allocate([84,104,101,32,65,117,116,104,111,114,32,100,105,115,99,108,97,105,109,115,32,97,108,108,32,119,97,114,114,97,110,116,105,101,115,44,32,101,120,112,114,101,115,115,101,100,32,111,114,32,105,109,112,108,105,101,100,44,32,105,110,99,108,117,100,105,110,103,44,0] /* The Author disclaims */, "i8", ALLOC_STATIC);
STRING_TABLE.__str551=allocate([119,105,116,104,111,117,116,32,108,105,109,105,116,97,116,105,111,110,44,32,116,104,101,32,119,97,114,114,97,110,116,105,101,115,32,111,102,32,109,101,114,99,104,97,110,116,97,98,105,108,105,116,121,32,97,110,100,32,111,102,32,102,105,116,110,101,115,115,0] /* without limitation,  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str552=allocate([102,111,114,32,32,97,110,121,32,112,117,114,112,111,115,101,46,32,32,84,104,101,32,65,117,116,104,111,114,32,97,115,115,117,109,101,115,32,110,111,32,108,105,97,98,105,108,105,116,121,32,102,111,114,32,100,105,114,101,99,116,44,32,105,110,100,105,114,101,99,116,44,0] /* for  any purpose.  T */, "i8", ALLOC_STATIC);
STRING_TABLE.__str553=allocate([105,110,99,105,100,101,110,116,97,108,44,32,115,112,101,99,105,97,108,44,32,101,120,101,109,112,108,97,114,121,44,32,111,114,32,99,111,110,115,101,113,117,101,110,116,105,97,108,32,100,97,109,97,103,101,115,44,32,119,104,105,99,104,32,109,97,121,0] /* incidental, special, */, "i8", ALLOC_STATIC);
STRING_TABLE.__str554=allocate([114,101,115,117,108,116,32,102,114,111,109,32,116,104,101,32,117,115,101,32,111,102,32,116,104,101,32,99,111,109,112,117,116,101,114,32,112,114,111,103,114,97,109,44,32,101,118,101,110,32,105,102,32,97,100,118,105,115,101,100,32,111,102,32,116,104,101,0] /* result from the use  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str555=allocate([112,111,115,115,105,98,105,108,105,116,121,32,111,102,32,115,117,99,104,32,100,97,109,97,103,101,46,32,32,84,104,101,114,101,32,105,115,32,110,111,32,119,97,114,114,97,110,116,121,32,97,103,97,105,110,115,116,32,105,110,116,101,114,102,101,114,101,110,99,101,0] /* possibility of such  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str556=allocate([119,105,116,104,32,121,111,117,114,32,101,110,106,111,121,109,101,110,116,32,111,102,32,116,104,101,32,99,111,109,112,117,116,101,114,32,112,114,111,103,114,97,109,32,111,114,32,97,103,97,105,110,115,116,32,105,110,102,114,105,110,103,101,109,101,110,116,46,0] /* with your enjoyment  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str557=allocate([84,104,101,114,101,32,105,115,32,110,111,32,119,97,114,114,97,110,116,121,32,116,104,97,116,32,109,121,32,101,102,102,111,114,116,115,32,111,114,32,116,104,101,32,99,111,109,112,117,116,101,114,32,112,114,111,103,114,97,109,32,119,105,108,108,0] /* There is no warranty */, "i8", ALLOC_STATIC);
STRING_TABLE.__str558=allocate([102,117,108,102,105,108,108,32,97,110,121,32,111,102,32,121,111,117,114,32,112,97,114,116,105,99,117,108,97,114,32,112,117,114,112,111,115,101,115,32,111,114,32,110,101,101,100,115,46,32,32,84,104,105,115,32,99,111,109,112,117,116,101,114,0] /* fulfill any of your  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str559=allocate([112,114,111,103,114,97,109,32,105,115,32,112,114,111,118,105,100,101,100,32,119,105,116,104,32,97,108,108,32,102,97,117,108,116,115,44,32,97,110,100,32,116,104,101,32,101,110,116,105,114,101,32,114,105,115,107,32,111,102,32,115,97,116,105,115,102,97,99,116,111,114,121,0] /* program is provided  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str560=allocate([113,117,97,108,105,116,121,44,32,112,101,114,102,111,114,109,97,110,99,101,44,32,97,99,99,117,114,97,99,121,44,32,97,110,100,32,101,102,102,111,114,116,32,105,115,32,119,105,116,104,32,116,104,101,32,117,115,101,114,46,0] /* quality, performance */, "i8", ALLOC_STATIC);
STRING_TABLE.__str561=allocate([76,73,67,69,78,83,69,58,32,80,101,114,109,105,115,115,105,111,110,32,105,115,32,104,101,114,101,98,121,32,105,114,114,101,118,111,99,97,98,108,121,32,103,114,97,110,116,101,100,32,116,111,32,101,118,101,114,121,111,110,101,32,116,111,32,117,115,101,44,0] /* LICENSE: Permission  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str562=allocate([99,111,112,121,44,32,109,111,100,105,102,121,44,32,97,110,100,32,100,105,115,116,114,105,98,117,116,101,32,116,104,105,115,32,99,111,109,112,117,116,101,114,32,112,114,111,103,114,97,109,44,32,111,114,32,112,111,114,116,105,111,110,115,32,104,101,114,101,111,102,44,0] /* copy, modify, and di */, "i8", ALLOC_STATIC);
STRING_TABLE.__str563=allocate([112,117,114,112,111,115,101,44,32,119,105,116,104,111,117,116,32,112,97,121,109,101,110,116,32,111,102,32,97,110,121,32,102,101,101,44,32,115,117,98,106,101,99,116,32,116,111,32,116,104,101,32,102,111,108,108,111,119,105,110,103,0] /* purpose, without pay */, "i8", ALLOC_STATIC);
STRING_TABLE.__str564=allocate([114,101,115,116,114,105,99,116,105,111,110,115,58,0] /* restrictions:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str565=allocate([49,46,32,84,104,101,32,111,114,105,103,105,110,32,111,102,32,116,104,105,115,32,98,105,110,97,114,121,32,111,114,32,115,111,117,114,99,101,32,99,111,100,101,32,109,117,115,116,32,110,111,116,32,98,101,32,109,105,115,114,101,112,114,101,115,101,110,116,101,100,46,0] /* 1. The origin of thi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str566=allocate([50,46,32,65,108,116,101,114,101,100,32,118,101,114,115,105,111,110,115,32,109,117,115,116,32,98,101,32,112,108,97,105,110,108,121,32,109,97,114,107,101,100,32,97,115,32,115,117,99,104,32,97,110,100,32,109,117,115,116,32,110,111,116,32,98,101,0] /* 2. Altered versions  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str567=allocate([109,105,115,114,101,112,114,101,115,101,110,116,101,100,32,97,115,32,98,101,105,110,103,32,116,104,101,32,111,114,105,103,105,110,97,108,32,98,105,110,97,114,121,32,111,114,32,115,111,117,114,99,101,46,0] /* misrepresented as be */, "i8", ALLOC_STATIC);
STRING_TABLE.__str568=allocate([51,46,32,84,104,101,32,67,111,112,121,114,105,103,104,116,32,110,111,116,105,99,101,44,32,100,105,115,99,108,97,105,109,101,114,44,32,97,110,100,32,108,105,99,101,110,115,101,32,109,97,121,32,110,111,116,32,98,101,32,114,101,109,111,118,101,100,0] /* 3. The Copyright not */, "i8", ALLOC_STATIC);
STRING_TABLE.__str569=allocate([111,114,32,97,108,116,101,114,101,100,32,102,114,111,109,32,97,110,121,32,115,111,117,114,99,101,44,32,98,105,110,97,114,121,44,32,111,114,32,97,108,116,101,114,101,100,32,115,111,117,114,99,101,32,100,105,115,116,114,105,98,117,116,105,111,110,46,0] /* or altered from any  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str570=allocate([84,111,111,32,109,97,110,121,32,73,68,65,84,39,115,32,102,111,117,110,100,0] /* Too many IDAT's foun */, "i8", ALLOC_STATIC);
STRING_TABLE.__str571=allocate([10,73,110,32,37,115,44,32,99,111,114,114,101,99,116,105,110,103,32,0] /* \0AIn %s, correcting */, "i8", ALLOC_STATIC);
STRING_TABLE.__str572=allocate([112,110,103,111,117,116,46,112,110,103,0] /* pngout.png\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str573=allocate([112,110,103,116,101,115,116,46,112,110,103,0] /* pngtest.png\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str574=allocate([109,110,103,111,117,116,46,109,110,103,0] /* mngout.mng\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str575=allocate([95,67,46,112,110,103,0] /* _C.png\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str576=allocate([112,110,103,99,114,117,115,104,46,98,97,107,0] /* pngcrush.bak\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str279=allocate([84,111,111,32,109,97,110,121,32,98,121,116,101,115,32,102,111,114,32,80,78,71,32,115,105,103,110,97,116,117,114,101,0] /* Too many bytes for P */, "i8", ALLOC_STATIC);
STRING_TABLE._png_sig_cmp_png_signature=allocate([137,80,78,71,13,10,26,10] /* \89PNG\0D\0A\1A\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1280=allocate([80,111,116,101,110,116,105,97,108,32,111,118,101,114,102,108,111,119,32,105,110,32,112,110,103,95,122,97,108,108,111,99,40,41,0] /* Potential overflow i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2281=allocate([65,112,112,108,105,99,97,116,105,111,110,32,98,117,105,108,116,32,119,105,116,104,32,108,105,98,112,110,103,45,0] /* Application built wi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3282=allocate([32,98,117,116,32,114,117,110,110,105,110,103,32,119,105,116,104,32,0] /*  but running with \0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8287=allocate([49,46,53,46,49,48,0] /* 1.5.10\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9288=allocate([32,108,105,98,112,110,103,32,118,101,114,115,105,111,110,32,49,46,53,46,49,48,32,45,32,77,97,114,99,104,32,50,57,44,32,50,48,49,50,10,10,0] /*  libpng version 1.5. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10289=allocate([73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,110,101,103,97,116,105,118,101,32,99,104,114,111,109,97,116,105,99,105,116,121,32,118,97,108,117,101,0] /* Ignoring attempt to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11290=allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,119,104,105,116,101,32,112,111,105,110,116,0] /* Invalid cHRM white p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12291=allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,114,101,100,32,112,111,105,110,116,0] /* Invalid cHRM red poi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13292=allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,103,114,101,101,110,32,112,111,105,110,116,0] /* Invalid cHRM green p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14293=allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,98,108,117,101,32,112,111,105,110,116,0] /* Invalid cHRM blue po */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15294=allocate([73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,99,72,82,77,32,82,71,66,32,116,114,105,97,110,103,108,101,32,119,105,116,104,32,122,101,114,111,32,97,114,101,97,0] /* Ignoring attempt to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16295=allocate([101,120,116,114,101,109,101,32,99,72,82,77,32,99,104,117,110,107,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,116,114,105,115,116,105,109,117,108,117,115,32,118,97,108,117,101,115,0] /* extreme cHRM chunk c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17296=allocate([105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,112,110,103,95,88,89,90,95,102,114,111,109,95,120,121,0] /* internal error in pn */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18297=allocate([73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0] /* Image width is zero  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19298=allocate([73,109,97,103,101,32,104,101,105,103,104,116,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0] /* Image height is zero */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20299=allocate([73,109,97,103,101,32,119,105,100,116,104,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0] /* Image width exceeds  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21300=allocate([73,109,97,103,101,32,104,101,105,103,104,116,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0] /* Image height exceeds */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22301=allocate([73,110,118,97,108,105,100,32,105,109,97,103,101,32,119,105,100,116,104,32,105,110,32,73,72,68,82,0] /* Invalid image width  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23302=allocate([73,110,118,97,108,105,100,32,105,109,97,103,101,32,104,101,105,103,104,116,32,105,110,32,73,72,68,82,0] /* Invalid image height */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24303=allocate([87,105,100,116,104,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,108,105,98,112,110,103,32,116,111,32,112,114,111,99,101,115,115,32,112,105,120,101,108,115,0] /* Width is too large f */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25304=allocate([73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,105,110,32,73,72,68,82,0] /* Invalid bit depth in */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26305=allocate([73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,32,105,110,32,73,72,68,82,0] /* Invalid color type i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27306=allocate([73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,47,98,105,116,32,100,101,112,116,104,32,99,111,109,98,105,110,97,116,105,111,110,32,105,110,32,73,72,68,82,0] /* Invalid color type/b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28307=allocate([85,110,107,110,111,119,110,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0] /* Unknown interlace me */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29308=allocate([85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0] /* Unknown compression  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30309=allocate([77,78,71,32,102,101,97,116,117,114,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,0] /* MNG features are not */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31310=allocate([85,110,107,110,111,119,110,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0] /* Unknown filter metho */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32311=allocate([73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0] /* Invalid filter metho */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33312=allocate([73,110,118,97,108,105,100,32,73,72,68,82,32,100,97,116,97,0] /* Invalid IHDR data\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34313=allocate([65,83,67,73,73,32,99,111,110,118,101,114,115,105,111,110,32,98,117,102,102,101,114,32,116,111,111,32,115,109,97,108,108,0] /* ASCII conversion buf */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36315=allocate([103,97,109,109,97,32,116,97,98,108,101,32,98,101,105,110,103,32,114,101,98,117,105,108,116,0] /* gamma table being re */, "i8", ALLOC_STATIC);
STRING_TABLE._png_format_number_digits=allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0] /* 0123456789ABCDEF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_formatted_warning_valid_parameters=allocate([49,50,51,52,53,54,55,56,57,0] /* 123456789\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1578=allocate([108,105,98,112,110,103,32,119,97,114,110,105,110,103,58,32,37,115,0] /* libpng warning: %s\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2579=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3580=allocate([108,105,98,112,110,103,32,101,114,114,111,114,58,32,37,115,0] /* libpng error: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4581=allocate([117,110,100,101,102,105,110,101,100,0] /* undefined\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_digit=allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70] /* 0123456789ABCDEF */, "i8", ALLOC_STATIC);
STRING_TABLE.__str636=allocate([79,117,116,32,111,102,32,77,101,109,111,114,121,0] /* Out of Memory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str674=allocate([49,46,50,46,54,0] /* 1.2.6\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1675=allocate([122,108,105,98,32,109,101,109,111,114,121,32,101,114,114,111,114,0] /* zlib memory error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2676=allocate([122,108,105,98,32,115,116,114,101,97,109,32,101,114,114,111,114,0] /* zlib stream error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3677=allocate([122,108,105,98,32,118,101,114,115,105,111,110,32,101,114,114,111,114,0] /* zlib version error\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4678=allocate([85,110,107,110,111,119,110,32,122,108,105,98,32,101,114,114,111,114,0] /* Unknown zlib error\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5679=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,73,68,65,84,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6680=allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,73,68,65,84,0] /* Missing PLTE before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7681=allocate([73,110,118,97,108,105,100,32,97,116,116,101,109,112,116,32,116,111,32,114,101,97,100,32,114,111,119,32,100,97,116,97,0] /* Invalid attempt to r */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8682=allocate([78,111,116,32,101,110,111,117,103,104,32,105,109,97,103,101,32,100,97,116,97,0] /* Not enough image dat */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9683=allocate([69,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0] /* Extra compressed dat */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10684=allocate([68,101,99,111,109,112,114,101,115,115,105,111,110,32,101,114,114,111,114,0] /* Decompression error\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11685=allocate([98,97,100,32,97,100,97,112,116,105,118,101,32,102,105,108,116,101,114,32,118,97,108,117,101,0] /* bad adaptive filter  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12686=allocate([115,101,113,117,101,110,116,105,97,108,32,114,111,119,32,111,118,101,114,102,108,111,119,0] /* sequential row overf */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13687=allocate([105,110,116,101,114,110,97,108,32,115,101,113,117,101,110,116,105,97,108,32,114,111,119,32,115,105,122,101,32,99,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,0] /* internal sequential  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15689=allocate([82,101,97,100,32,112,97,108,101,116,116,101,32,105,110,100,101,120,32,101,120,99,101,101,100,105,110,103,32,110,117,109,95,112,97,108,101,116,116,101,0] /* Read palette index e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16690=allocate([84,111,111,32,109,97,110,121,32,73,68,65,84,115,32,102,111,117,110,100,0] /* Too many IDATs found */, "i8", ALLOC_STATIC);
STRING_TABLE.__str704=allocate([67,97,108,108,32,116,111,32,78,85,76,76,32,114,101,97,100,32,102,117,110,99,116,105,111,110,0] /* Call to NULL read fu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1705=allocate([82,101,97,100,32,69,114,114,111,114,0] /* Read Error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2706=allocate([67,97,110,39,116,32,115,101,116,32,98,111,116,104,32,114,101,97,100,95,100,97,116,97,95,102,110,32,97,110,100,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,105,110,32,116,104,101,32,115,97,109,101,32,115,116,114,117,99,116,117,114,101,0] /* Can't set both read_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str709=allocate([67,97,110,39,116,32,100,105,115,99,97,114,100,32,99,114,105,116,105,99,97,108,32,100,97,116,97,32,111,110,32,67,82,67,32,101,114,114,111,114,0] /* Can't discard critic */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6715=allocate([105,110,118,97,108,105,100,32,101,114,114,111,114,32,97,99,116,105,111,110,32,116,111,32,114,103,98,95,116,111,95,103,114,97,121,0] /* invalid error action */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7716=allocate([105,103,110,111,114,105,110,103,32,111,117,116,32,111,102,32,114,97,110,103,101,32,114,103,98,95,116,111,95,103,114,97,121,32,99,111,101,102,102,105,99,105,101,110,116,115,0] /* ignoring out of rang */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10719=allocate([108,105,98,112,110,103,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,103,97,109,109,97,43,98,97,99,107,103,114,111,117,110,100,43,114,103,98,95,116,111,95,103,114,97,121,0] /* libpng does not supp */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11720=allocate([105,110,118,97,108,105,100,32,98,97,99,107,103,114,111,117,110,100,32,103,97,109,109,97,32,116,121,112,101,0] /* invalid background g */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12721=allocate([78,85,76,76,32,114,111,119,32,98,117,102,102,101,114,0] /* NULL row buffer\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13722=allocate([85,110,105,110,105,116,105,97,108,105,122,101,100,32,114,111,119,0] /* Uninitialized row\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14723=allocate([112,110,103,95,100,111,95,114,103,98,95,116,111,95,103,114,97,121,32,102,111,117,110,100,32,110,111,110,103,114,97,121,32,112,105,120,101,108,0] /* png_do_rgb_to_gray f */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15724=allocate([112,110,103,95,100,111,95,113,117,97,110,116,105,122,101,32,114,101,116,117,114,110,101,100,32,114,111,119,98,121,116,101,115,61,48,0] /* png_do_quantize retu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16725=allocate([112,110,103,95,100,111,95,101,110,99,111,100,101,95,97,108,112,104,97,58,32,117,110,101,120,112,101,99,116,101,100,32,99,97,108,108,0] /* png_do_encode_alpha: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str749=allocate([80,78,71,32,117,110,115,105,103,110,101,100,32,105,110,116,101,103,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* PNG unsigned integer */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1750=allocate([78,111,116,32,97,32,80,78,71,32,102,105,108,101,0] /* Not a PNG file\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2751=allocate([80,78,71,32,102,105,108,101,32,99,111,114,114,117,112,116,101,100,32,98,121,32,65,83,67,73,73,32,99,111,110,118,101,114,115,105,111,110,0] /* PNG file corrupted b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3752=allocate([67,82,67,32,101,114,114,111,114,0] /* CRC error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4753=allocate([105,110,118,97,108,105,100,32,99,104,117,110,107,108,101,110,103,116,104,0] /* invalid chunklength\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5754=allocate([69,120,99,101,101,100,101,100,32,115,105,122,101,32,108,105,109,105,116,32,119,104,105,108,101,32,101,120,112,97,110,100,105,110,103,32,99,104,117,110,107,0] /* Exceeded size limit  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6755=allocate([112,110,103,95,105,110,102,108,97,116,101,32,108,111,103,105,99,32,101,114,114,111,114,0] /* png_inflate logic er */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7756=allocate([78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,100,101,99,111,109,112,114,101,115,115,32,99,104,117,110,107,0] /* Not enough memory to */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8757=allocate([85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,64,49,0] /* Unknown compression  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9758=allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,73,72,68,82,0] /* Out of place IHDR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10759=allocate([73,110,118,97,108,105,100,32,73,72,68,82,32,99,104,117,110,107,0] /* Invalid IHDR chunk\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11760=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,80,76,84,69,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12761=allocate([73,110,118,97,108,105,100,32,80,76,84,69,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid PLTE after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13762=allocate([68,117,112,108,105,99,97,116,101,32,80,76,84,69,32,99,104,117,110,107,0] /* Duplicate PLTE chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14763=allocate([73,103,110,111,114,105,110,103,32,80,76,84,69,32,99,104,117,110,107,32,105,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0] /* Ignoring PLTE chunk  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15764=allocate([73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,99,104,117,110,107,0] /* Invalid palette chun */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16765=allocate([84,114,117,110,99,97,116,105,110,103,32,105,110,99,111,114,114,101,99,116,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Truncating incorrect */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17766=allocate([84,114,117,110,99,97,116,105,110,103,32,105,110,99,111,114,114,101,99,116,32,105,110,102,111,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Truncating incorrect */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18767=allocate([78,111,32,105,109,97,103,101,32,105,110,32,102,105,108,101,0] /* No image in file\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19768=allocate([73,110,99,111,114,114,101,99,116,32,73,69,78,68,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect IEND chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20769=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,103,65,77,65,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21770=allocate([73,110,118,97,108,105,100,32,103,65,77,65,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid gAMA after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22771=allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,103,65,77,65,32,99,104,117,110,107,0] /* Out of place gAMA ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23772=allocate([68,117,112,108,105,99,97,116,101,32,103,65,77,65,32,99,104,117,110,107,0] /* Duplicate gAMA chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24773=allocate([73,110,99,111,114,114,101,99,116,32,103,65,77,65,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect gAMA chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25774=allocate([73,103,110,111,114,105,110,103,32,103,65,77,65,32,99,104,117,110,107,32,119,105,116,104,32,111,117,116,32,111,102,32,114,97,110,103,101,32,103,97,109,109,97,0] /* Ignoring gAMA chunk  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26775=allocate([73,103,110,111,114,105,110,103,32,105,110,99,111,114,114,101,99,116,32,103,65,77,65,32,118,97,108,117,101,32,64,49,32,119,104,101,110,32,115,82,71,66,32,105,115,32,97,108,115,111,32,112,114,101,115,101,110,116,0] /* Ignoring incorrect g */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27776=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,66,73,84,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28777=allocate([73,110,118,97,108,105,100,32,115,66,73,84,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid sBIT after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29778=allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,115,66,73,84,32,99,104,117,110,107,0] /* Out of place sBIT ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30779=allocate([68,117,112,108,105,99,97,116,101,32,115,66,73,84,32,99,104,117,110,107,0] /* Duplicate sBIT chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31780=allocate([73,110,99,111,114,114,101,99,116,32,115,66,73,84,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect sBIT chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32781=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,99,72,82,77,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33782=allocate([73,110,118,97,108,105,100,32,99,72,82,77,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid cHRM after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34783=allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,99,72,82,77,32,99,104,117,110,107,0] /* Out of place cHRM ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35784=allocate([68,117,112,108,105,99,97,116,101,32,99,72,82,77,32,99,104,117,110,107,0] /* Duplicate cHRM chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36785=allocate([73,110,99,111,114,114,101,99,116,32,99,72,82,77,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect cHRM chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37786=allocate([73,103,110,111,114,105,110,103,32,99,72,82,77,32,99,104,117,110,107,32,119,105,116,104,32,110,101,103,97,116,105,118,101,32,99,104,114,111,109,97,116,105,99,105,116,105,101,115,0] /* Ignoring cHRM chunk  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38787=allocate([73,103,110,111,114,105,110,103,32,105,110,99,111,114,114,101,99,116,32,99,72,82,77,32,119,104,105,116,101,40,64,49,44,64,50,41,32,114,40,64,51,44,64,52,41,103,40,64,53,44,64,54,41,98,40,64,55,44,64,56,41,32,119,104,101,110,32,115,82,71,66,32,105,115,32,97,108,115,111,32,112,114,101,115,101,110,116,0] /* Ignoring incorrect c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39788=allocate([105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,32,99,72,82,77,32,99,111,101,102,102,105,99,105,101,110,116,115,0] /* internal error handl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40789=allocate([105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,32,99,72,82,77,45,62,88,89,90,0] /* internal error handl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41790=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,82,71,66,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42791=allocate([73,110,118,97,108,105,100,32,115,82,71,66,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid sRGB after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43792=allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,115,82,71,66,32,99,104,117,110,107,0] /* Out of place sRGB ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44793=allocate([68,117,112,108,105,99,97,116,101,32,115,82,71,66,32,99,104,117,110,107,0] /* Duplicate sRGB chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45794=allocate([73,110,99,111,114,114,101,99,116,32,115,82,71,66,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect sRGB chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46795=allocate([85,110,107,110,111,119,110,32,115,82,71,66,32,105,110,116,101,110,116,0] /* Unknown sRGB intent\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47796=allocate([73,103,110,111,114,105,110,103,32,105,110,99,111,114,114,101,99,116,32,99,72,82,77,32,118,97,108,117,101,32,119,104,101,110,32,115,82,71,66,32,105,115,32,97,108,115,111,32,112,114,101,115,101,110,116,0] /* Ignoring incorrect c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48797=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,105,67,67,80,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49798=allocate([73,110,118,97,108,105,100,32,105,67,67,80,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid iCCP after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50799=allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,105,67,67,80,32,99,104,117,110,107,0] /* Out of place iCCP ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51800=allocate([68,117,112,108,105,99,97,116,101,32,105,67,67,80,32,99,104,117,110,107,0] /* Duplicate iCCP chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52801=allocate([77,97,108,102,111,114,109,101,100,32,105,67,67,80,32,99,104,117,110,107,0] /* Malformed iCCP chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53802=allocate([73,103,110,111,114,105,110,103,32,110,111,110,122,101,114,111,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0] /* Ignoring nonzero com */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54803=allocate([80,114,111,102,105,108,101,32,115,105,122,101,32,102,105,101,108,100,32,109,105,115,115,105,110,103,32,102,114,111,109,32,105,67,67,80,32,99,104,117,110,107,0] /* Profile size field m */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55804=allocate([73,103,110,111,114,105,110,103,32,105,67,67,80,32,99,104,117,110,107,32,119,105,116,104,32,100,101,99,108,97,114,101,100,32,115,105,122,101,32,61,32,64,49,32,97,110,100,32,97,99,116,117,97,108,32,108,101,110,103,116,104,32,61,32,64,50,0] /* Ignoring iCCP chunk  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56805=allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,115,80,76,84,0] /* No space in chunk ca */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57806=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,80,76,84,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58807=allocate([73,110,118,97,108,105,100,32,115,80,76,84,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid sPLT after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59808=allocate([109,97,108,102,111,114,109,101,100,32,115,80,76,84,32,99,104,117,110,107,0] /* malformed sPLT chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str60809=allocate([115,80,76,84,32,99,104,117,110,107,32,104,97,115,32,98,97,100,32,108,101,110,103,116,104,0] /* sPLT chunk has bad l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61810=allocate([115,80,76,84,32,99,104,117,110,107,32,116,111,111,32,108,111,110,103,0] /* sPLT chunk too long\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str62811=allocate([115,80,76,84,32,99,104,117,110,107,32,114,101,113,117,105,114,101,115,32,116,111,111,32,109,117,99,104,32,109,101,109,111,114,121,0] /* sPLT chunk requires  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63812=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,116,82,78,83,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64813=allocate([73,110,118,97,108,105,100,32,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid tRNS after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str65814=allocate([68,117,112,108,105,99,97,116,101,32,116,82,78,83,32,99,104,117,110,107,0] /* Duplicate tRNS chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str66815=allocate([73,110,99,111,114,114,101,99,116,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect tRNS chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str67816=allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,116,82,78,83,0] /* Missing PLTE before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str68817=allocate([90,101,114,111,32,108,101,110,103,116,104,32,116,82,78,83,32,99,104,117,110,107,0] /* Zero length tRNS chu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str69818=allocate([116,82,78,83,32,99,104,117,110,107,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0] /* tRNS chunk not allow */, "i8", ALLOC_STATIC);
STRING_TABLE.__str70819=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,98,75,71,68,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71820=allocate([73,110,118,97,108,105,100,32,98,75,71,68,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid bKGD after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72821=allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,98,75,71,68,0] /* Missing PLTE before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str73822=allocate([68,117,112,108,105,99,97,116,101,32,98,75,71,68,32,99,104,117,110,107,0] /* Duplicate bKGD chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str74823=allocate([73,110,99,111,114,114,101,99,116,32,98,75,71,68,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect bKGD chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str75824=allocate([73,110,99,111,114,114,101,99,116,32,98,75,71,68,32,99,104,117,110,107,32,105,110,100,101,120,32,118,97,108,117,101,0] /* Incorrect bKGD chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str76825=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,104,73,83,84,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str77826=allocate([73,110,118,97,108,105,100,32,104,73,83,84,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid hIST after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str78827=allocate([77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,104,73,83,84,0] /* Missing PLTE before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str79828=allocate([68,117,112,108,105,99,97,116,101,32,104,73,83,84,32,99,104,117,110,107,0] /* Duplicate hIST chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str80829=allocate([73,110,99,111,114,114,101,99,116,32,104,73,83,84,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect hIST chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81830=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,112,72,89,115,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str82831=allocate([73,110,118,97,108,105,100,32,112,72,89,115,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid pHYs after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str83832=allocate([68,117,112,108,105,99,97,116,101,32,112,72,89,115,32,99,104,117,110,107,0] /* Duplicate pHYs chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str84833=allocate([73,110,99,111,114,114,101,99,116,32,112,72,89,115,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect pHYs chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str85834=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,111,70,70,115,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str86835=allocate([73,110,118,97,108,105,100,32,111,70,70,115,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid oFFs after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str87836=allocate([68,117,112,108,105,99,97,116,101,32,111,70,70,115,32,99,104,117,110,107,0] /* Duplicate oFFs chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str88837=allocate([73,110,99,111,114,114,101,99,116,32,111,70,70,115,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect oFFs chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str89838=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,112,67,65,76,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str90839=allocate([73,110,118,97,108,105,100,32,112,67,65,76,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid pCAL after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str91840=allocate([68,117,112,108,105,99,97,116,101,32,112,67,65,76,32,99,104,117,110,107,0] /* Duplicate pCAL chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str92841=allocate([78,111,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,117,114,112,111,115,101,0] /* No memory for pCAL p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str93842=allocate([73,110,118,97,108,105,100,32,112,67,65,76,32,100,97,116,97,0] /* Invalid pCAL data\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str94843=allocate([73,110,118,97,108,105,100,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,115,32,102,111,114,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0] /* Invalid pCAL paramet */, "i8", ALLOC_STATIC);
STRING_TABLE.__str95844=allocate([85,110,114,101,99,111,103,110,105,122,101,100,32,101,113,117,97,116,105,111,110,32,116,121,112,101,32,102,111,114,32,112,67,65,76,32,99,104,117,110,107,0] /* Unrecognized equatio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str96845=allocate([78,111,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,115,0] /* No memory for pCAL p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str97846=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,67,65,76,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str98847=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,97,102,116,101,114,32,73,68,65,84,0] /* Invalid sCAL after I */, "i8", ALLOC_STATIC);
STRING_TABLE.__str99848=allocate([68,117,112,108,105,99,97,116,101,32,115,67,65,76,32,99,104,117,110,107,0] /* Duplicate sCAL chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str100849=allocate([115,67,65,76,32,99,104,117,110,107,32,116,111,111,32,115,104,111,114,116,0] /* sCAL chunk too short */, "i8", ALLOC_STATIC);
STRING_TABLE.__str101850=allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,67,65,76,32,99,104,117,110,107,0] /* Out of memory while  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str102851=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,105,103,110,111,114,101,100,58,32,105,110,118,97,108,105,100,32,117,110,105,116,0] /* Invalid sCAL ignored */, "i8", ALLOC_STATIC);
STRING_TABLE.__str103852=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,99,104,117,110,107,32,105,103,110,111,114,101,100,58,32,98,97,100,32,119,105,100,116,104,32,102,111,114,109,97,116,0] /* Invalid sCAL chunk i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str104853=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,99,104,117,110,107,32,105,103,110,111,114,101,100,58,32,110,111,110,45,112,111,115,105,116,105,118,101,32,119,105,100,116,104,0] /* Invalid sCAL chunk i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str105854=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,99,104,117,110,107,32,105,103,110,111,114,101,100,58,32,98,97,100,32,104,101,105,103,104,116,32,102,111,114,109,97,116,0] /* Invalid sCAL chunk i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str106855=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,99,104,117,110,107,32,105,103,110,111,114,101,100,58,32,110,111,110,45,112,111,115,105,116,105,118,101,32,104,101,105,103,104,116,0] /* Invalid sCAL chunk i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str107856=allocate([79,117,116,32,111,102,32,112,108,97,99,101,32,116,73,77,69,32,99,104,117,110,107,0] /* Out of place tIME ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str108857=allocate([68,117,112,108,105,99,97,116,101,32,116,73,77,69,32,99,104,117,110,107,0] /* Duplicate tIME chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str109858=allocate([73,110,99,111,114,114,101,99,116,32,116,73,77,69,32,99,104,117,110,107,32,108,101,110,103,116,104,0] /* Incorrect tIME chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str110859=allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,116,69,88,116,0] /* No space in chunk ca */, "i8", ALLOC_STATIC);
STRING_TABLE.__str111860=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,116,69,88,116,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str112861=allocate([78,111,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0] /* No memory to process */, "i8", ALLOC_STATIC);
STRING_TABLE.__str113862=allocate([78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0] /* Not enough memory to */, "i8", ALLOC_STATIC);
STRING_TABLE.__str114863=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str115864=allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,122,84,88,116,0] /* No space in chunk ca */, "i8", ALLOC_STATIC);
STRING_TABLE.__str116865=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,122,84,88,116,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str117866=allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,112,114,111,99,101,115,115,105,110,103,32,122,84,88,116,32,99,104,117,110,107,0] /* Out of memory proces */, "i8", ALLOC_STATIC);
STRING_TABLE.__str118867=allocate([84,114,117,110,99,97,116,101,100,32,122,84,88,116,32,99,104,117,110,107,0] /* Truncated zTXt chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str119868=allocate([85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,32,122,84,88,116,32,99,104,117,110,107,0] /* Unknown compression  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str120869=allocate([78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,122,84,88,116,32,99,104,117,110,107,0] /* Not enough memory to */, "i8", ALLOC_STATIC);
STRING_TABLE.__str121870=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,115,116,111,114,101,32,122,84,88,116,32,99,104,117,110,107,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str122871=allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,105,84,88,116,0] /* No space in chunk ca */, "i8", ALLOC_STATIC);
STRING_TABLE.__str123872=allocate([77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,105,84,88,116,0] /* Missing IHDR before  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str124873=allocate([78,111,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,84,88,116,32,99,104,117,110,107,0] /* No memory to process */, "i8", ALLOC_STATIC);
STRING_TABLE.__str125874=allocate([84,114,117,110,99,97,116,101,100,32,105,84,88,116,32,99,104,117,110,107,0] /* Truncated iTXt chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str126875=allocate([85,110,107,110,111,119,110,32,105,84,88,116,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,111,114,32,109,101,116,104,111,100,0] /* Unknown iTXt compres */, "i8", ALLOC_STATIC);
STRING_TABLE.__str127876=allocate([77,97,108,102,111,114,109,101,100,32,105,84,88,116,32,99,104,117,110,107,0] /* Malformed iTXt chunk */, "i8", ALLOC_STATIC);
STRING_TABLE.__str128877=allocate([78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,84,88,116,32,99,104,117,110,107,0] /* Not enough memory to */, "i8", ALLOC_STATIC);
STRING_TABLE.__str129878=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,115,116,111,114,101,32,105,84,88,116,32,99,104,117,110,107,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str130879=allocate([78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0] /* No space in chunk ca */, "i8", ALLOC_STATIC);
STRING_TABLE.__str131880=allocate([117,110,107,110,111,119,110,32,99,114,105,116,105,99,97,108,32,99,104,117,110,107,0] /* unknown critical chu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str132881=allocate([101,114,114,111,114,32,105,110,32,117,115,101,114,32,99,104,117,110,107,0] /* error in user chunk\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str133882=allocate([105,110,118,97,108,105,100,32,99,104,117,110,107,32,116,121,112,101,0] /* invalid chunk type\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str134883=allocate([105,110,116,101,114,110,97,108,32,114,111,119,32,108,111,103,105,99,32,101,114,114,111,114,0] /* internal row logic e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str135884=allocate([105,110,116,101,114,110,97,108,32,114,111,119,32,115,105,122,101,32,99,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,0] /* internal row size ca */, "i8", ALLOC_STATIC);
STRING_TABLE.__str136885=allocate([105,110,116,101,114,110,97,108,32,114,111,119,32,119,105,100,116,104,32,101,114,114,111,114,0] /* internal row width e */, "i8", ALLOC_STATIC);
_png_combine_row_row_mask=allocate([16843009, 0, 0, 0, 269488144, 0, 0, 0, 286331153, 0, 0, 0, 1145324612, 0, 0, 0, 1431655765, 0, 0, 0, -1431655766, 0, 0, 0, 196611, 0, 0, 0, 50332416, 0, 0, 0, 50529027, 0, 0, 0, 808464432, 0, 0, 0, 858993459, 0, 0, 0, -858993460, 0, 0, 0, 15, 0, 0, 0, 983040, 0, 0, 0, 983055, 0, 0, 0, 251662080, 0, 0, 0, 252645135, 0, 0, 0, -252645136, 0, 0, 0, -2139062144, 0, 0, 0, 134744072, 0, 0, 0, -2004318072, 0, 0, 0, 572662306, 0, 0, 0, -1431655766, 0, 0, 0, 1431655765, 0, 0, 0, 12583104, 0, 0, 0, -1073692672, 0, 0, 0, -1061109568, 0, 0, 0, 202116108, 0, 0, 0, -858993460, 0, 0, 0, 858993459, 0, 0, 0, 240, 0, 0, 0, 15728640, 0, 0, 0, 15728880, 0, 0, 0, -268374016, 0, 0, 0, -252645136, 0, 0, 0, 252645135, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_png_combine_row_display_mask=allocate([-252645136, 0, 0, 0, 1145324612, 0, 0, 0, -1431655766, 0, 0, 0, -16711936, 0, 0, 0, 808464432, 0, 0, 0, -858993460, 0, 0, 0, -65536, 0, 0, 0, 251662080, 0, 0, 0, -252645136, 0, 0, 0, 252645135, 0, 0, 0, 572662306, 0, 0, 0, 1431655765, 0, 0, 0, -16711936, 0, 0, 0, 202116108, 0, 0, 0, 858993459, 0, 0, 0, -65536, 0, 0, 0, -268374016, 0, 0, 0, 252645135, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str137886=allocate([105,110,118,97,108,105,100,32,117,115,101,114,32,116,114,97,110,115,102,111,114,109,32,112,105,120,101,108,32,100,101,112,116,104,0] /* invalid user transfo */, "i8", ALLOC_STATIC);
_png_do_read_interlace_png_pass_inc=allocate([8, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE._png_read_finish_row_png_pass_start=allocate([0,4,0,2,0,1,0] /* \00\04\00\02\00\01\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_read_finish_row_png_pass_inc=allocate([8,8,4,4,2,2,1] /* \08\08\04\04\02\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_read_finish_row_png_pass_ystart=allocate([0,0,4,0,2,0,1] /* \00\00\04\00\02\00\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_read_finish_row_png_pass_yinc=allocate([8,8,8,4,4,2,2] /* \08\08\08\04\04\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str138887=allocate([78,111,116,32,101,110,111,117,103,104,32,105,109,97,103,101,32,100,97,116,97,0] /* Not enough image dat */, "i8", ALLOC_STATIC);
STRING_TABLE.__str139888=allocate([69,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0] /* Extra compressed dat */, "i8", ALLOC_STATIC);
STRING_TABLE.__str140889=allocate([68,101,99,111,109,112,114,101,115,115,105,111,110,32,69,114,114,111,114,0] /* Decompression Error\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str141890=allocate([69,120,116,114,97,32,99,111,109,112,114,101,115,115,105,111,110,32,100,97,116,97,0] /* Extra compression da */, "i8", ALLOC_STATIC);
STRING_TABLE._png_read_start_row_png_pass_start=allocate([0,4,0,2,0,1,0] /* \00\04\00\02\00\01\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_read_start_row_png_pass_inc=allocate([8,8,4,4,2,2,1] /* \08\08\04\04\02\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_read_start_row_png_pass_ystart=allocate([0,0,4,0,2,0,1] /* \00\00\04\00\02\00\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_read_start_row_png_pass_yinc=allocate([8,8,8,4,4,2,2] /* \08\08\08\04\04\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str142891=allocate([82,111,119,32,104,97,115,32,116,111,111,32,109,97,110,121,32,98,121,116,101,115,32,116,111,32,97,108,108,111,99,97,116,101,32,105,110,32,109,101,109,111,114,121,0] /* Row has too many byt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str143892=allocate([80,78,71,32,102,105,120,101,100,32,112,111,105,110,116,32,105,110,116,101,103,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* PNG fixed point inte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str144893=allocate([66,117,102,102,101,114,32,101,114,114,111,114,32,105,110,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,0] /* Buffer error in comp */, "i8", ALLOC_STATIC);
STRING_TABLE.__str145894=allocate([68,97,116,97,32,101,114,114,111,114,32,105,110,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,0] /* Data error in compre */, "i8", ALLOC_STATIC);
STRING_TABLE.__str146895=allocate([73,110,99,111,109,112,108,101,116,101,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,0] /* Incomplete compresse */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10970=allocate([79,117,116,32,111,102,32,114,97,110,103,101,32,103,97,109,109,97,32,118,97,108,117,101,32,105,103,110,111,114,101,100,0] /* Out of range gamma v */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12972=allocate([73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,115,105,122,101,44,32,104,73,83,84,32,97,108,108,111,99,97,116,105,111,110,32,115,107,105,112,112,101,100,0] /* Invalid palette size */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13973=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,104,73,83,84,32,99,104,117,110,107,32,100,97,116,97,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14974=allocate([73,110,118,97,108,105,100,32,112,67,65,76,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0] /* Invalid pCAL equatio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15975=allocate([73,110,118,97,108,105,100,32,102,111,114,109,97,116,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0] /* Invalid format for p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16976=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,117,114,112,111,115,101,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17977=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,117,110,105,116,115,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18978=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,115,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19979=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20980=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,117,110,105,116,0] /* Invalid sCAL unit\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21981=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,119,105,100,116,104,0] /* Invalid sCAL width\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22982=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,104,101,105,103,104,116,0] /* Invalid sCAL height\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23983=allocate([77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,67,65,76,0] /* Memory allocation fa */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24984=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,119,105,100,116,104,32,105,103,110,111,114,101,100,0] /* Invalid sCAL width i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25985=allocate([73,110,118,97,108,105,100,32,115,67,65,76,32,104,101,105,103,104,116,32,105,103,110,111,114,101,100,0] /* Invalid sCAL height  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26986=allocate([73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,108,101,110,103,116,104,0] /* Invalid palette leng */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27987=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,67,67,80,32,99,104,117,110,107,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28988=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,67,67,80,32,112,114,111,102,105,108,101,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29989=allocate([73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,115,116,111,114,101,32,116,101,120,116,0] /* Insufficient memory  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30990=allocate([116,101,120,116,32,99,111,109,112,114,101,115,115,105,111,110,32,109,111,100,101,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* text compression mod */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31991=allocate([73,103,110,111,114,105,110,103,32,105,110,118,97,108,105,100,32,116,105,109,101,32,118,97,108,117,101,0] /* Ignoring invalid tim */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32992=allocate([116,82,78,83,32,99,104,117,110,107,32,104,97,115,32,111,117,116,45,111,102,45,114,97,110,103,101,32,115,97,109,112,108,101,115,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0] /* tRNS chunk has out-o */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33993=allocate([78,111,32,109,101,109,111,114,121,32,102,111,114,32,115,80,76,84,32,112,97,108,101,116,116,101,115,0] /* No memory for sPLT p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34994=allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,80,76,84,32,99,104,117,110,107,0] /* Out of memory while  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35995=allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0] /* Out of memory while  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36996=allocate([65,116,116,101,109,112,116,32,116,111,32,115,101,116,32,98,117,102,102,101,114,32,115,105,122,101,32,98,101,121,111,110,100,32,109,97,120,32,105,103,110,111,114,101,100,0] /* Attempt to set buffe */, "i8", ALLOC_STATIC);
STRING_TABLE._onebppswaptable=allocate([0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255] /* \00\80@\C0 \A0`\E0\1 */, "i8", ALLOC_STATIC);
STRING_TABLE._twobppswaptable=allocate([0,64,128,192,16,80,144,208,32,96,160,224,48,112,176,240,4,68,132,196,20,84,148,212,36,100,164,228,52,116,180,244,8,72,136,200,24,88,152,216,40,104,168,232,56,120,184,248,12,76,140,204,28,92,156,220,44,108,172,236,60,124,188,252,1,65,129,193,17,81,145,209,33,97,161,225,49,113,177,241,5,69,133,197,21,85,149,213,37,101,165,229,53,117,181,245,9,73,137,201,25,89,153,217,41,105,169,233,57,121,185,249,13,77,141,205,29,93,157,221,45,109,173,237,61,125,189,253,2,66,130,194,18,82,146,210,34,98,162,226,50,114,178,242,6,70,134,198,22,86,150,214,38,102,166,230,54,118,182,246,10,74,138,202,26,90,154,218,42,106,170,234,58,122,186,250,14,78,142,206,30,94,158,222,46,110,174,238,62,126,190,254,3,67,131,195,19,83,147,211,35,99,163,227,51,115,179,243,7,71,135,199,23,87,151,215,39,103,167,231,55,119,183,247,11,75,139,203,27,91,155,219,43,107,171,235,59,123,187,251,15,79,143,207,31,95,159,223,47,111,175,239,63,127,191,255] /* \00@\80\C0\10P\90\D0 */, "i8", ALLOC_STATIC);
STRING_TABLE._fourbppswaptable=allocate([0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240,1,17,33,49,65,81,97,113,129,145,161,177,193,209,225,241,2,18,34,50,66,82,98,114,130,146,162,178,194,210,226,242,3,19,35,51,67,83,99,115,131,147,163,179,195,211,227,243,4,20,36,52,68,84,100,116,132,148,164,180,196,212,228,244,5,21,37,53,69,85,101,117,133,149,165,181,197,213,229,245,6,22,38,54,70,86,102,118,134,150,166,182,198,214,230,246,7,23,39,55,71,87,103,119,135,151,167,183,199,215,231,247,8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,9,25,41,57,73,89,105,121,137,153,169,185,201,217,233,249,10,26,42,58,74,90,106,122,138,154,170,186,202,218,234,250,11,27,43,59,75,91,107,123,139,155,171,187,203,219,235,251,12,28,44,60,76,92,108,124,140,156,172,188,204,220,236,252,13,29,45,61,77,93,109,125,141,157,173,189,205,221,237,253,14,30,46,62,78,94,110,126,142,158,174,190,206,222,238,254,15,31,47,63,79,95,111,127,143,159,175,191,207,223,239,255] /* \00\10 0@P`p\80\90\A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1085=allocate([67,97,108,108,32,116,111,32,78,85,76,76,32,119,114,105,116,101,32,102,117,110,99,116,105,111,110,0] /* Call to NULL write f */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11086=allocate([87,114,105,116,101,32,69,114,114,111,114,0] /* Write Error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21087=allocate([67,97,110,39,116,32,115,101,116,32,98,111,116,104,32,114,101,97,100,95,100,97,116,97,95,102,110,32,97,110,100,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,105,110,32,116,104,101,32,115,97,109,101,32,115,116,114,117,99,116,117,114,101,0] /* Can't set both read_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1090=allocate([77,78,71,32,102,101,97,116,117,114,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,0] /* MNG features are not */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11091=allocate([87,114,105,116,105,110,103,32,122,101,114,111,45,108,101,110,103,116,104,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0] /* Writing zero-length  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21092=allocate([86,97,108,105,100,32,112,97,108,101,116,116,101,32,114,101,113,117,105,114,101,100,32,102,111,114,32,112,97,108,101,116,116,101,100,32,105,109,97,103,101,115,0] /* Valid palette requir */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31093=allocate([78,111,32,73,68,65,84,115,32,119,114,105,116,116,101,110,32,105,110,116,111,32,102,105,108,101,0] /* No IDATs written int */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41094=allocate([87,114,111,116,101,32,112,97,108,101,116,116,101,32,105,110,100,101,120,32,101,120,99,101,101,100,105,110,103,32,110,117,109,95,112,97,108,101,116,116,101,0] /* Wrote palette index  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51095=allocate([112,110,103,95,119,114,105,116,101,95,105,110,102,111,32,119,97,115,32,110,101,118,101,114,32,99,97,108,108,101,100,32,98,101,102,111,114,101,32,112,110,103,95,119,114,105,116,101,95,114,111,119,0] /* png_write_info was n */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61096=allocate([105,110,116,101,114,110,97,108,32,119,114,105,116,101,32,116,114,97,110,115,102,111,114,109,32,108,111,103,105,99,32,101,114,114,111,114,0] /* internal write trans */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71097=allocate([122,108,105,98,32,101,114,114,111,114,0] /* zlib error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81098=allocate([85,110,107,110,111,119,110,32,114,111,119,32,102,105,108,116,101,114,32,102,111,114,32,109,101,116,104,111,100,32,48,0] /* Unknown row filter f */, "i8", ALLOC_STATIC);
STRING_TABLE.__str91099=allocate([67,97,110,39,116,32,97,100,100,32,85,112,32,102,105,108,116,101,114,32,97,102,116,101,114,32,115,116,97,114,116,105,110,103,0] /* Can't add Up filter  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str101100=allocate([67,97,110,39,116,32,97,100,100,32,65,118,101,114,97,103,101,32,102,105,108,116,101,114,32,97,102,116,101,114,32,115,116,97,114,116,105,110,103,0] /* Can't add Average fi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str111101=allocate([67,97,110,39,116,32,97,100,100,32,80,97,101,116,104,32,102,105,108,116,101,114,32,97,102,116,101,114,32,115,116,97,114,116,105,110,103,0] /* Can't add Paeth filt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str121102=allocate([85,110,107,110,111,119,110,32,99,117,115,116,111,109,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0] /* Unknown custom filte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str131103=allocate([79,110,108,121,32,99,111,109,112,114,101,115,115,105,111,110,32,119,105,110,100,111,119,115,32,60,61,32,51,50,107,32,115,117,112,112,111,114,116,101,100,32,98,121,32,80,78,71,0] /* Only compression win */, "i8", ALLOC_STATIC);
STRING_TABLE.__str141104=allocate([79,110,108,121,32,99,111,109,112,114,101,115,115,105,111,110,32,119,105,110,100,111,119,115,32,62,61,32,50,53,54,32,115,117,112,112,111,114,116,101,100,32,98,121,32,80,78,71,0] /* Only compression win */, "i8", ALLOC_STATIC);
STRING_TABLE.__str151105=allocate([67,111,109,112,114,101,115,115,105,111,110,32,119,105,110,100,111,119,32,105,115,32,98,101,105,110,103,32,114,101,115,101,116,32,116,111,32,53,49,50,0] /* Compression window i */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_sig_png_signature=allocate([137,80,78,71,13,10,26,10] /* \89PNG\0D\0A\1A\0A */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1133=allocate([73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,103,114,97,121,115,99,97,108,101,32,105,109,97,103,101,0] /* Invalid bit depth fo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11134=allocate([73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,82,71,66,32,105,109,97,103,101,0] /* Invalid bit depth fo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21135=allocate([73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,112,97,108,101,116,116,101,100,32,105,109,97,103,101,0] /* Invalid bit depth fo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31136=allocate([73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,103,114,97,121,115,99,97,108,101,43,97,108,112,104,97,32,105,109,97,103,101,0] /* Invalid bit depth fo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41137=allocate([73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,82,71,66,65,32,105,109,97,103,101,0] /* Invalid bit depth fo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51138=allocate([73,110,118,97,108,105,100,32,105,109,97,103,101,32,99,111,108,111,114,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0] /* Invalid image color  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61139=allocate([73,110,118,97,108,105,100,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0] /* Invalid compression  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71140=allocate([73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0] /* Invalid filter type  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81141=allocate([73,110,118,97,108,105,100,32,105,110,116,101,114,108,97,99,101,32,116,121,112,101,32,115,112,101,99,105,102,105,101,100,0] /* Invalid interlace ty */, "i8", ALLOC_STATIC);
STRING_TABLE.__str91142=allocate([73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,99,111,108,111,114,115,32,105,110,32,112,97,108,101,116,116,101,0] /* Invalid number of co */, "i8", ALLOC_STATIC);
STRING_TABLE.__str101143=allocate([73,103,110,111,114,105,110,103,32,114,101,113,117,101,115,116,32,116,111,32,119,114,105,116,101,32,97,32,80,76,84,69,32,99,104,117,110,107,32,105,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0] /* Ignoring request to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str111144=allocate([73,110,118,97,108,105,100,32,122,108,105,98,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,111,114,32,102,108,97,103,115,32,105,110,32,73,68,65,84,0] /* Invalid zlib compres */, "i8", ALLOC_STATIC);
STRING_TABLE.__str121145=allocate([73,110,118,97,108,105,100,32,115,82,71,66,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,32,115,112,101,99,105,102,105,101,100,0] /* Invalid sRGB renderi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str131146=allocate([85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0] /* Unknown compression  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str141147=allocate([69,109,98,101,100,100,101,100,32,112,114,111,102,105,108,101,32,108,101,110,103,116,104,32,105,110,32,105,67,67,80,32,99,104,117,110,107,32,105,115,32,110,101,103,97,116,105,118,101,0] /* Embedded profile len */, "i8", ALLOC_STATIC);
STRING_TABLE.__str151148=allocate([69,109,98,101,100,100,101,100,32,112,114,111,102,105,108,101,32,108,101,110,103,116,104,32,116,111,111,32,108,97,114,103,101,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0] /* Embedded profile len */, "i8", ALLOC_STATIC);
STRING_TABLE.__str161149=allocate([84,114,117,110,99,97,116,105,110,103,32,112,114,111,102,105,108,101,32,116,111,32,97,99,116,117,97,108,32,108,101,110,103,116,104,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0] /* Truncating profile t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str171150=allocate([73,110,118,97,108,105,100,32,115,66,73,84,32,100,101,112,116,104,32,115,112,101,99,105,102,105,101,100,0] /* Invalid sBIT depth s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str181151=allocate([73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,116,114,97,110,115,112,97,114,101,110,116,32,99,111,108,111,114,115,32,115,112,101,99,105,102,105,101,100,0] /* Invalid number of tr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str191152=allocate([73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,116,82,78,83,32,99,104,117,110,107,32,111,117,116,45,111,102,45,114,97,110,103,101,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0] /* Ignoring attempt to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str201153=allocate([73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,49,54,45,98,105,116,32,116,82,78,83,32,99,104,117,110,107,32,119,104,101,110,32,98,105,116,95,100,101,112,116,104,32,105,115,32,56,0] /* Ignoring attempt to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str211154=allocate([67,97,110,39,116,32,119,114,105,116,101,32,116,82,78,83,32,119,105,116,104,32,97,110,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0] /* Can't write tRNS wit */, "i8", ALLOC_STATIC);
STRING_TABLE.__str221155=allocate([73,110,118,97,108,105,100,32,98,97,99,107,103,114,111,117,110,100,32,112,97,108,101,116,116,101,32,105,110,100,101,120,0] /* Invalid background p */, "i8", ALLOC_STATIC);
STRING_TABLE.__str231156=allocate([73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,49,54,45,98,105,116,32,98,75,71,68,32,99,104,117,110,107,32,119,104,101,110,32,98,105,116,95,100,101,112,116,104,32,105,115,32,56,0] /* Ignoring attempt to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str241157=allocate([73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,98,75,71,68,32,99,104,117,110,107,32,111,117,116,45,111,102,45,114,97,110,103,101,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0] /* Ignoring attempt to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str251158=allocate([73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,104,105,115,116,111,103,114,97,109,32,101,110,116,114,105,101,115,32,115,112,101,99,105,102,105,101,100,0] /* Invalid number of hi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str261159=allocate([122,101,114,111,32,108,101,110,103,116,104,32,107,101,121,119,111,114,100,0] /* zero length keyword\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str271160=allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,105,110,103,32,107,101,121,119,111,114,100,0] /* Out of memory while  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str281161=allocate([105,110,118,97,108,105,100,32,107,101,121,119,111,114,100,32,99,104,97,114,97,99,116,101,114,32,48,120,64,49,0] /* invalid keyword char */, "i8", ALLOC_STATIC);
STRING_TABLE.__str291162=allocate([116,114,97,105,108,105,110,103,32,115,112,97,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,107,101,121,119,111,114,100,0] /* trailing spaces remo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str301163=allocate([108,101,97,100,105,110,103,32,115,112,97,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,107,101,121,119,111,114,100,0] /* leading spaces remov */, "i8", ALLOC_STATIC);
STRING_TABLE.__str311164=allocate([101,120,116,114,97,32,105,110,116,101,114,105,111,114,32,115,112,97,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,107,101,121,119,111,114,100,0] /* extra interior space */, "i8", ALLOC_STATIC);
STRING_TABLE.__str321165=allocate([90,101,114,111,32,108,101,110,103,116,104,32,107,101,121,119,111,114,100,0] /* Zero length keyword\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str331166=allocate([107,101,121,119,111,114,100,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,49,32,45,32,55,57,32,99,104,97,114,97,99,116,101,114,115,0] /* keyword length must  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str341167=allocate([69,109,112,116,121,32,108,97,110,103,117,97,103,101,32,102,105,101,108,100,32,105,110,32,105,84,88,116,32,99,104,117,110,107,0] /* Empty language field */, "i8", ALLOC_STATIC);
STRING_TABLE.__str351168=allocate([85,110,114,101,99,111,103,110,105,122,101,100,32,117,110,105,116,32,116,121,112,101,32,102,111,114,32,111,70,70,115,32,99,104,117,110,107,0] /* Unrecognized unit ty */, "i8", ALLOC_STATIC);
STRING_TABLE.__str361169=allocate([85,110,114,101,99,111,103,110,105,122,101,100,32,101,113,117,97,116,105,111,110,32,116,121,112,101,32,102,111,114,32,112,67,65,76,32,99,104,117,110,107,0] /* Unrecognized equatio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str371170=allocate([67,97,110,39,116,32,119,114,105,116,101,32,115,67,65,76,32,40,98,117,102,102,101,114,32,116,111,111,32,115,109,97,108,108,41,0] /* Can't write sCAL (bu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str381171=allocate([85,110,114,101,99,111,103,110,105,122,101,100,32,117,110,105,116,32,116,121,112,101,32,102,111,114,32,112,72,89,115,32,99,104,117,110,107,0] /* Unrecognized unit ty */, "i8", ALLOC_STATIC);
STRING_TABLE.__str391172=allocate([73,110,118,97,108,105,100,32,116,105,109,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,116,73,77,69,32,99,104,117,110,107,0] /* Invalid time specifi */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_start_row_png_pass_start=allocate([0,4,0,2,0,1,0] /* \00\04\00\02\00\01\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_start_row_png_pass_inc=allocate([8,8,4,4,2,2,1] /* \08\08\04\04\02\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_start_row_png_pass_ystart=allocate([0,0,4,0,2,0,1] /* \00\00\04\00\02\00\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_start_row_png_pass_yinc=allocate([8,8,8,4,4,2,2] /* \08\08\08\04\04\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_finish_row_png_pass_start=allocate([0,4,0,2,0,1,0] /* \00\04\00\02\00\01\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_finish_row_png_pass_inc=allocate([8,8,4,4,2,2,1] /* \08\08\04\04\02\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_finish_row_png_pass_ystart=allocate([0,0,4,0,2,0,1] /* \00\00\04\00\02\00\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_write_finish_row_png_pass_yinc=allocate([8,8,8,4,4,2,2] /* \08\08\08\04\04\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str401173=allocate([122,108,105,98,32,101,114,114,111,114,0] /* zlib error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_do_write_interlace_png_pass_start=allocate([0,4,0,2,0,1,0] /* \00\04\00\02\00\01\0 */, "i8", ALLOC_STATIC);
STRING_TABLE._png_do_write_interlace_png_pass_inc=allocate([8,8,4,4,2,2,1] /* \08\08\04\04\02\02\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str411174=allocate([118,101,114,115,105,111,110,0] /* version\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str421175=allocate([115,116,114,101,97,109,0] /* stream\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str431176=allocate([109,101,109,111,114,121,0] /* memory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str441177=allocate([117,110,107,110,111,119,110,0] /* unknown\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str451178=allocate([91,110,111,32,122,108,105,98,32,109,101,115,115,97,103,101,93,0] /* [no zlib message]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str461179=allocate([122,108,105,98,32,102,97,105,108,101,100,32,116,111,32,114,101,115,101,116,32,99,111,109,112,114,101,115,115,111,114,58,32,64,49,40,64,50,41,58,32,64,51,0] /* zlib failed to reset */, "i8", ALLOC_STATIC);
STRING_TABLE.__str471180=allocate([122,115,116,114,101,97,109,32,110,111,116,32,105,110,32,117,115,101,32,40,105,110,116,101,114,110,97,108,32,101,114,114,111,114,41,0] /* zstream not in use ( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str481181=allocate([45,0] /* -\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str491182=allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str501183=allocate([49,46,50,46,54,0] /* 1.2.6\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str511184=allocate([116,101,120,116,0] /* text\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str521185=allocate([73,68,65,84,0] /* IDAT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str531186=allocate([105,110,118,97,108,105,100,32,122,108,105,98,32,115,116,97,116,101,0] /* invalid zlib state\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str541187=allocate([122,108,105,98,32,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,99,111,109,112,114,101,115,115,111,114,32,40,0] /* zlib failed to initi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str551188=allocate([41,32,118,101,114,115,105,111,110,32,101,114,114,111,114,0] /* ) version error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str561189=allocate([41,32,115,116,114,101,97,109,32,101,114,114,111,114,0] /* ) stream error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str571190=allocate([41,32,109,101,109,111,114,121,32,101,114,114,111,114,0] /* ) memory error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str581191=allocate([41,32,117,110,107,110,111,119,110,32,101,114,114,111,114,0] /* ) unknown error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str591192=allocate([122,115,116,114,101,97,109,32,97,108,114,101,97,100,121,32,105,110,32,117,115,101,32,40,105,110,116,101,114,110,97,108,32,101,114,114,111,114,41,0] /* zstream already in u */, "i8", ALLOC_STATIC);
STRING_TABLE.__str601193=allocate([73,110,118,97,108,105,100,32,122,108,105,98,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,111,114,32,102,108,97,103,115,32,105,110,32,110,111,110,45,73,68,65,84,32,99,104,117,110,107,0] /* Invalid zlib compres */, "i8", ALLOC_STATIC);
STRING_TABLE.__str611194=allocate([85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,64,49,0] /* Unknown compression  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str621195=allocate([108,101,110,103,116,104,32,101,120,99,101,101,100,115,32,80,78,71,32,109,97,120,105,109,97,0] /* length exceeds PNG m */, "i8", ALLOC_STATIC);
_crc_table=allocate([0, 0, 0, 0, 1996959894, 0, 0, 0, -301047508, 0, 0, 0, -1727442502, 0, 0, 0, 124634137, 0, 0, 0, 1886057615, 0, 0, 0, -379345611, 0, 0, 0, -1637575261, 0, 0, 0, 249268274, 0, 0, 0, 2044508324, 0, 0, 0, -522852066, 0, 0, 0, -1747789432, 0, 0, 0, 162941995, 0, 0, 0, 2125561021, 0, 0, 0, -407360249, 0, 0, 0, -1866523247, 0, 0, 0, 498536548, 0, 0, 0, 1789927666, 0, 0, 0, -205950648, 0, 0, 0, -2067906082, 0, 0, 0, 450548861, 0, 0, 0, 1843258603, 0, 0, 0, -187386543, 0, 0, 0, -2083289657, 0, 0, 0, 325883990, 0, 0, 0, 1684777152, 0, 0, 0, -43845254, 0, 0, 0, -1973040660, 0, 0, 0, 335633487, 0, 0, 0, 1661365465, 0, 0, 0, -99664541, 0, 0, 0, -1928851979, 0, 0, 0, 997073096, 0, 0, 0, 1281953886, 0, 0, 0, -715111964, 0, 0, 0, -1570279054, 0, 0, 0, 1006888145, 0, 0, 0, 1258607687, 0, 0, 0, -770865667, 0, 0, 0, -1526024853, 0, 0, 0, 901097722, 0, 0, 0, 1119000684, 0, 0, 0, -608450090, 0, 0, 0, -1396901568, 0, 0, 0, 853044451, 0, 0, 0, 1172266101, 0, 0, 0, -589951537, 0, 0, 0, -1412350631, 0, 0, 0, 651767980, 0, 0, 0, 1373503546, 0, 0, 0, -925412992, 0, 0, 0, -1076862698, 0, 0, 0, 565507253, 0, 0, 0, 1454621731, 0, 0, 0, -809855591, 0, 0, 0, -1195530993, 0, 0, 0, 671266974, 0, 0, 0, 1594198024, 0, 0, 0, -972236366, 0, 0, 0, -1324619484, 0, 0, 0, 795835527, 0, 0, 0, 1483230225, 0, 0, 0, -1050600021, 0, 0, 0, -1234817731, 0, 0, 0, 1994146192, 0, 0, 0, 31158534, 0, 0, 0, -1731059524, 0, 0, 0, -271249366, 0, 0, 0, 1907459465, 0, 0, 0, 112637215, 0, 0, 0, -1614814043, 0, 0, 0, -390540237, 0, 0, 0, 2013776290, 0, 0, 0, 251722036, 0, 0, 0, -1777751922, 0, 0, 0, -519137256, 0, 0, 0, 2137656763, 0, 0, 0, 141376813, 0, 0, 0, -1855689577, 0, 0, 0, -429695999, 0, 0, 0, 1802195444, 0, 0, 0, 476864866, 0, 0, 0, -2056965928, 0, 0, 0, -228458418, 0, 0, 0, 1812370925, 0, 0, 0, 453092731, 0, 0, 0, -2113342271, 0, 0, 0, -183516073, 0, 0, 0, 1706088902, 0, 0, 0, 314042704, 0, 0, 0, -1950435094, 0, 0, 0, -54949764, 0, 0, 0, 1658658271, 0, 0, 0, 366619977, 0, 0, 0, -1932296973, 0, 0, 0, -69972891, 0, 0, 0, 1303535960, 0, 0, 0, 984961486, 0, 0, 0, -1547960204, 0, 0, 0, -725929758, 0, 0, 0, 1256170817, 0, 0, 0, 1037604311, 0, 0, 0, -1529756563, 0, 0, 0, -740887301, 0, 0, 0, 1131014506, 0, 0, 0, 879679996, 0, 0, 0, -1385723834, 0, 0, 0, -631195440, 0, 0, 0, 1141124467, 0, 0, 0, 855842277, 0, 0, 0, -1442165665, 0, 0, 0, -586318647, 0, 0, 0, 1342533948, 0, 0, 0, 654459306, 0, 0, 0, -1106571248, 0, 0, 0, -921952122, 0, 0, 0, 1466479909, 0, 0, 0, 544179635, 0, 0, 0, -1184443383, 0, 0, 0, -832445281, 0, 0, 0, 1591671054, 0, 0, 0, 702138776, 0, 0, 0, -1328506846, 0, 0, 0, -942167884, 0, 0, 0, 1504918807, 0, 0, 0, 783551873, 0, 0, 0, -1212326853, 0, 0, 0, -1061524307, 0, 0, 0, -306674912, 0, 0, 0, -1698712650, 0, 0, 0, 62317068, 0, 0, 0, 1957810842, 0, 0, 0, -355121351, 0, 0, 0, -1647151185, 0, 0, 0, 81470997, 0, 0, 0, 1943803523, 0, 0, 0, -480048366, 0, 0, 0, -1805370492, 0, 0, 0, 225274430, 0, 0, 0, 2053790376, 0, 0, 0, -468791541, 0, 0, 0, -1828061283, 0, 0, 0, 167816743, 0, 0, 0, 2097651377, 0, 0, 0, -267414716, 0, 0, 0, -2029476910, 0, 0, 0, 503444072, 0, 0, 0, 1762050814, 0, 0, 0, -144550051, 0, 0, 0, -2140837941, 0, 0, 0, 426522225, 0, 0, 0, 1852507879, 0, 0, 0, -19653770, 0, 0, 0, -1982649376, 0, 0, 0, 282753626, 0, 0, 0, 1742555852, 0, 0, 0, -105259153, 0, 0, 0, -1900089351, 0, 0, 0, 397917763, 0, 0, 0, 1622183637, 0, 0, 0, -690576408, 0, 0, 0, -1580100738, 0, 0, 0, 953729732, 0, 0, 0, 1340076626, 0, 0, 0, -776247311, 0, 0, 0, -1497606297, 0, 0, 0, 1068828381, 0, 0, 0, 1219638859, 0, 0, 0, -670225446, 0, 0, 0, -1358292148, 0, 0, 0, 906185462, 0, 0, 0, 1090812512, 0, 0, 0, -547295293, 0, 0, 0, -1469587627, 0, 0, 0, 829329135, 0, 0, 0, 1181335161, 0, 0, 0, -882789492, 0, 0, 0, -1134132454, 0, 0, 0, 628085408, 0, 0, 0, 1382605366, 0, 0, 0, -871598187, 0, 0, 0, -1156888829, 0, 0, 0, 570562233, 0, 0, 0, 1426400815, 0, 0, 0, -977650754, 0, 0, 0, -1296233688, 0, 0, 0, 733239954, 0, 0, 0, 1555261956, 0, 0, 0, -1026031705, 0, 0, 0, -1244606671, 0, 0, 0, 752459403, 0, 0, 0, 1541320221, 0, 0, 0, -1687895376, 0, 0, 0, -328994266, 0, 0, 0, 1969922972, 0, 0, 0, 40735498, 0, 0, 0, -1677130071, 0, 0, 0, -351390145, 0, 0, 0, 1913087877, 0, 0, 0, 83908371, 0, 0, 0, -1782625662, 0, 0, 0, -491226604, 0, 0, 0, 2075208622, 0, 0, 0, 213261112, 0, 0, 0, -1831694693, 0, 0, 0, -438977011, 0, 0, 0, 2094854071, 0, 0, 0, 198958881, 0, 0, 0, -2032938284, 0, 0, 0, -237706686, 0, 0, 0, 1759359992, 0, 0, 0, 534414190, 0, 0, 0, -2118248755, 0, 0, 0, -155638181, 0, 0, 0, 1873836001, 0, 0, 0, 414664567, 0, 0, 0, -2012718362, 0, 0, 0, -15766928, 0, 0, 0, 1711684554, 0, 0, 0, 285281116, 0, 0, 0, -1889165569, 0, 0, 0, -127750551, 0, 0, 0, 1634467795, 0, 0, 0, 376229701, 0, 0, 0, -1609899400, 0, 0, 0, -686959890, 0, 0, 0, 1308918612, 0, 0, 0, 956543938, 0, 0, 0, -1486412191, 0, 0, 0, -799009033, 0, 0, 0, 1231636301, 0, 0, 0, 1047427035, 0, 0, 0, -1362007478, 0, 0, 0, -640263460, 0, 0, 0, 1088359270, 0, 0, 0, 936918000, 0, 0, 0, -1447252397, 0, 0, 0, -558129467, 0, 0, 0, 1202900863, 0, 0, 0, 817233897, 0, 0, 0, -1111625188, 0, 0, 0, -893730166, 0, 0, 0, 1404277552, 0, 0, 0, 615818150, 0, 0, 0, -1160759803, 0, 0, 0, -841546093, 0, 0, 0, 1423857449, 0, 0, 0, 601450431, 0, 0, 0, -1285129682, 0, 0, 0, -1000256840, 0, 0, 0, 1567103746, 0, 0, 0, 711928724, 0, 0, 0, -1274298825, 0, 0, 0, -1022587231, 0, 0, 0, 1510334235, 0, 0, 0, 755167117, 0, 0, 0, 0, 0, 0, 0, 421212481, 0, 0, 0, 842424962, 0, 0, 0, 724390851, 0, 0, 0, 1684849924, 0, 0, 0, 2105013317, 0, 0, 0, 1448781702, 0, 0, 0, 1329698503, 0, 0, 0, -925267448, 0, 0, 0, -775767223, 0, 0, 0, -84940662, 0, 0, 0, -470492725, 0, 0, 0, -1397403892, 0, 0, 0, -1246855603, 0, 0, 0, -1635570290, 0, 0, 0, -2020074289, 0, 0, 0, 1254232657, 0, 0, 0, 1406739216, 0, 0, 0, 2029285587, 0, 0, 0, 1643069842, 0, 0, 0, 783210325, 0, 0, 0, 934667796, 0, 0, 0, 479770071, 0, 0, 0, 92505238, 0, 0, 0, -2112120743, 0, 0, 0, -1694455528, 0, 0, 0, -1339163941, 0, 0, 0, -1456026726, 0, 0, 0, -428384931, 0, 0, 0, -9671652, 0, 0, 0, -733921313, 0, 0, 0, -849736034, 0, 0, 0, -1786501982, 0, 0, 0, -1935731229, 0, 0, 0, -1481488864, 0, 0, 0, -1096190111, 0, 0, 0, -236396122, 0, 0, 0, -386674457, 0, 0, 0, -1008827612, 0, 0, 0, -624577947, 0, 0, 0, 1566420650, 0, 0, 0, 1145479147, 0, 0, 0, 1869335592, 0, 0, 0, 1987116393, 0, 0, 0, 959540142, 0, 0, 0, 539646703, 0, 0, 0, 185010476, 0, 0, 0, 303839341, 0, 0, 0, -549046541, 0, 0, 0, -966981710, 0, 0, 0, -311405455, 0, 0, 0, -194288336, 0, 0, 0, -1154812937, 0, 0, 0, -1573797194, 0, 0, 0, -1994616459, 0, 0, 0, -1878548428, 0, 0, 0, 396344571, 0, 0, 0, 243568058, 0, 0, 0, 631889529, 0, 0, 0, 1018359608, 0, 0, 0, 1945336319, 0, 0, 0, 1793607870, 0, 0, 0, 1103436669, 0, 0, 0, 1490954812, 0, 0, 0, -260485371, 0, 0, 0, -379421116, 0, 0, 0, -1034998393, 0, 0, 0, -615244602, 0, 0, 0, -1810527743, 0, 0, 0, -1928414400, 0, 0, 0, -1507596157, 0, 0, 0, -1086793278, 0, 0, 0, 950060301, 0, 0, 0, 565965900, 0, 0, 0, 177645455, 0, 0, 0, 328046286, 0, 0, 0, 1556873225, 0, 0, 0, 1171730760, 0, 0, 0, 1861902987, 0, 0, 0, 2011255754, 0, 0, 0, -1162125996, 0, 0, 0, -1549767659, 0, 0, 0, -2004009002, 0, 0, 0, -1852436841, 0, 0, 0, -556296112, 0, 0, 0, -942888687, 0, 0, 0, -320734510, 0, 0, 0, -168113261, 0, 0, 0, 1919080284, 0, 0, 0, 1803150877, 0, 0, 0, 1079293406, 0, 0, 0, 1498383519, 0, 0, 0, 370020952, 0, 0, 0, 253043481, 0, 0, 0, 607678682, 0, 0, 0, 1025720731, 0, 0, 0, 1711106983, 0, 0, 0, 2095471334, 0, 0, 0, 1472923941, 0, 0, 0, 1322268772, 0, 0, 0, 26324643, 0, 0, 0, 411738082, 0, 0, 0, 866634785, 0, 0, 0, 717028704, 0, 0, 0, -1390091857, 0, 0, 0, -1270886162, 0, 0, 0, -1626176723, 0, 0, 0, -2046184852, 0, 0, 0, -918018901, 0, 0, 0, -799861270, 0, 0, 0, -75610583, 0, 0, 0, -496666776, 0, 0, 0, 792689142, 0, 0, 0, 908347575, 0, 0, 0, 487136116, 0, 0, 0, 68299317, 0, 0, 0, 1263779058, 0, 0, 0, 1380486579, 0, 0, 0, 2036719216, 0, 0, 0, 1618931505, 0, 0, 0, -404294658, 0, 0, 0, -16923969, 0, 0, 0, -707751556, 0, 0, 0, -859070403, 0, 0, 0, -2088093958, 0, 0, 0, -1701771333, 0, 0, 0, -1313057672, 0, 0, 0, -1465424583, 0, 0, 0, 998479947, 0, 0, 0, 580430090, 0, 0, 0, 162921161, 0, 0, 0, 279890824, 0, 0, 0, 1609522511, 0, 0, 0, 1190423566, 0, 0, 0, 1842954189, 0, 0, 0, 1958874764, 0, 0, 0, -212200893, 0, 0, 0, -364829950, 0, 0, 0, -1049857855, 0, 0, 0, -663273088, 0, 0, 0, -1758013625, 0, 0, 0, -1909594618, 0, 0, 0, -1526680123, 0, 0, 0, -1139047292, 0, 0, 0, 1900120602, 0, 0, 0, 1750776667, 0, 0, 0, 1131931800, 0, 0, 0, 1517083097, 0, 0, 0, 355290910, 0, 0, 0, 204897887, 0, 0, 0, 656092572, 0, 0, 0, 1040194781, 0, 0, 0, -1181220846, 0, 0, 0, -1602014893, 0, 0, 0, -1951505776, 0, 0, 0, -1833610287, 0, 0, 0, -571161322, 0, 0, 0, -990907305, 0, 0, 0, -272455788, 0, 0, 0, -153512235, 0, 0, 0, -1375224599, 0, 0, 0, -1222865496, 0, 0, 0, -1674453397, 0, 0, 0, -2060783830, 0, 0, 0, -898926099, 0, 0, 0, -747616084, 0, 0, 0, -128115857, 0, 0, 0, -515495378, 0, 0, 0, 1725839073, 0, 0, 0, 2143618976, 0, 0, 0, 1424512099, 0, 0, 0, 1307796770, 0, 0, 0, 45282277, 0, 0, 0, 464110244, 0, 0, 0, 813994343, 0, 0, 0, 698327078, 0, 0, 0, -456806728, 0, 0, 0, -35741703, 0, 0, 0, -688665542, 0, 0, 0, -806814341, 0, 0, 0, -2136380484, 0, 0, 0, -1716364547, 0, 0, 0, -1298200258, 0, 0, 0, -1417398145, 0, 0, 0, 740041904, 0, 0, 0, 889656817, 0, 0, 0, 506086962, 0, 0, 0, 120682355, 0, 0, 0, 1215357364, 0, 0, 0, 1366020341, 0, 0, 0, 2051441462, 0, 0, 0, 1667084919, 0, 0, 0, -872753330, 0, 0, 0, -756947441, 0, 0, 0, -104024628, 0, 0, 0, -522746739, 0, 0, 0, -1349119414, 0, 0, 0, -1232264437, 0, 0, 0, -1650429752, 0, 0, 0, -2068102775, 0, 0, 0, 52649286, 0, 0, 0, 439905287, 0, 0, 0, 823476164, 0, 0, 0, 672009861, 0, 0, 0, 1733269570, 0, 0, 0, 2119477507, 0, 0, 0, 1434057408, 0, 0, 0, 1281543041, 0, 0, 0, -2126985953, 0, 0, 0, -1742474146, 0, 0, 0, -1290885219, 0, 0, 0, -1441425700, 0, 0, 0, -447479781, 0, 0, 0, -61918886, 0, 0, 0, -681418087, 0, 0, 0, -830909480, 0, 0, 0, 1239502615, 0, 0, 0, 1358593622, 0, 0, 0, 2077699477, 0, 0, 0, 1657543892, 0, 0, 0, 764250643, 0, 0, 0, 882293586, 0, 0, 0, 532408465, 0, 0, 0, 111204816, 0, 0, 0, 1585378284, 0, 0, 0, 1197851309, 0, 0, 0, 1816695150, 0, 0, 0, 1968414767, 0, 0, 0, 974272232, 0, 0, 0, 587794345, 0, 0, 0, 136598634, 0, 0, 0, 289367339, 0, 0, 0, -1767409180, 0, 0, 0, -1883486043, 0, 0, 0, -1533994138, 0, 0, 0, -1115018713, 0, 0, 0, -221528864, 0, 0, 0, -338653791, 0, 0, 0, -1057104286, 0, 0, 0, -639176925, 0, 0, 0, 347922877, 0, 0, 0, 229101820, 0, 0, 0, 646611775, 0, 0, 0, 1066513022, 0, 0, 0, 1892689081, 0, 0, 0, 1774917112, 0, 0, 0, 1122387515, 0, 0, 0, 1543337850, 0, 0, 0, -597333067, 0, 0, 0, -981574924, 0, 0, 0, -296548041, 0, 0, 0, -146261898, 0, 0, 0, -1207325007, 0, 0, 0, -1592614928, 0, 0, 0, -1975530445, 0, 0, 0, -1826292366, 0, 0, 0, 0, 0, 0, 0, 29518391, 0, 0, 0, 59036782, 0, 0, 0, 38190681, 0, 0, 0, 118073564, 0, 0, 0, 114017003, 0, 0, 0, 76381362, 0, 0, 0, 89069189, 0, 0, 0, 236147128, 0, 0, 0, 265370511, 0, 0, 0, 228034006, 0, 0, 0, 206958561, 0, 0, 0, 152762724, 0, 0, 0, 148411219, 0, 0, 0, 178138378, 0, 0, 0, 190596925, 0, 0, 0, 472294256, 0, 0, 0, 501532999, 0, 0, 0, 530741022, 0, 0, 0, 509615401, 0, 0, 0, 456068012, 0, 0, 0, 451764635, 0, 0, 0, 413917122, 0, 0, 0, 426358261, 0, 0, 0, 305525448, 0, 0, 0, 334993663, 0, 0, 0, 296822438, 0, 0, 0, 275991697, 0, 0, 0, 356276756, 0, 0, 0, 352202787, 0, 0, 0, 381193850, 0, 0, 0, 393929805, 0, 0, 0, 944588512, 0, 0, 0, 965684439, 0, 0, 0, 1003065998, 0, 0, 0, 973863097, 0, 0, 0, 1061482044, 0, 0, 0, 1049003019, 0, 0, 0, 1019230802, 0, 0, 0, 1023561829, 0, 0, 0, 912136024, 0, 0, 0, 933002607, 0, 0, 0, 903529270, 0, 0, 0, 874031361, 0, 0, 0, 827834244, 0, 0, 0, 815125939, 0, 0, 0, 852716522, 0, 0, 0, 856752605, 0, 0, 0, 611050896, 0, 0, 0, 631869351, 0, 0, 0, 669987326, 0, 0, 0, 640506825, 0, 0, 0, 593644876, 0, 0, 0, 580921211, 0, 0, 0, 551983394, 0, 0, 0, 556069653, 0, 0, 0, 712553512, 0, 0, 0, 733666847, 0, 0, 0, 704405574, 0, 0, 0, 675154545, 0, 0, 0, 762387700, 0, 0, 0, 749958851, 0, 0, 0, 787859610, 0, 0, 0, 792175277, 0, 0, 0, 1889177024, 0, 0, 0, 1901651959, 0, 0, 0, 1931368878, 0, 0, 0, 1927033753, 0, 0, 0, 2006131996, 0, 0, 0, 1985040171, 0, 0, 0, 1947726194, 0, 0, 0, 1976933189, 0, 0, 0, 2122964088, 0, 0, 0, 2135668303, 0, 0, 0, 2098006038, 0, 0, 0, 2093965857, 0, 0, 0, 2038461604, 0, 0, 0, 2017599123, 0, 0, 0, 2047123658, 0, 0, 0, 2076625661, 0, 0, 0, 1824272048, 0, 0, 0, 1836991623, 0, 0, 0, 1866005214, 0, 0, 0, 1861914857, 0, 0, 0, 1807058540, 0, 0, 0, 1786244187, 0, 0, 0, 1748062722, 0, 0, 0, 1777547317, 0, 0, 0, 1655668488, 0, 0, 0, 1668093247, 0, 0, 0, 1630251878, 0, 0, 0, 1625932113, 0, 0, 0, 1705433044, 0, 0, 0, 1684323811, 0, 0, 0, 1713505210, 0, 0, 0, 1742760333, 0, 0, 0, 1222101792, 0, 0, 0, 1226154263, 0, 0, 0, 1263738702, 0, 0, 0, 1251046777, 0, 0, 0, 1339974652, 0, 0, 0, 1310460363, 0, 0, 0, 1281013650, 0, 0, 0, 1301863845, 0, 0, 0, 1187289752, 0, 0, 0, 1191637167, 0, 0, 0, 1161842422, 0, 0, 0, 1149379777, 0, 0, 0, 1103966788, 0, 0, 0, 1074747507, 0, 0, 0, 1112139306, 0, 0, 0, 1133218845, 0, 0, 0, 1425107024, 0, 0, 0, 1429406311, 0, 0, 0, 1467333694, 0, 0, 0, 1454888457, 0, 0, 0, 1408811148, 0, 0, 0, 1379576507, 0, 0, 0, 1350309090, 0, 0, 0, 1371438805, 0, 0, 0, 1524775400, 0, 0, 0, 1528845279, 0, 0, 0, 1499917702, 0, 0, 0, 1487177649, 0, 0, 0, 1575719220, 0, 0, 0, 1546255107, 0, 0, 0, 1584350554, 0, 0, 0, 1605185389, 0, 0, 0, -516613248, 0, 0, 0, -520654409, 0, 0, 0, -491663378, 0, 0, 0, -478960167, 0, 0, 0, -432229540, 0, 0, 0, -402728597, 0, 0, 0, -440899790, 0, 0, 0, -461763323, 0, 0, 0, -282703304, 0, 0, 0, -287039473, 0, 0, 0, -324886954, 0, 0, 0, -312413087, 0, 0, 0, -399514908, 0, 0, 0, -370308909, 0, 0, 0, -341100918, 0, 0, 0, -362193731, 0, 0, 0, -49039120, 0, 0, 0, -53357881, 0, 0, 0, -23630690, 0, 0, 0, -11204951, 0, 0, 0, -98955220, 0, 0, 0, -69699045, 0, 0, 0, -107035582, 0, 0, 0, -128143755, 0, 0, 0, -218044088, 0, 0, 0, -222133377, 0, 0, 0, -259769050, 0, 0, 0, -247048431, 0, 0, 0, -200719980, 0, 0, 0, -171234397, 0, 0, 0, -141715974, 0, 0, 0, -162529331, 0, 0, 0, -646423200, 0, 0, 0, -658884777, 0, 0, 0, -620984050, 0, 0, 0, -616635591, 0, 0, 0, -562956868, 0, 0, 0, -541876341, 0, 0, 0, -571137582, 0, 0, 0, -600355867, 0, 0, 0, -680850216, 0, 0, 0, -693541137, 0, 0, 0, -722478922, 0, 0, 0, -718425471, 0, 0, 0, -798841852, 0, 0, 0, -777990605, 0, 0, 0, -739872662, 0, 0, 0, -769385891, 0, 0, 0, -983630320, 0, 0, 0, -996371417, 0, 0, 0, -958780802, 0, 0, 0, -954711991, 0, 0, 0, -1034463540, 0, 0, 0, -1013629701, 0, 0, 0, -1043103070, 0, 0, 0, -1072568171, 0, 0, 0, -884101208, 0, 0, 0, -896547425, 0, 0, 0, -926319674, 0, 0, 0, -922021391, 0, 0, 0, -867956876, 0, 0, 0, -846828221, 0, 0, 0, -809446630, 0, 0, 0, -838682323, 0, 0, 0, -1850763712, 0, 0, 0, -1871840137, 0, 0, 0, -1842658770, 0, 0, 0, -1813436391, 0, 0, 0, -1767489892, 0, 0, 0, -1755032405, 0, 0, 0, -1792873742, 0, 0, 0, -1797226299, 0, 0, 0, -1615017992, 0, 0, 0, -1635865137, 0, 0, 0, -1674046570, 0, 0, 0, -1644529247, 0, 0, 0, -1732939996, 0, 0, 0, -1720253165, 0, 0, 0, -1691239606, 0, 0, 0, -1695297155, 0, 0, 0, -1920387792, 0, 0, 0, -1941217529, 0, 0, 0, -1911692962, 0, 0, 0, -1882223767, 0, 0, 0, -1971282452, 0, 0, 0, -1958545445, 0, 0, 0, -1996207742, 0, 0, 0, -2000280651, 0, 0, 0, -2087033720, 0, 0, 0, -2108158273, 0, 0, 0, -2145472282, 0, 0, 0, -2116232495, 0, 0, 0, -2070688684, 0, 0, 0, -2058246557, 0, 0, 0, -2028529606, 0, 0, 0, -2032831987, 0, 0, 0, -1444753248, 0, 0, 0, -1474250089, 0, 0, 0, -1436154674, 0, 0, 0, -1415287047, 0, 0, 0, -1360299908, 0, 0, 0, -1356262837, 0, 0, 0, -1385190382, 0, 0, 0, -1397897691, 0, 0, 0, -1477345000, 0, 0, 0, -1506546897, 0, 0, 0, -1535814282, 0, 0, 0, -1514717375, 0, 0, 0, -1594349116, 0, 0, 0, -1590017037, 0, 0, 0, -1552089686, 0, 0, 0, -1564567651, 0, 0, 0, -1245416496, 0, 0, 0, -1274668569, 0, 0, 0, -1237276738, 0, 0, 0, -1216164471, 0, 0, 0, -1295131892, 0, 0, 0, -1290817221, 0, 0, 0, -1320611998, 0, 0, 0, -1333041835, 0, 0, 0, -1143528856, 0, 0, 0, -1173010337, 0, 0, 0, -1202457082, 0, 0, 0, -1181639631, 0, 0, 0, -1126266188, 0, 0, 0, -1122180989, 0, 0, 0, -1084596518, 0, 0, 0, -1097321235, 0, 0, 0, 0, 0, 0, 0, -1195612315, 0, 0, 0, -1442199413, 0, 0, 0, 313896942, 0, 0, 0, -1889364137, 0, 0, 0, 937357362, 0, 0, 0, 627793884, 0, 0, 0, -1646839623, 0, 0, 0, -978048785, 0, 0, 0, 2097696650, 0, 0, 0, 1874714724, 0, 0, 0, -687765759, 0, 0, 0, 1255587768, 0, 0, 0, -227878691, 0, 0, 0, -522225869, 0, 0, 0, 1482887254, 0, 0, 0, 1343838111, 0, 0, 0, -391827206, 0, 0, 0, -99573996, 0, 0, 0, 1118632049, 0, 0, 0, -545537848, 0, 0, 0, 1741137837, 0, 0, 0, 1970407491, 0, 0, 0, -842109146, 0, 0, 0, -1783791760, 0, 0, 0, 756094997, 0, 0, 0, 1067759611, 0, 0, 0, -2028416866, 0, 0, 0, 449832999, 0, 0, 0, -1569484990, 0, 0, 0, -1329192788, 0, 0, 0, 142231497, 0, 0, 0, -1607291074, 0, 0, 0, 412010587, 0, 0, 0, 171665333, 0, 0, 0, -1299775280, 0, 0, 0, 793786473, 0, 0, 0, -1746116852, 0, 0, 0, -2057703198, 0, 0, 0, 1038456711, 0, 0, 0, 1703315409, 0, 0, 0, -583343948, 0, 0, 0, -812691622, 0, 0, 0, 1999841343, 0, 0, 0, -354152314, 0, 0, 0, 1381529571, 0, 0, 0, 1089329165, 0, 0, 0, -128860312, 0, 0, 0, -265553759, 0, 0, 0, 1217896388, 0, 0, 0, 1512189994, 0, 0, 0, -492939441, 0, 0, 0, 2135519222, 0, 0, 0, -940242797, 0, 0, 0, -717183107, 0, 0, 0, 1845280792, 0, 0, 0, 899665998, 0, 0, 0, -1927039189, 0, 0, 0, -1617553211, 0, 0, 0, 657096608, 0, 0, 0, -1157806311, 0, 0, 0, 37822588, 0, 0, 0, 284462994, 0, 0, 0, -1471616777, 0, 0, 0, -1693165507, 0, 0, 0, 598228824, 0, 0, 0, 824021174, 0, 0, 0, -1985873965, 0, 0, 0, 343330666, 0, 0, 0, -1396004849, 0, 0, 0, -1098971167, 0, 0, 0, 113467524, 0, 0, 0, 1587572946, 0, 0, 0, -434366537, 0, 0, 0, -190203815, 0, 0, 0, 1276501820, 0, 0, 0, -775755899, 0, 0, 0, 1769898208, 0, 0, 0, 2076913422, 0, 0, 0, -1015592853, 0, 0, 0, -888336478, 0, 0, 0, 1941006535, 0, 0, 0, 1627703081, 0, 0, 0, -642211764, 0, 0, 0, 1148164341, 0, 0, 0, -53215344, 0, 0, 0, -295284610, 0, 0, 0, 1457141531, 0, 0, 0, 247015245, 0, 0, 0, -1241169880, 0, 0, 0, -1531908154, 0, 0, 0, 470583459, 0, 0, 0, -2116308966, 0, 0, 0, 963106687, 0, 0, 0, 735213713, 0, 0, 0, -1821499404, 0, 0, 0, 992409347, 0, 0, 0, -2087022490, 0, 0, 0, -1859174520, 0, 0, 0, 697522413, 0, 0, 0, -1270587308, 0, 0, 0, 217581361, 0, 0, 0, 508405983, 0, 0, 0, -1494102086, 0, 0, 0, -23928852, 0, 0, 0, 1177467017, 0, 0, 0, 1419450215, 0, 0, 0, -332959742, 0, 0, 0, 1911572667, 0, 0, 0, -917753890, 0, 0, 0, -604405712, 0, 0, 0, 1665525589, 0, 0, 0, 1799331996, 0, 0, 0, -746338311, 0, 0, 0, -1053399017, 0, 0, 0, 2039091058, 0, 0, 0, -463652917, 0, 0, 0, 1558270126, 0, 0, 0, 1314193216, 0, 0, 0, -152528859, 0, 0, 0, -1366587277, 0, 0, 0, 372764438, 0, 0, 0, 75645176, 0, 0, 0, -1136777315, 0, 0, 0, 568925988, 0, 0, 0, -1722451903, 0, 0, 0, -1948198993, 0, 0, 0, 861712586, 0, 0, 0, -312887749, 0, 0, 0, 1441124702, 0, 0, 0, 1196457648, 0, 0, 0, -1304107, 0, 0, 0, 1648042348, 0, 0, 0, -628668919, 0, 0, 0, -936187417, 0, 0, 0, 1888390786, 0, 0, 0, 686661332, 0, 0, 0, -1873675855, 0, 0, 0, -2098964897, 0, 0, 0, 978858298, 0, 0, 0, -1483798141, 0, 0, 0, 523464422, 0, 0, 0, 226935048, 0, 0, 0, -1254447507, 0, 0, 0, -1119821404, 0, 0, 0, 100435649, 0, 0, 0, 390670639, 0, 0, 0, -1342878134, 0, 0, 0, 841119475, 0, 0, 0, -1969352298, 0, 0, 0, -1741963656, 0, 0, 0, 546822429, 0, 0, 0, 2029308235, 0, 0, 0, -1068978642, 0, 0, 0, -755170880, 0, 0, 0, 1782671013, 0, 0, 0, -141140452, 0, 0, 0, 1328167289, 0, 0, 0, 1570739863, 0, 0, 0, -450629134, 0, 0, 0, 1298864389, 0, 0, 0, -170426784, 0, 0, 0, -412954226, 0, 0, 0, 1608431339, 0, 0, 0, -1039561134, 0, 0, 0, 2058742071, 0, 0, 0, 1744848601, 0, 0, 0, -792976964, 0, 0, 0, -1998638614, 0, 0, 0, 811816591, 0, 0, 0, 584513889, 0, 0, 0, -1704288764, 0, 0, 0, 129869501, 0, 0, 0, -1090403880, 0, 0, 0, -1380684234, 0, 0, 0, 352848211, 0, 0, 0, 494030490, 0, 0, 0, -1513215489, 0, 0, 0, -1216641519, 0, 0, 0, 264757620, 0, 0, 0, -1844389427, 0, 0, 0, 715964072, 0, 0, 0, 941166918, 0, 0, 0, -2136639965, 0, 0, 0, -658086283, 0, 0, 0, 1618608400, 0, 0, 0, 1926213374, 0, 0, 0, -898381413, 0, 0, 0, 1470427426, 0, 0, 0, -283601337, 0, 0, 0, -38979159, 0, 0, 0, 1158766284, 0, 0, 0, 1984818694, 0, 0, 0, -823031453, 0, 0, 0, -599513459, 0, 0, 0, 1693991400, 0, 0, 0, -114329263, 0, 0, 0, 1100160564, 0, 0, 0, 1395044826, 0, 0, 0, -342174017, 0, 0, 0, -1275476247, 0, 0, 0, 189112716, 0, 0, 0, 435162722, 0, 0, 0, -1588827897, 0, 0, 0, 1016811966, 0, 0, 0, -2077804837, 0, 0, 0, -1768777419, 0, 0, 0, 774831696, 0, 0, 0, 643086745, 0, 0, 0, -1628905732, 0, 0, 0, -1940033262, 0, 0, 0, 887166583, 0, 0, 0, -1456066866, 0, 0, 0, 294275499, 0, 0, 0, 54519365, 0, 0, 0, -1149009632, 0, 0, 0, -471821962, 0, 0, 0, 1532818963, 0, 0, 0, 1240029693, 0, 0, 0, -246071656, 0, 0, 0, 1820460577, 0, 0, 0, -734109372, 0, 0, 0, -963916118, 0, 0, 0, 2117577167, 0, 0, 0, -696303304, 0, 0, 0, 1858283101, 0, 0, 0, 2088143283, 0, 0, 0, -993333546, 0, 0, 0, 1495127663, 0, 0, 0, -509497078, 0, 0, 0, -216785180, 0, 0, 0, 1269332353, 0, 0, 0, 332098007, 0, 0, 0, -1418260814, 0, 0, 0, -1178427044, 0, 0, 0, 25085497, 0, 0, 0, -1666580864, 0, 0, 0, 605395429, 0, 0, 0, 916469259, 0, 0, 0, -1910746770, 0, 0, 0, -2040129881, 0, 0, 0, 1054503362, 0, 0, 0, 745528876, 0, 0, 0, -1798063799, 0, 0, 0, 151290352, 0, 0, 0, -1313282411, 0, 0, 0, -1559410309, 0, 0, 0, 464596510, 0, 0, 0, 1137851976, 0, 0, 0, -76654291, 0, 0, 0, -371460413, 0, 0, 0, 1365741990, 0, 0, 0, -860837601, 0, 0, 0, 1946996346, 0, 0, 0, 1723425172, 0, 0, 0, -570095887, 0, 0, 0, 0, 0, 0, 0, -1775237257, 0, 0, 0, 744558318, 0, 0, 0, -1169094247, 0, 0, 0, 432303367, 0, 0, 0, -1879807376, 0, 0, 0, 900031465, 0, 0, 0, -1550490466, 0, 0, 0, 847829774, 0, 0, 0, -1531388807, 0, 0, 0, 518641120, 0, 0, 0, -1998990697, 0, 0, 0, 726447625, 0, 0, 0, -1115901570, 0, 0, 0, 120436967, 0, 0, 0, -1860321392, 0, 0, 0, 1678817053, 0, 0, 0, -232738710, 0, 0, 0, 1215412723, 0, 0, 0, -566116732, 0, 0, 0, 2111101466, 0, 0, 0, -337322643, 0, 0, 0, 1370871028, 0, 0, 0, -947530877, 0, 0, 0, 1452829715, 0, 0, 0, -1062704284, 0, 0, 0, 2063164157, 0, 0, 0, -322345590, 0, 0, 0, 1331429652, 0, 0, 0, -647231901, 0, 0, 0, 1664946170, 0, 0, 0, -183695219, 0, 0, 0, -937398725, 0, 0, 0, 1578133836, 0, 0, 0, -465477419, 0, 0, 0, 1920034722, 0, 0, 0, -773586116, 0, 0, 0, 1205077067, 0, 0, 0, -41611822, 0, 0, 0, 1807026853, 0, 0, 0, -89606859, 0, 0, 0, 1821946434, 0, 0, 0, -691422245, 0, 0, 0, 1090108588, 0, 0, 0, -479406030, 0, 0, 0, 1969020741, 0, 0, 0, -821176612, 0, 0, 0, 1497223595, 0, 0, 0, -1406084826, 0, 0, 0, 973135441, 0, 0, 0, -2142119992, 0, 0, 0, 375509183, 0, 0, 0, -1242254303, 0, 0, 0, 600093526, 0, 0, 0, -1718240561, 0, 0, 0, 262520248, 0, 0, 0, -1632107992, 0, 0, 0, 143131999, 0, 0, 0, -1294398266, 0, 0, 0, 619252657, 0, 0, 0, -2021888209, 0, 0, 0, 290220120, 0, 0, 0, -1424137791, 0, 0, 0, 1026385590, 0, 0, 0, -1874731914, 0, 0, 0, 108124929, 0, 0, 0, -1138699624, 0, 0, 0, 705746415, 0, 0, 0, -1987726991, 0, 0, 0, 532002310, 0, 0, 0, -1511735393, 0, 0, 0, 869578984, 0, 0, 0, -1563883656, 0, 0, 0, 888733711, 0, 0, 0, -1901590122, 0, 0, 0, 412618465, 0, 0, 0, -1156748673, 0, 0, 0, 759000328, 0, 0, 0, -1754504047, 0, 0, 0, 22832102, 0, 0, 0, -195990677, 0, 0, 0, 1650551836, 0, 0, 0, -667916923, 0, 0, 0, 1308648178, 0, 0, 0, -309000596, 0, 0, 0, 2074411291, 0, 0, 0, -1040971646, 0, 0, 0, 1472466933, 0, 0, 0, -958812059, 0, 0, 0, 1357494034, 0, 0, 0, -356991349, 0, 0, 0, 2089335292, 0, 0, 0, -551690910, 0, 0, 0, 1227741717, 0, 0, 0, -209923188, 0, 0, 0, 1699534075, 0, 0, 0, 1482797645, 0, 0, 0, -833505990, 0, 0, 0, 1946205347, 0, 0, 0, -500122668, 0, 0, 0, 1101389642, 0, 0, 0, -678045635, 0, 0, 0, 1841615268, 0, 0, 0, -67840301, 0, 0, 0, 1793681731, 0, 0, 0, -52859340, 0, 0, 0, 1183344557, 0, 0, 0, -793222950, 0, 0, 0, 1932330052, 0, 0, 0, -451083469, 0, 0, 0, 1598818986, 0, 0, 0, -914616867, 0, 0, 0, 1014039888, 0, 0, 0, -1438580185, 0, 0, 0, 269487038, 0, 0, 0, -2044719927, 0, 0, 0, 632645719, 0, 0, 0, -1283100896, 0, 0, 0, 164914873, 0, 0, 0, -1612422706, 0, 0, 0, 251256414, 0, 0, 0, -1731602135, 0, 0, 0, 580440240, 0, 0, 0, -1264003129, 0, 0, 0, 389919577, 0, 0, 0, -2129808338, 0, 0, 0, 995933623, 0, 0, 0, -1385383232, 0, 0, 0, 545503469, 0, 0, 0, -1229733990, 0, 0, 0, 216184323, 0, 0, 0, -1697468044, 0, 0, 0, 961009130, 0, 0, 0, -1351101795, 0, 0, 0, 354867972, 0, 0, 0, -2095653773, 0, 0, 0, 302736355, 0, 0, 0, -2076482412, 0, 0, 0, 1047162125, 0, 0, 0, -1470469510, 0, 0, 0, 198119140, 0, 0, 0, -1644230253, 0, 0, 0, 665714698, 0, 0, 0, -1315043459, 0, 0, 0, 1150488560, 0, 0, 0, -761067385, 0, 0, 0, 1760690462, 0, 0, 0, -20838807, 0, 0, 0, 1566008055, 0, 0, 0, -882416256, 0, 0, 0, 1899392025, 0, 0, 0, -419009682, 0, 0, 0, 1981535486, 0, 0, 0, -533998711, 0, 0, 0, 1518000656, 0, 0, 0, -867508889, 0, 0, 0, 1876933113, 0, 0, 0, -101728626, 0, 0, 0, 1136572183, 0, 0, 0, -712069024, 0, 0, 0, -391915818, 0, 0, 0, 2123616673, 0, 0, 0, -993863624, 0, 0, 0, 1391648591, 0, 0, 0, -244859951, 0, 0, 0, 1733803174, 0, 0, 0, -586762945, 0, 0, 0, 1261875784, 0, 0, 0, -634712616, 0, 0, 0, 1276840623, 0, 0, 0, -162921674, 0, 0, 0, 1618609217, 0, 0, 0, -1007722273, 0, 0, 0, 1440704424, 0, 0, 0, -275878351, 0, 0, 0, 2042521926, 0, 0, 0, -1934401077, 0, 0, 0, 444819132, 0, 0, 0, -1596821723, 0, 0, 0, 920807506, 0, 0, 0, -1787360052, 0, 0, 0, 54987707, 0, 0, 0, -1189739998, 0, 0, 0, 791020885, 0, 0, 0, -1103381819, 0, 0, 0, 671858098, 0, 0, 0, -1839549397, 0, 0, 0, 74101596, 0, 0, 0, -1476405310, 0, 0, 0, 835702965, 0, 0, 0, -1952523988, 0, 0, 0, 497999451, 0, 0, 0, -1329437541, 0, 0, 0, 653419500, 0, 0, 0, -1667011979, 0, 0, 0, 177433858, 0, 0, 0, -1459222116, 0, 0, 0, 1060507371, 0, 0, 0, -2056845454, 0, 0, 0, 324468741, 0, 0, 0, -2109030507, 0, 0, 0, 343587042, 0, 0, 0, -1372868229, 0, 0, 0, 941340172, 0, 0, 0, -1685138798, 0, 0, 0, 230610405, 0, 0, 0, -1209017220, 0, 0, 0, 568318731, 0, 0, 0, -724380794, 0, 0, 0, 1122161905, 0, 0, 0, -122430104, 0, 0, 0, 1854134815, 0, 0, 0, -854147455, 0, 0, 0, 1529264630, 0, 0, 0, -512249745, 0, 0, 0, 2001188632, 0, 0, 0, -430307192, 0, 0, 0, 1885999103, 0, 0, 0, -902101402, 0, 0, 0, 1544225041, 0, 0, 0, -6396529, 0, 0, 0, 1773036280, 0, 0, 0, -738235551, 0, 0, 0, 1171221526, 0, 0, 0, 2028079776, 0, 0, 0, -288223785, 0, 0, 0, 1417872462, 0, 0, 0, -1028455623, 0, 0, 0, 1629906855, 0, 0, 0, -149528368, 0, 0, 0, 1296525641, 0, 0, 0, -612929986, 0, 0, 0, 1248514478, 0, 0, 0, -598026535, 0, 0, 0, 1712054080, 0, 0, 0, -264513481, 0, 0, 0, 1403960489, 0, 0, 0, -979452962, 0, 0, 0, 2144318023, 0, 0, 0, -369117904, 0, 0, 0, 485670333, 0, 0, 0, -1966949686, 0, 0, 0, 814986067, 0, 0, 0, -1499220956, 0, 0, 0, 87478458, 0, 0, 0, -1828268083, 0, 0, 0, 693624404, 0, 0, 0, -1083713245, 0, 0, 0, 779773619, 0, 0, 0, -1203084860, 0, 0, 0, 35350621, 0, 0, 0, -1809092822, 0, 0, 0, 935201716, 0, 0, 0, -1584526141, 0, 0, 0, 467600730, 0, 0, 0, -1913716179, 0, 0, 0, 0, 0, 0, 0, 1093737241, 0, 0, 0, -2107492814, 0, 0, 0, -1017959125, 0, 0, 0, 80047204, 0, 0, 0, 1173649277, 0, 0, 0, -2035852714, 0, 0, 0, -946454193, 0, 0, 0, 143317448, 0, 0, 0, 1237041873, 0, 0, 0, -1964445702, 0, 0, 0, -874908445, 0, 0, 0, 206550444, 0, 0, 0, 1300147893, 0, 0, 0, -1909619810, 0, 0, 0, -820209529, 0, 0, 0, 1360183882, 0, 0, 0, 270784851, 0, 0, 0, -747572104, 0, 0, 0, -1841172639, 0, 0, 0, 1440198190, 0, 0, 0, 350663991, 0, 0, 0, -675964900, 0, 0, 0, -1769700603, 0, 0, 0, 1503140738, 0, 0, 0, 413728923, 0, 0, 0, -604361296, 0, 0, 0, -1697958231, 0, 0, 0, 1566406630, 0, 0, 0, 476867839, 0, 0, 0, -549502508, 0, 0, 0, -1643226419, 0, 0, 0, -1574665067, 0, 0, 0, -485122164, 0, 0, 0, 541504167, 0, 0, 0, 1635232190, 0, 0, 0, -1495144207, 0, 0, 0, -405736472, 0, 0, 0, 612622019, 0, 0, 0, 1706214874, 0, 0, 0, -1431413411, 0, 0, 0, -341883324, 0, 0, 0, 684485487, 0, 0, 0, 1778217078, 0, 0, 0, -1368706759, 0, 0, 0, -279303648, 0, 0, 0, 738789131, 0, 0, 0, 1832393746, 0, 0, 0, -214546721, 0, 0, 0, -1308140090, 0, 0, 0, 1901359341, 0, 0, 0, 811953140, 0, 0, 0, -135058757, 0, 0, 0, -1228787294, 0, 0, 0, 1972444297, 0, 0, 0, 882902928, 0, 0, 0, -71524585, 0, 0, 0, -1165130738, 0, 0, 0, 2044635429, 0, 0, 0, 955232828, 0, 0, 0, -8785037, 0, 0, 0, -1102518166, 0, 0, 0, 2098971969, 0, 0, 0, 1009442392, 0, 0, 0, 89094640, 0, 0, 0, 1149133545, 0, 0, 0, -2027073598, 0, 0, 0, -971221797, 0, 0, 0, 25826708, 0, 0, 0, 1086000781, 0, 0, 0, -2081938522, 0, 0, 0, -1025951553, 0, 0, 0, 231055416, 0, 0, 0, 1291107105, 0, 0, 0, -1884842486, 0, 0, 0, -828994285, 0, 0, 0, 151047260, 0, 0, 0, 1211225925, 0, 0, 0, -1956447634, 0, 0, 0, -900472457, 0, 0, 0, 1415429050, 0, 0, 0, 359440547, 0, 0, 0, -700478072, 0, 0, 0, -1760651631, 0, 0, 0, 1352194014, 0, 0, 0, 296340679, 0, 0, 0, -755310100, 0, 0, 0, -1815348491, 0, 0, 0, 1557619314, 0, 0, 0, 501643627, 0, 0, 0, -558541760, 0, 0, 0, -1618718887, 0, 0, 0, 1477578262, 0, 0, 0, 421729551, 0, 0, 0, -630179804, 0, 0, 0, -1690229955, 0, 0, 0, -1486095003, 0, 0, 0, -430250372, 0, 0, 0, 621398871, 0, 0, 0, 1681444942, 0, 0, 0, -1548840703, 0, 0, 0, -492860904, 0, 0, 0, 567060275, 0, 0, 0, 1627241514, 0, 0, 0, -1344199507, 0, 0, 0, -288342092, 0, 0, 0, 763564703, 0, 0, 0, 1823607174, 0, 0, 0, -1423685431, 0, 0, 0, -367701040, 0, 0, 0, 692485883, 0, 0, 0, 1752655330, 0, 0, 0, -159826129, 0, 0, 0, -1220008906, 0, 0, 0, 1947928861, 0, 0, 0, 891949572, 0, 0, 0, -222538933, 0, 0, 0, -1282586542, 0, 0, 0, 1893623161, 0, 0, 0, 837779040, 0, 0, 0, -17570073, 0, 0, 0, -1077740034, 0, 0, 0, 2089930965, 0, 0, 0, 1033948108, 0, 0, 0, -97088893, 0, 0, 0, -1157131878, 0, 0, 0, 2018819249, 0, 0, 0, 962963368, 0, 0, 0, 1268286267, 0, 0, 0, 178886690, 0, 0, 0, -906316535, 0, 0, 0, -1999917552, 0, 0, 0, 1331556191, 0, 0, 0, 242021446, 0, 0, 0, -851453587, 0, 0, 0, -1945189772, 0, 0, 0, 1125276403, 0, 0, 0, 35865066, 0, 0, 0, -1049596735, 0, 0, 0, -2143193128, 0, 0, 0, 1205286551, 0, 0, 0, 115748238, 0, 0, 0, -977993563, 0, 0, 0, -2071716932, 0, 0, 0, 445268337, 0, 0, 0, 1539005032, 0, 0, 0, -1729595581, 0, 0, 0, -640062374, 0, 0, 0, 508505365, 0, 0, 0, 1602106892, 0, 0, 0, -1674765529, 0, 0, 0, -585367490, 0, 0, 0, 302028985, 0, 0, 0, 1395753888, 0, 0, 0, -1872580981, 0, 0, 0, -783043182, 0, 0, 0, 382072029, 0, 0, 0, 1475669956, 0, 0, 0, -1800944913, 0, 0, 0, -711534090, 0, 0, 0, -373553234, 0, 0, 0, -1467147081, 0, 0, 0, 1809723804, 0, 0, 0, 720317061, 0, 0, 0, -310809654, 0, 0, 0, -1404538669, 0, 0, 0, 1864064504, 0, 0, 0, 774522593, 0, 0, 0, -516497818, 0, 0, 0, -1610103425, 0, 0, 0, 1666508884, 0, 0, 0, 577106765, 0, 0, 0, -437014014, 0, 0, 0, -1530746597, 0, 0, 0, 1737589808, 0, 0, 0, 648060713, 0, 0, 0, -1196505628, 0, 0, 0, -106963203, 0, 0, 0, 986510294, 0, 0, 0, 2080237775, 0, 0, 0, -1133794944, 0, 0, 0, -44387687, 0, 0, 0, 1040818098, 0, 0, 0, 2134410411, 0, 0, 0, -1339810772, 0, 0, 0, -250280139, 0, 0, 0, 843459102, 0, 0, 0, 1937191175, 0, 0, 0, -1260294072, 0, 0, 0, -170890415, 0, 0, 0, 914572922, 0, 0, 0, 2008178019, 0, 0, 0, 1322777291, 0, 0, 0, 266789330, 0, 0, 0, -860500743, 0, 0, 0, -1920673824, 0, 0, 0, 1242732207, 0, 0, 0, 186879414, 0, 0, 0, -932142947, 0, 0, 0, -1992180860, 0, 0, 0, 1180508931, 0, 0, 0, 124532762, 0, 0, 0, -1002498767, 0, 0, 0, -2062676440, 0, 0, 0, 1117278055, 0, 0, 0, 61428862, 0, 0, 0, -1057326763, 0, 0, 0, -2117377460, 0, 0, 0, 533018753, 0, 0, 0, 1593058200, 0, 0, 0, -1649996109, 0, 0, 0, -594143830, 0, 0, 0, 453006565, 0, 0, 0, 1513181180, 0, 0, 0, -1721605417, 0, 0, 0, -665617970, 0, 0, 0, 391110985, 0, 0, 0, 1451162192, 0, 0, 0, -1792157829, 0, 0, 0, -736310174, 0, 0, 0, 327847213, 0, 0, 0, 1388025396, 0, 0, 0, -1847018721, 0, 0, 0, -791044090, 0, 0, 0, -319586722, 0, 0, 0, -1379769017, 0, 0, 0, 1855015020, 0, 0, 0, 799036277, 0, 0, 0, -399109574, 0, 0, 0, -1459156701, 0, 0, 0, 1783899144, 0, 0, 0, 728055569, 0, 0, 0, -461789290, 0, 0, 0, -1521959793, 0, 0, 0, 1713082788, 0, 0, 0, 657099453, 0, 0, 0, -524497934, 0, 0, 0, -1584541461, 0, 0, 0, 1658781120, 0, 0, 0, 602924761, 0, 0, 0, -1109279724, 0, 0, 0, -53434611, 0, 0, 0, 1065585190, 0, 0, 0, 2125631807, 0, 0, 0, -1188769680, 0, 0, 0, -132789399, 0, 0, 0, 994502210, 0, 0, 0, 2054683995, 0, 0, 0, -1251252772, 0, 0, 0, -195395899, 0, 0, 0, 923358190, 0, 0, 0, 1983400183, 0, 0, 0, -1313994312, 0, 0, 0, -258010463, 0, 0, 0, 869023626, 0, 0, 0, 1929192595, 0, 0, 0, 0, 0, 0, 0, 929743361, 0, 0, 0, 1859421187, 0, 0, 0, 1505641986, 0, 0, 0, -592967417, 0, 0, 0, -339555578, 0, 0, 0, -1300460284, 0, 0, 0, -2062135547, 0, 0, 0, -1202646258, 0, 0, 0, -1891905265, 0, 0, 0, -695888115, 0, 0, 0, -504408820, 0, 0, 0, 1694046729, 0, 0, 0, 1402198024, 0, 0, 0, 170761738, 0, 0, 0, 1028086795, 0, 0, 0, 1889740316, 0, 0, 0, 1204413469, 0, 0, 0, 511156767, 0, 0, 0, 689791006, 0, 0, 0, -1408553189, 0, 0, 0, -1688081126, 0, 0, 0, -1025529064, 0, 0, 0, -172660455, 0, 0, 0, -923650798, 0, 0, 0, -6752493, 0, 0, 0, -1507413743, 0, 0, 0, -1857260784, 0, 0, 0, 341457941, 0, 0, 0, 590413332, 0, 0, 0, 2056173590, 0, 0, 0, 1306819095, 0, 0, 0, -532263624, 0, 0, 0, -684945607, 0, 0, 0, -1902982853, 0, 0, 0, -1174926534, 0, 0, 0, 1022247999, 0, 0, 0, 193234494, 0, 0, 0, 1379582012, 0, 0, 0, 1699742269, 0, 0, 0, 1477926454, 0, 0, 0, 1870502967, 0, 0, 0, 918805045, 0, 0, 0, 27858996, 0, 0, 0, -2067835087, 0, 0, 0, -1277848272, 0, 0, 0, -362032334, 0, 0, 0, -587132621, 0, 0, 0, -1864013020, 0, 0, 0, -1483757275, 0, 0, 0, -30281945, 0, 0, 0, -916771546, 0, 0, 0, 1280139811, 0, 0, 0, 2066194466, 0, 0, 0, 580511264, 0, 0, 0, 368256033, 0, 0, 0, 682915882, 0, 0, 0, 534690347, 0, 0, 0, 1180761129, 0, 0, 0, 1896496680, 0, 0, 0, -199462611, 0, 0, 0, -1015631060, 0, 0, 0, -1698106066, 0, 0, 0, -1381877969, 0, 0, 0, -1064461712, 0, 0, 0, -135833487, 0, 0, 0, -1369891213, 0, 0, 0, -1724654478, 0, 0, 0, 472224631, 0, 0, 0, 726618486, 0, 0, 0, 1928402804, 0, 0, 0, 1167840629, 0, 0, 0, 2027719038, 0, 0, 0, 1337346943, 0, 0, 0, 369626493, 0, 0, 0, 560123772, 0, 0, 0, -1535868807, 0, 0, 0, -1826733448, 0, 0, 0, -895482758, 0, 0, 0, -37042565, 0, 0, 0, -1339114388, 0, 0, 0, -2025554323, 0, 0, 0, -554026897, 0, 0, 0, -376374674, 0, 0, 0, 1820767595, 0, 0, 0, 1542223722, 0, 0, 0, 38941032, 0, 0, 0, 892924777, 0, 0, 0, 142585698, 0, 0, 0, 1058368867, 0, 0, 0, 1722493793, 0, 0, 0, 1371662688, 0, 0, 0, -724064667, 0, 0, 0, -474127260, 0, 0, 0, -1174199706, 0, 0, 0, -1922441113, 0, 0, 0, 550229832, 0, 0, 0, 396432713, 0, 0, 0, 1310675787, 0, 0, 0, 2037748042, 0, 0, 0, -60563889, 0, 0, 0, -888595378, 0, 0, 0, -1833477556, 0, 0, 0, -1512204211, 0, 0, 0, -1734687674, 0, 0, 0, -1343224249, 0, 0, 0, -162643899, 0, 0, 0, -1054571964, 0, 0, 0, 1144180033, 0, 0, 0, 1935150912, 0, 0, 0, 719735106, 0, 0, 0, 495749955, 0, 0, 0, 1349054804, 0, 0, 0, 1728197461, 0, 0, 0, 1052538199, 0, 0, 0, 165066582, 0, 0, 0, -1933510573, 0, 0, 0, -1146471854, 0, 0, 0, -501973936, 0, 0, 0, -713114031, 0, 0, 0, -398859686, 0, 0, 0, -548200357, 0, 0, 0, -2031262119, 0, 0, 0, -1316510632, 0, 0, 0, 881978205, 0, 0, 0, 66791772, 0, 0, 0, 1514499934, 0, 0, 0, 1831841119, 0, 0, 0, -2145700383, 0, 0, 0, -1217267744, 0, 0, 0, -288378398, 0, 0, 0, -643468317, 0, 0, 0, 1555250406, 0, 0, 0, 1809448679, 0, 0, 0, 845658341, 0, 0, 0, 84769508, 0, 0, 0, 944383727, 0, 0, 0, 253813998, 0, 0, 0, 1453236972, 0, 0, 0, 1643405549, 0, 0, 0, -454938648, 0, 0, 0, -746000919, 0, 0, 0, -1976128533, 0, 0, 0, -1118017046, 0, 0, 0, -256371715, 0, 0, 0, -942484996, 0, 0, 0, -1637050370, 0, 0, 0, -1459202561, 0, 0, 0, 739252986, 0, 0, 0, 461035771, 0, 0, 0, 1120182009, 0, 0, 0, 1974361336, 0, 0, 0, 1223229683, 0, 0, 0, 2139341554, 0, 0, 0, 641565936, 0, 0, 0, 290932465, 0, 0, 0, -1807676940, 0, 0, 0, -1557410827, 0, 0, 0, -90862089, 0, 0, 0, -838905866, 0, 0, 0, 1616738521, 0, 0, 0, 1463270104, 0, 0, 0, 243924186, 0, 0, 0, 971194075, 0, 0, 0, -1124765218, 0, 0, 0, -1952468001, 0, 0, 0, -769526307, 0, 0, 0, -448055332, 0, 0, 0, -670274601, 0, 0, 0, -278484522, 0, 0, 0, -1227296812, 0, 0, 0, -2119029291, 0, 0, 0, 77882064, 0, 0, 0, 869179601, 0, 0, 0, 1785784019, 0, 0, 0, 1561994450, 0, 0, 0, 285105861, 0, 0, 0, 664050884, 0, 0, 0, 2116737734, 0, 0, 0, 1228937415, 0, 0, 0, -866756670, 0, 0, 0, -79915581, 0, 0, 0, -1568484415, 0, 0, 0, -1779953216, 0, 0, 0, -1464906293, 0, 0, 0, -1614442550, 0, 0, 0, -964965944, 0, 0, 0, -250541111, 0, 0, 0, 1946633420, 0, 0, 0, 1131251405, 0, 0, 0, 450085071, 0, 0, 0, 767099598, 0, 0, 0, 1083617169, 0, 0, 0, 2013031824, 0, 0, 0, 776088466, 0, 0, 0, 422111635, 0, 0, 0, -1673615722, 0, 0, 0, -1420532585, 0, 0, 0, -219536747, 0, 0, 0, -981409644, 0, 0, 0, -121127777, 0, 0, 0, -810713442, 0, 0, 0, -1777125220, 0, 0, 0, -1585841507, 0, 0, 0, 611300760, 0, 0, 0, 319125401, 0, 0, 0, 1253781915, 0, 0, 0, 2110911386, 0, 0, 0, 808814989, 0, 0, 0, 123685772, 0, 0, 0, 1591807374, 0, 0, 0, 1770770319, 0, 0, 0, -325222262, 0, 0, 0, -604552565, 0, 0, 0, -2109143927, 0, 0, 0, -1255946616, 0, 0, 0, -2006672765, 0, 0, 0, -1089578878, 0, 0, 0, -424665472, 0, 0, 0, -774185855, 0, 0, 0, 1422693252, 0, 0, 0, 1671844229, 0, 0, 0, 974657415, 0, 0, 0, 225629574, 0, 0, 0, -1596923223, 0, 0, 0, -1749409624, 0, 0, 0, -838572374, 0, 0, 0, -110189397, 0, 0, 0, 2088299438, 0, 0, 0, 1259481519, 0, 0, 0, 313290669, 0, 0, 0, 633777580, 0, 0, 0, 411169191, 0, 0, 0, 803943334, 0, 0, 0, 1985312164, 0, 0, 0, 1094694821, 0, 0, 0, -1003882336, 0, 0, 0, -213697887, 0, 0, 0, -1426228061, 0, 0, 0, -1650999646, 0, 0, 0, -797719371, 0, 0, 0, -417790284, 0, 0, 0, -1096335178, 0, 0, 0, -1983020361, 0, 0, 0, 215731634, 0, 0, 0, 1001459635, 0, 0, 0, 1645169073, 0, 0, 0, 1432718256, 0, 0, 0, 1747113915, 0, 0, 0, 1598559674, 0, 0, 0, 116806584, 0, 0, 0, 832344505, 0, 0, 0, -1265967428, 0, 0, 0, -2082464579, 0, 0, 0, -631350593, 0, 0, 0, -315320130, 0, 0, 0, 0, 0, 0, 0, 1701297336, 0, 0, 0, -1949824598, 0, 0, 0, -290474734, 0, 0, 0, 1469538959, 0, 0, 0, 854646327, 0, 0, 0, -597726427, 0, 0, 0, -1187457123, 0, 0, 0, -282544955, 0, 0, 0, -1974531971, 0, 0, 0, 1692450159, 0, 0, 0, 25625047, 0, 0, 0, -1195387318, 0, 0, 0, -573019406, 0, 0, 0, 863494112, 0, 0, 0, 1443914584, 0, 0, 0, -1621681840, 0, 0, 0, -97475096, 0, 0, 0, 345968890, 0, 0, 0, 1912122434, 0, 0, 0, -926909473, 0, 0, 0, -1381513369, 0, 0, 0, 1124627061, 0, 0, 0, 644861645, 0, 0, 0, 1887415701, 0, 0, 0, 353898797, 0, 0, 0, -71850945, 0, 0, 0, -1630529401, 0, 0, 0, 669568794, 0, 0, 0, 1116697506, 0, 0, 0, -1407138128, 0, 0, 0, -918062584, 0, 0, 0, 1051669152, 0, 0, 0, 1539870232, 0, 0, 0, -1251525878, 0, 0, 0, -805271630, 0, 0, 0, 1765298223, 0, 0, 0, 207613079, 0, 0, 0, -487564923, 0, 0, 0, -2020088515, 0, 0, 0, -779647387, 0, 0, 0, -1260373283, 0, 0, 0, 1515163599, 0, 0, 0, 1059599223, 0, 0, 0, -2045713174, 0, 0, 0, -478717870, 0, 0, 0, 232320320, 0, 0, 0, 1757368824, 0, 0, 0, -1577571344, 0, 0, 0, -996174008, 0, 0, 0, 707797594, 0, 0, 0, 1331142370, 0, 0, 0, -160478849, 0, 0, 0, -1828129337, 0, 0, 0, 2108113109, 0, 0, 0, 415300717, 0, 0, 0, 1322295093, 0, 0, 0, 733422477, 0, 0, 0, -988244321, 0, 0, 0, -1602278873, 0, 0, 0, 424148410, 0, 0, 0, 2082488578, 0, 0, 0, -1836059632, 0, 0, 0, -135771992, 0, 0, 0, 1029182619, 0, 0, 0, 1480566819, 0, 0, 0, -1232069327, 0, 0, 0, -738745975, 0, 0, 0, 1791981076, 0, 0, 0, 262720172, 0, 0, 0, -519602242, 0, 0, 0, -2074033402, 0, 0, 0, -764370850, 0, 0, 0, -1223222042, 0, 0, 0, 1505274356, 0, 0, 0, 1021252940, 0, 0, 0, -2048408879, 0, 0, 0, -528449943, 0, 0, 0, 238013307, 0, 0, 0, 1799911363, 0, 0, 0, -1576071733, 0, 0, 0, -949440141, 0, 0, 0, 700908641, 0, 0, 0, 1285601497, 0, 0, 0, -174559420, 0, 0, 0, -1862282244, 0, 0, 0, 2119198446, 0, 0, 0, 456645206, 0, 0, 0, 1294448910, 0, 0, 0, 675284406, 0, 0, 0, -957370204, 0, 0, 0, -1551365092, 0, 0, 0, 447798145, 0, 0, 0, 2144823097, 0, 0, 0, -1854352853, 0, 0, 0, -199266669, 0, 0, 0, 66528827, 0, 0, 0, 1720752771, 0, 0, 0, -2009124975, 0, 0, 0, -312962263, 0, 0, 0, 1415595188, 0, 0, 0, 822605836, 0, 0, 0, -542618338, 0, 0, 0, -1160777306, 0, 0, 0, -320892162, 0, 0, 0, -1984418234, 0, 0, 0, 1729600340, 0, 0, 0, 40904684, 0, 0, 0, -1152847759, 0, 0, 0, -567325495, 0, 0, 0, 813758939, 0, 0, 0, 1441219939, 0, 0, 0, -1667219605, 0, 0, 0, -104365101, 0, 0, 0, 392705729, 0, 0, 0, 1913621113, 0, 0, 0, -885563932, 0, 0, 0, -1370431140, 0, 0, 0, 1090475086, 0, 0, 0, 630778102, 0, 0, 0, 1938328494, 0, 0, 0, 384775958, 0, 0, 0, -129990140, 0, 0, 0, -1658372420, 0, 0, 0, 606071073, 0, 0, 0, 1098405273, 0, 0, 0, -1344806773, 0, 0, 0, -894411725, 0, 0, 0, 1001806317, 0, 0, 0, 1590814037, 0, 0, 0, -1333899193, 0, 0, 0, -719721217, 0, 0, 0, 1814117218, 0, 0, 0, 155617242, 0, 0, 0, -404147512, 0, 0, 0, -2104586640, 0, 0, 0, -727782104, 0, 0, 0, -1309060720, 0, 0, 0, 1599530114, 0, 0, 0, 976312378, 0, 0, 0, -2096525401, 0, 0, 0, -428985569, 0, 0, 0, 146900493, 0, 0, 0, 1839610549, 0, 0, 0, -1528741699, 0, 0, 0, -1048118267, 0, 0, 0, 791234839, 0, 0, 0, 1246688687, 0, 0, 0, -210361806, 0, 0, 0, -1777230198, 0, 0, 0, 2025728920, 0, 0, 0, 500799264, 0, 0, 0, 1271526520, 0, 0, 0, 783173824, 0, 0, 0, -1073611310, 0, 0, 0, -1520025238, 0, 0, 0, 475961079, 0, 0, 0, 2033789519, 0, 0, 0, -1751736483, 0, 0, 0, -219077659, 0, 0, 0, 85551949, 0, 0, 0, 1618925557, 0, 0, 0, -1898880281, 0, 0, 0, -340337057, 0, 0, 0, 1385040322, 0, 0, 0, 938063226, 0, 0, 0, -649723800, 0, 0, 0, -1138639664, 0, 0, 0, -365830264, 0, 0, 0, -1890163920, 0, 0, 0, 1643763234, 0, 0, 0, 77490842, 0, 0, 0, -1113146105, 0, 0, 0, -658439745, 0, 0, 0, 913224877, 0, 0, 0, 1393100821, 0, 0, 0, -1706135011, 0, 0, 0, -14037339, 0, 0, 0, 294026167, 0, 0, 0, 1960953615, 0, 0, 0, -841412462, 0, 0, 0, -1463899094, 0, 0, 0, 1175525688, 0, 0, 0, 594978176, 0, 0, 0, 1969669848, 0, 0, 0, 268532320, 0, 0, 0, -22098062, 0, 0, 0, -1681296438, 0, 0, 0, 586261591, 0, 0, 0, 1201019119, 0, 0, 0, -1455837699, 0, 0, 0, -866250427, 0, 0, 0, 116280694, 0, 0, 0, 1669984718, 0, 0, 0, -1926871844, 0, 0, 0, -398329756, 0, 0, 0, 1366896633, 0, 0, 0, 874419009, 0, 0, 0, -625924525, 0, 0, 0, -1076454677, 0, 0, 0, -372835917, 0, 0, 0, -1935588085, 0, 0, 0, 1645146137, 0, 0, 0, 124341409, 0, 0, 0, -1101948100, 0, 0, 0, -617207932, 0, 0, 0, 899256982, 0, 0, 0, 1358835246, 0, 0, 0, -1715907546, 0, 0, 0, -52500322, 0, 0, 0, 309419404, 0, 0, 0, 1997988148, 0, 0, 0, -835832151, 0, 0, 0, -1421243887, 0, 0, 0, 1172717315, 0, 0, 0, 545358779, 0, 0, 0, 1989271779, 0, 0, 0, 334912603, 0, 0, 0, -44439223, 0, 0, 0, -1740745231, 0, 0, 0, 554074732, 0, 0, 0, 1147223764, 0, 0, 0, -1429304378, 0, 0, 0, -810993794, 0, 0, 0, 943816662, 0, 0, 0, 1562821486, 0, 0, 0, -1282836868, 0, 0, 0, -688993596, 0, 0, 0, 1876303193, 0, 0, 0, 179413473, 0, 0, 0, -467790605, 0, 0, 0, -2122733493, 0, 0, 0, -680932589, 0, 0, 0, -1307674709, 0, 0, 0, 1554105017, 0, 0, 0, 969309697, 0, 0, 0, -2130794084, 0, 0, 0, -442952412, 0, 0, 0, 188129334, 0, 0, 0, 1850809486, 0, 0, 0, -1491704186, 0, 0, 0, -1032725954, 0, 0, 0, 752774956, 0, 0, 0, 1236915092, 0, 0, 0, -259980279, 0, 0, 0, -1780041551, 0, 0, 0, 2068385187, 0, 0, 0, 506376475, 0, 0, 0, 1212076611, 0, 0, 0, 760835835, 0, 0, 0, -1007232023, 0, 0, 0, -1500420271, 0, 0, 0, 531214540, 0, 0, 0, 2060323956, 0, 0, 0, -1805534874, 0, 0, 0, -251263522, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE._deflateInit2__my_version=allocate([49,46,50,46,54,0] /* 1.2.6\00 */, "i8", ALLOC_STATIC);
_configuration_table=allocate([0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 4, 0, 4, 0, 8, 0, 4, 0, 32, 0, 0, 0, 4, 0, 5, 0, 16, 0, 8, 0, 32, 0, 0, 0, 4, 0, 6, 0, 32, 0, 32, 0, 32, 0, 0, 0, 4, 0, 4, 0, 16, 0, 16, 0, 34, 0, 0, 0, 8, 0, 16, 0, 32, 0, 32, 0, 34, 0, 0, 0, 8, 0, 16, 0, 128, 0, 128, 0, 34, 0, 0, 0, 8, 0, 32, 0, 128, 0, 256, 0, 34, 0, 0, 0, 32, 0, 128, 0, 258, 0, 1024, 0, 34, 0, 0, 0, 32, 0, 258, 0, 258, 0, 4096, 0, 34, 0, 0, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str1277=allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0] /* invalid distance too */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11278=allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0] /* invalid distance cod */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21279=allocate([105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0] /* invalid literal/leng */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1282=allocate([49,46,50,46,54,0] /* 1.2.6\00 */, "i8", ALLOC_STATIC);
_inflate_order=allocate([16, 0, 17, 0, 18, 0, 0, 0, 8, 0, 7, 0, 9, 0, 6, 0, 10, 0, 5, 0, 11, 0, 4, 0, 12, 0, 3, 0, 13, 0, 2, 0, 14, 0, 1, 0, 15, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
STRING_TABLE.__str11283=allocate([105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0] /* incorrect header che */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21284=allocate([117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0] /* unknown compression  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31285=allocate([105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0] /* invalid window size\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41286=allocate([117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0] /* unknown header flags */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51287=allocate([104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0] /* header crc mismatch\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61288=allocate([105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0] /* invalid block type\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71289=allocate([105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0] /* invalid stored block */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81290=allocate([116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0] /* too many length or d */, "i8", ALLOC_STATIC);
STRING_TABLE.__str91291=allocate([105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0] /* invalid code lengths */, "i8", ALLOC_STATIC);
STRING_TABLE.__str101292=allocate([105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0] /* invalid bit length r */, "i8", ALLOC_STATIC);
STRING_TABLE.__str111293=allocate([105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0] /* invalid code -- miss */, "i8", ALLOC_STATIC);
STRING_TABLE.__str121294=allocate([105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0] /* invalid literal/leng */, "i8", ALLOC_STATIC);
STRING_TABLE.__str131295=allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0] /* invalid distances se */, "i8", ALLOC_STATIC);
STRING_TABLE.__str141296=allocate([105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0] /* invalid literal/leng */, "i8", ALLOC_STATIC);
STRING_TABLE.__str151297=allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0] /* invalid distance cod */, "i8", ALLOC_STATIC);
STRING_TABLE.__str161298=allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0] /* invalid distance too */, "i8", ALLOC_STATIC);
STRING_TABLE.__str171299=allocate([105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0] /* incorrect data check */, "i8", ALLOC_STATIC);
STRING_TABLE.__str181300=allocate([105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0] /* incorrect length che */, "i8", ALLOC_STATIC);
_fixedtables_lenfix1301=allocate([96, 7, 0, 0, 0, 8, 80, 0, 0, 8, 16, 0, 20, 8, 115, 0, 18, 7, 31, 0, 0, 8, 112, 0, 0, 8, 48, 0, 0, 9, 192, 0, 16, 7, 10, 0, 0, 8, 96, 0, 0, 8, 32, 0, 0, 9, 160, 0, 0, 8, 0, 0, 0, 8, 128, 0, 0, 8, 64, 0, 0, 9, 224, 0, 16, 7, 6, 0, 0, 8, 88, 0, 0, 8, 24, 0, 0, 9, 144, 0, 19, 7, 59, 0, 0, 8, 120, 0, 0, 8, 56, 0, 0, 9, 208, 0, 17, 7, 17, 0, 0, 8, 104, 0, 0, 8, 40, 0, 0, 9, 176, 0, 0, 8, 8, 0, 0, 8, 136, 0, 0, 8, 72, 0, 0, 9, 240, 0, 16, 7, 4, 0, 0, 8, 84, 0, 0, 8, 20, 0, 21, 8, 227, 0, 19, 7, 43, 0, 0, 8, 116, 0, 0, 8, 52, 0, 0, 9, 200, 0, 17, 7, 13, 0, 0, 8, 100, 0, 0, 8, 36, 0, 0, 9, 168, 0, 0, 8, 4, 0, 0, 8, 132, 0, 0, 8, 68, 0, 0, 9, 232, 0, 16, 7, 8, 0, 0, 8, 92, 0, 0, 8, 28, 0, 0, 9, 152, 0, 20, 7, 83, 0, 0, 8, 124, 0, 0, 8, 60, 0, 0, 9, 216, 0, 18, 7, 23, 0, 0, 8, 108, 0, 0, 8, 44, 0, 0, 9, 184, 0, 0, 8, 12, 0, 0, 8, 140, 0, 0, 8, 76, 0, 0, 9, 248, 0, 16, 7, 3, 0, 0, 8, 82, 0, 0, 8, 18, 0, 21, 8, 163, 0, 19, 7, 35, 0, 0, 8, 114, 0, 0, 8, 50, 0, 0, 9, 196, 0, 17, 7, 11, 0, 0, 8, 98, 0, 0, 8, 34, 0, 0, 9, 164, 0, 0, 8, 2, 0, 0, 8, 130, 0, 0, 8, 66, 0, 0, 9, 228, 0, 16, 7, 7, 0, 0, 8, 90, 0, 0, 8, 26, 0, 0, 9, 148, 0, 20, 7, 67, 0, 0, 8, 122, 0, 0, 8, 58, 0, 0, 9, 212, 0, 18, 7, 19, 0, 0, 8, 106, 0, 0, 8, 42, 0, 0, 9, 180, 0, 0, 8, 10, 0, 0, 8, 138, 0, 0, 8, 74, 0, 0, 9, 244, 0, 16, 7, 5, 0, 0, 8, 86, 0, 0, 8, 22, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 118, 0, 0, 8, 54, 0, 0, 9, 204, 0, 17, 7, 15, 0, 0, 8, 102, 0, 0, 8, 38, 0, 0, 9, 172, 0, 0, 8, 6, 0, 0, 8, 134, 0, 0, 8, 70, 0, 0, 9, 236, 0, 16, 7, 9, 0, 0, 8, 94, 0, 0, 8, 30, 0, 0, 9, 156, 0, 20, 7, 99, 0, 0, 8, 126, 0, 0, 8, 62, 0, 0, 9, 220, 0, 18, 7, 27, 0, 0, 8, 110, 0, 0, 8, 46, 0, 0, 9, 188, 0, 0, 8, 14, 0, 0, 8, 142, 0, 0, 8, 78, 0, 0, 9, 252, 0, 96, 7, 0, 0, 0, 8, 81, 0, 0, 8, 17, 0, 21, 8, 131, 0, 18, 7, 31, 0, 0, 8, 113, 0, 0, 8, 49, 0, 0, 9, 194, 0, 16, 7, 10, 0, 0, 8, 97, 0, 0, 8, 33, 0, 0, 9, 162, 0, 0, 8, 1, 0, 0, 8, 129, 0, 0, 8, 65, 0, 0, 9, 226, 0, 16, 7, 6, 0, 0, 8, 89, 0, 0, 8, 25, 0, 0, 9, 146, 0, 19, 7, 59, 0, 0, 8, 121, 0, 0, 8, 57, 0, 0, 9, 210, 0, 17, 7, 17, 0, 0, 8, 105, 0, 0, 8, 41, 0, 0, 9, 178, 0, 0, 8, 9, 0, 0, 8, 137, 0, 0, 8, 73, 0, 0, 9, 242, 0, 16, 7, 4, 0, 0, 8, 85, 0, 0, 8, 21, 0, 16, 8, 258, 0, 19, 7, 43, 0, 0, 8, 117, 0, 0, 8, 53, 0, 0, 9, 202, 0, 17, 7, 13, 0, 0, 8, 101, 0, 0, 8, 37, 0, 0, 9, 170, 0, 0, 8, 5, 0, 0, 8, 133, 0, 0, 8, 69, 0, 0, 9, 234, 0, 16, 7, 8, 0, 0, 8, 93, 0, 0, 8, 29, 0, 0, 9, 154, 0, 20, 7, 83, 0, 0, 8, 125, 0, 0, 8, 61, 0, 0, 9, 218, 0, 18, 7, 23, 0, 0, 8, 109, 0, 0, 8, 45, 0, 0, 9, 186, 0, 0, 8, 13, 0, 0, 8, 141, 0, 0, 8, 77, 0, 0, 9, 250, 0, 16, 7, 3, 0, 0, 8, 83, 0, 0, 8, 19, 0, 21, 8, 195, 0, 19, 7, 35, 0, 0, 8, 115, 0, 0, 8, 51, 0, 0, 9, 198, 0, 17, 7, 11, 0, 0, 8, 99, 0, 0, 8, 35, 0, 0, 9, 166, 0, 0, 8, 3, 0, 0, 8, 131, 0, 0, 8, 67, 0, 0, 9, 230, 0, 16, 7, 7, 0, 0, 8, 91, 0, 0, 8, 27, 0, 0, 9, 150, 0, 20, 7, 67, 0, 0, 8, 123, 0, 0, 8, 59, 0, 0, 9, 214, 0, 18, 7, 19, 0, 0, 8, 107, 0, 0, 8, 43, 0, 0, 9, 182, 0, 0, 8, 11, 0, 0, 8, 139, 0, 0, 8, 75, 0, 0, 9, 246, 0, 16, 7, 5, 0, 0, 8, 87, 0, 0, 8, 23, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 119, 0, 0, 8, 55, 0, 0, 9, 206, 0, 17, 7, 15, 0, 0, 8, 103, 0, 0, 8, 39, 0, 0, 9, 174, 0, 0, 8, 7, 0, 0, 8, 135, 0, 0, 8, 71, 0, 0, 9, 238, 0, 16, 7, 9, 0, 0, 8, 95, 0, 0, 8, 31, 0, 0, 9, 158, 0, 20, 7, 99, 0, 0, 8, 127, 0, 0, 8, 63, 0, 0, 9, 222, 0, 18, 7, 27, 0, 0, 8, 111, 0, 0, 8, 47, 0, 0, 9, 190, 0, 0, 8, 15, 0, 0, 8, 143, 0, 0, 8, 79, 0, 0, 9, 254, 0, 96, 7, 0, 0, 0, 8, 80, 0, 0, 8, 16, 0, 20, 8, 115, 0, 18, 7, 31, 0, 0, 8, 112, 0, 0, 8, 48, 0, 0, 9, 193, 0, 16, 7, 10, 0, 0, 8, 96, 0, 0, 8, 32, 0, 0, 9, 161, 0, 0, 8, 0, 0, 0, 8, 128, 0, 0, 8, 64, 0, 0, 9, 225, 0, 16, 7, 6, 0, 0, 8, 88, 0, 0, 8, 24, 0, 0, 9, 145, 0, 19, 7, 59, 0, 0, 8, 120, 0, 0, 8, 56, 0, 0, 9, 209, 0, 17, 7, 17, 0, 0, 8, 104, 0, 0, 8, 40, 0, 0, 9, 177, 0, 0, 8, 8, 0, 0, 8, 136, 0, 0, 8, 72, 0, 0, 9, 241, 0, 16, 7, 4, 0, 0, 8, 84, 0, 0, 8, 20, 0, 21, 8, 227, 0, 19, 7, 43, 0, 0, 8, 116, 0, 0, 8, 52, 0, 0, 9, 201, 0, 17, 7, 13, 0, 0, 8, 100, 0, 0, 8, 36, 0, 0, 9, 169, 0, 0, 8, 4, 0, 0, 8, 132, 0, 0, 8, 68, 0, 0, 9, 233, 0, 16, 7, 8, 0, 0, 8, 92, 0, 0, 8, 28, 0, 0, 9, 153, 0, 20, 7, 83, 0, 0, 8, 124, 0, 0, 8, 60, 0, 0, 9, 217, 0, 18, 7, 23, 0, 0, 8, 108, 0, 0, 8, 44, 0, 0, 9, 185, 0, 0, 8, 12, 0, 0, 8, 140, 0, 0, 8, 76, 0, 0, 9, 249, 0, 16, 7, 3, 0, 0, 8, 82, 0, 0, 8, 18, 0, 21, 8, 163, 0, 19, 7, 35, 0, 0, 8, 114, 0, 0, 8, 50, 0, 0, 9, 197, 0, 17, 7, 11, 0, 0, 8, 98, 0, 0, 8, 34, 0, 0, 9, 165, 0, 0, 8, 2, 0, 0, 8, 130, 0, 0, 8, 66, 0, 0, 9, 229, 0, 16, 7, 7, 0, 0, 8, 90, 0, 0, 8, 26, 0, 0, 9, 149, 0, 20, 7, 67, 0, 0, 8, 122, 0, 0, 8, 58, 0, 0, 9, 213, 0, 18, 7, 19, 0, 0, 8, 106, 0, 0, 8, 42, 0, 0, 9, 181, 0, 0, 8, 10, 0, 0, 8, 138, 0, 0, 8, 74, 0, 0, 9, 245, 0, 16, 7, 5, 0, 0, 8, 86, 0, 0, 8, 22, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 118, 0, 0, 8, 54, 0, 0, 9, 205, 0, 17, 7, 15, 0, 0, 8, 102, 0, 0, 8, 38, 0, 0, 9, 173, 0, 0, 8, 6, 0, 0, 8, 134, 0, 0, 8, 70, 0, 0, 9, 237, 0, 16, 7, 9, 0, 0, 8, 94, 0, 0, 8, 30, 0, 0, 9, 157, 0, 20, 7, 99, 0, 0, 8, 126, 0, 0, 8, 62, 0, 0, 9, 221, 0, 18, 7, 27, 0, 0, 8, 110, 0, 0, 8, 46, 0, 0, 9, 189, 0, 0, 8, 14, 0, 0, 8, 142, 0, 0, 8, 78, 0, 0, 9, 253, 0, 96, 7, 0, 0, 0, 8, 81, 0, 0, 8, 17, 0, 21, 8, 131, 0, 18, 7, 31, 0, 0, 8, 113, 0, 0, 8, 49, 0, 0, 9, 195, 0, 16, 7, 10, 0, 0, 8, 97, 0, 0, 8, 33, 0, 0, 9, 163, 0, 0, 8, 1, 0, 0, 8, 129, 0, 0, 8, 65, 0, 0, 9, 227, 0, 16, 7, 6, 0, 0, 8, 89, 0, 0, 8, 25, 0, 0, 9, 147, 0, 19, 7, 59, 0, 0, 8, 121, 0, 0, 8, 57, 0, 0, 9, 211, 0, 17, 7, 17, 0, 0, 8, 105, 0, 0, 8, 41, 0, 0, 9, 179, 0, 0, 8, 9, 0, 0, 8, 137, 0, 0, 8, 73, 0, 0, 9, 243, 0, 16, 7, 4, 0, 0, 8, 85, 0, 0, 8, 21, 0, 16, 8, 258, 0, 19, 7, 43, 0, 0, 8, 117, 0, 0, 8, 53, 0, 0, 9, 203, 0, 17, 7, 13, 0, 0, 8, 101, 0, 0, 8, 37, 0, 0, 9, 171, 0, 0, 8, 5, 0, 0, 8, 133, 0, 0, 8, 69, 0, 0, 9, 235, 0, 16, 7, 8, 0, 0, 8, 93, 0, 0, 8, 29, 0, 0, 9, 155, 0, 20, 7, 83, 0, 0, 8, 125, 0, 0, 8, 61, 0, 0, 9, 219, 0, 18, 7, 23, 0, 0, 8, 109, 0, 0, 8, 45, 0, 0, 9, 187, 0, 0, 8, 13, 0, 0, 8, 141, 0, 0, 8, 77, 0, 0, 9, 251, 0, 16, 7, 3, 0, 0, 8, 83, 0, 0, 8, 19, 0, 21, 8, 195, 0, 19, 7, 35, 0, 0, 8, 115, 0, 0, 8, 51, 0, 0, 9, 199, 0, 17, 7, 11, 0, 0, 8, 99, 0, 0, 8, 35, 0, 0, 9, 167, 0, 0, 8, 3, 0, 0, 8, 131, 0, 0, 8, 67, 0, 0, 9, 231, 0, 16, 7, 7, 0, 0, 8, 91, 0, 0, 8, 27, 0, 0, 9, 151, 0, 20, 7, 67, 0, 0, 8, 123, 0, 0, 8, 59, 0, 0, 9, 215, 0, 18, 7, 19, 0, 0, 8, 107, 0, 0, 8, 43, 0, 0, 9, 183, 0, 0, 8, 11, 0, 0, 8, 139, 0, 0, 8, 75, 0, 0, 9, 247, 0, 16, 7, 5, 0, 0, 8, 87, 0, 0, 8, 23, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 119, 0, 0, 8, 55, 0, 0, 9, 207, 0, 17, 7, 15, 0, 0, 8, 103, 0, 0, 8, 39, 0, 0, 9, 175, 0, 0, 8, 7, 0, 0, 8, 135, 0, 0, 8, 71, 0, 0, 9, 239, 0, 16, 7, 9, 0, 0, 8, 95, 0, 0, 8, 31, 0, 0, 9, 159, 0, 20, 7, 99, 0, 0, 8, 127, 0, 0, 8, 63, 0, 0, 9, 223, 0, 18, 7, 27, 0, 0, 8, 111, 0, 0, 8, 47, 0, 0, 9, 191, 0, 0, 8, 15, 0, 0, 8, 143, 0, 0, 8, 79, 0, 0, 9, 255, 0], ["i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0], ALLOC_STATIC);
_fixedtables_distfix1302=allocate([16, 5, 1, 0, 23, 5, 257, 0, 19, 5, 17, 0, 27, 5, 4097, 0, 17, 5, 5, 0, 25, 5, 1025, 0, 21, 5, 65, 0, 29, 5, 16385, 0, 16, 5, 3, 0, 24, 5, 513, 0, 20, 5, 33, 0, 28, 5, 8193, 0, 18, 5, 9, 0, 26, 5, 2049, 0, 22, 5, 129, 0, 64, 5, 0, 0, 16, 5, 2, 0, 23, 5, 385, 0, 19, 5, 25, 0, 27, 5, 6145, 0, 17, 5, 7, 0, 25, 5, 1537, 0, 21, 5, 97, 0, 29, 5, 24577, 0, 16, 5, 4, 0, 24, 5, 769, 0, 20, 5, 49, 0, 28, 5, 12289, 0, 18, 5, 13, 0, 26, 5, 3073, 0, 22, 5, 193, 0, 64, 5, 0, 0], ["i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0], ALLOC_STATIC);
_inflate_table_lbase=allocate([3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 13, 0, 15, 0, 17, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 43, 0, 51, 0, 59, 0, 67, 0, 83, 0, 99, 0, 115, 0, 131, 0, 163, 0, 195, 0, 227, 0, 258, 0, 0, 0, 0, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_inflate_table_lext=allocate([16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 17, 0, 17, 0, 17, 0, 17, 0, 18, 0, 18, 0, 18, 0, 18, 0, 19, 0, 19, 0, 19, 0, 19, 0, 20, 0, 20, 0, 20, 0, 20, 0, 21, 0, 21, 0, 21, 0, 21, 0, 16, 0, 203, 0, 69, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_inflate_table_dbase=allocate([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 7, 0, 9, 0, 13, 0, 17, 0, 25, 0, 33, 0, 49, 0, 65, 0, 97, 0, 129, 0, 193, 0, 257, 0, 385, 0, 513, 0, 769, 0, 1025, 0, 1537, 0, 2049, 0, 3073, 0, 4097, 0, 6145, 0, 8193, 0, 12289, 0, 16385, 0, 24577, 0, 0, 0, 0, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_inflate_table_dext=allocate([16, 0, 16, 0, 16, 0, 16, 0, 17, 0, 17, 0, 18, 0, 18, 0, 19, 0, 19, 0, 20, 0, 20, 0, 21, 0, 21, 0, 22, 0, 22, 0, 23, 0, 23, 0, 24, 0, 24, 0, 25, 0, 25, 0, 26, 0, 26, 0, 27, 0, 27, 0, 28, 0, 28, 0, 29, 0, 29, 0, 64, 0, 64, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
STRING_TABLE.__dist_code=allocate([0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29] /* \00\01\02\03\04\04\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__length_code=allocate([0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28] /* \00\01\02\03\04\05\0 */, "i8", ALLOC_STATIC);
_static_l_desc=allocate([0, 0, 0, 0, 0, 0, 0, 0, 257, 0, 0, 0, 286, 0, 0, 0, 15, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_static_d_desc=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 15, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_static_bl_desc=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 7, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_static_ltree=allocate([12, 0, 8, 0, 140, 0, 8, 0, 76, 0, 8, 0, 204, 0, 8, 0, 44, 0, 8, 0, 172, 0, 8, 0, 108, 0, 8, 0, 236, 0, 8, 0, 28, 0, 8, 0, 156, 0, 8, 0, 92, 0, 8, 0, 220, 0, 8, 0, 60, 0, 8, 0, 188, 0, 8, 0, 124, 0, 8, 0, 252, 0, 8, 0, 2, 0, 8, 0, 130, 0, 8, 0, 66, 0, 8, 0, 194, 0, 8, 0, 34, 0, 8, 0, 162, 0, 8, 0, 98, 0, 8, 0, 226, 0, 8, 0, 18, 0, 8, 0, 146, 0, 8, 0, 82, 0, 8, 0, 210, 0, 8, 0, 50, 0, 8, 0, 178, 0, 8, 0, 114, 0, 8, 0, 242, 0, 8, 0, 10, 0, 8, 0, 138, 0, 8, 0, 74, 0, 8, 0, 202, 0, 8, 0, 42, 0, 8, 0, 170, 0, 8, 0, 106, 0, 8, 0, 234, 0, 8, 0, 26, 0, 8, 0, 154, 0, 8, 0, 90, 0, 8, 0, 218, 0, 8, 0, 58, 0, 8, 0, 186, 0, 8, 0, 122, 0, 8, 0, 250, 0, 8, 0, 6, 0, 8, 0, 134, 0, 8, 0, 70, 0, 8, 0, 198, 0, 8, 0, 38, 0, 8, 0, 166, 0, 8, 0, 102, 0, 8, 0, 230, 0, 8, 0, 22, 0, 8, 0, 150, 0, 8, 0, 86, 0, 8, 0, 214, 0, 8, 0, 54, 0, 8, 0, 182, 0, 8, 0, 118, 0, 8, 0, 246, 0, 8, 0, 14, 0, 8, 0, 142, 0, 8, 0, 78, 0, 8, 0, 206, 0, 8, 0, 46, 0, 8, 0, 174, 0, 8, 0, 110, 0, 8, 0, 238, 0, 8, 0, 30, 0, 8, 0, 158, 0, 8, 0, 94, 0, 8, 0, 222, 0, 8, 0, 62, 0, 8, 0, 190, 0, 8, 0, 126, 0, 8, 0, 254, 0, 8, 0, 1, 0, 8, 0, 129, 0, 8, 0, 65, 0, 8, 0, 193, 0, 8, 0, 33, 0, 8, 0, 161, 0, 8, 0, 97, 0, 8, 0, 225, 0, 8, 0, 17, 0, 8, 0, 145, 0, 8, 0, 81, 0, 8, 0, 209, 0, 8, 0, 49, 0, 8, 0, 177, 0, 8, 0, 113, 0, 8, 0, 241, 0, 8, 0, 9, 0, 8, 0, 137, 0, 8, 0, 73, 0, 8, 0, 201, 0, 8, 0, 41, 0, 8, 0, 169, 0, 8, 0, 105, 0, 8, 0, 233, 0, 8, 0, 25, 0, 8, 0, 153, 0, 8, 0, 89, 0, 8, 0, 217, 0, 8, 0, 57, 0, 8, 0, 185, 0, 8, 0, 121, 0, 8, 0, 249, 0, 8, 0, 5, 0, 8, 0, 133, 0, 8, 0, 69, 0, 8, 0, 197, 0, 8, 0, 37, 0, 8, 0, 165, 0, 8, 0, 101, 0, 8, 0, 229, 0, 8, 0, 21, 0, 8, 0, 149, 0, 8, 0, 85, 0, 8, 0, 213, 0, 8, 0, 53, 0, 8, 0, 181, 0, 8, 0, 117, 0, 8, 0, 245, 0, 8, 0, 13, 0, 8, 0, 141, 0, 8, 0, 77, 0, 8, 0, 205, 0, 8, 0, 45, 0, 8, 0, 173, 0, 8, 0, 109, 0, 8, 0, 237, 0, 8, 0, 29, 0, 8, 0, 157, 0, 8, 0, 93, 0, 8, 0, 221, 0, 8, 0, 61, 0, 8, 0, 189, 0, 8, 0, 125, 0, 8, 0, 253, 0, 8, 0, 19, 0, 9, 0, 275, 0, 9, 0, 147, 0, 9, 0, 403, 0, 9, 0, 83, 0, 9, 0, 339, 0, 9, 0, 211, 0, 9, 0, 467, 0, 9, 0, 51, 0, 9, 0, 307, 0, 9, 0, 179, 0, 9, 0, 435, 0, 9, 0, 115, 0, 9, 0, 371, 0, 9, 0, 243, 0, 9, 0, 499, 0, 9, 0, 11, 0, 9, 0, 267, 0, 9, 0, 139, 0, 9, 0, 395, 0, 9, 0, 75, 0, 9, 0, 331, 0, 9, 0, 203, 0, 9, 0, 459, 0, 9, 0, 43, 0, 9, 0, 299, 0, 9, 0, 171, 0, 9, 0, 427, 0, 9, 0, 107, 0, 9, 0, 363, 0, 9, 0, 235, 0, 9, 0, 491, 0, 9, 0, 27, 0, 9, 0, 283, 0, 9, 0, 155, 0, 9, 0, 411, 0, 9, 0, 91, 0, 9, 0, 347, 0, 9, 0, 219, 0, 9, 0, 475, 0, 9, 0, 59, 0, 9, 0, 315, 0, 9, 0, 187, 0, 9, 0, 443, 0, 9, 0, 123, 0, 9, 0, 379, 0, 9, 0, 251, 0, 9, 0, 507, 0, 9, 0, 7, 0, 9, 0, 263, 0, 9, 0, 135, 0, 9, 0, 391, 0, 9, 0, 71, 0, 9, 0, 327, 0, 9, 0, 199, 0, 9, 0, 455, 0, 9, 0, 39, 0, 9, 0, 295, 0, 9, 0, 167, 0, 9, 0, 423, 0, 9, 0, 103, 0, 9, 0, 359, 0, 9, 0, 231, 0, 9, 0, 487, 0, 9, 0, 23, 0, 9, 0, 279, 0, 9, 0, 151, 0, 9, 0, 407, 0, 9, 0, 87, 0, 9, 0, 343, 0, 9, 0, 215, 0, 9, 0, 471, 0, 9, 0, 55, 0, 9, 0, 311, 0, 9, 0, 183, 0, 9, 0, 439, 0, 9, 0, 119, 0, 9, 0, 375, 0, 9, 0, 247, 0, 9, 0, 503, 0, 9, 0, 15, 0, 9, 0, 271, 0, 9, 0, 143, 0, 9, 0, 399, 0, 9, 0, 79, 0, 9, 0, 335, 0, 9, 0, 207, 0, 9, 0, 463, 0, 9, 0, 47, 0, 9, 0, 303, 0, 9, 0, 175, 0, 9, 0, 431, 0, 9, 0, 111, 0, 9, 0, 367, 0, 9, 0, 239, 0, 9, 0, 495, 0, 9, 0, 31, 0, 9, 0, 287, 0, 9, 0, 159, 0, 9, 0, 415, 0, 9, 0, 95, 0, 9, 0, 351, 0, 9, 0, 223, 0, 9, 0, 479, 0, 9, 0, 63, 0, 9, 0, 319, 0, 9, 0, 191, 0, 9, 0, 447, 0, 9, 0, 127, 0, 9, 0, 383, 0, 9, 0, 255, 0, 9, 0, 511, 0, 9, 0, 0, 0, 7, 0, 64, 0, 7, 0, 32, 0, 7, 0, 96, 0, 7, 0, 16, 0, 7, 0, 80, 0, 7, 0, 48, 0, 7, 0, 112, 0, 7, 0, 8, 0, 7, 0, 72, 0, 7, 0, 40, 0, 7, 0, 104, 0, 7, 0, 24, 0, 7, 0, 88, 0, 7, 0, 56, 0, 7, 0, 120, 0, 7, 0, 4, 0, 7, 0, 68, 0, 7, 0, 36, 0, 7, 0, 100, 0, 7, 0, 20, 0, 7, 0, 84, 0, 7, 0, 52, 0, 7, 0, 116, 0, 7, 0, 3, 0, 8, 0, 131, 0, 8, 0, 67, 0, 8, 0, 195, 0, 8, 0, 35, 0, 8, 0, 163, 0, 8, 0, 99, 0, 8, 0, 227, 0, 8, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_static_dtree=allocate([0, 0, 5, 0, 16, 0, 5, 0, 8, 0, 5, 0, 24, 0, 5, 0, 4, 0, 5, 0, 20, 0, 5, 0, 12, 0, 5, 0, 28, 0, 5, 0, 2, 0, 5, 0, 18, 0, 5, 0, 10, 0, 5, 0, 26, 0, 5, 0, 6, 0, 5, 0, 22, 0, 5, 0, 14, 0, 5, 0, 30, 0, 5, 0, 1, 0, 5, 0, 17, 0, 5, 0, 9, 0, 5, 0, 25, 0, 5, 0, 5, 0, 5, 0, 21, 0, 5, 0, 13, 0, 5, 0, 29, 0, 5, 0, 3, 0, 5, 0, 19, 0, 5, 0, 11, 0, 5, 0, 27, 0, 5, 0, 7, 0, 5, 0, 23, 0, 5, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
_extra_lbits=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_base_length=allocate([0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 10, 0, 0, 0, 12, 0, 0, 0, 14, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 56, 0, 0, 0, 64, 0, 0, 0, 80, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 128, 0, 0, 0, 160, 0, 0, 0, 192, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_extra_dbits=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_base_dist=allocate([0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 24, 0, 0, 0, 32, 0, 0, 0, 48, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 128, 0, 0, 0, 192, 0, 0, 0, 256, 0, 0, 0, 384, 0, 0, 0, 512, 0, 0, 0, 768, 0, 0, 0, 1024, 0, 0, 0, 1536, 0, 0, 0, 2048, 0, 0, 0, 3072, 0, 0, 0, 4096, 0, 0, 0, 6144, 0, 0, 0, 8192, 0, 0, 0, 12288, 0, 0, 0, 16384, 0, 0, 0, 24576, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE._bl_order=allocate([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15] /* \10\11\12\00\08\07\0 */, "i8", ALLOC_STATIC);
_extra_blbits=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str1329=allocate([110,101,101,100,32,100,105,99,116,105,111,110,97,114,121,0] /* need dictionary\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11330=allocate([115,116,114,101,97,109,32,101,110,100,0] /* stream end\00 */, "i8", ALLOC_STATIC);
__str21331=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str31332=allocate([102,105,108,101,32,101,114,114,111,114,0] /* file error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41333=allocate([115,116,114,101,97,109,32,101,114,114,111,114,0] /* stream error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51334=allocate([100,97,116,97,32,101,114,114,111,114,0] /* data error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61335=allocate([105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0] /* insufficient memory\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71336=allocate([98,117,102,102,101,114,32,101,114,114,111,114,0] /* buffer error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81337=allocate([105,110,99,111,109,112,97,116,105,98,108,101,32,118,101,114,115,105,111,110,0] /* incompatible version */, "i8", ALLOC_STATIC);
_z_errmsg=allocate(40, "*", ALLOC_STATIC);
__gm_=allocate(468, ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_mparams=allocate(24, "i32", ALLOC_STATIC);
HEAP32[((_directory_name)>>2)]=((STRING_TABLE.__str576)|0);
HEAP32[((_extension)>>2)]=((STRING_TABLE.__str575)|0);
HEAP32[((_mngname)>>2)]=((STRING_TABLE.__str574)|0);
HEAP32[((_inname)>>2)]=((STRING_TABLE.__str573)|0);
HEAP32[((_outname)>>2)]=((STRING_TABLE.__str572)|0);
HEAP32[((_pngcrush_options+4)>>2)]=((STRING_TABLE.__str359)|0);
HEAP32[((_pngcrush_options+12)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+20)>>2)]=((STRING_TABLE.__str361)|0);
HEAP32[((_pngcrush_options+28)>>2)]=((STRING_TABLE.__str362)|0);
HEAP32[((_pngcrush_options+36)>>2)]=((STRING_TABLE.__str363)|0);
HEAP32[((_pngcrush_options+44)>>2)]=((STRING_TABLE.__str364)|0);
HEAP32[((_pngcrush_options+52)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+60)>>2)]=((STRING_TABLE.__str365)|0);
HEAP32[((_pngcrush_options+68)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+76)>>2)]=((STRING_TABLE.__str366)|0);
HEAP32[((_pngcrush_options+84)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+92)>>2)]=((STRING_TABLE.__str367)|0);
HEAP32[((_pngcrush_options+100)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+108)>>2)]=((STRING_TABLE.__str368)|0);
HEAP32[((_pngcrush_options+116)>>2)]=((STRING_TABLE.__str369)|0);
HEAP32[((_pngcrush_options+124)>>2)]=((STRING_TABLE.__str370)|0);
HEAP32[((_pngcrush_options+132)>>2)]=((STRING_TABLE.__str371)|0);
HEAP32[((_pngcrush_options+140)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+148)>>2)]=((STRING_TABLE.__str372)|0);
HEAP32[((_pngcrush_options+156)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+164)>>2)]=((STRING_TABLE.__str373)|0);
HEAP32[((_pngcrush_options+172)>>2)]=((STRING_TABLE.__str374)|0);
HEAP32[((_pngcrush_options+180)>>2)]=((STRING_TABLE.__str375)|0);
HEAP32[((_pngcrush_options+188)>>2)]=((STRING_TABLE.__str376)|0);
HEAP32[((_pngcrush_options+196)>>2)]=((STRING_TABLE.__str377)|0);
HEAP32[((_pngcrush_options+204)>>2)]=((STRING_TABLE.__str378)|0);
HEAP32[((_pngcrush_options+212)>>2)]=((STRING_TABLE.__str379)|0);
HEAP32[((_pngcrush_options+220)>>2)]=((STRING_TABLE.__str380)|0);
HEAP32[((_pngcrush_options+228)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+236)>>2)]=((STRING_TABLE.__str381)|0);
HEAP32[((_pngcrush_options+244)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+252)>>2)]=((STRING_TABLE.__str382)|0);
HEAP32[((_pngcrush_options+260)>>2)]=((STRING_TABLE.__str383)|0);
HEAP32[((_pngcrush_options+268)>>2)]=((STRING_TABLE.__str384)|0);
HEAP32[((_pngcrush_options+276)>>2)]=((STRING_TABLE.__str385)|0);
HEAP32[((_pngcrush_options+284)>>2)]=((STRING_TABLE.__str386)|0);
HEAP32[((_pngcrush_options+292)>>2)]=((STRING_TABLE.__str387)|0);
HEAP32[((_pngcrush_options+300)>>2)]=((STRING_TABLE.__str388)|0);
HEAP32[((_pngcrush_options+308)>>2)]=((STRING_TABLE.__str389)|0);
HEAP32[((_pngcrush_options+316)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+324)>>2)]=((STRING_TABLE.__str390)|0);
HEAP32[((_pngcrush_options+332)>>2)]=((STRING_TABLE.__str391)|0);
HEAP32[((_pngcrush_options+340)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+348)>>2)]=((STRING_TABLE.__str392)|0);
HEAP32[((_pngcrush_options+356)>>2)]=((STRING_TABLE.__str393)|0);
HEAP32[((_pngcrush_options+364)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+372)>>2)]=((STRING_TABLE.__str394)|0);
HEAP32[((_pngcrush_options+380)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+388)>>2)]=((STRING_TABLE.__str395)|0);
HEAP32[((_pngcrush_options+396)>>2)]=((STRING_TABLE.__str396)|0);
HEAP32[((_pngcrush_options+404)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+412)>>2)]=((STRING_TABLE.__str397)|0);
HEAP32[((_pngcrush_options+420)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+428)>>2)]=((STRING_TABLE.__str398)|0);
HEAP32[((_pngcrush_options+436)>>2)]=((STRING_TABLE.__str399)|0);
HEAP32[((_pngcrush_options+444)>>2)]=((STRING_TABLE.__str400)|0);
HEAP32[((_pngcrush_options+452)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+460)>>2)]=((STRING_TABLE.__str401)|0);
HEAP32[((_pngcrush_options+468)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+476)>>2)]=((STRING_TABLE.__str402)|0);
HEAP32[((_pngcrush_options+484)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+492)>>2)]=((STRING_TABLE.__str403)|0);
HEAP32[((_pngcrush_options+500)>>2)]=((STRING_TABLE.__str404)|0);
HEAP32[((_pngcrush_options+508)>>2)]=((STRING_TABLE.__str405)|0);
HEAP32[((_pngcrush_options+516)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+524)>>2)]=((STRING_TABLE.__str406)|0);
HEAP32[((_pngcrush_options+532)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+540)>>2)]=((STRING_TABLE.__str407)|0);
HEAP32[((_pngcrush_options+548)>>2)]=((STRING_TABLE.__str408)|0);
HEAP32[((_pngcrush_options+556)>>2)]=((STRING_TABLE.__str409)|0);
HEAP32[((_pngcrush_options+564)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+572)>>2)]=((STRING_TABLE.__str390)|0);
HEAP32[((_pngcrush_options+580)>>2)]=((STRING_TABLE.__str410)|0);
HEAP32[((_pngcrush_options+588)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+596)>>2)]=((STRING_TABLE.__str411)|0);
HEAP32[((_pngcrush_options+604)>>2)]=((STRING_TABLE.__str412)|0);
HEAP32[((_pngcrush_options+612)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+620)>>2)]=((STRING_TABLE.__str413)|0);
HEAP32[((_pngcrush_options+628)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+636)>>2)]=((STRING_TABLE.__str414)|0);
HEAP32[((_pngcrush_options+644)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+652)>>2)]=((STRING_TABLE.__str415)|0);
HEAP32[((_pngcrush_options+660)>>2)]=((STRING_TABLE.__str416)|0);
HEAP32[((_pngcrush_options+668)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+676)>>2)]=((STRING_TABLE.__str417)|0);
HEAP32[((_pngcrush_options+684)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+692)>>2)]=((STRING_TABLE.__str418)|0);
HEAP32[((_pngcrush_options+700)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+708)>>2)]=((STRING_TABLE.__str419)|0);
HEAP32[((_pngcrush_options+716)>>2)]=((STRING_TABLE.__str420)|0);
HEAP32[((_pngcrush_options+724)>>2)]=((STRING_TABLE.__str421)|0);
HEAP32[((_pngcrush_options+732)>>2)]=((STRING_TABLE.__str422)|0);
HEAP32[((_pngcrush_options+740)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+748)>>2)]=((STRING_TABLE.__str423)|0);
HEAP32[((_pngcrush_options+756)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+764)>>2)]=((STRING_TABLE.__str424)|0);
HEAP32[((_pngcrush_options+772)>>2)]=((STRING_TABLE.__str425)|0);
HEAP32[((_pngcrush_options+780)>>2)]=((STRING_TABLE.__str426)|0);
HEAP32[((_pngcrush_options+788)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+796)>>2)]=((STRING_TABLE.__str427)|0);
HEAP32[((_pngcrush_options+804)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+812)>>2)]=((STRING_TABLE.__str428)|0);
HEAP32[((_pngcrush_options+820)>>2)]=((STRING_TABLE.__str429)|0);
HEAP32[((_pngcrush_options+828)>>2)]=((STRING_TABLE.__str430)|0);
HEAP32[((_pngcrush_options+836)>>2)]=((STRING_TABLE.__str431)|0);
HEAP32[((_pngcrush_options+844)>>2)]=((STRING_TABLE.__str432)|0);
HEAP32[((_pngcrush_options+852)>>2)]=((STRING_TABLE.__str433)|0);
HEAP32[((_pngcrush_options+860)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+868)>>2)]=((STRING_TABLE.__str434)|0);
HEAP32[((_pngcrush_options+876)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+884)>>2)]=((STRING_TABLE.__str435)|0);
HEAP32[((_pngcrush_options+892)>>2)]=((STRING_TABLE.__str436)|0);
HEAP32[((_pngcrush_options+900)>>2)]=((STRING_TABLE.__str437)|0);
HEAP32[((_pngcrush_options+908)>>2)]=((STRING_TABLE.__str438)|0);
HEAP32[((_pngcrush_options+916)>>2)]=((STRING_TABLE.__str439)|0);
HEAP32[((_pngcrush_options+924)>>2)]=((STRING_TABLE.__str440)|0);
HEAP32[((_pngcrush_options+932)>>2)]=((STRING_TABLE.__str441)|0);
HEAP32[((_pngcrush_options+940)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+948)>>2)]=((STRING_TABLE.__str390)|0);
HEAP32[((_pngcrush_options+956)>>2)]=((STRING_TABLE.__str442)|0);
HEAP32[((_pngcrush_options+964)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+972)>>2)]=((STRING_TABLE.__str443)|0);
HEAP32[((_pngcrush_options+980)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+988)>>2)]=((STRING_TABLE.__str444)|0);
HEAP32[((_pngcrush_options+996)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1004)>>2)]=((STRING_TABLE.__str445)|0);
HEAP32[((_pngcrush_options+1012)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1020)>>2)]=((STRING_TABLE.__str446)|0);
HEAP32[((_pngcrush_options+1028)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1036)>>2)]=((STRING_TABLE.__str447)|0);
HEAP32[((_pngcrush_options+1044)>>2)]=((STRING_TABLE.__str448)|0);
HEAP32[((_pngcrush_options+1052)>>2)]=((STRING_TABLE.__str449)|0);
HEAP32[((_pngcrush_options+1060)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1068)>>2)]=((STRING_TABLE.__str450)|0);
HEAP32[((_pngcrush_options+1076)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1084)>>2)]=((STRING_TABLE.__str451)|0);
HEAP32[((_pngcrush_options+1092)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1100)>>2)]=((STRING_TABLE.__str452)|0);
HEAP32[((_pngcrush_options+1108)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1116)>>2)]=((STRING_TABLE.__str453)|0);
HEAP32[((_pngcrush_options+1124)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1132)>>2)]=((STRING_TABLE.__str454)|0);
HEAP32[((_pngcrush_options+1140)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1148)>>2)]=((STRING_TABLE.__str455)|0);
HEAP32[((_pngcrush_options+1156)>>2)]=((STRING_TABLE.__str456)|0);
HEAP32[((_pngcrush_options+1164)>>2)]=((STRING_TABLE.__str457)|0);
HEAP32[((_pngcrush_options+1172)>>2)]=((STRING_TABLE.__str458)|0);
HEAP32[((_pngcrush_options+1180)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1188)>>2)]=((STRING_TABLE.__str459)|0);
HEAP32[((_pngcrush_options+1196)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1204)>>2)]=((STRING_TABLE.__str460)|0);
HEAP32[((_pngcrush_options+1212)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1220)>>2)]=((STRING_TABLE.__str461)|0);
HEAP32[((_pngcrush_options+1228)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1236)>>2)]=((STRING_TABLE.__str462)|0);
HEAP32[((_pngcrush_options+1244)>>2)]=((STRING_TABLE.__str463)|0);
HEAP32[((_pngcrush_options+1252)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1260)>>2)]=((STRING_TABLE.__str464)|0);
HEAP32[((_pngcrush_options+1268)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1276)>>2)]=((STRING_TABLE.__str465)|0);
HEAP32[((_pngcrush_options+1284)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1292)>>2)]=((STRING_TABLE.__str466)|0);
HEAP32[((_pngcrush_options+1300)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1308)>>2)]=((STRING_TABLE.__str467)|0);
HEAP32[((_pngcrush_options+1316)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1324)>>2)]=((STRING_TABLE.__str468)|0);
HEAP32[((_pngcrush_options+1332)>>2)]=((STRING_TABLE.__str469)|0);
HEAP32[((_pngcrush_options+1340)>>2)]=((STRING_TABLE.__str470)|0);
HEAP32[((_pngcrush_options+1348)>>2)]=((STRING_TABLE.__str471)|0);
HEAP32[((_pngcrush_options+1356)>>2)]=((STRING_TABLE.__str472)|0);
HEAP32[((_pngcrush_options+1364)>>2)]=((STRING_TABLE.__str473)|0);
HEAP32[((_pngcrush_options+1372)>>2)]=((STRING_TABLE.__str474)|0);
HEAP32[((_pngcrush_options+1380)>>2)]=((STRING_TABLE.__str475)|0);
HEAP32[((_pngcrush_options+1388)>>2)]=((STRING_TABLE.__str476)|0);
HEAP32[((_pngcrush_options+1396)>>2)]=((STRING_TABLE.__str477)|0);
HEAP32[((_pngcrush_options+1404)>>2)]=((STRING_TABLE.__str478)|0);
HEAP32[((_pngcrush_options+1412)>>2)]=((STRING_TABLE.__str479)|0);
HEAP32[((_pngcrush_options+1420)>>2)]=((STRING_TABLE.__str480)|0);
HEAP32[((_pngcrush_options+1428)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1436)>>2)]=((STRING_TABLE.__str390)|0);
HEAP32[((_pngcrush_options+1444)>>2)]=((STRING_TABLE.__str481)|0);
HEAP32[((_pngcrush_options+1452)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1460)>>2)]=((STRING_TABLE.__str482)|0);
HEAP32[((_pngcrush_options+1468)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1476)>>2)]=((STRING_TABLE.__str483)|0);
HEAP32[((_pngcrush_options+1484)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1492)>>2)]=((STRING_TABLE.__str484)|0);
HEAP32[((_pngcrush_options+1500)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1508)>>2)]=((STRING_TABLE.__str485)|0);
HEAP32[((_pngcrush_options+1516)>>2)]=((STRING_TABLE.__str486)|0);
HEAP32[((_pngcrush_options+1524)>>2)]=((STRING_TABLE.__str487)|0);
HEAP32[((_pngcrush_options+1532)>>2)]=((STRING_TABLE.__str488)|0);
HEAP32[((_pngcrush_options+1540)>>2)]=((STRING_TABLE.__str489)|0);
HEAP32[((_pngcrush_options+1548)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1556)>>2)]=((STRING_TABLE.__str490)|0);
HEAP32[((_pngcrush_options+1564)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1572)>>2)]=((STRING_TABLE.__str491)|0);
HEAP32[((_pngcrush_options+1580)>>2)]=((STRING_TABLE.__str492)|0);
HEAP32[((_pngcrush_options+1588)>>2)]=((STRING_TABLE.__str493)|0);
HEAP32[((_pngcrush_options+1596)>>2)]=((STRING_TABLE.__str494)|0);
HEAP32[((_pngcrush_options+1604)>>2)]=((STRING_TABLE.__str495)|0);
HEAP32[((_pngcrush_options+1612)>>2)]=((STRING_TABLE.__str496)|0);
HEAP32[((_pngcrush_options+1620)>>2)]=((STRING_TABLE.__str497)|0);
HEAP32[((_pngcrush_options+1628)>>2)]=((STRING_TABLE.__str498)|0);
HEAP32[((_pngcrush_options+1636)>>2)]=((STRING_TABLE.__str499)|0);
HEAP32[((_pngcrush_options+1644)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1652)>>2)]=((STRING_TABLE.__str390)|0);
HEAP32[((_pngcrush_options+1660)>>2)]=((STRING_TABLE.__str500)|0);
HEAP32[((_pngcrush_options+1668)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1676)>>2)]=((STRING_TABLE.__str501)|0);
HEAP32[((_pngcrush_options+1684)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1692)>>2)]=((STRING_TABLE.__str502)|0);
HEAP32[((_pngcrush_options+1700)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1708)>>2)]=((STRING_TABLE.__str503)|0);
HEAP32[((_pngcrush_options+1716)>>2)]=((STRING_TABLE.__str504)|0);
HEAP32[((_pngcrush_options+1724)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1732)>>2)]=((STRING_TABLE.__str505)|0);
HEAP32[((_pngcrush_options+1740)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1748)>>2)]=((STRING_TABLE.__str506)|0);
HEAP32[((_pngcrush_options+1756)>>2)]=((STRING_TABLE.__str507)|0);
HEAP32[((_pngcrush_options+1764)>>2)]=((STRING_TABLE.__str508)|0);
HEAP32[((_pngcrush_options+1772)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1780)>>2)]=((STRING_TABLE.__str509)|0);
HEAP32[((_pngcrush_options+1788)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1796)>>2)]=((STRING_TABLE.__str510)|0);
HEAP32[((_pngcrush_options+1804)>>2)]=((STRING_TABLE.__str511)|0);
HEAP32[((_pngcrush_options+1812)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1820)>>2)]=((STRING_TABLE.__str512)|0);
HEAP32[((_pngcrush_options+1828)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1836)>>2)]=((STRING_TABLE.__str510)|0);
HEAP32[((_pngcrush_options+1844)>>2)]=((STRING_TABLE.__str513)|0);
HEAP32[((_pngcrush_options+1852)>>2)]=((STRING_TABLE.__str514)|0);
HEAP32[((_pngcrush_options+1860)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1868)>>2)]=((STRING_TABLE.__str515)|0);
HEAP32[((_pngcrush_options+1876)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1884)>>2)]=((STRING_TABLE.__str516)|0);
HEAP32[((_pngcrush_options+1892)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1900)>>2)]=((STRING_TABLE.__str517)|0);
HEAP32[((_pngcrush_options+1908)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1916)>>2)]=((STRING_TABLE.__str518)|0);
HEAP32[((_pngcrush_options+1924)>>2)]=((STRING_TABLE.__str519)|0);
HEAP32[((_pngcrush_options+1932)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1940)>>2)]=((STRING_TABLE.__str520)|0);
HEAP32[((_pngcrush_options+1948)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+1956)>>2)]=((STRING_TABLE.__str521)|0);
HEAP32[((_pngcrush_options+1964)>>2)]=((STRING_TABLE.__str522)|0);
HEAP32[((_pngcrush_options+1972)>>2)]=((STRING_TABLE.__str523)|0);
HEAP32[((_pngcrush_options+1980)>>2)]=((STRING_TABLE.__str524)|0);
HEAP32[((_pngcrush_options+1988)>>2)]=((STRING_TABLE.__str525)|0);
HEAP32[((_pngcrush_options+1996)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2004)>>2)]=((STRING_TABLE.__str526)|0);
HEAP32[((_pngcrush_options+2012)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2020)>>2)]=((STRING_TABLE.__str527)|0);
HEAP32[((_pngcrush_options+2028)>>2)]=((STRING_TABLE.__str528)|0);
HEAP32[((_pngcrush_options+2036)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2044)>>2)]=((STRING_TABLE.__str529)|0);
HEAP32[((_pngcrush_options+2052)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2060)>>2)]=((STRING_TABLE.__str530)|0);
HEAP32[((_pngcrush_options+2068)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2076)>>2)]=((STRING_TABLE.__str531)|0);
HEAP32[((_pngcrush_options+2084)>>2)]=((STRING_TABLE.__str532)|0);
HEAP32[((_pngcrush_options+2092)>>2)]=((STRING_TABLE.__str533)|0);
HEAP32[((_pngcrush_options+2100)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2108)>>2)]=((STRING_TABLE.__str534)|0);
HEAP32[((_pngcrush_options+2116)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2124)>>2)]=((STRING_TABLE.__str535)|0);
HEAP32[((_pngcrush_options+2132)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2140)>>2)]=((STRING_TABLE.__str390)|0);
HEAP32[((_pngcrush_options+2148)>>2)]=((STRING_TABLE.__str536)|0);
HEAP32[((_pngcrush_options+2156)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2164)>>2)]=((STRING_TABLE.__str537)|0);
HEAP32[((_pngcrush_options+2172)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_options+2180)>>2)]=((STRING_TABLE.__str538)|0);
HEAP32[((_pngcrush_legal)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_legal+4)>>2)]=((STRING_TABLE.__str545)|0);
HEAP32[((_pngcrush_legal+8)>>2)]=((STRING_TABLE.__str546)|0);
HEAP32[((_pngcrush_legal+12)>>2)]=((STRING_TABLE.__str547)|0);
HEAP32[((_pngcrush_legal+16)>>2)]=((STRING_TABLE.__str548)|0);
HEAP32[((_pngcrush_legal+20)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_legal+24)>>2)]=((STRING_TABLE.__str549)|0);
HEAP32[((_pngcrush_legal+28)>>2)]=((STRING_TABLE.__str550)|0);
HEAP32[((_pngcrush_legal+32)>>2)]=((STRING_TABLE.__str551)|0);
HEAP32[((_pngcrush_legal+36)>>2)]=((STRING_TABLE.__str552)|0);
HEAP32[((_pngcrush_legal+40)>>2)]=((STRING_TABLE.__str553)|0);
HEAP32[((_pngcrush_legal+44)>>2)]=((STRING_TABLE.__str554)|0);
HEAP32[((_pngcrush_legal+48)>>2)]=((STRING_TABLE.__str555)|0);
HEAP32[((_pngcrush_legal+52)>>2)]=((STRING_TABLE.__str556)|0);
HEAP32[((_pngcrush_legal+56)>>2)]=((STRING_TABLE.__str557)|0);
HEAP32[((_pngcrush_legal+60)>>2)]=((STRING_TABLE.__str558)|0);
HEAP32[((_pngcrush_legal+64)>>2)]=((STRING_TABLE.__str559)|0);
HEAP32[((_pngcrush_legal+68)>>2)]=((STRING_TABLE.__str560)|0);
HEAP32[((_pngcrush_legal+72)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_legal+76)>>2)]=((STRING_TABLE.__str561)|0);
HEAP32[((_pngcrush_legal+80)>>2)]=((STRING_TABLE.__str562)|0);
HEAP32[((_pngcrush_legal+84)>>2)]=((STRING_TABLE.__str563)|0);
HEAP32[((_pngcrush_legal+88)>>2)]=((STRING_TABLE.__str564)|0);
HEAP32[((_pngcrush_legal+92)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_legal+96)>>2)]=((STRING_TABLE.__str565)|0);
HEAP32[((_pngcrush_legal+100)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_legal+104)>>2)]=((STRING_TABLE.__str566)|0);
HEAP32[((_pngcrush_legal+108)>>2)]=((STRING_TABLE.__str567)|0);
HEAP32[((_pngcrush_legal+112)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_legal+116)>>2)]=((STRING_TABLE.__str568)|0);
HEAP32[((_pngcrush_legal+120)>>2)]=((STRING_TABLE.__str569)|0);
HEAP32[((_pngcrush_legal+124)>>2)]=((__str360)|0);
HEAP32[((_pngcrush_usage)>>2)]=((STRING_TABLE.__str542)|0);
HEAP32[((_pngcrush_usage+4)>>2)]=((STRING_TABLE.__str543)|0);
HEAP32[((_pngcrush_usage+8)>>2)]=((STRING_TABLE.__str544)|0);
HEAP32[((_static_l_desc)>>2)]=((_static_ltree)|0);
HEAP32[((_static_l_desc+4)>>2)]=((_extra_lbits)|0);
HEAP32[((_static_d_desc)>>2)]=((_static_dtree)|0);
HEAP32[((_static_d_desc+4)>>2)]=((_extra_dbits)|0);
HEAP32[((_static_bl_desc+4)>>2)]=((_extra_blbits)|0);
HEAP32[((_z_errmsg)>>2)]=((STRING_TABLE.__str1329)|0);
HEAP32[((_z_errmsg+4)>>2)]=((STRING_TABLE.__str11330)|0);
HEAP32[((_z_errmsg+8)>>2)]=((__str21331)|0);
HEAP32[((_z_errmsg+12)>>2)]=((STRING_TABLE.__str31332)|0);
HEAP32[((_z_errmsg+16)>>2)]=((STRING_TABLE.__str41333)|0);
HEAP32[((_z_errmsg+20)>>2)]=((STRING_TABLE.__str51334)|0);
HEAP32[((_z_errmsg+24)>>2)]=((STRING_TABLE.__str61335)|0);
HEAP32[((_z_errmsg+28)>>2)]=((STRING_TABLE.__str71336)|0);
HEAP32[((_z_errmsg+32)>>2)]=((STRING_TABLE.__str81337)|0);
HEAP32[((_z_errmsg+36)>>2)]=((__str21331)|0);
FUNCTION_TABLE = [0,0,_png_cexcept_error,0,_png_debug_malloc,0,_png_debug_free,0,_png_zalloc,0,_png_zfree,0,_longjmp,0,_png_default_read_data,0,_png_read_filter_row_sub,0,_png_read_filter_row_up,0,_png_read_filter_row_avg,0,_png_read_filter_row_paeth_1byte_pixel,0,_png_read_filter_row_paeth_multibyte_pixel,0,_png_default_write_data,0,_png_default_flush,0,_deflate_stored,0,_deflate_fast,0,_deflate_slow,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  if (Module['setStatus']) {
    Module['setStatus'](''); // clear the status from "Downloading.." etc.
  }

  if (Module['preRun']) {
    Module['preRun']();
  }

  var ret = null;
  if (Module['_main']) {
    preMain();
    ret = Module.callMain(args);
    if (!Module['noExitRuntime']) {
      exitRuntime();
    }
  }

  if (Module['postRun']) {
    Module['postRun']();
  }

  return ret;
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

initRuntime();

if (Module['noInitialRun']) {
  addRunDependency();
}

if (runDependencies == 0) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_pngcrush_default_read_data","_png_defaultwrite_data","_png_debug_malloc","_png_debug_free","_pngcrush_pause","_png_skip_chunk","_keep_unknown_chunk","_keep_chunk","_show_result","_main","_print_version_info","_measure_idats","_print_usage","_png_cexcept_error","_png_measure_idat","_png_get_header_ver","_png_set_sig_bytes","_png_sig_cmp","_png_zalloc","_png_zfree","_png_reset_crc","_png_calculate_crc","_png_user_version_check","_png_create_info_struct","_png_info_init_3","_png_destroy_info_struct","_png_info_destroy","_png_get_header_version","_png_get_io_ptr","_png_init_io","_png_free_data","_png_handle_as_unknown","_png_chunk_unknown_handling","_png_64bit_product","_png_check_cHRM_fixed","_png_muldiv","_png_XYZ_from_xy","_png_reciprocal","_png_XYZ_from_xy_checked","_png_check_fp_number","_png_check_IHDR","_png_check_fp_string","_png_pow10","_png_gamma_significant","_png_ascii_from_fp","_png_reciprocal2","_png_gamma_8bit_correct","_png_gamma_16bit_correct","_png_gamma_correct","_png_destroy_gamma_table","_png_build_gamma_table","_png_build_8bit_table","_png_build_16to8_table","_png_product2","_png_build_16bit_table","_png_safecat","_png_format_number","_png_format_buffer","_png_error","_png_default_error","_png_warning","_png_default_warning","_png_warning_parameter","_png_warning_parameter_unsigned","_png_warning_parameter_signed","_png_formatted_warning","_png_benign_error","_png_chunk_error","_png_chunk_warning","_png_set_longjmp_fn","_png_set_error_fn","_png_get_rowbytes","_png_get_bKGD","_png_get_cHRM_fixed","_png_get_gAMA_fixed","_png_get_sRGB","_png_get_iCCP","_png_get_sPLT","_png_get_hIST","_png_get_oFFs","_png_get_pCAL","_png_chunk_benign_error","_png_longjmp","_png_get_IHDR","_png_get_pHYs","_png_get_PLTE","_png_get_sBIT","_png_get_text","_png_get_tIME","_png_get_tRNS","_png_get_unknown_chunks","_png_get_rgb_to_gray_status","_png_get_compression_buffer_size","_png_get_sCAL","_png_create_struct","_png_create_struct_2","_png_destroy_struct","_png_destroy_struct_2","_png_calloc","_png_malloc","_png_malloc_default","_png_free","_png_free_default","_png_malloc_warn","_png_set_mem_fn","_png_create_read_struct","_png_create_read_struct_2","_png_read_info","_png_read_row","_png_read_end","_png_destroy_read_struct","_png_read_destroy","_png_read_data","_png_default_read_data","_png_set_read_fn","_png_set_strip_alpha","_png_set_expand","_png_set_expand_gray_1_2_4_to_8","_png_set_crc_action","_png_set_gray_to_rgb","_png_set_rgb_to_gray_fixed","_png_init_read_transformations","_png_init_palette_transformations","_png_init_rgb_transformations","_png_gamma_threshold","_png_read_transform_info","_png_do_read_transformations","_png_do_expand_palette","_png_do_expand","_png_do_rgb_to_gray","_png_do_gray_to_rgb","_png_do_compose","_png_do_gamma","_png_do_scale_16_to_8","_png_do_chop","_png_do_quantize","_png_do_expand_16","_png_do_encode_alpha","_png_do_unshift","_png_do_unpack","_png_do_read_filler","_png_do_read_invert_alpha","_png_do_read_swap_alpha","_png_do_read_intrapixel","_png_get_uint_31","_png_read_sig","_png_read_chunk_header","_png_check_chunk_name","_png_crc_read","_png_crc_finish","_png_crc_error","_png_decompress_chunk","_png_inflate","_png_handle_IHDR","_png_handle_PLTE","_png_handle_IEND","_png_handle_gAMA","_png_get_fixed_point","_png_handle_sBIT","_png_handle_cHRM","_png_handle_sRGB","_png_handle_iCCP","_png_handle_sPLT","_png_handle_tRNS","_png_handle_bKGD","_png_handle_hIST","_png_handle_pHYs","_png_handle_oFFs","_png_handle_pCAL","_png_handle_sCAL","_png_handle_tIME","_png_handle_tEXt","_png_handle_zTXt","_png_handle_iTXt","_png_handle_unknown","_png_combine_row","_png_init_filter_functions","_png_do_read_interlace","_png_read_filter_row","_png_read_finish_row","_png_read_filter_row_sub","_png_read_filter_row_up","_png_read_filter_row_avg","_png_read_start_row","_png_read_filter_row_paeth_1byte_pixel","_png_read_filter_row_paeth_multibyte_pixel","_png_set_oFFs","_png_set_bKGD","_png_set_cHRM_fixed","_png_set_gAMA_fixed","_png_set_hIST","_png_set_IHDR","_png_set_pHYs","_png_set_sRGB","_png_set_pCAL","_png_set_sCAL_s","_png_set_sCAL","_png_set_PLTE","_png_set_sBIT","_png_set_sRGB_gAMA_and_cHRM","_png_set_iCCP","_png_set_text","_png_set_text_2","_png_set_tIME","_png_set_tRNS","_png_set_unknown_chunk_location","_png_permit_mng_features","_png_set_user_limits","_png_set_chunk_cache_max","_png_set_chunk_malloc_max","_png_set_packing","_png_set_interlace_handling","_png_set_filler","_png_set_sPLT","_png_set_unknown_chunks","_png_set_keep_unknown_chunks","_png_set_compression_buffer_size","_png_set_shift","_png_do_invert","_png_do_swap","_png_do_packswap","_png_do_strip_channel","_png_do_bgr","_png_do_check_palette_indexes","_png_write_data","_png_default_write_data","_png_flush","_png_default_flush","_png_set_write_fn","_png_write_info_before_PLTE","_png_write_info","_png_write_end","_png_create_write_struct_2","_png_reset_filter_heuristics","_png_write_row","_png_write_flush","_png_destroy_write_struct","_png_write_destroy","_png_set_compression_level","_png_set_compression_mem_level","_png_set_compression_strategy","_png_set_filter","_png_set_compression_window_bits","_png_do_write_transformations","_png_do_pack","_png_do_shift","_png_do_write_swap_alpha","_png_do_write_invert_alpha","_png_do_write_intrapixel","_png_save_uint_32","_png_save_int_32","_png_save_uint_16","_png_write_sig","_png_write_chunk_header","_png_write_chunk_data","_png_write_chunk_end","_png_write_chunk","_png_write_complete_chunk","_png_write_IHDR","_png_write_PLTE","_png_write_IDAT","_png_write_IEND","_png_write_gAMA_fixed","_png_write_sRGB","_png_write_iCCP","_png_check_keyword","_png_text_compress","_png_write_compressed_data_out","_png_write_sPLT","_png_write_sBIT","_png_write_cHRM_fixed","_png_write_tRNS","_png_write_bKGD","_png_write_hIST","_png_write_tEXt","_png_write_zTXt","_png_write_iTXt","_png_write_oFFs","_png_write_pCAL","_png_write_sCAL_s","_png_write_pHYs","_png_write_tIME","_png_write_start_row","_png_zlib_claim","_png_write_finish_row","_png_zlib_release","_png_do_write_interlace","_png_write_find_filter","_adler32","_png_write_filtered_row","_crc32","_crc32_little","_crc32_big","_deflateInit2_","_deflateEnd","_deflateReset","_fill_window","_deflateResetKeep","_lm_init","_deflate","_putShortMSB","_flush_pending","_deflate_huff","_deflate_rle","_read_buf","_deflate_stored","_deflate_fast","_deflate_slow","_longest_match","_inflate_fast","_inflateResetKeep","_inflateReset","_inflateReset2","_inflateInit2_","_inflateInit_","_inflate","_fixedtables1309","_updatewindow","_inflateEnd","_tr_static_init","_init_block","_inflate_table","__tr_init","_bi_flush","__tr_stored_block","_copy_block","__tr_flush_bits","__tr_align","__tr_flush_block","_detect_data_type","_build_tree","_build_bl_tree","_compress_block","_bi_windup","_send_all_trees","_send_tree","_bi_reverse","_scan_tree","_pqdownheap","_gen_bitlen","_gen_codes","_zmemcpy","_zmemzero","_malloc","_tmalloc_small","_tmalloc_large","_sys_alloc","_free","_sys_trim","_segment_holding","_release_unused_segments","_init_mparams","_init_top","_mmap_alloc","_init_bins","_prepend_alloc","_add_segment"]

